var JSxCAD =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./JSxCAD.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../algorithm/assembly/addTag.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/addTag.js ***!
  \*************************************************************************/
/*! exports provided: addTag */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addTag\", function() { return addTag; });\nconst addTag = (tag, geometry) => {\r\n  const copy = Object.assign({}, geometry);\r\n  if (copy.tags) {\r\n    copy.tags = [tag, ...copy.tags];\r\n  } else {\r\n    copy.tags = [tag];\r\n  }\r\n  return copy;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/addTag.js?");

/***/ }),

/***/ "../../algorithm/assembly/assemble.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/assemble.js ***!
  \***************************************************************************/
/*! exports provided: assemble */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assemble\", function() { return assemble; });\nconst assemble = (...taggedGeometries) => ({ assembly: taggedGeometries });\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/assemble.js?");

/***/ }),

/***/ "../../algorithm/assembly/canonicalize.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/canonicalize.js ***!
  \*******************************************************************************/
/*! exports provided: canonicalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return canonicalize; });\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n/* harmony import */ var _jsxcad_algorithm_points__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-points */ \"../../algorithm/points/main.js\");\n/* harmony import */ var _jsxcad_algorithm_solid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-solid */ \"../../algorithm/solid/main.js\");\n/* harmony import */ var _jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jsxcad/algorithm-surface */ \"../../algorithm/surface/main.js\");\n\r\n\r\n\r\n\r\n\r\nconst canonicalize = (geometry) => {\r\n  const canonicalized = {};\r\n  if (geometry.points) {\r\n    canonicalized.points = Object(_jsxcad_algorithm_points__WEBPACK_IMPORTED_MODULE_1__[\"canonicalize\"])(geometry.points);\r\n  }\r\n  if (geometry.paths) {\r\n    canonicalized.paths = Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"])(geometry.paths);\r\n  }\r\n  if (geometry.z0Surface) {\r\n    canonicalized.z0Surface = Object(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_3__[\"canonicalize\"])(geometry.z0Surface);\r\n  }\r\n  if (geometry.solid) {\r\n    canonicalized.solid = Object(_jsxcad_algorithm_solid__WEBPACK_IMPORTED_MODULE_2__[\"canonicalize\"])(geometry.solid);\r\n  }\r\n  if (geometry.assembly) {\r\n    canonicalized.assembly = geometry.assembly.map(canonicalize);\r\n  }\r\n  if (geometry.tags !== undefined) {\r\n    canonicalized.tags = geometry.tags;\r\n  }\r\n  return canonicalized;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/canonicalize.js?");

/***/ }),

/***/ "../../algorithm/assembly/difference.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/difference.js ***!
  \*****************************************************************************/
/*! exports provided: difference */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"difference\", function() { return difference; });\n/* harmony import */ var _filterAndFlattenAssemblyData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filterAndFlattenAssemblyData */ \"../../algorithm/assembly/filterAndFlattenAssemblyData.js\");\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n/* harmony import */ var _jsxcad_algorithm_bsp_surfaces__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-bsp-surfaces */ \"../../algorithm/bsp-surfaces/main.js\");\n/* harmony import */ var _jsxcad_algorithm_z0surface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jsxcad/algorithm-z0surface */ \"../../algorithm/z0surface/main.js\");\n\r\n\r\n\r\n\r\n\r\nconst difference = (...geometries) => {\r\n  const assembly = { assembly: geometries };\r\n  const pathsData = Object(_filterAndFlattenAssemblyData__WEBPACK_IMPORTED_MODULE_0__[\"filterAndFlattenAssemblyData\"])({ form: 'paths' }, assembly);\r\n  const solidData = Object(_filterAndFlattenAssemblyData__WEBPACK_IMPORTED_MODULE_0__[\"filterAndFlattenAssemblyData\"])({ form: 'solid' }, assembly);\r\n  const z0SurfaceData = Object(_filterAndFlattenAssemblyData__WEBPACK_IMPORTED_MODULE_0__[\"filterAndFlattenAssemblyData\"])({ form: 'z0Surface' }, assembly);\r\n  const differenced = { assembly: [] };\r\n  if (pathsData.length > 0) {\r\n    differenced.assembly.push({ paths: Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__[\"difference\"])(...pathsData) });\r\n  }\r\n  if (solidData.length > 0) {\r\n    differenced.assembly.push({ solid: Object(_jsxcad_algorithm_bsp_surfaces__WEBPACK_IMPORTED_MODULE_2__[\"difference\"])(...solidData) });\r\n  }\r\n  if (z0SurfaceData.length > 0) {\r\n    differenced.assembly.push({ z0Surface: Object(_jsxcad_algorithm_z0surface__WEBPACK_IMPORTED_MODULE_3__[\"difference\"])(...z0SurfaceData) });\r\n  }\r\n  return differenced;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/difference.js?");

/***/ }),

/***/ "../../algorithm/assembly/differenceItems.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/differenceItems.js ***!
  \**********************************************************************************/
/*! exports provided: differenceItems */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"differenceItems\", function() { return differenceItems; });\n/* harmony import */ var _jsxcad_algorithm_bsp_surfaces__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-bsp-surfaces */ \"../../algorithm/bsp-surfaces/main.js\");\n/* harmony import */ var _jsxcad_algorithm_z0surface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-z0surface */ \"../../algorithm/z0surface/main.js\");\n\r\n\r\n\r\nconst differenceItems = (base, ...subtractions) => {\r\n  const differenced = { tags: base.tags };\r\n  if (base.solid) {\r\n    differenced.solid = base.solid;\r\n    for (const subtraction of subtractions) {\r\n      if (subtraction.solid) {\r\n        differenced.solid = Object(_jsxcad_algorithm_bsp_surfaces__WEBPACK_IMPORTED_MODULE_0__[\"difference\"])(differenced.solid, subtraction.solid);\r\n      }\r\n    }\r\n  } else if (base.z0Surface) {\r\n    differenced.z0Surface = base.z0Surface;\r\n    for (const subtraction of subtractions) {\r\n      if (subtraction.z0Surface) {\r\n        differenced.z0Surface = Object(_jsxcad_algorithm_z0surface__WEBPACK_IMPORTED_MODULE_1__[\"difference\"])(differenced.z0Surface, subtraction.z0Surface);\r\n      }\r\n    }\r\n    return differenced;\r\n  } else if (base.paths) {\r\n    differenced.paths = base.paths;\r\n    // FIX: Figure out how paths differencing should work.\r\n  }\r\n  return differenced;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/differenceItems.js?");

/***/ }),

/***/ "../../algorithm/assembly/eachItem.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/eachItem.js ***!
  \***************************************************************************/
/*! exports provided: eachItem */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eachItem\", function() { return eachItem; });\nconst eachItem = (geometry, operation) => {\r\n  const walk = (geometry) => {\r\n    if (geometry.assembly) {\r\n      geometry.assembly.forEach(walk);\r\n    }\r\n    operation(geometry);\r\n  };\r\n  walk(geometry);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/eachItem.js?");

/***/ }),

/***/ "../../algorithm/assembly/eachPoint.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/eachPoint.js ***!
  \****************************************************************************/
/*! exports provided: eachPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eachPoint\", function() { return eachPoint; });\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n/* harmony import */ var _jsxcad_algorithm_solid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-solid */ \"../../algorithm/solid/main.js\");\n/* harmony import */ var _jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-surface */ \"../../algorithm/surface/main.js\");\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./map */ \"../../algorithm/assembly/map.js\");\n\r\n\r\n\r\n\r\n\r\nconst eachPoint = (options, operation, geometry) => {\r\n  Object(_map__WEBPACK_IMPORTED_MODULE_3__[\"map\"])(geometry,\r\n      (geometry) => {\r\n        if (geometry.paths) {\r\n          Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_0__[\"eachPoint\"])(options, operation, geometry.paths);\r\n        }\r\n        if (geometry.solid) {\r\n          Object(_jsxcad_algorithm_solid__WEBPACK_IMPORTED_MODULE_1__[\"eachPoint\"])(options, operation, geometry.solid);\r\n        }\r\n        if (geometry.z0Surface) {\r\n          Object(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_2__[\"eachPoint\"])(options, operation, geometry.z0Surface);\r\n        }\r\n      });\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/eachPoint.js?");

/***/ }),

/***/ "../../algorithm/assembly/filterAndFlattenAssemblyData.js":
/*!***********************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/filterAndFlattenAssemblyData.js ***!
  \***********************************************************************************************/
/*! exports provided: filterAndFlattenAssemblyData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"filterAndFlattenAssemblyData\", function() { return filterAndFlattenAssemblyData; });\n/* harmony import */ var _hasMatchingTag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hasMatchingTag */ \"../../algorithm/assembly/hasMatchingTag.js\");\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./map */ \"../../algorithm/assembly/map.js\");\n\r\n\r\n\r\n// This needs to recursively walk the assembly.\r\nconst filterAndFlattenAssemblyData = ({ requires, excludes, form }, geometry) => {\r\n  const filtered = [];\r\n  const filter = (item) => {\r\n    const data = item[form];\r\n    if (data === undefined || Object(_hasMatchingTag__WEBPACK_IMPORTED_MODULE_0__[\"hasMatchingTag\"])(excludes, item.tags)) {\r\n      return item;\r\n    }\r\n    if (Object(_hasMatchingTag__WEBPACK_IMPORTED_MODULE_0__[\"hasMatchingTag\"])(requires, item.tags, true)) {\r\n      filtered.push(data);\r\n    }\r\n    return item;\r\n  };\r\n  Object(_map__WEBPACK_IMPORTED_MODULE_1__[\"map\"])(geometry, filter);\r\n  return filtered;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/filterAndFlattenAssemblyData.js?");

/***/ }),

/***/ "../../algorithm/assembly/flip.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/flip.js ***!
  \***********************************************************************/
/*! exports provided: flip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return flip; });\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n/* harmony import */ var _jsxcad_algorithm_points__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-points */ \"../../algorithm/points/main.js\");\n/* harmony import */ var _jsxcad_algorithm_solid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-solid */ \"../../algorithm/solid/main.js\");\n/* harmony import */ var _jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jsxcad/algorithm-surface */ \"../../algorithm/surface/main.js\");\n\r\n\r\n\r\n\r\n\r\nconst flipEntry = (entry) => {\r\n  const flipped = {};\r\n  if (entry.points) {\r\n    flipped.points = Object(_jsxcad_algorithm_points__WEBPACK_IMPORTED_MODULE_1__[\"flip\"])(entry.points);\r\n  }\r\n  if (entry.paths) {\r\n    flipped.paths = Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_0__[\"flip\"])(entry.paths);\r\n  }\r\n  if (entry.surface) {\r\n    flipped.surface = Object(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_3__[\"flip\"])(entry.surface);\r\n  }\r\n  if (entry.solid) {\r\n    flipped.solid = Object(_jsxcad_algorithm_solid__WEBPACK_IMPORTED_MODULE_2__[\"flip\"])(entry.solid);\r\n  }\r\n  if (entry.assembly) {\r\n    flipped.assembly = flip(entry.assembly);\r\n  }\r\n  flipped.tags = entry.tags;\r\n  return flipped;\r\n};\r\n\r\nconst flip = (assembly) => assembly.map(flipEntry);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/flip.js?");

/***/ }),

/***/ "../../algorithm/assembly/hasMatchingTag.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/hasMatchingTag.js ***!
  \*********************************************************************************/
/*! exports provided: hasMatchingTag */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hasMatchingTag\", function() { return hasMatchingTag; });\nconst hasMatchingTag = (set, tags, whenSetUndefined = false) => {\r\n  if (set === undefined) {\r\n    return whenSetUndefined;\r\n  } else if (tags !== undefined && tags.some(tag => set.includes(tag))) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/hasMatchingTag.js?");

/***/ }),

/***/ "../../algorithm/assembly/intersection.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/intersection.js ***!
  \*******************************************************************************/
/*! exports provided: intersection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"intersection\", function() { return intersection; });\n/* harmony import */ var _filterAndFlattenAssemblyData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filterAndFlattenAssemblyData */ \"../../algorithm/assembly/filterAndFlattenAssemblyData.js\");\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n/* harmony import */ var _jsxcad_algorithm_bsp_surfaces__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-bsp-surfaces */ \"../../algorithm/bsp-surfaces/main.js\");\n/* harmony import */ var _jsxcad_algorithm_z0surface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jsxcad/algorithm-z0surface */ \"../../algorithm/z0surface/main.js\");\n\r\n\r\n\r\n\r\n\r\nconst intersection = (...geometries) => {\r\n  const assembly = { assembly: geometries };\r\n  const pathsData = Object(_filterAndFlattenAssemblyData__WEBPACK_IMPORTED_MODULE_0__[\"filterAndFlattenAssemblyData\"])({ form: 'paths' }, assembly);\r\n  const solidData = Object(_filterAndFlattenAssemblyData__WEBPACK_IMPORTED_MODULE_0__[\"filterAndFlattenAssemblyData\"])({ form: 'solid' }, assembly);\r\n  const z0SurfaceData = Object(_filterAndFlattenAssemblyData__WEBPACK_IMPORTED_MODULE_0__[\"filterAndFlattenAssemblyData\"])({ form: 'z0Surface' }, assembly);\r\n  const intersectioned = { assembly: [] };\r\n  if (pathsData.length > 0) {\r\n    intersectioned.assembly.push({ paths: Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__[\"intersection\"])(...pathsData) });\r\n  }\r\n  if (solidData.length > 0) {\r\n    intersectioned.assembly.push({ solid: Object(_jsxcad_algorithm_bsp_surfaces__WEBPACK_IMPORTED_MODULE_2__[\"intersection\"])(...solidData) });\r\n  }\r\n  if (z0SurfaceData.length > 0) {\r\n    intersectioned.assembly.push({ z0Surface: Object(_jsxcad_algorithm_z0surface__WEBPACK_IMPORTED_MODULE_3__[\"intersection\"])(...z0SurfaceData) });\r\n  }\r\n  return intersectioned;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/intersection.js?");

/***/ }),

/***/ "../../algorithm/assembly/main.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/main.js ***!
  \***********************************************************************/
/*! exports provided: addTag, assemble, canonicalize, difference, eachItem, eachPoint, flip, intersection, toComponents, toDisjointGeometry, toPaths, toSolid, toZ0Surface, transform, union, rotateX, rotateY, rotateZ, translate, scale */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateX\", function() { return rotateX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateY\", function() { return rotateY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateZ\", function() { return rotateZ; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"translate\", function() { return translate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n/* harmony import */ var _addTag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./addTag */ \"../../algorithm/assembly/addTag.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"addTag\", function() { return _addTag__WEBPACK_IMPORTED_MODULE_1__[\"addTag\"]; });\n\n/* harmony import */ var _assemble__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./assemble */ \"../../algorithm/assembly/assemble.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"assemble\", function() { return _assemble__WEBPACK_IMPORTED_MODULE_2__[\"assemble\"]; });\n\n/* harmony import */ var _canonicalize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./canonicalize */ \"../../algorithm/assembly/canonicalize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return _canonicalize__WEBPACK_IMPORTED_MODULE_3__[\"canonicalize\"]; });\n\n/* harmony import */ var _difference__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./difference */ \"../../algorithm/assembly/difference.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"difference\", function() { return _difference__WEBPACK_IMPORTED_MODULE_4__[\"difference\"]; });\n\n/* harmony import */ var _eachItem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./eachItem */ \"../../algorithm/assembly/eachItem.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"eachItem\", function() { return _eachItem__WEBPACK_IMPORTED_MODULE_5__[\"eachItem\"]; });\n\n/* harmony import */ var _eachPoint__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./eachPoint */ \"../../algorithm/assembly/eachPoint.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"eachPoint\", function() { return _eachPoint__WEBPACK_IMPORTED_MODULE_6__[\"eachPoint\"]; });\n\n/* harmony import */ var _flip__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./flip */ \"../../algorithm/assembly/flip.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return _flip__WEBPACK_IMPORTED_MODULE_7__[\"flip\"]; });\n\n/* harmony import */ var _intersection__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./intersection */ \"../../algorithm/assembly/intersection.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"intersection\", function() { return _intersection__WEBPACK_IMPORTED_MODULE_8__[\"intersection\"]; });\n\n/* harmony import */ var _toComponents__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./toComponents */ \"../../algorithm/assembly/toComponents.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toComponents\", function() { return _toComponents__WEBPACK_IMPORTED_MODULE_9__[\"toComponents\"]; });\n\n/* harmony import */ var _toDisjointGeometry__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./toDisjointGeometry */ \"../../algorithm/assembly/toDisjointGeometry.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toDisjointGeometry\", function() { return _toDisjointGeometry__WEBPACK_IMPORTED_MODULE_10__[\"toDisjointGeometry\"]; });\n\n/* harmony import */ var _toPaths__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./toPaths */ \"../../algorithm/assembly/toPaths.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toPaths\", function() { return _toPaths__WEBPACK_IMPORTED_MODULE_11__[\"toPaths\"]; });\n\n/* harmony import */ var _toSolid__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./toSolid */ \"../../algorithm/assembly/toSolid.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toSolid\", function() { return _toSolid__WEBPACK_IMPORTED_MODULE_12__[\"toSolid\"]; });\n\n/* harmony import */ var _toZ0Surface__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./toZ0Surface */ \"../../algorithm/assembly/toZ0Surface.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toZ0Surface\", function() { return _toZ0Surface__WEBPACK_IMPORTED_MODULE_13__[\"toZ0Surface\"]; });\n\n/* harmony import */ var _transform__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./transform */ \"../../algorithm/assembly/transform.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return _transform__WEBPACK_IMPORTED_MODULE_14__[\"transform\"]; });\n\n/* harmony import */ var _union__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./union */ \"../../algorithm/assembly/union.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"union\", function() { return _union__WEBPACK_IMPORTED_MODULE_15__[\"union\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst rotateX = (angle, assembly) => Object(_transform__WEBPACK_IMPORTED_MODULE_14__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromXRotation\"])(angle), assembly);\r\nconst rotateY = (angle, assembly) => Object(_transform__WEBPACK_IMPORTED_MODULE_14__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromYRotation\"])(angle), assembly);\r\nconst rotateZ = (angle, assembly) => Object(_transform__WEBPACK_IMPORTED_MODULE_14__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromZRotation\"])(angle), assembly);\r\nconst translate = (vector, assembly) => Object(_transform__WEBPACK_IMPORTED_MODULE_14__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromTranslation\"])(vector), assembly);\r\nconst scale = (vector, assembly) => Object(_transform__WEBPACK_IMPORTED_MODULE_14__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromScaling\"])(vector), assembly);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/main.js?");

/***/ }),

/***/ "../../algorithm/assembly/map.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/map.js ***!
  \**********************************************************************/
/*! exports provided: map */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"map\", function() { return map; });\nconst map = (geometry, operation) => {\r\n  const walk = (geometry) => {\r\n    if (geometry.assembly) {\r\n      return operation({ assembly: geometry.assembly.map(walk), tags: geometry.tags });\r\n    } else {\r\n      return operation(geometry);\r\n    }\r\n  };\r\n  return walk(geometry);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/map.js?");

/***/ }),

/***/ "../../algorithm/assembly/toComponents.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/toComponents.js ***!
  \*******************************************************************************/
/*! exports provided: toComponents */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toComponents\", function() { return toComponents; });\n/* harmony import */ var _hasMatchingTag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hasMatchingTag */ \"../../algorithm/assembly/hasMatchingTag.js\");\n\r\n\r\nconst toComponents = ({ requires, excludes }, geometry) => {\r\n  const components = [];\r\n\r\n  const walk = (geometry) => {\r\n    for (const item of geometry.assembly) {\r\n      if (Object(_hasMatchingTag__WEBPACK_IMPORTED_MODULE_0__[\"hasMatchingTag\"])(excludes, item.tags)) {\r\n        continue;\r\n      } else if (Object(_hasMatchingTag__WEBPACK_IMPORTED_MODULE_0__[\"hasMatchingTag\"])(requires, item.tags, true)) {\r\n        components.push(item);\r\n      } else if (item.assembly !== undefined) {\r\n        walk(item);\r\n      }\r\n    }\r\n  };\r\n  walk(geometry);\r\n  return components;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/toComponents.js?");

/***/ }),

/***/ "../../algorithm/assembly/toDisjointGeometry.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/toDisjointGeometry.js ***!
  \*************************************************************************************/
/*! exports provided: toDisjointGeometry */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toDisjointGeometry\", function() { return toDisjointGeometry; });\n/* harmony import */ var _differenceItems__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./differenceItems */ \"../../algorithm/assembly/differenceItems.js\");\n\r\n\r\n// Traverse the assembly tree and disjoint it backward.\r\nconst toDisjointGeometry = (geometry) => {\r\n  if (geometry.assembly === undefined) {\r\n    // A singleton is disjoint.\r\n    return geometry;\r\n  } else {\r\n    const subtractions = [];\r\n    const walk = (geometry, disjointed) => {\r\n      for (let nth = geometry.assembly.length - 1; nth >= 0; nth--) {\r\n        const item = geometry.assembly[nth];\r\n        if (item.assembly !== undefined) {\r\n          disjointed.assembly.push(walk(item, { assembly: [], tags: item.tags }));\r\n        } else {\r\n          const differenced = Object(_differenceItems__WEBPACK_IMPORTED_MODULE_0__[\"differenceItems\"])(item, ...subtractions);\r\n          disjointed.assembly.push(differenced);\r\n          subtractions.push(differenced);\r\n        }\r\n      }\r\n      return disjointed;\r\n    };\r\n    const result = walk(geometry, { assembly: [], tags: geometry.tags });\r\n    return result;\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/toDisjointGeometry.js?");

/***/ }),

/***/ "../../algorithm/assembly/toPaths.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/toPaths.js ***!
  \**************************************************************************/
/*! exports provided: toPaths */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toPaths\", function() { return toPaths; });\n/* harmony import */ var _filterAndFlattenAssemblyData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filterAndFlattenAssemblyData */ \"../../algorithm/assembly/filterAndFlattenAssemblyData.js\");\n/* harmony import */ var _toDisjointGeometry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toDisjointGeometry */ \"../../algorithm/assembly/toDisjointGeometry.js\");\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n\r\n\r\n\r\n\r\nconst toPaths = ({ requires, excludes }, assembly) =>\r\n  ({\r\n    paths: Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_2__[\"union\"])(...Object(_filterAndFlattenAssemblyData__WEBPACK_IMPORTED_MODULE_0__[\"filterAndFlattenAssemblyData\"])({ requires, excludes, form: 'paths' }, Object(_toDisjointGeometry__WEBPACK_IMPORTED_MODULE_1__[\"toDisjointGeometry\"])(assembly)))\r\n  });\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/toPaths.js?");

/***/ }),

/***/ "../../algorithm/assembly/toSolid.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/toSolid.js ***!
  \**************************************************************************/
/*! exports provided: toSolid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toSolid\", function() { return toSolid; });\n/* harmony import */ var _filterAndFlattenAssemblyData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filterAndFlattenAssemblyData */ \"../../algorithm/assembly/filterAndFlattenAssemblyData.js\");\n/* harmony import */ var _toDisjointGeometry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toDisjointGeometry */ \"../../algorithm/assembly/toDisjointGeometry.js\");\n/* harmony import */ var _jsxcad_algorithm_bsp_surfaces__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-bsp-surfaces */ \"../../algorithm/bsp-surfaces/main.js\");\n\r\n\r\n\r\n\r\nconst toSolid = ({ requires, excludes }, assembly) =>\r\n  ({\r\n    solid: Object(_jsxcad_algorithm_bsp_surfaces__WEBPACK_IMPORTED_MODULE_2__[\"union\"])(...Object(_filterAndFlattenAssemblyData__WEBPACK_IMPORTED_MODULE_0__[\"filterAndFlattenAssemblyData\"])({ requires, excludes, form: 'solid' }, Object(_toDisjointGeometry__WEBPACK_IMPORTED_MODULE_1__[\"toDisjointGeometry\"])(assembly)))\r\n  });\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/toSolid.js?");

/***/ }),

/***/ "../../algorithm/assembly/toZ0Surface.js":
/*!******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/toZ0Surface.js ***!
  \******************************************************************************/
/*! exports provided: toZ0Surface */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toZ0Surface\", function() { return toZ0Surface; });\n/* harmony import */ var _filterAndFlattenAssemblyData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filterAndFlattenAssemblyData */ \"../../algorithm/assembly/filterAndFlattenAssemblyData.js\");\n/* harmony import */ var _toDisjointGeometry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toDisjointGeometry */ \"../../algorithm/assembly/toDisjointGeometry.js\");\n/* harmony import */ var _jsxcad_algorithm_z0surface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-z0surface */ \"../../algorithm/z0surface/main.js\");\n\r\n\r\n\r\n\r\nconst toZ0Surface = ({ requires, excludes }, assembly) => {\r\n  const filtered = Object(_filterAndFlattenAssemblyData__WEBPACK_IMPORTED_MODULE_0__[\"filterAndFlattenAssemblyData\"])({ requires, excludes, form: 'z0Surface' }, Object(_toDisjointGeometry__WEBPACK_IMPORTED_MODULE_1__[\"toDisjointGeometry\"])(assembly));\r\n  const unioned = Object(_jsxcad_algorithm_z0surface__WEBPACK_IMPORTED_MODULE_2__[\"union\"])(...filtered);\r\n  return { z0Surface: unioned };\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/toZ0Surface.js?");

/***/ }),

/***/ "../../algorithm/assembly/transform.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/transform.js ***!
  \****************************************************************************/
/*! exports provided: transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return transform; });\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map */ \"../../algorithm/assembly/map.js\");\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n/* harmony import */ var _jsxcad_algorithm_points__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-points */ \"../../algorithm/points/main.js\");\n/* harmony import */ var _jsxcad_algorithm_solid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jsxcad/algorithm-solid */ \"../../algorithm/solid/main.js\");\n/* harmony import */ var _jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jsxcad/algorithm-surface */ \"../../algorithm/surface/main.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nconst transformItem = (matrix, item) => {\r\n  const transformed = {};\r\n  if (item.assembly) {\r\n    transformed.assembly = item.assembly;\r\n  }\r\n  if (item.paths) {\r\n    transformed.paths = Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__[\"transform\"])(matrix, item.paths);\r\n  }\r\n  if (item.points) {\r\n    transformed.points = Object(_jsxcad_algorithm_points__WEBPACK_IMPORTED_MODULE_2__[\"transform\"])(matrix, item.points);\r\n  }\r\n  if (item.solid) {\r\n    transformed.solid = Object(_jsxcad_algorithm_solid__WEBPACK_IMPORTED_MODULE_3__[\"transform\"])(matrix, item.solid);\r\n  }\r\n  if (item.z0Surface) {\r\n    // FIX: Handle transformations that take the surface out of z0.\r\n    transformed.z0Surface = Object(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_4__[\"transform\"])(matrix, item.z0Surface);\r\n  }\r\n  transformed.tags = item.tags;\r\n  return transformed;\r\n};\r\n\r\nconst transform = (matrix, assembly) => Object(_map__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(assembly, item => transformItem(matrix, item));\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/transform.js?");

/***/ }),

/***/ "../../algorithm/assembly/union.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/union.js ***!
  \************************************************************************/
/*! exports provided: union */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"union\", function() { return union; });\n/* harmony import */ var _filterAndFlattenAssemblyData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filterAndFlattenAssemblyData */ \"../../algorithm/assembly/filterAndFlattenAssemblyData.js\");\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n/* harmony import */ var _jsxcad_algorithm_bsp_surfaces__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-bsp-surfaces */ \"../../algorithm/bsp-surfaces/main.js\");\n/* harmony import */ var _jsxcad_algorithm_z0surface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jsxcad/algorithm-z0surface */ \"../../algorithm/z0surface/main.js\");\n\r\n\r\n\r\n\r\n\r\nconst union = (...geometries) => {\r\n  const assembly = { assembly: geometries };\r\n  const pathsData = Object(_filterAndFlattenAssemblyData__WEBPACK_IMPORTED_MODULE_0__[\"filterAndFlattenAssemblyData\"])({ form: 'paths' }, assembly);\r\n  const solidData = Object(_filterAndFlattenAssemblyData__WEBPACK_IMPORTED_MODULE_0__[\"filterAndFlattenAssemblyData\"])({ form: 'solid' }, assembly);\r\n  const z0SurfaceData = Object(_filterAndFlattenAssemblyData__WEBPACK_IMPORTED_MODULE_0__[\"filterAndFlattenAssemblyData\"])({ form: 'z0Surface' }, assembly);\r\n  const unioned = { assembly: [] };\r\n  if (pathsData.length > 0) {\r\n    unioned.assembly.push({ paths: Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__[\"union\"])(...pathsData) });\r\n  }\r\n  if (solidData.length > 0) {\r\n    unioned.assembly.push({ solid: Object(_jsxcad_algorithm_bsp_surfaces__WEBPACK_IMPORTED_MODULE_2__[\"union\"])(...solidData) });\r\n  }\r\n  if (z0SurfaceData.length > 0) {\r\n    unioned.assembly.push({ z0Surface: Object(_jsxcad_algorithm_z0surface__WEBPACK_IMPORTED_MODULE_3__[\"union\"])(...z0SurfaceData) });\r\n  }\r\n  return unioned;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/assembly/union.js?");

/***/ }),

/***/ "../../algorithm/bsp-surfaces/build.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/build.js ***!
  \****************************************************************************/
/*! exports provided: build */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"build\", function() { return build; });\n/* harmony import */ var _jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-surface */ \"../../algorithm/surface/main.js\");\n/* harmony import */ var _create__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./create */ \"../../algorithm/bsp-surfaces/create.js\");\n/* harmony import */ var _splitSurface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./splitSurface */ \"../../algorithm/bsp-surfaces/splitSurface.js\");\n\r\n\r\n\r\n\r\n\r\n// Build a BSP tree out of surfaces. When called on an existing tree, the\r\n// new surfaces are filtered down to the bottom of the tree and become new\r\n// nodes there. Each set of surfaces is partitioned using the surface with the largest area.\r\nconst build = (bsp, surfaces) => {\r\n  if (surfaces.length === 0) {\r\n    return;\r\n  }\r\n  if (bsp.plane === undefined) {\r\n    let largestSurface = surfaces[0];\r\n    for (let nth = 1; nth < surfaces.length; nth++) {\r\n      if (Object(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_0__[\"measureArea\"])(surfaces[nth]) > Object(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_0__[\"measureArea\"])(largestSurface)) {\r\n        largestSurface = surfaces[nth];\r\n      }\r\n    }\r\n    // Use the plane of the surface to partition the branches.\r\n    bsp.plane = Object(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_0__[\"toPlane\"])(largestSurface);\r\n  }\r\n  let front = [];\r\n  let back = [];\r\n  for (let i = 0; i < surfaces.length; i++) {\r\n    Object(_splitSurface__WEBPACK_IMPORTED_MODULE_2__[\"splitSurface\"])(bsp.plane, bsp.surfaces, bsp.surfaces, front, back, surfaces[i]);\r\n  }\r\n  if (front.length > 0) {\r\n    if (bsp.front === undefined) {\r\n      bsp.front = Object(_create__WEBPACK_IMPORTED_MODULE_1__[\"create\"])();\r\n    }\r\n    build(bsp.front, front);\r\n  }\r\n  if (back.length > 0) {\r\n    if (bsp.back === undefined) {\r\n      bsp.back = Object(_create__WEBPACK_IMPORTED_MODULE_1__[\"create\"])();\r\n    }\r\n    build(bsp.back, back);\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/build.js?");

/***/ }),

/***/ "../../algorithm/bsp-surfaces/clipSurfaces.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/clipSurfaces.js ***!
  \***********************************************************************************/
/*! exports provided: clipSurfaces */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clipSurfaces\", function() { return clipSurfaces; });\n/* harmony import */ var _splitSurface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./splitSurface */ \"../../algorithm/bsp-surfaces/splitSurface.js\");\n\r\n\r\nconst clipSurfaces = (bsp, surfaces) => {\r\n  if (surfaces.length === 0) {\r\n    // PROVE: Does this happen due to degeneracy?\r\n    return [];\r\n  }\r\n  if (bsp.plane === undefined) {\r\n    return surfaces.slice();\r\n  }\r\n  let front = [];\r\n  let back = [];\r\n  for (let i = 0; i < surfaces.length; i++) {\r\n    Object(_splitSurface__WEBPACK_IMPORTED_MODULE_0__[\"splitSurface\"])(bsp.plane, front, back, front, back, surfaces[i]);\r\n  }\r\n  if (bsp.front !== undefined) {\r\n    front = clipSurfaces(bsp.front, front);\r\n  }\r\n  if (bsp.back !== undefined) {\r\n    back = clipSurfaces(bsp.back, back);\r\n  } else {\r\n    // PROVE: Explain this asymmetry.\r\n    // These surfaces are behind a face, and inside the tree.\r\n    back = [];\r\n  }\r\n  return front.concat(back);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/clipSurfaces.js?");

/***/ }),

/***/ "../../algorithm/bsp-surfaces/clipTo.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/clipTo.js ***!
  \*****************************************************************************/
/*! exports provided: clipTo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clipTo\", function() { return clipTo; });\n/* harmony import */ var _clipSurfaces__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clipSurfaces */ \"../../algorithm/bsp-surfaces/clipSurfaces.js\");\n\r\n\r\n// Destructively remove all parts of surfaces from a that are in b.\r\nconst clipTo = (a, b) => {\r\n  a.surfaces = Object(_clipSurfaces__WEBPACK_IMPORTED_MODULE_0__[\"clipSurfaces\"])(b, a.surfaces);\r\n  if (a.front !== undefined) {\r\n    clipTo(a.front, b);\r\n  }\r\n  if (a.back !== undefined) {\r\n    clipTo(a.back, b);\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/clipTo.js?");

/***/ }),

/***/ "../../algorithm/bsp-surfaces/create.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/create.js ***!
  \*****************************************************************************/
/*! exports provided: create */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\nconst create = () => ({ surfaces: [] });\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/create.js?");

/***/ }),

/***/ "../../algorithm/bsp-surfaces/difference.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/difference.js ***!
  \*********************************************************************************/
/*! exports provided: difference */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"difference\", function() { return difference; });\n/* harmony import */ var _build__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./build */ \"../../algorithm/bsp-surfaces/build.js\");\n/* harmony import */ var _clipTo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./clipTo */ \"../../algorithm/bsp-surfaces/clipTo.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _flip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./flip */ \"../../algorithm/bsp-surfaces/flip.js\");\n/* harmony import */ var _fromSurfaces__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fromSurfaces */ \"../../algorithm/bsp-surfaces/fromSurfaces.js\");\n/* harmony import */ var _jsxcad_algorithm_solid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @jsxcad/algorithm-solid */ \"../../algorithm/solid/main.js\");\n/* harmony import */ var _toSurfaces__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./toSurfaces */ \"../../algorithm/bsp-surfaces/toSurfaces.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst doesNotOverlap = (a, b) => {\r\n  const [centerA, radiusA] = Object(_jsxcad_algorithm_solid__WEBPACK_IMPORTED_MODULE_5__[\"measureBoundingSphere\"])(a);\r\n  const [centerB, radiusB] = Object(_jsxcad_algorithm_solid__WEBPACK_IMPORTED_MODULE_5__[\"measureBoundingSphere\"])(b);\r\n  return Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"distance\"])(centerA, centerB) > radiusA + radiusB;\r\n};\r\n\r\n/**\r\n   * Given a solid and a set of solids to subtract produce the resulting solid.\r\n   * @param {Polygons} base - Polygons for the base to subtract from.\r\n   * @param {Array<Polygons>} subtractions - a list of Polygons to subtract.\r\n   * @returns {Polygons} the resulting Polygons.\r\n   * @example\r\n   * let C = difference(A, B);\r\n   * @example\r\n   * +-------+            +-------+\r\n   * |       |            |       |\r\n   * |   A   |            |       |\r\n   * |    +--+----+   =   |    +--+\r\n   * +----+--+    |       +----+\r\n   *      |   B   |\r\n   *      |       |\r\n   *      +-------+\r\n   */\r\nconst difference = (base, ...subtractions) => {\r\n  if (base.length === 0) {\r\n    return base;\r\n  }\r\n  if (subtractions.length === 0) {\r\n    return base;\r\n  }\r\n  // TODO: Figure out why we do not subtract the union of the remainder of\r\n  // the geometries. This approach chains subtractions rather than producing\r\n  // a generational tree.\r\n  for (let i = 0; i < subtractions.length; i++) {\r\n    if (subtractions[i].length === 0) {\r\n      // Nothing to do.\r\n      continue;\r\n    }\r\n    if (doesNotOverlap(base, subtractions[i])) {\r\n      // Nothing to do.\r\n      continue;\r\n    }\r\n    const baseBsp = Object(_fromSurfaces__WEBPACK_IMPORTED_MODULE_4__[\"fromSurfaces\"])({}, base);\r\n    const subtractBsp = Object(_fromSurfaces__WEBPACK_IMPORTED_MODULE_4__[\"fromSurfaces\"])({}, subtractions[i]);\r\n\r\n    Object(_flip__WEBPACK_IMPORTED_MODULE_3__[\"flip\"])(baseBsp);\r\n    Object(_clipTo__WEBPACK_IMPORTED_MODULE_1__[\"clipTo\"])(baseBsp, subtractBsp);\r\n    Object(_clipTo__WEBPACK_IMPORTED_MODULE_1__[\"clipTo\"])(subtractBsp, baseBsp);\r\n\r\n    Object(_flip__WEBPACK_IMPORTED_MODULE_3__[\"flip\"])(subtractBsp);\r\n    Object(_clipTo__WEBPACK_IMPORTED_MODULE_1__[\"clipTo\"])(subtractBsp, baseBsp);\r\n    Object(_flip__WEBPACK_IMPORTED_MODULE_3__[\"flip\"])(subtractBsp);\r\n\r\n    Object(_build__WEBPACK_IMPORTED_MODULE_0__[\"build\"])(baseBsp, Object(_toSurfaces__WEBPACK_IMPORTED_MODULE_6__[\"toSurfaces\"])({}, subtractBsp));\r\n    Object(_flip__WEBPACK_IMPORTED_MODULE_3__[\"flip\"])(baseBsp);\r\n\r\n    // PROVE: That the round-trip to solids and back is unnecessary for the intermediate stages.\r\n    base = Object(_toSurfaces__WEBPACK_IMPORTED_MODULE_6__[\"toSurfaces\"])({}, baseBsp);\r\n  }\r\n  return base;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/difference.js?");

/***/ }),

/***/ "../../algorithm/bsp-surfaces/flip.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/flip.js ***!
  \***************************************************************************/
/*! exports provided: flip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return flip; });\n/* harmony import */ var _jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-plane */ \"../../math/plane/main.js\");\n/* harmony import */ var _jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-surface */ \"../../algorithm/surface/main.js\");\n\r\n\r\n\r\nconst flip = (bsp) => {\r\n  // Flip the polygons.\r\n  bsp.surfaces = bsp.surfaces.map(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_1__[\"flip\"]);\r\n  // Recompute the plane.\r\n  if (bsp.plane !== undefined) {\r\n    // PROVE: General equivalence.\r\n    // const a = toPlane(bsp.polygons[0]);\r\n    // const b = plane.flip(bsp.plane);\r\n    // if (!plane.equals(a, b)) { throw Error(`die: ${JSON.stringify([a, b])}`); }\r\n    bsp.plane = Object(_jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_0__[\"flip\"])(bsp.plane);\r\n  }\r\n  // Invert the children.\r\n  if (bsp.front !== undefined) {\r\n    flip(bsp.front);\r\n  }\r\n  if (bsp.back !== undefined) {\r\n    flip(bsp.back);\r\n  }\r\n  // Swap the children.\r\n  [bsp.front, bsp.back] = [bsp.back, bsp.front];\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/flip.js?");

/***/ }),

/***/ "../../algorithm/bsp-surfaces/fromSurfaces.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/fromSurfaces.js ***!
  \***********************************************************************************/
/*! exports provided: fromSurfaces */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromSurfaces\", function() { return fromSurfaces; });\n/* harmony import */ var _jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-surface */ \"../../algorithm/surface/main.js\");\n/* harmony import */ var _build__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./build */ \"../../algorithm/bsp-surfaces/build.js\");\n/* harmony import */ var _create__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./create */ \"../../algorithm/bsp-surfaces/create.js\");\n\r\n\r\n\r\n\r\nconst fromSurfaces = (options = {}, surfaces) => {\r\n  for (const surface of surfaces) {\r\n    Object(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_0__[\"assertCoplanar\"])(surface);\r\n  }\r\n  const bsp = Object(_create__WEBPACK_IMPORTED_MODULE_2__[\"create\"])();\r\n  // Build is destructive.\r\n  Object(_build__WEBPACK_IMPORTED_MODULE_1__[\"build\"])(bsp, surfaces.map(surface => surface.slice()));\r\n  return bsp;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/fromSurfaces.js?");

/***/ }),

/***/ "../../algorithm/bsp-surfaces/intersection.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/intersection.js ***!
  \***********************************************************************************/
/*! exports provided: intersection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"intersection\", function() { return intersection; });\n/* harmony import */ var _build__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./build */ \"../../algorithm/bsp-surfaces/build.js\");\n/* harmony import */ var _clipTo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./clipTo */ \"../../algorithm/bsp-surfaces/clipTo.js\");\n/* harmony import */ var _flip__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./flip */ \"../../algorithm/bsp-surfaces/flip.js\");\n/* harmony import */ var _fromSurfaces__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fromSurfaces */ \"../../algorithm/bsp-surfaces/fromSurfaces.js\");\n/* harmony import */ var _toSurfaces__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./toSurfaces */ \"../../algorithm/bsp-surfaces/toSurfaces.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Return a solid representing filled volume present in all provided solids.\r\n * A pairwise generational reduction is used.\r\n * @param {Array<Polygons>} solids - list Polygons.\r\n * @returns {Polygons} the resulting solid.\r\n * @example\r\n * let C = intersection(A, B)\r\n * @example\r\n * +--------+\r\n * |        |\r\n * |   A    |\r\n * |    +---+----+       +---+\r\n * |    |   |    |   =   + C +\r\n * +----+---+    |       +---+\r\n *      |    B   |\r\n *      |        |\r\n *      +--------+\r\n */\r\nconst intersection = (...solids) => {\r\n  // Run a queue so that intersections are generally against intersections of the same generation.\r\n  while (solids.length > 1) {\r\n    const aSolid = solids.shift();\r\n    const bSolid = solids.shift();\r\n\r\n    const aBsp = Object(_fromSurfaces__WEBPACK_IMPORTED_MODULE_3__[\"fromSurfaces\"])({}, aSolid);\r\n    const bBsp = Object(_fromSurfaces__WEBPACK_IMPORTED_MODULE_3__[\"fromSurfaces\"])({}, bSolid);\r\n\r\n    Object(_flip__WEBPACK_IMPORTED_MODULE_2__[\"flip\"])(aBsp);\r\n    Object(_clipTo__WEBPACK_IMPORTED_MODULE_1__[\"clipTo\"])(bBsp, aBsp);\r\n\r\n    Object(_flip__WEBPACK_IMPORTED_MODULE_2__[\"flip\"])(bBsp);\r\n    Object(_clipTo__WEBPACK_IMPORTED_MODULE_1__[\"clipTo\"])(aBsp, bBsp);\r\n    Object(_clipTo__WEBPACK_IMPORTED_MODULE_1__[\"clipTo\"])(bBsp, aBsp);\r\n    Object(_build__WEBPACK_IMPORTED_MODULE_0__[\"build\"])(aBsp, Object(_toSurfaces__WEBPACK_IMPORTED_MODULE_4__[\"toSurfaces\"])({}, bBsp));\r\n\r\n    Object(_flip__WEBPACK_IMPORTED_MODULE_2__[\"flip\"])(aBsp);\r\n\r\n    // Push back for the next generation.\r\n    solids.push(Object(_toSurfaces__WEBPACK_IMPORTED_MODULE_4__[\"toSurfaces\"])({}, aBsp));\r\n  }\r\n  return solids[0];\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/intersection.js?");

/***/ }),

/***/ "../../algorithm/bsp-surfaces/main.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/main.js ***!
  \***************************************************************************/
/*! exports provided: build, clipSurfaces, clipTo, create, difference, flip, fromSurfaces, intersection, splitSurface, toSurfaces, union */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _build__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./build */ \"../../algorithm/bsp-surfaces/build.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"build\", function() { return _build__WEBPACK_IMPORTED_MODULE_0__[\"build\"]; });\n\n/* harmony import */ var _clipSurfaces__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./clipSurfaces */ \"../../algorithm/bsp-surfaces/clipSurfaces.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"clipSurfaces\", function() { return _clipSurfaces__WEBPACK_IMPORTED_MODULE_1__[\"clipSurfaces\"]; });\n\n/* harmony import */ var _clipTo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./clipTo */ \"../../algorithm/bsp-surfaces/clipTo.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"clipTo\", function() { return _clipTo__WEBPACK_IMPORTED_MODULE_2__[\"clipTo\"]; });\n\n/* harmony import */ var _create__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./create */ \"../../algorithm/bsp-surfaces/create.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return _create__WEBPACK_IMPORTED_MODULE_3__[\"create\"]; });\n\n/* harmony import */ var _difference__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./difference */ \"../../algorithm/bsp-surfaces/difference.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"difference\", function() { return _difference__WEBPACK_IMPORTED_MODULE_4__[\"difference\"]; });\n\n/* harmony import */ var _flip__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./flip */ \"../../algorithm/bsp-surfaces/flip.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return _flip__WEBPACK_IMPORTED_MODULE_5__[\"flip\"]; });\n\n/* harmony import */ var _fromSurfaces__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./fromSurfaces */ \"../../algorithm/bsp-surfaces/fromSurfaces.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromSurfaces\", function() { return _fromSurfaces__WEBPACK_IMPORTED_MODULE_6__[\"fromSurfaces\"]; });\n\n/* harmony import */ var _intersection__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./intersection */ \"../../algorithm/bsp-surfaces/intersection.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"intersection\", function() { return _intersection__WEBPACK_IMPORTED_MODULE_7__[\"intersection\"]; });\n\n/* harmony import */ var _splitSurface__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./splitSurface */ \"../../algorithm/bsp-surfaces/splitSurface.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"splitSurface\", function() { return _splitSurface__WEBPACK_IMPORTED_MODULE_8__[\"splitSurface\"]; });\n\n/* harmony import */ var _toSurfaces__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./toSurfaces */ \"../../algorithm/bsp-surfaces/toSurfaces.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toSurfaces\", function() { return _toSurfaces__WEBPACK_IMPORTED_MODULE_9__[\"toSurfaces\"]; });\n\n/* harmony import */ var _union__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./union */ \"../../algorithm/bsp-surfaces/union.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"union\", function() { return _union__WEBPACK_IMPORTED_MODULE_10__[\"union\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/main.js?");

/***/ }),

/***/ "../../algorithm/bsp-surfaces/splitSurface.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/splitSurface.js ***!
  \***********************************************************************************/
/*! exports provided: splitSurface */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"splitSurface\", function() { return splitSurface; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-plane */ \"../../math/plane/main.js\");\n/* harmony import */ var _jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-surface */ \"../../algorithm/surface/main.js\");\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nconst EPSILON = 1e-5;\r\n\r\nconst COPLANAR = 0; // Neither front nor back.\r\nconst FRONT = 1;\r\nconst BACK = 2;\r\nconst SPANNING = 3; // Both front and back.\r\n\r\nconst toType = (plane, point) => {\r\n  let t = Object(_jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_1__[\"signedDistanceToPoint\"])(plane, point);\r\n  if (t < -EPSILON) {\r\n    return BACK;\r\n  } else if (t > EPSILON) {\r\n    return FRONT;\r\n  } else {\r\n    return COPLANAR;\r\n  }\r\n};\r\n\r\nconst splitSurface = (plane, coplanarFrontSurfaces, coplanarBackSurfaces, frontSurfaces, backSurfaces, surface) => {\r\n  Object(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_2__[\"assertCoplanar\"])(surface);\r\n  const coplanarFrontPolygons = [];\r\n  const coplanarBackPolygons = [];\r\n  const frontPolygons = [];\r\n  const backPolygons = [];\r\n  let polygonType = COPLANAR;\r\n  for (const polygon of surface) {\r\n    if (!Object(_jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_1__[\"equals\"])(Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_3__[\"toPlane\"])(polygon), plane)) {\r\n      for (const point of polygon) {\r\n        polygonType |= toType(plane, point);\r\n      }\r\n    }\r\n\r\n    // Put the polygon in the correct list, splitting it when necessary.\r\n    switch (polygonType) {\r\n      case COPLANAR: {\r\n        if (Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(plane, Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_3__[\"toPlane\"])(polygon)) > 0) {\r\n          coplanarFrontPolygons.push(polygon);\r\n        } else {\r\n          coplanarBackPolygons.push(polygon);\r\n        }\r\n        break;\r\n      }\r\n      case FRONT: {\r\n        frontPolygons.push(polygon);\r\n        break;\r\n      }\r\n      case BACK: {\r\n        backPolygons.push(polygon);\r\n        break;\r\n      }\r\n      case SPANNING: {\r\n        let frontPoints = [];\r\n        let backPoints = [];\r\n        let startPoint = polygon[polygon.length - 1];\r\n        let startType = toType(plane, startPoint);\r\n        for (const endPoint of polygon) {\r\n          const endType = toType(plane, endPoint);\r\n          if (startType !== BACK) {\r\n            // The inequality is important as it includes COPLANAR points.\r\n            frontPoints.push(startPoint);\r\n          }\r\n          if (startType !== FRONT) {\r\n            // The inequality is important as it includes COPLANAR points.\r\n            backPoints.push(startPoint);\r\n          }\r\n          if ((startType | endType) === SPANNING) {\r\n            // This should exclude COPLANAR points.\r\n            // Compute the point that touches the splitting plane.\r\n            const rawSpanPoint = Object(_jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_1__[\"splitLineSegmentByPlane\"])(plane, startPoint, endPoint);\r\n            const spanPoint = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(rawSpanPoint, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"scale\"])(Object(_jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_1__[\"signedDistanceToPoint\"])(Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_3__[\"toPlane\"])(polygon), rawSpanPoint), plane));\r\n            frontPoints.push(spanPoint);\r\n            backPoints.push(spanPoint);\r\n            if (Math.abs(Object(_jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_1__[\"signedDistanceToPoint\"])(plane, spanPoint)) > EPSILON) throw Error('die');\r\n            if (frontPoints.length >= 3) {\r\n              Object(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_2__[\"assertCoplanar\"])([frontPoints]);\r\n            }\r\n            if (backPoints.length >= 3) {\r\n              Object(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_2__[\"assertCoplanar\"])([backPoints]);\r\n            }\r\n          }\r\n          startPoint = endPoint;\r\n          startType = endType;\r\n        }\r\n        if (frontPoints.length >= 3) {\r\n        // Add the polygon that sticks out the front of the plane.\r\n          frontPolygons.push(frontPoints);\r\n        } else {\r\n          // throw Error('die');\r\n        }\r\n        if (backPoints.length >= 3) {\r\n        // Add the polygon that sticks out the back of the plane.\r\n          backPolygons.push(backPoints);\r\n        } else {\r\n          // throw Error('die');\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  if (coplanarFrontPolygons.length > 0) {\r\n    Object(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_2__[\"assertCoplanar\"])(coplanarFrontPolygons);\r\n    coplanarFrontSurfaces.push(coplanarFrontPolygons);\r\n  }\r\n  if (coplanarBackPolygons.length > 0) {\r\n    Object(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_2__[\"assertCoplanar\"])(coplanarBackPolygons);\r\n    coplanarBackSurfaces.push(coplanarBackPolygons);\r\n  }\r\n  if (frontPolygons.length > 0) {\r\n    Object(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_2__[\"assertCoplanar\"])(frontPolygons);\r\n    frontSurfaces.push(frontPolygons);\r\n  }\r\n  if (backPolygons.length > 0) {\r\n    Object(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_2__[\"assertCoplanar\"])(backPolygons);\r\n    backSurfaces.push(backPolygons);\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/splitSurface.js?");

/***/ }),

/***/ "../../algorithm/bsp-surfaces/toSurfaces.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/toSurfaces.js ***!
  \*********************************************************************************/
/*! exports provided: toSurfaces */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toSurfaces\", function() { return toSurfaces; });\n/* harmony import */ var _jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-surface */ \"../../algorithm/surface/main.js\");\n\r\n\r\nconst gatherSurfaces = (bsp) => {\r\n  // PROVE: That we need this slice.\r\n  let surfaces = bsp.surfaces.slice();\r\n  if (bsp.front !== undefined) {\r\n    surfaces = surfaces.concat(gatherSurfaces(bsp.front));\r\n  }\r\n  if (bsp.back !== undefined) {\r\n    surfaces = surfaces.concat(gatherSurfaces(bsp.back));\r\n  }\r\n  return surfaces;\r\n};\r\n\r\nconst toSurfaces = (options = {}, bsp) => {\r\n  const surfaces = gatherSurfaces(bsp);\r\n  for (const surface of surfaces) {\r\n    Object(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_0__[\"assertCoplanar\"])(surface);\r\n  }\r\n  // Some of these surfaces may have cracked.\r\n  return surfaces;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/toSurfaces.js?");

/***/ }),

/***/ "../../algorithm/bsp-surfaces/union.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/union.js ***!
  \****************************************************************************/
/*! exports provided: union */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"union\", function() { return union; });\n/* harmony import */ var _build__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./build */ \"../../algorithm/bsp-surfaces/build.js\");\n/* harmony import */ var _clipTo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./clipTo */ \"../../algorithm/bsp-surfaces/clipTo.js\");\n/* harmony import */ var _flip__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./flip */ \"../../algorithm/bsp-surfaces/flip.js\");\n/* harmony import */ var _fromSurfaces__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fromSurfaces */ \"../../algorithm/bsp-surfaces/fromSurfaces.js\");\n/* harmony import */ var _toSurfaces__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./toSurfaces */ \"../../algorithm/bsp-surfaces/toSurfaces.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nconst union = (...solids) => {\r\n  if (solids.length === 0) {\r\n    return [];\r\n  }\r\n  while (solids.length > 1) {\r\n    const aSolid = solids.shift();\r\n    const bSolid = solids.shift();\r\n\r\n    const aBsp = Object(_fromSurfaces__WEBPACK_IMPORTED_MODULE_3__[\"fromSurfaces\"])({}, aSolid);\r\n    const bBsp = Object(_fromSurfaces__WEBPACK_IMPORTED_MODULE_3__[\"fromSurfaces\"])({}, bSolid);\r\n\r\n    // Remove the bits of a that are in b.\r\n    Object(_clipTo__WEBPACK_IMPORTED_MODULE_1__[\"clipTo\"])(aBsp, bBsp);\r\n\r\n    // Remove the bits of b that are in a.\r\n    Object(_clipTo__WEBPACK_IMPORTED_MODULE_1__[\"clipTo\"])(bBsp, aBsp);\r\n\r\n    // Turn b inside out and remove the bits that are in a.\r\n    Object(_flip__WEBPACK_IMPORTED_MODULE_2__[\"flip\"])(bBsp);\r\n    Object(_clipTo__WEBPACK_IMPORTED_MODULE_1__[\"clipTo\"])(bBsp, aBsp);\r\n    Object(_flip__WEBPACK_IMPORTED_MODULE_2__[\"flip\"])(bBsp);\r\n\r\n    // Now merge the two together.\r\n    Object(_build__WEBPACK_IMPORTED_MODULE_0__[\"build\"])(aBsp, Object(_toSurfaces__WEBPACK_IMPORTED_MODULE_4__[\"toSurfaces\"])({}, bBsp));\r\n\r\n    // And build a geometry from the result.\r\n    solids.push(Object(_toSurfaces__WEBPACK_IMPORTED_MODULE_4__[\"toSurfaces\"])({}, aBsp));\r\n  }\r\n  return solids[0];\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/bsp-surfaces/union.js?");

/***/ }),

/***/ "../../algorithm/color/hslToRgb.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/color/hslToRgb.js ***!
  \************************************************************************/
/*! exports provided: hslToRgb */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hslToRgb\", function() { return hslToRgb; });\n/**\r\n * Converts an HSL color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes h, s, and l are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 1].\r\n *\r\n * @param   Number  h       The hue\r\n * @param   Number  s       The saturation\r\n * @param   Number  l       The lightness\r\n * @return  Array           The RGB representation\r\n */\r\nconst hslToRgb = ([hue, saturation, lightness]) => {\r\n  if (saturation === 0) {\r\n    // Achromatic\r\n    return [lightness, lightness, lightness];\r\n  } else {\r\n    // Chromatic\r\n    let q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;\r\n    let p = 2 * lightness - q;\r\n    return [hue2rgb(p, q, hue + 1 / 3),\r\n            hue2rgb(p, q, hue),\r\n            hue2rgb(p, q, hue - 1 / 3)];\r\n  }\r\n};\r\n\r\n// FIX: Make readable.\r\nfunction hue2rgb (p, q, t) {\r\n  if (t < 0) t += 1;\r\n  if (t > 1) t -= 1;\r\n  if (t < 1 / 6) return p + (q - p) * 6 * t;\r\n  if (t < 1 / 2) return q;\r\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\r\n  return p;\r\n}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/color/hslToRgb.js?");

/***/ }),

/***/ "../../algorithm/color/main.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/color/main.js ***!
  \********************************************************************/
/*! exports provided: hslToRgb */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _hslToRgb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hslToRgb */ \"../../algorithm/color/hslToRgb.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"hslToRgb\", function() { return _hslToRgb__WEBPACK_IMPORTED_MODULE_0__[\"hslToRgb\"]; });\n\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/color/main.js?");

/***/ }),

/***/ "../../algorithm/path/canonicalize.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/canonicalize.js ***!
  \***************************************************************************/
/*! exports provided: canonicalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return canonicalize; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\nconst canonicalizePoint = (point, index) => {\r\n  if (point === null) {\r\n    if (index !== 0) throw Error('Path has null not at head');\r\n    return point;\r\n  } else {\r\n    return Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"])(point);\r\n  }\r\n};\r\n\r\nconst canonicalize = (path) => path.map(canonicalizePoint);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/canonicalize.js?");

/***/ }),

/***/ "../../algorithm/path/close.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/close.js ***!
  \********************************************************************/
/*! exports provided: close */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"close\", function() { return close; });\n/* harmony import */ var _isClosed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isClosed */ \"../../algorithm/path/isClosed.js\");\n\r\n\r\nconst close = (path) => Object(_isClosed__WEBPACK_IMPORTED_MODULE_0__[\"isClosed\"])(path) ? path : path.slice(1);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/close.js?");

/***/ }),

/***/ "../../algorithm/path/concatenate.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/concatenate.js ***!
  \**************************************************************************/
/*! exports provided: concatenate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"concatenate\", function() { return concatenate; });\n/* harmony import */ var _isClosed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isClosed */ \"../../algorithm/path/isClosed.js\");\n\r\n\r\nconst concatenate = (...paths) => {\r\n  if (!paths.every(path => !Object(_isClosed__WEBPACK_IMPORTED_MODULE_0__[\"isClosed\"])(path))) {\r\n    throw Error('Cannot concatenate closed paths.');\r\n  }\r\n  const result = [null, ...[].concat(...paths.map(path => path.slice(1)))];\r\n  return result;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/concatenate.js?");

/***/ }),

/***/ "../../algorithm/path/flip.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/flip.js ***!
  \*******************************************************************/
/*! exports provided: flip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return flip; });\nconst flip = (path) => {\r\n  if (path[0] === null) {\r\n    return [null, ...path.slice(1).reverse()];\r\n  } else {\r\n    return path.slice().reverse();\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/flip.js?");

/***/ }),

/***/ "../../algorithm/path/isClosed.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/isClosed.js ***!
  \***********************************************************************/
/*! exports provided: isClosed */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isClosed\", function() { return isClosed; });\nconst isClosed = (path) => (path.length === 0) || (path[0] !== null);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/isClosed.js?");

/***/ }),

/***/ "../../algorithm/path/main.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/main.js ***!
  \*******************************************************************/
/*! exports provided: canonicalize, close, concatenate, flip, isClosed, measureArea, open, toGeneric, toPolygon, toSegments, toZ0Polygon, transform, translate, scale */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"translate\", function() { return translate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n/* harmony import */ var _canonicalize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./canonicalize */ \"../../algorithm/path/canonicalize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return _canonicalize__WEBPACK_IMPORTED_MODULE_1__[\"canonicalize\"]; });\n\n/* harmony import */ var _close__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./close */ \"../../algorithm/path/close.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"close\", function() { return _close__WEBPACK_IMPORTED_MODULE_2__[\"close\"]; });\n\n/* harmony import */ var _concatenate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./concatenate */ \"../../algorithm/path/concatenate.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"concatenate\", function() { return _concatenate__WEBPACK_IMPORTED_MODULE_3__[\"concatenate\"]; });\n\n/* harmony import */ var _flip__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./flip */ \"../../algorithm/path/flip.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return _flip__WEBPACK_IMPORTED_MODULE_4__[\"flip\"]; });\n\n/* harmony import */ var _isClosed__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./isClosed */ \"../../algorithm/path/isClosed.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"isClosed\", function() { return _isClosed__WEBPACK_IMPORTED_MODULE_5__[\"isClosed\"]; });\n\n/* harmony import */ var _measureArea__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./measureArea */ \"../../algorithm/path/measureArea.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"measureArea\", function() { return _measureArea__WEBPACK_IMPORTED_MODULE_6__[\"measureArea\"]; });\n\n/* harmony import */ var _open__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./open */ \"../../algorithm/path/open.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"open\", function() { return _open__WEBPACK_IMPORTED_MODULE_7__[\"open\"]; });\n\n/* harmony import */ var _toGeneric__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./toGeneric */ \"../../algorithm/path/toGeneric.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toGeneric\", function() { return _toGeneric__WEBPACK_IMPORTED_MODULE_8__[\"toGeneric\"]; });\n\n/* harmony import */ var _toPolygon__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./toPolygon */ \"../../algorithm/path/toPolygon.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toPolygon\", function() { return _toPolygon__WEBPACK_IMPORTED_MODULE_9__[\"toPolygon\"]; });\n\n/* harmony import */ var _toSegments__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./toSegments */ \"../../algorithm/path/toSegments.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toSegments\", function() { return _toSegments__WEBPACK_IMPORTED_MODULE_10__[\"toSegments\"]; });\n\n/* harmony import */ var _toZ0Polygon__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./toZ0Polygon */ \"../../algorithm/path/toZ0Polygon.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toZ0Polygon\", function() { return _toZ0Polygon__WEBPACK_IMPORTED_MODULE_11__[\"toZ0Polygon\"]; });\n\n/* harmony import */ var _transform__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./transform */ \"../../algorithm/path/transform.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return _transform__WEBPACK_IMPORTED_MODULE_12__[\"transform\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst translate = (vector, path) => Object(_transform__WEBPACK_IMPORTED_MODULE_12__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromTranslation\"])(vector), path);\r\nconst scale = (vector, path) => Object(_transform__WEBPACK_IMPORTED_MODULE_12__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromScaling\"])(vector), path);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/main.js?");

/***/ }),

/***/ "../../algorithm/path/measureArea.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/measureArea.js ***!
  \**************************************************************************/
/*! exports provided: measureArea */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"measureArea\", function() { return measureArea; });\nconst X = 0;\r\nconst Y = 1;\r\n\r\n/**\r\n * Measure the area of a path as though it were a polygon.\r\n * A negative area indicates a clockwise path, and a positive area indicates a counter-clock-wise path.\r\n * See: http://mathworld.wolfram.com/PolygonArea.html\r\n * @returns {Number} The area the path would have if it were a polygon.\r\n */\r\nconst measureArea = (path) => {\r\n  let last = path.length - 1;\r\n  let current = (path[0] === null) ? 1 : 0;\r\n  let twiceArea = 0;\r\n  for (; current < path.length; last = current++) {\r\n    twiceArea += path[last][X] * path[current][Y] - path[last][Y] * path[current][X];\r\n  }\r\n  return twiceArea / 2;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/measureArea.js?");

/***/ }),

/***/ "../../algorithm/path/open.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/open.js ***!
  \*******************************************************************/
/*! exports provided: open */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"open\", function() { return open; });\n/* harmony import */ var _isClosed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isClosed */ \"../../algorithm/path/isClosed.js\");\n\r\n\r\nconst open = (path) => Object(_isClosed__WEBPACK_IMPORTED_MODULE_0__[\"isClosed\"])(path) ? [null, ...path] : path;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/open.js?");

/***/ }),

/***/ "../../algorithm/path/toGeneric.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/toGeneric.js ***!
  \************************************************************************/
/*! exports provided: toGeneric */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toGeneric\", function() { return toGeneric; });\nconst toGeneric = (path) => [...path];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/toGeneric.js?");

/***/ }),

/***/ "../../algorithm/path/toPolygon.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/toPolygon.js ***!
  \************************************************************************/
/*! exports provided: toPolygon */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toPolygon\", function() { return toPolygon; });\nconst toPolygon = (path) => {\r\n  if (path.isPolygon !== true) {\r\n    if (path.length < 3) throw Error('Path would form degenerate polygon.');\r\n    if (path[0] === null) throw Error('Only closed paths can be polygons.');\r\n    // FIX: Check for coplanarity.\r\n    path.isPolygon = true;\r\n  }\r\n  return path;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/toPolygon.js?");

/***/ }),

/***/ "../../algorithm/path/toSegments.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/toSegments.js ***!
  \*************************************************************************/
/*! exports provided: toSegments */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toSegments\", function() { return toSegments; });\nconst toSegments = (options = {}, path) => {\r\n  const segments = [];\r\n  if (path[0] !== null) {\r\n    segments.push([path[path.length - 1], path[0]]);\r\n    segments.push([path[0], path[1]]);\r\n  }\r\n  for (let nth = 2; nth < path.length; nth++) {\r\n    segments.push([path[nth - 1], path[nth]]);\r\n  }\r\n  return segments;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/toSegments.js?");

/***/ }),

/***/ "../../algorithm/path/toZ0Polygon.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/toZ0Polygon.js ***!
  \**************************************************************************/
/*! exports provided: toZ0Polygon */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toZ0Polygon\", function() { return toZ0Polygon; });\nconst isZ0Point = ([x = 0, y = 0, z = 0]) => (z === 0);\r\n\r\nconst toZ0Polygon = (path) => {\r\n  if (path.isZ0Polygon !== true) {\r\n    if (path.length < 3) throw Error('Path would form degenerate polygon.');\r\n    if (path[0] === null) throw Error('Only closed paths can be polygons.');\r\n    if (!path.every(isZ0Point)) throw Error(`z != 0: ${JSON.stringify(path.filter(path => !isZ0Point(path)))}`);\r\n    path.isZ0Polygon = true;\r\n  }\r\n  return path;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/toZ0Polygon.js?");

/***/ }),

/***/ "../../algorithm/path/transform.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/transform.js ***!
  \************************************************************************/
/*! exports provided: transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return transform; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\nconst transform = (matrix, path) =>\r\n  path.map((point, index) => (point === null) ? null : Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"transform\"])(matrix, point));\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/path/transform.js?");

/***/ }),

/***/ "../../algorithm/paths/butLast.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/butLast.js ***!
  \***********************************************************************/
/*! exports provided: butLast */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"butLast\", function() { return butLast; });\nconst butLast = (paths) => paths.slice(0, paths.length - 1);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/butLast.js?");

/***/ }),

/***/ "../../algorithm/paths/canonicalize.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/canonicalize.js ***!
  \****************************************************************************/
/*! exports provided: canonicalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return canonicalize; });\n/* harmony import */ var _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-path */ \"../../algorithm/path/main.js\");\n\r\n\r\nconst canonicalize = (paths) => {\r\n  let canonicalized = paths.map(_jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"]);\r\n  if (paths.properties !== undefined) {\r\n    // Transfer properties.\r\n    canonicalized.properties = paths.properties;\r\n  }\r\n  return canonicalized;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/canonicalize.js?");

/***/ }),

/***/ "../../algorithm/paths/difference.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/difference.js ***!
  \**************************************************************************/
/*! exports provided: difference */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"difference\", function() { return difference; });\nconst difference = (pathset, ...pathsets) => { throw Error('Not implemented'); };\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/difference.js?");

/***/ }),

/***/ "../../algorithm/paths/eachPoint.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/eachPoint.js ***!
  \*************************************************************************/
/*! exports provided: eachPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eachPoint\", function() { return eachPoint; });\nconst eachPoint = (options = {}, thunk, paths) => {\r\n  for (const path of paths) {\r\n    for (const point of path) {\r\n      if (point !== null) {\r\n        thunk(point);\r\n      }\r\n    }\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/eachPoint.js?");

/***/ }),

/***/ "../../algorithm/paths/flip.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/flip.js ***!
  \********************************************************************/
/*! exports provided: flip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return flip; });\n/* harmony import */ var _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-path */ \"../../algorithm/path/main.js\");\n\r\n\r\nconst flip = (paths) => paths.map(_jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__[\"flip\"]);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/flip.js?");

/***/ }),

/***/ "../../algorithm/paths/intersection.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/intersection.js ***!
  \****************************************************************************/
/*! exports provided: intersection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"intersection\", function() { return intersection; });\nconst intersection = (...pathsets) => { throw Error('Not implemented'); };\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/intersection.js?");

/***/ }),

/***/ "../../algorithm/paths/last.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/last.js ***!
  \********************************************************************/
/*! exports provided: last */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"last\", function() { return last; });\nconst last = (paths) => paths.length >= 1 ? paths[paths.length - 1] : [null];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/last.js?");

/***/ }),

/***/ "../../algorithm/paths/main.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/main.js ***!
  \********************************************************************/
/*! exports provided: butLast, canonicalize, difference, eachPoint, flip, intersection, last, measureBoundingBox, toGeneric, toPoints, toPolygons, toZ0Polygons, transform, union, scale */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony import */ var _butLast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./butLast */ \"../../algorithm/paths/butLast.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"butLast\", function() { return _butLast__WEBPACK_IMPORTED_MODULE_0__[\"butLast\"]; });\n\n/* harmony import */ var _canonicalize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./canonicalize */ \"../../algorithm/paths/canonicalize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return _canonicalize__WEBPACK_IMPORTED_MODULE_1__[\"canonicalize\"]; });\n\n/* harmony import */ var _difference__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./difference */ \"../../algorithm/paths/difference.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"difference\", function() { return _difference__WEBPACK_IMPORTED_MODULE_2__[\"difference\"]; });\n\n/* harmony import */ var _eachPoint__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./eachPoint */ \"../../algorithm/paths/eachPoint.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"eachPoint\", function() { return _eachPoint__WEBPACK_IMPORTED_MODULE_3__[\"eachPoint\"]; });\n\n/* harmony import */ var _flip__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./flip */ \"../../algorithm/paths/flip.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return _flip__WEBPACK_IMPORTED_MODULE_4__[\"flip\"]; });\n\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n/* harmony import */ var _intersection__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./intersection */ \"../../algorithm/paths/intersection.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"intersection\", function() { return _intersection__WEBPACK_IMPORTED_MODULE_6__[\"intersection\"]; });\n\n/* harmony import */ var _last__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./last */ \"../../algorithm/paths/last.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"last\", function() { return _last__WEBPACK_IMPORTED_MODULE_7__[\"last\"]; });\n\n/* harmony import */ var _measureBoundingBox__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./measureBoundingBox */ \"../../algorithm/paths/measureBoundingBox.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingBox\", function() { return _measureBoundingBox__WEBPACK_IMPORTED_MODULE_8__[\"measureBoundingBox\"]; });\n\n/* harmony import */ var _toGeneric__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./toGeneric */ \"../../algorithm/paths/toGeneric.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toGeneric\", function() { return _toGeneric__WEBPACK_IMPORTED_MODULE_9__[\"toGeneric\"]; });\n\n/* harmony import */ var _toPoints__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./toPoints */ \"../../algorithm/paths/toPoints.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toPoints\", function() { return _toPoints__WEBPACK_IMPORTED_MODULE_10__[\"toPoints\"]; });\n\n/* harmony import */ var _toPolygons__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./toPolygons */ \"../../algorithm/paths/toPolygons.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toPolygons\", function() { return _toPolygons__WEBPACK_IMPORTED_MODULE_11__[\"toPolygons\"]; });\n\n/* harmony import */ var _toZ0Polygons__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./toZ0Polygons */ \"../../algorithm/paths/toZ0Polygons.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toZ0Polygons\", function() { return _toZ0Polygons__WEBPACK_IMPORTED_MODULE_12__[\"toZ0Polygons\"]; });\n\n/* harmony import */ var _transform__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./transform */ \"../../algorithm/paths/transform.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return _transform__WEBPACK_IMPORTED_MODULE_13__[\"transform\"]; });\n\n/* harmony import */ var _union__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./union */ \"../../algorithm/paths/union.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"union\", function() { return _union__WEBPACK_IMPORTED_MODULE_14__[\"union\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst scale = ([x = 1, y = 1, z = 1], paths) => Object(_transform__WEBPACK_IMPORTED_MODULE_13__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_5__[\"fromScaling\"])([x, y, z]), paths);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/main.js?");

/***/ }),

/***/ "../../algorithm/paths/map.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/map.js ***!
  \*******************************************************************/
/*! exports provided: map */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"map\", function() { return map; });\n/**\r\n * Transforms each path of Paths.\r\n *\r\n * @param {Paths} original - the Paths to transform.\r\n * @param {Function} [transform=identity] - function used to transform the paths.\r\n * @returns {Paths} the transformed paths.\r\n */\r\nconst map = (original, transform) => {\r\n  if (original === undefined) {\r\n    original = [];\r\n  }\r\n  if (transform === undefined) {\r\n    transform = _ => _;\r\n  }\r\n  // FIX: Consider optimizing this to return the original if all transforms are identity transforms.\r\n  return original.map(path => transform(path));\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/map.js?");

/***/ }),

/***/ "../../algorithm/paths/measureBoundingBox.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/measureBoundingBox.js ***!
  \**********************************************************************************/
/*! exports provided: measureBoundingBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingBox\", function() { return measureBoundingBox; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _eachPoint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./eachPoint */ \"../../algorithm/paths/eachPoint.js\");\n\r\n\r\n\r\n\r\n// returns an array of two Vector3Ds (minimum coordinates and maximum coordinates)\r\nconst measureBoundingBox = (paths) => {\r\n  let minPoint;\r\n  let maxPoint;\r\n  Object(_eachPoint__WEBPACK_IMPORTED_MODULE_1__[\"eachPoint\"])({},\r\n            point => {\r\n              minPoint = (minPoint === undefined) ? Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"fromPoint\"])(point) : Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"min\"])(minPoint, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"fromPoint\"])(point));\r\n              maxPoint = (maxPoint === undefined) ? Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"fromPoint\"])(point) : Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"max\"])(maxPoint, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"fromPoint\"])(point));\r\n            },\r\n            paths);\r\n  return [minPoint, maxPoint];\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/measureBoundingBox.js?");

/***/ }),

/***/ "../../algorithm/paths/toGeneric.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/toGeneric.js ***!
  \*************************************************************************/
/*! exports provided: toGeneric */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toGeneric\", function() { return toGeneric; });\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map */ \"../../algorithm/paths/map.js\");\n/* harmony import */ var _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-path */ \"../../algorithm/path/main.js\");\n\r\n\r\n\r\nconst toGeneric = (paths) => Object(_map__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(paths, _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_1__[\"toGeneric\"]);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/toGeneric.js?");

/***/ }),

/***/ "../../algorithm/paths/toPoints.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/toPoints.js ***!
  \************************************************************************/
/*! exports provided: toPoints */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toPoints\", function() { return toPoints; });\n/* harmony import */ var _eachPoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eachPoint */ \"../../algorithm/paths/eachPoint.js\");\n\r\n\r\nconst toPoints = (options = {}, paths) => {\r\n  const points = [];\r\n  Object(_eachPoint__WEBPACK_IMPORTED_MODULE_0__[\"eachPoint\"])(options, point => points.push(point), paths);\r\n  return points;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/toPoints.js?");

/***/ }),

/***/ "../../algorithm/paths/toPolygons.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/toPolygons.js ***!
  \**************************************************************************/
/*! exports provided: toPolygons */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toPolygons\", function() { return toPolygons; });\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map */ \"../../algorithm/paths/map.js\");\n/* harmony import */ var _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-path */ \"../../algorithm/path/main.js\");\n\r\n\r\n\r\nconst toPolygons = (paths) => {\r\n  if (paths.isPolygons !== true) {\r\n    paths = Object(_map__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(paths, _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_1__[\"toPolygon\"]);\r\n    paths.isPolygons = true;\r\n  }\r\n  return paths;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/toPolygons.js?");

/***/ }),

/***/ "../../algorithm/paths/toZ0Polygons.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/toZ0Polygons.js ***!
  \****************************************************************************/
/*! exports provided: toZ0Polygons */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toZ0Polygons\", function() { return toZ0Polygons; });\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map */ \"../../algorithm/paths/map.js\");\n/* harmony import */ var _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-path */ \"../../algorithm/path/main.js\");\n\r\n\r\n\r\nconst toZ0Polygons = (paths) => {\r\n  if (paths.isZ0Polygons !== true) {\r\n    paths = Object(_map__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(paths, _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_1__[\"toZ0Polygon\"]);\r\n    paths.isZ0Polygons = true;\r\n  }\r\n  return paths;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/toZ0Polygons.js?");

/***/ }),

/***/ "../../algorithm/paths/transform.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/transform.js ***!
  \*************************************************************************/
/*! exports provided: transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return transform; });\n/* harmony import */ var _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-path */ \"../../algorithm/path/main.js\");\n\r\n\r\nconst transform = (matrix, paths) => paths.map(path => Object(_jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__[\"transform\"])(matrix, path));\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/transform.js?");

/***/ }),

/***/ "../../algorithm/paths/union.js":
/*!*********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/union.js ***!
  \*********************************************************************/
/*! exports provided: union */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"union\", function() { return union; });\n// FIX: Deduplication.\r\n\r\nconst union = (...pathsets) => [].concat(...pathsets);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/paths/union.js?");

/***/ }),

/***/ "../../algorithm/points/buildConvexHull.js":
/*!********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/points/buildConvexHull.js ***!
  \********************************************************************************/
/*! exports provided: buildConvexHull */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildConvexHull\", function() { return buildConvexHull; });\n/* harmony import */ var quickhull3d_dist_QuickHull__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! quickhull3d/dist/QuickHull */ \"../../node_modules/quickhull3d/dist/QuickHull.js\");\n/* harmony import */ var quickhull3d_dist_QuickHull__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(quickhull3d_dist_QuickHull__WEBPACK_IMPORTED_MODULE_0__);\n\r\n\r\nconst buildConvexHull = (options = {}, points) => {\r\n  const hull = new quickhull3d_dist_QuickHull__WEBPACK_IMPORTED_MODULE_0___default.a(points, { skipTriangulation: true });\r\n  hull.build();\r\n  return hull.collectFaces().map(polygon => polygon.map(nthPoint => points[nthPoint]));\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/points/buildConvexHull.js?");

/***/ }),

/***/ "../../algorithm/points/buildConvexMinkowskiSum.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/points/buildConvexMinkowskiSum.js ***!
  \****************************************************************************************/
/*! exports provided: buildConvexMinkowskiSum */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildConvexMinkowskiSum\", function() { return buildConvexMinkowskiSum; });\n/* harmony import */ var _ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ops */ \"../../algorithm/points/ops.js\");\n\r\n\r\nconst buildConvexMinkowskiSum = (options = {}, aPoints, bPoints) => {\r\n  const summedPoints = [];\r\n  for (const aPoint of aPoints) {\r\n    for (const summedPoint of Object(_ops__WEBPACK_IMPORTED_MODULE_0__[\"translate\"])(aPoint, bPoints)) {\r\n      summedPoints.push(summedPoint);\r\n    }\r\n  }\r\n  return summedPoints;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/points/buildConvexMinkowskiSum.js?");

/***/ }),

/***/ "../../algorithm/points/canonicalize.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/points/canonicalize.js ***!
  \*****************************************************************************/
/*! exports provided: canonicalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return canonicalize; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\nconst canonicalize = (points) => points.map(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"]);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/points/canonicalize.js?");

/***/ }),

/***/ "../../algorithm/points/eachPoint.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/points/eachPoint.js ***!
  \**************************************************************************/
/*! exports provided: eachPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eachPoint\", function() { return eachPoint; });\nconst eachPoint = (options = {}, thunk, points) => {\r\n  for (const point of points) {\r\n    thunk(point);\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/points/eachPoint.js?");

/***/ }),

/***/ "../../algorithm/points/fromPolygons.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/points/fromPolygons.js ***!
  \*****************************************************************************/
/*! exports provided: fromPolygons */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPolygons\", function() { return fromPolygons; });\nconst fromPolygons = (options = {}, polygons) => {\r\n  const points = [];\r\n  for (const polygon of polygons) {\r\n    for (const point of polygon) {\r\n      points.push(point);\r\n    }\r\n  }\r\n  return points;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/points/fromPolygons.js?");

/***/ }),

/***/ "../../algorithm/points/main.js":
/*!*********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/points/main.js ***!
  \*********************************************************************/
/*! exports provided: canonicalize, buildConvexHull, buildConvexMinkowskiSum, eachPoint, fromPolygons, measureBoundingBox, transform, translate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ops */ \"../../algorithm/points/ops.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__[\"transform\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"translate\", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__[\"translate\"]; });\n\n/* harmony import */ var _buildConvexHull__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./buildConvexHull */ \"../../algorithm/points/buildConvexHull.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildConvexHull\", function() { return _buildConvexHull__WEBPACK_IMPORTED_MODULE_1__[\"buildConvexHull\"]; });\n\n/* harmony import */ var _buildConvexMinkowskiSum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./buildConvexMinkowskiSum */ \"../../algorithm/points/buildConvexMinkowskiSum.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildConvexMinkowskiSum\", function() { return _buildConvexMinkowskiSum__WEBPACK_IMPORTED_MODULE_2__[\"buildConvexMinkowskiSum\"]; });\n\n/* harmony import */ var _canonicalize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./canonicalize */ \"../../algorithm/points/canonicalize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return _canonicalize__WEBPACK_IMPORTED_MODULE_3__[\"canonicalize\"]; });\n\n/* harmony import */ var _eachPoint__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./eachPoint */ \"../../algorithm/points/eachPoint.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"eachPoint\", function() { return _eachPoint__WEBPACK_IMPORTED_MODULE_4__[\"eachPoint\"]; });\n\n/* harmony import */ var _fromPolygons__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./fromPolygons */ \"../../algorithm/points/fromPolygons.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromPolygons\", function() { return _fromPolygons__WEBPACK_IMPORTED_MODULE_5__[\"fromPolygons\"]; });\n\n/* harmony import */ var _measureBoundingBox__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./measureBoundingBox */ \"../../algorithm/points/measureBoundingBox.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingBox\", function() { return _measureBoundingBox__WEBPACK_IMPORTED_MODULE_6__[\"measureBoundingBox\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/points/main.js?");

/***/ }),

/***/ "../../algorithm/points/measureBoundingBox.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/points/measureBoundingBox.js ***!
  \***********************************************************************************/
/*! exports provided: measureBoundingBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingBox\", function() { return measureBoundingBox; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _eachPoint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./eachPoint */ \"../../algorithm/points/eachPoint.js\");\n\r\n\r\n\r\n\r\n// returns an array of two Vector3Ds (minimum coordinates and maximum coordinates)\r\nconst measureBoundingBox = (points) => {\r\n  let max = points[0];\r\n  let min = points[0];\r\n  Object(_eachPoint__WEBPACK_IMPORTED_MODULE_1__[\"eachPoint\"])({},\r\n            point => {\r\n              max = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"max\"])(max, point);\r\n              min = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"min\"])(min, point);\r\n            },\r\n            points);\r\n  return [min, max];\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/points/measureBoundingBox.js?");

/***/ }),

/***/ "../../algorithm/points/ops.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/points/ops.js ***!
  \********************************************************************/
/*! exports provided: transform, translate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return transform; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"translate\", function() { return translate; });\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\nconst transform = (matrix, points) => points.map(point => Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"transform\"])(matrix, point));\r\nconst translate = ([x = 0, y = 0, z = 0], points) => transform(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromTranslation\"])([x, y, z]), points);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/points/ops.js?");

/***/ }),

/***/ "../../algorithm/polygons/blessAsConvex.js":
/*!********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/blessAsConvex.js ***!
  \********************************************************************************/
/*! exports provided: blessAsConvex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"blessAsConvex\", function() { return blessAsConvex; });\nconst blessAsConvex = (paths) => { paths.isConvex = true; return paths; };\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/blessAsConvex.js?");

/***/ }),

/***/ "../../algorithm/polygons/blessAsTriangles.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/blessAsTriangles.js ***!
  \***********************************************************************************/
/*! exports provided: blessAsTriangles */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"blessAsTriangles\", function() { return blessAsTriangles; });\nconst blessAsTriangles = (paths) => { paths.isTriangles = true; return paths; };\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/blessAsTriangles.js?");

/***/ }),

/***/ "../../algorithm/polygons/canonicalize.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/canonicalize.js ***!
  \*******************************************************************************/
/*! exports provided: canonicalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return canonicalize; });\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\nconst isDegenerate = (polygon) => {\r\n  for (let nth = 0; nth < polygon.length; nth++) {\r\n    if (Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"equals\"])(polygon[nth], polygon[(nth + 1) % polygon.length])) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nconst canonicalize = (polygons) => {\r\n  const canonicalized = [];\r\n  for (let polygon of polygons) {\r\n    polygon = Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"])(polygon);\r\n    if (!isDegenerate(polygon)) {\r\n      canonicalized.push(polygon);\r\n    }\r\n  }\r\n  return canonicalized;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/canonicalize.js?");

/***/ }),

/***/ "../../algorithm/polygons/cutTrianglesByPlane.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/cutTrianglesByPlane.js ***!
  \**************************************************************************************/
/*! exports provided: cutTrianglesByPlane */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cutTrianglesByPlane\", function() { return cutTrianglesByPlane; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\nconst EPSILON = 1e-5;\r\n\r\n// Point Classification.\r\nconst COPLANAR = 0;\r\nconst FRONT = 1;\r\nconst BACK = 2;\r\n\r\n// Edge Properties.\r\nconst START = 0;\r\nconst END = 1;\r\n\r\n// Plane Properties.\r\nconst W = 3;\r\n\r\nconst toType = (plane, point) => {\r\n  let t = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(plane, point) - plane[W];\r\n  if (t < -EPSILON) {\r\n    return BACK;\r\n  } else if (t > EPSILON) {\r\n    return FRONT;\r\n  } else {\r\n    return COPLANAR;\r\n  }\r\n};\r\n\r\nconst spanPoint = (plane, startPoint, endPoint) => {\r\n  let t = (plane[W] - Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(plane, startPoint)) / Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(plane, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(endPoint, startPoint));\r\n  return Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"])(Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"lerp\"])(t, startPoint, endPoint));\r\n};\r\n\r\nconst lexicographcalPointOrder = ([aX, aY, aZ], [bX, bY, bZ]) => {\r\n  if (aX < bX) { return -1; }\r\n  if (aX > bX) { return 1; }\r\n  if (aY < bY) { return -1; }\r\n  if (aY > bY) { return 1; }\r\n  if (aZ < bZ) { return -1; }\r\n  if (aZ > bZ) { return 1; }\r\n  return 0;\r\n};\r\n\r\n/**\r\n * Takes a cross-section of a triangulated solid at a plane, yielding surface defining loops\r\n * in that plane.\r\n *\r\n * FIX: Make sure this works properly for solids with holes in them, etc.\r\n * FIX: Figure out where the duplicate paths are coming from and see if we can avoid deduplication.\r\n */\r\nconst cutTrianglesByPlane = (plane, triangles) => {\r\n  let edges = [];\r\n  const addEdge = (start, end) => {\r\n    edges.push([start, end]);\r\n  };\r\n\r\n  // Find the edges along the plane and fold them into paths to produce a set of closed loops.\r\n  for (let nth = 0; nth < triangles.length; nth++) {\r\n    const triangle = triangles[nth];\r\n    const [a, b, c] = triangle;\r\n    const [aType, bType, cType] = [toType(plane, a), toType(plane, b), toType(plane, c)];\r\n\r\n    switch (aType) {\r\n      case FRONT:\r\n        switch (bType) {\r\n          case FRONT:\r\n            switch (cType) {\r\n              case FRONT:\r\n                // No intersection.\r\n                break;\r\n              case COPLANAR:\r\n                // Corner touches.\r\n                break;\r\n              case BACK:\r\n                // b-c down c-a up\r\n                addEdge(spanPoint(plane, b, c), spanPoint(plane, c, a));\r\n                break;\r\n            }\r\n            break;\r\n          case COPLANAR:\r\n            switch (cType) {\r\n              case FRONT:\r\n                // Corner touches.\r\n                break;\r\n              case COPLANAR:\r\n                // b-c along plane.\r\n                addEdge(b, c);\r\n                break;\r\n              case BACK:\r\n                // down at b, up c-a.\r\n                addEdge(b, spanPoint(plane, c, a));\r\n                break;\r\n            }\r\n            break;\r\n          case BACK:\r\n            switch (cType) {\r\n              case FRONT:\r\n                // a-b down, b-c up.\r\n                addEdge(spanPoint(plane, a, b), spanPoint(plane, b, c));\r\n                break;\r\n              case COPLANAR:\r\n                // a-b down, c up.\r\n                addEdge(spanPoint(plane, a, b), c);\r\n                break;\r\n              case BACK:\r\n                // a-b down, c-a up.\r\n                addEdge(spanPoint(plane, a, b), spanPoint(plane, c, a));\r\n                break;\r\n            }\r\n            break;\r\n        }\r\n        break;\r\n      case COPLANAR:\r\n        switch (bType) {\r\n          case FRONT:\r\n            switch (cType) {\r\n              case FRONT:\r\n                // Corner touches.\r\n                break;\r\n              case COPLANAR:\r\n                // c-a along plane.\r\n                addEdge(c, a);\r\n                break;\r\n              case BACK:\r\n                // down at b-c, up at a\r\n                addEdge(spanPoint(plane, b, c), a);\r\n                break;\r\n            }\r\n            break;\r\n          case COPLANAR:\r\n            switch (cType) {\r\n              case FRONT:\r\n                // a-b along plane.\r\n                addEdge(a, b);\r\n                break;\r\n              case COPLANAR:\r\n                // Entirely coplanar -- doesn't cut.\r\n                break;\r\n              case BACK:\r\n                // Wrong half-space.\r\n                break;\r\n            }\r\n            break;\r\n          case BACK:\r\n            switch (cType) {\r\n              case FRONT:\r\n                // down at a, up at b-c.\r\n                addEdge(a, spanPoint(plane, b, c));\r\n                break;\r\n              case COPLANAR:\r\n                // Wrong half-space.\r\n                break;\r\n              case BACK:\r\n                // Wrong half-space.\r\n                break;\r\n            }\r\n            break;\r\n        }\r\n        break;\r\n      case BACK:\r\n        switch (bType) {\r\n          case FRONT:\r\n            switch (cType) {\r\n              case FRONT:\r\n                // down at c-a, up at a-b\r\n                addEdge(spanPoint(plane, c, a), spanPoint(plane, a, b));\r\n                break;\r\n              case COPLANAR:\r\n                // down at c, up at a-b\r\n                addEdge(c, spanPoint(plane, a, b));\r\n                break;\r\n              case BACK:\r\n                // down at b-c, up at a-b.\r\n                addEdge(spanPoint(plane, b, c), spanPoint(plane, a, b));\r\n                break;\r\n            }\r\n            break;\r\n          case COPLANAR:\r\n            switch (cType) {\r\n              case FRONT:\r\n                // down at c-a, up at b.\r\n                addEdge(spanPoint(plane, c, a), b);\r\n                break;\r\n              case COPLANAR:\r\n                // Wrong half-space.\r\n                break;\r\n              case BACK:\r\n                // Wrong half-space.\r\n                break;\r\n            }\r\n            break;\r\n          case BACK:\r\n            switch (cType) {\r\n              case FRONT:\r\n                // down at c-a, up at b-c.\r\n                addEdge(spanPoint(plane, c, a), spanPoint(plane, b, c));\r\n                break;\r\n              case COPLANAR:\r\n                // Wrong half-space.\r\n                break;\r\n              case BACK:\r\n                // Wrong half-space.\r\n                break;\r\n            }\r\n            break;\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  const extractSuccessor = (edges, start) => {\r\n    // FIX: Use a binary search to take advantage of the sorting of the edges.\r\n    for (let nth = 0; nth < edges.length; nth++) {\r\n      const candidate = edges[nth];\r\n      if (Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"equals\"])(candidate[START], start)) {\r\n        edges.splice(nth, 1);\r\n        return candidate;\r\n      }\r\n    }\r\n    // Given manifold geometry, there must always be a successor.\r\n    throw Error('Non-manifold');\r\n  };\r\n\r\n  // Sort the edges so that deduplication is efficient.\r\n  edges.sort(lexicographcalPointOrder);\r\n\r\n  // Assemble the edges into loops which are closed paths.\r\n  const loops = [];\r\n  while (edges.length > 0) {\r\n    let edge = edges.shift();\r\n    const loop = [edge[START]];\r\n    while (!Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"equals\"])(edge[END], loop[0])) {\r\n      edge = extractSuccessor(edges, edge[END]);\r\n      loop.push(edge[START]);\r\n    }\r\n    loops.push(loop);\r\n  }\r\n\r\n  return loops;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/cutTrianglesByPlane.js?");

/***/ }),

/***/ "../../algorithm/polygons/eachPoint.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/eachPoint.js ***!
  \****************************************************************************/
/*! exports provided: eachPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eachPoint\", function() { return eachPoint; });\nconst eachPoint = (options = {}, thunk, polygons) => {\r\n  for (const polygon of polygons) {\r\n    for (const point of polygon) {\r\n      thunk(point);\r\n    }\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/eachPoint.js?");

/***/ }),

/***/ "../../algorithm/polygons/flip.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/flip.js ***!
  \***********************************************************************/
/*! exports provided: flip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return flip; });\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./map */ \"../../algorithm/polygons/map.js\");\n\r\n\r\n\r\nconst flip = (polygons) => Object(_map__WEBPACK_IMPORTED_MODULE_1__[\"map\"])(polygons, _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__[\"flip\"]);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/flip.js?");

/***/ }),

/***/ "../../algorithm/polygons/fromPointsAndPaths.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/fromPointsAndPaths.js ***!
  \*************************************************************************************/
/*! exports provided: fromPointsAndPaths */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPointsAndPaths\", function() { return fromPointsAndPaths; });\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n\r\n\r\nconst fromPointsAndPaths = ({ points = [], paths = [] }) => {\r\n  const polygons = [];\r\n  for (const path of paths) {\r\n    polygons.push(Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__[\"fromPoints\"])(path.map(nth => points[nth])));\r\n  }\r\n  return polygons;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/fromPointsAndPaths.js?");

/***/ }),

/***/ "../../algorithm/polygons/isTriangle.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/isTriangle.js ***!
  \*****************************************************************************/
/*! exports provided: isTriangle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isTriangle\", function() { return isTriangle; });\n/* harmony import */ var _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-path */ \"../../algorithm/path/main.js\");\n\r\n\r\nconst isTriangle = (path) => Object(_jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__[\"isClosed\"])(path) && path.length === 3;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/isTriangle.js?");

/***/ }),

/***/ "../../algorithm/polygons/main.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/main.js ***!
  \***********************************************************************/
/*! exports provided: canonicalize, cutTrianglesByPlane, eachPoint, flip, fromPointsAndPaths, isTriangle, makeConvex, map, measureBoundingBox, measureBoundingSphere, toGeneric, toPoints, toTriangles, rotateX, rotateY, rotateZ, scale, transform, translate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateX\", function() { return rotateX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateY\", function() { return rotateY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateZ\", function() { return rotateZ; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"translate\", function() { return translate; });\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n/* harmony import */ var _canonicalize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./canonicalize */ \"../../algorithm/polygons/canonicalize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return _canonicalize__WEBPACK_IMPORTED_MODULE_1__[\"canonicalize\"]; });\n\n/* harmony import */ var _cutTrianglesByPlane__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cutTrianglesByPlane */ \"../../algorithm/polygons/cutTrianglesByPlane.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"cutTrianglesByPlane\", function() { return _cutTrianglesByPlane__WEBPACK_IMPORTED_MODULE_2__[\"cutTrianglesByPlane\"]; });\n\n/* harmony import */ var _eachPoint__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./eachPoint */ \"../../algorithm/polygons/eachPoint.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"eachPoint\", function() { return _eachPoint__WEBPACK_IMPORTED_MODULE_3__[\"eachPoint\"]; });\n\n/* harmony import */ var _flip__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./flip */ \"../../algorithm/polygons/flip.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return _flip__WEBPACK_IMPORTED_MODULE_4__[\"flip\"]; });\n\n/* harmony import */ var _fromPointsAndPaths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./fromPointsAndPaths */ \"../../algorithm/polygons/fromPointsAndPaths.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromPointsAndPaths\", function() { return _fromPointsAndPaths__WEBPACK_IMPORTED_MODULE_5__[\"fromPointsAndPaths\"]; });\n\n/* harmony import */ var _isTriangle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./isTriangle */ \"../../algorithm/polygons/isTriangle.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"isTriangle\", function() { return _isTriangle__WEBPACK_IMPORTED_MODULE_6__[\"isTriangle\"]; });\n\n/* harmony import */ var _makeConvex__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./makeConvex */ \"../../algorithm/polygons/makeConvex.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"makeConvex\", function() { return _makeConvex__WEBPACK_IMPORTED_MODULE_7__[\"makeConvex\"]; });\n\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./map */ \"../../algorithm/polygons/map.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"map\", function() { return _map__WEBPACK_IMPORTED_MODULE_8__[\"map\"]; });\n\n/* harmony import */ var _measureBoundingBox__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./measureBoundingBox */ \"../../algorithm/polygons/measureBoundingBox.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingBox\", function() { return _measureBoundingBox__WEBPACK_IMPORTED_MODULE_9__[\"measureBoundingBox\"]; });\n\n/* harmony import */ var _measureBoundingSphere__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./measureBoundingSphere */ \"../../algorithm/polygons/measureBoundingSphere.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingSphere\", function() { return _measureBoundingSphere__WEBPACK_IMPORTED_MODULE_10__[\"measureBoundingSphere\"]; });\n\n/* harmony import */ var _toGeneric__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./toGeneric */ \"../../algorithm/polygons/toGeneric.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toGeneric\", function() { return _toGeneric__WEBPACK_IMPORTED_MODULE_11__[\"toGeneric\"]; });\n\n/* harmony import */ var _toPoints__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./toPoints */ \"../../algorithm/polygons/toPoints.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toPoints\", function() { return _toPoints__WEBPACK_IMPORTED_MODULE_12__[\"toPoints\"]; });\n\n/* harmony import */ var _toTriangles__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./toTriangles */ \"../../algorithm/polygons/toTriangles.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toTriangles\", function() { return _toTriangles__WEBPACK_IMPORTED_MODULE_13__[\"toTriangles\"]; });\n\n/* harmony import */ var _transform__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./transform */ \"../../algorithm/polygons/transform.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return _transform__WEBPACK_IMPORTED_MODULE_14__[\"transform\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst rotateX = (angle, polygons) => Object(_transform__WEBPACK_IMPORTED_MODULE_14__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromXRotation\"])(angle), polygons);\r\nconst rotateY = (angle, polygons) => Object(_transform__WEBPACK_IMPORTED_MODULE_14__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromYRotation\"])(angle), polygons);\r\nconst rotateZ = (angle, polygons) => Object(_transform__WEBPACK_IMPORTED_MODULE_14__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromZRotation\"])(angle), polygons);\r\nconst scale = (vector, polygons) => Object(_transform__WEBPACK_IMPORTED_MODULE_14__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromScaling\"])(vector), polygons);\r\nconst translate = (vector, polygons) => Object(_transform__WEBPACK_IMPORTED_MODULE_14__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromTranslation\"])(vector), polygons);\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/main.js?");

/***/ }),

/***/ "../../algorithm/polygons/makeConvex.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/makeConvex.js ***!
  \*****************************************************************************/
/*! exports provided: makeConvex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makeConvex\", function() { return makeConvex; });\n/* harmony import */ var tess2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tess2 */ \"../../node_modules/tess2/index.js\");\n/* harmony import */ var tess2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tess2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _blessAsConvex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./blessAsConvex */ \"../../algorithm/polygons/blessAsConvex.js\");\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n\r\n\r\n\r\n\r\nconst toContour = (polygon) => {\r\n  const points = [];\r\n  for (const [x = 0, y = 0, z = 0] of polygon) {\r\n    points.push(x, y, z);\r\n  }\r\n  return points;\r\n};\r\n\r\nconst fromTessellation = (tessellation) => {\r\n  const tessPolygons = tessellation.elements;\r\n  const vertices = tessellation.vertices;\r\n  const polygons = [];\r\n\r\n  const toPoint = (offset) => {\r\n    const vertex = tessPolygons[offset];\r\n    return [vertices[vertex * 3 + 0], vertices[vertex * 3 + 1], vertices[vertex * 3 + 2]];\r\n  };\r\n\r\n  for (let nth = 0; nth < tessPolygons.length; nth += 3) {\r\n    polygons.push([toPoint(nth + 0), toPoint(nth + 1), toPoint(nth + 2)]);\r\n  }\r\n\r\n  return polygons;\r\n};\r\n\r\n// This currently does triangulation.\r\n// Higher arities are possible, but end up being null padded.\r\n// Let's see if they're useful.\r\n\r\n// TODO: Call this toConvexPolygons\r\nconst makeConvex = (options = {}, polygons) => {\r\n  if (polygons.isConvex) {\r\n    return polygons;\r\n  }\r\n  if (polygons.every(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_2__[\"isConvex\"])) {\r\n    return Object(_blessAsConvex__WEBPACK_IMPORTED_MODULE_1__[\"blessAsConvex\"])(polygons);\r\n  }\r\n  const contours = polygons.map(toContour);\r\n  // CONISDER: Migrating from tess2 to earclip, given we flatten in solid tessellation anyhow.\r\n  const convex = fromTessellation(\r\n    tess2__WEBPACK_IMPORTED_MODULE_0___default.a.tesselate({ contours: contours,\r\n                      windingRule: tess2__WEBPACK_IMPORTED_MODULE_0___default.a.WINDING_ODD,\r\n                      elementType: tess2__WEBPACK_IMPORTED_MODULE_0___default.a.POLYGONS,\r\n                      polySize: 3,\r\n                      vertexSize: 3\r\n    }));\r\n  return Object(_blessAsConvex__WEBPACK_IMPORTED_MODULE_1__[\"blessAsConvex\"])(convex);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/makeConvex.js?");

/***/ }),

/***/ "../../algorithm/polygons/map.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/map.js ***!
  \**********************************************************************/
/*! exports provided: map */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"map\", function() { return map; });\n/**\r\n * Transforms each polygon of Polygons.\r\n *\r\n * @param {Polygons} original - the Polygons to transform.\r\n * @param {Function} [transform=identity] - function used to transform the polygons.\r\n * @returns {Polygons} a copy with transformed polygons.\r\n */\r\nconst map = (original, transform) => {\r\n  if (original === undefined) {\r\n    original = [];\r\n  }\r\n  if (transform === undefined) {\r\n    transform = _ => _;\r\n  }\r\n  return original.map(polygon => transform(polygon));\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/map.js?");

/***/ }),

/***/ "../../algorithm/polygons/measureBoundingBox.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/measureBoundingBox.js ***!
  \*************************************************************************************/
/*! exports provided: measureBoundingBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingBox\", function() { return measureBoundingBox; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _eachPoint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./eachPoint */ \"../../algorithm/polygons/eachPoint.js\");\n\r\n\r\n\r\n\r\n// returns an array of two Vector3Ds (minimum coordinates and maximum coordinates)\r\nconst measureBoundingBox = (polygons) => {\r\n  let max = polygons[0][0];\r\n  let min = polygons[0][0];\r\n  Object(_eachPoint__WEBPACK_IMPORTED_MODULE_1__[\"eachPoint\"])({},\r\n            point => {\r\n              max = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"max\"])(max, point);\r\n              min = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"min\"])(min, point);\r\n            },\r\n            polygons);\r\n  return [min, max];\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/measureBoundingBox.js?");

/***/ }),

/***/ "../../algorithm/polygons/measureBoundingSphere.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/measureBoundingSphere.js ***!
  \****************************************************************************************/
/*! exports provided: measureBoundingSphere */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingSphere\", function() { return measureBoundingSphere; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _measureBoundingBox__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./measureBoundingBox */ \"../../algorithm/polygons/measureBoundingBox.js\");\n\r\n\r\n\r\n\r\n/** Measure the bounding sphere of the given poly3\r\n * @param {poly3} the poly3 to measure\r\n * @returns computed bounding sphere; center (vec3) and radius\r\n */\r\nconst measureBoundingSphere = (polygons) => {\r\n  if (polygons.boundingSphere === undefined) {\r\n    const [min, max] = Object(_measureBoundingBox__WEBPACK_IMPORTED_MODULE_1__[\"measureBoundingBox\"])(polygons);\r\n    const center = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"scale\"])(0.5, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(min, max));\r\n    const radius = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"distance\"])(center, max);\r\n    polygons.boundingSphere = [center, radius];\r\n  }\r\n  return polygons.boundingSphere;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/measureBoundingSphere.js?");

/***/ }),

/***/ "../../algorithm/polygons/toGeneric.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/toGeneric.js ***!
  \****************************************************************************/
/*! exports provided: toGeneric */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toGeneric\", function() { return toGeneric; });\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map */ \"../../algorithm/polygons/map.js\");\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n\r\n\r\n\r\nconst toGeneric = (polygons) => Object(_map__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(polygons, _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__[\"map\"]);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/toGeneric.js?");

/***/ }),

/***/ "../../algorithm/polygons/toPoints.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/toPoints.js ***!
  \***************************************************************************/
/*! exports provided: toPoints */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toPoints\", function() { return toPoints; });\n/* harmony import */ var _eachPoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eachPoint */ \"../../algorithm/polygons/eachPoint.js\");\n\r\n\r\nconst toPoints = (options = {}, polygons) => {\r\n  const points = [];\r\n  Object(_eachPoint__WEBPACK_IMPORTED_MODULE_0__[\"eachPoint\"])(options, point => points.push(point), polygons);\r\n  return points;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/toPoints.js?");

/***/ }),

/***/ "../../algorithm/polygons/toTriangles.js":
/*!******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/toTriangles.js ***!
  \******************************************************************************/
/*! exports provided: toTriangles */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toTriangles\", function() { return toTriangles; });\n/* harmony import */ var _blessAsTriangles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./blessAsTriangles */ \"../../algorithm/polygons/blessAsTriangles.js\");\n/* harmony import */ var _isTriangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isTriangle */ \"../../algorithm/polygons/isTriangle.js\");\n\r\n\r\n\r\nconst toTriangles = (options = {}, paths) => {\r\n  if (paths.isTriangles) {\r\n    return paths;\r\n  }\r\n  if (paths.every(_isTriangle__WEBPACK_IMPORTED_MODULE_1__[\"isTriangle\"])) {\r\n    return Object(_blessAsTriangles__WEBPACK_IMPORTED_MODULE_0__[\"blessAsTriangles\"])(paths);\r\n  }\r\n  const triangles = [];\r\n  for (const path of paths) {\r\n    for (let nth = 2; nth < path.length; nth++) {\r\n      triangles.push([path[0], path[nth - 1], path[nth]]);\r\n    }\r\n  }\r\n  return Object(_blessAsTriangles__WEBPACK_IMPORTED_MODULE_0__[\"blessAsTriangles\"])(triangles);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/toTriangles.js?");

/***/ }),

/***/ "../../algorithm/polygons/transform.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/transform.js ***!
  \****************************************************************************/
/*! exports provided: transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return transform; });\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n\r\n\r\nconst transform = (matrix, polygons) => polygons.map(polygon => Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__[\"transform\"])(matrix, polygon));\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/polygons/transform.js?");

/***/ }),

/***/ "../../algorithm/shape/buildAdaptiveCubicBezierCurve.js":
/*!*********************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildAdaptiveCubicBezierCurve.js ***!
  \*********************************************************************************************/
/*! exports provided: buildAdaptiveCubicBezierCurve */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildAdaptiveCubicBezierCurve\", function() { return buildAdaptiveCubicBezierCurve; });\n/* harmony import */ var adaptive_bezier_curve__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! adaptive-bezier-curve */ \"../../node_modules/adaptive-bezier-curve/index.js\");\n/* harmony import */ var adaptive_bezier_curve__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(adaptive_bezier_curve__WEBPACK_IMPORTED_MODULE_0__);\n\r\n\r\nconst buildAdaptiveCubicBezierCurve = ({ scale = 2 }, [start, c1, c2, end]) => adaptive_bezier_curve__WEBPACK_IMPORTED_MODULE_0___default()(start, c1, c2, end, scale);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildAdaptiveCubicBezierCurve.js?");

/***/ }),

/***/ "../../algorithm/shape/buildGeodesicSphere.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildGeodesicSphere.js ***!
  \***********************************************************************************/
/*! exports provided: buildGeodesicSphere */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildGeodesicSphere\", function() { return buildGeodesicSphere; });\n/* harmony import */ var _buildRegularIcosahedron__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buildRegularIcosahedron */ \"../../algorithm/shape/buildRegularIcosahedron.js\");\n/* harmony import */ var _subdivideTriangularMesh__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./subdivideTriangularMesh */ \"../../algorithm/shape/subdivideTriangularMesh.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\n\r\n/**\r\n *\r\n * Builds a sphere with at least the number of faces requested, and less than\r\n *   four times the number of faces requested.\r\n */\r\nconst buildGeodesicSphere = ({ faces = 20 }) => {\r\n  let mesh = Object(_buildRegularIcosahedron__WEBPACK_IMPORTED_MODULE_0__[\"buildRegularIcosahedron\"])({});\r\n  while (mesh.length < faces) {\r\n    mesh = Object(_subdivideTriangularMesh__WEBPACK_IMPORTED_MODULE_1__[\"subdivideTriangularMesh\"])(mesh);\r\n  }\r\n  return mesh.map(triangle => triangle.map(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"unit\"]));\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildGeodesicSphere.js?");

/***/ }),

/***/ "../../algorithm/shape/buildRegularIcosahedron.js":
/*!***************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildRegularIcosahedron.js ***!
  \***************************************************************************************/
/*! exports provided: buildRegularIcosahedron */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildRegularIcosahedron\", function() { return buildRegularIcosahedron; });\n/* harmony import */ var _jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-polygons */ \"../../algorithm/polygons/main.js\");\n\r\n\r\n// Unit icosahedron vertices.\r\nconst points = [[0.850651, 0.000000, -0.525731],\r\n                [0.850651, -0.000000, 0.525731],\r\n                [-0.850651, -0.000000, 0.525731],\r\n                [-0.850651, 0.000000, -0.525731],\r\n                [0.000000, -0.525731, 0.850651],\r\n                [0.000000, 0.525731, 0.850651],\r\n                [0.000000, 0.525731, -0.850651],\r\n                [0.000000, -0.525731, -0.850651],\r\n                [-0.525731, -0.850651, -0.000000],\r\n                [0.525731, -0.850651, -0.000000],\r\n                [0.525731, 0.850651, 0.000000],\r\n                [-0.525731, 0.850651, 0.000000]];\r\n\r\n// Triangular decomposition structure.\r\nconst paths = [[1, 9, 0], [0, 10, 1], [0, 7, 6], [0, 6, 10],\r\n               [0, 9, 7], [4, 1, 5], [9, 1, 4], [1, 10, 5],\r\n               [3, 8, 2], [2, 11, 3], [4, 5, 2], [2, 8, 4],\r\n               [5, 11, 2], [6, 7, 3], [3, 11, 6], [3, 7, 8],\r\n               [4, 8, 9], [5, 10, 11], [6, 11, 10], [7, 9, 8]];\r\n\r\n// FIX: Why aren't we computing the convex hull?\r\nconst buildRegularIcosahedron = (options = {}) => {\r\n  return Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"fromPointsAndPaths\"])({ points: points, paths: paths });\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildRegularIcosahedron.js?");

/***/ }),

/***/ "../../algorithm/shape/buildRegularPolygon.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildRegularPolygon.js ***!
  \***********************************************************************************/
/*! exports provided: buildRegularPolygon */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildRegularPolygon\", function() { return buildRegularPolygon; });\n/* harmony import */ var _jsxcad_math_vec2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec2 */ \"../../math/vec2/main.js\");\n\r\n\r\n/**\r\n * Construct a regular unit polygon of a given edge count.\r\n * Note: radius and length must not conflict.\r\n *\r\n * @param {Object} [options] - options for construction\r\n * @param {Integer} [options.edges=32] - how many edges the polygon has.\r\n * @returns {PointArray} Array of points along the path of the circle in CCW winding.\r\n *\r\n * @example\r\n * const circlePoints = regularPolygon({ edges: 32 })\r\n *\r\n * @example\r\n * const squarePoints = regularPolygon({ edges: 4 })\r\n * })\r\n */\r\nconst buildRegularPolygon = ({ edges = 32 }) => {\r\n  let points = [];\r\n  for (let i = 0; i < edges; i++) {\r\n    let radians = 2 * Math.PI * i / edges;\r\n    let point = Object(_jsxcad_math_vec2__WEBPACK_IMPORTED_MODULE_0__[\"fromAngleRadians\"])(radians);\r\n    points.push(point);\r\n  }\r\n  return points;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildRegularPolygon.js?");

/***/ }),

/***/ "../../algorithm/shape/buildRegularPrism.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildRegularPrism.js ***!
  \*********************************************************************************/
/*! exports provided: buildRegularPrism */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildRegularPrism\", function() { return buildRegularPrism; });\n/* harmony import */ var _buildRegularPolygon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buildRegularPolygon */ \"../../algorithm/shape/buildRegularPolygon.js\");\n/* harmony import */ var _extrudeLinear__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extrudeLinear */ \"../../algorithm/shape/extrudeLinear.js\");\n\r\n\r\n\r\n/**\r\n * Construct a regular unit prism of a given edge count.\r\n * Note: radius and length must not conflict.\r\n *\r\n * @param {Object} [options] - options for construction\r\n * @param {Integer} [options.edges=32] - how many edges the polygon has.\r\n * @returns {PointArray} Array of points along the path of the circle in CCW winding.\r\n *\r\n * @example\r\n * const circlePoints = regularPolygon({ edges: 32 })\r\n */\r\n\r\nconst buildRegularPrism = ({ edges = 32 }) =>\r\n  Object(_extrudeLinear__WEBPACK_IMPORTED_MODULE_1__[\"extrudeLinear\"])({ height: 1 }, [Object(_buildRegularPolygon__WEBPACK_IMPORTED_MODULE_0__[\"buildRegularPolygon\"])({ edges: edges })]);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildRegularPrism.js?");

/***/ }),

/***/ "../../algorithm/shape/buildRegularTetrahedron.js":
/*!***************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildRegularTetrahedron.js ***!
  \***************************************************************************************/
/*! exports provided: buildRegularTetrahedron */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildRegularTetrahedron\", function() { return buildRegularTetrahedron; });\n/* harmony import */ var _jsxcad_algorithm_points__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-points */ \"../../algorithm/points/main.js\");\n\r\n\r\n// Unit tetrahedron vertices.\r\nconst points = [[1, 1, 1], [-1, 1, -1], [1, -1, -1],\r\n                [-1, 1, -1], [-1, -1, 1], [1, -1, -1],\r\n                [1, 1, 1], [1, -1, -1], [-1, -1, 1],\r\n                [1, 1, 1], [-1, -1, 1], [-1, 1, -1]];\r\n\r\nconst buildRegularTetrahedron = (options = {}) => Object(_jsxcad_algorithm_points__WEBPACK_IMPORTED_MODULE_0__[\"buildConvexHull\"])({}, points);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildRegularTetrahedron.js?");

/***/ }),

/***/ "../../algorithm/shape/buildRingSphere.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildRingSphere.js ***!
  \*******************************************************************************/
/*! exports provided: buildRingSphere */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildRingSphere\", function() { return buildRingSphere; });\n/* harmony import */ var _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-path */ \"../../algorithm/path/main.js\");\n/* harmony import */ var _jsxcad_algorithm_points__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-points */ \"../../algorithm/points/main.js\");\n/* harmony import */ var _buildRegularPolygon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./buildRegularPolygon */ \"../../algorithm/shape/buildRegularPolygon.js\");\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nconst buildRingSphere = ({ resolution = 20 }) => {\r\n  const paths = [];\r\n  // Trace out latitudinal rings.\r\n  for (let slice = 0; slice <= resolution; slice++) {\r\n    let angle = Math.PI * 2.0 * slice / resolution;\r\n    let height = Math.sin(angle);\r\n    let radius = Math.cos(angle);\r\n    paths.push(Object(_jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__[\"translate\"])([0, 0, height], Object(_jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__[\"scale\"])([radius, radius, radius], Object(_buildRegularPolygon__WEBPACK_IMPORTED_MODULE_2__[\"buildRegularPolygon\"])({ edges: resolution }))));\r\n  }\r\n  // Hull the rings to form a sphere.\r\n  return Object(_jsxcad_algorithm_points__WEBPACK_IMPORTED_MODULE_1__[\"buildConvexHull\"])({}, Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_3__[\"toPoints\"])({}, paths));\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildRingSphere.js?");

/***/ }),

/***/ "../../algorithm/shape/buildUniformCubicBezierCurve.js":
/*!********************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildUniformCubicBezierCurve.js ***!
  \********************************************************************************************/
/*! exports provided: buildUniformCubicBezierCurve */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildUniformCubicBezierCurve\", function() { return buildUniformCubicBezierCurve; });\n/* harmony import */ var bezier__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bezier */ \"../../node_modules/bezier/index.js\");\n/* harmony import */ var bezier__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bezier__WEBPACK_IMPORTED_MODULE_0__);\n\r\n\r\nconst interpolateCubicBezier = bezier__WEBPACK_IMPORTED_MODULE_0___default.a.prepare(4);\r\n\r\n// Approximate a cubic bezier by dividing the curve into a uniform number of segments.\r\n\r\nconst buildUniformCubicBezierCurve = ({ segments = 8 }, points) => {\r\n  const xPoints = points.map(point => point[0]);\r\n  const yPoints = points.map(point => point[1]);\r\n  const path = [];\r\n  for (let t = 0; t <= 1; t += 1 / segments) {\r\n    path.push([interpolateCubicBezier(xPoints, t),\r\n               interpolateCubicBezier(yPoints, t)]);\r\n  }\r\n  return path;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/buildUniformCubicBezierCurve.js?");

/***/ }),

/***/ "../../algorithm/shape/extrudeLinear.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/extrudeLinear.js ***!
  \*****************************************************************************/
/*! exports provided: extrudeLinear */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"extrudeLinear\", function() { return extrudeLinear; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-polygons */ \"../../algorithm/polygons/main.js\");\n\r\n\r\n\r\nconst extrudeLinear = ({ height = 1 }, polygons) => {\r\n  const extruded = [];\r\n  const up = [0, 0, height];\r\n\r\n  // Build the walls.\r\n  for (const polygon of polygons) {\r\n    // Build floor outline. This need not be a convex polygon.\r\n    const floor = polygon.map(point => [point[0], point[1], height / -2]).reverse();\r\n    // Walk around the floor to build the walls.\r\n    for (let i = 0; i < floor.length; i++) {\r\n      const start = floor[i];\r\n      const end = floor[(i + 1) % floor.length];\r\n      // Remember that we are walking CCW.\r\n      extruded.push([start, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(start, up), end]);\r\n      extruded.push([end, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(start, up), Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(end, up)]);\r\n    }\r\n  }\r\n\r\n  // Build the roof and floor from convex polygons.\r\n  for (const polygon of Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_1__[\"makeConvex\"])({}, polygons)) {\r\n    const floor = polygon.map(point => [point[0], point[1], height / -2]).reverse();\r\n    const roof = floor.map(vertex => Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(vertex, up)).reverse();\r\n    extruded.push(roof, floor);\r\n  }\r\n\r\n  return extruded;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/extrudeLinear.js?");

/***/ }),

/***/ "../../algorithm/shape/main.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/main.js ***!
  \********************************************************************/
/*! exports provided: buildAdaptiveCubicBezierCurve, buildGeodesicSphere, buildRegularIcosahedron, buildRegularPolygon, buildRegularPrism, buildRegularTetrahedron, buildRingSphere, buildUniformCubicBezierCurve, extrudeLinear, regularPolygonEdgeLengthToRadius, subdivideTriangle, subdivideTriangularMesh */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _buildAdaptiveCubicBezierCurve__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buildAdaptiveCubicBezierCurve */ \"../../algorithm/shape/buildAdaptiveCubicBezierCurve.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildAdaptiveCubicBezierCurve\", function() { return _buildAdaptiveCubicBezierCurve__WEBPACK_IMPORTED_MODULE_0__[\"buildAdaptiveCubicBezierCurve\"]; });\n\n/* harmony import */ var _buildGeodesicSphere__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./buildGeodesicSphere */ \"../../algorithm/shape/buildGeodesicSphere.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildGeodesicSphere\", function() { return _buildGeodesicSphere__WEBPACK_IMPORTED_MODULE_1__[\"buildGeodesicSphere\"]; });\n\n/* harmony import */ var _buildRegularIcosahedron__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./buildRegularIcosahedron */ \"../../algorithm/shape/buildRegularIcosahedron.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildRegularIcosahedron\", function() { return _buildRegularIcosahedron__WEBPACK_IMPORTED_MODULE_2__[\"buildRegularIcosahedron\"]; });\n\n/* harmony import */ var _buildRegularPolygon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./buildRegularPolygon */ \"../../algorithm/shape/buildRegularPolygon.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildRegularPolygon\", function() { return _buildRegularPolygon__WEBPACK_IMPORTED_MODULE_3__[\"buildRegularPolygon\"]; });\n\n/* harmony import */ var _buildRegularPrism__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./buildRegularPrism */ \"../../algorithm/shape/buildRegularPrism.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildRegularPrism\", function() { return _buildRegularPrism__WEBPACK_IMPORTED_MODULE_4__[\"buildRegularPrism\"]; });\n\n/* harmony import */ var _buildRegularTetrahedron__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./buildRegularTetrahedron */ \"../../algorithm/shape/buildRegularTetrahedron.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildRegularTetrahedron\", function() { return _buildRegularTetrahedron__WEBPACK_IMPORTED_MODULE_5__[\"buildRegularTetrahedron\"]; });\n\n/* harmony import */ var _buildRingSphere__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./buildRingSphere */ \"../../algorithm/shape/buildRingSphere.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildRingSphere\", function() { return _buildRingSphere__WEBPACK_IMPORTED_MODULE_6__[\"buildRingSphere\"]; });\n\n/* harmony import */ var _buildUniformCubicBezierCurve__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./buildUniformCubicBezierCurve */ \"../../algorithm/shape/buildUniformCubicBezierCurve.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"buildUniformCubicBezierCurve\", function() { return _buildUniformCubicBezierCurve__WEBPACK_IMPORTED_MODULE_7__[\"buildUniformCubicBezierCurve\"]; });\n\n/* harmony import */ var _extrudeLinear__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./extrudeLinear */ \"../../algorithm/shape/extrudeLinear.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"extrudeLinear\", function() { return _extrudeLinear__WEBPACK_IMPORTED_MODULE_8__[\"extrudeLinear\"]; });\n\n/* harmony import */ var _regularPolygonEdgeLengthToRadius__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./regularPolygonEdgeLengthToRadius */ \"../../algorithm/shape/regularPolygonEdgeLengthToRadius.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"regularPolygonEdgeLengthToRadius\", function() { return _regularPolygonEdgeLengthToRadius__WEBPACK_IMPORTED_MODULE_9__[\"regularPolygonEdgeLengthToRadius\"]; });\n\n/* harmony import */ var _subdivideTriangle__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./subdivideTriangle */ \"../../algorithm/shape/subdivideTriangle.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"subdivideTriangle\", function() { return _subdivideTriangle__WEBPACK_IMPORTED_MODULE_10__[\"subdivideTriangle\"]; });\n\n/* harmony import */ var _subdivideTriangularMesh__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./subdivideTriangularMesh */ \"../../algorithm/shape/subdivideTriangularMesh.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"subdivideTriangularMesh\", function() { return _subdivideTriangularMesh__WEBPACK_IMPORTED_MODULE_11__[\"subdivideTriangularMesh\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/main.js?");

/***/ }),

/***/ "../../algorithm/shape/regularPolygonEdgeLengthToRadius.js":
/*!************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/regularPolygonEdgeLengthToRadius.js ***!
  \************************************************************************************************/
/*! exports provided: regularPolygonEdgeLengthToRadius */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"regularPolygonEdgeLengthToRadius\", function() { return regularPolygonEdgeLengthToRadius; });\nconst sin = (a) => Math.sin(a / 360 * Math.PI * 2);\r\n\r\nconst regularPolygonEdgeLengthToRadius = (length, edges) => length / (2 * sin(180 / edges));\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/regularPolygonEdgeLengthToRadius.js?");

/***/ }),

/***/ "../../algorithm/shape/subdivideTriangle.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/subdivideTriangle.js ***!
  \*********************************************************************************/
/*! exports provided: subdivideTriangle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subdivideTriangle\", function() { return subdivideTriangle; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n//      0\r\n//     /\\\r\n//  10/__\\20\r\n//   /\\  /\\\r\n// 1/__\\/__\\2\r\n//     21\r\nconst subdivideTriangle = (triangle) => {\r\n  const t0 = triangle[0];\r\n  const t1 = triangle[1];\r\n  const t2 = triangle[2];\r\n  const t10 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"scale\"])(1 / 2, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(t1, t0));\r\n  const t20 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"scale\"])(1 / 2, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(t2, t0));\r\n  const t21 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"scale\"])(1 / 2, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(t2, t1));\r\n  // Turning CCW.\r\n  return [[t0, t10, t20],\r\n          [t10, t1, t21],\r\n          [t20, t21, t2],\r\n          [t10, t21, t20]];\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/subdivideTriangle.js?");

/***/ }),

/***/ "../../algorithm/shape/subdivideTriangularMesh.js":
/*!***************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/subdivideTriangularMesh.js ***!
  \***************************************************************************************/
/*! exports provided: subdivideTriangularMesh */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subdivideTriangularMesh\", function() { return subdivideTriangularMesh; });\n/* harmony import */ var _subdivideTriangle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subdivideTriangle */ \"../../algorithm/shape/subdivideTriangle.js\");\n\r\n\r\nconst subdivideTriangularMesh = (mesh) => {\r\n  const subdividedMesh = [];\r\n  for (const triangle of mesh) {\r\n    for (const subTriangle of Object(_subdivideTriangle__WEBPACK_IMPORTED_MODULE_0__[\"subdivideTriangle\"])(triangle)) {\r\n      subdividedMesh.push(subTriangle);\r\n    }\r\n  }\r\n  return subdividedMesh;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/shape/subdivideTriangularMesh.js?");

/***/ }),

/***/ "../../algorithm/solid/canonicalize.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/canonicalize.js ***!
  \****************************************************************************/
/*! exports provided: canonicalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return canonicalize; });\n/* harmony import */ var _jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-surface */ \"../../algorithm/surface/main.js\");\n\r\n\r\nconst canonicalize = (solid) => solid.map(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"]);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/canonicalize.js?");

/***/ }),

/***/ "../../algorithm/solid/eachPoint.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/eachPoint.js ***!
  \*************************************************************************/
/*! exports provided: eachPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eachPoint\", function() { return eachPoint; });\n/* harmony import */ var _jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-surface */ \"../../algorithm/surface/main.js\");\n\r\n\r\nconst eachPoint = (options = {}, thunk, solid) => {\r\n  for (const surface of solid) {\r\n    Object(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_0__[\"eachPoint\"])(options, thunk, surface);\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/eachPoint.js?");

/***/ }),

/***/ "../../algorithm/solid/flip.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/flip.js ***!
  \********************************************************************/
/*! exports provided: flip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return flip; });\n/* harmony import */ var _jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-surface */ \"../../algorithm/surface/main.js\");\n\r\n\r\nconst flip = (solid) => solid.map(surface => Object(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_0__[\"flip\"])(surface));\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/flip.js?");

/***/ }),

/***/ "../../algorithm/solid/fromPolygons.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/fromPolygons.js ***!
  \****************************************************************************/
/*! exports provided: fromPolygons */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPolygons\", function() { return fromPolygons; });\n/* harmony import */ var _jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-surface */ \"../../algorithm/surface/main.js\");\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n\r\n\r\n\r\nconst fromPolygons = (options = {}, polygons) => {\r\n  const coplanarGroups = new Map();\r\n\r\n  for (const polygon of polygons) {\r\n    const plane = Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__[\"toPlane\"])(polygon);\r\n    const key = JSON.stringify(plane);\r\n    const groups = coplanarGroups.get(key);\r\n    if (groups === undefined) {\r\n      coplanarGroups.set(key, [polygon]);\r\n    } else {\r\n      groups.push(polygon);\r\n    }\r\n  }\r\n\r\n  // The solid is a list of surfaces, which are lists of coplanar polygons.\r\n  const solid = [...coplanarGroups.values()];\r\n\r\n  for (const surface of solid) {\r\n    Object(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_0__[\"assertCoplanar\"])(surface);\r\n  }\r\n\r\n  return solid;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/fromPolygons.js?");

/***/ }),

/***/ "../../algorithm/solid/main.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/main.js ***!
  \********************************************************************/
/*! exports provided: canonicalize, eachPoint, flip, fromPolygons, makeSurfacesConvex, makeSurfacesSimple, measureBoundingBox, measureBoundingSphere, scale, toGeneric, toPoints, toPolygons, transform, translate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ops */ \"../../algorithm/solid/ops.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__[\"scale\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__[\"transform\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"translate\", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__[\"translate\"]; });\n\n/* harmony import */ var _canonicalize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./canonicalize */ \"../../algorithm/solid/canonicalize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return _canonicalize__WEBPACK_IMPORTED_MODULE_1__[\"canonicalize\"]; });\n\n/* harmony import */ var _eachPoint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./eachPoint */ \"../../algorithm/solid/eachPoint.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"eachPoint\", function() { return _eachPoint__WEBPACK_IMPORTED_MODULE_2__[\"eachPoint\"]; });\n\n/* harmony import */ var _flip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./flip */ \"../../algorithm/solid/flip.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return _flip__WEBPACK_IMPORTED_MODULE_3__[\"flip\"]; });\n\n/* harmony import */ var _fromPolygons__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fromPolygons */ \"../../algorithm/solid/fromPolygons.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromPolygons\", function() { return _fromPolygons__WEBPACK_IMPORTED_MODULE_4__[\"fromPolygons\"]; });\n\n/* harmony import */ var _makeSurfacesConvex__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./makeSurfacesConvex */ \"../../algorithm/solid/makeSurfacesConvex.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"makeSurfacesConvex\", function() { return _makeSurfacesConvex__WEBPACK_IMPORTED_MODULE_5__[\"makeSurfacesConvex\"]; });\n\n/* harmony import */ var _makeSurfacesSimple__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./makeSurfacesSimple */ \"../../algorithm/solid/makeSurfacesSimple.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"makeSurfacesSimple\", function() { return _makeSurfacesSimple__WEBPACK_IMPORTED_MODULE_6__[\"makeSurfacesSimple\"]; });\n\n/* harmony import */ var _measureBoundingBox__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./measureBoundingBox */ \"../../algorithm/solid/measureBoundingBox.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingBox\", function() { return _measureBoundingBox__WEBPACK_IMPORTED_MODULE_7__[\"measureBoundingBox\"]; });\n\n/* harmony import */ var _measureBoundingSphere__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./measureBoundingSphere */ \"../../algorithm/solid/measureBoundingSphere.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingSphere\", function() { return _measureBoundingSphere__WEBPACK_IMPORTED_MODULE_8__[\"measureBoundingSphere\"]; });\n\n/* harmony import */ var _toGeneric__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./toGeneric */ \"../../algorithm/solid/toGeneric.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toGeneric\", function() { return _toGeneric__WEBPACK_IMPORTED_MODULE_9__[\"toGeneric\"]; });\n\n/* harmony import */ var _toPoints__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./toPoints */ \"../../algorithm/solid/toPoints.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toPoints\", function() { return _toPoints__WEBPACK_IMPORTED_MODULE_10__[\"toPoints\"]; });\n\n/* harmony import */ var _toPolygons__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./toPolygons */ \"../../algorithm/solid/toPolygons.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toPolygons\", function() { return _toPolygons__WEBPACK_IMPORTED_MODULE_11__[\"toPolygons\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/main.js?");

/***/ }),

/***/ "../../algorithm/solid/makeSurfacesConvex.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/makeSurfacesConvex.js ***!
  \**********************************************************************************/
/*! exports provided: makeSurfacesConvex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makeSurfacesConvex\", function() { return makeSurfacesConvex; });\n/* harmony import */ var _jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-surface */ \"../../algorithm/surface/main.js\");\n\r\n\r\nconst makeSurfacesConvex = (options = {}, solid) => solid.map(surface => Object(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_0__[\"makeConvex\"])(options, surface));\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/makeSurfacesConvex.js?");

/***/ }),

/***/ "../../algorithm/solid/makeSurfacesSimple.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/makeSurfacesSimple.js ***!
  \**********************************************************************************/
/*! exports provided: makeSurfacesSimple */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makeSurfacesSimple\", function() { return makeSurfacesSimple; });\n/* harmony import */ var _jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-surface */ \"../../algorithm/surface/main.js\");\n\r\n\r\nconst makeSurfacesSimple = (options = {}, solid) => solid.map(surface => Object(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_0__[\"makeSimple\"])({}, surface));\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/makeSurfacesSimple.js?");

/***/ }),

/***/ "../../algorithm/solid/measureBoundingBox.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/measureBoundingBox.js ***!
  \**********************************************************************************/
/*! exports provided: measureBoundingBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingBox\", function() { return measureBoundingBox; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _eachPoint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./eachPoint */ \"../../algorithm/solid/eachPoint.js\");\n\r\n\r\n\r\n\r\n// returns an array of two Vector3Ds (minimum coordinates and maximum coordinates)\r\nconst measureBoundingBox = (solid) => {\r\n  let max = solid[0][0][0];\r\n  let min = solid[0][0][0];\r\n  Object(_eachPoint__WEBPACK_IMPORTED_MODULE_1__[\"eachPoint\"])({},\r\n            point => {\r\n              max = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"max\"])(max, point);\r\n              min = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"min\"])(min, point);\r\n            },\r\n            solid);\r\n  return [min, max];\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/measureBoundingBox.js?");

/***/ }),

/***/ "../../algorithm/solid/measureBoundingSphere.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/measureBoundingSphere.js ***!
  \*************************************************************************************/
/*! exports provided: measureBoundingSphere */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingSphere\", function() { return measureBoundingSphere; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _measureBoundingBox__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./measureBoundingBox */ \"../../algorithm/solid/measureBoundingBox.js\");\n\r\n\r\n\r\n\r\n/** Measure the bounding sphere of the given poly3\r\n * @param {poly3} the poly3 to measure\r\n * @returns computed bounding sphere; center (vec3) and radius\r\n */\r\nconst measureBoundingSphere = (solid) => {\r\n  if (solid.boundingSphere === undefined) {\r\n    const [min, max] = Object(_measureBoundingBox__WEBPACK_IMPORTED_MODULE_1__[\"measureBoundingBox\"])(solid);\r\n    const center = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"scale\"])(0.5, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(min, max));\r\n    const radius = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"distance\"])(center, max);\r\n    solid.boundingSphere = [center, radius];\r\n  }\r\n  return solid.boundingSphere;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/measureBoundingSphere.js?");

/***/ }),

/***/ "../../algorithm/solid/ops.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/ops.js ***!
  \*******************************************************************/
/*! exports provided: transform, translate, scale */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return transform; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"translate\", function() { return translate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n/* harmony import */ var _jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-surface */ \"../../algorithm/surface/main.js\");\n\r\n\r\n\r\n\r\nconst transform = (matrix, solid) => solid.map(surface => Object(_jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_1__[\"transform\"])(matrix, surface));\r\nconst translate = (vector, solid) => transform(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromTranslation\"])(vector), solid);\r\nconst scale = (vector, solid) => transform(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromScaling\"])(vector), solid);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/ops.js?");

/***/ }),

/***/ "../../algorithm/solid/toGeneric.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/toGeneric.js ***!
  \*************************************************************************/
/*! exports provided: toGeneric */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toGeneric\", function() { return toGeneric; });\nconst toGeneric = (solid) => solid.map(surface => surface.map(polygon => polygon.map(point => [...point])));\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/toGeneric.js?");

/***/ }),

/***/ "../../algorithm/solid/toPoints.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/toPoints.js ***!
  \************************************************************************/
/*! exports provided: toPoints */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toPoints\", function() { return toPoints; });\n/* harmony import */ var _eachPoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eachPoint */ \"../../algorithm/solid/eachPoint.js\");\n\r\n\r\nconst toPoints = (options = {}, solid) => {\r\n  const points = [];\r\n  Object(_eachPoint__WEBPACK_IMPORTED_MODULE_0__[\"eachPoint\"])({}, point => points.push(point), solid);\r\n  return points;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/toPoints.js?");

/***/ }),

/***/ "../../algorithm/solid/toPolygons.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/toPolygons.js ***!
  \**************************************************************************/
/*! exports provided: toPolygons */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toPolygons\", function() { return toPolygons; });\n// Relax the coplanar arrangement into polygon soup.\r\nconst toPolygons = (options = {}, solid) => [].concat(...solid);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/solid/toPolygons.js?");

/***/ }),

/***/ "../../algorithm/surface/assertCoplanar.js":
/*!********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/surface/assertCoplanar.js ***!
  \********************************************************************************/
/*! exports provided: assertCoplanar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assertCoplanar\", function() { return assertCoplanar; });\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n\r\n\r\nconst assertCoplanarPolygon = (polygon) => {\r\n  if (!Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__[\"isCoplanar\"])(polygon)) {\r\n    throw Error(`die`);\r\n  }\r\n};\r\n\r\nconst assertCoplanar = (surface) => {\r\n  for (const polygon of surface) {\r\n    assertCoplanarPolygon(polygon);\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/surface/assertCoplanar.js?");

/***/ }),

/***/ "../../algorithm/surface/eachPoint.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/surface/eachPoint.js ***!
  \***************************************************************************/
/*! exports provided: eachPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eachPoint\", function() { return eachPoint; });\nconst eachPoint = (options = {}, thunk, surface) => {\r\n  for (const polygon of surface) {\r\n    for (const point of polygon) {\r\n      thunk(point);\r\n    }\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/surface/eachPoint.js?");

/***/ }),

/***/ "../../algorithm/surface/flip.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/surface/flip.js ***!
  \**********************************************************************/
/*! exports provided: flip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return flip; });\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./map */ \"../../algorithm/surface/map.js\");\n\r\n\r\n\r\nconst flip = (surface) => Object(_map__WEBPACK_IMPORTED_MODULE_1__[\"map\"])(surface, _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__[\"flip\"]);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/surface/flip.js?");

/***/ }),

/***/ "../../algorithm/surface/main.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/surface/main.js ***!
  \**********************************************************************/
/*! exports provided: assertCoplanar, canonicalize, eachPoint, flip, makeConvex, makeSimple, measureArea, rotateZ, toGeneric, toPlane, transform, scale */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ops__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ops */ \"../../algorithm/surface/ops.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rotateZ\", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__[\"rotateZ\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toPlane\", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__[\"toPlane\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__[\"transform\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return _ops__WEBPACK_IMPORTED_MODULE_0__[\"scale\"]; });\n\n/* harmony import */ var _assertCoplanar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assertCoplanar */ \"../../algorithm/surface/assertCoplanar.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"assertCoplanar\", function() { return _assertCoplanar__WEBPACK_IMPORTED_MODULE_1__[\"assertCoplanar\"]; });\n\n/* harmony import */ var _eachPoint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./eachPoint */ \"../../algorithm/surface/eachPoint.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"eachPoint\", function() { return _eachPoint__WEBPACK_IMPORTED_MODULE_2__[\"eachPoint\"]; });\n\n/* harmony import */ var _flip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./flip */ \"../../algorithm/surface/flip.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return _flip__WEBPACK_IMPORTED_MODULE_3__[\"flip\"]; });\n\n/* harmony import */ var _makeConvex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./makeConvex */ \"../../algorithm/surface/makeConvex.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"makeConvex\", function() { return _makeConvex__WEBPACK_IMPORTED_MODULE_4__[\"makeConvex\"]; });\n\n/* harmony import */ var _makeSimple__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./makeSimple */ \"../../algorithm/surface/makeSimple.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"makeSimple\", function() { return _makeSimple__WEBPACK_IMPORTED_MODULE_5__[\"makeSimple\"]; });\n\n/* harmony import */ var _measureArea__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./measureArea */ \"../../algorithm/surface/measureArea.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"measureArea\", function() { return _measureArea__WEBPACK_IMPORTED_MODULE_6__[\"measureArea\"]; });\n\n/* harmony import */ var _toGeneric__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./toGeneric */ \"../../algorithm/surface/toGeneric.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toGeneric\", function() { return _toGeneric__WEBPACK_IMPORTED_MODULE_7__[\"toGeneric\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/surface/main.js?");

/***/ }),

/***/ "../../algorithm/surface/makeConvex.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/surface/makeConvex.js ***!
  \****************************************************************************/
/*! exports provided: makeConvex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makeConvex\", function() { return makeConvex; });\n/* harmony import */ var _jsxcad_algorithm_z0surface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-z0surface */ \"../../algorithm/z0surface/main.js\");\n/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./main */ \"../../algorithm/surface/main.js\");\n/* harmony import */ var _assertCoplanar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./assertCoplanar */ \"../../algorithm/surface/assertCoplanar.js\");\n/* harmony import */ var _jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jsxcad/math-plane */ \"../../math/plane/main.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nconst makeConvex = (options = {}, surface) => {\r\n  Object(_assertCoplanar__WEBPACK_IMPORTED_MODULE_2__[\"assertCoplanar\"])(surface);\r\n  const [to, from] = Object(_jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_3__[\"toXYPlaneTransforms\"])(Object(_main__WEBPACK_IMPORTED_MODULE_1__[\"toPlane\"])(surface));\r\n  let retessellatedSurface = Object(_jsxcad_algorithm_z0surface__WEBPACK_IMPORTED_MODULE_0__[\"makeConvex\"])({}, Object(_jsxcad_algorithm_z0surface__WEBPACK_IMPORTED_MODULE_0__[\"union\"])(...Object(_main__WEBPACK_IMPORTED_MODULE_1__[\"transform\"])(to, surface).map(polygon => [polygon])));\r\n  return Object(_main__WEBPACK_IMPORTED_MODULE_1__[\"transform\"])(from, retessellatedSurface);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/surface/makeConvex.js?");

/***/ }),

/***/ "../../algorithm/surface/makeSimple.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/surface/makeSimple.js ***!
  \****************************************************************************/
/*! exports provided: makeSimple */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makeSimple\", function() { return makeSimple; });\n/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./main */ \"../../algorithm/surface/main.js\");\n/* harmony import */ var _jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-plane */ \"../../math/plane/main.js\");\n/* harmony import */ var _jsxcad_algorithm_z0surface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-z0surface */ \"../../algorithm/z0surface/main.js\");\n\r\n\r\n\r\n\r\nconst makeSimple = (options = {}, surface) => {\r\n  const [to, from] = Object(_jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_1__[\"toXYPlaneTransforms\"])(Object(_main__WEBPACK_IMPORTED_MODULE_0__[\"toPlane\"])(surface));\r\n  let simpleSurface = Object(_jsxcad_algorithm_z0surface__WEBPACK_IMPORTED_MODULE_2__[\"union\"])(...Object(_main__WEBPACK_IMPORTED_MODULE_0__[\"transform\"])(to, surface).map(polygon => [polygon]));\r\n  return Object(_main__WEBPACK_IMPORTED_MODULE_0__[\"transform\"])(from, simpleSurface);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/surface/makeSimple.js?");

/***/ }),

/***/ "../../algorithm/surface/map.js":
/*!*********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/surface/map.js ***!
  \*********************************************************************/
/*! exports provided: map */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"map\", function() { return map; });\n/**\r\n * Transforms each polygon of the surface.\r\n *\r\n * @param {Polygons} original - the Polygons to transform.\r\n * @param {Function} [transform=identity] - function used to transform the polygons.\r\n * @returns {Polygons} a copy with transformed polygons.\r\n */\r\nconst map = (original, transform) => {\r\n  if (original === undefined) {\r\n    original = [];\r\n  }\r\n  if (transform === undefined) {\r\n    transform = _ => _;\r\n  }\r\n  return original.map(polygon => transform(polygon));\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/surface/map.js?");

/***/ }),

/***/ "../../algorithm/surface/measureArea.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/surface/measureArea.js ***!
  \*****************************************************************************/
/*! exports provided: measureArea */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"measureArea\", function() { return measureArea; });\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n\r\n\r\nconst measureArea = (surface) => {\r\n  // CHECK: That this handles negative area properly.\r\n  let total = 0;\r\n  for (const polygon of surface) {\r\n    total += Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__[\"measureArea\"])(polygon);\r\n  }\r\n  return total;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/surface/measureArea.js?");

/***/ }),

/***/ "../../algorithm/surface/ops.js":
/*!*********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/surface/ops.js ***!
  \*********************************************************************/
/*! exports provided: toPlane, canonicalize, transform, rotateZ, scale */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toPlane\", function() { return toPlane; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return canonicalize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return transform; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateZ\", function() { return rotateZ; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n\r\n\r\n\r\nconst toPlane = (surface) => Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__[\"toPlane\"])(surface[0]);\r\nconst canonicalize = (surface) => surface.map(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"]);\r\n\r\n// Transforms\r\nconst transform = (matrix, surface) => surface.map(polygon => Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__[\"transform\"])(matrix, polygon));\r\nconst rotateZ = (angle, surface) => transform(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__[\"fromZRotation\"])(angle), surface);\r\nconst scale = (vector, surface) => transform(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__[\"fromScaling\"])(vector), surface);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/surface/ops.js?");

/***/ }),

/***/ "../../algorithm/surface/toGeneric.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/surface/toGeneric.js ***!
  \***************************************************************************/
/*! exports provided: toGeneric */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toGeneric\", function() { return toGeneric; });\nconst toGeneric = (surface) => surface.map(path => path.map(point => [...point]));\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/surface/toGeneric.js?");

/***/ }),

/***/ "../../algorithm/text/main.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/text/main.js ***!
  \*******************************************************************/
/*! exports provided: pathnameToFont, textToSurfaces */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pathnameToFont\", function() { return pathnameToFont; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"textToSurfaces\", function() { return textToSurfaces; });\n/* harmony import */ var _jsxcad_convert_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/convert-svg */ \"../../convert/svg/main.js\");\n/* harmony import */ var opentype_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! opentype.js */ \"../../node_modules/opentype.js/src/opentype.js\");\n/* harmony import */ var _jsxcad_algorithm_z0surface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-z0surface */ \"../../algorithm/z0surface/main.js\");\n\r\n\r\n\r\n\r\nconst pathnameToFont = (pathname) => Object(opentype_js__WEBPACK_IMPORTED_MODULE_1__[\"loadSync\"])(pathname);\r\n\r\nconst textToSurfaces = ({ curveSegments, font, size, kerning = true, features = undefined, hinting = false },\r\n                               text) => {\r\n  const options = { kerning: kerning, features: features, hinting: hinting };\r\n  const svgPaths = [];\r\n  font.forEachGlyph(text, 0, 0, size, options,\r\n                    (glyph, x, y, fontSize) => {\r\n                      svgPaths.push(glyph.getPath(x, y, fontSize, options, undefined).toPathData());\r\n                    });\r\n  const pathsets = [];\r\n  for (let { paths } of svgPaths.map(svgPath => Object(_jsxcad_convert_svg__WEBPACK_IMPORTED_MODULE_0__[\"fromSvgPath\"])({ curveSegments: curveSegments }, svgPath))) {\r\n    pathsets.push(paths);\r\n  }\r\n  return { z0Surface: Object(_jsxcad_algorithm_z0surface__WEBPACK_IMPORTED_MODULE_2__[\"union\"])(...pathsets) };\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/text/main.js?");

/***/ }),

/***/ "../../algorithm/watertight/ensureMapElement.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/ensureMapElement.js ***!
  \*************************************************************************************/
/*! exports provided: ensureMapElement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ensureMapElement\", function() { return ensureMapElement; });\nconst ensureMapElement = (map, key, ensurer = (_ => [])) => {\r\n  if (!map.has(key)) {\r\n    map.set(key, ensurer());\r\n  }\r\n  return map.get(key);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/ensureMapElement.js?");

/***/ }),

/***/ "../../algorithm/watertight/findPolygonsViolations.js":
/*!*******************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/findPolygonsViolations.js ***!
  \*******************************************************************************************/
/*! exports provided: findPolygonsViolations */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findPolygonsViolations\", function() { return findPolygonsViolations; });\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n/* harmony import */ var _ensureMapElement__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ensureMapElement */ \"../../algorithm/watertight/ensureMapElement.js\");\n/* harmony import */ var _findVertexViolations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./findVertexViolations */ \"../../algorithm/watertight/findVertexViolations.js\");\n\r\n\r\n\r\n\r\nconst toIdentity = JSON.stringify;\r\n\r\nconst findPolygonsViolations = polygons => {\r\n  // A map from vertex value to connected edges represented as an array in\r\n  // the form [start, ...end].\r\n  const edges = new Map();\r\n  const addEdge = (start, end) => Object(_ensureMapElement__WEBPACK_IMPORTED_MODULE_1__[\"ensureMapElement\"])(edges, toIdentity(start), () => [start]).push(end);\r\n  const addEdges = (start, end) => { addEdge(start, end); addEdge(end, start); };\r\n  polygons.forEach(polygon => Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_0__[\"eachEdge\"])({}, addEdges, polygon));\r\n\r\n  // Edges are assembled, check for matches\r\n  let violations = [];\r\n  edges.forEach(vertex => {\r\n    violations = [].concat(violations, Object(_findVertexViolations__WEBPACK_IMPORTED_MODULE_2__[\"findVertexViolations\"])(...vertex));\r\n  });\r\n\r\n  return violations;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/findPolygonsViolations.js?");

/***/ }),

/***/ "../../algorithm/watertight/findVertexViolations.js":
/*!*****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/findVertexViolations.js ***!
  \*****************************************************************************************/
/*! exports provided: findVertexViolations */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findVertexViolations\", function() { return findVertexViolations; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _ensureMapElement__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ensureMapElement */ \"../../algorithm/watertight/ensureMapElement.js\");\n/* harmony import */ var _jsxcad_math_ray3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/math-ray3 */ \"../../math/ray3/main.js\");\n\r\n\r\n\r\n\r\n\r\nconst toIdentity = JSON.stringify;\r\n\r\n/**\r\n * findVertexViolations determines that the vertex's edges are closed.\r\n *\r\n * For a watertight vertex, it will consist of unique lines with an even count.\r\n *\r\n * @params {start} start - the vertex.\r\n * @params {Array<point>} ends - the sorted other end of each edge.\r\n * @returns {Array} violations.\r\n *\r\n * Note that checking for pairs of edges isn't sufficient.\r\n *\r\n *    A-----B\r\n *    |     |\r\n *    |     E--F\r\n *    |     |  |\r\n *    C-----D--G\r\n *\r\n * A situation with B~D, D~B, E~D, D~E would lead such an algorithm to believe\r\n * the vertex was watertight when it is only partially watertight.\r\n *\r\n * So, we need to detect any distinct colinear edges.\r\n */\r\nconst findVertexViolations = (start, ...ends) => {\r\n  const lines = new Map();\r\n  ends.forEach(end => {\r\n    // These are not actually lines, but they all start at the same position, so we can pretend.\r\n    const ray = Object(_jsxcad_math_ray3__WEBPACK_IMPORTED_MODULE_2__[\"fromPoints\"])(start, end);\r\n    Object(_ensureMapElement__WEBPACK_IMPORTED_MODULE_1__[\"ensureMapElement\"])(lines, toIdentity(ray)).push(end);\r\n  });\r\n\r\n  const distance = (end) => Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"length\"])(Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(end, start));\r\n\r\n  let violations = [];\r\n  lines.forEach(ends => {\r\n    ends.sort((a, b) => distance(a) - distance(b));\r\n    for (let nth = 1; nth < ends.length; nth++) {\r\n      if (!Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"equals\"])(ends[nth], ends[nth - 1])) {\r\n        violations.push(['unequal', [start, ...ends]]);\r\n        violations.push(['unequal', [start, ...ends].reverse()]);\r\n        break;\r\n      }\r\n    }\r\n    if (ends.length % 2 !== 0) {\r\n      // Lines aren't paired\r\n      // notWatertight = true\r\n      // violations.push(['unpaired', [start, ...ends]])\r\n      // return\r\n      // break\r\n    }\r\n  });\r\n\r\n  // If no violations, it is Watertight.\r\n  return violations;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/findVertexViolations.js?");

/***/ }),

/***/ "../../algorithm/watertight/fixTJunctions.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/fixTJunctions.js ***!
  \**********************************************************************************/
/*! exports provided: fixTJunctions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fixTJunctions\", function() { return fixTJunctions; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n/* harmony import */ var _jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/math-plane */ \"../../math/plane/main.js\");\n\r\n\r\n\r\n\r\n\r\nconst EPS = 1e-5;\r\nconst W = 3;\r\n\r\nconst tag = vertex => JSON.stringify([...vertex]);\r\n\r\nfunction addSide (sidemap, vertextag2sidestart, vertextag2sideend, vertex0, vertex1, polygonindex) {\r\n  let starttag = tag(vertex0);\r\n  let endtag = tag(vertex1);\r\n  if (starttag === endtag) throw new Error('Assertion failed');\r\n  let newsidetag = starttag + '/' + endtag;\r\n  let reversesidetag = endtag + '/' + starttag;\r\n  if (reversesidetag in sidemap) {\r\n    // we have a matching reverse oriented side.\r\n    // Instead of adding the new side, cancel out the reverse side:\r\n    // console.log(\"addSide(\"+newsidetag+\") has reverse side:\");\r\n    deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, vertex1, vertex0, null);\r\n    return null;\r\n  }\r\n  //  console.log(\"addSide(\"+newsidetag+\")\");\r\n  let newsideobj = {\r\n    vertex0: vertex0,\r\n    vertex1: vertex1,\r\n    polygonindex: polygonindex\r\n  };\r\n  if (!(newsidetag in sidemap)) {\r\n    sidemap[newsidetag] = [newsideobj];\r\n  } else {\r\n    sidemap[newsidetag].push(newsideobj);\r\n  }\r\n  if (starttag in vertextag2sidestart) {\r\n    vertextag2sidestart[starttag].push(newsidetag);\r\n  } else {\r\n    vertextag2sidestart[starttag] = [newsidetag];\r\n  }\r\n  if (endtag in vertextag2sideend) {\r\n    vertextag2sideend[endtag].push(newsidetag);\r\n  } else {\r\n    vertextag2sideend[endtag] = [newsidetag];\r\n  }\r\n  return newsidetag;\r\n}\r\n\r\nfunction deleteSide (sidemap, vertextag2sidestart, vertextag2sideend, vertex0, vertex1, polygonindex) {\r\n  let starttag = tag(vertex0);\r\n  let endtag = tag(vertex1);\r\n  let sidetag = starttag + '/' + endtag;\r\n  // console.log(\"deleteSide(\"+sidetag+\")\");\r\n  if (!(sidetag in sidemap)) throw new Error('Assertion failed');\r\n  let idx = -1;\r\n  let sideobjs = sidemap[sidetag];\r\n  for (let i = 0; i < sideobjs.length; i++) {\r\n    let sideobj = sideobjs[i];\r\n    if (!Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"equals\"])(sideobj.vertex0, vertex0)) continue;\r\n    if (!Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"equals\"])(sideobj.vertex1, vertex1)) continue;\r\n    if (polygonindex !== null) {\r\n      if (sideobj.polygonindex !== polygonindex) continue;\r\n    }\r\n    idx = i;\r\n    break;\r\n  }\r\n  if (idx < 0) throw new Error('Assertion failed');\r\n  sideobjs.splice(idx, 1);\r\n  if (sideobjs.length === 0) {\r\n    delete sidemap[sidetag];\r\n  }\r\n  idx = vertextag2sidestart[starttag].indexOf(sidetag);\r\n  if (idx < 0) throw new Error('Assertion failed');\r\n  vertextag2sidestart[starttag].splice(idx, 1);\r\n  if (vertextag2sidestart[starttag].length === 0) {\r\n    delete vertextag2sidestart[starttag];\r\n  }\r\n\r\n  idx = vertextag2sideend[endtag].indexOf(sidetag);\r\n  if (idx < 0) throw new Error('Assertion failed');\r\n  vertextag2sideend[endtag].splice(idx, 1);\r\n  if (vertextag2sideend[endtag].length === 0) {\r\n    delete vertextag2sideend[endtag];\r\n  }\r\n}\r\n\r\n/*\r\n     fixTJunctions:\r\n\r\n     Suppose we have two polygons ACDB and EDGF:\r\n\r\n      A-----B\r\n      |     |\r\n      |     E--F\r\n      |     |  |\r\n      C-----D--G\r\n\r\n     Note that vertex E forms a T-junction on the side BD. In this case some STL slicers will complain\r\n     that the solid is not watertight. This is because the watertightness check is done by checking if\r\n     each side DE is matched by another side ED.\r\n\r\n     This function will return a new solid with ACDB replaced by ACDEB\r\n\r\n     Note that this can create polygons that are slightly non-convex (due to rounding errors). Therefore the result\r\n     should not be used for further Geom3 operations!\r\n*/\r\nconst fixTJunctions = function (polygons) {\r\n  let sidemap = {};\r\n\r\n  // STEP 1\r\n  for (let polygonindex = 0; polygonindex < polygons.length; polygonindex++) {\r\n    let polygon = polygons[polygonindex];\r\n    let numvertices = polygon.length;\r\n    // should be true\r\n    if (numvertices >= 3) {\r\n      let vertex = polygon[0];\r\n      let vertextag = tag(vertex);\r\n      for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {\r\n        let nextvertexindex = vertexindex + 1;\r\n        if (nextvertexindex === numvertices) nextvertexindex = 0;\r\n        let nextvertex = polygon[nextvertexindex];\r\n        let nextvertextag = tag(nextvertex);\r\n        let sidetag = vertextag + '/' + nextvertextag;\r\n        let reversesidetag = nextvertextag + '/' + vertextag;\r\n        if (reversesidetag in sidemap) {\r\n          // this side matches the same side in another polygon. Remove from sidemap:\r\n          let ar = sidemap[reversesidetag];\r\n          ar.splice(-1, 1);\r\n          if (ar.length === 0) {\r\n            delete sidemap[reversesidetag];\r\n          }\r\n        } else {\r\n          let sideobj = {\r\n            vertex0: vertex,\r\n            vertex1: nextvertex,\r\n            polygonindex: polygonindex\r\n          };\r\n          if (!(sidetag in sidemap)) {\r\n            sidemap[sidetag] = [sideobj];\r\n          } else {\r\n            sidemap[sidetag].push(sideobj);\r\n          }\r\n        }\r\n        vertex = nextvertex;\r\n        vertextag = nextvertextag;\r\n      }\r\n    }\r\n  }\r\n  // STEP 2\r\n  // now sidemap contains 'unmatched' sides\r\n  // i.e. side AB in one polygon does not have a matching side BA in another polygon\r\n  let vertextag2sidestart = {};\r\n  let vertextag2sideend = {};\r\n  let sidestocheck = {};\r\n  let sidemapisempty = true;\r\n  for (let sidetag in sidemap) {\r\n    sidemapisempty = false;\r\n    sidestocheck[sidetag] = true;\r\n    sidemap[sidetag].map(function (sideobj) {\r\n      let starttag = tag(sideobj.vertex0);\r\n      let endtag = tag(sideobj.vertex1);\r\n      if (starttag in vertextag2sidestart) {\r\n        vertextag2sidestart[starttag].push(sidetag);\r\n      } else {\r\n        vertextag2sidestart[starttag] = [sidetag];\r\n      }\r\n      if (endtag in vertextag2sideend) {\r\n        vertextag2sideend[endtag].push(sidetag);\r\n      } else {\r\n        vertextag2sideend[endtag] = [sidetag];\r\n      }\r\n    });\r\n  }\r\n\r\n  // STEP 3 : if sidemap is not empty\r\n  if (!sidemapisempty) {\r\n    // make a copy of the polygons array, since we are going to modify it:\r\n    polygons = polygons.slice(0);\r\n    while (true) {\r\n      let sidemapisempty = true;\r\n      for (let sidetag in sidemap) {\r\n        sidemapisempty = false;\r\n        sidestocheck[sidetag] = true;\r\n      }\r\n      if (sidemapisempty) break;\r\n      let donesomething = false;\r\n      while (true) {\r\n        let sidetagtocheck = null;\r\n        for (let sidetag in sidestocheck) {\r\n          sidetagtocheck = sidetag;\r\n          break; // FIXME  : say what now ?\r\n        }\r\n        if (sidetagtocheck === null) break; // sidestocheck is empty, we're done!\r\n        let donewithside = true;\r\n        if (sidetagtocheck in sidemap) {\r\n          let sideobjs = sidemap[sidetagtocheck];\r\n          if (sideobjs.length === 0) throw new Error('Assertion failed');\r\n          let sideobj = sideobjs[0];\r\n          for (let directionindex = 0; directionindex < 2; directionindex++) {\r\n            let startvertex = (directionindex === 0) ? sideobj.vertex0 : sideobj.vertex1;\r\n            let endvertex = (directionindex === 0) ? sideobj.vertex1 : sideobj.vertex0;\r\n            let startvertextag = tag(startvertex);\r\n            let endvertextag = tag(endvertex);\r\n            let matchingsides = [];\r\n            if (directionindex === 0) {\r\n              if (startvertextag in vertextag2sideend) {\r\n                matchingsides = vertextag2sideend[startvertextag];\r\n              }\r\n            } else {\r\n              if (startvertextag in vertextag2sidestart) {\r\n                matchingsides = vertextag2sidestart[startvertextag];\r\n              }\r\n            }\r\n            for (let matchingsideindex = 0; matchingsideindex < matchingsides.length; matchingsideindex++) {\r\n              let matchingsidetag = matchingsides[matchingsideindex];\r\n              let matchingside = sidemap[matchingsidetag][0];\r\n              let matchingsidestartvertex = (directionindex === 0) ? matchingside.vertex0 : matchingside.vertex1;\r\n              let matchingsideendvertex = (directionindex === 0) ? matchingside.vertex1 : matchingside.vertex0;\r\n              let matchingsidestartvertextag = tag(matchingsidestartvertex);\r\n              let matchingsideendvertextag = tag(matchingsideendvertex);\r\n              if (matchingsideendvertextag !== startvertextag) throw new Error('Assertion failed');\r\n              if (matchingsidestartvertextag === endvertextag) {\r\n                // matchingside cancels sidetagtocheck\r\n                deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, startvertex, endvertex, null);\r\n                deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, endvertex, startvertex, null);\r\n                donewithside = false;\r\n                directionindex = 2; // skip reverse direction check\r\n                donesomething = true;\r\n                break;\r\n              } else {\r\n                let startpos = startvertex;\r\n                let endpos = endvertex;\r\n                let checkpos = matchingsidestartvertex;\r\n                // let direction = checkpos.minus(startpos)\r\n                let direction = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(checkpos, startpos);\r\n                // Now we need to check if endpos is on the line startpos-checkpos:\r\n                // let t = endpos.minus(startpos).dot(direction) / direction.dot(direction)\r\n                let t = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(endpos, startpos), direction) / Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(direction, direction);\r\n                if ((t > 0) && (t < 1)) {\r\n                  let closestpoint = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(startpos, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"multiply\"])(direction, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"fromScalar\"])(t)));\r\n                  let distancesquared = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"squaredDistance\"])(closestpoint, endpos);\r\n                  if (distancesquared < (EPS * EPS)) {\r\n                    // Yes it's a t-junction! We need to split matchingside in two:\r\n                    let polygonindex = matchingside.polygonindex;\r\n                    let polygon = polygons[polygonindex];\r\n                    // find the index of startvertextag in polygon:\r\n                    let insertionvertextag = tag(matchingside.vertex1);\r\n                    let insertionvertextagindex = -1;\r\n                    for (let i = 0; i < polygon.length; i++) {\r\n                      if (tag(polygon[i]) === insertionvertextag) {\r\n                        insertionvertextagindex = i;\r\n                        break;\r\n                      }\r\n                    }\r\n                    if (insertionvertextagindex < 0) throw new Error('Assertion failed');\r\n                    // split the side by inserting the vertex:\r\n                    let newvertices = polygon.slice(0);\r\n                    newvertices.splice(insertionvertextagindex, 0, endvertex);\r\n                    let newpolygon = Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__[\"fromPoints\"])(newvertices);\r\n\r\n                    // calculate plane with differents point\r\n                    if (isNaN(Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__[\"toPlane\"])(newpolygon)[W])) {\r\n                      let found = false;\r\n                      let loop = function (callback) {\r\n                        newpolygon.forEach(function (item) {\r\n                          if (found) return;\r\n                          callback(item);\r\n                        });\r\n                      };\r\n\r\n                      loop(function (a) {\r\n                        loop(function (b) {\r\n                          loop(function (c) {\r\n                            newpolygon.plane = Object(_jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_2__[\"fromPoints\"])(a, b, c);\r\n                            if (!isNaN(Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__[\"toPlane\"])(newpolygon)[W])) {\r\n                              found = true;\r\n                            }\r\n                          });\r\n                        });\r\n                      });\r\n                    }\r\n                    polygons[polygonindex] = newpolygon;\r\n                    // remove the original sides from our maps\r\n                    // deleteSide(sideobj.vertex0, sideobj.vertex1, null)\r\n                    deleteSide(sidemap, vertextag2sidestart, vertextag2sideend,\r\n                               matchingside.vertex0, matchingside.vertex1, polygonindex);\r\n                    let newsidetag1 = addSide(sidemap, vertextag2sidestart, vertextag2sideend,\r\n                                              matchingside.vertex0, endvertex, polygonindex);\r\n                    let newsidetag2 = addSide(sidemap, vertextag2sidestart, vertextag2sideend, endvertex,\r\n                                              matchingside.vertex1, polygonindex);\r\n                    if (newsidetag1 !== null) sidestocheck[newsidetag1] = true;\r\n                    if (newsidetag2 !== null) sidestocheck[newsidetag2] = true;\r\n                    donewithside = false;\r\n                    directionindex = 2; // skip reverse direction check\r\n                    donesomething = true;\r\n                    break;\r\n                  } // if(distancesquared < 1e-10)\r\n                } // if( (t > 0) && (t < 1) )\r\n              } // if(endingstidestartvertextag === endvertextag)\r\n            } // for matchingsideindex\r\n          } // for directionindex\r\n        } // if(sidetagtocheck in sidemap)\r\n        if (donewithside) {\r\n          delete sidestocheck[sidetagtocheck];\r\n        }\r\n      }\r\n      if (!donesomething) break;\r\n    }\r\n  }\r\n\r\n  return polygons;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/fixTJunctions.js?");

/***/ }),

/***/ "../../algorithm/watertight/isWatertightPolygons.js":
/*!*****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/isWatertightPolygons.js ***!
  \*****************************************************************************************/
/*! exports provided: isWatertightPolygons */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isWatertightPolygons\", function() { return isWatertightPolygons; });\n/* harmony import */ var _findPolygonsViolations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./findPolygonsViolations */ \"../../algorithm/watertight/findPolygonsViolations.js\");\n\r\n\r\nconst isWatertightPolygons = polygons => Object(_findPolygonsViolations__WEBPACK_IMPORTED_MODULE_0__[\"findPolygonsViolations\"])(polygons).length === 0;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/isWatertightPolygons.js?");

/***/ }),

/***/ "../../algorithm/watertight/main.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/main.js ***!
  \*************************************************************************/
/*! exports provided: isWatertightPolygons, makeWatertight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _isWatertightPolygons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isWatertightPolygons */ \"../../algorithm/watertight/isWatertightPolygons.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"isWatertightPolygons\", function() { return _isWatertightPolygons__WEBPACK_IMPORTED_MODULE_0__[\"isWatertightPolygons\"]; });\n\n/* harmony import */ var _makeWatertight__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./makeWatertight */ \"../../algorithm/watertight/makeWatertight.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"makeWatertight\", function() { return _makeWatertight__WEBPACK_IMPORTED_MODULE_1__[\"makeWatertight\"]; });\n\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/main.js?");

/***/ }),

/***/ "../../algorithm/watertight/makeWatertight.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/makeWatertight.js ***!
  \***********************************************************************************/
/*! exports provided: makeWatertight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makeWatertight\", function() { return makeWatertight; });\n/* harmony import */ var _fixTJunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fixTJunctions */ \"../../algorithm/watertight/fixTJunctions.js\");\n\r\n\r\nconst makeWatertight = polygons => Object(_fixTJunctions__WEBPACK_IMPORTED_MODULE_0__[\"fixTJunctions\"])(polygons);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/watertight/makeWatertight.js?");

/***/ }),

/***/ "../../algorithm/z0surface/blessAsConvex.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0surface/blessAsConvex.js ***!
  \*********************************************************************************/
/*! exports provided: blessAsConvex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"blessAsConvex\", function() { return blessAsConvex; });\nconst blessAsConvex = (paths) => { paths.isConvex = true; return paths; };\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0surface/blessAsConvex.js?");

/***/ }),

/***/ "../../algorithm/z0surface/clippingToPolygons.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0surface/clippingToPolygons.js ***!
  \**************************************************************************************/
/*! exports provided: clippingToPolygons, z0SurfaceToClipping */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clippingToPolygons\", function() { return clippingToPolygons; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"z0SurfaceToClipping\", function() { return z0SurfaceToClipping; });\n// Internal function to massage data for passing to polygon-clipping.\r\nconst clippingToPolygons = (clipping) => {\r\n  const polygonArray = [];\r\n  for (const polygons of clipping) {\r\n    for (const polygon of polygons) {\r\n      polygon.pop();\r\n      polygonArray.push(polygon);\r\n    }\r\n  }\r\n  return polygonArray;\r\n};\r\n\r\nconst z0SurfaceToClipping = (z0Surface) => {\r\n  return [z0Surface.map(z0Polygon => z0Polygon.map(([x = 0, y = 0]) => [x, y]))];\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0surface/clippingToPolygons.js?");

/***/ }),

/***/ "../../algorithm/z0surface/difference.js":
/*!******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0surface/difference.js ***!
  \******************************************************************************/
/*! exports provided: difference */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"difference\", function() { return difference; });\n/* harmony import */ var _clippingToPolygons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clippingToPolygons */ \"../../algorithm/z0surface/clippingToPolygons.js\");\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n/* harmony import */ var polygon_clipping__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! polygon-clipping */ \"../../node_modules/polygon-clipping/dist/polygon-clipping.umd.js\");\n/* harmony import */ var polygon_clipping__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(polygon_clipping__WEBPACK_IMPORTED_MODULE_2__);\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Return a surface representing the difference between the first surface\r\n *   and the rest of the surfaces.\r\n * The difference of no surfaces is the empty surface.\r\n * The difference of one surface is that surface.\r\n * @param {Array<surface>} surfaces - the surfaces.\r\n * @returns {surface} - the resulting surface\r\n * @example\r\n * let C = difference(A, B)\r\n * @example\r\n * +-------+            +-------+\r\n * |       |            |   C   |\r\n * |   A   |            |       |\r\n * |    +--+----+   =   |    +--+\r\n * +----+--+    |       +----+\r\n *      |   B   |\r\n *      |       |\r\n *      +-------+\r\n */\r\nconst difference = (baseSurface, ...surfaces) => {\r\n  if (surfaces.length === 0) {\r\n    return baseSurface;\r\n  }\r\n  const surfaceClipping = Object(_clippingToPolygons__WEBPACK_IMPORTED_MODULE_0__[\"z0SurfaceToClipping\"])(Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__[\"canonicalize\"])(baseSurface));\r\n  const subtractionClipping = surfaces.map(surface => Object(_clippingToPolygons__WEBPACK_IMPORTED_MODULE_0__[\"z0SurfaceToClipping\"])(Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__[\"canonicalize\"])(surface)));\r\n  const outputClipping = Object(polygon_clipping__WEBPACK_IMPORTED_MODULE_2__[\"difference\"])(surfaceClipping, ...subtractionClipping);\r\n  const outputPaths = Object(_clippingToPolygons__WEBPACK_IMPORTED_MODULE_0__[\"clippingToPolygons\"])(outputClipping);\r\n  return outputPaths;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0surface/difference.js?");

/***/ }),

/***/ "../../algorithm/z0surface/intersection.js":
/*!********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0surface/intersection.js ***!
  \********************************************************************************/
/*! exports provided: intersection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"intersection\", function() { return intersection; });\n/* harmony import */ var _clippingToPolygons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clippingToPolygons */ \"../../algorithm/z0surface/clippingToPolygons.js\");\n/* harmony import */ var polygon_clipping__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! polygon-clipping */ \"../../node_modules/polygon-clipping/dist/polygon-clipping.umd.js\");\n/* harmony import */ var polygon_clipping__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(polygon_clipping__WEBPACK_IMPORTED_MODULE_1__);\n\r\n\r\n\r\n/**\r\n * Produce a surface that is the intersection of all provided surfaces.\r\n * The intersection of no surfaces is the empty surface.\r\n * The intersection of one surface is that surface.\r\n * @param {Array<surface>} surfaces - the surfaces to intersect.\r\n * @returns {surface} the intersection of surfaces.\r\n * @example\r\n * let C = difference(A, B)\r\n * @example\r\n * +-------+            +-------+\r\n * |       |            |   C   |\r\n * |   A   |            |       |\r\n * |    +--+----+   =   |    +--+\r\n * +----+--+    |       +----+\r\n *      |   B   |\r\n *      |       |\r\n *      +-------+\r\n */\r\nconst intersection = (...z0Surfaces) => {\r\n  if (z0Surfaces.length === 0) {\r\n    return [];\r\n  }\r\n  return Object(_clippingToPolygons__WEBPACK_IMPORTED_MODULE_0__[\"clippingToPolygons\"])(Object(polygon_clipping__WEBPACK_IMPORTED_MODULE_1__[\"intersection\"])(...z0Surfaces.map(_clippingToPolygons__WEBPACK_IMPORTED_MODULE_0__[\"z0SurfaceToClipping\"])));\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0surface/intersection.js?");

/***/ }),

/***/ "../../algorithm/z0surface/main.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0surface/main.js ***!
  \************************************************************************/
/*! exports provided: difference, makeConvex, intersection, union */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _difference__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./difference */ \"../../algorithm/z0surface/difference.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"difference\", function() { return _difference__WEBPACK_IMPORTED_MODULE_0__[\"difference\"]; });\n\n/* harmony import */ var _intersection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./intersection */ \"../../algorithm/z0surface/intersection.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"intersection\", function() { return _intersection__WEBPACK_IMPORTED_MODULE_1__[\"intersection\"]; });\n\n/* harmony import */ var _makeConvex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./makeConvex */ \"../../algorithm/z0surface/makeConvex.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"makeConvex\", function() { return _makeConvex__WEBPACK_IMPORTED_MODULE_2__[\"makeConvex\"]; });\n\n/* harmony import */ var _union__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./union */ \"../../algorithm/z0surface/union.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"union\", function() { return _union__WEBPACK_IMPORTED_MODULE_3__[\"union\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0surface/main.js?");

/***/ }),

/***/ "../../algorithm/z0surface/makeConvex.js":
/*!******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0surface/makeConvex.js ***!
  \******************************************************************************/
/*! exports provided: makeConvex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makeConvex\", function() { return makeConvex; });\n/* harmony import */ var tess2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tess2 */ \"../../node_modules/tess2/index.js\");\n/* harmony import */ var tess2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tess2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _blessAsConvex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./blessAsConvex */ \"../../algorithm/z0surface/blessAsConvex.js\");\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n\r\n\r\n\r\n\r\nconst toContour = (polygon) => {\r\n  const points = [];\r\n  for (const [x = 0, y = 0, z = 0] of polygon) {\r\n    points.push(x, y, z);\r\n  }\r\n  return points;\r\n};\r\n\r\nconst fromTessellation = (tessellation) => {\r\n  const tessPolygons = tessellation.elements;\r\n  const vertices = tessellation.vertices;\r\n  const polygons = [];\r\n\r\n  const toPoint = (offset) => {\r\n    const vertex = tessPolygons[offset];\r\n    return [vertices[vertex * 3 + 0], vertices[vertex * 3 + 1], vertices[vertex * 3 + 2]];\r\n  };\r\n\r\n  for (let nth = 0; nth < tessPolygons.length; nth += 3) {\r\n    polygons.push([toPoint(nth + 0), toPoint(nth + 1), toPoint(nth + 2)]);\r\n  }\r\n\r\n  return polygons;\r\n};\r\n\r\n// This currently does triangulation.\r\n// Higher arities are possible, but end up being null padded.\r\n// Let's see if they're useful.\r\n\r\n// TODO: Call this toConvexPolygons\r\nconst makeConvex = (options = {}, polygons) => {\r\n  if (polygons.isConvex) {\r\n    return polygons;\r\n  }\r\n  if (polygons.every(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_2__[\"isConvex\"])) {\r\n    return Object(_blessAsConvex__WEBPACK_IMPORTED_MODULE_1__[\"blessAsConvex\"])(polygons);\r\n  }\r\n  const contours = polygons.map(toContour);\r\n  // CONISDER: Migrating from tess2 to earclip, given we flatten in solid tessellation anyhow.\r\n  const convex = fromTessellation(\r\n    tess2__WEBPACK_IMPORTED_MODULE_0___default.a.tesselate({ contours: contours,\r\n                      windingRule: tess2__WEBPACK_IMPORTED_MODULE_0___default.a.WINDING_ODD,\r\n                      elementType: tess2__WEBPACK_IMPORTED_MODULE_0___default.a.POLYGONS,\r\n                      polySize: 3,\r\n                      vertexSize: 3\r\n    }));\r\n  return Object(_blessAsConvex__WEBPACK_IMPORTED_MODULE_1__[\"blessAsConvex\"])(convex);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0surface/makeConvex.js?");

/***/ }),

/***/ "../../algorithm/z0surface/union.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0surface/union.js ***!
  \*************************************************************************/
/*! exports provided: union */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"union\", function() { return union; });\n/* harmony import */ var _clippingToPolygons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clippingToPolygons */ \"../../algorithm/z0surface/clippingToPolygons.js\");\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n/* harmony import */ var polygon_clipping__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! polygon-clipping */ \"../../node_modules/polygon-clipping/dist/polygon-clipping.umd.js\");\n/* harmony import */ var polygon_clipping__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(polygon_clipping__WEBPACK_IMPORTED_MODULE_2__);\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Produces a surface that is the union of all provided surfaces.\r\n * The union of no surfaces is the empty surface.\r\n * The union of one surface is that surface.\r\n * @param {Array<Z0Surface>} surfaces - the z0 surfaces to union.\r\n * @returns {Z0Surface} the resulting z0 surface.\r\n */\r\nconst union = (...surfaces) => {\r\n  if (surfaces.length === 0) {\r\n    return [];\r\n  }\r\n  if (surfaces.length === 1) {\r\n    return surfaces[0];\r\n  }\r\n  const clipping = surfaces.map(surface => Object(_clippingToPolygons__WEBPACK_IMPORTED_MODULE_0__[\"z0SurfaceToClipping\"])(Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__[\"canonicalize\"])(surface)));\r\n  const result = Object(polygon_clipping__WEBPACK_IMPORTED_MODULE_2__[\"union\"])(...clipping);\r\n  return Object(_clippingToPolygons__WEBPACK_IMPORTED_MODULE_0__[\"clippingToPolygons\"])(result);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/algorithm/z0surface/union.js?");

/***/ }),

/***/ "../../api/v1/Shape.js":
/*!************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/Shape.js ***!
  \************************************************************/
/*! exports provided: Shape, assembleLazily, unionLazily, differenceLazily, intersectionLazily */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Shape\", function() { return Shape; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assembleLazily\", function() { return assembleLazily; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"unionLazily\", function() { return unionLazily; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"differenceLazily\", function() { return differenceLazily; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"intersectionLazily\", function() { return intersectionLazily; });\n/* harmony import */ var _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-path */ \"../../algorithm/path/main.js\");\n/* harmony import */ var _jsxcad_geometry_assembly__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/geometry-assembly */ \"../../geometry/assembly/main.js\");\n/* harmony import */ var _jsxcad_algorithm_solid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-solid */ \"../../algorithm/solid/main.js\");\n\r\n\r\n\r\n\r\n\r\nclass Shape {\r\n  as (tag) {\r\n    return this.fromLazyGeometry(toLazyGeometry(this).addTag(tag));\r\n  }\r\n\r\n  assemble (...shapes) {\r\n    return this.fromLazyGeometry(toLazyGeometry(this).assemble(...shapes.map(toLazyGeometry)));\r\n  }\r\n\r\n  close () {\r\n    const geometry = this.toPaths().toDisjointGeometry();\r\n    if (!isSingleOpenPath(geometry)) {\r\n      throw Error('Close requires a single open path.');\r\n    }\r\n    return Shape.fromClosedPath(Object(_jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__[\"close\"])(geometry.paths[0]));\r\n  }\r\n\r\n  concat (...shapes) {\r\n    const paths = [];\r\n    for (const shape of [this, ...shapes]) {\r\n      const geometry = shape.toPaths().toDisjointGeometry();\r\n      if (!isSingleOpenPath(geometry)) {\r\n        throw Error('Concatenation requires single open paths.');\r\n      }\r\n      paths.push(geometry.paths[0]);\r\n    }\r\n    return Shape.fromOpenPath(Object(_jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__[\"concatenate\"])(...paths));\r\n  }\r\n\r\n  constructor (lazyGeometry = Object(_jsxcad_geometry_assembly__WEBPACK_IMPORTED_MODULE_1__[\"fromGeometry\"])({ assembly: [] })) {\r\n    this.lazyGeometry = lazyGeometry;\r\n  }\r\n\r\n  difference (...shapes) {\r\n    return this.fromLazyGeometry(toLazyGeometry(this).difference(...shapes.map(toLazyGeometry)));\r\n  }\r\n\r\n  eachPoint (options = {}, operation) {\r\n    toLazyGeometry(this).eachPoint(options, operation);\r\n  }\r\n\r\n  fromLazyGeometry (geometry) {\r\n    return Shape.fromLazyGeometry(geometry);\r\n  }\r\n\r\n  intersection (...shapes) {\r\n    return this.fromLazyGeometry(toLazyGeometry(this).intersection(...shapes.map(toLazyGeometry)));\r\n  }\r\n\r\n  toLazyGeometry () {\r\n    return this.lazyGeometry;\r\n  }\r\n\r\n  toComponents (options = {}) {\r\n    return toLazyGeometry(this).toComponents(options);\r\n  }\r\n\r\n  toDisjointGeometry (options = {}) {\r\n    return toLazyGeometry(this).toDisjointGeometry(options);\r\n  }\r\n\r\n  toPaths (options = {}) {\r\n    return this.fromLazyGeometry(toLazyGeometry(this).toPaths(options));\r\n  }\r\n\r\n  toPoints (options = {}) {\r\n    return this.fromLazyGeometry(toLazyGeometry(this).toPoints(options));\r\n  }\r\n\r\n  toSolid (options = {}) {\r\n    return this.fromLazyGeometry(toLazyGeometry(this).toSolid(options));\r\n  }\r\n\r\n  toZ0Surface (options = {}) {\r\n    return this.fromLazyGeometry(toLazyGeometry(this).toZ0Surface(options));\r\n  }\r\n\r\n  transform (matrix) {\r\n    return this.fromLazyGeometry(toLazyGeometry(this).transform(matrix));\r\n  }\r\n\r\n  union (...shapes) {\r\n    return this.fromLazyGeometry(toLazyGeometry(this).union(...shapes.map(toLazyGeometry)));\r\n  }\r\n}\r\nconst isSingleOpenPath = ({ paths }) => (paths !== undefined) && (paths.length === 1) && (paths[0][0] === null);\r\n\r\nconst toLazyGeometry = (shape) => shape.toLazyGeometry();\r\n\r\nconst assembleLazily = (shape, ...shapes) =>\r\n  Shape.fromLazyGeometry(toLazyGeometry(shape).assemble(...shapes.map(toLazyGeometry)));\r\n\r\nconst unionLazily = (shape, ...shapes) =>\r\n  Shape.fromLazyGeometry(toLazyGeometry(shape).union(...shapes.map(toLazyGeometry)));\r\n\r\nconst differenceLazily = (shape, ...shapes) =>\r\n  Shape.fromLazyGeometry(toLazyGeometry(shape).difference(...shapes.map(toLazyGeometry)));\r\n\r\nconst intersectionLazily = (shape, ...shapes) =>\r\n  Shape.fromLazyGeometry(toLazyGeometry(shape).intersection(...shapes.map(toLazyGeometry())));\r\n\r\nShape.fromClosedPath = (path) => new Shape(Object(_jsxcad_geometry_assembly__WEBPACK_IMPORTED_MODULE_1__[\"fromGeometry\"])({ paths: [Object(_jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__[\"close\"])(path)] }));\r\nShape.fromGeometry = (geometry) => new Shape(Object(_jsxcad_geometry_assembly__WEBPACK_IMPORTED_MODULE_1__[\"fromGeometry\"])(geometry));\r\nShape.fromLazyGeometry = (lazyGeometry) => new Shape(lazyGeometry);\r\nShape.fromOpenPath = (path) => new Shape(Object(_jsxcad_geometry_assembly__WEBPACK_IMPORTED_MODULE_1__[\"fromGeometry\"])({ paths: [Object(_jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_0__[\"open\"])(path)] }));\r\nShape.fromPaths = (paths) => new Shape(Object(_jsxcad_geometry_assembly__WEBPACK_IMPORTED_MODULE_1__[\"fromGeometry\"])({ paths: paths }));\r\nShape.fromPathToZ0Surface = (path) => new Shape(Object(_jsxcad_geometry_assembly__WEBPACK_IMPORTED_MODULE_1__[\"fromGeometry\"])({ z0Surface: [path] }));\r\nShape.fromPathsToZ0Surface = (paths) => new Shape(Object(_jsxcad_geometry_assembly__WEBPACK_IMPORTED_MODULE_1__[\"fromGeometry\"])({ z0Surface: paths }));\r\nShape.fromPolygonsToSolid = (polygons) => new Shape(Object(_jsxcad_geometry_assembly__WEBPACK_IMPORTED_MODULE_1__[\"fromGeometry\"])({ solid: Object(_jsxcad_algorithm_solid__WEBPACK_IMPORTED_MODULE_2__[\"fromPolygons\"])({}, polygons) }));\r\nShape.fromPolygonsToZ0Surface = (polygons) => new Shape(Object(_jsxcad_geometry_assembly__WEBPACK_IMPORTED_MODULE_1__[\"fromGeometry\"])({ z0Surface: polygons }));\r\nShape.fromSurfaces = (surfaces) => new Shape(Object(_jsxcad_geometry_assembly__WEBPACK_IMPORTED_MODULE_1__[\"fromGeometry\"])({ solid: surfaces }));\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/Shape.js?");

/***/ }),

/***/ "../../api/v1/acos.js":
/*!***********************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/acos.js ***!
  \***********************************************************/
/*! exports provided: acos */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"acos\", function() { return acos; });\nconst acos = (a) => Math.acos(a) / (Math.PI * 2) * 360;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/acos.js?");

/***/ }),

/***/ "../../api/v1/assemble.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/assemble.js ***!
  \***************************************************************/
/*! exports provided: assemble */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assemble\", function() { return assemble; });\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n\r\n\r\nconst assemble = (...params) => {\r\n  switch (params.length) {\r\n    case 0: {\r\n      return _Shape__WEBPACK_IMPORTED_MODULE_0__[\"Shape\"].fromGeometry({ assembly: [] });\r\n    }\r\n    case 1: {\r\n      return params[0];\r\n    }\r\n    default: {\r\n      return Object(_Shape__WEBPACK_IMPORTED_MODULE_0__[\"assembleLazily\"])(...params);\r\n    }\r\n  }\r\n};\r\n\r\nconst method = function (...shapes) { return assemble(this, ...shapes); };\r\n\r\n_Shape__WEBPACK_IMPORTED_MODULE_0__[\"Shape\"].prototype.assemble = method;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/assemble.js?");

/***/ }),

/***/ "../../api/v1/assert.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/assert.js ***!
  \*************************************************************/
/*! exports provided: assertBoolean, assertEmpty, assertSingle, assertNumber, assertNumberTriple */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assertBoolean\", function() { return assertBoolean; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assertEmpty\", function() { return assertEmpty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assertSingle\", function() { return assertSingle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assertNumber\", function() { return assertNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assertNumberTriple\", function() { return assertNumberTriple; });\nconst assertBoolean = (value) => {\r\n  if (typeof value !== 'boolean') {\r\n    throw Error(`Not a boolean: ${value}`);\r\n  }\r\n};\r\n\r\nconst assertEmpty = (value) => {\r\n  if (value.length === undefined) {\r\n    throw Error(`Has no length: ${value}`);\r\n  }\r\n\r\n  if (value.length !== 0) {\r\n    throw Error(`Is not empty: ${value}`);\r\n  }\r\n};\r\n\r\nconst assertSingle = (value) => {\r\n  if (value.length === undefined) {\r\n    throw Error(`Has no length: ${value}`);\r\n  }\r\n\r\n  if (value.length !== 1) {\r\n    throw Error(`Is not single: ${value}`);\r\n  }\r\n};\r\n\r\nconst assertNumber = (value) => {\r\n  if (typeof value !== 'number') {\r\n    throw Error(`Not a number: ${value}`);\r\n  }\r\n};\r\n\r\nconst assertNumberTriple = (value) => {\r\n  if (value.length === undefined) {\r\n    throw Error(`Has no length: ${value}`);\r\n  }\r\n\r\n  if (value.length !== 3) {\r\n    throw Error(`Is not a triple: ${value}`);\r\n  }\r\n  for (const v of value) {\r\n    assertNumber(v);\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/assert.js?");

/***/ }),

/***/ "../../api/v1/circle.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/circle.js ***!
  \*************************************************************/
/*! exports provided: circle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"circle\", function() { return circle; });\n/* harmony import */ var _assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert */ \"../../api/v1/assert.js\");\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n/* harmony import */ var _jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-shape */ \"../../algorithm/shape/main.js\");\n\r\n\r\n\r\n\r\n\r\nconst buildCircle = ({ r = 1, fn = 32, center = false }) =>\r\n  _Shape__WEBPACK_IMPORTED_MODULE_1__[\"Shape\"].fromPathToZ0Surface(Object(_jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_2__[\"buildRegularPolygon\"])({ edges: fn })).scale(r);\r\n\r\n/**\r\n *\r\n * circle();                        // openscad like\r\n * circle(1);\r\n * circle({r: 2, fn:5});            // fn = number of segments to approximate the circle\r\n * circle({r: 3, center: true});    // center: false (default)\r\n *\r\n */\r\nconst circle = (...params) => {\r\n  // circle({ r: 3, center: true, fn: 5 });\r\n  try {\r\n    const { r, center = false, fn = 32 } = params[0];\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(r);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(fn);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertBoolean\"])(center);\r\n    return buildCircle({ r: r, fn: fn, center: center });\r\n  } catch (e) {}\r\n\r\n  // circle(1);\r\n  try {\r\n    const [r] = params[0];\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(r);\r\n    return buildCircle({ r: r });\r\n  } catch (e) {}\r\n\r\n  // circle(1);\r\n  try {\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertEmpty\"])(params);\r\n    return buildCircle({});\r\n  } catch (e) {}\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/circle.js?");

/***/ }),

/***/ "../../api/v1/cos.js":
/*!**********************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/cos.js ***!
  \**********************************************************/
/*! exports provided: cos */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cos\", function() { return cos; });\nconst cos = (a) => Math.cos(a / 360 * Math.PI * 2);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/cos.js?");

/***/ }),

/***/ "../../api/v1/crossSection.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/crossSection.js ***!
  \*******************************************************************/
/*! exports provided: crossSection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"crossSection\", function() { return crossSection; });\n/* harmony import */ var _jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-polygons */ \"../../algorithm/polygons/main.js\");\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n/* harmony import */ var _jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/math-plane */ \"../../math/plane/main.js\");\n/* harmony import */ var _jsxcad_algorithm_solid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jsxcad/algorithm-solid */ \"../../algorithm/solid/main.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nconst crossSection = ({ z = 0 } = {}, shape) => {\r\n  const geometry = shape.toSolid().toDisjointGeometry();\r\n  const polygons = Object(_jsxcad_algorithm_solid__WEBPACK_IMPORTED_MODULE_3__[\"toPolygons\"])({}, geometry.solid);\r\n  const triangles = Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"toTriangles\"])({}, polygons);\r\n  const paths = Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"cutTrianglesByPlane\"])(Object(_jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_2__[\"fromPoints\"])([0, 0, z], [1, 0, z], [0, 1, z]), triangles);\r\n  return _Shape__WEBPACK_IMPORTED_MODULE_1__[\"Shape\"].fromPathsToZ0Surface(paths);\r\n};\r\n\r\nconst method = function (options) { return crossSection(options, this); };\r\n\r\n_Shape__WEBPACK_IMPORTED_MODULE_1__[\"Shape\"].prototype.crossSection = method;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/crossSection.js?");

/***/ }),

/***/ "../../api/v1/cube.js":
/*!***********************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/cube.js ***!
  \***********************************************************/
/*! exports provided: cube */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cube\", function() { return cube; });\n/* harmony import */ var _assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert */ \"../../api/v1/assert.js\");\n/* harmony import */ var _jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-shape */ \"../../algorithm/shape/main.js\");\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n/* harmony import */ var _minkowski__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./minkowski */ \"../../api/v1/minkowski.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n// Dispatch mechanism.\r\n// TODO: Move this somewhere else.\r\n\r\nconst chain = (name, ...dispatches) => {\r\n  return (...params) => {\r\n    for (const dispatch of dispatches) {\r\n      // For each signature\r\n      let operation;\r\n      try {\r\n        // Try to decode it into an operation.\r\n        operation = dispatch(...params);\r\n      } catch (e) {\r\n        continue;\r\n      }\r\n      return operation();\r\n    }\r\n    throw Error(`Unsupported interface for ${name}: ${JSON.stringify(params)}`);\r\n  };\r\n};\r\n\r\n// Geometry construction.\r\n\r\nconst edgeScale = Object(_jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_1__[\"regularPolygonEdgeLengthToRadius\"])(1, 4);\r\n\r\n// Note: We can't call this while bootstrapping, but we could memoize the result afterward.\r\nconst unitCube = () => _Shape__WEBPACK_IMPORTED_MODULE_2__[\"Shape\"].fromPolygonsToSolid(Object(_jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_1__[\"buildRegularPrism\"])({ edges: 4 }))\r\n    .rotateZ(45)\r\n    .scale([edgeScale, edgeScale, 1]);\r\n\r\nconst centerMaybe = ({ size, center }, shape) => {\r\n  if (center) {\r\n    return shape;\r\n  } else {\r\n    if (typeof size === 'number') {\r\n      return shape.translate([size / 2, size / 2, size / 2]);\r\n    } else {\r\n      return shape.translate([size[0] / 2, size[1] / 2, size[2] / 2]);\r\n    }\r\n  }\r\n};\r\n\r\n// Cube Interfaces.\r\n\r\n// cube()\r\nconst cubeDefault = (...rest) => {\r\n  Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertEmpty\"])(rest);\r\n  return () => unitCube().translate([0.5, 0.5, 0.5]);\r\n};\r\n\r\n// cube(10)\r\nconst cubeSide = (size, ...rest) => {\r\n  Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertEmpty\"])(rest);\r\n  Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(size);\r\n  return () => unitCube().scale(size).translate([size / 2, size / 2, size / 2]);\r\n};\r\n\r\n// cube({ radius, roundRadius, resolution })\r\nconst cubeRoundRadiusResolution = ({ radius = 1, roundRadius, resolution = 5 }, ...rest) => {\r\n  Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertEmpty\"])(rest);\r\n  Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(roundRadius);\r\n  Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(resolution);\r\n  return () => Object(_minkowski__WEBPACK_IMPORTED_MODULE_3__[\"minkowski\"])(unitCube().scale(radius - roundRadius * 2),\r\n                         _Shape__WEBPACK_IMPORTED_MODULE_2__[\"Shape\"].fromPolygonsToSolid(Object(_jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_1__[\"buildRingSphere\"])({ resolution })).scale(roundRadius));\r\n};\r\n\r\n// cube({ center: [0, 0, 0], radius: 1 })\r\nconst cubeCenterRadius = ({ center, radius }, ...rest) => {\r\n  Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertEmpty\"])(rest);\r\n  Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumberTriple\"])(center);\r\n  // PROVE: That radius makes sense when used like this.\r\n  Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(radius);\r\n  return () => unitCube().scale(radius).translate(center);\r\n};\r\n\r\n// cube({ radius: 1 })\r\nconst cubeRadius = ({ radius }, ...rest) => {\r\n  Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertEmpty\"])(rest);\r\n  // PROVE: That radius makes sense when used like this.\r\n  Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(radius);\r\n  return () => unitCube().scale(radius).translate([radius / 2, radius / 2, radius / 2]);\r\n};\r\n\r\n// cube({ corner1: [4, 4, 4], corner2: [5, 4, 2] });\r\nconst cubeCorner = ({ corner1, corner2 }, ...rest) => {\r\n  Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertEmpty\"])(rest);\r\n  Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumberTriple\"])(corner1);\r\n  Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumberTriple\"])(corner2);\r\n  const [c1x, c1y, c1z] = corner1;\r\n  const [c2x, c2y, c2z] = corner2;\r\n  const length = c2x - c1x;\r\n  const width = c2y - c1y;\r\n  const height = c2z - c1z;\r\n  const center = [(c1x + c2x) / 2, (c1y + c2y) / 2, (c1z + c2z) / 2];\r\n  return () => unitCube().scale([length, width, height]).translate(center);\r\n};\r\n\r\n// cube({size: [1,2,3], center: false });\r\nconst cubeSizesCenter = ({ size, center = false }, ...rest) => {\r\n  Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertEmpty\"])(rest);\r\n  const [length, width, height] = size;\r\n  Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(length);\r\n  Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(width);\r\n  Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(height);\r\n  return () => centerMaybe({ size, center }, unitCube().scale([length, width, height]));\r\n};\r\n\r\n// cube({ size: 1, center: false });\r\nconst cubeSizeCenter = ({ size, center = false }, ...rest) => {\r\n  Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertEmpty\"])(rest);\r\n  Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(size);\r\n  return () => centerMaybe({ size, center }, unitCube().scale(size));\r\n};\r\n\r\n// Cube Operation\r\n\r\nconst cube = chain('cube',\r\n                          cubeDefault,\r\n                          cubeSide,\r\n                          cubeRoundRadiusResolution,\r\n                          cubeCenterRadius,\r\n                          cubeRadius,\r\n                          cubeCorner,\r\n                          cubeSizesCenter,\r\n                          cubeSizeCenter);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/cube.js?");

/***/ }),

/***/ "../../api/v1/cylinder.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/cylinder.js ***!
  \***************************************************************/
/*! exports provided: cylinder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cylinder\", function() { return cylinder; });\n/* harmony import */ var _assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert */ \"../../api/v1/assert.js\");\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n/* harmony import */ var _jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-shape */ \"../../algorithm/shape/main.js\");\n\r\n\r\n\r\n\r\n\r\nconst buildCylinder = ({ r1 = 1, r2 = 1, h = 1, edges = 32 }) => {\r\n  return _Shape__WEBPACK_IMPORTED_MODULE_1__[\"Shape\"].fromPolygonsToSolid(Object(_jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_2__[\"buildRegularPrism\"])({ edges: edges })).scale([r1, r1, h]);\r\n};\r\n\r\n/**\r\n *\r\n * cylinder();              // unit cylinder\r\n * cylinder({r: 1, h: 10});                 // openscad like\r\n * cylinder({d: 1, h: 10});\r\n * cylinder({r: 1, h: 10, center: true});   // default: center:false\r\n * cylinder({r: 1, h: 10, center: [true, true, false]});  // individual x,y,z center flags\r\n * cylinder({r: 1, h: 10, round: true});\r\n * cylinder({r1: 3, r2: 0, h: 10});\r\n * cylinder({d1: 1, d2: 0.5, h: 10});\r\n * cylinder({start: [0,0,0], end: [0,0,10], r1: 1, r2: 2, fn: 50});\r\n *\r\n */\r\nconst cylinder = (...params) => {\r\n  // cylinder()\r\n  try {\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertEmpty\"])(params);\r\n    return buildCylinder({});\r\n  } catch (e) {}\r\n\r\n  // cylinder({r: 1, h: 10, center: true});\r\n  try {\r\n    const { h, r, fn = 32 } = params[0];\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(h);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(r);\r\n    return buildCylinder({ r1: r, r2: r, h: h, edges: fn });\r\n  } catch (e) {}\r\n\r\n  // cylinder({ r1: 1, r2: 2, h: 10, center: true});\r\n  try {\r\n    const { h, r1, r2, fn = 32 } = params[0];\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(h);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(r1);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(r2);\r\n    return buildCylinder({ r1: r1, r2: r2, h: h, edges: fn });\r\n  } catch (e) {}\r\n\r\n  // cylinder({ faces: 32, diameter: 1, height: 10 });\r\n  try {\r\n    const { diameter, height, faces } = params[0];\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(diameter);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(faces);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(height);\r\n    return buildCylinder({ r1: diameter / 2, r2: diameter / 2, h: height, center: true, edges: faces });\r\n  } catch (e) {}\r\n\r\n  throw Error(`Unsupported interface for cylinder: ${JSON.stringify(params)}`);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/cylinder.js?");

/***/ }),

/***/ "../../api/v1/difference.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/difference.js ***!
  \*****************************************************************/
/*! exports provided: difference */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"difference\", function() { return difference; });\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n\r\n\r\nconst difference = (...params) => Object(_Shape__WEBPACK_IMPORTED_MODULE_0__[\"differenceLazily\"])(...params);\r\n\r\nconst method = function (...shapes) { return difference(this, ...shapes); };\r\n\r\n_Shape__WEBPACK_IMPORTED_MODULE_0__[\"Shape\"].prototype.difference = method;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/difference.js?");

/***/ }),

/***/ "../../api/v1/extrude.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/extrude.js ***!
  \**************************************************************/
/*! exports provided: extrude */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"extrude\", function() { return extrude; });\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n/* harmony import */ var _jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-shape */ \"../../algorithm/shape/main.js\");\n\r\n\r\n\r\nconst extrude = ({ height } = {}, shape) => {\r\n  const geometry = shape.toZ0Surface();\r\n  const extrusion = Object(_jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_1__[\"extrudeLinear\"])({ height: height }, geometry.lazyGeometry.geometry.z0Surface);\r\n  const extrudedShape = _Shape__WEBPACK_IMPORTED_MODULE_0__[\"Shape\"].fromPolygonsToSolid(extrusion);\r\n  return extrudedShape;\r\n};\r\n\r\nconst method = function (options) { return extrude(options, this); };\r\n\r\n_Shape__WEBPACK_IMPORTED_MODULE_0__[\"Shape\"].prototype.extrude = method;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/extrude.js?");

/***/ }),

/***/ "../../api/v1/hsl2rgb.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/hsl2rgb.js ***!
  \**************************************************************/
/*! exports provided: hsl2rgb */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hsl2rgb\", function() { return hsl2rgb; });\n/* harmony import */ var _assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert */ \"../../api/v1/assert.js\");\n/* harmony import */ var _jsxcad_algorithm_color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-color */ \"../../algorithm/color/main.js\");\n\r\n\r\n\r\nconst hsl2rgb = (...params) => {\r\n  try {\r\n    const [hue, saturation, brightness] = params;\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(hue);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(saturation);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(brightness);\r\n    return Object(_jsxcad_algorithm_color__WEBPACK_IMPORTED_MODULE_1__[\"hslToRgb\"])([hue, saturation, brightness]);\r\n  } catch (e) {}\r\n\r\n  try {\r\n    const [hue, saturation, brightness] = params[0];\r\n    return Object(_jsxcad_algorithm_color__WEBPACK_IMPORTED_MODULE_1__[\"hslToRgb\"])([hue, saturation, brightness]);\r\n  } catch (e) {}\r\n\r\n  throw Error(`Unsupported interface for hsl2rgb: ${JSON.stringify(params)}`);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/hsl2rgb.js?");

/***/ }),

/***/ "../../api/v1/hull.js":
/*!***********************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/hull.js ***!
  \***********************************************************/
/*! exports provided: hull */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hull\", function() { return hull; });\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n/* harmony import */ var _jsxcad_algorithm_points__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-points */ \"../../algorithm/points/main.js\");\n\r\n\r\n\r\nconst hull = (...geometries) => {\r\n  // FIX: Support z0Surface hulling.\r\n  const points = [];\r\n  geometries.forEach(geometry => geometry.eachPoint({}, point => points.push(point)));\r\n  return _Shape__WEBPACK_IMPORTED_MODULE_0__[\"Shape\"].fromPolygonsToSolid(Object(_jsxcad_algorithm_points__WEBPACK_IMPORTED_MODULE_1__[\"buildConvexHull\"])({}, points));\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/hull.js?");

/***/ }),

/***/ "../../api/v1/intersection.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/intersection.js ***!
  \*******************************************************************/
/*! exports provided: intersection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"intersection\", function() { return intersection; });\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n\r\n\r\nconst intersection = (...params) => Object(_Shape__WEBPACK_IMPORTED_MODULE_0__[\"intersectionLazily\"])(...params);\r\n\r\nconst method = function (...shapes) { return intersection(this, ...shapes); };\r\n\r\n_Shape__WEBPACK_IMPORTED_MODULE_0__[\"Shape\"].prototype.intersection = method;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/intersection.js?");

/***/ }),

/***/ "../../api/v1/main.js":
/*!***********************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/main.js ***!
  \***********************************************************/
/*! exports provided: Shape, acos, assemble, circle, crossSection, cos, cube, cylinder, difference, extrude, hsl2rgb, hull, intersection, loadFont, max, measureBoundingBox, minkowski, polyhedron, readDst, readJscad, rotate, rotateX, rotateY, rotateZ, scale, sin, sphere, sqrt, square, svgPath, tetrahedron, text, translate, union, writePaths, writePdf, writeStl, writeSvg, writeThreejsPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _text__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./text */ \"../../api/v1/text.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"loadFont\", function() { return _text__WEBPACK_IMPORTED_MODULE_0__[\"loadFont\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"text\", function() { return _text__WEBPACK_IMPORTED_MODULE_0__[\"text\"]; });\n\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Shape\", function() { return _Shape__WEBPACK_IMPORTED_MODULE_1__[\"Shape\"]; });\n\n/* harmony import */ var _acos__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./acos */ \"../../api/v1/acos.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"acos\", function() { return _acos__WEBPACK_IMPORTED_MODULE_2__[\"acos\"]; });\n\n/* harmony import */ var _assemble__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./assemble */ \"../../api/v1/assemble.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"assemble\", function() { return _assemble__WEBPACK_IMPORTED_MODULE_3__[\"assemble\"]; });\n\n/* harmony import */ var _circle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./circle */ \"../../api/v1/circle.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"circle\", function() { return _circle__WEBPACK_IMPORTED_MODULE_4__[\"circle\"]; });\n\n/* harmony import */ var _cos__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cos */ \"../../api/v1/cos.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"cos\", function() { return _cos__WEBPACK_IMPORTED_MODULE_5__[\"cos\"]; });\n\n/* harmony import */ var _crossSection__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./crossSection */ \"../../api/v1/crossSection.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"crossSection\", function() { return _crossSection__WEBPACK_IMPORTED_MODULE_6__[\"crossSection\"]; });\n\n/* harmony import */ var _cube__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cube */ \"../../api/v1/cube.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"cube\", function() { return _cube__WEBPACK_IMPORTED_MODULE_7__[\"cube\"]; });\n\n/* harmony import */ var _cylinder__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./cylinder */ \"../../api/v1/cylinder.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"cylinder\", function() { return _cylinder__WEBPACK_IMPORTED_MODULE_8__[\"cylinder\"]; });\n\n/* harmony import */ var _difference__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./difference */ \"../../api/v1/difference.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"difference\", function() { return _difference__WEBPACK_IMPORTED_MODULE_9__[\"difference\"]; });\n\n/* harmony import */ var _extrude__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./extrude */ \"../../api/v1/extrude.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"extrude\", function() { return _extrude__WEBPACK_IMPORTED_MODULE_10__[\"extrude\"]; });\n\n/* harmony import */ var _hsl2rgb__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./hsl2rgb */ \"../../api/v1/hsl2rgb.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"hsl2rgb\", function() { return _hsl2rgb__WEBPACK_IMPORTED_MODULE_11__[\"hsl2rgb\"]; });\n\n/* harmony import */ var _hull__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./hull */ \"../../api/v1/hull.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"hull\", function() { return _hull__WEBPACK_IMPORTED_MODULE_12__[\"hull\"]; });\n\n/* harmony import */ var _intersection__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./intersection */ \"../../api/v1/intersection.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"intersection\", function() { return _intersection__WEBPACK_IMPORTED_MODULE_13__[\"intersection\"]; });\n\n/* harmony import */ var _max__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./max */ \"../../api/v1/max.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"max\", function() { return _max__WEBPACK_IMPORTED_MODULE_14__[\"max\"]; });\n\n/* harmony import */ var _measureBoundingBox__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./measureBoundingBox */ \"../../api/v1/measureBoundingBox.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingBox\", function() { return _measureBoundingBox__WEBPACK_IMPORTED_MODULE_15__[\"measureBoundingBox\"]; });\n\n/* harmony import */ var _minkowski__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./minkowski */ \"../../api/v1/minkowski.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"minkowski\", function() { return _minkowski__WEBPACK_IMPORTED_MODULE_16__[\"minkowski\"]; });\n\n/* harmony import */ var _polyhedron__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./polyhedron */ \"../../api/v1/polyhedron.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"polyhedron\", function() { return _polyhedron__WEBPACK_IMPORTED_MODULE_17__[\"polyhedron\"]; });\n\n/* harmony import */ var _readDst__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./readDst */ \"../../api/v1/readDst.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"readDst\", function() { return _readDst__WEBPACK_IMPORTED_MODULE_18__[\"readDst\"]; });\n\n/* harmony import */ var _readJscad__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./readJscad */ \"../../api/v1/readJscad.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"readJscad\", function() { return _readJscad__WEBPACK_IMPORTED_MODULE_19__[\"readJscad\"]; });\n\n/* harmony import */ var _rotate__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./rotate */ \"../../api/v1/rotate.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rotate\", function() { return _rotate__WEBPACK_IMPORTED_MODULE_20__[\"rotate\"]; });\n\n/* harmony import */ var _rotateX__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./rotateX */ \"../../api/v1/rotateX.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rotateX\", function() { return _rotateX__WEBPACK_IMPORTED_MODULE_21__[\"rotateX\"]; });\n\n/* harmony import */ var _rotateY__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./rotateY */ \"../../api/v1/rotateY.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rotateY\", function() { return _rotateY__WEBPACK_IMPORTED_MODULE_22__[\"rotateY\"]; });\n\n/* harmony import */ var _rotateZ__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./rotateZ */ \"../../api/v1/rotateZ.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rotateZ\", function() { return _rotateZ__WEBPACK_IMPORTED_MODULE_23__[\"rotateZ\"]; });\n\n/* harmony import */ var _scale__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./scale */ \"../../api/v1/scale.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return _scale__WEBPACK_IMPORTED_MODULE_24__[\"scale\"]; });\n\n/* harmony import */ var _sin__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./sin */ \"../../api/v1/sin.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"sin\", function() { return _sin__WEBPACK_IMPORTED_MODULE_25__[\"sin\"]; });\n\n/* harmony import */ var _sphere__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./sphere */ \"../../api/v1/sphere.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"sphere\", function() { return _sphere__WEBPACK_IMPORTED_MODULE_26__[\"sphere\"]; });\n\n/* harmony import */ var _sqrt__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./sqrt */ \"../../api/v1/sqrt.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"sqrt\", function() { return _sqrt__WEBPACK_IMPORTED_MODULE_27__[\"sqrt\"]; });\n\n/* harmony import */ var _square__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./square */ \"../../api/v1/square.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"square\", function() { return _square__WEBPACK_IMPORTED_MODULE_28__[\"square\"]; });\n\n/* harmony import */ var _svgPath__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./svgPath */ \"../../api/v1/svgPath.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"svgPath\", function() { return _svgPath__WEBPACK_IMPORTED_MODULE_29__[\"svgPath\"]; });\n\n/* harmony import */ var _tetrahedron__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./tetrahedron */ \"../../api/v1/tetrahedron.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"tetrahedron\", function() { return _tetrahedron__WEBPACK_IMPORTED_MODULE_30__[\"tetrahedron\"]; });\n\n/* harmony import */ var _translate__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./translate */ \"../../api/v1/translate.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"translate\", function() { return _translate__WEBPACK_IMPORTED_MODULE_31__[\"translate\"]; });\n\n/* harmony import */ var _union__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./union */ \"../../api/v1/union.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"union\", function() { return _union__WEBPACK_IMPORTED_MODULE_32__[\"union\"]; });\n\n/* harmony import */ var _writePaths__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./writePaths */ \"../../api/v1/writePaths.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"writePaths\", function() { return _writePaths__WEBPACK_IMPORTED_MODULE_33__[\"writePaths\"]; });\n\n/* harmony import */ var _writePdf__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./writePdf */ \"../../api/v1/writePdf.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"writePdf\", function() { return _writePdf__WEBPACK_IMPORTED_MODULE_34__[\"writePdf\"]; });\n\n/* harmony import */ var _writeStl__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./writeStl */ \"../../api/v1/writeStl.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"writeStl\", function() { return _writeStl__WEBPACK_IMPORTED_MODULE_35__[\"writeStl\"]; });\n\n/* harmony import */ var _writeSvg__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./writeSvg */ \"../../api/v1/writeSvg.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"writeSvg\", function() { return _writeSvg__WEBPACK_IMPORTED_MODULE_36__[\"writeSvg\"]; });\n\n/* harmony import */ var _writeThreejs__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./writeThreejs */ \"../../api/v1/writeThreejs.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"writeThreejsPage\", function() { return _writeThreejs__WEBPACK_IMPORTED_MODULE_37__[\"writeThreejsPage\"]; });\n\n/**\r\n *\r\n * Defines the interface used by the api to access the rest of the system on\r\n * behalf of a user. e.g., algorithms and geometries.\r\n *\r\n * A user can destructively update this mapping in their code to change what\r\n * the api uses.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/main.js?");

/***/ }),

/***/ "../../api/v1/max.js":
/*!**********************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/max.js ***!
  \**********************************************************/
/*! exports provided: max */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"max\", function() { return max; });\nconst max = Math.max;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/max.js?");

/***/ }),

/***/ "../../api/v1/measureBoundingBox.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/measureBoundingBox.js ***!
  \*************************************************************************/
/*! exports provided: measureBoundingBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingBox\", function() { return measureBoundingBox; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n\r\n\r\n\r\n\r\nconst measureBoundingBox = (shape) => {\r\n  let minPoint = [Infinity, Infinity, Infinity];\r\n  let maxPoint = [-Infinity, -Infinity, -Infinity];\r\n  shape.eachPoint({},\r\n                  (point) => {\r\n                    minPoint = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"min\"])(minPoint, point);\r\n                    maxPoint = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"max\"])(maxPoint, point);\r\n                  });\r\n  return [minPoint, maxPoint];\r\n};\r\n\r\nconst method = function () { return measureBoundingBox(this); };\r\n\r\n_Shape__WEBPACK_IMPORTED_MODULE_1__[\"Shape\"].prototype.measureBoundingBox = method;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/measureBoundingBox.js?");

/***/ }),

/***/ "../../api/v1/minkowski.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/minkowski.js ***!
  \****************************************************************/
/*! exports provided: minkowski */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"minkowski\", function() { return minkowski; });\n/* harmony import */ var _jsxcad_algorithm_points__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-points */ \"../../algorithm/points/main.js\");\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n\r\n\r\n\r\n\r\n// TODO: Generalize for more operands?\r\nconst minkowski = (a, b) => {\r\n  const aPoints = [];\r\n  const bPoints = [];\r\n  a.eachPoint({}, point => aPoints.push(point));\r\n  b.eachPoint({}, point => bPoints.push(point));\r\n  return _Shape__WEBPACK_IMPORTED_MODULE_1__[\"Shape\"].fromPolygonsToSolid(Object(_jsxcad_algorithm_points__WEBPACK_IMPORTED_MODULE_0__[\"buildConvexHull\"])({}, Object(_jsxcad_algorithm_points__WEBPACK_IMPORTED_MODULE_0__[\"buildConvexMinkowskiSum\"])({}, aPoints, bPoints)));\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/minkowski.js?");

/***/ }),

/***/ "../../api/v1/polyhedron.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/polyhedron.js ***!
  \*****************************************************************/
/*! exports provided: polyhedron */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"polyhedron\", function() { return polyhedron; });\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n\r\n\r\n/**\r\n * polyhedron({      // openscad-like (e.g. pyramid)\r\n *   points: [ [10,10,0],[10,-10,0],[-10,-10,0],[-10,10,0], // the four points at base\r\n *             [0,0,10] ],                                  // the apex point\r\n *   triangles: [ [0,1,4],[1,2,4],[2,3,4],[3,0,4],          // each triangle side\r\n *                [1,0,3],[2,1,3] ]                         // two triangles for square base\r\n * });\r\n *\r\n */\r\n\r\nconst polyhedron = ({ points = [], triangles = [] }) => {\r\n  const polygons = [];\r\n\r\n  for (const triangle of triangles) {\r\n    polygons.push(triangle.map(point => points[point]));\r\n  }\r\n\r\n  return _Shape__WEBPACK_IMPORTED_MODULE_0__[\"Shape\"].fromPolygons(polygons);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/polyhedron.js?");

/***/ }),

/***/ "../../api/v1/readDst.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/readDst.js ***!
  \**************************************************************/
/*! exports provided: readDst */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"readDst\", function() { return readDst; });\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n/* harmony import */ var _jsxcad_convert_dst__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/convert-dst */ \"../../convert/dst/main.js\");\n/* harmony import */ var _jsxcad_sys__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/sys */ \"../../sys/main.js\");\n\r\n\r\n\r\n\r\nconst readDst = async ({ path }) => _Shape__WEBPACK_IMPORTED_MODULE_0__[\"Shape\"].fromGeometry(Object(_jsxcad_convert_dst__WEBPACK_IMPORTED_MODULE_1__[\"fromDst\"])({}, await Object(_jsxcad_sys__WEBPACK_IMPORTED_MODULE_2__[\"readFile\"])(path)));\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/readDst.js?");

/***/ }),

/***/ "../../api/v1/readJscad.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/readJscad.js ***!
  \****************************************************************/
/*! exports provided: readJscad */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"readJscad\", function() { return readJscad; });\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n/* harmony import */ var _jsxcad_sys__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/sys */ \"../../sys/main.js\");\n/* harmony import */ var _jsxcad_convert_jscad__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/convert-jscad */ \"../../convert/jscad/main.js\");\n\r\n\r\n\r\n\r\nconst readJscad = async ({ path, script }) => {\r\n  if (script === undefined) {\r\n    if (path !== undefined) {\r\n      script = await Object(_jsxcad_sys__WEBPACK_IMPORTED_MODULE_1__[\"readFile\"])(path);\r\n    }\r\n  }\r\n  const { getGeometry, getParameterDefinitions } = await Object(_jsxcad_convert_jscad__WEBPACK_IMPORTED_MODULE_2__[\"scriptToOperator\"])({}, script);\r\n  const jscadOp = (parameters) => {\r\n    return _Shape__WEBPACK_IMPORTED_MODULE_0__[\"Shape\"].fromGeometry(getGeometry(parameters));\r\n  };\r\n  jscadOp.getParameterDefinitions = getParameterDefinitions;\r\n  return jscadOp;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/readJscad.js?");

/***/ }),

/***/ "../../api/v1/rotate.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/rotate.js ***!
  \*************************************************************/
/*! exports provided: rotate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotate\", function() { return rotate; });\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n\r\n\r\n\r\n\r\nconst a2r = (angle) => angle * 0.017453292519943295;\r\n\r\nconst rotate = ([x = 0, y = 0, z = 0], shape) =>\r\n  shape.transform(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"multiply\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromZRotation\"])(a2r(z)), Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"multiply\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromYRotation\"])(a2r(y)), Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromXRotation\"])(a2r(x)))));\r\n\r\nconst method = function (angles) { return rotate(angles, this); };\r\n\r\n_Shape__WEBPACK_IMPORTED_MODULE_1__[\"Shape\"].prototype.rotate = method;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/rotate.js?");

/***/ }),

/***/ "../../api/v1/rotateX.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/rotateX.js ***!
  \**************************************************************/
/*! exports provided: rotateX */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateX\", function() { return rotateX; });\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n\r\n\r\n\r\nconst rotateX = (angle, shape) => shape.transform(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__[\"fromXRotation\"])(angle * 0.017453292519943295));\r\n\r\nconst method = function (angle) { return rotateX(angle, this); };\r\n\r\n_Shape__WEBPACK_IMPORTED_MODULE_0__[\"Shape\"].prototype.rotateX = method;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/rotateX.js?");

/***/ }),

/***/ "../../api/v1/rotateY.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/rotateY.js ***!
  \**************************************************************/
/*! exports provided: rotateY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateY\", function() { return rotateY; });\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n\r\n\r\n\r\nconst rotateY = (angle, shape) => shape.transform(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__[\"fromYRotation\"])(angle * 0.017453292519943295));\r\n\r\nconst method = function (angle) { return rotateY(angle, this); };\r\n\r\n_Shape__WEBPACK_IMPORTED_MODULE_0__[\"Shape\"].prototype.rotateY = method;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/rotateY.js?");

/***/ }),

/***/ "../../api/v1/rotateZ.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/rotateZ.js ***!
  \**************************************************************/
/*! exports provided: rotateZ */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateZ\", function() { return rotateZ; });\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n\r\n\r\n\r\nconst rotateZ = (angle, shape) => shape.transform(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__[\"fromZRotation\"])(angle * 0.017453292519943295));\r\n\r\nconst method = function (angle) { return rotateZ(angle, this); };\r\n\r\n_Shape__WEBPACK_IMPORTED_MODULE_0__[\"Shape\"].prototype.rotateZ = method;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/rotateZ.js?");

/***/ }),

/***/ "../../api/v1/scale.js":
/*!************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/scale.js ***!
  \************************************************************/
/*! exports provided: scale */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n\r\n\r\n\r\nconst scale = (factor, shape) => {\r\n  if (factor.length) {\r\n    const [x = 1, y = 1, z = 1] = factor;\r\n    return shape.transform(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__[\"fromScaling\"])([x, y, z]));\r\n  } else {\r\n    // scale(4)\r\n    return shape.transform(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__[\"fromScaling\"])([factor, factor, factor]));\r\n  }\r\n};\r\n\r\nconst method = function (factor) { return scale(factor, this); };\r\n\r\n_Shape__WEBPACK_IMPORTED_MODULE_0__[\"Shape\"].prototype.scale = method;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/scale.js?");

/***/ }),

/***/ "../../api/v1/sin.js":
/*!**********************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/sin.js ***!
  \**********************************************************/
/*! exports provided: sin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sin\", function() { return sin; });\nconst sin = (a) => Math.sin(a / 360 * Math.PI * 2);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/sin.js?");

/***/ }),

/***/ "../../api/v1/sphere.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/sphere.js ***!
  \*************************************************************/
/*! exports provided: sphere */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sphere\", function() { return sphere; });\n/* harmony import */ var _assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert */ \"../../api/v1/assert.js\");\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n/* harmony import */ var _jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-shape */ \"../../algorithm/shape/main.js\");\n\r\n\r\n\r\n\r\n\r\nconst buildSphere = ({ r = 1, fn = 32 }) => _Shape__WEBPACK_IMPORTED_MODULE_1__[\"Shape\"].fromPolygonsToSolid(Object(_jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_2__[\"buildRingSphere\"])({ resolution: fn })).scale([r, r, r]);\r\n\r\nconst decode = (params) => {\r\n  // sphere();\r\n  try {\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertEmpty\"])(params);\r\n    return {};\r\n  } catch (e) {}\r\n\r\n  // sphere(2);\r\n  try {\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertSingle\"])(params);\r\n    const [radius] = params;\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(radius);\r\n    return { r: radius };\r\n  } catch (e) {}\r\n\r\n  // sphere({ r: 10, fn: 100 });  // geodesic approach (icosahedron further triangulated)\r\n  try {\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertSingle\"])(params);\r\n    const { r = 1, fn = 32, center = false } = params[0];\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(r);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(fn);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertBoolean\"])(center);\r\n    return { fn: fn, r: r };\r\n  } catch (e) {}\r\n\r\n  throw Error(`Unsupported interface for sphere: ${JSON.stringify(params)}`);\r\n};\r\n\r\n/**\r\n *\r\n * sphere();                          // openscad like\r\n * sphere(1);\r\n * sphere({r: 2});                    // Note: center:true is default (unlike other primitives, as OpenSCAD)\r\n * sphere({r: 2, center: true});     // Note: OpenSCAD doesn't support center for sphere but we do\r\n * sphere({r: 2, center: [false, false, true]}); // individual axis center\r\n * sphere({r: 10, fn: 100 });\r\n * sphere({r: 10, fn: 100, type: 'geodesic'});  // geodesic approach (icosahedron further triangulated)\r\n */\r\nconst sphere = (...params) => buildSphere(decode(params));\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/sphere.js?");

/***/ }),

/***/ "../../api/v1/sqrt.js":
/*!***********************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/sqrt.js ***!
  \***********************************************************/
/*! exports provided: sqrt */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrt\", function() { return sqrt; });\nconst sqrt = Math.sqrt;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/sqrt.js?");

/***/ }),

/***/ "../../api/v1/square.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/square.js ***!
  \*************************************************************/
/*! exports provided: square */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"square\", function() { return square; });\n/* harmony import */ var _assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert */ \"../../api/v1/assert.js\");\n/* harmony import */ var _jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-shape */ \"../../algorithm/shape/main.js\");\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n\r\n\r\n\r\n\r\n\r\nconst buildSquare = ({ scale = [1, 1, 1] }) => {\r\n  const shape = _Shape__WEBPACK_IMPORTED_MODULE_2__[\"Shape\"].fromPathToZ0Surface(Object(_jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_1__[\"buildRegularPolygon\"])({ edges: 4 }));\r\n  const transformedShape = shape.rotateZ(45).scale(scale);\r\n  return transformedShape;\r\n};\r\n\r\nconst decode = (params) => {\r\n  const edgeScale = Object(_jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_1__[\"regularPolygonEdgeLengthToRadius\"])(1, 4);\r\n\r\n  // square({ size: [2,4], center: true }); // 2x4, center: false (default)\r\n  try {\r\n    const { size, center = false } = params[0];\r\n    const [length, width] = size;\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(length);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(width);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertBoolean\"])(center);\r\n    return { scale: [edgeScale * length, edgeScale * width] };\r\n  } catch (e) {}\r\n\r\n  // square([2,4]}); // 2x4, center: false (default)\r\n  try {\r\n    const [length, width] = params[0];\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(length);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(width);\r\n    return { scale: [edgeScale * length, edgeScale * width] };\r\n  } catch (e) {};\r\n\r\n  // square(1); // 2x4, center: false (default)\r\n  try {\r\n    const [length] = params;\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(length);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertSingle\"])(params);\r\n    return { scale: [edgeScale * length, edgeScale * length] };\r\n  } catch (e) {};\r\n\r\n  // square()\r\n  try {\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertEmpty\"])(params);\r\n    return {};\r\n  } catch (e) {};\r\n\r\n  throw Error(`Unsupported interface for square: ${JSON.stringify(params)}`);\r\n};\r\n\r\n/**\r\n *\r\n * square();                                   // openscad like\r\n * square(1);                                  // 1x1\r\n * square([2,3]);                              // 2x3\r\n * square({size: [2,4], center: true});        // 2x4, center: false (default)\r\n *\r\n */\r\nconst square = (...params) => buildSquare(decode(params));\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/square.js?");

/***/ }),

/***/ "../../api/v1/svgPath.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/svgPath.js ***!
  \**************************************************************/
/*! exports provided: svgPath */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"svgPath\", function() { return svgPath; });\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n/* harmony import */ var _jsxcad_convert_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/convert-svg */ \"../../convert/svg/main.js\");\n\r\n\r\n\r\nconst svgPath = (options = {}, svgPath) =>\r\n  _Shape__WEBPACK_IMPORTED_MODULE_0__[\"Shape\"].fromGeometry(Object(_jsxcad_convert_svg__WEBPACK_IMPORTED_MODULE_1__[\"fromSvgPath\"])(options, svgPath));\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/svgPath.js?");

/***/ }),

/***/ "../../api/v1/tetrahedron.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/tetrahedron.js ***!
  \******************************************************************/
/*! exports provided: tetrahedron */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tetrahedron\", function() { return tetrahedron; });\n/* harmony import */ var _assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert */ \"../../api/v1/assert.js\");\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n/* harmony import */ var _jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-shape */ \"../../algorithm/shape/main.js\");\n\r\n\r\n\r\n\r\n\r\nconst buildTetrahedron = ({ r = 1 }) => _Shape__WEBPACK_IMPORTED_MODULE_1__[\"Shape\"].fromPolygons(Object(_jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_2__[\"buildRegularTetrahedron\"])({})).scale([r, r, r]);\r\n\r\nconst decode = (params) => {\r\n  // sphere();\r\n  try {\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertEmpty\"])(params);\r\n    return {};\r\n  } catch (e) {}\r\n\r\n  // sphere(2);\r\n  try {\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertSingle\"])(params);\r\n    const [radius] = params;\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(radius);\r\n    return { r: radius };\r\n  } catch (e) {}\r\n\r\n  // sphere({ r: 10, fn: 100 });  // geodesic approach (icosahedron further triangulated)\r\n  try {\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertSingle\"])(params);\r\n    const { r = 1, fn = 32, center = false } = params[0];\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(r);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertNumber\"])(fn);\r\n    Object(_assert__WEBPACK_IMPORTED_MODULE_0__[\"assertBoolean\"])(center);\r\n    return { fn: fn, r: r };\r\n  } catch (e) {}\r\n\r\n  throw Error(`Unsupported interface for sphere: ${JSON.stringify(params)}`);\r\n};\r\n\r\n/**\r\n *\r\n * sphere();                          // openscad like\r\n * sphere(1);\r\n * sphere({r: 2});                    // Note: center:true is default (unlike other primitives, as OpenSCAD)\r\n * sphere({r: 2, center: true});     // Note: OpenSCAD doesn't support center for sphere but we do\r\n * sphere({r: 2, center: [false, false, true]}); // individual axis center\r\n * sphere({r: 10, fn: 100 });\r\n * sphere({r: 10, fn: 100, type: 'geodesic'});  // geodesic approach (icosahedron further triangulated)\r\n */\r\nconst tetrahedron = (...params) => buildTetrahedron(decode(params));\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/tetrahedron.js?");

/***/ }),

/***/ "../../api/v1/text.js":
/*!***********************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/text.js ***!
  \***********************************************************/
/*! exports provided: loadFont, text */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loadFont\", function() { return loadFont; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"text\", function() { return text; });\n/* harmony import */ var _jsxcad_algorithm_text__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-text */ \"../../algorithm/text/main.js\");\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n\r\n\r\n\r\n\r\nconst loadFont = ({ path }) => Object(_jsxcad_algorithm_text__WEBPACK_IMPORTED_MODULE_0__[\"pathnameToFont\"])(path);\r\n\r\n// We do an early union to handle overlapping text.\r\n\r\nconst text = ({ font, curveSegments }, text) =>\r\n  _Shape__WEBPACK_IMPORTED_MODULE_1__[\"Shape\"].fromGeometry(Object(_jsxcad_algorithm_text__WEBPACK_IMPORTED_MODULE_0__[\"textToSurfaces\"])({ font: font, curveSegments }, text));\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/text.js?");

/***/ }),

/***/ "../../api/v1/translate.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/translate.js ***!
  \****************************************************************/
/*! exports provided: translate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"translate\", function() { return translate; });\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n\r\n\r\n\r\n\r\nconst translate = ([x = 0, y = 0, z = 0], shape) => {\r\n  return shape.transform(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__[\"fromTranslation\"])([x, y, z]));\r\n};\r\n\r\nconst method = function (vector) {\r\n  return translate(vector, this);\r\n};\r\n\r\n_Shape__WEBPACK_IMPORTED_MODULE_0__[\"Shape\"].prototype.translate = method;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/translate.js?");

/***/ }),

/***/ "../../api/v1/union.js":
/*!************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/union.js ***!
  \************************************************************/
/*! exports provided: union */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"union\", function() { return union; });\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n\r\n\r\nconst union = (...params) => {\r\n  switch (params.length) {\r\n    case 0: {\r\n      return _Shape__WEBPACK_IMPORTED_MODULE_0__[\"Shape\"].fromGeometry({ assembly: [] });\r\n    }\r\n    case 1: {\r\n      return params[0];\r\n    }\r\n    default: {\r\n      return Object(_Shape__WEBPACK_IMPORTED_MODULE_0__[\"unionLazily\"])(...params);\r\n    }\r\n  }\r\n};\r\n\r\nconst method = function (...shapes) { return union(this, ...shapes); };\r\n\r\n_Shape__WEBPACK_IMPORTED_MODULE_0__[\"Shape\"].prototype.union = method;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/union.js?");

/***/ }),

/***/ "../../api/v1/writePaths.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/writePaths.js ***!
  \*****************************************************************/
/*! exports provided: writePaths */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"writePaths\", function() { return writePaths; });\n/* harmony import */ var _jsxcad_sys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/sys */ \"../../sys/main.js\");\n\r\n\r\nconst writePaths = ({ path }, ...paths) => {\r\n  Object(_jsxcad_sys__WEBPACK_IMPORTED_MODULE_0__[\"writeFileSync\"])(path, '', { paths: paths });\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/writePaths.js?");

/***/ }),

/***/ "../../api/v1/writePdf.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/writePdf.js ***!
  \***************************************************************/
/*! exports provided: writePdf */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"writePdf\", function() { return writePdf; });\n/* harmony import */ var _jsxcad_convert_pdf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/convert-pdf */ \"../../convert/pdf/main.js\");\n/* harmony import */ var _jsxcad_sys__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/sys */ \"../../sys/main.js\");\n\r\n\r\n\r\nconst writePdf = ({ path }, shape) => {\r\n  const geometry = shape.toDisjointGeometry();\r\n  Object(_jsxcad_sys__WEBPACK_IMPORTED_MODULE_1__[\"writeFileSync\"])(path, () => Object(_jsxcad_convert_pdf__WEBPACK_IMPORTED_MODULE_0__[\"toPdf\"])({}, geometry), geometry);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/writePdf.js?");

/***/ }),

/***/ "../../api/v1/writeStl.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/writeStl.js ***!
  \***************************************************************/
/*! exports provided: writeStl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"writeStl\", function() { return writeStl; });\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n/* harmony import */ var _assemble__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assemble */ \"../../api/v1/assemble.js\");\n/* harmony import */ var _jsxcad_convert_stl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/convert-stl */ \"../../convert/stl/main.js\");\n/* harmony import */ var _jsxcad_sys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jsxcad/sys */ \"../../sys/main.js\");\n\r\n\r\n\r\n\r\n\r\nconst writeStl = async ({ path, needIsWatertight = true }, ...shapes) => {\r\n  const geometry = Object(_assemble__WEBPACK_IMPORTED_MODULE_1__[\"assemble\"])(...shapes).toDisjointGeometry();\r\n  await Object(_jsxcad_sys__WEBPACK_IMPORTED_MODULE_3__[\"writeFileSync\"])(path, () => Object(_jsxcad_convert_stl__WEBPACK_IMPORTED_MODULE_2__[\"toStla\"])({ needIsWatertight }, geometry), geometry);\r\n};\r\n\r\nconst method = function (options = {}) { writeStl(options, this); return this; };\r\n\r\n_Shape__WEBPACK_IMPORTED_MODULE_0__[\"Shape\"].prototype.writeStl = method;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/writeStl.js?");

/***/ }),

/***/ "../../api/v1/writeSvg.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/writeSvg.js ***!
  \***************************************************************/
/*! exports provided: writeSvg */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"writeSvg\", function() { return writeSvg; });\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Shape */ \"../../api/v1/Shape.js\");\n/* harmony import */ var _jsxcad_convert_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/convert-svg */ \"../../convert/svg/main.js\");\n/* harmony import */ var _jsxcad_sys__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/sys */ \"../../sys/main.js\");\n\r\n\r\n\r\n\r\nconst writeSvg = async ({ path }, shape) => {\r\n  const disjoint = shape.toDisjointGeometry();\r\n  await Object(_jsxcad_sys__WEBPACK_IMPORTED_MODULE_2__[\"writeFileSync\"])(path, () => Object(_jsxcad_convert_svg__WEBPACK_IMPORTED_MODULE_1__[\"toSvg\"])({}, disjoint), disjoint);\r\n};\r\n\r\nconst method = function (options = {}) { writeSvg(options, this); return this; };\r\n\r\n_Shape__WEBPACK_IMPORTED_MODULE_0__[\"Shape\"].prototype.writeSvg = method;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/writeSvg.js?");

/***/ }),

/***/ "../../api/v1/writeThreejs.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/writeThreejs.js ***!
  \*******************************************************************/
/*! exports provided: writeThreejsPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"writeThreejsPage\", function() { return writeThreejsPage; });\n/* harmony import */ var _jsxcad_convert_threejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/convert-threejs */ \"../../convert/threejs/main.js\");\n/* harmony import */ var _jsxcad_sys__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/sys */ \"../../sys/main.js\");\n\r\n\r\n\r\nconst writeThreejsPage = (options, shape) => {\r\n  Object(_jsxcad_sys__WEBPACK_IMPORTED_MODULE_1__[\"writeFileSync\"])(options.path,\r\n                () => Object(_jsxcad_convert_threejs__WEBPACK_IMPORTED_MODULE_0__[\"toThreejsPage\"])(options, shape.toDisjointGeometry()),\r\n                shape.toDisjointGeometry());\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/api/v1/writeThreejs.js?");

/***/ }),

/***/ "../../convert/dst/dst.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/dst/dst.js ***!
  \***************************************************************/
/*! exports provided: Y_ADD_1, Y_SUB_1, Y_ADD_9, Y_SUB_9, X_SUB_9, X_ADD_9, X_SUB_1, X_ADD_1, Y_ADD_3, Y_SUB_3, Y_ADD_27, Y_SUB_27, X_SUB_27, X_ADD_27, X_SUB_3, X_ADD_3, JUMP_STITCH, PAUSE, Y_ADD_81, Y_SUB_81, X_SUB_81, X_ADD_81, SYNC_1, SYNC_2, END, JUMP_LIMIT */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Y_ADD_1\", function() { return Y_ADD_1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Y_SUB_1\", function() { return Y_SUB_1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Y_ADD_9\", function() { return Y_ADD_9; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Y_SUB_9\", function() { return Y_SUB_9; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"X_SUB_9\", function() { return X_SUB_9; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"X_ADD_9\", function() { return X_ADD_9; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"X_SUB_1\", function() { return X_SUB_1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"X_ADD_1\", function() { return X_ADD_1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Y_ADD_3\", function() { return Y_ADD_3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Y_SUB_3\", function() { return Y_SUB_3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Y_ADD_27\", function() { return Y_ADD_27; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Y_SUB_27\", function() { return Y_SUB_27; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"X_SUB_27\", function() { return X_SUB_27; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"X_ADD_27\", function() { return X_ADD_27; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"X_SUB_3\", function() { return X_SUB_3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"X_ADD_3\", function() { return X_ADD_3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JUMP_STITCH\", function() { return JUMP_STITCH; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PAUSE\", function() { return PAUSE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Y_ADD_81\", function() { return Y_ADD_81; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Y_SUB_81\", function() { return Y_SUB_81; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"X_SUB_81\", function() { return X_SUB_81; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"X_ADD_81\", function() { return X_ADD_81; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SYNC_1\", function() { return SYNC_1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SYNC_2\", function() { return SYNC_2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"END\", function() { return END; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JUMP_LIMIT\", function() { return JUMP_LIMIT; });\nconst Y_ADD_1 = 1 << 23;\r\nconst Y_SUB_1 = 1 << 22;\r\nconst Y_ADD_9 = 1 << 21;\r\nconst Y_SUB_9 = 1 << 20;\r\nconst X_SUB_9 = 1 << 19;\r\nconst X_ADD_9 = 1 << 18;\r\nconst X_SUB_1 = 1 << 17;\r\nconst X_ADD_1 = 1 << 16;\r\nconst Y_ADD_3 = 1 << 15;\r\nconst Y_SUB_3 = 1 << 14;\r\nconst Y_ADD_27 = 1 << 13;\r\nconst Y_SUB_27 = 1 << 12;\r\nconst X_SUB_27 = 1 << 11;\r\nconst X_ADD_27 = 1 << 10;\r\nconst X_SUB_3 = 1 << 9;\r\nconst X_ADD_3 = 1 << 8;\r\nconst JUMP_STITCH = 1 << 7;\r\nconst PAUSE = 1 << 6;\r\nconst Y_ADD_81 = 1 << 5;\r\nconst Y_SUB_81 = 1 << 4;\r\nconst X_SUB_81 = 1 << 3;\r\nconst X_ADD_81 = 1 << 2;\r\nconst SYNC_1 = 1 << 1;\r\nconst SYNC_2 = 1 << 0;\r\nconst END = (Y_ADD_81 | Y_SUB_81);\r\nconst JUMP_LIMIT = 121;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/dst/dst.js?");

/***/ }),

/***/ "../../convert/dst/fromDst.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/dst/fromDst.js ***!
  \*******************************************************************/
/*! exports provided: createByteFetcher, fetchHeader, fetchStitches, fromDst */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createByteFetcher\", function() { return createByteFetcher; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fetchHeader\", function() { return fetchHeader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fetchStitches\", function() { return fetchStitches; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromDst\", function() { return fromDst; });\n/* harmony import */ var _dst__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dst */ \"../../convert/dst/dst.js\");\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n\r\n\r\n\r\n\r\nconst createByteFetcher = (bytes) => {\r\n  let bytesRead = 0;\r\n  const byteFetcher = (length) => {\r\n    const fetched = bytes.slice(bytesRead, bytesRead += length);\r\n    return fetched;\r\n  };\r\n  return byteFetcher;\r\n};\r\n\r\nconst fetchHeader = (options = {}, fetchBytes) => {\r\n  function readBytes (prefix, field, converter, start, length, flag) {\r\n    let bytes = fetchBytes(length);\r\n    if (field !== '') {\r\n      options[field] = converter(prefix, bytes);\r\n    }\r\n  }\r\n\r\n  function asString (prefix, bytes) {\r\n    return Buffer.from(bytes).toString().slice(prefix.length).trim();\r\n  }\r\n\r\n  const asNumber = (prefix, bytes) => {\r\n    const number = parseInt(asString(prefix, bytes));\r\n    if (isNaN(number)) {\r\n      return undefined;\r\n    } else {\r\n      return number;\r\n    }\r\n  };\r\n\r\n  readBytes('LA:', 'label', asString, 0, 20); // Label\r\n  readBytes('ST:', 'stitchCount', asNumber, 20, 11);\r\n  readBytes('CO:', 'colorCount', asNumber, 31, 7);\r\n  readBytes('+X:', 'positiveX', asNumber, 38, 9);\r\n  readBytes('-X:', 'negativeX', asNumber, 47, 9);\r\n  readBytes('+Y:', 'positiveY', asNumber, 56, 9);\r\n  readBytes('-Y:', 'negativeY', asNumber, 65, 9);\r\n  readBytes('AX:', 'deltaX', asNumber, 74, 10, 'sign');\r\n  readBytes('AY:', 'deltaY', asNumber, 84, 10, 'sign');\r\n  readBytes('MX:', 'previousX', asNumber, 94, 10, 'sign');\r\n  readBytes('MY:', 'previousY', asNumber, 104, 10, 'sign');\r\n  readBytes('PD:', 'previousFile', asNumber, 114, 10);\r\n  readBytes('\\x1a   ', '', '', 124, 4); // end of header\r\n  readBytes('', '', '', 128, 384); // block padding\r\n\r\n  return options;\r\n};\r\n\r\nconst fetchStitch = (fetchBytes) => {\r\n  let bytes = fetchBytes(3);\r\n  let r = (bytes[0] << 16) | (bytes[1] << 8) | (bytes[2] << 0);\r\n\r\n  let x = 0;\r\n  if (r & _dst__WEBPACK_IMPORTED_MODULE_0__[\"X_ADD_81\"]) x += 81;\r\n  if (r & _dst__WEBPACK_IMPORTED_MODULE_0__[\"X_SUB_81\"]) x -= 81;\r\n  if (r & _dst__WEBPACK_IMPORTED_MODULE_0__[\"X_ADD_27\"]) x += 27;\r\n  if (r & _dst__WEBPACK_IMPORTED_MODULE_0__[\"X_SUB_27\"]) x -= 27;\r\n  if (r & _dst__WEBPACK_IMPORTED_MODULE_0__[\"X_ADD_9\"]) x += 9;\r\n  if (r & _dst__WEBPACK_IMPORTED_MODULE_0__[\"X_SUB_9\"]) x -= 9;\r\n  if (r & _dst__WEBPACK_IMPORTED_MODULE_0__[\"X_ADD_3\"]) x += 3;\r\n  if (r & _dst__WEBPACK_IMPORTED_MODULE_0__[\"X_SUB_3\"]) x -= 3;\r\n  if (r & _dst__WEBPACK_IMPORTED_MODULE_0__[\"X_ADD_1\"]) x += 1;\r\n  if (r & _dst__WEBPACK_IMPORTED_MODULE_0__[\"X_SUB_1\"]) x -= 1;\r\n\r\n  let y = 0;\r\n  if (r & _dst__WEBPACK_IMPORTED_MODULE_0__[\"Y_ADD_81\"]) y += 81;\r\n  if (r & _dst__WEBPACK_IMPORTED_MODULE_0__[\"Y_SUB_81\"]) y -= 81;\r\n  if (r & _dst__WEBPACK_IMPORTED_MODULE_0__[\"Y_ADD_27\"]) y += 27;\r\n  if (r & _dst__WEBPACK_IMPORTED_MODULE_0__[\"Y_SUB_27\"]) y -= 27;\r\n  if (r & _dst__WEBPACK_IMPORTED_MODULE_0__[\"Y_ADD_9\"]) y += 9;\r\n  if (r & _dst__WEBPACK_IMPORTED_MODULE_0__[\"Y_SUB_9\"]) y -= 9;\r\n  if (r & _dst__WEBPACK_IMPORTED_MODULE_0__[\"Y_ADD_3\"]) y += 3;\r\n  if (r & _dst__WEBPACK_IMPORTED_MODULE_0__[\"Y_SUB_3\"]) y -= 3;\r\n  if (r & _dst__WEBPACK_IMPORTED_MODULE_0__[\"Y_ADD_1\"]) y += 1;\r\n  if (r & _dst__WEBPACK_IMPORTED_MODULE_0__[\"Y_SUB_1\"]) y -= 1;\r\n\r\n  let flag;\r\n  if ((r & (_dst__WEBPACK_IMPORTED_MODULE_0__[\"END\"] | _dst__WEBPACK_IMPORTED_MODULE_0__[\"JUMP_STITCH\"] | _dst__WEBPACK_IMPORTED_MODULE_0__[\"PAUSE\"])) === (_dst__WEBPACK_IMPORTED_MODULE_0__[\"END\"] | _dst__WEBPACK_IMPORTED_MODULE_0__[\"JUMP_STITCH\"] | _dst__WEBPACK_IMPORTED_MODULE_0__[\"PAUSE\"])) {\r\n    flag = 'end';\r\n  } else if ((r & (_dst__WEBPACK_IMPORTED_MODULE_0__[\"JUMP_STITCH\"] | _dst__WEBPACK_IMPORTED_MODULE_0__[\"PAUSE\"])) === (_dst__WEBPACK_IMPORTED_MODULE_0__[\"JUMP_STITCH\"] | _dst__WEBPACK_IMPORTED_MODULE_0__[\"PAUSE\"])) {\r\n    flag = 'color_change';\r\n  } else if (r & _dst__WEBPACK_IMPORTED_MODULE_0__[\"JUMP_STITCH\"]) {\r\n    flag = 'jump';\r\n  } else {\r\n    flag = 'stitch';\r\n  }\r\n  return [x, y, flag];\r\n};\r\n\r\nconst fetchStitches = ({ previousX = 0, previousY = 0 }, fetchBytes) => {\r\n  let x = previousX;\r\n  let y = previousY;\r\n\r\n  const paths = [];\r\n  let path = [null, [previousX, previousY]];\r\n\r\n  const finishPath = () => {\r\n    if (path.length > 2) {\r\n      paths.push(path);\r\n    }\r\n    path = [null];\r\n  };\r\n\r\n  for (;;) {\r\n    const [dx, dy, flag] = fetchStitch(fetchBytes);\r\n\r\n    x += dx;\r\n    y += dy;\r\n\r\n    switch (flag) {\r\n      default:\r\n      case 'end': {\r\n        finishPath();\r\n        return paths;\r\n      }\r\n      case 'color_change': {\r\n        finishPath();\r\n        path.push([x, y]);\r\n        break;\r\n      }\r\n      case 'jump': {\r\n        finishPath();\r\n        break;\r\n      }\r\n      case 'stitch': {\r\n        path.push([x, y]);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst fromDst = (options = {}, data) => {\r\n  const fetcher = createByteFetcher(data);\r\n  const header = fetchHeader({}, fetcher);\r\n  return { paths: Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__[\"scale\"])([0.1, 0.1, 0.1], fetchStitches(header, fetcher)) };\r\n};\r\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/buffer/index.js */ \"../../node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/dst/fromDst.js?");

/***/ }),

/***/ "../../convert/dst/main.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/dst/main.js ***!
  \****************************************************************/
/*! exports provided: fromDst */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _fromDst__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fromDst */ \"../../convert/dst/fromDst.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromDst\", function() { return _fromDst__WEBPACK_IMPORTED_MODULE_0__[\"fromDst\"]; });\n\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/dst/main.js?");

/***/ }),

/***/ "../../convert/jscad/api.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/api.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const api = __webpack_require__(/*! ./src/api/index */ \"../../convert/jscad/src/api/index.js\");\r\n// const csg = require('./csg')\r\n\r\nmodule.exports = api; // {api, csg}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/api.js?");

/***/ }),

/***/ "../../convert/jscad/csg.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/csg.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\r\n## License\r\n\r\nCopyright (c) 2014 bebbi (elghatta@gmail.com)\r\nCopyright (c) 2013 Eduard Bespalov (edwbes@gmail.com)\r\nCopyright (c) 2012 Joost Nieuwenhuijse (joost@newhouse.nl)\r\nCopyright (c) 2011 Evan Wallace (http://evanw.github.com/csg.js/)\r\nCopyright (c) 2012 Alexandre Girard (https://github.com/alx)\r\n\r\nAll code released under MIT license\r\n\r\n## Overview\r\n\r\nFor an overview of the CSG process see the original csg.js code:\r\nhttp://evanw.github.com/csg.js/\r\n\r\nCSG operations through BSP trees suffer from one problem: heavy fragmentation\r\nof polygons. If two CSG solids of n polygons are unified, the resulting solid may have\r\nin the order of n*n polygons, because each polygon is split by the planes of all other\r\npolygons. After a few operations the number of polygons explodes.\r\n\r\nThis version of CSG.js solves the problem in 3 ways:\r\n\r\n1. Every polygon split is recorded in a tree (CSG.PolygonTreeNode). This is a separate\r\ntree, not to be confused with the CSG tree. If a polygon is split into two parts but in\r\nthe end both fragments have not been discarded by the CSG operation, we can retrieve\r\nthe original unsplit polygon from the tree, instead of the two fragments.\r\n\r\nThis does not completely solve the issue though: if a polygon is split multiple times\r\nthe number of fragments depends on the order of subsequent splits, and we might still\r\nend up with unncessary splits:\r\nSuppose a polygon is first split into A and B, and then into A1, B1, A2, B2. Suppose B2 is\r\ndiscarded. We will end up with 2 polygons: A and B1. Depending on the actual split boundaries\r\nwe could still have joined A and B1 into one polygon. Therefore a second approach is used as well:\r\n\r\n2. After CSG operations all coplanar polygon fragments are joined by a retesselating\r\noperation. See CSG.reTesselated(). Retesselation is done through a\r\nlinear sweep over the polygon surface. The sweep line passes over the y coordinates\r\nof all vertices in the polygon. Polygons are split at each sweep line, and the fragments\r\nare joined horizontally and vertically into larger polygons (making sure that we\r\nwill end up with convex polygons).\r\nThis still doesn't solve the problem completely: due to floating point imprecisions\r\nwe may end up with small gaps between polygons, and polygons may not be exactly coplanar\r\nanymore, and as a result the retesselation algorithm may fail to join those polygons.\r\nTherefore:\r\n\r\n3. A canonicalization algorithm is implemented: it looks for vertices that have\r\napproximately the same coordinates (with a certain tolerance, say 1e-5) and replaces\r\nthem with the same vertex. If polygons share a vertex they will actually point to the\r\nsame CSG.Vertex instance. The same is done for polygon planes. See CSG.canonicalized().\r\n\r\nPerformance improvements to the original CSG.js:\r\n\r\nReplaced the flip() and invert() methods by flipped() and inverted() which don't\r\nmodify the source object. This allows to get rid of all clone() calls, so that\r\nmultiple polygons can refer to the same CSG.Plane instance etc.\r\n\r\nThe original union() used an extra invert(), clipTo(), invert() sequence just to remove the\r\ncoplanar front faces from b; this is now combined in a single b.clipTo(a, true) call.\r\n\r\nDetection whether a polygon is in front or in back of a plane: for each polygon\r\nwe are caching the coordinates of the bounding sphere. If the bounding sphere is\r\nin front or in back of the plane we don't have to check the individual vertices\r\nanymore.\r\n\r\nOther additions to the original CSG.js:\r\n\r\nCSG.Vector class has been renamed into CSG.Vector3D\r\n\r\nClasses for 3D lines, 2D vectors, 2D lines, and methods to find the intersection of\r\na line and a plane etc.\r\n\r\nTransformations: CSG.transform(), CSG.translate(), CSG.rotate(), CSG.scale()\r\n\r\nExpanding or contracting a solid: CSG.expand() and CSG.contract(). Creates nice\r\nsmooth corners.\r\n\r\nThe vertex normal has been removed since it complicates retesselation. It's not needed\r\nfor solid CAD anyway.\r\n\r\n*/\r\n\r\nconst { addTransformationMethodsToPrototype } = __webpack_require__(/*! ./src/core/mutators */ \"../../convert/jscad/src/core/mutators.js\");\r\nlet CSG = __webpack_require__(/*! ./src/core/CSG */ \"../../convert/jscad/src/core/CSG.js\");\r\nlet CAG = __webpack_require__(/*! ./src/core/CAG */ \"../../convert/jscad/src/core/CAG.js\");\r\n\r\n// FIXME: how many are actual usefull to be exposed as API ?? looks like a code smell\r\nconst { _CSGDEBUG,\r\n        defaultResolution2D,\r\n        defaultResolution3D,\r\n        EPS,\r\n        angleEPS,\r\n        areaEPS,\r\n        all,\r\n        top,\r\n        bottom,\r\n        left,\r\n        right,\r\n        front,\r\n        back,\r\n        staticTag,\r\n        getTag } = __webpack_require__(/*! ./src/core/constants */ \"../../convert/jscad/src/core/constants.js\");\r\n\r\nCSG._CSGDEBUG = _CSGDEBUG;\r\nCSG.defaultResolution2D = defaultResolution2D;\r\nCSG.defaultResolution3D = defaultResolution3D;\r\nCSG.EPS = EPS;\r\nCSG.angleEPS = angleEPS;\r\nCSG.areaEPS = areaEPS;\r\nCSG.all = all;\r\nCSG.top = top;\r\nCSG.bottom = bottom;\r\nCSG.left = left;\r\nCSG.right = right;\r\nCSG.front = front;\r\nCSG.back = back;\r\nCSG.staticTag = staticTag;\r\nCSG.getTag = getTag;\r\n\r\n// eek ! all this is kept for backwards compatibility...for now\r\nCSG.Vector2D = __webpack_require__(/*! ./src/core/math/Vector2 */ \"../../convert/jscad/src/core/math/Vector2.js\");\r\nCSG.Vector3D = __webpack_require__(/*! ./src/core/math/Vector3 */ \"../../convert/jscad/src/core/math/Vector3.js\");\r\nCSG.Vertex = __webpack_require__(/*! ./src/core/math/Vertex3 */ \"../../convert/jscad/src/core/math/Vertex3.js\");\r\nCAG.Vertex = __webpack_require__(/*! ./src/core/math/Vertex2 */ \"../../convert/jscad/src/core/math/Vertex2.js\");\r\nCSG.Plane = __webpack_require__(/*! ./src/core/math/Plane */ \"../../convert/jscad/src/core/math/Plane.js\");\r\nCSG.Polygon = __webpack_require__(/*! ./src/core/math/Polygon3 */ \"../../convert/jscad/src/core/math/Polygon3.js\");\r\nCSG.Polygon2D = __webpack_require__(/*! ./src/core/math/Polygon2 */ \"../../convert/jscad/src/core/math/Polygon2.js\");\r\nCSG.Line2D = __webpack_require__(/*! ./src/core/math/Line2 */ \"../../convert/jscad/src/core/math/Line2.js\");\r\nCSG.Line3D = __webpack_require__(/*! ./src/core/math/Line3 */ \"../../convert/jscad/src/core/math/Line3.js\");\r\nCSG.Path2D = __webpack_require__(/*! ./src/core/math/Path2 */ \"../../convert/jscad/src/core/math/Path2.js\");\r\nCSG.OrthoNormalBasis = __webpack_require__(/*! ./src/core/math/OrthoNormalBasis */ \"../../convert/jscad/src/core/math/OrthoNormalBasis.js\");\r\nCSG.Matrix4x4 = __webpack_require__(/*! ./src/core/math/Matrix4 */ \"../../convert/jscad/src/core/math/Matrix4.js\");\r\n\r\nCAG.Side = __webpack_require__(/*! ./src/core/math/Side */ \"../../convert/jscad/src/core/math/Side.js\");\r\n\r\nCSG.Connector = __webpack_require__(/*! ./src/core/connectors */ \"../../convert/jscad/src/core/connectors.js\").Connector;\r\nCSG.ConnectorList = __webpack_require__(/*! ./src/core/connectors */ \"../../convert/jscad/src/core/connectors.js\").ConnectorList;\r\nCSG.Properties = __webpack_require__(/*! ./src/core/Properties */ \"../../convert/jscad/src/core/Properties.js\");\r\n\r\nconst { circle, ellipse, rectangle, roundedRectangle } = __webpack_require__(/*! ./src/api/primitives2d */ \"../../convert/jscad/src/api/primitives2d.js\");\r\nconst { sphere, cube, roundedCube, cylinder, roundedCylinder,\r\n        cylinderElliptic, polyhedron } = __webpack_require__(/*! ./src/api/primitives3d */ \"../../convert/jscad/src/api/primitives3d.js\");\r\n\r\nCSG.sphere = sphere;\r\nCSG.cube = cube;\r\nCSG.roundedCube = roundedCube;\r\nCSG.cylinder = cylinder;\r\nCSG.roundedCylinder = roundedCylinder;\r\nCSG.cylinderElliptic = cylinderElliptic;\r\nCSG.polyhedron = polyhedron;\r\n\r\nCAG.circle = circle;\r\nCAG.ellipse = ellipse;\r\nCAG.rectangle = rectangle;\r\nCAG.roundedRectangle = roundedRectangle;\r\n\r\n// injecting factories\r\nconst { fromPolygons, fromCompactBinary, fromObject, fromSlices } = __webpack_require__(/*! ./src/core/CSGFactories */ \"../../convert/jscad/src/core/CSGFactories.js\");\r\nCSG.fromCompactBinary = fromCompactBinary;\r\nCSG.fromObject = fromObject;\r\nCSG.fromSlices = fromSlices;\r\nCSG.fromPolygons = fromPolygons;\r\n\r\nCSG.toPointCloud = __webpack_require__(/*! ./src/api/debugHelpers */ \"../../convert/jscad/src/api/debugHelpers.js\").toPointCloud;\r\n\r\nconst CAGFactories = __webpack_require__(/*! ./src/core/CAGFactories */ \"../../convert/jscad/src/core/CAGFactories.js\");\r\nCAG.fromSides = CAGFactories.fromSides;\r\nCAG.fromObject = CAGFactories.fromObject;\r\nCAG.fromPoints = CAGFactories.fromPoints;\r\nCAG.fromPointsNoCheck = CAGFactories.fromPointsNoCheck;\r\nCAG.fromPath2 = CAGFactories.fromPath2;\r\nCAG.fromFakeCSG = CAGFactories.fromFakeCSG;\r\nCAG.fromCompactBinary = CAGFactories.fromCompactBinary;\r\n\r\n/// ////////////////////////////////////\r\n// option parsers\r\nconst optionsParsers = __webpack_require__(/*! ./src/api/optionParsers */ \"../../convert/jscad/src/api/optionParsers.js\");\r\n\r\n// ////////////////////////////////////\r\naddTransformationMethodsToPrototype(CSG.prototype);\r\naddTransformationMethodsToPrototype(CSG.Vector2D.prototype);\r\naddTransformationMethodsToPrototype(CSG.Vector3D.prototype);\r\naddTransformationMethodsToPrototype(CSG.Vertex.prototype);\r\naddTransformationMethodsToPrototype(CSG.Plane.prototype);\r\naddTransformationMethodsToPrototype(CSG.Polygon.prototype);\r\naddTransformationMethodsToPrototype(CSG.Line2D.prototype);\r\naddTransformationMethodsToPrototype(CSG.Line3D.prototype);\r\naddTransformationMethodsToPrototype(CSG.Path2D.prototype);\r\naddTransformationMethodsToPrototype(CSG.OrthoNormalBasis.prototype);\r\naddTransformationMethodsToPrototype(CSG.Connector.prototype);\r\n\r\naddTransformationMethodsToPrototype(CAG.prototype);\r\naddTransformationMethodsToPrototype(CAG.Side.prototype);\r\naddTransformationMethodsToPrototype(CAG.Vertex.prototype);\r\n\r\nCSG.parseOptionAs2DVector = optionsParsers.parseOptionAs3DVector;\r\nCSG.parseOptionAs3DVector = optionsParsers.parseOptionAs3DVector;\r\nCSG.parseOptionAs3DVectorList = optionsParsers.parseOptionAs3DVectorList;\r\nCSG.parseOptionAsBool = optionsParsers.parseOptionAsBool;\r\nCSG.parseOptionAsFloat = optionsParsers.parseOptionAsFloat;\r\nCSG.parseOptionAsInt = optionsParsers.parseOptionAsInt;\r\n// this is needed for now, otherwise there are missing features in Polygon2D\r\nCSG.Polygon2D.prototype = CAG.prototype;\r\n\r\n// utilities\r\nconst { isCAG, isCSG } = __webpack_require__(/*! ./src/core/utils */ \"../../convert/jscad/src/core/utils.js\");\r\n\r\nconst globalApi = Object.assign({}, { CSG, CAG }, optionsParsers, { isCAG, isCSG });\r\n\r\nmodule.exports = globalApi;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/csg.js?");

/***/ }),

/***/ "../../convert/jscad/main.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/main.js ***!
  \******************************************************************/
/*! exports provided: scriptToOperator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scriptToOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scriptToOperator */ \"../../convert/jscad/scriptToOperator.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"scriptToOperator\", function() { return _scriptToOperator__WEBPACK_IMPORTED_MODULE_0__[\"scriptToOperator\"]; });\n\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/main.js?");

/***/ }),

/***/ "../../convert/jscad/scriptToOperator.js":
/*!******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/scriptToOperator.js ***!
  \******************************************************************************/
/*! exports provided: scriptToOperator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scriptToOperator\", function() { return scriptToOperator; });\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ \"../../convert/jscad/api.js\");\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_api__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var recast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! recast */ \"../../node_modules/recast/main.js\");\n/* harmony import */ var recast__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(recast__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _jsxcad_algorithm_solid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-solid */ \"../../algorithm/solid/main.js\");\n/* harmony import */ var _jsxcad_sys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jsxcad/sys */ \"../../sys/main.js\");\n/* harmony import */ var ast_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ast-types */ \"../../node_modules/ast-types/main.js\");\n/* harmony import */ var ast_types__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(ast_types__WEBPACK_IMPORTED_MODULE_4__);\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst unpackApi = (api) => {\r\n  const operators = {};\r\n  for (const domain of Object.keys(api)) {\r\n    for (const library of Object.keys(api[domain])) {\r\n      for (const operator of Object.keys(api[domain][library])) {\r\n        operators[operator] = api[domain][library][operator];\r\n      }\r\n    }\r\n  }\r\n  return operators;\r\n};\r\n\r\nconst operators = unpackApi(_api__WEBPACK_IMPORTED_MODULE_0__);\r\n\r\nconst csgToSolid = (csg) =>\r\n  Object(_jsxcad_algorithm_solid__WEBPACK_IMPORTED_MODULE_2__[\"fromPolygons\"])({}, csg.polygons.map(polygon =>\r\n    polygon.vertices.map(vertex =>\r\n      [vertex.pos.x, vertex.pos.y, vertex.pos.z])));\r\n\r\nconst createJscadFunction = (script, operators) => {\r\n  const { main, getParameterDefinitions } =\r\n      new Function(`{ ${Object.keys(operators).join(', ')} }`,\r\n                   `\r\n                    function getParameterDefinitions () { return []; }\r\n                    ${script};\r\n                    return { main, getParameterDefinitions };\r\n                   `\r\n      )(operators);\r\n  const getGeometry = (params) => {\r\n    const output = main(params);\r\n    const result = { assembly: [] };\r\n    if (output.polygons) {\r\n      result.assembly.push({ solid: csgToSolid(output) });\r\n    }\r\n    return result;\r\n  };\r\n  return { getGeometry, getParameterDefinitions };\r\n};\r\n\r\nconst replaceIncludes = async (ast) => {\r\n  const includes = [];\r\n  // Look for include(\"foo\") statements and replace them with the content of \"foo\".\r\n  ast_types__WEBPACK_IMPORTED_MODULE_4___default.a.visit(ast, {\r\n    visitCallExpression: function (path) {\r\n      const { node } = path;\r\n      const { callee } = node;\r\n      const { name } = callee;\r\n      if (name === 'include' && node.arguments.length >= 1) {\r\n        const { type } = node.arguments[0];\r\n        if (type === 'Literal') {\r\n          includes.push(path);\r\n        }\r\n      }\r\n      this.traverse(path);\r\n    }\r\n  });\r\n  for (const include of includes) {\r\n    include.replace(await replaceIncludes(Object(recast__WEBPACK_IMPORTED_MODULE_1__[\"parse\"])(await Object(_jsxcad_sys__WEBPACK_IMPORTED_MODULE_3__[\"readFile\"])(include.node.arguments[0].value))));\r\n  }\r\n  return ast;\r\n};\r\n\r\nconst scriptToOperator = async (options = {}, script) =>\r\n  replaceIncludes(Object(recast__WEBPACK_IMPORTED_MODULE_1__[\"parse\"])(script))\r\n      .then(ast => createJscadFunction(Object(recast__WEBPACK_IMPORTED_MODULE_1__[\"print\"])(ast).code, operators))\r\n      .catch(error => console.log(error));\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/scriptToOperator.js?");

/***/ }),

/***/ "../../convert/jscad/src/api/cagOutlinePaths.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/cagOutlinePaths.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Path2D = __webpack_require__(/*! ../core/math/Path2 */ \"../../convert/jscad/src/core/math/Path2.js\")\r\n\r\nconst cagoutlinePaths = function (_cag) {\r\n  let cag = _cag.canonicalized()\r\n  let sideTagToSideMap = {}\r\n  let startVertexTagToSideTagMap = {}\r\n  cag.sides.map(function (side) {\r\n    let sidetag = side.getTag()\r\n    sideTagToSideMap[sidetag] = side\r\n    let startvertextag = side.vertex0.getTag()\r\n    if (!(startvertextag in startVertexTagToSideTagMap)) {\r\n      startVertexTagToSideTagMap[startvertextag] = []\r\n    }\r\n    startVertexTagToSideTagMap[startvertextag].push(sidetag)\r\n  })\r\n  let paths = []\r\n  while (true) {\r\n    let startsidetag = null\r\n    for (let aVertexTag in startVertexTagToSideTagMap) {\r\n      let sidesForcagVertex = startVertexTagToSideTagMap[aVertexTag]\r\n      startsidetag = sidesForcagVertex[0]\r\n      sidesForcagVertex.splice(0, 1)\r\n      if (sidesForcagVertex.length === 0) {\r\n        delete startVertexTagToSideTagMap[aVertexTag]\r\n      }\r\n      break\r\n    }\r\n    if (startsidetag === null) break // we've had all sides\r\n    let connectedVertexPoints = []\r\n    let sidetag = startsidetag\r\n    let cagside = sideTagToSideMap[sidetag]\r\n    let startvertextag = cagside.vertex0.getTag()\r\n    while (true) {\r\n      connectedVertexPoints.push(cagside.vertex0.pos)\r\n      let nextvertextag = cagside.vertex1.getTag()\r\n      if (nextvertextag === startvertextag) break // we've closed the polygon\r\n      if (!(nextvertextag in startVertexTagToSideTagMap)) {\r\n        throw new Error('Area is not closed!')\r\n      }\r\n      let nextpossiblesidetags = startVertexTagToSideTagMap[nextvertextag]\r\n      let nextsideindex = -1\r\n      if (nextpossiblesidetags.length === 1) {\r\n        nextsideindex = 0\r\n      } else {\r\n                  // more than one side starting at the same vertex. cag means we have\r\n                  // two shapes touching at the same corner\r\n        let bestangle = null\r\n        let cagangle = cagside.direction().angleDegrees()\r\n        for (let sideindex = 0; sideindex < nextpossiblesidetags.length; sideindex++) {\r\n          let nextpossiblesidetag = nextpossiblesidetags[sideindex]\r\n          let possibleside = sideTagToSideMap[nextpossiblesidetag]\r\n          let angle = possibleside.direction().angleDegrees()\r\n          let angledif = angle - cagangle\r\n          if (angledif < -180) angledif += 360\r\n          if (angledif >= 180) angledif -= 360\r\n          if ((nextsideindex < 0) || (angledif > bestangle)) {\r\n            nextsideindex = sideindex\r\n            bestangle = angledif\r\n          }\r\n        }\r\n      }\r\n      let nextsidetag = nextpossiblesidetags[nextsideindex]\r\n      nextpossiblesidetags.splice(nextsideindex, 1)\r\n      if (nextpossiblesidetags.length === 0) {\r\n        delete startVertexTagToSideTagMap[nextvertextag]\r\n      }\r\n      cagside = sideTagToSideMap[nextsidetag]\r\n    } // inner loop\r\n    // due to the logic of fromPoints()\r\n    // move the first point to the last\r\n    if (connectedVertexPoints.length > 0) {\r\n      connectedVertexPoints.push(connectedVertexPoints.shift())\r\n    }\r\n    let path = new Path2D(connectedVertexPoints, true)\r\n    paths.push(path)\r\n  } // outer loop\r\n  return paths\r\n}\r\n\r\nmodule.exports = cagoutlinePaths\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/cagOutlinePaths.js?");

/***/ }),

/***/ "../../convert/jscad/src/api/center.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/center.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const toArray = __webpack_require__(/*! ../core/utils/toArray */ \"../../convert/jscad/src/core/utils/toArray.js\")\r\n\r\n/**\r\n * Centers the given object(s) using the given options (if any)\r\n * @param {Object} [options] - options for centering\r\n * @param {Array} [options.axes=[true,true,true]] - axis of which to center, true or false\r\n * @param {Array} [options.center=[0,0,0]] - point of which to center the object upon\r\n * @param {Object|Array} objects - the shape(s) to center\r\n * @return {Object|Array} objects\r\n *\r\n * @example\r\n * let csg = center({axes: [true,false,false]}, sphere()) // center about the X axis\r\n */\r\nconst center = function (options, objects) {\r\n  const defaults = {\r\n    axes: [true, true, true],\r\n    center: [0, 0, 0]\r\n  // TODO : Add addition 'methods' of centering; midpoint, centeriod\r\n  }\r\n  options = Object.assign({}, defaults, options)\r\n  const {axes,center} = options\r\n  objects = toArray(objects)\r\n\r\n  const results = objects.map(function (object) {\r\n    let bounds = object.getBounds()\r\n    let offset = [0,0,0]\r\n    if (axes[0]) offset[0] = center[0] - (bounds[0].x + ((bounds[1].x - bounds[0].x) / 2))\r\n    if (axes[1]) offset[1] = center[1] - (bounds[0].y + ((bounds[1].y - bounds[0].y) / 2))\r\n    if (axes[2]) offset[2] = center[2] - (bounds[0].z + ((bounds[1].y - bounds[0].y) / 2))\r\n    return object.translate(offset)\r\n  })\r\n  // if there is more than one result, return them all , otherwise a single one\r\n  return results.length === 1 ? results[0] : results\r\n}\r\n\r\nmodule.exports = center\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/center.js?");

/***/ }),

/***/ "../../convert/jscad/src/api/color.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/color.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// color table from http://www.w3.org/TR/css3-color/\r\nconst cssColors = {\r\n// basic color keywords\r\n  'black': [ 0 / 255, 0 / 255, 0 / 255 ],\r\n  'silver': [ 192 / 255, 192 / 255, 192 / 255 ],\r\n  'gray': [ 128 / 255, 128 / 255, 128 / 255 ],\r\n  'white': [ 255 / 255, 255 / 255, 255 / 255 ],\r\n  'maroon': [ 128 / 255, 0 / 255, 0 / 255 ],\r\n  'red': [ 255 / 255, 0 / 255, 0 / 255 ],\r\n  'purple': [ 128 / 255, 0 / 255, 128 / 255 ],\r\n  'fuchsia': [ 255 / 255, 0 / 255, 255 / 255 ],\r\n  'green': [ 0 / 255, 128 / 255, 0 / 255 ],\r\n  'lime': [ 0 / 255, 255 / 255, 0 / 255 ],\r\n  'olive': [ 128 / 255, 128 / 255, 0 / 255 ],\r\n  'yellow': [ 255 / 255, 255 / 255, 0 / 255 ],\r\n  'navy': [ 0 / 255, 0 / 255, 128 / 255 ],\r\n  'blue': [ 0 / 255, 0 / 255, 255 / 255 ],\r\n  'teal': [ 0 / 255, 128 / 255, 128 / 255 ],\r\n  'aqua': [ 0 / 255, 255 / 255, 255 / 255 ],\r\n  // extended color keywords\r\n  'aliceblue': [ 240 / 255, 248 / 255, 255 / 255 ],\r\n  'antiquewhite': [ 250 / 255, 235 / 255, 215 / 255 ],\r\n  // 'aqua': [ 0 / 255, 255 / 255, 255 / 255 ],\r\n  'aquamarine': [ 127 / 255, 255 / 255, 212 / 255 ],\r\n  'azure': [ 240 / 255, 255 / 255, 255 / 255 ],\r\n  'beige': [ 245 / 255, 245 / 255, 220 / 255 ],\r\n  'bisque': [ 255 / 255, 228 / 255, 196 / 255 ],\r\n  // 'black': [ 0 / 255, 0 / 255, 0 / 255 ],\r\n  'blanchedalmond': [ 255 / 255, 235 / 255, 205 / 255 ],\r\n  // 'blue': [ 0 / 255, 0 / 255, 255 / 255 ],\r\n  'blueviolet': [ 138 / 255, 43 / 255, 226 / 255 ],\r\n  'brown': [ 165 / 255, 42 / 255, 42 / 255 ],\r\n  'burlywood': [ 222 / 255, 184 / 255, 135 / 255 ],\r\n  'cadetblue': [ 95 / 255, 158 / 255, 160 / 255 ],\r\n  'chartreuse': [ 127 / 255, 255 / 255, 0 / 255 ],\r\n  'chocolate': [ 210 / 255, 105 / 255, 30 / 255 ],\r\n  'coral': [ 255 / 255, 127 / 255, 80 / 255 ],\r\n  'cornflowerblue': [ 100 / 255, 149 / 255, 237 / 255 ],\r\n  'cornsilk': [ 255 / 255, 248 / 255, 220 / 255 ],\r\n  'crimson': [ 220 / 255, 20 / 255, 60 / 255 ],\r\n  'cyan': [ 0 / 255, 255 / 255, 255 / 255 ],\r\n  'darkblue': [ 0 / 255, 0 / 255, 139 / 255 ],\r\n  'darkcyan': [ 0 / 255, 139 / 255, 139 / 255 ],\r\n  'darkgoldenrod': [ 184 / 255, 134 / 255, 11 / 255 ],\r\n  'darkgray': [ 169 / 255, 169 / 255, 169 / 255 ],\r\n  'darkgreen': [ 0 / 255, 100 / 255, 0 / 255 ],\r\n  'darkgrey': [ 169 / 255, 169 / 255, 169 / 255 ],\r\n  'darkkhaki': [ 189 / 255, 183 / 255, 107 / 255 ],\r\n  'darkmagenta': [ 139 / 255, 0 / 255, 139 / 255 ],\r\n  'darkolivegreen': [ 85 / 255, 107 / 255, 47 / 255 ],\r\n  'darkorange': [ 255 / 255, 140 / 255, 0 / 255 ],\r\n  'darkorchid': [ 153 / 255, 50 / 255, 204 / 255 ],\r\n  'darkred': [ 139 / 255, 0 / 255, 0 / 255 ],\r\n  'darksalmon': [ 233 / 255, 150 / 255, 122 / 255 ],\r\n  'darkseagreen': [ 143 / 255, 188 / 255, 143 / 255 ],\r\n  'darkslateblue': [ 72 / 255, 61 / 255, 139 / 255 ],\r\n  'darkslategray': [ 47 / 255, 79 / 255, 79 / 255 ],\r\n  'darkslategrey': [ 47 / 255, 79 / 255, 79 / 255 ],\r\n  'darkturquoise': [ 0 / 255, 206 / 255, 209 / 255 ],\r\n  'darkviolet': [ 148 / 255, 0 / 255, 211 / 255 ],\r\n  'deeppink': [ 255 / 255, 20 / 255, 147 / 255 ],\r\n  'deepskyblue': [ 0 / 255, 191 / 255, 255 / 255 ],\r\n  'dimgray': [ 105 / 255, 105 / 255, 105 / 255 ],\r\n  'dimgrey': [ 105 / 255, 105 / 255, 105 / 255 ],\r\n  'dodgerblue': [ 30 / 255, 144 / 255, 255 / 255 ],\r\n  'firebrick': [ 178 / 255, 34 / 255, 34 / 255 ],\r\n  'floralwhite': [ 255 / 255, 250 / 255, 240 / 255 ],\r\n  'forestgreen': [ 34 / 255, 139 / 255, 34 / 255 ],\r\n  // 'fuchsia': [ 255 / 255, 0 / 255, 255 / 255 ],\r\n  'gainsboro': [ 220 / 255, 220 / 255, 220 / 255 ],\r\n  'ghostwhite': [ 248 / 255, 248 / 255, 255 / 255 ],\r\n  'gold': [ 255 / 255, 215 / 255, 0 / 255 ],\r\n  'goldenrod': [ 218 / 255, 165 / 255, 32 / 255 ],\r\n  // 'gray': [ 128 / 255, 128 / 255, 128 / 255 ],\r\n  // 'green': [ 0 / 255, 128 / 255, 0 / 255 ],\r\n  'greenyellow': [ 173 / 255, 255 / 255, 47 / 255 ],\r\n  'grey': [ 128 / 255, 128 / 255, 128 / 255 ],\r\n  'honeydew': [ 240 / 255, 255 / 255, 240 / 255 ],\r\n  'hotpink': [ 255 / 255, 105 / 255, 180 / 255 ],\r\n  'indianred': [ 205 / 255, 92 / 255, 92 / 255 ],\r\n  'indigo': [ 75 / 255, 0 / 255, 130 / 255 ],\r\n  'ivory': [ 255 / 255, 255 / 255, 240 / 255 ],\r\n  'khaki': [ 240 / 255, 230 / 255, 140 / 255 ],\r\n  'lavender': [ 230 / 255, 230 / 255, 250 / 255 ],\r\n  'lavenderblush': [ 255 / 255, 240 / 255, 245 / 255 ],\r\n  'lawngreen': [ 124 / 255, 252 / 255, 0 / 255 ],\r\n  'lemonchiffon': [ 255 / 255, 250 / 255, 205 / 255 ],\r\n  'lightblue': [ 173 / 255, 216 / 255, 230 / 255 ],\r\n  'lightcoral': [ 240 / 255, 128 / 255, 128 / 255 ],\r\n  'lightcyan': [ 224 / 255, 255 / 255, 255 / 255 ],\r\n  'lightgoldenrodyellow': [ 250 / 255, 250 / 255, 210 / 255 ],\r\n  'lightgray': [ 211 / 255, 211 / 255, 211 / 255 ],\r\n  'lightgreen': [ 144 / 255, 238 / 255, 144 / 255 ],\r\n  'lightgrey': [ 211 / 255, 211 / 255, 211 / 255 ],\r\n  'lightpink': [ 255 / 255, 182 / 255, 193 / 255 ],\r\n  'lightsalmon': [ 255 / 255, 160 / 255, 122 / 255 ],\r\n  'lightseagreen': [ 32 / 255, 178 / 255, 170 / 255 ],\r\n  'lightskyblue': [ 135 / 255, 206 / 255, 250 / 255 ],\r\n  'lightslategray': [ 119 / 255, 136 / 255, 153 / 255 ],\r\n  'lightslategrey': [ 119 / 255, 136 / 255, 153 / 255 ],\r\n  'lightsteelblue': [ 176 / 255, 196 / 255, 222 / 255 ],\r\n  'lightyellow': [ 255 / 255, 255 / 255, 224 / 255 ],\r\n  // 'lime': [ 0 / 255, 255 / 255, 0 / 255 ],\r\n  'limegreen': [ 50 / 255, 205 / 255, 50 / 255 ],\r\n  'linen': [ 250 / 255, 240 / 255, 230 / 255 ],\r\n  'magenta': [ 255 / 255, 0 / 255, 255 / 255 ],\r\n  // 'maroon': [ 128 / 255, 0 / 255, 0 / 255 ],\r\n  'mediumaquamarine': [ 102 / 255, 205 / 255, 170 / 255 ],\r\n  'mediumblue': [ 0 / 255, 0 / 255, 205 / 255 ],\r\n  'mediumorchid': [ 186 / 255, 85 / 255, 211 / 255 ],\r\n  'mediumpurple': [ 147 / 255, 112 / 255, 219 / 255 ],\r\n  'mediumseagreen': [ 60 / 255, 179 / 255, 113 / 255 ],\r\n  'mediumslateblue': [ 123 / 255, 104 / 255, 238 / 255 ],\r\n  'mediumspringgreen': [ 0 / 255, 250 / 255, 154 / 255 ],\r\n  'mediumturquoise': [ 72 / 255, 209 / 255, 204 / 255 ],\r\n  'mediumvioletred': [ 199 / 255, 21 / 255, 133 / 255 ],\r\n  'midnightblue': [ 25 / 255, 25 / 255, 112 / 255 ],\r\n  'mintcream': [ 245 / 255, 255 / 255, 250 / 255 ],\r\n  'mistyrose': [ 255 / 255, 228 / 255, 225 / 255 ],\r\n  'moccasin': [ 255 / 255, 228 / 255, 181 / 255 ],\r\n  'navajowhite': [ 255 / 255, 222 / 255, 173 / 255 ],\r\n  // 'navy': [ 0 / 255, 0 / 255, 128 / 255 ],\r\n  'oldlace': [ 253 / 255, 245 / 255, 230 / 255 ],\r\n  // 'olive': [ 128 / 255, 128 / 255, 0 / 255 ],\r\n  'olivedrab': [ 107 / 255, 142 / 255, 35 / 255 ],\r\n  'orange': [ 255 / 255, 165 / 255, 0 / 255 ],\r\n  'orangered': [ 255 / 255, 69 / 255, 0 / 255 ],\r\n  'orchid': [ 218 / 255, 112 / 255, 214 / 255 ],\r\n  'palegoldenrod': [ 238 / 255, 232 / 255, 170 / 255 ],\r\n  'palegreen': [ 152 / 255, 251 / 255, 152 / 255 ],\r\n  'paleturquoise': [ 175 / 255, 238 / 255, 238 / 255 ],\r\n  'palevioletred': [ 219 / 255, 112 / 255, 147 / 255 ],\r\n  'papayawhip': [ 255 / 255, 239 / 255, 213 / 255 ],\r\n  'peachpuff': [ 255 / 255, 218 / 255, 185 / 255 ],\r\n  'peru': [ 205 / 255, 133 / 255, 63 / 255 ],\r\n  'pink': [ 255 / 255, 192 / 255, 203 / 255 ],\r\n  'plum': [ 221 / 255, 160 / 255, 221 / 255 ],\r\n  'powderblue': [ 176 / 255, 224 / 255, 230 / 255 ],\r\n  // 'purple': [ 128 / 255, 0 / 255, 128 / 255 ],\r\n  // 'red': [ 255 / 255, 0 / 255, 0 / 255 ],\r\n  'rosybrown': [ 188 / 255, 143 / 255, 143 / 255 ],\r\n  'royalblue': [ 65 / 255, 105 / 255, 225 / 255 ],\r\n  'saddlebrown': [ 139 / 255, 69 / 255, 19 / 255 ],\r\n  'salmon': [ 250 / 255, 128 / 255, 114 / 255 ],\r\n  'sandybrown': [ 244 / 255, 164 / 255, 96 / 255 ],\r\n  'seagreen': [ 46 / 255, 139 / 255, 87 / 255 ],\r\n  'seashell': [ 255 / 255, 245 / 255, 238 / 255 ],\r\n  'sienna': [ 160 / 255, 82 / 255, 45 / 255 ],\r\n  // 'silver': [ 192 / 255, 192 / 255, 192 / 255 ],\r\n  'skyblue': [ 135 / 255, 206 / 255, 235 / 255 ],\r\n  'slateblue': [ 106 / 255, 90 / 255, 205 / 255 ],\r\n  'slategray': [ 112 / 255, 128 / 255, 144 / 255 ],\r\n  'slategrey': [ 112 / 255, 128 / 255, 144 / 255 ],\r\n  'snow': [ 255 / 255, 250 / 255, 250 / 255 ],\r\n  'springgreen': [ 0 / 255, 255 / 255, 127 / 255 ],\r\n  'steelblue': [ 70 / 255, 130 / 255, 180 / 255 ],\r\n  'tan': [ 210 / 255, 180 / 255, 140 / 255 ],\r\n  // 'teal': [ 0 / 255, 128 / 255, 128 / 255 ],\r\n  'thistle': [ 216 / 255, 191 / 255, 216 / 255 ],\r\n  'tomato': [ 255 / 255, 99 / 255, 71 / 255 ],\r\n  'turquoise': [ 64 / 255, 224 / 255, 208 / 255 ],\r\n  'violet': [ 238 / 255, 130 / 255, 238 / 255 ],\r\n  'wheat': [ 245 / 255, 222 / 255, 179 / 255 ],\r\n  // 'white': [ 255 / 255, 255 / 255, 255 / 255 ],\r\n  'whitesmoke': [ 245 / 255, 245 / 255, 245 / 255 ],\r\n  // 'yellow': [ 255 / 255, 255 / 255, 0 / 255 ],\r\n  'yellowgreen': [ 154 / 255, 205 / 255, 50 / 255 ]\r\n}\r\n\r\n/**\r\n * Converts an CSS color name to RGB color.\r\n *\r\n * @param   String  s       The CSS color name\r\n * @return  Array           The RGB representation, or [0,0,0] default\r\n */\r\nfunction css2rgb (s) {\r\n  return cssColors[s.toLowerCase()]\r\n}\r\n\r\n// color( (array[r,g,b] | css-string) [,alpha] (,array[objects] | list of objects) )\r\n/** apply the given color to the input object(s)\r\n * @param {Object} color - either an array or a hex string of color values\r\n * @param {Object|Array} objects either a single or multiple CSG/CAG objects to color\r\n * @returns {CSG} new CSG object , with the given color\r\n *\r\n * @example\r\n * let redSphere = color([1,0,0,1], sphere())\r\n */\r\nfunction color (color) {\r\n  let object\r\n  let i = 1\r\n  let a = arguments\r\n\r\n  // assume first argument is RGB array\r\n  // but check if first argument is CSS string\r\n  if (typeof color === 'string') {\r\n    color = css2rgb(color)\r\n  }\r\n  // check if second argument is alpha\r\n  if (Number.isFinite(a[i])) {\r\n    color = color.concat(a[i])\r\n    i++\r\n  }\r\n  // check if next argument is an an array\r\n  if (Array.isArray(a[i])) {\r\n    a = a[i]\r\n    i = 0\r\n  } // use this as the list of objects\r\n  for (object = a[i++]; i < a.length; i++) {\r\n    object = object.union(a[i])\r\n  }\r\n  return object.setColor(color)\r\n}\r\n\r\n// from http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n/**\r\n * Converts an RGB color value to HSL. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes r, g, and b are contained in the set [0, 1] and\r\n * returns h, s, and l in the set [0, 1].\r\n *\r\n * @param   Number  r       The red color value\r\n * @param   Number  g       The green color value\r\n * @param   Number  b       The blue color value\r\n * @return  Array           The HSL representation\r\n */\r\nfunction rgb2hsl (r, g, b) {\r\n  if (r.length) {\r\n    b = r[2]\r\n    g = r[1]\r\n    r = r[0]\r\n  }\r\n  let max = Math.max(r, g, b)\r\n  let min = Math.min(r, g, b)\r\n  let h\r\n  let s\r\n  let l = (max + min) / 2\r\n\r\n  if (max === min) {\r\n    h = s = 0 // achromatic\r\n  } else {\r\n    let d = max - min\r\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min)\r\n    switch (max) {\r\n      case r:\r\n        h = (g - b) / d + (g < b ? 6 : 0)\r\n        break\r\n      case g:\r\n        h = (b - r) / d + 2\r\n        break\r\n      case b:\r\n        h = (r - g) / d + 4\r\n        break\r\n    }\r\n    h /= 6\r\n  }\r\n\r\n  return [h, s, l]\r\n}\r\n\r\n/**\r\n * Converts an HSL color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes h, s, and l are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 1].\r\n *\r\n * @param   Number  h       The hue\r\n * @param   Number  s       The saturation\r\n * @param   Number  l       The lightness\r\n * @return  Array           The RGB representation\r\n */\r\nfunction hsl2rgb (h, s, l) {\r\n  if (h.length) {\r\n    h = h[0]\r\n    s = h[1]\r\n    l = h[2]\r\n  }\r\n  let r\r\n  let g\r\n  let b\r\n\r\n  if (s === 0) {\r\n    r = g = b = l // achromatic\r\n  } else {\r\n    let q = l < 0.5 ? l * (1 + s) : l + s - l * s\r\n    let p = 2 * l - q\r\n    r = hue2rgb(p, q, h + 1 / 3)\r\n    g = hue2rgb(p, q, h)\r\n    b = hue2rgb(p, q, h - 1 / 3)\r\n  }\r\n\r\n  return [r, g, b]\r\n}\r\n\r\nfunction hue2rgb (p, q, t) {\r\n  if (t < 0) t += 1\r\n  if (t > 1) t -= 1\r\n  if (t < 1 / 6) return p + (q - p) * 6 * t\r\n  if (t < 1 / 2) return q\r\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\r\n  return p\r\n}\r\n\r\n/**\r\n * Converts an RGB color value to HSV. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\r\n * Assumes r, g, and b are contained in the set [0, 1] and\r\n * returns h, s, and v in the set [0, 1].\r\n *\r\n * @param   Number  r       The red color value\r\n * @param   Number  g       The green color value\r\n * @param   Number  b       The blue color value\r\n * @return  Array           The HSV representation\r\n */\r\n\r\nfunction rgb2hsv (r, g, b) {\r\n  if (r.length) {\r\n    r = r[0]\r\n    g = r[1]\r\n    b = r[2]\r\n  }\r\n  let max = Math.max(r, g, b)\r\n  let min = Math.min(r, g, b)\r\n  let h\r\n  let s\r\n  let v = max\r\n\r\n  let d = max - min\r\n  s = max === 0 ? 0 : d / max\r\n\r\n  if (max === min) {\r\n    h = 0 // achromatic\r\n  } else {\r\n    switch (max) {\r\n      case r:\r\n        h = (g - b) / d + (g < b ? 6 : 0)\r\n        break\r\n      case g:\r\n        h = (b - r) / d + 2\r\n        break\r\n      case b:\r\n        h = (r - g) / d + 4\r\n        break\r\n    }\r\n    h /= 6\r\n  }\r\n\r\n  return [h, s, v]\r\n}\r\n\r\n/**\r\n * Converts an HSV color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\r\n * Assumes h, s, and v are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 1].\r\n *\r\n * @param   Number  h       The hue\r\n * @param   Number  s       The saturation\r\n * @param   Number  v       The value\r\n * @return  Array           The RGB representation\r\n */\r\nfunction hsv2rgb (h, s, v) {\r\n  if (h.length) {\r\n    h = h[0]\r\n    s = h[1]\r\n    v = h[2]\r\n  }\r\n  let r, g, b\r\n\r\n  let i = Math.floor(h * 6)\r\n  let f = h * 6 - i\r\n  let p = v * (1 - s)\r\n  let q = v * (1 - f * s)\r\n  let t = v * (1 - (1 - f) * s)\r\n\r\n  switch (i % 6) {\r\n    case 0:\r\n      r = v, g = t, b = p\r\n      break\r\n    case 1:\r\n      r = q, g = v, b = p\r\n      break\r\n    case 2:\r\n      r = p, g = v, b = t\r\n      break\r\n    case 3:\r\n      r = p, g = q, b = v\r\n      break\r\n    case 4:\r\n      r = t, g = p, b = v\r\n      break\r\n    case 5:\r\n      r = v, g = p, b = q\r\n      break\r\n  }\r\n\r\n  return [r, g, b]\r\n}\r\n\r\n/**\r\n * Converts a HTML5 color value (string) to RGB values\r\n * See the color input type of HTML5 forms\r\n * Conversion formula:\r\n * - split the string; \"#RRGGBB\" into RGB components\r\n * - convert the HEX value into RGB values\r\n */\r\nfunction html2rgb (s) {\r\n  let r = 0\r\n  let g = 0\r\n  let b = 0\r\n  if (s.length === 7) {\r\n    r = parseInt('0x' + s.slice(1, 3)) / 255\r\n    g = parseInt('0x' + s.slice(3, 5)) / 255\r\n    b = parseInt('0x' + s.slice(5, 7)) / 255\r\n  }\r\n  return [r, g, b]\r\n}\r\n\r\n/**\r\n * Converts RGB color value to HTML5 color value (string)\r\n * Conversion forumla:\r\n * - convert R, G, B into HEX strings\r\n * - return HTML formatted string \"#RRGGBB\"\r\n */\r\nfunction rgb2html (r, g, b) {\r\n  if (r.length) {\r\n    r = r[0]\r\n    g = r[1]\r\n    b = r[2]\r\n  }\r\n  let s = '#' +\r\n  Number(0x1000000 + r * 255 * 0x10000 + g * 255 * 0x100 + b * 255).toString(16).substring(1, 7)\r\n  return s\r\n}\r\n\r\nmodule.exports = {\r\n  css2rgb,\r\n  color,\r\n  rgb2hsl,\r\n  hsl2rgb,\r\n  rgb2hsv,\r\n  hsv2rgb,\r\n  html2rgb,\r\n  rgb2html\r\n}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/color.js?");

/***/ }),

/***/ "../../convert/jscad/src/api/debug.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/debug.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function echo () {\r\n  console.warn('echo() will be deprecated in the near future: please use console.log/warn/error instead')\r\n  var s = '', a = arguments\r\n  for (var i = 0; i < a.length; i++) {\r\n    if (i) s += ', '\r\n    s += a[i]\r\n  }\r\n  // var t = (new Date()-global.time)/1000\r\n  // console.log(t,s)\r\n  console.log(s)\r\n}\r\n\r\nmodule.exports = {\r\n  echo\r\n}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/debug.js?");

/***/ }),

/***/ "../../convert/jscad/src/api/debugHelpers.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/debugHelpers.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const CSG = __webpack_require__(/*! ../core/CSG */ \"../../convert/jscad/src/core/CSG.js\")\r\nconst {cube} = __webpack_require__(/*! ./primitives3d */ \"../../convert/jscad/src/api/primitives3d.js\")\r\n\r\n// For debugging\r\n// Creates a new solid with a tiny cube at every vertex of the source solid\r\n// this is seperated from the CSG class itself because of the dependency on cube\r\nconst toPointCloud = function (csg, cuberadius) {\r\n  csg = csg.reTesselated()\r\n\r\n  let result = new CSG()\r\n\r\n    // make a list of all unique vertices\r\n    // For each vertex we also collect the list of normals of the planes touching the vertices\r\n  let vertexmap = {}\r\n  csg.polygons.map(function (polygon) {\r\n    polygon.vertices.map(function (vertex) {\r\n      vertexmap[vertex.getTag()] = vertex.pos\r\n    })\r\n  })\r\n\r\n  for (let vertextag in vertexmap) {\r\n    let pos = vertexmap[vertextag]\r\n    let _cube = cube({\r\n      center: pos,\r\n      radius: cuberadius\r\n    })\r\n    result = result.unionSub(_cube, false, false)\r\n  }\r\n  result = result.reTesselated()\r\n  return result\r\n}\r\n\r\nmodule.exports = {toPointCloud}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/debugHelpers.js?");

/***/ }),

/***/ "../../convert/jscad/src/api/helpers.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/helpers.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vertex3 = __webpack_require__(/*! ../core/math/Vertex3 */ \"../../convert/jscad/src/core/math/Vertex3.js\")\r\nconst Vector3 = __webpack_require__(/*! ../core/math/Vector3 */ \"../../convert/jscad/src/core/math/Vector3.js\")\r\nconst Polygon3 = __webpack_require__(/*! ../core/math/Polygon3 */ \"../../convert/jscad/src/core/math/Polygon3.js\")\r\n\r\n// FIXME: this is to have more readable/less extremely verbose code below\r\nconst vertexFromVectorArray = array => {\r\n  return new Vertex3(new Vector3(array))\r\n}\r\n\r\nconst polygonFromPoints = points => {\r\n  // EEK talk about wrapping wrappers !\r\n  const vertices = points.map(point => new Vertex3(new Vector3(point)))\r\n  return new Polygon3(vertices)\r\n}\r\n\r\n// Simplified, array vector rightMultiply1x3Vector\r\nconst rightMultiply1x3VectorToArray = (matrix, vector) => {\r\n  const [v0, v1, v2] = vector\r\n  const v3 = 1\r\n  let x = v0 * matrix.elements[0] + v1 * matrix.elements[1] + v2 * matrix.elements[2] + v3 * matrix.elements[3]\r\n  let y = v0 * matrix.elements[4] + v1 * matrix.elements[5] + v2 * matrix.elements[6] + v3 * matrix.elements[7]\r\n  let z = v0 * matrix.elements[8] + v1 * matrix.elements[9] + v2 * matrix.elements[10] + v3 * matrix.elements[11]\r\n  let w = v0 * matrix.elements[12] + v1 * matrix.elements[13] + v2 * matrix.elements[14] + v3 * matrix.elements[15]\r\n\r\n  // scale such that fourth element becomes 1:\r\n  if (w !== 1) {\r\n    const invw = 1.0 / w\r\n    x *= invw\r\n    y *= invw\r\n    z *= invw\r\n  }\r\n  return [x, y, z]\r\n}\r\n\r\nfunction clamp (value, min, max) {\r\n  return Math.min(Math.max(value, min), max)\r\n}\r\n\r\nconst cagToPointsArray = input => {\r\n  let points\r\n  if ('sides' in input) { // this is a cag\r\n    points = []\r\n    input.sides.forEach(side => {\r\n      points.push([side.vertex0.pos.x, side.vertex0.pos.y])\r\n      points.push([side.vertex1.pos.x, side.vertex1.pos.y])\r\n    })\r\n    // cag.sides.map(side => [side.vertex0.pos.x, side.vertex0.pos.y])\r\n    //, side.vertex1.pos.x, side.vertex1.pos.y])\r\n    // due to the logic of CAG.fromPoints()\r\n    // move the first point to the last\r\n    /* if (points.length > 0) {\r\n      points.push(points.shift())\r\n    } */\r\n  } else if ('points' in input) {\r\n    points = input.points.map(p => ([p.x, p.y]))\r\n  }\r\n\r\n  return points\r\n}\r\n\r\nconst degToRad = deg => (Math.PI / 180) * deg\r\n\r\nmodule.exports = {cagToPointsArray, clamp, rightMultiply1x3VectorToArray, polygonFromPoints}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/helpers.js?");

/***/ }),

/***/ "../../convert/jscad/src/api/index.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/index.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\r\nconst primitives3d = __webpack_require__(/*! ./primitives3d-api */ \"../../convert/jscad/src/api/primitives3d-api.js\")\r\nconst primitives2d = __webpack_require__(/*! ./primitives2d-api */ \"../../convert/jscad/src/api/primitives2d-api.js\")\r\nconst booleanOps = __webpack_require__(/*! ./ops-booleans */ \"../../convert/jscad/src/api/ops-booleans.js\")\r\nconst transformations = __webpack_require__(/*! ./ops-transformations */ \"../../convert/jscad/src/api/ops-transformations.js\")\r\nconst extrusions = __webpack_require__(/*! ./ops-extrusions */ \"../../convert/jscad/src/api/ops-extrusions.js\")\r\nconst color = __webpack_require__(/*! ./color */ \"../../convert/jscad/src/api/color.js\")\r\nconst maths = __webpack_require__(/*! ./maths */ \"../../convert/jscad/src/api/maths.js\")\r\nconst text = __webpack_require__(/*! ./text */ \"../../convert/jscad/src/api/text.js\")\r\nconst { echo } = __webpack_require__(/*! ./debug */ \"../../convert/jscad/src/api/debug.js\")\r\n\r\n// these are 'external' to this api and we basically just re-export for old api compatibility\r\n// ...needs to be reviewed\r\nconst { CAG, CSG } = __webpack_require__(/*! ../../csg */ \"../../convert/jscad/csg.js\")\r\nconst { log } = __webpack_require__(/*! ./log */ \"../../convert/jscad/src/api/log.js\") // FIXME: this is a duplicate of the one in openjscad itself,*/\r\n\r\n// mostly likely needs to be removed since it is in the OpenJsCad namespace anyway, leaving here\r\n// for now\r\n\r\nconst exportedApi = {\r\n  csg: {CAG, CSG},\r\n  primitives2d,\r\n  primitives3d,\r\n  booleanOps,\r\n  transformations,\r\n  extrusions,\r\n  color,\r\n  maths,\r\n  text,\r\n  OpenJsCad: {OpenJsCad: {log}},\r\n  debug: {echo}\r\n}\r\n\r\nmodule.exports = exportedApi\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/index.js?");

/***/ }),

/***/ "../../convert/jscad/src/api/log.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/log.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function log (txt) {\r\n  console.warn('log() will be deprecated in the near future: please use console.log/warn/error instead')\r\n  var timeInMs = Date.now()\r\n  var prevtime// OpenJsCad.log.prevLogTime\r\n  if (!prevtime) prevtime = timeInMs\r\n  var deltatime = timeInMs - prevtime\r\n  log.prevLogTime = timeInMs\r\n  var timefmt = (deltatime * 0.001).toFixed(3)\r\n  txt = '[' + timefmt + '] ' + txt\r\n  if ((typeof (console) === 'object') && (typeof (console.log) === 'function')) {\r\n    console.log(txt)\r\n  } else if ((typeof (self) === 'object') && (typeof (self.postMessage) === 'function')) {\r\n    self.postMessage({cmd: 'log', txt: txt})\r\n  } else throw new Error('Cannot log')\r\n}\r\n\r\n// See Processor.setStatus()\r\n// Note: leave for compatibility\r\nfunction status (s) {\r\n  log(s)\r\n}\r\n\r\nmodule.exports = {\r\n  log,\r\n  status\r\n}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/log.js?");

/***/ }),

/***/ "../../convert/jscad/src/api/maths.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/maths.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// -- Math functions (360 deg based vs 2pi)\r\nfunction sin (a) {\r\n  return Math.sin(a / 360 * Math.PI * 2)\r\n}\r\nfunction cos (a) {\r\n  return Math.cos(a / 360 * Math.PI * 2)\r\n}\r\nfunction asin (a) {\r\n  return Math.asin(a) / (Math.PI * 2) * 360\r\n}\r\nfunction acos (a) {\r\n  return Math.acos(a) / (Math.PI * 2) * 360\r\n}\r\nfunction tan (a) {\r\n  return Math.tan(a / 360 * Math.PI * 2)\r\n}\r\nfunction atan (a) {\r\n  return Math.atan(a) / (Math.PI * 2) * 360\r\n}\r\nfunction atan2 (a, b) {\r\n  return Math.atan2(a, b) / (Math.PI * 2) * 360\r\n}\r\nfunction ceil (a) {\r\n  return Math.ceil(a)\r\n}\r\nfunction floor (a) {\r\n  return Math.floor(a)\r\n}\r\nfunction abs (a) {\r\n  return Math.abs(a)\r\n}\r\nfunction min (a, b) {\r\n  return a < b ? a : b\r\n}\r\nfunction max (a, b) {\r\n  return a > b ? a : b\r\n}\r\nfunction rands (min, max, vn, seed) {\r\n  // -- seed is ignored for now, FIX IT (requires reimplementation of random())\r\n  //    see http://stackoverflow.com/questions/424292/how-to-create-my-own-javascript-random-number-generator-that-i-can-also-set-the\r\n  var v = new Array(vn)\r\n  for (var i = 0; i < vn; i++) {\r\n    v[i] = Math.random() * (max - min) + min\r\n  }\r\n}\r\nfunction log (a) {\r\n  return Math.log(a)\r\n}\r\nfunction lookup (ix, v) {\r\n  var r = 0\r\n  for (var i = 0; i < v.length; i++) {\r\n    var a0 = v[i]\r\n    if (a0[0] >= ix) {\r\n      i--\r\n      a0 = v[i]\r\n      var a1 = v[i + 1]\r\n      var m = 0\r\n      if (a0[0] !== a1[0]) {\r\n        m = abs((ix - a0[0]) / (a1[0] - a0[0]))\r\n      }\r\n      // echo(\">>\",i,ix,a0[0],a1[0],\";\",m,a0[1],a1[1])\r\n      if (m > 0) {\r\n        r = a0[1] * (1 - m) + a1[1] * m\r\n      } else {\r\n        r = a0[1]\r\n      }\r\n      return r\r\n    }\r\n  }\r\n  return r\r\n}\r\n\r\nfunction pow (a, b) {\r\n  return Math.pow(a, b)\r\n}\r\n\r\nfunction sign (a) {\r\n  return a < 0 ? -1 : (a > 1 ? 1 : 0)\r\n}\r\n\r\nfunction sqrt (a) {\r\n  return Math.sqrt(a)\r\n}\r\n\r\nfunction round (a) {\r\n  return floor(a + 0.5)\r\n}\r\n\r\nmodule.exports = {\r\n  sin,\r\n  cos,\r\n  asin,\r\n  acos,\r\n  tan,\r\n  atan,\r\n  atan2,\r\n  ceil,\r\n  floor,\r\n  abs,\r\n  min,\r\n  max,\r\n  rands,\r\n  log,\r\n  lookup,\r\n  pow,\r\n  sign,\r\n  sqrt,\r\n  round\r\n}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/maths.js?");

/***/ }),

/***/ "../../convert/jscad/src/api/ops-booleans.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/ops-booleans.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {isCAG} = __webpack_require__(/*! ../core/utils */ \"../../convert/jscad/src/core/utils.js\")\r\n// boolean operations\r\n\r\n// FIXME should this be lazy ? in which case, how do we deal with 2D/3D combined\r\n// TODO we should have an option to set behaviour as first parameter\r\n/** union/ combine the given shapes\r\n * @param {Object(s)|Array} objects - objects to combine : can be given\r\n * - one by one: union(a,b,c) or\r\n * - as an array: union([a,b,c])\r\n * @returns {CSG} new CSG object, the union of all input shapes\r\n *\r\n * @example\r\n * let unionOfSpherAndCube = union(sphere(), cube())\r\n */\r\nfunction union () {\r\n  let options = {}\r\n  const defaults = {\r\n    extrude2d: false\r\n  }\r\n  let o\r\n  let i = 0\r\n  let a = arguments\r\n  if (a[0].length) a = a[0]\r\n  if ('extrude2d' in a[0]) { // first parameter is options\r\n    options = Object.assign({}, defaults, a[0])\r\n    o = a[i++]\r\n  }\r\n\r\n  o = a[i++]\r\n\r\n  // TODO: add option to be able to set this?\r\n  if ((typeof (a[i]) === 'object') && isCAG(a[i]) && options.extrude2d) {\r\n    o = a[i].extrude({offset: [0, 0, 0.1]}) // -- convert a 2D shape to a thin solid, note: do not a[i] = a[i].extrude()\r\n  }\r\n  for (; i < a.length; i++) {\r\n    let obj = a[i]\r\n\r\n    if ((typeof (a[i]) === 'object') && isCAG(a[i]) && options.extrude2d) {\r\n      obj = a[i].extrude({offset: [0, 0, 0.1]}) // -- convert a 2D shape to a thin solid:\r\n    }\r\n    o = o.union(obj)\r\n  }\r\n  return o\r\n}\r\n\r\n/** difference/ subtraction of the given shapes ie:\r\n * cut out C From B From A ie : a - b - c etc\r\n * @param {Object(s)|Array} objects - objects to subtract\r\n * can be given\r\n * - one by one: difference(a,b,c) or\r\n * - as an array: difference([a,b,c])\r\n * @returns {CSG} new CSG object, the difference of all input shapes\r\n *\r\n * @example\r\n * let differenceOfSpherAndCube = difference(sphere(), cube())\r\n */\r\nfunction difference () {\r\n  let object\r\n  let i = 0\r\n  let a = arguments\r\n  if (a[0].length) a = a[0]\r\n  for (object = a[i++]; i < a.length; i++) {\r\n    if ( isCAG(a[i])) {\r\n      object = object.subtract(a[i])\r\n    } else {\r\n      object = object.subtract(a[i].setColor(1, 1, 0)) // -- color the cuts\r\n    }\r\n  }\r\n  return object\r\n}\r\n\r\n/** intersection of the given shapes: ie keep only the common parts between the given shapes\r\n * @param {Object(s)|Array} objects - objects to intersect\r\n * can be given\r\n * - one by one: intersection(a,b,c) or\r\n * - as an array: intersection([a,b,c])\r\n * @returns {CSG} new CSG object, the intersection of all input shapes\r\n *\r\n * @example\r\n * let intersectionOfSpherAndCube = intersection(sphere(), cube())\r\n */\r\nfunction intersection () {\r\n  let object\r\n  let i = 0\r\n  let a = arguments\r\n  if (a[0].length) a = a[0]\r\n  for (object = a[i++]; i < a.length; i++) {\r\n    if (isCAG(a[i])) {\r\n      object = object.intersect(a[i])\r\n    } else {\r\n      object = object.intersect(a[i].setColor(1, 1, 0)) // -- color the cuts\r\n    }\r\n  }\r\n  return object\r\n}\r\n\r\nmodule.exports = {\r\n  union,\r\n  difference,\r\n  intersection\r\n}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/ops-booleans.js?");

/***/ }),

/***/ "../../convert/jscad/src/api/ops-cnc.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/ops-cnc.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Matrix4x4 = __webpack_require__(/*! ../core/math/Matrix4.js */ \"../../convert/jscad/src/core/math/Matrix4.js\")\r\nconst Vector3D = __webpack_require__(/*! ../core/math/Vector3.js */ \"../../convert/jscad/src/core/math/Vector3.js\")\r\nconst {Connector} = __webpack_require__(/*! ../core/connectors.js */ \"../../convert/jscad/src/core/connectors.js\")\r\nconst {fromPoints} = __webpack_require__(/*! ../core/CAGFactories */ \"../../convert/jscad/src/core/CAGFactories.js\")\r\nconst Vector2D = __webpack_require__(/*! ../core/math/Vector2 */ \"../../convert/jscad/src/core/math/Vector2.js\")\r\n\r\n// Get the transformation that transforms this CSG such that it is lying on the z=0 plane,\r\n// as flat as possible (i.e. the least z-height).\r\n// So that it is in an orientation suitable for CNC milling\r\nconst getTransformationAndInverseTransformationToFlatLying = function (_csg) {\r\n  if (_csg.polygons.length === 0) {\r\n    let m = new Matrix4x4() // unity\r\n    return [m, m]\r\n  } else {\r\n          // get a list of unique planes in the CSG:\r\n    let csg = _csg.canonicalized()\r\n    let planemap = {}\r\n    csg.polygons.map(function (polygon) {\r\n      planemap[polygon.plane.getTag()] = polygon.plane\r\n    })\r\n          // try each plane in the CSG and find the plane that, when we align it flat onto z=0,\r\n          // gives the least height in z-direction.\r\n          // If two planes give the same height, pick the plane that originally had a normal closest\r\n          // to [0,0,-1].\r\n    let xvector = new Vector3D(1, 0, 0)\r\n    let yvector = new Vector3D(0, 1, 0)\r\n    let zvector = new Vector3D(0, 0, 1)\r\n    let z0connectorx = new Connector([0, 0, 0], [0, 0, -1], xvector)\r\n    let z0connectory = new Connector([0, 0, 0], [0, 0, -1], yvector)\r\n    let isfirst = true\r\n    let minheight = 0\r\n    let maxdotz = 0\r\n    let besttransformation, bestinversetransformation\r\n    for (let planetag in planemap) {\r\n      let plane = planemap[planetag]\r\n      let pointonplane = plane.normal.times(plane.w)\r\n      let transformation, inversetransformation\r\n              // We need a normal vecrtor for the transformation\r\n              // determine which is more perpendicular to the plane normal: x or y?\r\n              // we will align this as much as possible to the x or y axis vector\r\n      let xorthogonality = plane.normal.cross(xvector).length()\r\n      let yorthogonality = plane.normal.cross(yvector).length()\r\n      if (xorthogonality > yorthogonality) {\r\n                  // x is better:\r\n        let planeconnector = new Connector(pointonplane, plane.normal, xvector)\r\n        transformation = planeconnector.getTransformationTo(z0connectorx, false, 0)\r\n        inversetransformation = z0connectorx.getTransformationTo(planeconnector, false, 0)\r\n      } else {\r\n                  // y is better:\r\n        let planeconnector = new Connector(pointonplane, plane.normal, yvector)\r\n        transformation = planeconnector.getTransformationTo(z0connectory, false, 0)\r\n        inversetransformation = z0connectory.getTransformationTo(planeconnector, false, 0)\r\n      }\r\n      let transformedcsg = csg.transform(transformation)\r\n      let dotz = -plane.normal.dot(zvector)\r\n      let bounds = transformedcsg.getBounds()\r\n      let zheight = bounds[1].z - bounds[0].z\r\n      let isbetter = isfirst\r\n      if (!isbetter) {\r\n        if (zheight < minheight) {\r\n          isbetter = true\r\n        } else if (zheight === minheight) {\r\n          if (dotz > maxdotz) isbetter = true\r\n        }\r\n      }\r\n      if (isbetter) {\r\n                  // translate the transformation around the z-axis and onto the z plane:\r\n        let translation = new Vector3D([-0.5 * (bounds[1].x + bounds[0].x), -0.5 * (bounds[1].y + bounds[0].y), -bounds[0].z])\r\n        transformation = transformation.multiply(Matrix4x4.translation(translation))\r\n        inversetransformation = Matrix4x4.translation(translation.negated()).multiply(inversetransformation)\r\n        minheight = zheight\r\n        maxdotz = dotz\r\n        besttransformation = transformation\r\n        bestinversetransformation = inversetransformation\r\n      }\r\n      isfirst = false\r\n    }\r\n    return [besttransformation, bestinversetransformation]\r\n  }\r\n}\r\n\r\nconst getTransformationToFlatLying = function (csg) {\r\n  let result = csg.getTransformationAndInverseTransformationToFlatLying()\r\n  return result[0]\r\n}\r\n\r\nconst lieFlat = function (csg) {\r\n  let transformation = csg.getTransformationToFlatLying()\r\n  return csg.transform(transformation)\r\n}\r\n\r\n/** cag = cag.overCutInsideCorners(cutterradius);\r\n * Using a CNC router it's impossible to cut out a true sharp inside corner. The inside corner\r\n * will be rounded due to the radius of the cutter. This function compensates for this by creating\r\n * an extra cutout at each inner corner so that the actual cut out shape will be at least as large\r\n * as needed.\r\n * @param {Object} _cag - input cag\r\n * @param {Float} cutterradius - radius to cut inside corners by\r\n * @returns {CAG} cag with overcutInsideCorners\r\n */\r\nconst overCutInsideCorners = function (_cag, cutterradius) {\r\n  let cag = _cag.canonicalized()\r\n  // for each vertex determine the 'incoming' side and 'outgoing' side:\r\n  let pointmap = {} // tag => {pos: coord, from: [], to: []}\r\n  cag.sides.map(function (side) {\r\n    if (!(side.vertex0.getTag() in pointmap)) {\r\n      pointmap[side.vertex0.getTag()] = {\r\n        pos: side.vertex0.pos,\r\n        from: [],\r\n        to: []\r\n      }\r\n    }\r\n    pointmap[side.vertex0.getTag()].to.push(side.vertex1.pos)\r\n    if (!(side.vertex1.getTag() in pointmap)) {\r\n      pointmap[side.vertex1.getTag()] = {\r\n        pos: side.vertex1.pos,\r\n        from: [],\r\n        to: []\r\n      }\r\n    }\r\n    pointmap[side.vertex1.getTag()].from.push(side.vertex0.pos)\r\n  })\r\n          // overcut all sharp corners:\r\n  let cutouts = []\r\n  for (let pointtag in pointmap) {\r\n    let pointobj = pointmap[pointtag]\r\n    if ((pointobj.from.length === 1) && (pointobj.to.length === 1)) {\r\n                  // ok, 1 incoming side and 1 outgoing side:\r\n      let fromcoord = pointobj.from[0]\r\n      let pointcoord = pointobj.pos\r\n      let tocoord = pointobj.to[0]\r\n      let v1 = pointcoord.minus(fromcoord).unit()\r\n      let v2 = tocoord.minus(pointcoord).unit()\r\n      let crossproduct = v1.cross(v2)\r\n      let isInnerCorner = (crossproduct < 0.001)\r\n      if (isInnerCorner) {\r\n                      // yes it's a sharp corner:\r\n        let alpha = v2.angleRadians() - v1.angleRadians() + Math.PI\r\n        if (alpha < 0) {\r\n          alpha += 2 * Math.PI\r\n        } else if (alpha >= 2 * Math.PI) {\r\n          alpha -= 2 * Math.PI\r\n        }\r\n        let midvector = v2.minus(v1).unit()\r\n        let circlesegmentangle = 30 / 180 * Math.PI // resolution of the circle: segments of 30 degrees\r\n                      // we need to increase the radius slightly so that our imperfect circle will contain a perfect circle of cutterradius\r\n        let radiuscorrected = cutterradius / Math.cos(circlesegmentangle / 2)\r\n        let circlecenter = pointcoord.plus(midvector.times(radiuscorrected))\r\n                      // we don't need to create a full circle; a pie is enough. Find the angles for the pie:\r\n        let startangle = alpha + midvector.angleRadians()\r\n        let deltaangle = 2 * (Math.PI - alpha)\r\n        let numsteps = 2 * Math.ceil(deltaangle / circlesegmentangle / 2) // should be even\r\n                      // build the pie:\r\n        let points = [circlecenter]\r\n        for (let i = 0; i <= numsteps; i++) {\r\n          let angle = startangle + i / numsteps * deltaangle\r\n          let p = Vector2D.fromAngleRadians(angle).times(radiuscorrected).plus(circlecenter)\r\n          points.push(p)\r\n        }\r\n        cutouts.push(fromPoints(points))\r\n      }\r\n    }\r\n  }\r\n  return cag.subtract(cutouts)\r\n}\r\n\r\nmodule.exports = {lieFlat, getTransformationToFlatLying, getTransformationAndInverseTransformationToFlatLying, overCutInsideCorners}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/ops-cnc.js?");

/***/ }),

/***/ "../../convert/jscad/src/api/ops-cuts.js":
/*!******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/ops-cuts.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {EPS} = __webpack_require__(/*! ../core/constants */ \"../../convert/jscad/src/core/constants.js\")\r\nconst Plane = __webpack_require__(/*! ../core/math/Plane */ \"../../convert/jscad/src/core/math/Plane.js\")\r\nconst Vector2 = __webpack_require__(/*! ../core/math/Vector2 */ \"../../convert/jscad/src/core/math/Vector2.js\")\r\nconst Vertex3 = __webpack_require__(/*! ../core/math/Vertex3 */ \"../../convert/jscad/src/core/math/Vertex3.js\")\r\nconst Polygon3 = __webpack_require__(/*! ../core/math/Polygon3 */ \"../../convert/jscad/src/core/math/Polygon3.js\")\r\nconst OrthoNormalBasis = __webpack_require__(/*! ../core/math/OrthoNormalBasis */ \"../../convert/jscad/src/core/math/OrthoNormalBasis.js\")\r\n\r\n/** cuts a csg along a orthobasis\r\n * @param  {CSG} csg the csg object to cut\r\n * @param  {Orthobasis} orthobasis the orthobasis to cut along\r\n */\r\nconst sectionCut = function (csg, orthobasis) {\r\n  let plane1 = orthobasis.plane\r\n  let plane2 = orthobasis.plane.flipped()\r\n  plane1 = new Plane(plane1.normal, plane1.w)\r\n  plane2 = new Plane(plane2.normal, plane2.w + (5 * EPS))\r\n  let cut3d = csg.cutByPlane(plane1)\r\n  cut3d = cut3d.cutByPlane(plane2)\r\n  return cut3d.projectToOrthoNormalBasis(orthobasis)\r\n}\r\n\r\n/** Cut the solid by a plane. Returns the solid on the back side of the plane\r\n * @param  {Plane} plane\r\n * @returns {CSG} the solid on the back side of the plane\r\n */\r\nconst cutByPlane = function (csg, plane) {\r\n  if (csg.polygons.length === 0) {\r\n    const CSG = __webpack_require__(/*! ../core/CSG */ \"../../convert/jscad/src/core/CSG.js\") // FIXME: circular dependency ! CSG => cutByPlane => CSG\r\n    return new CSG()\r\n  }\r\n  // Ideally we would like to do an intersection with a polygon of inifinite size\r\n  // but this is not supported by our implementation. As a workaround, we will create\r\n  // a cube, with one face on the plane, and a size larger enough so that the entire\r\n  // solid fits in the cube.\r\n  // find the max distance of any vertex to the center of the plane:\r\n  let planecenter = plane.normal.times(plane.w)\r\n  let maxdistance = 0\r\n  csg.polygons.map(function (polygon) {\r\n    polygon.vertices.map(function (vertex) {\r\n      let distance = vertex.pos.distanceToSquared(planecenter)\r\n      if (distance > maxdistance) maxdistance = distance\r\n    })\r\n  })\r\n  maxdistance = Math.sqrt(maxdistance)\r\n  maxdistance *= 1.01 // make sure it's really larger\r\n  // Now build a polygon on the plane, at any point farther than maxdistance from the plane center:\r\n  let vertices = []\r\n  let orthobasis = new OrthoNormalBasis(plane)\r\n  vertices.push(new Vertex3(orthobasis.to3D(new Vector2(maxdistance, -maxdistance))))\r\n  vertices.push(new Vertex3(orthobasis.to3D(new Vector2(-maxdistance, -maxdistance))))\r\n  vertices.push(new Vertex3(orthobasis.to3D(new Vector2(-maxdistance, maxdistance))))\r\n  vertices.push(new Vertex3(orthobasis.to3D(new Vector2(maxdistance, maxdistance))))\r\n  const polygon = new Polygon3(vertices, null, plane.flipped())\r\n\r\n  // and extrude the polygon into a cube, backwards of the plane:\r\n  const cube = polygon.extrude(plane.normal.times(-maxdistance))\r\n\r\n  // Now we can do the intersection:\r\n  let result = csg.intersect(cube)\r\n  result.properties = csg.properties // keep original properties\r\n  return result\r\n}\r\n\r\nmodule.exports = {sectionCut, cutByPlane}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/ops-cuts.js?");

/***/ }),

/***/ "../../convert/jscad/src/api/ops-expandContract.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/ops-expandContract.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\r\nconst {EPS, angleEPS} = __webpack_require__(/*! ../core/constants */ \"../../convert/jscad/src/core/constants.js\")\r\nconst Vertex = __webpack_require__(/*! ../core/math/Vertex3 */ \"../../convert/jscad/src/core/math/Vertex3.js\")\r\nconst Vector2D = __webpack_require__(/*! ../core/math/Vector2 */ \"../../convert/jscad/src/core/math/Vector2.js\")\r\nconst Polygon = __webpack_require__(/*! ../core/math/Polygon3 */ \"../../convert/jscad/src/core/math/Polygon3.js\")\r\nconst {fnNumberSort, isCSG} = __webpack_require__(/*! ../core/utils */ \"../../convert/jscad/src/core/utils.js\")\r\nconst {fromPoints, fromPointsNoCheck} = __webpack_require__(/*! ../core/CAGFactories */ \"../../convert/jscad/src/core/CAGFactories.js\")\r\n\r\nconst expand = function (shape, radius, resolution) {\r\n  let result\r\n  if (isCSG(shape)) {\r\n    result = shape.union(expandedShellOfCCSG(shape, radius, resolution))\r\n    result = result.reTesselated()\r\n    result.properties = shape.properties // keep original properties\r\n  } else {\r\n    result = shape.union(expandedShellOfCAG(shape, radius, resolution))\r\n  }\r\n  return result\r\n}\r\n\r\nconst contract = function (shape, radius, resolution) {\r\n  let result\r\n  if (isCSG(shape)) {\r\n    result = shape.subtract(expandedShellOfCCSG(shape, radius, resolution))\r\n    result = result.reTesselated()\r\n    result.properties = shape.properties // keep original properties\r\n  } else {\r\n    result = shape.subtract(expandedShellOfCAG(shape, radius, resolution))\r\n  }\r\n  return result\r\n}\r\n\r\nconst expandedShellOfCAG = function (_cag, radius, resolution) {\r\n  const CAG = __webpack_require__(/*! ../core/CAG */ \"../../convert/jscad/src/core/CAG.js\") // FIXME, circular dependency !!\r\n  resolution = resolution || 8\r\n  if (resolution < 4) resolution = 4\r\n  let cags = []\r\n  let pointmap = {}\r\n  let cag = _cag.canonicalized()\r\n  cag.sides.map(function (side) {\r\n    let d = side.vertex1.pos.minus(side.vertex0.pos)\r\n    let dl = d.length()\r\n    if (dl > EPS) {\r\n      d = d.times(1.0 / dl)\r\n      let normal = d.normal().times(radius)\r\n      let shellpoints = [\r\n        side.vertex1.pos.plus(normal),\r\n        side.vertex1.pos.minus(normal),\r\n        side.vertex0.pos.minus(normal),\r\n        side.vertex0.pos.plus(normal)\r\n      ]\r\n      //      let newcag = fromPointsNoCheck(shellpoints);\r\n      let newcag = fromPoints(shellpoints)\r\n      cags.push(newcag)\r\n      for (let step = 0; step < 2; step++) {\r\n        let p1 = (step === 0) ? side.vertex0.pos : side.vertex1.pos\r\n        let p2 = (step === 0) ? side.vertex1.pos : side.vertex0.pos\r\n        let tag = p1.x + ' ' + p1.y\r\n        if (!(tag in pointmap)) {\r\n          pointmap[tag] = []\r\n        }\r\n        pointmap[tag].push({\r\n          'p1': p1,\r\n          'p2': p2\r\n        })\r\n      }\r\n    }\r\n  })\r\n  for (let tag in pointmap) {\r\n    let m = pointmap[tag]\r\n    let angle1, angle2\r\n    let pcenter = m[0].p1\r\n    if (m.length === 2) {\r\n      let end1 = m[0].p2\r\n      let end2 = m[1].p2\r\n      angle1 = end1.minus(pcenter).angleDegrees()\r\n      angle2 = end2.minus(pcenter).angleDegrees()\r\n      if (angle2 < angle1) angle2 += 360\r\n      if (angle2 >= (angle1 + 360)) angle2 -= 360\r\n      if (angle2 < angle1 + 180) {\r\n        let t = angle2\r\n        angle2 = angle1 + 360\r\n        angle1 = t\r\n      }\r\n      angle1 += 90\r\n      angle2 -= 90\r\n    } else {\r\n      angle1 = 0\r\n      angle2 = 360\r\n    }\r\n    let fullcircle = (angle2 > angle1 + 359.999)\r\n    if (fullcircle) {\r\n      angle1 = 0\r\n      angle2 = 360\r\n    }\r\n    if (angle2 > (angle1 + angleEPS)) {\r\n      let points = []\r\n      if (!fullcircle) {\r\n        points.push(pcenter)\r\n      }\r\n      let numsteps = Math.round(resolution * (angle2 - angle1) / 360)\r\n      if (numsteps < 1) numsteps = 1\r\n      for (let step = 0; step <= numsteps; step++) {\r\n        let angle = angle1 + step / numsteps * (angle2 - angle1)\r\n        if (step === numsteps) angle = angle2 // prevent rounding errors\r\n        let point = pcenter.plus(Vector2D.fromAngleDegrees(angle).times(radius))\r\n        if ((!fullcircle) || (step > 0)) {\r\n          points.push(point)\r\n        }\r\n      }\r\n      let newcag = fromPointsNoCheck(points)\r\n      cags.push(newcag)\r\n    }\r\n  }\r\n  let result = new CAG()\r\n  result = result.union(cags)\r\n  return result\r\n}\r\n\r\n/**\r\n * Create the expanded shell of the solid:\r\n * All faces are extruded to get a thickness of 2*radius\r\n * Cylinders are constructed around every side\r\n * Spheres are placed on every vertex\r\n * unionWithThis: if true, the resulting solid will be united with 'this' solid;\r\n * the result is a true expansion of the solid\r\n * If false, returns only the shell\r\n * @param  {Float} radius\r\n * @param  {Integer} resolution\r\n * @param  {Boolean} unionWithThis\r\n */\r\nconst expandedShellOfCCSG = function (_csg, radius, resolution, unionWithThis) {\r\n  const CSG = __webpack_require__(/*! ../core/CSG */ \"../../convert/jscad/src/core/CSG.js\") // FIXME: circular dependency ! CSG => this => CSG\r\n  const {fromPolygons} = __webpack_require__(/*! ../core/CSGFactories */ \"../../convert/jscad/src/core/CSGFactories.js\") // FIXME: circular dependency !\r\n  // const {sphere} = require('./primitives3d') // FIXME: circular dependency !\r\n  let csg = _csg.reTesselated()\r\n  let result\r\n  if (unionWithThis) {\r\n    result = csg\r\n  } else {\r\n    result = new CSG()\r\n  }\r\n\r\n  // first extrude all polygons:\r\n  csg.polygons.map(function (polygon) {\r\n    let extrudevector = polygon.plane.normal.unit().times(2 * radius)\r\n    let translatedpolygon = polygon.translate(extrudevector.times(-0.5))\r\n    let extrudedface = translatedpolygon.extrude(extrudevector)\r\n    result = result.unionSub(extrudedface, false, false)\r\n  })\r\n\r\n    // Make a list of all unique vertex pairs (i.e. all sides of the solid)\r\n    // For each vertex pair we collect the following:\r\n    //   v1: first coordinate\r\n    //   v2: second coordinate\r\n    //   planenormals: array of normal vectors of all planes touching this side\r\n  let vertexpairs = {} // map of 'vertex pair tag' to {v1, v2, planenormals}\r\n  csg.polygons.map(function (polygon) {\r\n    let numvertices = polygon.vertices.length\r\n    let prevvertex = polygon.vertices[numvertices - 1]\r\n    let prevvertextag = prevvertex.getTag()\r\n    for (let i = 0; i < numvertices; i++) {\r\n      let vertex = polygon.vertices[i]\r\n      let vertextag = vertex.getTag()\r\n      let vertextagpair\r\n      if (vertextag < prevvertextag) {\r\n        vertextagpair = vertextag + '-' + prevvertextag\r\n      } else {\r\n        vertextagpair = prevvertextag + '-' + vertextag\r\n      }\r\n      let obj\r\n      if (vertextagpair in vertexpairs) {\r\n        obj = vertexpairs[vertextagpair]\r\n      } else {\r\n        obj = {\r\n          v1: prevvertex,\r\n          v2: vertex,\r\n          planenormals: []\r\n        }\r\n        vertexpairs[vertextagpair] = obj\r\n      }\r\n      obj.planenormals.push(polygon.plane.normal)\r\n\r\n      prevvertextag = vertextag\r\n      prevvertex = vertex\r\n    }\r\n  })\r\n\r\n  // now construct a cylinder on every side\r\n  // The cylinder is always an approximation of a true cylinder: it will have <resolution> polygons\r\n  // around the sides. We will make sure though that the cylinder will have an edge at every\r\n  // face that touches this side. This ensures that we will get a smooth fill even\r\n  // if two edges are at, say, 10 degrees and the resolution is low.\r\n  // Note: the result is not retesselated yet but it really should be!\r\n  for (let vertextagpair in vertexpairs) {\r\n    let vertexpair = vertexpairs[vertextagpair]\r\n    let startpoint = vertexpair.v1.pos\r\n    let endpoint = vertexpair.v2.pos\r\n                // our x,y and z vectors:\r\n    let zbase = endpoint.minus(startpoint).unit()\r\n    let xbase = vertexpair.planenormals[0].unit()\r\n    let ybase = xbase.cross(zbase)\r\n\r\n      // make a list of angles that the cylinder should traverse:\r\n    let angles = []\r\n\r\n    // first of all equally spaced around the cylinder:\r\n    for (let i = 0; i < resolution; i++) {\r\n      angles.push(i * Math.PI * 2 / resolution)\r\n    }\r\n\r\n    // and also at every normal of all touching planes:\r\n    for (let i = 0, iMax = vertexpair.planenormals.length; i < iMax; i++) {\r\n      let planenormal = vertexpair.planenormals[i]\r\n      let si = ybase.dot(planenormal)\r\n      let co = xbase.dot(planenormal)\r\n      let angle = Math.atan2(si, co)\r\n\r\n      if (angle < 0) angle += Math.PI * 2\r\n      angles.push(angle)\r\n      angle = Math.atan2(-si, -co)\r\n      if (angle < 0) angle += Math.PI * 2\r\n      angles.push(angle)\r\n    }\r\n\r\n    // this will result in some duplicate angles but we will get rid of those later.\r\n    // Sort:\r\n    angles = angles.sort(fnNumberSort)\r\n\r\n    // Now construct the cylinder by traversing all angles:\r\n    let numangles = angles.length\r\n    let prevp1\r\n    let prevp2\r\n    let startfacevertices = []\r\n    let endfacevertices = []\r\n    let polygons = []\r\n    for (let i = -1; i < numangles; i++) {\r\n      let angle = angles[(i < 0) ? (i + numangles) : i]\r\n      let si = Math.sin(angle)\r\n      let co = Math.cos(angle)\r\n      let p = xbase.times(co * radius).plus(ybase.times(si * radius))\r\n      let p1 = startpoint.plus(p)\r\n      let p2 = endpoint.plus(p)\r\n      let skip = false\r\n      if (i >= 0) {\r\n        if (p1.distanceTo(prevp1) < EPS) {\r\n          skip = true\r\n        }\r\n      }\r\n      if (!skip) {\r\n        if (i >= 0) {\r\n          startfacevertices.push(new Vertex(p1))\r\n          endfacevertices.push(new Vertex(p2))\r\n          let polygonvertices = [\r\n            new Vertex(prevp2),\r\n            new Vertex(p2),\r\n            new Vertex(p1),\r\n            new Vertex(prevp1)\r\n          ]\r\n          let polygon = new Polygon(polygonvertices)\r\n          polygons.push(polygon)\r\n        }\r\n        prevp1 = p1\r\n        prevp2 = p2\r\n      }\r\n    }\r\n    endfacevertices.reverse()\r\n    polygons.push(new Polygon(startfacevertices))\r\n    polygons.push(new Polygon(endfacevertices))\r\n    let cylinder = fromPolygons(polygons)\r\n    result = result.unionSub(cylinder, false, false)\r\n  }\r\n\r\n        // make a list of all unique vertices\r\n        // For each vertex we also collect the list of normals of the planes touching the vertices\r\n  let vertexmap = {}\r\n  csg.polygons.map(function (polygon) {\r\n    polygon.vertices.map(function (vertex) {\r\n      let vertextag = vertex.getTag()\r\n      let obj\r\n      if (vertextag in vertexmap) {\r\n        obj = vertexmap[vertextag]\r\n      } else {\r\n        obj = {\r\n          pos: vertex.pos,\r\n          normals: []\r\n        }\r\n        vertexmap[vertextag] = obj\r\n      }\r\n      obj.normals.push(polygon.plane.normal)\r\n    })\r\n  })\r\n\r\n        // and build spheres at each vertex\r\n        // We will try to set the x and z axis to the normals of 2 planes\r\n        // This will ensure that our sphere tesselation somewhat matches 2 planes\r\n  for (let vertextag in vertexmap) {\r\n    let vertexobj = vertexmap[vertextag]\r\n            // use the first normal to be the x axis of our sphere:\r\n    let xaxis = vertexobj.normals[0].unit()\r\n            // and find a suitable z axis. We will use the normal which is most perpendicular to the x axis:\r\n    let bestzaxis = null\r\n    let bestzaxisorthogonality = 0\r\n    for (let i = 1; i < vertexobj.normals.length; i++) {\r\n      let normal = vertexobj.normals[i].unit()\r\n      let cross = xaxis.cross(normal)\r\n      let crosslength = cross.length()\r\n      if (crosslength > 0.05) {\r\n        if (crosslength > bestzaxisorthogonality) {\r\n          bestzaxisorthogonality = crosslength\r\n          bestzaxis = normal\r\n        }\r\n      }\r\n    }\r\n    if (!bestzaxis) {\r\n      bestzaxis = xaxis.randomNonParallelVector()\r\n    }\r\n    let yaxis = xaxis.cross(bestzaxis).unit()\r\n    let zaxis = yaxis.cross(xaxis)\r\n    let _sphere = CSG.sphere({\r\n      center: vertexobj.pos,\r\n      radius: radius,\r\n      resolution: resolution,\r\n      axes: [xaxis, yaxis, zaxis]\r\n    })\r\n    result = result.unionSub(_sphere, false, false)\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nmodule.exports = {\r\n  expand,\r\n  contract,\r\n  expandedShellOfCAG,\r\n  expandedShellOfCCSG\r\n}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/ops-expandContract.js?");

/***/ }),

/***/ "../../convert/jscad/src/api/ops-extrusions.js":
/*!************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/ops-extrusions.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {EPS, defaultResolution3D} = __webpack_require__(/*! ../core/constants */ \"../../convert/jscad/src/core/constants.js\")\r\nconst OrthoNormalBasis = __webpack_require__(/*! ../core/math/OrthoNormalBasis */ \"../../convert/jscad/src/core/math/OrthoNormalBasis.js\")\r\nconst {parseOptionAs3DVector, parseOptionAsBool, parseOptionAsFloat, parseOptionAsInt} = __webpack_require__(/*! ./optionParsers */ \"../../convert/jscad/src/api/optionParsers.js\")\r\nconst Vector3D = __webpack_require__(/*! ../core/math/Vector3 */ \"../../convert/jscad/src/core/math/Vector3.js\")\r\nconst Matrix4 = __webpack_require__(/*! ../core/math/Matrix4 */ \"../../convert/jscad/src/core/math/Matrix4.js\")\r\nconst Path2D = __webpack_require__(/*! ../core/math/Path2 */ \"../../convert/jscad/src/core/math/Path2.js\")\r\nconst {Connector} = __webpack_require__(/*! ../core/connectors */ \"../../convert/jscad/src/core/connectors.js\")\r\nconst {fromPolygons} = __webpack_require__(/*! ../core/CSGFactories */ \"../../convert/jscad/src/core/CSGFactories.js\")\r\nconst {cagToPointsArray, clamp, rightMultiply1x3VectorToArray, polygonFromPoints} = __webpack_require__(/*! ./helpers */ \"../../convert/jscad/src/api/helpers.js\")\r\nconst {fromPoints} = __webpack_require__(/*! ../core/CAGFactories */ \"../../convert/jscad/src/core/CAGFactories.js\")\r\n\r\n/** extrude the CAG in a certain plane.\r\n * Giving just a plane is not enough, multiple different extrusions in the same plane would be possible\r\n * by rotating around the plane's origin. An additional right-hand vector should be specified as well,\r\n * and this is exactly a OrthoNormalBasis.\r\n * @param  {CAG} cag the cag to extrude\r\n * @param  {Orthonormalbasis} orthonormalbasis characterizes the plane in which to extrude\r\n * @param  {Float} depth thickness of the extruded shape. Extrusion is done upwards from the plane\r\n *  (unless symmetrical option is set, see below)\r\n * @param  {Object} [options] - options for construction\r\n * @param {Boolean} [options.symmetrical=true] - extrude symmetrically in two directions about the plane\r\n */\r\nconst extrudeInOrthonormalBasis = function (cag, orthonormalbasis, depth, options) {\r\n      // first extrude in the regular Z plane:\r\n  if (!(orthonormalbasis instanceof OrthoNormalBasis)) {\r\n    throw new Error('extrudeInPlane: the first parameter should be a OrthoNormalBasis')\r\n  }\r\n  let extruded = cag.extrude({\r\n    offset: [0, 0, depth]\r\n  })\r\n  if (parseOptionAsBool(options, 'symmetrical', false)) {\r\n    extruded = extruded.translate([0, 0, -depth / 2])\r\n  }\r\n  let matrix = orthonormalbasis.getInverseProjectionMatrix()\r\n  extruded = extruded.transform(matrix)\r\n  return extruded\r\n}\r\n\r\n/** Extrude in a standard cartesian plane, specified by two axis identifiers. Each identifier can be\r\n * one of [\"X\",\"Y\",\"Z\",\"-X\",\"-Y\",\"-Z\"]\r\n * The 2d x axis will map to the first given 3D axis, the 2d y axis will map to the second.\r\n * See OrthoNormalBasis.GetCartesian for details.\r\n * @param  {CAG} cag the cag to extrude\r\n * @param  {String} axis1 the first axis\r\n * @param  {String} axis2 the second axis\r\n * @param  {Float} depth thickness of the extruded shape. Extrusion is done upwards from the plane\r\n * @param  {Object} [options] - options for construction\r\n * @param {Boolean} [options.symmetrical=true] - extrude symmetrically in two directions about the plane\r\n */\r\nconst extrudeInPlane = function (cag, axis1, axis2, depth, options) {\r\n  return extrudeInOrthonormalBasis(cag, OrthoNormalBasis.GetCartesian(axis1, axis2), depth, options)\r\n}\r\n\r\n/** linear extrusion of 2D shape, with optional twist\r\n * @param  {CAG} cag the cag to extrude\r\n * @param  {Object} [options] - options for construction\r\n * @param {Array} [options.offset=[0,0,1]] - The 2d shape is placed in in z=0 plane and extruded into direction <offset>\r\n * (a 3D vector as a 3 component array)\r\n * @param {Boolean} [options.twiststeps=defaultResolution3D] - twiststeps determines the resolution of the twist (should be >= 1)\r\n * @param {Boolean} [options.twistangle=0] - twistangle The final face is rotated <twistangle> degrees. Rotation is done around the origin of the 2d shape (i.e. x=0, y=0)\r\n * @returns {CSG} the extrude shape, as a CSG object\r\n * @example extruded=cag.extrude({offset: [0,0,10], twistangle: 360, twiststeps: 100});\r\n*/\r\nconst extrude = function (cag, options) {\r\n  const CSG = __webpack_require__(/*! ../core/CSG */ \"../../convert/jscad/src/core/CSG.js\") // FIXME: circular dependencies CAG=>CSG=>CAG\r\n  if (cag.sides.length === 0) {\r\n    // empty! : FIXME: should this throw ?\r\n    return new CSG()\r\n  }\r\n  let offsetVector = parseOptionAs3DVector(options, 'offset', [0, 0, 1])\r\n  let twistangle = parseOptionAsFloat(options, 'twistangle', 0)\r\n  let twiststeps = parseOptionAsInt(options, 'twiststeps', defaultResolution3D)\r\n  if (offsetVector.z === 0) {\r\n    throw new Error('offset cannot be orthogonal to Z axis')\r\n  }\r\n  if (twistangle === 0 || twiststeps < 1) {\r\n    twiststeps = 1\r\n  }\r\n  let normalVector = Vector3D.Create(0, 1, 0)\r\n\r\n  let polygons = []\r\n  // bottom and top\r\n  polygons = polygons.concat(cag._toPlanePolygons({\r\n    translation: [0, 0, 0],\r\n    normalVector: normalVector,\r\n    flipped: !(offsetVector.z < 0)}\r\n  ))\r\n  polygons = polygons.concat(cag._toPlanePolygons({\r\n    translation: offsetVector,\r\n    normalVector: normalVector.rotateZ(twistangle),\r\n    flipped: offsetVector.z < 0}))\r\n  // walls\r\n  for (let i = 0; i < twiststeps; i++) {\r\n    let c1 = new Connector(offsetVector.times(i / twiststeps), [0, 0, offsetVector.z],\r\n              normalVector.rotateZ(i * twistangle / twiststeps))\r\n    let c2 = new Connector(offsetVector.times((i + 1) / twiststeps), [0, 0, offsetVector.z],\r\n              normalVector.rotateZ((i + 1) * twistangle / twiststeps))\r\n    polygons = polygons.concat(cag._toWallPolygons({toConnector1: c1, toConnector2: c2}))\r\n  }\r\n\r\n  return fromPolygons(polygons)\r\n}\r\n\r\n// THIS IS AN OLD untested !!! version of rotate extrude\r\n/** Extrude to into a 3D solid by rotating the origin around the Y axis.\r\n * (and turning everything into XY plane)\r\n * @param {Object} options - options for construction\r\n * @param {Number} [options.angle=360] - angle of rotation\r\n * @param {Number} [options.resolution=defaultResolution3D] - number of polygons per 360 degree revolution\r\n * @returns {CSG} new 3D solid\r\n */\r\nconst rotateExtrude = function (cag, options) { // FIXME options should be optional\r\n  let alpha = parseOptionAsFloat(options, 'angle', 360)\r\n  let resolution = parseOptionAsInt(options, 'resolution', defaultResolution3D)\r\n\r\n  alpha = alpha > 360 ? alpha % 360 : alpha\r\n  let origin = [0, 0, 0]\r\n  let axisV = Vector3D.Create(0, 1, 0)\r\n  let normalV = [0, 0, 1]\r\n  let polygons = []\r\n  // planes only needed if alpha > 0\r\n  let connS = new Connector(origin, axisV, normalV)\r\n  if (alpha > 0 && alpha < 360) {\r\n          // we need to rotate negative to satisfy wall function condition of\r\n          // building in the direction of axis vector\r\n    let connE = new Connector(origin, axisV.rotateZ(-alpha), normalV)\r\n    polygons = polygons.concat(\r\n              cag._toPlanePolygons({toConnector: connS, flipped: true}))\r\n    polygons = polygons.concat(\r\n              cag._toPlanePolygons({toConnector: connE}))\r\n  }\r\n  let connT1 = connS\r\n  let connT2\r\n  let step = alpha / resolution\r\n  for (let a = step; a <= alpha + EPS; a += step) { // FIXME Should this be angelEPS?\r\n    connT2 = new Connector(origin, axisV.rotateZ(-a), normalV)\r\n    polygons = polygons.concat(cag._toWallPolygons(\r\n              {toConnector1: connT1, toConnector2: connT2}))\r\n    connT1 = connT2\r\n  }\r\n  return fromPolygons(polygons).reTesselated()\r\n}\r\n\r\n// FIXME: right now linear & rotate extrude take params first, while rectangular_extrude\r\n// takes params second ! confusing and incoherent ! needs to be changed (BREAKING CHANGE !)\r\n\r\n/** linear extrusion of the input 2d shape\r\n * @param {Object} [options] - options for construction\r\n * @param {Float} [options.height=1] - height of the extruded shape\r\n * @param {Integer} [options.slices=10] - number of intermediary steps/slices\r\n * @param {Integer} [options.twist=0] - angle (in degrees to twist the extusion by)\r\n * @param {Boolean} [options.center=false] - whether to center extrusion or not\r\n * @param {CAG} baseShape input 2d shape\r\n * @returns {CSG} new extruded shape\r\n *\r\n * @example\r\n * let revolved = linear_extrude({height: 10}, square())\r\n */\r\nfunction linear_extrude (params, baseShape) {\r\n  const defaults = {\r\n    height: 1,\r\n    slices: 10,\r\n    twist: 0,\r\n    center: false\r\n  }\r\n  /* convexity = 10, */\r\n  const {height, twist, slices, center} = Object.assign({}, defaults, params)\r\n\r\n  // if(params.convexity) convexity = params.convexity      // abandoned\r\n  let output = baseShape.extrude({offset: [0, 0, height], twistangle: twist, twiststeps: slices})\r\n  if (center === true) {\r\n    const b = output.getBounds() // b[0] = min, b[1] = max\r\n    const offset = (b[1].plus(b[0])).times(-0.5)\r\n    output = output.translate(offset)\r\n  }\r\n  return output\r\n}\r\n\r\n/** rotate extrusion / revolve of the given 2d shape\r\n * @param {Object} [options] - options for construction\r\n * @param {Integer} [options.fn=1] - resolution/number of segments of the extrusion\r\n * @param {Float} [options.startAngle=1] - start angle of the extrusion, in degrees\r\n * @param {Float} [options.angle=1] - angle of the extrusion, in degrees\r\n * @param {Float} [options.overflow='cap'] - what to do with points outside of bounds (+ / - x) :\r\n * defaults to capping those points to 0 (only supported behaviour for now)\r\n * @param {CAG} baseShape input 2d shape\r\n * @returns {CSG} new extruded shape\r\n *\r\n * @example\r\n * let revolved = rotate_extrude({fn: 10}, square())\r\n */\r\nfunction rotate_extrude (params, baseShape) {\r\n  // note, we should perhaps alias this to revolve() as well\r\n  const defaults = {\r\n    fn: 32,\r\n    startAngle: 0,\r\n    angle: 360,\r\n    overflow: 'cap'\r\n  }\r\n  params = Object.assign({}, defaults, params)\r\n  let {fn, startAngle, angle, overflow} = params\r\n  if (overflow !== 'cap') {\r\n    throw new Error('only capping of overflowing points is supported !')\r\n  }\r\n\r\n  if (arguments.length < 2) { // FIXME: what the hell ??? just put params second !\r\n    baseShape = params\r\n  }\r\n  // are we dealing with a positive or negative angle (for normals flipping)\r\n  const flipped = angle > 0\r\n  // limit actual angle between 0 & 360, regardless of direction\r\n  const totalAngle = flipped ? clamp((startAngle + angle), 0, 360) : clamp((startAngle + angle), -360, 0)\r\n  // adapt to the totalAngle : 1 extra segment per 45 degs if not 360 deg extrusion\r\n  // needs to be at least one and higher then the input resolution\r\n  const segments = Math.max(\r\n    Math.floor(Math.abs(totalAngle) / 45),\r\n    1,\r\n    fn\r\n  )\r\n  // maximum distance per axis between two points before considering them to be the same\r\n  const overlapTolerance = 0.00001\r\n  // convert baseshape to just an array of points, easier to deal with\r\n  let shapePoints = cagToPointsArray(baseShape)\r\n\r\n  // determine if the rotate_extrude can be computed in the first place\r\n  // ie all the points have to be either x > 0 or x < 0\r\n\r\n  // generic solution to always have a valid solid, even if points go beyond x/ -x\r\n  // 1. split points up between all those on the 'left' side of the axis (x<0) & those on the 'righ' (x>0)\r\n  // 2. for each set of points do the extrusion operation IN OPOSITE DIRECTIONS\r\n  // 3. union the two resulting solids\r\n\r\n  // 1. alt : OR : just cap of points at the axis ?\r\n\r\n  // console.log('shapePoints BEFORE', shapePoints, baseShape.sides)\r\n\r\n  const pointsWithNegativeX = shapePoints.filter(x => x[0] < 0)\r\n  const pointsWithPositiveX = shapePoints.filter(x => x[0] >= 0)\r\n  const arePointsWithNegAndPosX = pointsWithNegativeX.length > 0 && pointsWithPositiveX.length > 0\r\n\r\n  if (arePointsWithNegAndPosX && overflow === 'cap') {\r\n    if (pointsWithNegativeX.length > pointsWithPositiveX.length) {\r\n      shapePoints = shapePoints.map(function (point) {\r\n        return [Math.min(point[0], 0), point[1]]\r\n      })\r\n    } else if (pointsWithPositiveX.length >= pointsWithNegativeX.length) {\r\n      shapePoints = shapePoints.map(function (point) {\r\n        return [Math.max(point[0], 0), point[1]]\r\n      })\r\n    }\r\n  }\r\n\r\n  // console.log('negXs', pointsWithNegativeX, 'pointsWithPositiveX', pointsWithPositiveX, 'arePointsWithNegAndPosX', arePointsWithNegAndPosX)\r\n //  console.log('shapePoints AFTER', shapePoints, baseShape.sides)\r\n\r\n  let polygons = []\r\n\r\n  // for each of the intermediary steps in the extrusion\r\n  for (let i = 1; i < segments + 1; i++) {\r\n    // for each side of the 2d shape\r\n    for (let j = 0; j < shapePoints.length - 1; j++) {\r\n      // 2 points of a side\r\n      const curPoint = shapePoints[j]\r\n      const nextPoint = shapePoints[j + 1]\r\n\r\n      // compute matrix for current and next segment angle\r\n      let prevMatrix = Matrix4.rotationZ((i - 1) / segments * angle + startAngle)\r\n      let curMatrix = Matrix4.rotationZ(i / segments * angle + startAngle)\r\n\r\n      const pointA = rightMultiply1x3VectorToArray(prevMatrix, [curPoint[0], 0, curPoint[1]])\r\n      const pointAP = rightMultiply1x3VectorToArray(curMatrix, [curPoint[0], 0, curPoint[1]])\r\n      const pointB = rightMultiply1x3VectorToArray(prevMatrix, [nextPoint[0], 0, nextPoint[1]])\r\n      const pointBP = rightMultiply1x3VectorToArray(curMatrix, [nextPoint[0], 0, nextPoint[1]])\r\n\r\n      // console.log(`point ${j} edge connecting ${j} to ${j + 1}`)\r\n      let overlappingPoints = false\r\n      if (Math.abs(pointA[0] - pointAP[0]) < overlapTolerance && Math.abs(pointB[1] - pointBP[1]) < overlapTolerance) {\r\n        // console.log('identical / overlapping points (from current angle and next one), what now ?')\r\n        overlappingPoints = true\r\n      }\r\n\r\n      // we do not generate a single quad because:\r\n      // 1. it does not allow eliminating unneeded triangles in case of overlapping points\r\n      // 2. the current cleanup routines of csg.js create degenerate shapes from those quads\r\n      // let polyPoints = [pointA, pointB, pointBP, pointAP]\r\n      // polygons.push(polygonFromPoints(polyPoints))\r\n\r\n      if (flipped) {\r\n        // CW\r\n        polygons.push(polygonFromPoints([pointA, pointB, pointBP]))\r\n        if (!overlappingPoints) {\r\n          polygons.push(polygonFromPoints([pointBP, pointAP, pointA]))\r\n        }\r\n      } else {\r\n        // CCW\r\n        if (!overlappingPoints) {\r\n          polygons.push(polygonFromPoints([pointA, pointAP, pointBP]))\r\n        }\r\n        polygons.push(polygonFromPoints([pointBP, pointB, pointA]))\r\n      }\r\n    }\r\n    // if we do not do a full extrusion, we want caps at both ends (closed volume)\r\n    if (Math.abs(angle) < 360) {\r\n      // we need to recreate the side with capped points where applicable\r\n      const sideShape = fromPoints(shapePoints)\r\n      const endMatrix = Matrix4.rotationX(90).multiply(\r\n        Matrix4.rotationZ(-startAngle)\r\n      )\r\n      const endCap = sideShape._toPlanePolygons({flipped: flipped})\r\n        .map(x => x.transform(endMatrix))\r\n\r\n      const startMatrix = Matrix4.rotationX(90).multiply(\r\n        Matrix4.rotationZ(-angle - startAngle)\r\n      )\r\n      const startCap = sideShape._toPlanePolygons({flipped: !flipped})\r\n        .map(x => x.transform(startMatrix))\r\n      polygons = polygons.concat(endCap).concat(startCap)\r\n    }\r\n  }\r\n  return fromPolygons(polygons).reTesselated().canonicalized()\r\n}\r\n\r\n/** rectangular extrusion of the given array of points\r\n * @param {Array} basePoints array of points (nested) to extrude from\r\n * layed out like [ [0,0], [10,0], [5,10], [0,10] ]\r\n * @param {Object} [options] - options for construction\r\n * @param {Float} [options.h=1] - height of the extruded shape\r\n * @param {Float} [options.w=10] - width of the extruded shape\r\n * @param {Integer} [options.fn=1] - resolution/number of segments of the extrusion\r\n * @param {Boolean} [options.closed=false] - whether to close the input path for the extrusion or not\r\n * @param {Boolean} [options.round=true] - whether to round the extrusion or not\r\n * @returns {CSG} new extruded shape\r\n *\r\n * @example\r\n * let revolved = rectangular_extrude({height: 10}, square())\r\n */\r\nfunction rectangular_extrude (basePoints, params) {\r\n  const defaults = {\r\n    w: 1,\r\n    h: 1,\r\n    fn: 8,\r\n    closed: false,\r\n    round: true\r\n  }\r\n  const {w, h, fn, closed, round} = Object.assign({}, defaults, params)\r\n  return new Path2D(basePoints, closed).rectangularExtrude(w, h, fn, round)\r\n}\r\n\r\nmodule.exports = {\r\n  extrudeInOrthonormalBasis,\r\n  extrudeInPlane,\r\n  extrude,\r\n  linear_extrude,\r\n  rotate_extrude,\r\n  rotateExtrude,\r\n  rectangular_extrude\r\n}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/ops-extrusions.js?");

/***/ }),

/***/ "../../convert/jscad/src/api/ops-transformations.js":
/*!*****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/ops-transformations.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Matrix4 = __webpack_require__(/*! ../core/math/Matrix4 */ \"../../convert/jscad/src/core/math/Matrix4.js\")\r\nconst Plane = __webpack_require__(/*! ../core/math/Plane */ \"../../convert/jscad/src/core/math/Plane.js\")\r\nconst Vector3 = __webpack_require__(/*! ../core/math/Vector3 */ \"../../convert/jscad/src/core/math/Vector3.js\")\r\nconst { union } = __webpack_require__(/*! ./ops-booleans */ \"../../convert/jscad/src/api/ops-booleans.js\")\r\nconst { fromPoints } = __webpack_require__(/*! ../core/CAGFactories */ \"../../convert/jscad/src/core/CAGFactories.js\")\r\nconst { isCAG } = __webpack_require__(/*! ../core/utils */ \"../../convert/jscad/src/core/utils.js\")\r\n// -- 3D transformations (OpenSCAD like notion)\r\n\r\n/** translate an object in 2D/3D space\r\n * @param {Object} vector - 3D vector to translate the given object(s) by\r\n * @param {Object(s)|Array} objects either a single or multiple CSG/CAG objects to translate\r\n * @returns {CSG} new CSG object , translated by the given amount\r\n *\r\n * @example\r\n * let movedSphere = translate([10,2,0], sphere())\r\n */\r\nfunction translate (vector, ...objects) {      // v, obj or array\r\n  // workaround needed to determine if we are dealing with an array of objects\r\n  const _objects = (objects.length >= 1 && objects[0].length) ? objects[0] : objects\r\n  let object = _objects[0]\r\n\r\n  if (_objects.length > 1) {\r\n    for (let i = 1; i < _objects.length; i++) { // FIXME/ why is union really needed ??\r\n      object = object.union(_objects[i])\r\n    }\r\n  }\r\n  return object.translate(vector)\r\n}\r\n\r\n/** scale an object in 2D/3D space\r\n * @param {Float|Array} scale - either an array or simple number to scale object(s) by\r\n * @param {Object(s)|Array} objects either a single or multiple CSG/CAG objects to scale\r\n * @returns {CSG} new CSG object , scaled by the given amount\r\n *\r\n * @example\r\n * let scaledSphere = scale([0.2,15,1], sphere())\r\n */\r\nfunction scale (scale, ...objects) {         // v, obj or array\r\n  const _objects = (objects.length >= 1 && objects[0].length) ? objects[0] : objects\r\n  let object = _objects[0]\r\n\r\n  if (_objects.length > 1) {\r\n    for (let i = 1; i < _objects.length; i++) { // FIXME/ why is union really needed ??\r\n      object = object.union(_objects[i])\r\n    }\r\n  }\r\n  return object.scale(scale)\r\n}\r\n\r\n/** rotate an object in 2D/3D space\r\n * @param {Float|Array} rotation - either an array or simple number to rotate object(s) by\r\n * @param {Object(s)|Array} objects either a single or multiple CSG/CAG objects to rotate\r\n * @returns {CSG} new CSG object , rotated by the given amount\r\n *\r\n * @example\r\n * let rotatedSphere = rotate([0.2,15,1], sphere())\r\n */\r\nfunction rotate () {\r\n  let o\r\n  let i\r\n  let v\r\n  let r = 1\r\n  let a = arguments\r\n  if (!a[0].length) {        // rotate(r,[x,y,z],o)\r\n    r = a[0]\r\n    v = a[1]\r\n    i = 2\r\n    if (a[2].length) { a = a[2]; i = 0 }\r\n  } else {                   // rotate([x,y,z],o)\r\n    v = a[0]\r\n    i = 1\r\n    if (a[1].length) { a = a[1]; i = 0 }\r\n  }\r\n  for (o = a[i++]; i < a.length; i++) {\r\n    o = o.union(a[i])\r\n  }\r\n  if (r !== 1) {\r\n    return o.rotate([0, 0, 0], v, r)\r\n  } else {\r\n    return o.rotateX(v[0]).rotateY(v[1]).rotateZ(v[2])\r\n  }\r\n}\r\n\r\n/** apply the given matrix transform to the given objects\r\n * @param {Array} matrix - the 4x4 matrix to apply, as a simple 1d array of 16 elements\r\n * @param {Object(s)|Array} objects either a single or multiple CSG/CAG objects to transform\r\n * @returns {CSG} new CSG object , transformed\r\n *\r\n * @example\r\n * const angle = 45\r\n * let transformedShape = transform([\r\n * cos(angle), -sin(angle), 0, 10,\r\n * sin(angle),  cos(angle), 0, 20,\r\n * 0         ,           0, 1, 30,\r\n * 0,           0, 0,  1\r\n * ], sphere())\r\n */\r\nfunction transform (matrix, ...objects) { // v, obj or array\r\n  const _objects = (objects.length >= 1 && objects[0].length) ? objects[0] : objects\r\n  let object = _objects[0]\r\n\r\n  if (_objects.length > 1) {\r\n    for (let i = 1; i < _objects.length; i++) { // FIXME/ why is union really needed ??\r\n      object = object.union(_objects[i])\r\n    }\r\n  }\r\n\r\n  let transformationMatrix\r\n  if (!Array.isArray(matrix)) {\r\n    throw new Error('Matrix needs to be an array')\r\n  }\r\n  matrix.forEach(element => {\r\n    if (!Number.isFinite(element)) {\r\n      throw new Error('you can only use a flat array of valid, finite numbers (float and integers)')\r\n    }\r\n  })\r\n  transformationMatrix = new Matrix4(matrix)\r\n  return object.transform(transformationMatrix)\r\n}\r\n\r\n\r\n/**\r\n * Center the given object(s) about the given axes\r\n * @param {Array|Boolean} axes=[true,true,true]|true  - an array of boolean values that indicate the axes (X,Y,Z) to center upon. A single boolean is also allowed.\r\n * @param {...Object} object one or more objects to center, i.e. objects are CSG or CAG\r\n * @returns {CSG} new CSG object , translated by the given amount\r\n *\r\n * @example\r\n * let csg = center([true,false,false], sphere()) // center about the X axis\r\n */\r\nfunction center (axes, ...objects) {\r\n  const _objects = (objects.length >= 1 && objects[0].length) ? objects[0] : objects\r\n  let object = _objects[0]\r\n\r\n  if (_objects.length > 1) {\r\n    for (let i = 1; i < _objects.length; i++) { // FIXME/ why is union really needed ??\r\n      object = object.union(_objects[i])\r\n    }\r\n  }\r\n  if (! Array.isArray(axes)) {\r\n    axes = [axes,axes,axes]\r\n  }\r\n  return object.center(axes)\r\n}\r\n\r\n/** mirror an object in 2D/3D space\r\n * @param {Array} vector - the axes to mirror the object(s) by\r\n * @param {Object(s)|Array} objects either a single or multiple CSG/CAG objects to mirror\r\n * @returns {CSG} new CSG object , mirrored\r\n *\r\n * @example\r\n * let rotatedSphere = mirror([0.2,15,1], sphere())\r\n */\r\nfunction mirror (vector, ...objects) {\r\n  const _objects = (objects.length >= 1 && objects[0].length) ? objects[0] : objects\r\n  let object = _objects[0]\r\n\r\n  if (_objects.length > 1) {\r\n    for (let i = 1; i < _objects.length; i++) { // FIXME/ why is union really needed ??\r\n      object = object.union(_objects[i])\r\n    }\r\n  }\r\n  const plane = new Plane(new Vector3(vector[0], vector[1], vector[2]).unit(), 0)\r\n  return object.mirrored(plane)\r\n}\r\n\r\n/** expand an object in 2D/3D space\r\n * @param {float} radius - the radius to expand by\r\n * @param {Object} object a CSG/CAG objects to expand\r\n * @returns {CSG/CAG} new CSG/CAG object , expanded\r\n *\r\n * @example\r\n * let expanededShape = expand([0.2,15,1], sphere())\r\n */\r\nfunction expand (radius, n, object) {\r\n  return object.expand(radius, n)\r\n}\r\n\r\n/** contract an object(s) in 2D/3D space\r\n * @param {float} radius - the radius to contract by\r\n * @param {Object} object a CSG/CAG objects to contract\r\n * @returns {CSG/CAG} new CSG/CAG object , contracted\r\n *\r\n * @example\r\n * let contractedShape = contract([0.2,15,1], sphere())\r\n */\r\nfunction contract (radius, n, object) {\r\n  return object.contract(radius, n)\r\n}\r\n\r\n/** create a minkowski sum of the given shapes\r\n * @param {Object(s)|Array} objects either a single or multiple CSG/CAG objects to create a hull around\r\n * @returns {CSG} new CSG object , mirrored\r\n *\r\n * @example\r\n * let hulled = hull(rect(), circle())\r\n */\r\nfunction minkowski () {\r\n  console.log('minkowski() not yet implemented')\r\n}\r\n\r\n/** create a convex hull of the given shapes\r\n * @param {Object(s)|Array} objects either a single or multiple CSG/CAG objects to create a hull around\r\n * @returns {CSG} new CSG object , a hull around the given shapes\r\n *\r\n * @example\r\n * let hulled = hull(rect(), circle())\r\n */\r\nfunction hull () {\r\n  let pts = []\r\n\r\n  let a = arguments\r\n  if (a[0].length) a = a[0]\r\n  let done = []\r\n\r\n  for (let i = 0; i < a.length; i++) {              // extract all points of the CAG in the argument list\r\n    let cag = a[i]\r\n    if (!isCAG(cag)) {\r\n      throw new Error('ERROR: hull() accepts only 2D forms / CAG')\r\n    }\r\n    for (let j = 0; j < cag.sides.length; j++) {\r\n      let x = cag.sides[j].vertex0.pos.x\r\n      let y = cag.sides[j].vertex0.pos.y\r\n      // avoid some coord to appear multiple times\r\n      if (done['' + x + ',' + y]) {\r\n        continue\r\n      }\r\n      pts.push({ x: x, y: y })\r\n      done['' + x + ',' + y]++\r\n         // echo(x,y);\r\n    }\r\n  }\r\n   // echo(pts.length+\" points in\",pts);\r\n\r\n   // from http://www.psychedelicdevelopment.com/grahamscan/\r\n   //    see also at https://github.com/bkiers/GrahamScan/blob/master/src/main/cg/GrahamScan.java\r\n  let ConvexHullPoint = function (i, a, d) {\r\n    this.index = i\r\n    this.angle = a\r\n    this.distance = d\r\n\r\n    this.compare = function (p) {\r\n      if (this.angle < p.angle) {\r\n        return -1\r\n      } else if (this.angle > p.angle) {\r\n        return 1\r\n      } else {\r\n        if (this.distance < p.distance) {\r\n          return -1\r\n        } else if (this.distance > p.distance) {\r\n          return 1\r\n        }\r\n      }\r\n      return 0\r\n    }\r\n  }\r\n\r\n  let ConvexHull = function () {\r\n    this.points = null\r\n    this.indices = null\r\n\r\n    this.getIndices = function () {\r\n      return this.indices\r\n    }\r\n\r\n    this.clear = function () {\r\n      this.indices = null\r\n      this.points = null\r\n    }\r\n\r\n    this.ccw = function (p1, p2, p3) {\r\n      let ccw = (this.points[p2].x - this.points[p1].x) * (this.points[p3].y - this.points[p1].y) -\r\n                   (this.points[p2].y - this.points[p1].y) * (this.points[p3].x - this.points[p1].x)\r\n      // we need this, otherwise sorting never ends, see https://github.com/Spiritdude/OpenJSCAD.org/issues/18\r\n      if (ccw < 1e-5) {\r\n        return 0\r\n      }\r\n      return ccw\r\n    }\r\n\r\n    this.angle = function (o, a) {\r\n         // return Math.atan((this.points[a].y-this.points[o].y) / (this.points[a].x - this.points[o].x));\r\n      return Math.atan2((this.points[a].y - this.points[o].y), (this.points[a].x - this.points[o].x))\r\n    }\r\n\r\n    this.distance = function (a, b) {\r\n      return ((this.points[b].x - this.points[a].x) * (this.points[b].x - this.points[a].x) +\r\n                 (this.points[b].y - this.points[a].y) * (this.points[b].y - this.points[a].y))\r\n    }\r\n\r\n    this.compute = function (_points) {\r\n      this.indices = null\r\n      if (_points.length < 3) {\r\n        return\r\n      }\r\n      this.points = _points\r\n\r\n         // Find the lowest point\r\n      let min = 0\r\n      for (let i = 1; i < this.points.length; i++) {\r\n        if (this.points[i].y === this.points[min].y) {\r\n          if (this.points[i].x < this.points[min].x) {\r\n            min = i\r\n          }\r\n        } else if (this.points[i].y < this.points[min].y) {\r\n          min = i\r\n        }\r\n      }\r\n\r\n         // Calculate angle and distance from base\r\n      let al = []\r\n      let ang = 0.0\r\n      let dist = 0.0\r\n      for (let i = 0; i < this.points.length; i++) {\r\n        if (i === min) {\r\n          continue\r\n        }\r\n        ang = this.angle(min, i)\r\n        if (ang < 0) {\r\n          ang += Math.PI\r\n        }\r\n        dist = this.distance(min, i)\r\n        al.push(new ConvexHullPoint(i, ang, dist))\r\n      }\r\n\r\n      al.sort(function (a, b) { return a.compare(b) })\r\n\r\n         // Create stack\r\n      let stack = new Array(this.points.length + 1)\r\n      let j = 2\r\n      for (let i = 0; i < this.points.length; i++) {\r\n        if (i === min) {\r\n          continue\r\n        }\r\n        stack[j] = al[j - 2].index\r\n        j++\r\n      }\r\n      stack[0] = stack[this.points.length]\r\n      stack[1] = min\r\n\r\n      let tmp\r\n      let M = 2\r\n      for (let i = 3; i <= this.points.length; i++) {\r\n        while (this.ccw(stack[M - 1], stack[M], stack[i]) <= 0) {\r\n          M--\r\n        }\r\n        M++\r\n        tmp = stack[i]\r\n        stack[i] = stack[M]\r\n        stack[M] = tmp\r\n      }\r\n\r\n      this.indices = new Array(M)\r\n      for (let i = 0; i < M; i++) {\r\n        this.indices[i] = stack[i + 1]\r\n      }\r\n    }\r\n  }\r\n\r\n  let hull = new ConvexHull()\r\n\r\n  hull.compute(pts)\r\n  let indices = hull.getIndices()\r\n\r\n  if (indices && indices.length > 0) {\r\n    let ch = []\r\n    for (let i = 0; i < indices.length; i++) {\r\n      ch.push(pts[indices[i]])\r\n    }\r\n    return fromPoints(ch)\r\n  }\r\n}\r\n\r\n/** create a chain hull of the given shapes\r\n * Originally \"Whosa whatsis\" suggested \"Chain Hull\" ,\r\n * as described at https://plus.google.com/u/0/105535247347788377245/posts/aZGXKFX1ACN\r\n * essentially hull A+B, B+C, C+D and then union those\r\n * @param {Object(s)|Array} objects either a single or multiple CSG/CAG objects to create a chain hull around\r\n * @returns {CSG} new CSG object ,which a chain hull of the inputs\r\n *\r\n * @example\r\n * let hulled = chain_hull(rect(), circle())\r\n */\r\nfunction chain_hull (params, objects) {\r\n  /*\r\n  const defaults = {\r\n    closed: false\r\n  }\r\n  const closed = Object.assign({}, defaults, params) */\r\n  let a = arguments\r\n  let closed = false\r\n  let j = 0\r\n\r\n  if (a[j].closed !== undefined) {\r\n    closed = a[j++].closed\r\n  }\r\n\r\n  if (a[j].length) { a = a[j] }\r\n\r\n  let hulls = []\r\n  let hullsAmount = a.length - (closed ? 0 : 1)\r\n  for (let i = 0; i < hullsAmount; i++) {\r\n    hulls.push(hull(a[i], a[(i + 1) % a.length]))\r\n  }\r\n  return union(hulls)\r\n}\r\n\r\nmodule.exports = {\r\n  translate,\r\n  center,\r\n  scale,\r\n  rotate,\r\n  transform,\r\n  mirror,\r\n  expand,\r\n  contract,\r\n  minkowski,\r\n  hull,\r\n  chain_hull\r\n}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/ops-transformations.js?");

/***/ }),

/***/ "../../convert/jscad/src/api/optionParsers.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/optionParsers.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector3D = __webpack_require__(/*! ../core/math/Vector3 */ \"../../convert/jscad/src/core/math/Vector3.js\")\r\nconst Vector2D = __webpack_require__(/*! ../core/math/Vector2 */ \"../../convert/jscad/src/core/math/Vector2.js\")\r\n\r\n// Parse an option from the options object\r\n// If the option is not present, return the default value\r\nconst parseOption = function (options, optionname, defaultvalue) {\r\n  var result = defaultvalue\r\n  if (options && optionname in options) {\r\n    result = options[optionname]\r\n  }\r\n  return result\r\n}\r\n\r\n  // Parse an option and force into a Vector3D. If a scalar is passed it is converted\r\n  // into a vector with equal x,y,z\r\nconst parseOptionAs3DVector = function (options, optionname, defaultvalue) {\r\n  var result = parseOption(options, optionname, defaultvalue)\r\n  result = new Vector3D(result)\r\n  return result\r\n}\r\n\r\nconst parseOptionAs3DVectorList = function (options, optionname, defaultvalue) {\r\n  var result = parseOption(options, optionname, defaultvalue)\r\n  return result.map(function (res) {\r\n    return new Vector3D(res)\r\n  })\r\n}\r\n\r\n  // Parse an option and force into a Vector2D. If a scalar is passed it is converted\r\n  // into a vector with equal x,y\r\nconst parseOptionAs2DVector = function (options, optionname, defaultvalue) {\r\n  var result = parseOption(options, optionname, defaultvalue)\r\n  result = new Vector2D(result)\r\n  return result\r\n}\r\n\r\nconst parseOptionAsFloat = function (options, optionname, defaultvalue) {\r\n  var result = parseOption(options, optionname, defaultvalue)\r\n  if (typeof (result) === 'string') {\r\n    result = Number(result)\r\n  }\r\n  if (isNaN(result) || typeof (result) !== 'number') {\r\n    throw new Error('Parameter ' + optionname + ' should be a number')\r\n  }\r\n  return result\r\n}\r\n\r\nconst parseOptionAsInt = function (options, optionname, defaultvalue) {\r\n  var result = parseOption(options, optionname, defaultvalue)\r\n  result = Number(Math.floor(result))\r\n  if (isNaN(result)) {\r\n    throw new Error('Parameter ' + optionname + ' should be a number')\r\n  }\r\n  return result\r\n}\r\n\r\nconst parseOptionAsBool = function (options, optionname, defaultvalue) {\r\n  var result = parseOption(options, optionname, defaultvalue)\r\n  if (typeof (result) === 'string') {\r\n    if (result === 'true') result = true\r\n    else if (result === 'false') result = false\r\n    else if (result === 0) result = false\r\n  }\r\n  result = !!result\r\n  return result\r\n}\r\n\r\nmodule.exports = {\r\n  parseOption,\r\n  parseOptionAsInt,\r\n  parseOptionAsFloat,\r\n  parseOptionAsBool,\r\n  parseOptionAs3DVector,\r\n  parseOptionAs2DVector,\r\n  parseOptionAs3DVectorList\r\n}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/optionParsers.js?");

/***/ }),

/***/ "../../convert/jscad/src/api/primitives2d-api.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/primitives2d-api.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {CAG} = __webpack_require__(/*! ../../csg */ \"../../convert/jscad/csg.js\")// we have to import from top level otherwise prototypes are not complete..\r\nconst {fromPoints} = __webpack_require__(/*! ../core/CAGFactories */ \"../../convert/jscad/src/core/CAGFactories.js\")\r\n\r\n/** Construct a square/rectangle\r\n * @param {Object} [options] - options for construction\r\n * @param {Float} [options.size=1] - size of the square, either as array or scalar\r\n * @param {Boolean} [options.center=true] - wether to center the square/rectangle or not\r\n * @returns {CAG} new square\r\n *\r\n * @example\r\n * let square1 = square({\r\n *   size: 10\r\n * })\r\n */\r\nfunction square () {\r\n  let v = [1, 1]\r\n  let off\r\n  let a = arguments\r\n  let params = a[0]\r\n\r\n  if (params && Number.isFinite(params)) v = [params, params]\r\n  if (params && params.length) {\r\n    v = a[0]\r\n    params = a[1]\r\n  }\r\n  if (params && params.size && params.size.length) v = params.size\r\n\r\n  off = [v[0] / 2, v[1] / 2]\r\n  if (params && params.center === true) off = [0, 0]\r\n\r\n  return CAG.rectangle({center: off, radius: [v[0] / 2, v[1] / 2]})\r\n}\r\n\r\n/** Construct a circle\r\n * @param {Object} [options] - options for construction\r\n * @param {Float} [options.r=1] - radius of the circle\r\n * @param {Integer} [options.fn=32] - segments of circle (ie quality/ resolution)\r\n * @param {Boolean} [options.center=true] - wether to center the circle or not\r\n * @returns {CAG} new circle\r\n *\r\n * @example\r\n * let circle1 = circle({\r\n *   r: 10\r\n * })\r\n */\r\nfunction circle (params) {\r\n  const defaults = {\r\n    r: 1,\r\n    fn: 32,\r\n    center: false\r\n  }\r\n  let {r, fn, center} = Object.assign({}, defaults, params)\r\n  if (params && !params.r && !params.fn && !params.center) r = params\r\n  let offset = center === true ? [0, 0] : [r, r]\r\n  return CAG.circle({center: offset, radius: r, resolution: fn})\r\n}\r\n\r\n/** Construct a polygon either from arrays of paths and points,\r\n * or just arrays of points nested paths (multiple paths) and flat paths are supported\r\n * @param {Object} [options] - options for construction or either flat or nested array of points\r\n * @param {Array} [options.points] - points of the polygon : either flat or nested array of points\r\n * @param {Array} [options.paths] - paths of the polygon : either flat or nested array of points index\r\n * @returns {CAG} new polygon\r\n *\r\n * @example\r\n * let roof = [[10,11], [0,11], [5,20]]\r\n * let wall = [[0,0], [10,0], [10,10], [0,10]]\r\n *\r\n * let poly = polygon(roof)\r\n * or\r\n * let poly = polygon([roof, wall])\r\n * or\r\n * let poly = polygon({ points: roof })\r\n * or\r\n * let poly = polygon({ points: [roof, wall] })\r\n * or\r\n * let poly = polygon({ points: roof, path: [0, 1, 2] })\r\n * or\r\n * let poly = polygon({ points: [roof, wall], path: [[0, 1, 2], [3, 4, 5, 6]] })\r\n * or\r\n * let poly = polygon({ points: roof.concat(wall), paths: [[0, 1, 2], [3, 4, 5], [3, 6, 5]] })\r\n */\r\nfunction polygon (params) { // array of po(ints) and pa(ths)\r\n  let points = []\r\n  if (params.paths && params.paths.length && params.paths[0].length) { // pa(th): [[0,1,2],[2,3,1]] (two paths)\r\n    if (typeof params.points[0][0] !== 'number') { // flatten points array\r\n      params.points = params.points.reduce((a, b) => a.concat(b))\r\n    }\r\n    params.paths.forEach((path, i) => {\r\n      points.push([])\r\n      path.forEach(j => points[i].push(params.points[j]))\r\n    })\r\n  } else if (params.paths && params.paths.length) { // pa(th): [0,1,2,3,4] (single path)\r\n    params.paths.forEach(i => points.push(params.points[i]))\r\n  } else { // pa(th) = po(ints)\r\n    if (params.length) {\r\n      points = params\r\n    } else {\r\n      points = params.points\r\n    }\r\n  }\r\n  return fromPoints(points)\r\n}\r\n\r\n// FIXME: errr this is kinda just a special case of a polygon , why do we need it ?\r\n/** Construct a triangle\r\n * @returns {CAG} new triangle\r\n *\r\n * @example\r\n * let triangle = trangle({\r\n *   length: 10\r\n * })\r\n */\r\nfunction triangle () {\r\n  let a = arguments\r\n  if (a[0] && a[0].length) a = a[0]\r\n  return fromPoints(a)\r\n}\r\n\r\nmodule.exports = {\r\n  circle,\r\n  square,\r\n  polygon,\r\n  triangle\r\n}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/primitives2d-api.js?");

/***/ }),

/***/ "../../convert/jscad/src/api/primitives2d.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/primitives2d.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const CAG = __webpack_require__(/*! ../core/CAG */ \"../../convert/jscad/src/core/CAG.js\")\r\nconst {parseOptionAs2DVector, parseOptionAsFloat, parseOptionAsInt} = __webpack_require__(/*! ./optionParsers */ \"../../convert/jscad/src/api/optionParsers.js\")\r\nconst {defaultResolution2D} = __webpack_require__(/*! ../core/constants */ \"../../convert/jscad/src/core/constants.js\")\r\nconst Vector2D = __webpack_require__(/*! ../core/math/Vector2 */ \"../../convert/jscad/src/core/math/Vector2.js\")\r\nconst Vertex2 = __webpack_require__(/*! ../core/math/Vertex2 */ \"../../convert/jscad/src/core/math/Vertex2.js\")\r\nconst Path2D = __webpack_require__(/*! ../core/math/Path2 */ \"../../convert/jscad/src/core/math/Path2.js\")\r\nconst {fromCompactBinary, fromPoints, fromPath2, fromSides} = __webpack_require__(/*! ../core/CAGFactories */ \"../../convert/jscad/src/core/CAGFactories.js\")\r\n\r\n/** Construct a circle.\r\n * @param {Object} [options] - options for construction\r\n * @param {Vector2D} [options.center=[0,0]] - center of circle\r\n * @param {Number} [options.radius=1] - radius of circle\r\n * @param {Number} [options.resolution=defaultResolution2D] - number of sides per 360 rotation\r\n * @returns {CAG} new CAG object\r\n */\r\nconst circle = function (options) {\r\n  options = options || {}\r\n  let center = parseOptionAs2DVector(options, 'center', [0, 0])\r\n  let radius = parseOptionAsFloat(options, 'radius', 1)\r\n  let resolution = parseOptionAsInt(options, 'resolution', defaultResolution2D)\r\n  let points = []\r\n  for (let i = 0; i < resolution; i++) {\r\n    let radians = 2 * Math.PI * i / resolution\r\n    let point = Vector2D.fromAngleRadians(radians).times(radius).plus(center)\r\n    points.push(point)\r\n  }\r\n  return fromPoints(points)\r\n}\r\n\r\n/** Construct an ellispe.\r\n * @param {Object} [options] - options for construction\r\n * @param {Vector2D} [options.center=[0,0]] - center of ellipse\r\n * @param {Vector2D} [options.radius=[1,1]] - radius of ellipse, width and height\r\n * @param {Number} [options.resolution=defaultResolution2D] - number of sides per 360 rotation\r\n * @returns {CAG} new CAG object\r\n */\r\nconst ellipse = function (options) {\r\n  options = options || {}\r\n  let c = parseOptionAs2DVector(options, 'center', [0, 0])\r\n  let r = parseOptionAs2DVector(options, 'radius', [1, 1])\r\n  r = r.abs() // negative radii make no sense\r\n  let res = parseOptionAsInt(options, 'resolution', defaultResolution2D)\r\n\r\n  let e2 = new Path2D([[c.x, c.y + r.y]])\r\n  e2 = e2.appendArc([c.x, c.y - r.y], {\r\n    xradius: r.x,\r\n    yradius: r.y,\r\n    xaxisrotation: 0,\r\n    resolution: res,\r\n    clockwise: true,\r\n    large: false\r\n  })\r\n  e2 = e2.appendArc([c.x, c.y + r.y], {\r\n    xradius: r.x,\r\n    yradius: r.y,\r\n    xaxisrotation: 0,\r\n    resolution: res,\r\n    clockwise: true,\r\n    large: false\r\n  })\r\n  e2 = e2.close()\r\n  return fromPath2(e2)\r\n}\r\n\r\n/** Construct a rectangle.\r\n * @param {Object} [options] - options for construction\r\n * @param {Vector2D} [options.center=[0,0]] - center of rectangle\r\n * @param {Vector2D} [options.radius=[1,1]] - radius of rectangle, width and height\r\n * @param {Vector2D} [options.corner1=[0,0]] - bottom left corner of rectangle (alternate)\r\n * @param {Vector2D} [options.corner2=[0,0]] - upper right corner of rectangle (alternate)\r\n * @returns {CAG} new CAG object\r\n */\r\nconst rectangle = function (options) {\r\n  options = options || {}\r\n  let c, r\r\n  if (('corner1' in options) || ('corner2' in options)) {\r\n    if (('center' in options) || ('radius' in options)) {\r\n      throw new Error('rectangle: should either give a radius and center parameter, or a corner1 and corner2 parameter')\r\n    }\r\n    let corner1 = parseOptionAs2DVector(options, 'corner1', [0, 0])\r\n    let corner2 = parseOptionAs2DVector(options, 'corner2', [1, 1])\r\n    c = corner1.plus(corner2).times(0.5)\r\n    r = corner2.minus(corner1).times(0.5)\r\n  } else {\r\n    c = parseOptionAs2DVector(options, 'center', [0, 0])\r\n    r = parseOptionAs2DVector(options, 'radius', [1, 1])\r\n  }\r\n  r = r.abs() // negative radii make no sense\r\n  let rswap = new Vector2D(r.x, -r.y)\r\n  let points = [\r\n    c.plus(r), c.plus(rswap), c.minus(r), c.minus(rswap)\r\n  ]\r\n  return fromPoints(points)\r\n}\r\n\r\n/** Construct a rounded rectangle.\r\n * @param {Object} [options] - options for construction\r\n * @param {Vector2D} [options.center=[0,0]] - center of rounded rectangle\r\n * @param {Vector2D} [options.radius=[1,1]] - radius of rounded rectangle, width and height\r\n * @param {Vector2D} [options.corner1=[0,0]] - bottom left corner of rounded rectangle (alternate)\r\n * @param {Vector2D} [options.corner2=[0,0]] - upper right corner of rounded rectangle (alternate)\r\n * @param {Number} [options.roundradius=0.2] - round radius of corners\r\n * @param {Number} [options.resolution=defaultResolution2D] - number of sides per 360 rotation\r\n * @returns {CAG} new CAG object\r\n *\r\n * @example\r\n * let r = roundedRectangle({\r\n *   center: [0, 0],\r\n *   radius: [5, 10],\r\n *   roundradius: 2,\r\n *   resolution: 36,\r\n * });\r\n */\r\nconst roundedRectangle = function (options) {\r\n  options = options || {}\r\n  let center, radius\r\n  if (('corner1' in options) || ('corner2' in options)) {\r\n    if (('center' in options) || ('radius' in options)) {\r\n      throw new Error('roundedRectangle: should either give a radius and center parameter, or a corner1 and corner2 parameter')\r\n    }\r\n    let corner1 = parseOptionAs2DVector(options, 'corner1', [0, 0])\r\n    let corner2 = parseOptionAs2DVector(options, 'corner2', [1, 1])\r\n    center = corner1.plus(corner2).times(0.5)\r\n    radius = corner2.minus(corner1).times(0.5)\r\n  } else {\r\n    center = parseOptionAs2DVector(options, 'center', [0, 0])\r\n    radius = parseOptionAs2DVector(options, 'radius', [1, 1])\r\n  }\r\n  radius = radius.abs() // negative radii make no sense\r\n  let roundradius = parseOptionAsFloat(options, 'roundradius', 0.2)\r\n  let resolution = parseOptionAsInt(options, 'resolution', defaultResolution2D)\r\n  let maxroundradius = Math.min(radius.x, radius.y)\r\n  maxroundradius -= 0.1\r\n  roundradius = Math.min(roundradius, maxroundradius)\r\n  roundradius = Math.max(0, roundradius)\r\n  radius = new Vector2D(radius.x - roundradius, radius.y - roundradius)\r\n  let rect = rectangle({\r\n    center: center,\r\n    radius: radius\r\n  })\r\n  if (roundradius > 0) {\r\n    rect = rect.expand(roundradius, resolution)\r\n  }\r\n  return rect\r\n}\r\n\r\n/** Reconstruct a CAG from the output of toCompactBinary().\r\n * @param {CompactBinary} bin - see toCompactBinary()\r\n * @returns {CAG} new CAG object\r\n */\r\n/*fromCompactBinary = function (bin) {\r\n  if (bin['class'] !== 'CAG') throw new Error('Not a CAG')\r\n  let vertices = []\r\n  let vertexData = bin.vertexData\r\n  let numvertices = vertexData.length / 2\r\n  let arrayindex = 0\r\n  for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {\r\n    let x = vertexData[arrayindex++]\r\n    let y = vertexData[arrayindex++]\r\n    let pos = new Vector2D(x, y)\r\n    let vertex = new Vertex2(pos)\r\n    vertices.push(vertex)\r\n  }\r\n\r\n  let sides = []\r\n  let numsides = bin.sideVertexIndices.length / 2\r\n  arrayindex = 0\r\n  for (let sideindex = 0; sideindex < numsides; sideindex++) {\r\n    let vertexindex0 = bin.sideVertexIndices[arrayindex++]\r\n    let vertexindex1 = bin.sideVertexIndices[arrayindex++]\r\n    let side = new Side(vertices[vertexindex0], vertices[vertexindex1])\r\n    sides.push(side)\r\n  }\r\n  let cag = fromSides(sides)\r\n  cag.isCanonicalized = true\r\n  return cag\r\n}*/\r\n\r\nmodule.exports = {\r\n  circle,\r\n  ellipse,\r\n  rectangle,\r\n  roundedRectangle,\r\n  fromCompactBinary\r\n}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/primitives2d.js?");

/***/ }),

/***/ "../../convert/jscad/src/api/primitives3d-api.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/primitives3d-api.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\r\n/// //////////FUNCTIONAL API\r\nconst {CSG} = __webpack_require__(/*! ../../csg */ \"../../convert/jscad/csg.js\")\r\nconst { circle } = __webpack_require__(/*! ./primitives2d-api */ \"../../convert/jscad/src/api/primitives2d-api.js\")\r\nconst { rotate_extrude } = __webpack_require__(/*! ./ops-extrusions */ \"../../convert/jscad/src/api/ops-extrusions.js\")\r\nconst { translate, scale } = __webpack_require__(/*! ./ops-transformations */ \"../../convert/jscad/src/api/ops-transformations.js\")\r\nconst Polygon3 = __webpack_require__(/*! ../core/math/Polygon3 */ \"../../convert/jscad/src/core/math/Polygon3.js\")\r\nconst Vector3 = __webpack_require__(/*! ../core/math/Vector3 */ \"../../convert/jscad/src/core/math/Vector3.js\")\r\nconst Vertex3 = __webpack_require__(/*! ../core/math/Vertex3 */ \"../../convert/jscad/src/core/math/Vertex3.js\")\r\n\r\n/** Construct a cuboid\r\n * @param {Object} [options] - options for construction\r\n * @param {Float} [options.size=1] - size of the side of the cuboid : can be either:\r\n * - a scalar : ie a single float, in which case all dimensions will be the same\r\n * - or an array: to specify different dimensions along x/y/z\r\n * @param {Integer} [options.fn=32] - segments of the sphere (ie quality/resolution)\r\n * @param {Integer} [options.fno=32] - segments of extrusion (ie quality)\r\n * @param {String} [options.type='normal'] - type of sphere : either 'normal' or 'geodesic'\r\n * @returns {CSG} new sphere\r\n *\r\n * @example\r\n * let cube1 = cube({\r\n *   r: 10,\r\n *   fn: 20\r\n * })\r\n */\r\nfunction cube (params) {\r\n  const defaults = {\r\n    size: 1,\r\n    offset: [0, 0, 0],\r\n    round: false,\r\n    radius: 0,\r\n    fn: 8\r\n  }\r\n\r\n  let {round, radius, fn, size} = Object.assign({}, defaults, params)\r\n  let offset = [0, 0, 0]\r\n  let v = null\r\n  if (params && params.length) v = params\r\n  if (params && params.size && params.size.length) v = params.size // { size: [1,2,3] }\r\n  if (params && params.size && !params.size.length) size = params.size // { size: 1 }\r\n  if (params && (typeof params !== 'object')) size = params// (2)\r\n  if (params && params.round === true) {\r\n    round = true\r\n    radius = v && v.length ? (v[0] + v[1] + v[2]) / 30 : size / 10\r\n  }\r\n  if (params && params.radius) {\r\n    round = true\r\n    radius = params.radius\r\n  }\r\n\r\n  let x = size\r\n  let y = size\r\n  let z = size\r\n  if (v && v.length) {\r\n    [x, y, z] = v\r\n  }\r\n  offset = [x / 2, y / 2, z / 2] // center: false default\r\n  let object = round\r\n    ? CSG.roundedCube({radius: [x / 2, y / 2, z / 2], roundradius: radius, resolution: fn})\r\n    : CSG.cube({radius: [x / 2, y / 2, z / 2]})\r\n  if (params && params.center && params.center.length) {\r\n    offset = [params.center[0] ? 0 : x / 2, params.center[1] ? 0 : y / 2, params.center[2] ? 0 : z / 2]\r\n  } else if (params && params.center === true) {\r\n    offset = [0, 0, 0]\r\n  } else if (params && params.center === false) {\r\n    offset = [x / 2, y / 2, z / 2]\r\n  }\r\n  return (offset[0] || offset[1] || offset[2]) ? translate(offset, object) : object\r\n}\r\n\r\n/** Construct a sphere\r\n * @param {Object} [options] - options for construction\r\n * @param {Float} [options.r=1] - radius of the sphere\r\n * @param {Integer} [options.fn=32] - segments of the sphere (ie quality/resolution)\r\n * @param {Integer} [options.fno=32] - segments of extrusion (ie quality)\r\n * @param {String} [options.type='normal'] - type of sphere : either 'normal' or 'geodesic'\r\n * @returns {CSG} new sphere\r\n *\r\n * @example\r\n * let sphere1 = sphere({\r\n *   r: 10,\r\n *   fn: 20\r\n * })\r\n */\r\nfunction sphere (params) {\r\n  const defaults = {\r\n    r: 1,\r\n    fn: 32,\r\n    type: 'normal'\r\n  }\r\n\r\n  let {r, fn, type} = Object.assign({}, defaults, params)\r\n  let offset = [0, 0, 0] // center: false (default)\r\n  if (params && (typeof params !== 'object')) {\r\n    r = params\r\n  }\r\n  // let zoffset = 0 // sphere() in openscad has no center:true|false\r\n\r\n  let output = type === 'geodesic' ? geodesicSphere(params) : CSG.sphere({radius: r, resolution: fn})\r\n\r\n  // preparing individual x,y,z center\r\n  if (params && params.center && params.center.length) {\r\n    offset = [params.center[0] ? 0 : r, params.center[1] ? 0 : r, params.center[2] ? 0 : r]\r\n  } else if (params && params.center === true) {\r\n    offset = [0, 0, 0]\r\n  } else if (params && params.center === false) {\r\n    offset = [r, r, r]\r\n  }\r\n  return (offset[0] || offset[1] || offset[2]) ? translate(offset, output) : output\r\n}\r\n\r\nfunction geodesicSphere (params) {\r\n  const defaults = {\r\n    r: 1,\r\n    fn: 5\r\n  }\r\n  let {r, fn} = Object.assign({}, defaults, params)\r\n\r\n  let ci = [ // hard-coded data of icosahedron (20 faces, all triangles)\r\n    [0.850651, 0.000000, -0.525731],\r\n    [0.850651, -0.000000, 0.525731],\r\n    [-0.850651, -0.000000, 0.525731],\r\n    [-0.850651, 0.000000, -0.525731],\r\n    [0.000000, -0.525731, 0.850651],\r\n    [0.000000, 0.525731, 0.850651],\r\n    [0.000000, 0.525731, -0.850651],\r\n    [0.000000, -0.525731, -0.850651],\r\n    [-0.525731, -0.850651, -0.000000],\r\n    [0.525731, -0.850651, -0.000000],\r\n    [0.525731, 0.850651, 0.000000],\r\n    [-0.525731, 0.850651, 0.000000]]\r\n\r\n  let ti = [ [0, 9, 1], [1, 10, 0], [6, 7, 0], [10, 6, 0], [7, 9, 0], [5, 1, 4], [4, 1, 9], [5, 10, 1], [2, 8, 3], [3, 11, 2], [2, 5, 4],\r\n    [4, 8, 2], [2, 11, 5], [3, 7, 6], [6, 11, 3], [8, 7, 3], [9, 8, 4], [11, 10, 5], [10, 11, 6], [8, 9, 7]]\r\n\r\n  let geodesicSubDivide = function (p, fn, offset) {\r\n    let p1 = p[0]\r\n    let p2 = p[1]\r\n    let p3 = p[2]\r\n    let n = offset\r\n    let c = []\r\n    let f = []\r\n\r\n    //           p3\r\n    //           /\\\r\n    //          /__\\     fn = 3\r\n    //      i  /\\  /\\\r\n    //        /__\\/__\\       total triangles = 9 (fn*fn)\r\n    //       /\\  /\\  /\\\r\n    //     0/__\\/__\\/__\\\r\n    //    p1 0   j      p2\r\n\r\n    for (let i = 0; i < fn; i++) {\r\n      for (let j = 0; j < fn - i; j++) {\r\n        let t0 = i / fn\r\n        let t1 = (i + 1) / fn\r\n        let s0 = j / (fn - i)\r\n        let s1 = (j + 1) / (fn - i)\r\n        let s2 = fn - i - 1 ? j / (fn - i - 1) : 1\r\n        let q = []\r\n\r\n        q[0] = mix3(mix3(p1, p2, s0), p3, t0)\r\n        q[1] = mix3(mix3(p1, p2, s1), p3, t0)\r\n        q[2] = mix3(mix3(p1, p2, s2), p3, t1)\r\n\r\n        // -- normalize\r\n        for (let k = 0; k < 3; k++) {\r\n          let r = Math.sqrt(q[k][0] * q[k][0] + q[k][1] * q[k][1] + q[k][2] * q[k][2])\r\n          for (let l = 0; l < 3; l++) {\r\n            q[k][l] /= r\r\n          }\r\n        }\r\n        c.push(q[0], q[1], q[2])\r\n        f.push([n, n + 1, n + 2]); n += 3\r\n\r\n        if (j < fn - i - 1) {\r\n          let s3 = fn - i - 1 ? (j + 1) / (fn - i - 1) : 1\r\n          q[0] = mix3(mix3(p1, p2, s1), p3, t0)\r\n          q[1] = mix3(mix3(p1, p2, s3), p3, t1)\r\n          q[2] = mix3(mix3(p1, p2, s2), p3, t1)\r\n\r\n          // -- normalize\r\n          for (let k = 0; k < 3; k++) {\r\n            let r = Math.sqrt(q[k][0] * q[k][0] + q[k][1] * q[k][1] + q[k][2] * q[k][2])\r\n            for (let l = 0; l < 3; l++) {\r\n              q[k][l] /= r\r\n            }\r\n          }\r\n          c.push(q[0], q[1], q[2])\r\n          f.push([n, n + 1, n + 2]); n += 3\r\n        }\r\n      }\r\n    }\r\n    return { points: c, triangles: f, offset: n }\r\n  }\r\n\r\n  const mix3 = function (a, b, f) {\r\n    let _f = 1 - f\r\n    let c = []\r\n    for (let i = 0; i < 3; i++) {\r\n      c[i] = a[i] * _f + b[i] * f\r\n    }\r\n    return c\r\n  }\r\n\r\n  if (params) {\r\n    if (params.fn) fn = Math.floor(params.fn / 6)\r\n  }\r\n\r\n  if (fn <= 0) fn = 1\r\n\r\n  let c = []\r\n  let f = []\r\n  let offset = 0\r\n\r\n  for (let i = 0; i < ti.length; i++) {\r\n    let g = geodesicSubDivide([ ci[ti[i][0]], ci[ti[i][1]], ci[ti[i][2]]], fn, offset)\r\n    c = c.concat(g.points)\r\n    f = f.concat(g.triangles)\r\n    offset = g.offset\r\n  }\r\n  return scale(r, polyhedron({points: c, triangles: f}))\r\n}\r\n\r\n/** Construct a cylinder\r\n * @param {Object} [options] - options for construction\r\n * @param {Float} [options.r=1] - radius of the cylinder\r\n * @param {Float} [options.r1=1] - radius of the top of the cylinder\r\n * @param {Float} [options.r2=1] - radius of the bottom of the cylinder\r\n * @param {Float} [options.d=1] - diameter of the cylinder\r\n * @param {Float} [options.d1=1] - diameter of the top of the cylinder\r\n * @param {Float} [options.d2=1] - diameter of the bottom of the cylinder\r\n * @param {Integer} [options.fn=32] - number of sides of the cylinder (ie quality/resolution)\r\n * @returns {CSG} new cylinder\r\n *\r\n * @example\r\n * let cylinder = cylinder({\r\n *   d: 10,\r\n *   fn: 20\r\n * })\r\n */\r\nfunction cylinder (params) {\r\n  const defaults = {\r\n    r: 1,\r\n    r1: 1,\r\n    r2: 1,\r\n    h: 1,\r\n    fn: 32,\r\n    round: false\r\n  }\r\n  let {r1, r2, h, fn, round} = Object.assign({}, defaults, params)\r\n  let offset = [0, 0, 0]\r\n  let a = arguments\r\n  if (params && params.d) {\r\n    r1 = r2 = params.d / 2\r\n  }\r\n  if (params && params.r) {\r\n    r1 = params.r\r\n    r2 = params.r\r\n  }\r\n  if (params && params.h) {\r\n    h = params.h\r\n  }\r\n  if (params && (params.r1 || params.r2)) {\r\n    r1 = params.r1\r\n    r2 = params.r2\r\n    if (params.h) h = params.h\r\n  }\r\n  if (params && (params.d1 || params.d2)) {\r\n    r1 = params.d1 / 2\r\n    r2 = params.d2 / 2\r\n  }\r\n\r\n  if (a && a[0] && a[0].length) {\r\n    a = a[0]\r\n    r1 = a[0]\r\n    r2 = a[1]\r\n    h = a[2]\r\n    if (a.length === 4) fn = a[3]\r\n  }\r\n\r\n  let object\r\n  if (params && (params.start && params.end)) {\r\n    object = round\r\n      ? CSG.roundedCylinder({start: params.start, end: params.end, radiusStart: r1, radiusEnd: r2, resolution: fn})\r\n      : CSG.cylinder({start: params.start, end: params.end, radiusStart: r1, radiusEnd: r2, resolution: fn})\r\n  } else {\r\n    object = round\r\n      ? CSG.roundedCylinder({start: [0, 0, 0], end: [0, 0, h], radiusStart: r1, radiusEnd: r2, resolution: fn})\r\n      : CSG.cylinder({start: [0, 0, 0], end: [0, 0, h], radiusStart: r1, radiusEnd: r2, resolution: fn})\r\n    let r = r1 > r2 ? r1 : r2\r\n    if (params && params.center && params.center.length) { // preparing individual x,y,z center\r\n      offset = [params.center[0] ? 0 : r, params.center[1] ? 0 : r, params.center[2] ? -h / 2 : 0]\r\n    } else if (params && params.center === true) {\r\n      offset = [0, 0, -h / 2]\r\n    } else if (params && params.center === false) {\r\n      offset = [0, 0, 0]\r\n    }\r\n    object = (offset[0] || offset[1] || offset[2]) ? translate(offset, object) : object\r\n  }\r\n  return object\r\n}\r\n\r\n/** Construct a torus\r\n * @param {Object} [options] - options for construction\r\n * @param {Float} [options.ri=1] - radius of base circle\r\n * @param {Float} [options.ro=4] - radius offset\r\n * @param {Integer} [options.fni=16] - segments of base circle (ie quality)\r\n * @param {Integer} [options.fno=32] - segments of extrusion (ie quality)\r\n * @param {Integer} [options.roti=0] - rotation angle of base circle\r\n * @returns {CSG} new torus\r\n *\r\n * @example\r\n * let torus1 = torus({\r\n *   ri: 10\r\n * })\r\n */\r\nfunction torus (params) {\r\n  const defaults = {\r\n    ri: 1,\r\n    ro: 4,\r\n    fni: 16,\r\n    fno: 32,\r\n    roti: 0\r\n  }\r\n  params = Object.assign({}, defaults, params)\r\n\r\n  /* possible enhancements ? declarative limits\r\n  const limits = {\r\n    fni: {min: 3},\r\n    fno: {min: 3}\r\n  } */\r\n\r\n  let {ri, ro, fni, fno, roti} = params\r\n\r\n  if (fni < 3) fni = 3\r\n  if (fno < 3) fno = 3\r\n\r\n  let baseCircle = circle({r: ri, fn: fni, center: true})\r\n\r\n  if (roti) baseCircle = baseCircle.rotateZ(roti)\r\n  let result = rotate_extrude({fn: fno}, translate([ro, 0, 0], baseCircle))\r\n  // result = result.union(result)\r\n  return result\r\n}\r\n\r\n/** Construct a polyhedron from the given triangles/ polygons/points\r\n * @param {Object} [options] - options for construction\r\n * @param {Array} [options.triangles] - triangles to build the polyhedron from\r\n * @param {Array} [options.polygons] - polygons to build the polyhedron from\r\n * @param {Array} [options.points] - points to build the polyhedron from\r\n * @param {Array} [options.colors] - colors to apply to the polyhedron\r\n * @returns {CSG} new polyhedron\r\n *\r\n * @example\r\n * let torus1 = polyhedron({\r\n *   points: [...]\r\n * })\r\n */\r\nfunction polyhedron (params) {\r\n  let pgs = []\r\n  let ref = params.triangles || params.polygons\r\n  let colors = params.colors || null\r\n\r\n  for (let i = 0; i < ref.length; i++) {\r\n    let pp = []\r\n    for (let j = 0; j < ref[i].length; j++) {\r\n      pp[j] = params.points[ref[i][j]]\r\n    }\r\n\r\n    let v = []\r\n    for (let j = ref[i].length - 1; j >= 0; j--) { // --- we reverse order for examples of OpenSCAD work\r\n      v.push(new Vertex3(new Vector3(pp[j][0], pp[j][1], pp[j][2])))\r\n    }\r\n    let s = Polygon3.defaultShared\r\n    if (colors && colors[i]) {\r\n      s = Polygon3.Shared.fromColor(colors[i])\r\n    }\r\n    pgs.push(new Polygon3(v, s))\r\n  }\r\n\r\n  // forced to import here, otherwise out of order imports mess things up\r\n  const {fromPolygons} = __webpack_require__(/*! ../core/CSGFactories */ \"../../convert/jscad/src/core/CSGFactories.js\")\r\n  return fromPolygons(pgs)\r\n}\r\n\r\nmodule.exports = {\r\n  cube,\r\n  sphere,\r\n  cylinder,\r\n  geodesicSphere,\r\n  torus,\r\n  polyhedron\r\n}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/primitives3d-api.js?");

/***/ }),

/***/ "../../convert/jscad/src/api/primitives3d.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/primitives3d.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {parseOption, parseOptionAs3DVector, parseOptionAs2DVector, parseOptionAs3DVectorList, parseOptionAsFloat, parseOptionAsInt} = __webpack_require__(/*! ./optionParsers */ \"../../convert/jscad/src/api/optionParsers.js\")\r\nconst {defaultResolution3D, defaultResolution2D, EPS} = __webpack_require__(/*! ../core/constants */ \"../../convert/jscad/src/core/constants.js\")\r\nconst Vector3 = __webpack_require__(/*! ../core/math/Vector3 */ \"../../convert/jscad/src/core/math/Vector3.js\")\r\nconst Vertex3 = __webpack_require__(/*! ../core/math/Vertex3 */ \"../../convert/jscad/src/core/math/Vertex3.js\")\r\nconst Polygon3 = __webpack_require__(/*! ../core/math/Polygon3 */ \"../../convert/jscad/src/core/math/Polygon3.js\")\r\nconst {Connector} = __webpack_require__(/*! ../core/connectors */ \"../../convert/jscad/src/core/connectors.js\")\r\nconst Properties = __webpack_require__(/*! ../core/Properties */ \"../../convert/jscad/src/core/Properties.js\")\r\nconst {fromPolygons} = __webpack_require__(/*! ../core/CSGFactories */ \"../../convert/jscad/src/core/CSGFactories.js\")\r\n\r\n/** Construct an axis-aligned solid cuboid.\r\n * @param {Object} [options] - options for construction\r\n * @param {Vector3} [options.center=[0,0,0]] - center of cube\r\n * @param {Vector3} [options.radius=[1,1,1]] - radius of cube, single scalar also possible\r\n * @returns {CSG} new 3D solid\r\n *\r\n * @example\r\n * let cube = CSG.cube({\r\n *   center: [5, 5, 5],\r\n *   radius: 5, // scalar radius\r\n * });\r\n */\r\nconst cube = function (options) {\r\n  let c\r\n  let r\r\n  let corner1\r\n  let corner2\r\n  options = options || {}\r\n  if (('corner1' in options) || ('corner2' in options)) {\r\n    if (('center' in options) || ('radius' in options)) {\r\n      throw new Error('cube: should either give a radius and center parameter, or a corner1 and corner2 parameter')\r\n    }\r\n    corner1 = parseOptionAs3DVector(options, 'corner1', [0, 0, 0])\r\n    corner2 = parseOptionAs3DVector(options, 'corner2', [1, 1, 1])\r\n    c = corner1.plus(corner2).times(0.5)\r\n    r = corner2.minus(corner1).times(0.5)\r\n  } else {\r\n    c = parseOptionAs3DVector(options, 'center', [0, 0, 0])\r\n    r = parseOptionAs3DVector(options, 'radius', [1, 1, 1])\r\n  }\r\n  r = r.abs() // negative radii make no sense\r\n  let result = fromPolygons([\r\n    [\r\n            [0, 4, 6, 2],\r\n            [-1, 0, 0]\r\n    ],\r\n    [\r\n            [1, 3, 7, 5],\r\n            [+1, 0, 0]\r\n    ],\r\n    [\r\n            [0, 1, 5, 4],\r\n            [0, -1, 0]\r\n    ],\r\n    [\r\n            [2, 6, 7, 3],\r\n            [0, +1, 0]\r\n    ],\r\n    [\r\n            [0, 2, 3, 1],\r\n            [0, 0, -1]\r\n    ],\r\n    [\r\n            [4, 5, 7, 6],\r\n            [0, 0, +1]\r\n    ]\r\n  ].map(function (info) {\r\n    let vertices = info[0].map(function (i) {\r\n      let pos = new Vector3(\r\n                c.x + r.x * (2 * !!(i & 1) - 1), c.y + r.y * (2 * !!(i & 2) - 1), c.z + r.z * (2 * !!(i & 4) - 1))\r\n      return new Vertex3(pos)\r\n    })\r\n    return new Polygon3(vertices, null /* , plane */)\r\n  }))\r\n  result.properties.cube = new Properties()\r\n  result.properties.cube.center = new Vector3(c)\r\n    // add 6 connectors, at the centers of each face:\r\n  result.properties.cube.facecenters = [\r\n    new Connector(new Vector3([r.x, 0, 0]).plus(c), [1, 0, 0], [0, 0, 1]),\r\n    new Connector(new Vector3([-r.x, 0, 0]).plus(c), [-1, 0, 0], [0, 0, 1]),\r\n    new Connector(new Vector3([0, r.y, 0]).plus(c), [0, 1, 0], [0, 0, 1]),\r\n    new Connector(new Vector3([0, -r.y, 0]).plus(c), [0, -1, 0], [0, 0, 1]),\r\n    new Connector(new Vector3([0, 0, r.z]).plus(c), [0, 0, 1], [1, 0, 0]),\r\n    new Connector(new Vector3([0, 0, -r.z]).plus(c), [0, 0, -1], [1, 0, 0])\r\n  ]\r\n  return result\r\n}\r\n\r\n/** Construct a solid sphere\r\n * @param {Object} [options] - options for construction\r\n * @param {Vector3} [options.center=[0,0,0]] - center of sphere\r\n * @param {Number} [options.radius=1] - radius of sphere\r\n * @param {Number} [options.resolution=defaultResolution3D] - number of polygons per 360 degree revolution\r\n * @param {Array} [options.axes] -  an array with 3 vectors for the x, y and z base vectors\r\n * @returns {CSG} new 3D solid\r\n *\r\n *\r\n * @example\r\n * let sphere = CSG.sphere({\r\n *   center: [0, 0, 0],\r\n *   radius: 2,\r\n *   resolution: 32,\r\n * });\r\n*/\r\nconst sphere = function (options) {\r\n  options = options || {}\r\n  let center = parseOptionAs3DVector(options, 'center', [0, 0, 0])\r\n  let radius = parseOptionAsFloat(options, 'radius', 1)\r\n  let resolution = parseOptionAsInt(options, 'resolution', defaultResolution3D)\r\n  let xvector, yvector, zvector\r\n  if ('axes' in options) {\r\n    xvector = options.axes[0].unit().times(radius)\r\n    yvector = options.axes[1].unit().times(radius)\r\n    zvector = options.axes[2].unit().times(radius)\r\n  } else {\r\n    xvector = new Vector3([1, 0, 0]).times(radius)\r\n    yvector = new Vector3([0, -1, 0]).times(radius)\r\n    zvector = new Vector3([0, 0, 1]).times(radius)\r\n  }\r\n  if (resolution < 4) resolution = 4\r\n  let qresolution = Math.round(resolution / 4)\r\n  let prevcylinderpoint\r\n  let polygons = []\r\n  for (let slice1 = 0; slice1 <= resolution; slice1++) {\r\n    let angle = Math.PI * 2.0 * slice1 / resolution\r\n    let cylinderpoint = xvector.times(Math.cos(angle)).plus(yvector.times(Math.sin(angle)))\r\n    if (slice1 > 0) {\r\n            // cylinder vertices:\r\n      let vertices = []\r\n      let prevcospitch, prevsinpitch\r\n      for (let slice2 = 0; slice2 <= qresolution; slice2++) {\r\n        let pitch = 0.5 * Math.PI * slice2 / qresolution\r\n        let cospitch = Math.cos(pitch)\r\n        let sinpitch = Math.sin(pitch)\r\n        if (slice2 > 0) {\r\n          vertices = []\r\n          vertices.push(new Vertex3(center.plus(prevcylinderpoint.times(prevcospitch).minus(zvector.times(prevsinpitch)))))\r\n          vertices.push(new Vertex3(center.plus(cylinderpoint.times(prevcospitch).minus(zvector.times(prevsinpitch)))))\r\n          if (slice2 < qresolution) {\r\n            vertices.push(new Vertex3(center.plus(cylinderpoint.times(cospitch).minus(zvector.times(sinpitch)))))\r\n          }\r\n          vertices.push(new Vertex3(center.plus(prevcylinderpoint.times(cospitch).minus(zvector.times(sinpitch)))))\r\n          polygons.push(new Polygon3(vertices))\r\n          vertices = []\r\n          vertices.push(new Vertex3(center.plus(prevcylinderpoint.times(prevcospitch).plus(zvector.times(prevsinpitch)))))\r\n          vertices.push(new Vertex3(center.plus(cylinderpoint.times(prevcospitch).plus(zvector.times(prevsinpitch)))))\r\n          if (slice2 < qresolution) {\r\n            vertices.push(new Vertex3(center.plus(cylinderpoint.times(cospitch).plus(zvector.times(sinpitch)))))\r\n          }\r\n          vertices.push(new Vertex3(center.plus(prevcylinderpoint.times(cospitch).plus(zvector.times(sinpitch)))))\r\n          vertices.reverse()\r\n          polygons.push(new Polygon3(vertices))\r\n        }\r\n        prevcospitch = cospitch\r\n        prevsinpitch = sinpitch\r\n      }\r\n    }\r\n    prevcylinderpoint = cylinderpoint\r\n  }\r\n  let result = fromPolygons(polygons)\r\n  result.properties.sphere = new Properties()\r\n  result.properties.sphere.center = new Vector3(center)\r\n  result.properties.sphere.facepoint = center.plus(xvector)\r\n  return result\r\n}\r\n\r\n/** Construct a solid cylinder.\r\n * @param {Object} [options] - options for construction\r\n * @param {Vector} [options.start=[0,-1,0]] - start point of cylinder\r\n * @param {Vector} [options.end=[0,1,0]] - end point of cylinder\r\n * @param {Number} [options.radius=1] - radius of cylinder, must be scalar\r\n * @param {Number} [options.resolution=defaultResolution3D] - number of polygons per 360 degree revolution\r\n * @returns {CSG} new 3D solid\r\n *\r\n * @example\r\n * let cylinder = CSG.cylinder({\r\n *   start: [0, -10, 0],\r\n *   end: [0, 10, 0],\r\n *   radius: 10,\r\n *   resolution: 16\r\n * });\r\n */\r\nconst cylinder = function (options) {\r\n  let s = parseOptionAs3DVector(options, 'start', [0, -1, 0])\r\n  let e = parseOptionAs3DVector(options, 'end', [0, 1, 0])\r\n  let r = parseOptionAsFloat(options, 'radius', 1)\r\n  let rEnd = parseOptionAsFloat(options, 'radiusEnd', r)\r\n  let rStart = parseOptionAsFloat(options, 'radiusStart', r)\r\n  let alpha = parseOptionAsFloat(options, 'sectorAngle', 360)\r\n  alpha = alpha > 360 ? alpha % 360 : alpha\r\n\r\n  if ((rEnd < 0) || (rStart < 0)) {\r\n    throw new Error('Radius should be non-negative')\r\n  }\r\n  if ((rEnd === 0) && (rStart === 0)) {\r\n    throw new Error('Either radiusStart or radiusEnd should be positive')\r\n  }\r\n\r\n  let slices = parseOptionAsInt(options, 'resolution', defaultResolution2D) // FIXME is this 3D?\r\n  let ray = e.minus(s)\r\n  let axisZ = ray.unit() //, isY = (Math.abs(axisZ.y) > 0.5);\r\n  let axisX = axisZ.randomNonParallelVector().unit()\r\n\r\n    //  let axisX = new Vector3(isY, !isY, 0).cross(axisZ).unit();\r\n  let axisY = axisX.cross(axisZ).unit()\r\n  let start = new Vertex3(s)\r\n  let end = new Vertex3(e)\r\n  let polygons = []\r\n\r\n  function point (stack, slice, radius) {\r\n    let angle = slice * Math.PI * alpha / 180\r\n    let out = axisX.times(Math.cos(angle)).plus(axisY.times(Math.sin(angle)))\r\n    let pos = s.plus(ray.times(stack)).plus(out.times(radius))\r\n    return new Vertex3(pos)\r\n  }\r\n  if (alpha > 0) {\r\n    for (let i = 0; i < slices; i++) {\r\n      let t0 = i / slices\r\n      let t1 = (i + 1) / slices\r\n      if (rEnd === rStart) {\r\n        polygons.push(new Polygon3([start, point(0, t0, rEnd), point(0, t1, rEnd)]))\r\n        polygons.push(new Polygon3([point(0, t1, rEnd), point(0, t0, rEnd), point(1, t0, rEnd), point(1, t1, rEnd)]))\r\n        polygons.push(new Polygon3([end, point(1, t1, rEnd), point(1, t0, rEnd)]))\r\n      } else {\r\n        if (rStart > 0) {\r\n          polygons.push(new Polygon3([start, point(0, t0, rStart), point(0, t1, rStart)]))\r\n          polygons.push(new Polygon3([point(0, t0, rStart), point(1, t0, rEnd), point(0, t1, rStart)]))\r\n        }\r\n        if (rEnd > 0) {\r\n          polygons.push(new Polygon3([end, point(1, t1, rEnd), point(1, t0, rEnd)]))\r\n          polygons.push(new Polygon3([point(1, t0, rEnd), point(1, t1, rEnd), point(0, t1, rStart)]))\r\n        }\r\n      }\r\n    }\r\n    if (alpha < 360) {\r\n      polygons.push(new Polygon3([start, end, point(0, 0, rStart)]))\r\n      polygons.push(new Polygon3([point(0, 0, rStart), end, point(1, 0, rEnd)]))\r\n      polygons.push(new Polygon3([start, point(0, 1, rStart), end]))\r\n      polygons.push(new Polygon3([point(0, 1, rStart), point(1, 1, rEnd), end]))\r\n    }\r\n  }\r\n  let result = fromPolygons(polygons)\r\n  result.properties.cylinder = new Properties()\r\n  result.properties.cylinder.start = new Connector(s, axisZ.negated(), axisX)\r\n  result.properties.cylinder.end = new Connector(e, axisZ, axisX)\r\n  let cylCenter = s.plus(ray.times(0.5))\r\n  let fptVec = axisX.rotate(s, axisZ, -alpha / 2).times((rStart + rEnd) / 2)\r\n  let fptVec90 = fptVec.cross(axisZ)\r\n    // note this one is NOT a face normal for a cone. - It's horizontal from cyl perspective\r\n  result.properties.cylinder.facepointH = new Connector(cylCenter.plus(fptVec), fptVec, axisZ)\r\n  result.properties.cylinder.facepointH90 = new Connector(cylCenter.plus(fptVec90), fptVec90, axisZ)\r\n  return result\r\n}\r\n\r\n/** Construct a cylinder with rounded ends.\r\n * @param {Object} [options] - options for construction\r\n * @param {Vector3} [options.start=[0,-1,0]] - start point of cylinder\r\n * @param {Vector3} [options.end=[0,1,0]] - end point of cylinder\r\n * @param {Number} [options.radius=1] - radius of rounded ends, must be scalar\r\n * @param {Vector3} [options.normal] - vector determining the starting angle for tesselation. Should be non-parallel to start.minus(end)\r\n * @param {Number} [options.resolution=defaultResolution3D] - number of polygons per 360 degree revolution\r\n * @returns {CSG} new 3D solid\r\n *\r\n * @example\r\n * let cylinder = CSG.roundedCylinder({\r\n *   start: [0, -10, 0],\r\n *   end: [0, 10, 0],\r\n *   radius: 2,\r\n *   resolution: 16\r\n * });\r\n */\r\nconst roundedCylinder = function (options) {\r\n  let p1 = parseOptionAs3DVector(options, 'start', [0, -1, 0])\r\n  let p2 = parseOptionAs3DVector(options, 'end', [0, 1, 0])\r\n  let radius = parseOptionAsFloat(options, 'radius', 1)\r\n  let direction = p2.minus(p1)\r\n  let defaultnormal\r\n  if (Math.abs(direction.x) > Math.abs(direction.y)) {\r\n    defaultnormal = new Vector3(0, 1, 0)\r\n  } else {\r\n    defaultnormal = new Vector3(1, 0, 0)\r\n  }\r\n  let normal = parseOptionAs3DVector(options, 'normal', defaultnormal)\r\n  let resolution = parseOptionAsInt(options, 'resolution', defaultResolution3D)\r\n  if (resolution < 4) resolution = 4\r\n  let polygons = []\r\n  let qresolution = Math.floor(0.25 * resolution)\r\n  let length = direction.length()\r\n  if (length < EPS) {\r\n    return sphere({\r\n      center: p1,\r\n      radius: radius,\r\n      resolution: resolution\r\n    })\r\n  }\r\n  let zvector = direction.unit().times(radius)\r\n  let xvector = zvector.cross(normal).unit().times(radius)\r\n  let yvector = xvector.cross(zvector).unit().times(radius)\r\n  let prevcylinderpoint\r\n  for (let slice1 = 0; slice1 <= resolution; slice1++) {\r\n    let angle = Math.PI * 2.0 * slice1 / resolution\r\n    let cylinderpoint = xvector.times(Math.cos(angle)).plus(yvector.times(Math.sin(angle)))\r\n    if (slice1 > 0) {\r\n            // cylinder vertices:\r\n      let vertices = []\r\n      vertices.push(new Vertex3(p1.plus(cylinderpoint)))\r\n      vertices.push(new Vertex3(p1.plus(prevcylinderpoint)))\r\n      vertices.push(new Vertex3(p2.plus(prevcylinderpoint)))\r\n      vertices.push(new Vertex3(p2.plus(cylinderpoint)))\r\n      polygons.push(new Polygon3(vertices))\r\n      let prevcospitch, prevsinpitch\r\n      for (let slice2 = 0; slice2 <= qresolution; slice2++) {\r\n        let pitch = 0.5 * Math.PI * slice2 / qresolution\r\n                // let pitch = Math.asin(slice2/qresolution);\r\n        let cospitch = Math.cos(pitch)\r\n        let sinpitch = Math.sin(pitch)\r\n        if (slice2 > 0) {\r\n          vertices = []\r\n          vertices.push(new Vertex3(p1.plus(prevcylinderpoint.times(prevcospitch).minus(zvector.times(prevsinpitch)))))\r\n          vertices.push(new Vertex3(p1.plus(cylinderpoint.times(prevcospitch).minus(zvector.times(prevsinpitch)))))\r\n          if (slice2 < qresolution) {\r\n            vertices.push(new Vertex3(p1.plus(cylinderpoint.times(cospitch).minus(zvector.times(sinpitch)))))\r\n          }\r\n          vertices.push(new Vertex3(p1.plus(prevcylinderpoint.times(cospitch).minus(zvector.times(sinpitch)))))\r\n          polygons.push(new Polygon3(vertices))\r\n          vertices = []\r\n          vertices.push(new Vertex3(p2.plus(prevcylinderpoint.times(prevcospitch).plus(zvector.times(prevsinpitch)))))\r\n          vertices.push(new Vertex3(p2.plus(cylinderpoint.times(prevcospitch).plus(zvector.times(prevsinpitch)))))\r\n          if (slice2 < qresolution) {\r\n            vertices.push(new Vertex3(p2.plus(cylinderpoint.times(cospitch).plus(zvector.times(sinpitch)))))\r\n          }\r\n          vertices.push(new Vertex3(p2.plus(prevcylinderpoint.times(cospitch).plus(zvector.times(sinpitch)))))\r\n          vertices.reverse()\r\n          polygons.push(new Polygon3(vertices))\r\n        }\r\n        prevcospitch = cospitch\r\n        prevsinpitch = sinpitch\r\n      }\r\n    }\r\n    prevcylinderpoint = cylinderpoint\r\n  }\r\n  let result = fromPolygons(polygons)\r\n  let ray = zvector.unit()\r\n  let axisX = xvector.unit()\r\n  result.properties.roundedCylinder = new Properties()\r\n  result.properties.roundedCylinder.start = new Connector(p1, ray.negated(), axisX)\r\n  result.properties.roundedCylinder.end = new Connector(p2, ray, axisX)\r\n  result.properties.roundedCylinder.facepoint = p1.plus(xvector)\r\n  return result\r\n}\r\n\r\n/** Construct an elliptic cylinder.\r\n * @param {Object} [options] - options for construction\r\n * @param {Vector3} [options.start=[0,-1,0]] - start point of cylinder\r\n * @param {Vector3} [options.end=[0,1,0]] - end point of cylinder\r\n * @param {Vector2D} [options.radius=[1,1]] - radius of rounded ends, must be two dimensional array\r\n * @param {Vector2D} [options.radiusStart=[1,1]] - OPTIONAL radius of rounded start, must be two dimensional array\r\n * @param {Vector2D} [options.radiusEnd=[1,1]] - OPTIONAL radius of rounded end, must be two dimensional array\r\n * @param {Number} [options.resolution=defaultResolution2D] - number of polygons per 360 degree revolution\r\n * @returns {CSG} new 3D solid\r\n *\r\n * @example\r\n *     let cylinder = CSG.cylinderElliptic({\r\n *       start: [0, -10, 0],\r\n *       end: [0, 10, 0],\r\n *       radiusStart: [10,5],\r\n *       radiusEnd: [8,3],\r\n *       resolution: 16\r\n *     });\r\n */\r\n\r\nconst cylinderElliptic = function (options) {\r\n  let s = parseOptionAs3DVector(options, 'start', [0, -1, 0])\r\n  let e = parseOptionAs3DVector(options, 'end', [0, 1, 0])\r\n  let r = parseOptionAs2DVector(options, 'radius', [1, 1])\r\n  let rEnd = parseOptionAs2DVector(options, 'radiusEnd', r)\r\n  let rStart = parseOptionAs2DVector(options, 'radiusStart', r)\r\n\r\n  if ((rEnd._x < 0) || (rStart._x < 0) || (rEnd._y < 0) || (rStart._y < 0)) {\r\n    throw new Error('Radius should be non-negative')\r\n  }\r\n  if ((rEnd._x === 0 || rEnd._y === 0) && (rStart._x === 0 || rStart._y === 0)) {\r\n    throw new Error('Either radiusStart or radiusEnd should be positive')\r\n  }\r\n\r\n  let slices = parseOptionAsInt(options, 'resolution', defaultResolution2D) // FIXME is this correct?\r\n  let ray = e.minus(s)\r\n  let axisZ = ray.unit() //, isY = (Math.abs(axisZ.y) > 0.5);\r\n  let axisX = axisZ.randomNonParallelVector().unit()\r\n\r\n    //  let axisX = new Vector3(isY, !isY, 0).cross(axisZ).unit();\r\n  let axisY = axisX.cross(axisZ).unit()\r\n  let start = new Vertex3(s)\r\n  let end = new Vertex3(e)\r\n  let polygons = []\r\n\r\n  function point (stack, slice, radius) {\r\n    let angle = slice * Math.PI * 2\r\n    let out = axisX.times(radius._x * Math.cos(angle)).plus(axisY.times(radius._y * Math.sin(angle)))\r\n    let pos = s.plus(ray.times(stack)).plus(out)\r\n    return new Vertex3(pos)\r\n  }\r\n  for (let i = 0; i < slices; i++) {\r\n    let t0 = i / slices\r\n    let t1 = (i + 1) / slices\r\n\r\n    if (rEnd._x === rStart._x && rEnd._y === rStart._y) {\r\n      polygons.push(new Polygon3([start, point(0, t0, rEnd), point(0, t1, rEnd)]))\r\n      polygons.push(new Polygon3([point(0, t1, rEnd), point(0, t0, rEnd), point(1, t0, rEnd), point(1, t1, rEnd)]))\r\n      polygons.push(new Polygon3([end, point(1, t1, rEnd), point(1, t0, rEnd)]))\r\n    } else {\r\n      if (rStart._x > 0) {\r\n        polygons.push(new Polygon3([start, point(0, t0, rStart), point(0, t1, rStart)]))\r\n        polygons.push(new Polygon3([point(0, t0, rStart), point(1, t0, rEnd), point(0, t1, rStart)]))\r\n      }\r\n      if (rEnd._x > 0) {\r\n        polygons.push(new Polygon3([end, point(1, t1, rEnd), point(1, t0, rEnd)]))\r\n        polygons.push(new Polygon3([point(1, t0, rEnd), point(1, t1, rEnd), point(0, t1, rStart)]))\r\n      }\r\n    }\r\n  }\r\n  let result = fromPolygons(polygons)\r\n  result.properties.cylinder = new Properties()\r\n  result.properties.cylinder.start = new Connector(s, axisZ.negated(), axisX)\r\n  result.properties.cylinder.end = new Connector(e, axisZ, axisX)\r\n  result.properties.cylinder.facepoint = s.plus(axisX.times(rStart))\r\n  return result\r\n}\r\n\r\n/** Construct an axis-aligned solid rounded cuboid.\r\n * @param {Object} [options] - options for construction\r\n * @param {Vector3} [options.center=[0,0,0]] - center of rounded cube\r\n * @param {Vector3} [options.radius=[1,1,1]] - radius of rounded cube, single scalar is possible\r\n * @param {Number} [options.roundradius=0.2] - radius of rounded edges\r\n * @param {Number} [options.resolution=defaultResolution3D] - number of polygons per 360 degree revolution\r\n * @returns {CSG} new 3D solid\r\n *\r\n * @example\r\n * let cube = CSG.roundedCube({\r\n *   center: [2, 0, 2],\r\n *   radius: 15,\r\n *   roundradius: 2,\r\n *   resolution: 36,\r\n * });\r\n */\r\nconst roundedCube = function (options) {\r\n  let minRR = 1e-2 // minroundradius 1e-3 gives rounding errors already\r\n  let center\r\n  let cuberadius\r\n  let corner1\r\n  let corner2\r\n  options = options || {}\r\n  if (('corner1' in options) || ('corner2' in options)) {\r\n    if (('center' in options) || ('radius' in options)) {\r\n      throw new Error('roundedCube: should either give a radius and center parameter, or a corner1 and corner2 parameter')\r\n    }\r\n    corner1 = parseOptionAs3DVector(options, 'corner1', [0, 0, 0])\r\n    corner2 = parseOptionAs3DVector(options, 'corner2', [1, 1, 1])\r\n    center = corner1.plus(corner2).times(0.5)\r\n    cuberadius = corner2.minus(corner1).times(0.5)\r\n  } else {\r\n    center = parseOptionAs3DVector(options, 'center', [0, 0, 0])\r\n    cuberadius = parseOptionAs3DVector(options, 'radius', [1, 1, 1])\r\n  }\r\n  cuberadius = cuberadius.abs() // negative radii make no sense\r\n  let resolution = parseOptionAsInt(options, 'resolution', defaultResolution3D)\r\n  if (resolution < 4) resolution = 4\r\n  if (resolution % 2 === 1 && resolution < 8) resolution = 8 // avoid ugly\r\n  let roundradius = parseOptionAs3DVector(options, 'roundradius', [0.2, 0.2, 0.2])\r\n    // slight hack for now - total radius stays ok\r\n  roundradius = Vector3.Create(Math.max(roundradius.x, minRR), Math.max(roundradius.y, minRR), Math.max(roundradius.z, minRR))\r\n  let innerradius = cuberadius.minus(roundradius)\r\n  if (innerradius.x < 0 || innerradius.y < 0 || innerradius.z < 0) {\r\n    throw new Error('roundradius <= radius!')\r\n  }\r\n  let res = sphere({radius: 1, resolution: resolution})\r\n  res = res.scale(roundradius)\r\n  innerradius.x > EPS && (res = res.stretchAtPlane([1, 0, 0], [0, 0, 0], 2 * innerradius.x))\r\n  innerradius.y > EPS && (res = res.stretchAtPlane([0, 1, 0], [0, 0, 0], 2 * innerradius.y))\r\n  innerradius.z > EPS && (res = res.stretchAtPlane([0, 0, 1], [0, 0, 0], 2 * innerradius.z))\r\n  res = res.translate([-innerradius.x + center.x, -innerradius.y + center.y, -innerradius.z + center.z])\r\n  res = res.reTesselated()\r\n  res.properties.roundedCube = new Properties()\r\n  res.properties.roundedCube.center = new Vertex3(center)\r\n  res.properties.roundedCube.facecenters = [\r\n    new Connector(new Vector3([cuberadius.x, 0, 0]).plus(center), [1, 0, 0], [0, 0, 1]),\r\n    new Connector(new Vector3([-cuberadius.x, 0, 0]).plus(center), [-1, 0, 0], [0, 0, 1]),\r\n    new Connector(new Vector3([0, cuberadius.y, 0]).plus(center), [0, 1, 0], [0, 0, 1]),\r\n    new Connector(new Vector3([0, -cuberadius.y, 0]).plus(center), [0, -1, 0], [0, 0, 1]),\r\n    new Connector(new Vector3([0, 0, cuberadius.z]).plus(center), [0, 0, 1], [1, 0, 0]),\r\n    new Connector(new Vector3([0, 0, -cuberadius.z]).plus(center), [0, 0, -1], [1, 0, 0])\r\n  ]\r\n  return res\r\n}\r\n\r\n/** Create a polyhedron using Openscad style arguments.\r\n * Define face vertices clockwise looking from outside.\r\n * @param {Object} [options] - options for construction\r\n * @returns {CSG} new 3D solid\r\n */\r\nconst polyhedron = function (options) {\r\n  options = options || {}\r\n  if (('points' in options) !== ('faces' in options)) {\r\n    throw new Error(\"polyhedron needs 'points' and 'faces' arrays\")\r\n  }\r\n  let vertices = parseOptionAs3DVectorList(options, 'points', [\r\n            [1, 1, 0],\r\n            [1, -1, 0],\r\n            [-1, -1, 0],\r\n            [-1, 1, 0],\r\n            [0, 0, 1]\r\n  ])\r\n        .map(function (pt) {\r\n          return new Vertex3(pt)\r\n        })\r\n  let faces = parseOption(options, 'faces', [\r\n            [0, 1, 4],\r\n            [1, 2, 4],\r\n            [2, 3, 4],\r\n            [3, 0, 4],\r\n            [1, 0, 3],\r\n            [2, 1, 3]\r\n  ])\r\n    // Openscad convention defines inward normals - so we have to invert here\r\n  faces.forEach(function (face) {\r\n    face.reverse()\r\n  })\r\n  let polygons = faces.map(function (face) {\r\n    return new Polygon3(face.map(function (idx) {\r\n      return vertices[idx]\r\n    }))\r\n  })\r\n\r\n    // TODO: facecenters as connectors? probably overkill. Maybe centroid\r\n    // the re-tesselation here happens because it's so easy for a user to\r\n    // create parametrized polyhedrons that end up with 1-2 dimensional polygons.\r\n    // These will create infinite loops at CSG.Tree()\r\n  return fromPolygons(polygons).reTesselated()\r\n}\r\n\r\nmodule.exports = {\r\n  cube,\r\n  sphere,\r\n  roundedCube,\r\n  cylinder,\r\n  roundedCylinder,\r\n  cylinderElliptic,\r\n  polyhedron\r\n}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/primitives3d.js?");

/***/ }),

/***/ "../../convert/jscad/src/api/solidFromSlices.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/solidFromSlices.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Polygon = __webpack_require__(/*! ../core/math/Polygon3 */ \"../../convert/jscad/src/core/math/Polygon3.js\")\r\nconst {fromPolygons} = __webpack_require__(/*! ../core/CSGFactories */ \"../../convert/jscad/src/core/CSGFactories.js\")\r\nconst {fnSortByIndex} = __webpack_require__(/*! ../core/utils */ \"../../convert/jscad/src/core/utils.js\")\r\n\r\n// FIXME: WHY is this for 3D polygons and not for 2D shapes ?\r\n/**\r\n * Creates solid from slices (Polygon) by generating walls\r\n * @param {Object} options Solid generating options\r\n *  - numslices {Number} Number of slices to be generated\r\n *  - callback(t, slice) {Function} Callback function generating slices.\r\n *          arguments: t = [0..1], slice = [0..numslices - 1]\r\n *          return: Polygon or null to skip\r\n *  - loop {Boolean} no flats, only walls, it's used to generate solids like a tor\r\n */\r\nconst solidFromSlices = function (polygon, options) {\r\n  let polygons = []\r\n  let csg = null\r\n  let prev = null\r\n  let bottom = null\r\n  let top = null\r\n  let numSlices = 2\r\n  let bLoop = false\r\n  let fnCallback\r\n  let flipped = null\r\n\r\n  if (options) {\r\n    bLoop = Boolean(options['loop'])\r\n\r\n    if (options.numslices) { numSlices = options.numslices }\r\n\r\n    if (options.callback) {\r\n      fnCallback = options.callback\r\n    }\r\n  }\r\n  if (!fnCallback) {\r\n    let square = Polygon.createFromPoints([\r\n                  [0, 0, 0],\r\n                  [1, 0, 0],\r\n                  [1, 1, 0],\r\n                  [0, 1, 0]\r\n    ])\r\n    fnCallback = function (t, slice) {\r\n      return t === 0 || t === 1 ? square.translate([0, 0, t]) : null\r\n    }\r\n  }\r\n  for (let i = 0, iMax = numSlices - 1; i <= iMax; i++) {\r\n    csg = fnCallback.call(polygon, i / iMax, i)\r\n    if (csg) {\r\n      if (!(csg instanceof Polygon)) {\r\n        throw new Error('Polygon.solidFromSlices callback error: Polygon expected')\r\n      }\r\n      csg.checkIfConvex()\r\n\r\n      if (prev) { // generate walls\r\n        if (flipped === null) { // not generated yet\r\n          flipped = prev.plane.signedDistanceToPoint(csg.vertices[0].pos) < 0\r\n        }\r\n        _addWalls(polygons, prev, csg, flipped)\r\n      } else { // the first - will be a bottom\r\n        bottom = csg\r\n      }\r\n      prev = csg\r\n    } // callback can return null to skip that slice\r\n  }\r\n  top = csg\r\n\r\n  if (bLoop) {\r\n    let bSameTopBottom = bottom.vertices.length === top.vertices.length &&\r\n                  bottom.vertices.every(function (v, index) {\r\n                    return v.pos.equals(top.vertices[index].pos)\r\n                  })\r\n    // if top and bottom are not the same -\r\n    // generate walls between them\r\n    if (!bSameTopBottom) {\r\n      _addWalls(polygons, top, bottom, flipped)\r\n    } // else - already generated\r\n  } else {\r\n    // save top and bottom\r\n    // TODO: flip if necessary\r\n    polygons.unshift(flipped ? bottom : bottom.flipped())\r\n    polygons.push(flipped ? top.flipped() : top)\r\n  }\r\n  return fromPolygons(polygons)\r\n}\r\n\r\n/**\r\n * @param walls Array of wall polygons\r\n * @param bottom Bottom polygon\r\n * @param top Top polygon\r\n */\r\nconst _addWalls = function (walls, bottom, top, bFlipped) {\r\n  let bottomPoints = bottom.vertices.slice(0) // make a copy\r\n  let topPoints = top.vertices.slice(0) // make a copy\r\n  let color = top.shared || null\r\n\r\n        // check if bottom perimeter is closed\r\n  if (!bottomPoints[0].pos.equals(bottomPoints[bottomPoints.length - 1].pos)) {\r\n    bottomPoints.push(bottomPoints[0])\r\n  }\r\n\r\n        // check if top perimeter is closed\r\n  if (!topPoints[0].pos.equals(topPoints[topPoints.length - 1].pos)) {\r\n    topPoints.push(topPoints[0])\r\n  }\r\n  if (bFlipped) {\r\n    bottomPoints = bottomPoints.reverse()\r\n    topPoints = topPoints.reverse()\r\n  }\r\n\r\n  let iTopLen = topPoints.length - 1\r\n  let iBotLen = bottomPoints.length - 1\r\n  let iExtra = iTopLen - iBotLen// how many extra triangles we need\r\n  let bMoreTops = iExtra > 0\r\n  let bMoreBottoms = iExtra < 0\r\n\r\n  let aMin = [] // indexes to start extra triangles (polygon with minimal square)\r\n        // init - we need exactly /iExtra/ small triangles\r\n  for (let i = Math.abs(iExtra); i > 0; i--) {\r\n    aMin.push({\r\n      len: Infinity,\r\n      index: -1\r\n    })\r\n  }\r\n\r\n  let len\r\n  if (bMoreBottoms) {\r\n    for (let i = 0; i < iBotLen; i++) {\r\n      len = bottomPoints[i].pos.distanceToSquared(bottomPoints[i + 1].pos)\r\n                // find the element to replace\r\n      for (let j = aMin.length - 1; j >= 0; j--) {\r\n        if (aMin[j].len > len) {\r\n          aMin[j].len = len\r\n          aMin.index = j\r\n          break\r\n        }\r\n      } // for\r\n    }\r\n  } else if (bMoreTops) {\r\n    for (let i = 0; i < iTopLen; i++) {\r\n      len = topPoints[i].pos.distanceToSquared(topPoints[i + 1].pos)\r\n                // find the element to replace\r\n      for (let j = aMin.length - 1; j >= 0; j--) {\r\n        if (aMin[j].len > len) {\r\n          aMin[j].len = len\r\n          aMin.index = j\r\n          break\r\n        }\r\n      } // for\r\n    }\r\n  } // if\r\n  // sort by index\r\n  aMin.sort(fnSortByIndex)\r\n  let getTriangle = function addWallsPutTriangle (pointA, pointB, pointC, color) {\r\n    return new Polygon([pointA, pointB, pointC], color)\r\n  // return bFlipped ? triangle.flipped() : triangle;\r\n  }\r\n\r\n  let bpoint = bottomPoints[0]\r\n  let tpoint = topPoints[0]\r\n  let secondPoint\r\n  let nBotFacet\r\n  let nTopFacet // length of triangle facet side\r\n  for (let iB = 0, iT = 0, iMax = iTopLen + iBotLen; iB + iT < iMax;) {\r\n    if (aMin.length) {\r\n      if (bMoreTops && iT === aMin[0].index) { // one vertex is on the bottom, 2 - on the top\r\n        secondPoint = topPoints[++iT]\r\n                    // console.log('<<< extra top: ' + secondPoint + ', ' + tpoint + ', bottom: ' + bpoint);\r\n        walls.push(getTriangle(\r\n                        secondPoint, tpoint, bpoint, color\r\n                    ))\r\n        tpoint = secondPoint\r\n        aMin.shift()\r\n        continue\r\n      } else if (bMoreBottoms && iB === aMin[0].index) {\r\n        secondPoint = bottomPoints[++iB]\r\n        walls.push(getTriangle(\r\n                        tpoint, bpoint, secondPoint, color\r\n                    ))\r\n        bpoint = secondPoint\r\n        aMin.shift()\r\n        continue\r\n      }\r\n    }\r\n            // choose the shortest path\r\n    if (iB < iBotLen) { // one vertex is on the top, 2 - on the bottom\r\n      nBotFacet = tpoint.pos.distanceToSquared(bottomPoints[iB + 1].pos)\r\n    } else {\r\n      nBotFacet = Infinity\r\n    }\r\n    if (iT < iTopLen) { // one vertex is on the bottom, 2 - on the top\r\n      nTopFacet = bpoint.pos.distanceToSquared(topPoints[iT + 1].pos)\r\n    } else {\r\n      nTopFacet = Infinity\r\n    }\r\n    if (nBotFacet <= nTopFacet) {\r\n      secondPoint = bottomPoints[++iB]\r\n      walls.push(getTriangle(\r\n                    tpoint, bpoint, secondPoint, color\r\n                ))\r\n      bpoint = secondPoint\r\n    } else if (iT < iTopLen) { // nTopFacet < Infinity\r\n      secondPoint = topPoints[++iT]\r\n                // console.log('<<< top: ' + secondPoint + ', ' + tpoint + ', bottom: ' + bpoint);\r\n      walls.push(getTriangle(\r\n                    secondPoint, tpoint, bpoint, color\r\n                ))\r\n      tpoint = secondPoint\r\n    };\r\n  }\r\n  return walls\r\n}\r\n\r\nmodule.exports = solidFromSlices\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/solidFromSlices.js?");

/***/ }),

/***/ "../../convert/jscad/src/api/text.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/text.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const defaultFont = __webpack_require__(/*! ../fonts/single-line/hershey/simplex.js */ \"../../convert/jscad/src/fonts/single-line/hershey/simplex.js\")\r\nconst { union } = __webpack_require__(/*! ./ops-booleans */ \"../../convert/jscad/src/api/ops-booleans.js\")\r\n\r\nconst defaultsVectorParams = {\r\n  xOffset: 0,\r\n  yOffset: 0,\r\n  input: '?',\r\n  align: 'left',\r\n  font: defaultFont,\r\n  height: 14, // == old vector_xxx simplex font height\r\n  lineSpacing: 2.142857142857143, // == 30/14 == old vector_xxx ratio\r\n  letterSpacing: 1,\r\n  extrudeOffset: 0\r\n}\r\n\r\n// vectorsXXX parameters handler\r\nfunction vectorParams (options, input) {\r\n  if (!input && typeof options === 'string') {\r\n    options = { input: options }\r\n  }\r\n  options = options || {}\r\n  let params = Object.assign({}, defaultsVectorParams, options)\r\n  params.input = input || params.input\r\n  return params\r\n}\r\n\r\n// translate text line\r\nfunction translateLine (options, line) {\r\n  const { x, y } = Object.assign({ x: 0, y: 0 }, options || {})\r\n  let segments = line.segments\r\n  let segment = null\r\n  let point = null\r\n  for (let i = 0, il = segments.length; i < il; i++) {\r\n    segment = segments[i]\r\n    for (let j = 0, jl = segment.length; j < jl; j++) {\r\n      point = segment[j]\r\n      segment[j] = [point[0] + x, point[1] + y]\r\n    }\r\n  }\r\n  return line\r\n}\r\n\r\n/** Represents a character as segments\r\n* @typedef {Object} VectorCharObject\r\n* @property {Float} width - character width\r\n* @property {Float} height - character height (uppercase)\r\n* @property {Array} segments - character segments [[[x, y], ...], ...]\r\n*/\r\n\r\n/** Construct a {@link VectorCharObject} from a ascii character whose code is between 31 and 127,\r\n* if the character is not supported it is replaced by a question mark.\r\n* @param {Object|String} [options] - options for construction or ascii character\r\n* @param {Float} [options.xOffset=0] - x offset\r\n* @param {Float} [options.yOffset=0] - y offset\r\n* @param {Float} [options.height=21] - font size (uppercase height)\r\n* @param {Float} [options.extrudeOffset=0] - width of the extrusion that will be applied (manually) after the creation of the character\r\n* @param {String} [options.input='?'] - ascii character (ignored/overwrited if provided as seconds parameter)\r\n* @param {String} [char='?'] - ascii character\r\n* @returns {VectorCharObject}\r\n*\r\n* @example\r\n* let vectorCharObject = vectorChar()\r\n* or\r\n* let vectorCharObject = vectorChar('A')\r\n* or\r\n* let vectorCharObject = vectorChar({ xOffset: 57 }, 'C')\r\n* or\r\n* let vectorCharObject = vectorChar({ xOffset: 78, input: '!' })\r\n*/\r\nfunction vectorChar (options, char) {\r\n  let {\r\n    xOffset, yOffset, input, font, height, extrudeOffset\r\n  } = vectorParams(options, char)\r\n  let code = input.charCodeAt(0)\r\n  if (!code || !font[code]) {\r\n    code = 63 // 63 => ?\r\n  }\r\n  let glyph = [].concat(font[code])\r\n  let ratio = (height - extrudeOffset) / font.height\r\n  let extrudeYOffset = (extrudeOffset / 2)\r\n  let width = glyph.shift() * ratio\r\n  let segments = []\r\n  let polyline = []\r\n  for (let i = 0, il = glyph.length; i < il; i += 2) {\r\n    gx = ratio * glyph[i] + xOffset\r\n    gy = ratio * glyph[i + 1] + yOffset + extrudeYOffset\r\n    if (glyph[i] !== undefined) {\r\n      polyline.push([ gx, gy ])\r\n      continue\r\n    }\r\n    segments.push(polyline)\r\n    polyline = []\r\n    i--\r\n  }\r\n  if (polyline.length) {\r\n    segments.push(polyline)\r\n  }\r\n  return { width, height, segments }\r\n}\r\n\r\n/** Construct an array of character segments from a ascii string whose characters code is between 31 and 127,\r\n* if one character is not supported it is replaced by a question mark.\r\n* @param {Object|String} [options] - options for construction or ascii string\r\n* @param {Float} [options.xOffset=0] - x offset\r\n* @param {Float} [options.yOffset=0] - y offset\r\n* @param {Float} [options.height=21] - font size (uppercase height)\r\n* @param {Float} [options.lineSpacing=1.4] - line spacing expressed as a percentage of font size\r\n* @param {Float} [options.letterSpacing=1] - extra letter spacing expressed as a percentage of font size\r\n* @param {String} [options.align='left'] - multi-line text alignement: left, center or right\r\n* @param {Float} [options.extrudeOffset=0] - width of the extrusion that will be applied (manually) after the creation of the character\r\n* @param {String} [options.input='?'] - ascii string (ignored/overwrited if provided as seconds parameter)\r\n* @param {String} [text='?'] - ascii string\r\n* @returns {Array} characters segments [[[x, y], ...], ...]\r\n*\r\n* @example\r\n* let textSegments = vectorText()\r\n* or\r\n* let textSegments = vectorText('OpenJSCAD')\r\n* or\r\n* let textSegments = vectorText({ yOffset: -50 }, 'OpenJSCAD')\r\n* or\r\n* let textSegments = vectorText({ yOffset: -80, input: 'OpenJSCAD' })\r\n*/\r\nfunction vectorText (options, text) {\r\n  let {\r\n    xOffset, yOffset, input, font, height, align, extrudeOffset, lineSpacing, letterSpacing\r\n  } = vectorParams(options, text)\r\n  let [ x, y ] = [ xOffset, yOffset ]\r\n  let [ i, il, char, vect, width, diff ] = []\r\n  let line = { width: 0, segments: [] }\r\n  let lines = []\r\n  let output = []\r\n  let maxWidth = 0\r\n  let lineStart = x\r\n  const pushLine = () => {\r\n    lines.push(line)\r\n    maxWidth = Math.max(maxWidth, line.width)\r\n    line = { width: 0, segments: [] }\r\n  }\r\n  for (i = 0, il = input.length; i < il; i++) {\r\n    char = input[i]\r\n    vect = vectorChar({ xOffset: x, yOffset: y, font, height, extrudeOffset }, char)\r\n    if (char === '\\n') {\r\n      x = lineStart\r\n      y -= vect.height * lineSpacing\r\n      pushLine()\r\n      continue\r\n    }\r\n    width = vect.width * letterSpacing\r\n    line.width += width\r\n    x += width\r\n    if (char !== ' ') {\r\n      line.segments = line.segments.concat(vect.segments)\r\n    }\r\n  }\r\n  if (line.segments.length) {\r\n    pushLine()\r\n  }\r\n  for (i = 0, il = lines.length; i < il; i++) {\r\n    line = lines[i]\r\n    if (maxWidth > line.width) {\r\n      diff = maxWidth - line.width\r\n      if (align === 'right') {\r\n        line = translateLine({ x: diff }, line)\r\n      } else if (align === 'center') {\r\n        line = translateLine({ x: diff / 2 }, line)\r\n      }\r\n    }\r\n    output = output.concat(line.segments)\r\n  }\r\n  return output\r\n}\r\n\r\n/** Construct a {@link VectorCharObject} from a ascii character whose code is between 31 and 127,\r\n* if the character is not supported it is replaced by a question mark.\r\n* @param {Float} x - x offset\r\n* @param {Float} y - y offset\r\n* @param {String} char - ascii character\r\n* @returns {VectorCharObject}\r\n* @deprecated >= v2\r\n\r\n* @example\r\n* let vectorCharObject = vector_char(36, 0, 'B')\r\n*/\r\nfunction vector_char (x, y, char) {\r\n  return vectorChar({ xOffset: x, yOffset: y }, char)\r\n}\r\n\r\n/** Construct an array of character segments from a ascii string whose characters code is between 31 and 127,\r\n* if one character is not supported it is replaced by a question mark.\r\n* @param {Float} x - x offset\r\n* @param {Float} y - y offset\r\n* @param {String} text - ascii string\r\n* @returns {Array} characters segments [[[x, y], ...], ...]\r\n* @deprecated >= v2\r\n*\r\n* @example\r\n* let textSegments = vector_text(0, -20, 'OpenJSCAD')\r\n*/\r\nfunction vector_text (x, y, text) {\r\n  return vectorText({ xOffset: x, yOffset: y }, text)\r\n}\r\n\r\nmodule.exports = {\r\n  vector_char,\r\n  vector_text,\r\n  vectorChar,\r\n  vectorText\r\n}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/api/text.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/CAG.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/CAG.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {Connector} = __webpack_require__(/*! ./connectors */ \"../../convert/jscad/src/core/connectors.js\")\r\nconst Vertex3D = __webpack_require__(/*! ./math/Vertex3 */ \"../../convert/jscad/src/core/math/Vertex3.js\")\r\nconst Vector2D = __webpack_require__(/*! ./math/Vector2 */ \"../../convert/jscad/src/core/math/Vector2.js\")\r\nconst Vector3D = __webpack_require__(/*! ./math/Vector3 */ \"../../convert/jscad/src/core/math/Vector3.js\")\r\nconst Polygon = __webpack_require__(/*! ./math/Polygon3 */ \"../../convert/jscad/src/core/math/Polygon3.js\")\r\n\r\nconst {fromPolygons} = __webpack_require__(/*! ./CSGFactories */ \"../../convert/jscad/src/core/CSGFactories.js\")\r\nconst {fromSides, fromFakeCSG} = __webpack_require__(/*! ./CAGFactories */ \"../../convert/jscad/src/core/CAGFactories.js\")\r\n\r\nconst canonicalize = __webpack_require__(/*! ./utils/canonicalize */ \"../../convert/jscad/src/core/utils/canonicalize.js\")\r\nconst retesselate = __webpack_require__(/*! ./utils/retesellate */ \"../../convert/jscad/src/core/utils/retesellate.js\")\r\nconst {isCAGValid, isSelfIntersecting, hasPointInside} = __webpack_require__(/*! ./utils/cagValidation */ \"../../convert/jscad/src/core/utils/cagValidation.js\")\r\nconst {area, getBounds} = __webpack_require__(/*! ./utils/cagMeasurements */ \"../../convert/jscad/src/core/utils/cagMeasurements.js\")\r\n\r\n// all of these are good candidates for elimination in this scope, since they are part of a functional api\r\nconst {overCutInsideCorners} = __webpack_require__(/*! ../api/ops-cnc */ \"../../convert/jscad/src/api/ops-cnc.js\")\r\nconst {extrudeInOrthonormalBasis, extrudeInPlane, extrude, rotateExtrude} = __webpack_require__(/*! ../api/ops-extrusions */ \"../../convert/jscad/src/api/ops-extrusions.js\")\r\nconst cagoutlinePaths = __webpack_require__(/*! ../api/cagOutlinePaths */ \"../../convert/jscad/src/api/cagOutlinePaths.js\")\r\nconst center = __webpack_require__(/*! ../api/center */ \"../../convert/jscad/src/api/center.js\")\r\nconst {expand, contract, expandedShellOfCAG} = __webpack_require__(/*! ../api/ops-expandContract */ \"../../convert/jscad/src/api/ops-expandContract.js\")\r\n/**\r\n * Class CAG\r\n * Holds a solid area geometry like CSG but 2D.\r\n * Each area consists of a number of sides.\r\n * Each side is a line between 2 points.\r\n * @constructor\r\n */\r\nlet CAG = function () {\r\n  this.sides = []\r\n  this.isCanonicalized = false\r\n}\r\n\r\nCAG.prototype = {\r\n  union: function (cag) {\r\n    let cags\r\n    if (cag instanceof Array) {\r\n      cags = cag\r\n    } else {\r\n      cags = [cag]\r\n    }\r\n    let r = this._toCSGWall(-1, 1)\r\n    r = r.union(\r\n            cags.map(function (cag) {\r\n              return cag._toCSGWall(-1, 1).reTesselated()\r\n            }), false, false)\r\n    return fromFakeCSG(r).canonicalized()\r\n  },\r\n\r\n  subtract: function (cag) {\r\n    let cags\r\n    if (cag instanceof Array) {\r\n      cags = cag\r\n    } else {\r\n      cags = [cag]\r\n    }\r\n    let r = this._toCSGWall(-1, 1)\r\n    cags.map(function (cag) {\r\n      r = r.subtractSub(cag._toCSGWall(-1, 1), false, false)\r\n    })\r\n    r = r.reTesselated()\r\n    r = r.canonicalized()\r\n    r = fromFakeCSG(r)\r\n    r = r.canonicalized()\r\n    return r\r\n  },\r\n\r\n  intersect: function (cag) {\r\n    let cags\r\n    if (cag instanceof Array) {\r\n      cags = cag\r\n    } else {\r\n      cags = [cag]\r\n    }\r\n    let r = this._toCSGWall(-1, 1)\r\n    cags.map(function (cag) {\r\n      r = r.intersectSub(cag._toCSGWall(-1, 1), false, false)\r\n    })\r\n    r = r.reTesselated()\r\n    r = r.canonicalized()\r\n    r = fromFakeCSG(r)\r\n    r = r.canonicalized()\r\n    return r\r\n  },\r\n\r\n  transform: function (matrix4x4) {\r\n    let ismirror = matrix4x4.isMirroring()\r\n    let newsides = this.sides.map(function (side) {\r\n      return side.transform(matrix4x4)\r\n    })\r\n    let result = fromSides(newsides)\r\n    if (ismirror) {\r\n      result = result.flipped()\r\n    }\r\n    return result\r\n  },\r\n\r\n  flipped: function () {\r\n    let newsides = this.sides.map(function (side) {\r\n      return side.flipped()\r\n    })\r\n    newsides.reverse()\r\n    return fromSides(newsides)\r\n  },\r\n\r\n  // ALIAS !\r\n  center: function (axes) {\r\n    return center({axes: axes}, [this])\r\n  },\r\n\r\n  // ALIAS !\r\n  expandedShell: function (radius, resolution) {\r\n    return expandedShellOfCAG(this, radius, resolution)\r\n  },\r\n\r\n  // ALIAS !\r\n  expand: function (radius, resolution) {\r\n    return expand(this, radius, resolution)\r\n  },\r\n\r\n  contract: function (radius, resolution) {\r\n    return contract(this, radius, resolution)\r\n  },\r\n\r\n  // ALIAS !\r\n  area: function () {\r\n    return area(this)\r\n  },\r\n\r\n  // ALIAS !\r\n  getBounds: function () {\r\n    return getBounds(this)\r\n  },\r\n  // ALIAS !\r\n  isSelfIntersecting: function (debug) {\r\n    return isSelfIntersecting(this, debug)\r\n  },\r\n  // extrusion: all aliases to simple functions\r\n  extrudeInOrthonormalBasis: function (orthonormalbasis, depth, options) {\r\n    return extrudeInOrthonormalBasis(this, orthonormalbasis, depth, options)\r\n  },\r\n\r\n  // ALIAS !\r\n  extrudeInPlane: function (axis1, axis2, depth, options) {\r\n    return extrudeInPlane(this, axis1, axis2, depth, options)\r\n  },\r\n\r\n  // ALIAS !\r\n  extrude: function (options) {\r\n    return extrude(this, options)\r\n  },\r\n\r\n  // ALIAS !\r\n  rotateExtrude: function (options) { // FIXME options should be optional\r\n    return rotateExtrude(this, options)\r\n  },\r\n\r\n  // ALIAS !\r\n  check: function () {\r\n    return isCAGValid(this)\r\n  },\r\n\r\n  // ALIAS !\r\n  canonicalized: function () {\r\n    return canonicalize(this)\r\n  },\r\n\r\n  // ALIAS !\r\n  reTesselated: function () {\r\n    return retesselate(this)\r\n  },\r\n\r\n  // ALIAS !\r\n  getOutlinePaths: function () {\r\n    return cagoutlinePaths(this)\r\n  },\r\n\r\n  // ALIAS !\r\n  overCutInsideCorners: function (cutterradius) {\r\n    return overCutInsideCorners(this, cutterradius)\r\n  },\r\n\r\n  // ALIAS !\r\n  hasPointInside: function (point) {\r\n    return hasPointInside(this, point)\r\n  },\r\n\r\n  // All the toXXX functions\r\n  toString: function () {\r\n    let result = 'CAG (' + this.sides.length + ' sides):\\n'\r\n    this.sides.map(function (side) {\r\n      result += '  ' + side.toString() + '\\n'\r\n    })\r\n    return result\r\n  },\r\n\r\n  _toCSGWall: function (z0, z1) {\r\n    let polygons = this.sides.map(function (side) {\r\n      return side.toPolygon3D(z0, z1)\r\n    })\r\n    return fromPolygons(polygons)\r\n  },\r\n\r\n  _toVector3DPairs: function (m) {\r\n        // transform m\r\n    let pairs = this.sides.map(function (side) {\r\n      let p0 = side.vertex0.pos\r\n      let p1 = side.vertex1.pos\r\n      return [Vector3D.Create(p0.x, p0.y, 0),\r\n        Vector3D.Create(p1.x, p1.y, 0)]\r\n    })\r\n    if (typeof m !== 'undefined') {\r\n      pairs = pairs.map(function (pair) {\r\n        return pair.map(function (v) {\r\n          return v.transform(m)\r\n        })\r\n      })\r\n    }\r\n    return pairs\r\n  },\r\n\r\n  /*\r\n    * transform a cag into the polygons of a corresponding 3d plane, positioned per options\r\n    * Accepts a connector for plane positioning, or optionally\r\n    * single translation, axisVector, normalVector arguments\r\n    * (toConnector has precedence over single arguments if provided)\r\n    */\r\n  _toPlanePolygons: function (options) {\r\n    const defaults = {\r\n      flipped: false\r\n    }\r\n    options = Object.assign({}, defaults, options)\r\n    let {flipped} = options\r\n    // reference connector for transformation\r\n    let origin = [0, 0, 0]\r\n    let defaultAxis = [0, 0, 1]\r\n    let defaultNormal = [0, 1, 0]\r\n    let thisConnector = new Connector(origin, defaultAxis, defaultNormal)\r\n    // translated connector per options\r\n    let translation = options.translation || origin\r\n    let axisVector = options.axisVector || defaultAxis\r\n    let normalVector = options.normalVector || defaultNormal\r\n    // will override above if options has toConnector\r\n    let toConnector = options.toConnector ||\r\n            new Connector(translation, axisVector, normalVector)\r\n    // resulting transform\r\n    let m = thisConnector.getTransformationTo(toConnector, false, 0)\r\n    // create plane as a (partial non-closed) CSG in XY plane\r\n    let bounds = this.getBounds()\r\n    bounds[0] = bounds[0].minus(new Vector2D(1, 1))\r\n    bounds[1] = bounds[1].plus(new Vector2D(1, 1))\r\n    let csgshell = this._toCSGWall(-1, 1)\r\n    let csgplane = fromPolygons([new Polygon([\r\n      new Vertex3D(new Vector3D(bounds[0].x, bounds[0].y, 0)),\r\n      new Vertex3D(new Vector3D(bounds[1].x, bounds[0].y, 0)),\r\n      new Vertex3D(new Vector3D(bounds[1].x, bounds[1].y, 0)),\r\n      new Vertex3D(new Vector3D(bounds[0].x, bounds[1].y, 0))\r\n    ])])\r\n    if (flipped) {\r\n      csgplane = csgplane.invert()\r\n    }\r\n    // intersectSub -> prevent premature retesselate/canonicalize\r\n    csgplane = csgplane.intersectSub(csgshell)\r\n    // only keep the polygons in the z plane:\r\n    let polys = csgplane.polygons.filter(function (polygon) {\r\n      return Math.abs(polygon.plane.normal.z) > 0.99\r\n    })\r\n    // finally, position the plane per passed transformations\r\n    return polys.map(function (poly) {\r\n      return poly.transform(m)\r\n    })\r\n  },\r\n\r\n  /*\r\n    * given 2 connectors, this returns all polygons of a \"wall\" between 2\r\n    * copies of this cag, positioned in 3d space as \"bottom\" and\r\n    * \"top\" plane per connectors toConnector1, and toConnector2, respectively\r\n    */\r\n  _toWallPolygons: function (options) {\r\n        // normals are going to be correct as long as toConn2.point - toConn1.point\r\n        // points into cag normal direction (check in caller)\r\n        // arguments: options.toConnector1, options.toConnector2, options.cag\r\n        //     walls go from toConnector1 to toConnector2\r\n        //     optionally, target cag to point to - cag needs to have same number of sides as this!\r\n    let origin = [0, 0, 0]\r\n    let defaultAxis = [0, 0, 1]\r\n    let defaultNormal = [0, 1, 0]\r\n    let thisConnector = new Connector(origin, defaultAxis, defaultNormal)\r\n        // arguments:\r\n    let toConnector1 = options.toConnector1\r\n        // let toConnector2 = new Connector([0, 0, -30], defaultAxis, defaultNormal);\r\n    let toConnector2 = options.toConnector2\r\n    if (!(toConnector1 instanceof Connector && toConnector2 instanceof Connector)) {\r\n      throw new Error('could not parse Connector arguments toConnector1 or toConnector2')\r\n    }\r\n    if (options.cag) {\r\n      if (options.cag.sides.length !== this.sides.length) {\r\n        throw new Error('target cag needs same sides count as start cag')\r\n      }\r\n    }\r\n        // target cag is same as this unless specified\r\n    let toCag = options.cag || this\r\n    let m1 = thisConnector.getTransformationTo(toConnector1, false, 0)\r\n    let m2 = thisConnector.getTransformationTo(toConnector2, false, 0)\r\n    let vps1 = this._toVector3DPairs(m1)\r\n    let vps2 = toCag._toVector3DPairs(m2)\r\n\r\n    let polygons = []\r\n    vps1.forEach(function (vp1, i) {\r\n      polygons.push(new Polygon([\r\n        new Vertex3D(vps2[i][1]), new Vertex3D(vps2[i][0]), new Vertex3D(vp1[0])]))\r\n      polygons.push(new Polygon([\r\n        new Vertex3D(vps2[i][1]), new Vertex3D(vp1[0]), new Vertex3D(vp1[1])]))\r\n    })\r\n    return polygons\r\n  },\r\n\r\n    /**\r\n     * Convert to a list of points.\r\n     * @return {points[]} list of points in 2D space\r\n     */\r\n  toPoints: function () {\r\n    let points = this.sides.map(function (side) {\r\n      let v0 = side.vertex0\r\n      // let v1 = side.vertex1\r\n      return v0.pos\r\n    })\r\n    // due to the logic of fromPoints()\r\n    // move the first point to the last\r\n    if (points.length > 0) {\r\n      points.push(points.shift())\r\n    }\r\n    return points\r\n  },\r\n\r\n    /** Convert to compact binary form.\r\n   * See fromCompactBinary.\r\n   * @return {CompactBinary}\r\n   */\r\n  toCompactBinary: function () {\r\n    let cag = this.canonicalized()\r\n    let numsides = cag.sides.length\r\n    let vertexmap = {}\r\n    let vertices = []\r\n    let numvertices = 0\r\n    let sideVertexIndices = new Uint32Array(2 * numsides)\r\n    let sidevertexindicesindex = 0\r\n    cag.sides.map(function (side) {\r\n      [side.vertex0, side.vertex1].map(function (v) {\r\n        let vertextag = v.getTag()\r\n        let vertexindex\r\n        if (!(vertextag in vertexmap)) {\r\n          vertexindex = numvertices++\r\n          vertexmap[vertextag] = vertexindex\r\n          vertices.push(v)\r\n        } else {\r\n          vertexindex = vertexmap[vertextag]\r\n        }\r\n        sideVertexIndices[sidevertexindicesindex++] = vertexindex\r\n      })\r\n    })\r\n    let vertexData = new Float64Array(numvertices * 2)\r\n    let verticesArrayIndex = 0\r\n    vertices.map(function (v) {\r\n      let pos = v.pos\r\n      vertexData[verticesArrayIndex++] = pos._x\r\n      vertexData[verticesArrayIndex++] = pos._y\r\n    })\r\n    let result = {\r\n      'class': 'CAG',\r\n      sideVertexIndices: sideVertexIndices,\r\n      vertexData: vertexData\r\n    }\r\n    return result\r\n  }\r\n}\r\n\r\nmodule.exports = CAG\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/CAG.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/CAGFactories.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/CAGFactories.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Side = __webpack_require__(/*! ./math/Side */ \"../../convert/jscad/src/core/math/Side.js\")\r\nconst Vector2D = __webpack_require__(/*! ./math/Vector2 */ \"../../convert/jscad/src/core/math/Vector2.js\")\r\nconst Vertex2 = __webpack_require__(/*! ./math/Vertex2 */ \"../../convert/jscad/src/core/math/Vertex2.js\")\r\nconst {areaEPS} = __webpack_require__(/*! ./constants */ \"../../convert/jscad/src/core/constants.js\")\r\nconst {isSelfIntersecting, contains} = __webpack_require__(/*! ./utils/cagValidation */ \"../../convert/jscad/src/core/utils/cagValidation.js\")\r\nconst {union, difference} = __webpack_require__(/*! ../api/ops-booleans */ \"../../convert/jscad/src/api/ops-booleans.js\")\r\n\r\n/** Construct a CAG from a list of `Side` instances.\r\n * @param {Side[]} sides - list of sides\r\n * @returns {CAG} new CAG object\r\n */\r\nconst fromSides = function (sides) {\r\n  const CAG = __webpack_require__(/*! ./CAG */ \"../../convert/jscad/src/core/CAG.js\") // circular dependency CAG => fromSides => CAG\r\n  let cag = new CAG()\r\n  cag.sides = sides\r\n  return cag\r\n}\r\n\r\n// Converts a CSG to a  The CSG must consist of polygons with only z coordinates +1 and -1\r\n// as constructed by _toCSGWall(-1, 1). This is so we can use the 3D union(), intersect() etc\r\nconst fromFakeCSG = function (csg) {\r\n  let sides = csg.polygons.map(function (p) {\r\n    return Side._fromFakePolygon(p)\r\n  })\r\n  .filter(function (s) {\r\n    return s !== null\r\n  })\r\n  return fromSides(sides)\r\n}\r\n\r\n/** Construct a CAG from a list of points (a polygon) or an nested array of points.\r\n * The rotation direction of the points is not relevant.\r\n * The points can define a convex or a concave polygon.\r\n * The polygon must not self intersect.\r\n * Hole detection follows the even/odd rule,\r\n * which means that the order of the paths is not important.\r\n * @param {points[]|Array.<points[]>} points - (nested) list of points in 2D space\r\n * @returns {CAG} new CAG object\r\n */\r\nconst fromPoints = function (points) {\r\n  if (!points) {\r\n    throw new Error('points parameter must be defined')\r\n  }\r\n  if (!Array.isArray(points)) {\r\n    throw new Error('points parameter must be an array')\r\n  }\r\n  if (points[0].x !== undefined || typeof points[0][0] === 'number') {\r\n    return fromPointsArray(points)\r\n  }\r\n  if (typeof points[0][0] === 'object') {\r\n    return fromNestedPointsArray(points)\r\n  }\r\n  throw new Error('Unsupported points list format')\r\n}\r\n\r\n// Do not export the two following function (code splitting for fromPoints())\r\nconst fromPointsArray = function (points) {\r\n  if (points.length < 3) {\r\n    throw new Error('CAG shape needs at least 3 points')\r\n  }\r\n  let sides = []\r\n  let prevvertex = new Vertex2(new Vector2D(points[points.length - 1]))\r\n  points.map(function (point) {\r\n    let vertex = new Vertex2(new Vector2D(point))\r\n    sides.push(new Side(prevvertex, vertex))\r\n    prevvertex = vertex\r\n  })\r\n  let result = fromSides(sides)\r\n  if (isSelfIntersecting(result)) {\r\n    throw new Error('Polygon is self intersecting!')\r\n  }\r\n  let area = result.area()\r\n  if (Math.abs(area) < areaEPS) {\r\n    throw new Error('Degenerate polygon!')\r\n  }\r\n  if (area < 0) {\r\n    result = result.flipped()\r\n  }\r\n  return result.canonicalized()\r\n}\r\n\r\nconst fromNestedPointsArray = function (points) {\r\n  if (points.length === 1) {\r\n    return fromPoints(points[0])\r\n  }\r\n  // First pass: create a collection of CAG paths\r\n  let paths = []\r\n  points.forEach(path => {\r\n    paths.push(fromPointsArray(path))\r\n  })\r\n  // Second pass: make a tree of paths\r\n  let tree = {}\r\n    // for each polygon extract parents and childs polygons\r\n  paths.forEach((p1, i) => {\r\n    // check for intersection\r\n    paths.forEach((p2, y) => {\r\n      if (p1 !== p2) {\r\n        // create default node\r\n        tree[i] || (tree[i] = { parents: [], isHole: false })\r\n        tree[y] || (tree[y] = { parents: [], isHole: false })\r\n        // check if polygon2 stay in poylgon1\r\n        if (contains(p2, p1)) {\r\n          // push parent and child; odd parents number ==> hole\r\n          tree[i].parents.push(y)\r\n          tree[i].isHole = !! (tree[i].parents.length % 2)\r\n          tree[y].isHole = !! (tree[y].parents.length % 2)\r\n        }\r\n      }\r\n    })\r\n  })\r\n  // Third pass: subtract holes\r\n  let path = null\r\n  for (key in tree) {\r\n    path = tree[key]\r\n    if (path.isHole) {\r\n      delete tree[key] // remove holes for final pass\r\n      path.parents.forEach(parentKey => {\r\n        paths[parentKey] = difference(paths[parentKey], paths[key])\r\n      })\r\n    }\r\n  }\r\n  // Fourth and last pass: create final CAG object\r\n  let cag = fromSides([])\r\n  for (key in tree) {\r\n    cag = union(cag, paths[key])\r\n  }\r\n  return cag\r\n}\r\n\r\n/** Reconstruct a CAG from an object with identical property names.\r\n * @param {Object} obj - anonymous object, typically from JSON\r\n * @returns {CAG} new CAG object\r\n */\r\nconst fromObject = function (obj) {\r\n  let sides = obj.sides.map(function (s) {\r\n    return Side.fromObject(s)\r\n  })\r\n  let cag = fromSides(sides)\r\n  cag.isCanonicalized = obj.isCanonicalized\r\n  return cag\r\n}\r\n\r\n/** Construct a CAG from a list of points (a polygon).\r\n * Like fromPoints() but does not check if the result is a valid polygon.\r\n * The points MUST rotate counter clockwise.\r\n * The points can define a convex or a concave polygon.\r\n * The polygon must not self intersect.\r\n * @param {points[]} points - list of points in 2D space\r\n * @returns {CAG} new CAG object\r\n */\r\nconst fromPointsNoCheck = function (points) {\r\n  let sides = []\r\n  let prevpoint = new Vector2D(points[points.length - 1])\r\n  let prevvertex = new Vertex2(prevpoint)\r\n  points.map(function (p) {\r\n    let point = new Vector2D(p)\r\n    let vertex = new Vertex2(point)\r\n    let side = new Side(prevvertex, vertex)\r\n    sides.push(side)\r\n    prevvertex = vertex\r\n  })\r\n  return fromSides(sides)\r\n}\r\n\r\n/** Construct a CAG from a 2d-path (a closed sequence of points).\r\n * Like fromPoints() but does not check if the result is a valid polygon.\r\n * @param {path} Path2 - a Path2 path\r\n * @returns {CAG} new CAG object\r\n */\r\nconst fromPath2 = function (path) {\r\n  if (!path.isClosed()) throw new Error('The path should be closed!')\r\n  return fromPoints(path.getPoints())\r\n}\r\n\r\n/** Reconstruct a CAG from the output of toCompactBinary().\r\n * @param {CompactBinary} bin - see toCompactBinary()\r\n * @returns {CAG} new CAG object\r\n */\r\nconst fromCompactBinary = function (bin) {\r\n  if (bin['class'] !== 'CAG') throw new Error('Not a CAG')\r\n  let vertices = []\r\n  let vertexData = bin.vertexData\r\n  let numvertices = vertexData.length / 2\r\n  let arrayindex = 0\r\n  for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {\r\n    let x = vertexData[arrayindex++]\r\n    let y = vertexData[arrayindex++]\r\n    let pos = new Vector2D(x, y)\r\n    let vertex = new Vertex2(pos)\r\n    vertices.push(vertex)\r\n  }\r\n  let sides = []\r\n  let numsides = bin.sideVertexIndices.length / 2\r\n  arrayindex = 0\r\n  for (let sideindex = 0; sideindex < numsides; sideindex++) {\r\n    let vertexindex0 = bin.sideVertexIndices[arrayindex++]\r\n    let vertexindex1 = bin.sideVertexIndices[arrayindex++]\r\n    let side = new Side(vertices[vertexindex0], vertices[vertexindex1])\r\n    sides.push(side)\r\n  }\r\n  let cag = fromSides(sides)\r\n  cag.isCanonicalized = true\r\n  return cag\r\n}\r\n\r\nmodule.exports = {\r\n  fromSides,\r\n  fromObject,\r\n  fromPoints,\r\n  fromPointsNoCheck,\r\n  fromPath2,\r\n  fromFakeCSG,\r\n  fromCompactBinary\r\n}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/CAGFactories.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/CSG.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/CSG.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Tree = __webpack_require__(/*! ./trees */ \"../../convert/jscad/src/core/trees.js\")\r\nconst Polygon = __webpack_require__(/*! ./math/Polygon3 */ \"../../convert/jscad/src/core/math/Polygon3.js\")\r\nconst Plane = __webpack_require__(/*! ./math/Plane */ \"../../convert/jscad/src/core/math/Plane.js\")\r\nconst OrthoNormalBasis = __webpack_require__(/*! ./math/OrthoNormalBasis */ \"../../convert/jscad/src/core/math/OrthoNormalBasis.js\")\r\n\r\nconst CAG = __webpack_require__(/*! ./CAG */ \"../../convert/jscad/src/core/CAG.js\") // FIXME: for some weird reason if CAG is imported AFTER frompolygons, a lot of things break???\r\n\r\nconst Properties = __webpack_require__(/*! ./Properties */ \"../../convert/jscad/src/core/Properties.js\")\r\nconst {fromPolygons} = __webpack_require__(/*! ./CSGFactories */ \"../../convert/jscad/src/core/CSGFactories.js\") // FIXME: circular dependency !\r\n\r\nconst fixTJunctions = __webpack_require__(/*! ./utils/fixTJunctions */ \"../../convert/jscad/src/core/utils/fixTJunctions.js\")\r\nconst canonicalize = __webpack_require__(/*! ./utils/canonicalize */ \"../../convert/jscad/src/core/utils/canonicalize.js\")\r\nconst retesselate = __webpack_require__(/*! ./utils/retesellate */ \"../../convert/jscad/src/core/utils/retesellate.js\")\r\nconst {bounds} = __webpack_require__(/*! ./utils/csgMeasurements */ \"../../convert/jscad/src/core/utils/csgMeasurements.js\")\r\nconst {projectToOrthoNormalBasis} = __webpack_require__(/*! ./utils/csgProjections */ \"../../convert/jscad/src/core/utils/csgProjections.js\")\r\n\r\nconst {lieFlat, getTransformationToFlatLying, getTransformationAndInverseTransformationToFlatLying} = __webpack_require__(/*! ../api/ops-cnc */ \"../../convert/jscad/src/api/ops-cnc.js\")\r\nconst {sectionCut, cutByPlane} = __webpack_require__(/*! ../api/ops-cuts */ \"../../convert/jscad/src/api/ops-cuts.js\")\r\nconst center = __webpack_require__(/*! ../api/center */ \"../../convert/jscad/src/api/center.js\")\r\nconst {expand, contract, expandedShellOfCCSG} = __webpack_require__(/*! ../api/ops-expandContract */ \"../../convert/jscad/src/api/ops-expandContract.js\")\r\n\r\n/** Class CSG\r\n * Holds a binary space partition tree representing a 3D solid. Two solids can\r\n * be combined using the `union()`, `subtract()`, and `intersect()` methods.\r\n * @constructor\r\n */\r\nlet CSG = function () {\r\n  this.polygons = []\r\n  this.properties = new Properties()\r\n  this.isCanonicalized = true\r\n  this.isRetesselated = true\r\n}\r\n\r\nCSG.prototype = {\r\n  /**\r\n   * Return a new CSG solid representing the space in either this solid or\r\n   * in the given solids. Neither this solid nor the given solids are modified.\r\n   * @param {CSG[]} csg - list of CSG objects\r\n   * @returns {CSG} new CSG object\r\n   * @example\r\n   * let C = A.union(B)\r\n   * @example\r\n   * +-------+            +-------+\r\n   * |       |            |       |\r\n   * |   A   |            |       |\r\n   * |    +--+----+   =   |       +----+\r\n   * +----+--+    |       +----+       |\r\n   *      |   B   |            |       |\r\n   *      |       |            |       |\r\n   *      +-------+            +-------+\r\n   */\r\n  union: function (csg) {\r\n    let csgs\r\n    if (csg instanceof Array) {\r\n      csgs = csg.slice(0)\r\n      csgs.push(this)\r\n    } else {\r\n      csgs = [this, csg]\r\n    }\r\n\r\n    let i\r\n    // combine csg pairs in a way that forms a balanced binary tree pattern\r\n    for (i = 1; i < csgs.length; i += 2) {\r\n      csgs.push(csgs[i - 1].unionSub(csgs[i]))\r\n    }\r\n    return csgs[i - 1].reTesselated().canonicalized()\r\n  },\r\n\r\n  unionSub: function (csg, retesselate, canonicalize) {\r\n    if (!this.mayOverlap(csg)) {\r\n      return this.unionForNonIntersecting(csg)\r\n    } else {\r\n      let a = new Tree(this.polygons)\r\n      let b = new Tree(csg.polygons)\r\n      a.clipTo(b, false)\r\n\r\n            // b.clipTo(a, true); // ERROR: this doesn't work\r\n      b.clipTo(a)\r\n      b.invert()\r\n      b.clipTo(a)\r\n      b.invert()\r\n\r\n      let newpolygons = a.allPolygons().concat(b.allPolygons())\r\n      let result = fromPolygons(newpolygons)\r\n      result.properties = this.properties._merge(csg.properties)\r\n      if (retesselate) result = result.reTesselated()\r\n      if (canonicalize) result = result.canonicalized()\r\n      return result\r\n    }\r\n  },\r\n\r\n  // Like union, but when we know that the two solids are not intersecting\r\n  // Do not use if you are not completely sure that the solids do not intersect!\r\n  unionForNonIntersecting: function (csg) {\r\n    let newpolygons = this.polygons.concat(csg.polygons)\r\n    let result = fromPolygons(newpolygons)\r\n    result.properties = this.properties._merge(csg.properties)\r\n    result.isCanonicalized = this.isCanonicalized && csg.isCanonicalized\r\n    result.isRetesselated = this.isRetesselated && csg.isRetesselated\r\n    return result\r\n  },\r\n\r\n  /**\r\n   * Return a new CSG solid representing space in this solid but\r\n   * not in the given solids. Neither this solid nor the given solids are modified.\r\n   * @param {CSG[]} csg - list of CSG objects\r\n   * @returns {CSG} new CSG object\r\n   * @example\r\n   * let C = A.subtract(B)\r\n   * @example\r\n   * +-------+            +-------+\r\n   * |       |            |       |\r\n   * |   A   |            |       |\r\n   * |    +--+----+   =   |    +--+\r\n   * +----+--+    |       +----+\r\n   *      |   B   |\r\n   *      |       |\r\n   *      +-------+\r\n   */\r\n  subtract: function (csg) {\r\n    let csgs\r\n    if (csg instanceof Array) {\r\n      csgs = csg\r\n    } else {\r\n      csgs = [csg]\r\n    }\r\n    let result = this\r\n    for (let i = 0; i < csgs.length; i++) {\r\n      let islast = (i === (csgs.length - 1))\r\n      result = result.subtractSub(csgs[i], islast, islast)\r\n    }\r\n    return result\r\n  },\r\n\r\n  subtractSub: function (csg, retesselate, canonicalize) {\r\n    let a = new Tree(this.polygons)\r\n    let b = new Tree(csg.polygons)\r\n    a.invert()\r\n    a.clipTo(b)\r\n    b.clipTo(a, true)\r\n    a.addPolygons(b.allPolygons())\r\n    a.invert()\r\n    let result = fromPolygons(a.allPolygons())\r\n    result.properties = this.properties._merge(csg.properties)\r\n    if (retesselate) result = result.reTesselated()\r\n    if (canonicalize) result = result.canonicalized()\r\n    return result\r\n  },\r\n\r\n  /**\r\n   * Return a new CSG solid representing space in both this solid and\r\n   * in the given solids. Neither this solid nor the given solids are modified.\r\n   * @param {CSG[]} csg - list of CSG objects\r\n   * @returns {CSG} new CSG object\r\n   * @example\r\n   * let C = A.intersect(B)\r\n   * @example\r\n   * +-------+\r\n   * |       |\r\n   * |   A   |\r\n   * |    +--+----+   =   +--+\r\n   * +----+--+    |       +--+\r\n   *      |   B   |\r\n   *      |       |\r\n   *      +-------+\r\n   */\r\n  intersect: function (csg) {\r\n    let csgs\r\n    if (csg instanceof Array) {\r\n      csgs = csg\r\n    } else {\r\n      csgs = [csg]\r\n    }\r\n    let result = this\r\n    for (let i = 0; i < csgs.length; i++) {\r\n      let islast = (i === (csgs.length - 1))\r\n      result = result.intersectSub(csgs[i], islast, islast)\r\n    }\r\n    return result\r\n  },\r\n\r\n  intersectSub: function (csg, retesselate, canonicalize) {\r\n    let a = new Tree(this.polygons)\r\n    let b = new Tree(csg.polygons)\r\n    a.invert()\r\n    b.clipTo(a)\r\n    b.invert()\r\n    a.clipTo(b)\r\n    b.clipTo(a)\r\n    a.addPolygons(b.allPolygons())\r\n    a.invert()\r\n    let result = fromPolygons(a.allPolygons())\r\n    result.properties = this.properties._merge(csg.properties)\r\n    if (retesselate) result = result.reTesselated()\r\n    if (canonicalize) result = result.canonicalized()\r\n    return result\r\n  },\r\n\r\n  /**\r\n   * Return a new CSG solid with solid and empty space switched.\r\n   * This solid is not modified.\r\n   * @returns {CSG} new CSG object\r\n   * @example\r\n   * let B = A.invert()\r\n   */\r\n  invert: function () {\r\n    let flippedpolygons = this.polygons.map(function (p) {\r\n      return p.flipped()\r\n    })\r\n    return fromPolygons(flippedpolygons)\r\n    // TODO: flip properties?\r\n  },\r\n\r\n  // Affine transformation of CSG object. Returns a new CSG object\r\n  transform1: function (matrix4x4) {\r\n    let newpolygons = this.polygons.map(function (p) {\r\n      return p.transform(matrix4x4)\r\n    })\r\n    let result = fromPolygons(newpolygons)\r\n    result.properties = this.properties._transform(matrix4x4)\r\n    result.isRetesselated = this.isRetesselated\r\n    return result\r\n  },\r\n\r\n  /**\r\n   * Return a new CSG solid that is transformed using the given Matrix.\r\n   * Several matrix transformations can be combined before transforming this solid.\r\n   * @param {CSG.Matrix4x4} matrix4x4 - matrix to be applied\r\n   * @returns {CSG} new CSG object\r\n   * @example\r\n   * var m = new CSG.Matrix4x4()\r\n   * m = m.multiply(CSG.Matrix4x4.rotationX(40))\r\n   * m = m.multiply(CSG.Matrix4x4.translation([-.5, 0, 0]))\r\n   * let B = A.transform(m)\r\n   */\r\n  transform: function (matrix4x4) {\r\n    let ismirror = matrix4x4.isMirroring()\r\n    let transformedvertices = {}\r\n    let transformedplanes = {}\r\n    let newpolygons = this.polygons.map(function (p) {\r\n      let newplane\r\n      let plane = p.plane\r\n      let planetag = plane.getTag()\r\n      if (planetag in transformedplanes) {\r\n        newplane = transformedplanes[planetag]\r\n      } else {\r\n        newplane = plane.transform(matrix4x4)\r\n        transformedplanes[planetag] = newplane\r\n      }\r\n      let newvertices = p.vertices.map(function (v) {\r\n        let newvertex\r\n        let vertextag = v.getTag()\r\n        if (vertextag in transformedvertices) {\r\n          newvertex = transformedvertices[vertextag]\r\n        } else {\r\n          newvertex = v.transform(matrix4x4)\r\n          transformedvertices[vertextag] = newvertex\r\n        }\r\n        return newvertex\r\n      })\r\n      if (ismirror) newvertices.reverse()\r\n      return new Polygon(newvertices, p.shared, newplane)\r\n    })\r\n    let result = fromPolygons(newpolygons)\r\n    result.properties = this.properties._transform(matrix4x4)\r\n    result.isRetesselated = this.isRetesselated\r\n    result.isCanonicalized = this.isCanonicalized\r\n    return result\r\n  },\r\n\r\n  // ALIAS !\r\n  center: function (axes) {\r\n    return center({axes: axes},[this])\r\n  },\r\n\r\n  // ALIAS !\r\n  expand: function (radius, resolution) {\r\n    return expand(this, radius, resolution)\r\n  },\r\n\r\n  // ALIAS !\r\n  contract: function (radius, resolution) {\r\n    return contract(this, radius, resolution)\r\n  },\r\n\r\n  // ALIAS !\r\n  expandedShell: function (radius, resolution, unionWithThis) {\r\n    return expandedShellOfCCSG(this, radius, resolution, unionWithThis)\r\n  },\r\n\r\n  // cut the solid at a plane, and stretch the cross-section found along plane normal\r\n  // note: only used in roundedCube() internally\r\n  stretchAtPlane: function (normal, point, length) {\r\n    let plane = Plane.fromNormalAndPoint(normal, point)\r\n    let onb = new OrthoNormalBasis(plane)\r\n    let crosssect = this.sectionCut(onb)\r\n    let midpiece = crosssect.extrudeInOrthonormalBasis(onb, length)\r\n    let piece1 = this.cutByPlane(plane)\r\n    let piece2 = this.cutByPlane(plane.flipped())\r\n    let result = piece1.union([midpiece, piece2.translate(plane.normal.times(length))])\r\n    return result\r\n  },\r\n\r\n  // ALIAS !\r\n  canonicalized: function () {\r\n    return canonicalize(this)\r\n  },\r\n\r\n  // ALIAS !\r\n  reTesselated: function () {\r\n    return retesselate(this)\r\n  },\r\n\r\n  // ALIAS !\r\n  fixTJunctions: function () {\r\n    return fixTJunctions(fromPolygons, this)\r\n  },\r\n\r\n  // ALIAS !\r\n  getBounds: function () {\r\n    return bounds(this)\r\n  },\r\n\r\n  /** returns true if there is a possibility that the two solids overlap\r\n   * returns false if we can be sure that they do not overlap\r\n   * NOTE: this is critical as it is used in UNIONs\r\n   * @param  {CSG} csg\r\n   */\r\n  mayOverlap: function (csg) {\r\n    if ((this.polygons.length === 0) || (csg.polygons.length === 0)) {\r\n      return false\r\n    } else {\r\n      let mybounds = bounds(this)\r\n      let otherbounds = bounds(csg)\r\n      if (mybounds[1].x < otherbounds[0].x) return false\r\n      if (mybounds[0].x > otherbounds[1].x) return false\r\n      if (mybounds[1].y < otherbounds[0].y) return false\r\n      if (mybounds[0].y > otherbounds[1].y) return false\r\n      if (mybounds[1].z < otherbounds[0].z) return false\r\n      if (mybounds[0].z > otherbounds[1].z) return false\r\n      return true\r\n    }\r\n  },\r\n\r\n  // ALIAS !\r\n  cutByPlane: function (plane) {\r\n    return cutByPlane(this, plane)\r\n  },\r\n\r\n  /**\r\n   * Connect a solid to another solid, such that two Connectors become connected\r\n   * @param  {Connector} myConnector a Connector of this solid\r\n   * @param  {Connector} otherConnector a Connector to which myConnector should be connected\r\n   * @param  {Boolean} mirror false: the 'axis' vectors of the connectors should point in the same direction\r\n   * true: the 'axis' vectors of the connectors should point in opposite direction\r\n   * @param  {Float} normalrotation degrees of rotation between the 'normal' vectors of the two\r\n   * connectors\r\n   * @returns {CSG} this csg, tranformed accordingly\r\n   */\r\n  connectTo: function (myConnector, otherConnector, mirror, normalrotation) {\r\n    let matrix = myConnector.getTransformationTo(otherConnector, mirror, normalrotation)\r\n    return this.transform(matrix)\r\n  },\r\n\r\n  /**\r\n   * set the .shared property of all polygons\r\n   * @param  {Object} shared\r\n   * @returns {CSG} Returns a new CSG solid, the original is unmodified!\r\n   */\r\n  setShared: function (shared) {\r\n    let polygons = this.polygons.map(function (p) {\r\n      return new Polygon(p.vertices, shared, p.plane)\r\n    })\r\n    let result = fromPolygons(polygons)\r\n    result.properties = this.properties // keep original properties\r\n    result.isRetesselated = this.isRetesselated\r\n    result.isCanonicalized = this.isCanonicalized\r\n    return result\r\n  },\r\n\r\n  /** sets the color of this csg: non mutating, returns a new CSG\r\n   * @param  {Object} args\r\n   * @returns {CSG} a copy of this CSG, with the given color\r\n   */\r\n  setColor: function (args) {\r\n    let newshared = Polygon.Shared.fromColor.apply(this, arguments)\r\n    return this.setShared(newshared)\r\n  },\r\n\r\n  // ALIAS !\r\n  getTransformationAndInverseTransformationToFlatLying: function () {\r\n    return getTransformationAndInverseTransformationToFlatLying(this)\r\n  },\r\n\r\n  // ALIAS !\r\n  getTransformationToFlatLying: function () {\r\n    return getTransformationToFlatLying(this)\r\n  },\r\n\r\n  // ALIAS !\r\n  lieFlat: function () {\r\n    return lieFlat(this)\r\n  },\r\n\r\n  // project the 3D CSG onto a plane\r\n  // This returns a 2D CAG with the 'shadow' shape of the 3D solid when projected onto the\r\n  // plane represented by the orthonormal basis\r\n  projectToOrthoNormalBasis: function (orthobasis) {\r\n    // FIXME:  DEPENDS ON CAG !!\r\n    return projectToOrthoNormalBasis(this, orthobasis)\r\n  },\r\n\r\n  // FIXME: not finding any uses within our code ?\r\n  sectionCut: function (orthobasis) {\r\n    return sectionCut(this, orthobasis)\r\n  },\r\n\r\n  /**\r\n   * Returns an array of values for the requested features of this solid.\r\n   * Supported Features: 'volume', 'area'\r\n   * @param {String[]} features - list of features to calculate\r\n   * @returns {Float[]} values\r\n   * @example\r\n   * let volume = A.getFeatures('volume')\r\n   * let values = A.getFeatures('area','volume')\r\n   */\r\n  getFeatures: function (features) {\r\n    if (!(features instanceof Array)) {\r\n      features = [features]\r\n    }\r\n    let result = this.toTriangles().map(function (triPoly) {\r\n      return triPoly.getTetraFeatures(features)\r\n    })\r\n    .reduce(function (pv, v) {\r\n      return v.map(function (feat, i) {\r\n        return feat + (pv === 0 ? 0 : pv[i])\r\n      })\r\n    }, 0)\r\n    return (result.length === 1) ? result[0] : result\r\n  },\r\n  /** @return {Polygon[]} The list of polygons. */\r\n  toPolygons: function () {\r\n    return this.polygons\r\n  },\r\n\r\n  toString: function () {\r\n    let result = 'CSG solid:\\n'\r\n    this.polygons.map(function (p) {\r\n      result += p.toString()\r\n    })\r\n    return result\r\n  },\r\n\r\n  /** returns a compact binary representation of this csg\r\n   * usually used to transfer CSG objects to/from webworkes\r\n   * NOTE: very interesting compact format, with a lot of reusable ideas\r\n   * @returns {Object} compact binary representation of a CSG\r\n   */\r\n  toCompactBinary: function () {\r\n    let csg = this.canonicalized()\r\n    let numpolygons = csg.polygons.length\r\n    let numpolygonvertices = 0\r\n\r\n    let numvertices = 0\r\n    let vertexmap = {}\r\n    let vertices = []\r\n\r\n    let numplanes = 0\r\n    let planemap = {}\r\n    let planes = []\r\n\r\n    let shareds = []\r\n    let sharedmap = {}\r\n    let numshared = 0\r\n        // for (let i = 0, iMax = csg.polygons.length; i < iMax; i++) {\r\n        //  let p = csg.polygons[i];\r\n        //  for (let j = 0, jMax = p.length; j < jMax; j++) {\r\n        //      ++numpolygonvertices;\r\n        //      let vertextag = p[j].getTag();\r\n        //      if(!(vertextag in vertexmap)) {\r\n        //          vertexmap[vertextag] = numvertices++;\r\n        //          vertices.push(p[j]);\r\n        //      }\r\n        //  }\r\n    csg.polygons.map(function (polygon) {\r\n      // FIXME: why use map if we do not return anything ?\r\n      // either for... or forEach\r\n      polygon.vertices.map(function (vertex) {\r\n        ++numpolygonvertices\r\n        let vertextag = vertex.getTag()\r\n        if (!(vertextag in vertexmap)) {\r\n          vertexmap[vertextag] = numvertices++\r\n          vertices.push(vertex)\r\n        }\r\n      })\r\n\r\n      let planetag = polygon.plane.getTag()\r\n      if (!(planetag in planemap)) {\r\n        planemap[planetag] = numplanes++\r\n        planes.push(polygon.plane)\r\n      }\r\n      let sharedtag = polygon.shared.getTag()\r\n      if (!(sharedtag in sharedmap)) {\r\n        sharedmap[sharedtag] = numshared++\r\n        shareds.push(polygon.shared)\r\n      }\r\n    })\r\n\r\n    let numVerticesPerPolygon = new Uint32Array(numpolygons)\r\n    let polygonSharedIndexes = new Uint32Array(numpolygons)\r\n    let polygonVertices = new Uint32Array(numpolygonvertices)\r\n    let polygonPlaneIndexes = new Uint32Array(numpolygons)\r\n    let vertexData = new Float64Array(numvertices * 3)\r\n    let planeData = new Float64Array(numplanes * 4)\r\n    let polygonVerticesIndex = 0\r\n\r\n    // FIXME: doublecheck : why does it go through the whole polygons again?\r\n    // can we optimise that ? (perhap due to needing size to init buffers above)\r\n    for (let polygonindex = 0; polygonindex < numpolygons; ++polygonindex) {\r\n      let polygon = csg.polygons[polygonindex]\r\n      numVerticesPerPolygon[polygonindex] = polygon.vertices.length\r\n      polygon.vertices.map(function (vertex) {\r\n        let vertextag = vertex.getTag()\r\n        let vertexindex = vertexmap[vertextag]\r\n        polygonVertices[polygonVerticesIndex++] = vertexindex\r\n      })\r\n      let planetag = polygon.plane.getTag()\r\n      let planeindex = planemap[planetag]\r\n      polygonPlaneIndexes[polygonindex] = planeindex\r\n      let sharedtag = polygon.shared.getTag()\r\n      let sharedindex = sharedmap[sharedtag]\r\n      polygonSharedIndexes[polygonindex] = sharedindex\r\n    }\r\n    let verticesArrayIndex = 0\r\n    vertices.map(function (vertex) {\r\n      const pos = vertex.pos\r\n      vertexData[verticesArrayIndex++] = pos._x\r\n      vertexData[verticesArrayIndex++] = pos._y\r\n      vertexData[verticesArrayIndex++] = pos._z\r\n    })\r\n    let planesArrayIndex = 0\r\n    planes.map(function (plane) {\r\n      const normal = plane.normal\r\n      planeData[planesArrayIndex++] = normal._x\r\n      planeData[planesArrayIndex++] = normal._y\r\n      planeData[planesArrayIndex++] = normal._z\r\n      planeData[planesArrayIndex++] = plane.w\r\n    })\r\n\r\n    let result = {\r\n      'class': 'CSG',\r\n      numPolygons: numpolygons,\r\n      numVerticesPerPolygon: numVerticesPerPolygon,\r\n      polygonPlaneIndexes: polygonPlaneIndexes,\r\n      polygonSharedIndexes: polygonSharedIndexes,\r\n      polygonVertices: polygonVertices,\r\n      vertexData: vertexData,\r\n      planeData: planeData,\r\n      shared: shareds\r\n    }\r\n    return result\r\n  },\r\n\r\n  /** returns the triangles of this csg\r\n   * @returns {Polygons} triangulated polygons\r\n   */\r\n  toTriangles: function () {\r\n    let polygons = []\r\n    this.polygons.forEach(function (poly) {\r\n      let firstVertex = poly.vertices[0]\r\n      for (let i = poly.vertices.length - 3; i >= 0; i--) {\r\n        polygons.push(new Polygon(\r\n          [\r\n            firstVertex,\r\n            poly.vertices[i + 1],\r\n            poly.vertices[i + 2]\r\n          ],\r\n          poly.shared,\r\n          poly.plane))\r\n      }\r\n    })\r\n    return polygons\r\n  }\r\n}\r\n\r\nmodule.exports = CSG\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/CSG.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/CSGFactories.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/CSGFactories.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector3D = __webpack_require__(/*! ./math/Vector3 */ \"../../convert/jscad/src/core/math/Vector3.js\")\r\nconst Vertex = __webpack_require__(/*! ./math/Vertex3 */ \"../../convert/jscad/src/core/math/Vertex3.js\")\r\nconst Plane = __webpack_require__(/*! ./math/Plane */ \"../../convert/jscad/src/core/math/Plane.js\")\r\nconst Polygon2D = __webpack_require__(/*! ./math/Polygon2 */ \"../../convert/jscad/src/core/math/Polygon2.js\")\r\nconst Polygon3D = __webpack_require__(/*! ./math/Polygon3 */ \"../../convert/jscad/src/core/math/Polygon3.js\")\r\n\r\n/** Construct a CSG solid from a list of `Polygon` instances.\r\n * @param {Polygon[]} polygons - list of polygons\r\n * @returns {CSG} new CSG object\r\n */\r\nconst fromPolygons = function (polygons) {\r\n  const CSG = __webpack_require__(/*! ./CSG */ \"../../convert/jscad/src/core/CSG.js\")\r\n  let csg = new CSG()\r\n  csg.polygons = polygons\r\n  csg.isCanonicalized = false\r\n  csg.isRetesselated = false\r\n  return csg\r\n}\r\n\r\n/** Construct a CSG solid from a list of pre-generated slices.\r\n * See Polygon.prototype.solidFromSlices() for details.\r\n * @param {Object} options - options passed to solidFromSlices()\r\n * @returns {CSG} new CSG object\r\n */\r\nfunction fromSlices (options) {\r\n  return Polygon2D.createFromPoints([\r\n        [0, 0, 0],\r\n        [1, 0, 0],\r\n        [1, 1, 0],\r\n        [0, 1, 0]\r\n  ]).solidFromSlices(options)\r\n}\r\n\r\n/** Reconstruct a CSG solid from an object with identical property names.\r\n * @param {Object} obj - anonymous object, typically from JSON\r\n * @returns {CSG} new CSG object\r\n */\r\nfunction fromObject (obj) {\r\n  let polygons = obj.polygons.map(function (p) {\r\n    return Polygon3D.fromObject(p)\r\n  })\r\n  let csg = fromPolygons(polygons)\r\n  csg.isCanonicalized = obj.isCanonicalized\r\n  csg.isRetesselated = obj.isRetesselated\r\n  return csg\r\n}\r\n\r\n/** Reconstruct a CSG from the output of toCompactBinary().\r\n * @param {CompactBinary} bin - see toCompactBinary().\r\n * @returns {CSG} new CSG object\r\n */\r\nfunction fromCompactBinary (bin) {\r\n  if (bin['class'] !== 'CSG') throw new Error('Not a CSG')\r\n  let planes = []\r\n  let planeData = bin.planeData\r\n  let numplanes = planeData.length / 4\r\n  let arrayindex = 0\r\n  let x, y, z, w, normal, plane\r\n  for (let planeindex = 0; planeindex < numplanes; planeindex++) {\r\n    x = planeData[arrayindex++]\r\n    y = planeData[arrayindex++]\r\n    z = planeData[arrayindex++]\r\n    w = planeData[arrayindex++]\r\n    normal = Vector3D.Create(x, y, z)\r\n    plane = new Plane(normal, w)\r\n    planes.push(plane)\r\n  }\r\n\r\n  let vertices = []\r\n  const vertexData = bin.vertexData\r\n  const numvertices = vertexData.length / 3\r\n  let pos\r\n  let vertex\r\n  arrayindex = 0\r\n  for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {\r\n    x = vertexData[arrayindex++]\r\n    y = vertexData[arrayindex++]\r\n    z = vertexData[arrayindex++]\r\n    pos = Vector3D.Create(x, y, z)\r\n    vertex = new Vertex(pos)\r\n    vertices.push(vertex)\r\n  }\r\n\r\n  let shareds = bin.shared.map(function (shared) {\r\n    return Polygon3D.Shared.fromObject(shared)\r\n  })\r\n\r\n  let polygons = []\r\n  let numpolygons = bin.numPolygons\r\n  let numVerticesPerPolygon = bin.numVerticesPerPolygon\r\n  let polygonVertices = bin.polygonVertices\r\n  let polygonPlaneIndexes = bin.polygonPlaneIndexes\r\n  let polygonSharedIndexes = bin.polygonSharedIndexes\r\n  let numpolygonvertices\r\n  let polygonvertices\r\n  let shared\r\n  let polygon // already defined plane,\r\n  arrayindex = 0\r\n  for (let polygonindex = 0; polygonindex < numpolygons; polygonindex++) {\r\n    numpolygonvertices = numVerticesPerPolygon[polygonindex]\r\n    polygonvertices = []\r\n    for (let i = 0; i < numpolygonvertices; i++) {\r\n      polygonvertices.push(vertices[polygonVertices[arrayindex++]])\r\n    }\r\n    plane = planes[polygonPlaneIndexes[polygonindex]]\r\n    shared = shareds[polygonSharedIndexes[polygonindex]]\r\n    polygon = new Polygon3D(polygonvertices, shared, plane)\r\n    polygons.push(polygon)\r\n  }\r\n  let csg = fromPolygons(polygons)\r\n  csg.isCanonicalized = true\r\n  csg.isRetesselated = true\r\n  return csg\r\n}\r\n\r\nmodule.exports = {\r\n  fromPolygons,\r\n  fromSlices,\r\n  fromObject,\r\n  fromCompactBinary\r\n}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/CSGFactories.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/FuzzyFactory.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/FuzzyFactory.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// //////////////////////////////\r\n// ## class fuzzyFactory\r\n// This class acts as a factory for objects. We can search for an object with approximately\r\n// the desired properties (say a rectangle with width 2 and height 1)\r\n// The lookupOrCreate() method looks for an existing object (for example it may find an existing rectangle\r\n// with width 2.0001 and height 0.999. If no object is found, the user supplied callback is\r\n// called, which should generate a new object. The new object is inserted into the database\r\n// so it can be found by future lookupOrCreate() calls.\r\n// Constructor:\r\n//   numdimensions: the number of parameters for each object\r\n//     for example for a 2D rectangle this would be 2\r\n//   tolerance: The maximum difference for each parameter allowed to be considered a match\r\nconst FuzzyFactory = function (numdimensions, tolerance) {\r\n  this.lookuptable = {}\r\n  this.multiplier = 1.0 / tolerance\r\n}\r\n\r\nFuzzyFactory.prototype = {\r\n    // let obj = f.lookupOrCreate([el1, el2, el3], function(elements) {/* create the new object */});\r\n    // Performs a fuzzy lookup of the object with the specified elements.\r\n    // If found, returns the existing object\r\n    // If not found, calls the supplied callback function which should create a new object with\r\n    // the specified properties. This object is inserted in the lookup database.\r\n  lookupOrCreate: function (els, creatorCallback) {\r\n    let hash = ''\r\n    let multiplier = this.multiplier\r\n    els.forEach(function (el) {\r\n      let valueQuantized = Math.round(el * multiplier)\r\n      hash += valueQuantized + '/'\r\n    })\r\n    if (hash in this.lookuptable) {\r\n      return this.lookuptable[hash]\r\n    } else {\r\n      let object = creatorCallback(els)\r\n      let hashparts = els.map(function (el) {\r\n        let q0 = Math.floor(el * multiplier)\r\n        let q1 = q0 + 1\r\n        return ['' + q0 + '/', '' + q1 + '/']\r\n      })\r\n      let numelements = els.length\r\n      let numhashes = 1 << numelements\r\n      for (let hashmask = 0; hashmask < numhashes; ++hashmask) {\r\n        let hashmaskShifted = hashmask\r\n        hash = ''\r\n        hashparts.forEach(function (hashpart) {\r\n          hash += hashpart[hashmaskShifted & 1]\r\n          hashmaskShifted >>= 1\r\n        })\r\n        this.lookuptable[hash] = object\r\n      }\r\n      return object\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = FuzzyFactory\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/FuzzyFactory.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/FuzzyFactory2d.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/FuzzyFactory2d.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const FuzzyFactory = __webpack_require__(/*! ./FuzzyFactory */ \"../../convert/jscad/src/core/FuzzyFactory.js\")\r\nconst {EPS} = __webpack_require__(/*! ./constants */ \"../../convert/jscad/src/core/constants.js\")\r\nconst Side = __webpack_require__(/*! ./math/Side */ \"../../convert/jscad/src/core/math/Side.js\")\r\n\r\nconst FuzzyCAGFactory = function () {\r\n  this.vertexfactory = new FuzzyFactory(2, EPS)\r\n}\r\n\r\nFuzzyCAGFactory.prototype = {\r\n  getVertex: function (sourcevertex) {\r\n    let elements = [sourcevertex.pos._x, sourcevertex.pos._y]\r\n    let result = this.vertexfactory.lookupOrCreate(elements, function (els) {\r\n      return sourcevertex\r\n    })\r\n    return result\r\n  },\r\n\r\n  getSide: function (sourceside) {\r\n    let vertex0 = this.getVertex(sourceside.vertex0)\r\n    let vertex1 = this.getVertex(sourceside.vertex1)\r\n    return new Side(vertex0, vertex1)\r\n  }\r\n}\r\n\r\nmodule.exports = FuzzyCAGFactory\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/FuzzyFactory2d.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/FuzzyFactory3d.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/FuzzyFactory3d.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {EPS} = __webpack_require__(/*! ./constants */ \"../../convert/jscad/src/core/constants.js\")\r\nconst Polygon = __webpack_require__(/*! ./math/Polygon3 */ \"../../convert/jscad/src/core/math/Polygon3.js\")\r\nconst FuzzyFactory = __webpack_require__(/*! ./FuzzyFactory */ \"../../convert/jscad/src/core/FuzzyFactory.js\")\r\n\r\n// ////////////////////////////////////\r\nconst FuzzyCSGFactory = function () {\r\n  this.vertexfactory = new FuzzyFactory(3, EPS)\r\n  this.planefactory = new FuzzyFactory(4, EPS)\r\n  this.polygonsharedfactory = {}\r\n}\r\n\r\nFuzzyCSGFactory.prototype = {\r\n  getPolygonShared: function (sourceshared) {\r\n    let hash = sourceshared.getHash()\r\n    if (hash in this.polygonsharedfactory) {\r\n      return this.polygonsharedfactory[hash]\r\n    } else {\r\n      this.polygonsharedfactory[hash] = sourceshared\r\n      return sourceshared\r\n    }\r\n  },\r\n\r\n  getVertex: function (sourcevertex) {\r\n    let elements = [sourcevertex.pos._x, sourcevertex.pos._y, sourcevertex.pos._z]\r\n    let result = this.vertexfactory.lookupOrCreate(elements, function (els) {\r\n      return sourcevertex\r\n    })\r\n    return result\r\n  },\r\n\r\n  getPlane: function (sourceplane) {\r\n    let elements = [sourceplane.normal._x, sourceplane.normal._y, sourceplane.normal._z, sourceplane.w]\r\n    let result = this.planefactory.lookupOrCreate(elements, function (els) {\r\n      return sourceplane\r\n    })\r\n    return result\r\n  },\r\n\r\n  getPolygon: function (sourcepolygon) {\r\n    let newplane = this.getPlane(sourcepolygon.plane)\r\n    let newshared = this.getPolygonShared(sourcepolygon.shared)\r\n    let _this = this\r\n    let newvertices = sourcepolygon.vertices.map(function (vertex) {\r\n      return _this.getVertex(vertex)\r\n    })\r\n        // two vertices that were originally very close may now have become\r\n        // truly identical (referring to the same Vertex object).\r\n        // Remove duplicate vertices:\r\n    let newverticesDedup = []\r\n    if (newvertices.length > 0) {\r\n      let prevvertextag = newvertices[newvertices.length - 1].getTag()\r\n      newvertices.forEach(function (vertex) {\r\n        let vertextag = vertex.getTag()\r\n        if (vertextag !== prevvertextag) {\r\n          newverticesDedup.push(vertex)\r\n        }\r\n        prevvertextag = vertextag\r\n      })\r\n    }\r\n        // If it's degenerate, remove all vertices:\r\n    if (newverticesDedup.length < 3) {\r\n      newverticesDedup = []\r\n    }\r\n    return new Polygon(newverticesDedup, newshared, newplane)\r\n  }\r\n}\r\n\r\nmodule.exports = FuzzyCSGFactory\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/FuzzyFactory3d.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/Properties.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/Properties.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// ////////////////////////////////////\r\n// # Class Properties\r\n// This class is used to store properties of a solid\r\n// A property can for example be a Vertex, a Plane or a Line3D\r\n// Whenever an affine transform is applied to the CSG solid, all its properties are\r\n// transformed as well.\r\n// The properties can be stored in a complex nested structure (using arrays and objects)\r\nconst Properties = function () {}\r\n\r\nProperties.prototype = {\r\n  _transform: function (matrix4x4) {\r\n    let result = new Properties()\r\n    Properties.transformObj(this, result, matrix4x4)\r\n    return result\r\n  },\r\n  _merge: function (otherproperties) {\r\n    let result = new Properties()\r\n    Properties.cloneObj(this, result)\r\n    Properties.addFrom(result, otherproperties)\r\n    return result\r\n  }\r\n}\r\n\r\nProperties.transformObj = function (source, result, matrix4x4) {\r\n  for (let propertyname in source) {\r\n    if (propertyname === '_transform') continue\r\n    if (propertyname === '_merge') continue\r\n    let propertyvalue = source[propertyname]\r\n    let transformed = propertyvalue\r\n    if (typeof (propertyvalue) === 'object') {\r\n      if (('transform' in propertyvalue) && (typeof (propertyvalue.transform) === 'function')) {\r\n        transformed = propertyvalue.transform(matrix4x4)\r\n      } else if (propertyvalue instanceof Array) {\r\n        transformed = []\r\n        Properties.transformObj(propertyvalue, transformed, matrix4x4)\r\n      } else if (propertyvalue instanceof Properties) {\r\n        transformed = new Properties()\r\n        Properties.transformObj(propertyvalue, transformed, matrix4x4)\r\n      }\r\n    }\r\n    result[propertyname] = transformed\r\n  }\r\n}\r\n\r\nProperties.cloneObj = function (source, result) {\r\n  for (let propertyname in source) {\r\n    if (propertyname === '_transform') continue\r\n    if (propertyname === '_merge') continue\r\n    let propertyvalue = source[propertyname]\r\n    let cloned = propertyvalue\r\n    if (typeof (propertyvalue) === 'object') {\r\n      if (propertyvalue instanceof Array) {\r\n        cloned = []\r\n        for (let i = 0; i < propertyvalue.length; i++) {\r\n          cloned.push(propertyvalue[i])\r\n        }\r\n      } else if (propertyvalue instanceof Properties) {\r\n        cloned = new Properties()\r\n        Properties.cloneObj(propertyvalue, cloned)\r\n      }\r\n    }\r\n    result[propertyname] = cloned\r\n  }\r\n}\r\n\r\nProperties.addFrom = function (result, otherproperties) {\r\n  for (let propertyname in otherproperties) {\r\n    if (propertyname === '_transform') continue\r\n    if (propertyname === '_merge') continue\r\n    if ((propertyname in result) &&\r\n            (typeof (result[propertyname]) === 'object') &&\r\n            (result[propertyname] instanceof Properties) &&\r\n            (typeof (otherproperties[propertyname]) === 'object') &&\r\n            (otherproperties[propertyname] instanceof Properties)) {\r\n      Properties.addFrom(result[propertyname], otherproperties[propertyname])\r\n    } else if (!(propertyname in result)) {\r\n      result[propertyname] = otherproperties[propertyname]\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Properties\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/Properties.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/connectors.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/connectors.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector3D = __webpack_require__(/*! ./math/Vector3 */ \"../../convert/jscad/src/core/math/Vector3.js\")\r\nconst Line3D = __webpack_require__(/*! ./math/Line3 */ \"../../convert/jscad/src/core/math/Line3.js\")\r\nconst Matrix4x4 = __webpack_require__(/*! ./math/Matrix4 */ \"../../convert/jscad/src/core/math/Matrix4.js\")\r\nconst OrthoNormalBasis = __webpack_require__(/*! ./math/OrthoNormalBasis */ \"../../convert/jscad/src/core/math/OrthoNormalBasis.js\")\r\nconst Plane = __webpack_require__(/*! ./math/Plane */ \"../../convert/jscad/src/core/math/Plane.js\")\r\n\r\n// # class Connector\r\n// A connector allows to attach two objects at predefined positions\r\n// For example a servo motor and a servo horn:\r\n// Both can have a Connector called 'shaft'\r\n// The horn can be moved and rotated such that the two connectors match\r\n// and the horn is attached to the servo motor at the proper position.\r\n// Connectors are stored in the properties of a CSG solid so they are\r\n// ge the same transformations applied as the solid\r\nconst Connector = function (point, axisvector, normalvector) {\r\n  this.point = new Vector3D(point)\r\n  this.axisvector = new Vector3D(axisvector).unit()\r\n  this.normalvector = new Vector3D(normalvector).unit()\r\n}\r\n\r\nConnector.prototype = {\r\n  normalized: function () {\r\n    let axisvector = this.axisvector.unit()\r\n        // make the normal vector truly normal:\r\n    let n = this.normalvector.cross(axisvector).unit()\r\n    let normalvector = axisvector.cross(n)\r\n    return new Connector(this.point, axisvector, normalvector)\r\n  },\r\n\r\n  transform: function (matrix4x4) {\r\n    let point = this.point.multiply4x4(matrix4x4)\r\n    let axisvector = this.point.plus(this.axisvector).multiply4x4(matrix4x4).minus(point)\r\n    let normalvector = this.point.plus(this.normalvector).multiply4x4(matrix4x4).minus(point)\r\n    return new Connector(point, axisvector, normalvector)\r\n  },\r\n\r\n    // Get the transformation matrix to connect this Connector to another connector\r\n    //   other: a Connector to which this connector should be connected\r\n    //   mirror: false: the 'axis' vectors of the connectors should point in the same direction\r\n    //           true: the 'axis' vectors of the connectors should point in opposite direction\r\n    //   normalrotation: degrees of rotation between the 'normal' vectors of the two\r\n    //                   connectors\r\n  getTransformationTo: function (other, mirror, normalrotation) {\r\n    mirror = mirror ? true : false\r\n    normalrotation = normalrotation ? Number(normalrotation) : 0\r\n    let us = this.normalized()\r\n    other = other.normalized()\r\n        // shift to the origin:\r\n    let transformation = Matrix4x4.translation(this.point.negated())\r\n        // construct the plane crossing through the origin and the two axes:\r\n    let axesplane = Plane.anyPlaneFromVector3Ds(\r\n            new Vector3D(0, 0, 0), us.axisvector, other.axisvector)\r\n    let axesbasis = new OrthoNormalBasis(axesplane)\r\n    let angle1 = axesbasis.to2D(us.axisvector).angle()\r\n    let angle2 = axesbasis.to2D(other.axisvector).angle()\r\n    let rotation = 180.0 * (angle2 - angle1) / Math.PI\r\n    if (mirror) rotation += 180.0\r\n    transformation = transformation.multiply(axesbasis.getProjectionMatrix())\r\n    transformation = transformation.multiply(Matrix4x4.rotationZ(rotation))\r\n    transformation = transformation.multiply(axesbasis.getInverseProjectionMatrix())\r\n    let usAxesAligned = us.transform(transformation)\r\n        // Now we have done the transformation for aligning the axes.\r\n        // We still need to align the normals:\r\n    let normalsplane = Plane.fromNormalAndPoint(other.axisvector, new Vector3D(0, 0, 0))\r\n    let normalsbasis = new OrthoNormalBasis(normalsplane)\r\n    angle1 = normalsbasis.to2D(usAxesAligned.normalvector).angle()\r\n    angle2 = normalsbasis.to2D(other.normalvector).angle()\r\n    rotation = 180.0 * (angle2 - angle1) / Math.PI\r\n    rotation += normalrotation\r\n    transformation = transformation.multiply(normalsbasis.getProjectionMatrix())\r\n    transformation = transformation.multiply(Matrix4x4.rotationZ(rotation))\r\n    transformation = transformation.multiply(normalsbasis.getInverseProjectionMatrix())\r\n        // and translate to the destination point:\r\n    transformation = transformation.multiply(Matrix4x4.translation(other.point))\r\n        // let usAligned = us.transform(transformation);\r\n    return transformation\r\n  },\r\n\r\n  axisLine: function () {\r\n    return new Line3D(this.point, this.axisvector)\r\n  },\r\n\r\n    // creates a new Connector, with the connection point moved in the direction of the axisvector\r\n  extend: function (distance) {\r\n    let newpoint = this.point.plus(this.axisvector.unit().times(distance))\r\n    return new Connector(newpoint, this.axisvector, this.normalvector)\r\n  }\r\n}\r\n\r\nconst ConnectorList = function (connectors) {\r\n  this.connectors_ = connectors ? connectors.slice() : []\r\n}\r\n\r\nConnectorList.defaultNormal = [0, 0, 1]\r\n\r\nConnectorList.fromPath2D = function (path2D, arg1, arg2) {\r\n  if (arguments.length === 3) {\r\n    return ConnectorList._fromPath2DTangents(path2D, arg1, arg2)\r\n  } else if (arguments.length === 2) {\r\n    return ConnectorList._fromPath2DExplicit(path2D, arg1)\r\n  } else {\r\n    throw new Error('call with path2D and either 2 direction vectors, or a function returning direction vectors')\r\n  }\r\n}\r\n\r\n/*\r\n * calculate the connector axisvectors by calculating the \"tangent\" for path2D.\r\n * This is undefined for start and end points, so axis for these have to be manually\r\n * provided.\r\n */\r\nConnectorList._fromPath2DTangents = function (path2D, start, end) {\r\n    // path2D\r\n  let axis\r\n  let pathLen = path2D.points.length\r\n  let result = new ConnectorList([new Connector(path2D.points[0],\r\n        start, ConnectorList.defaultNormal)])\r\n    // middle points\r\n  path2D.points.slice(1, pathLen - 1).forEach(function (p2, i) {\r\n    axis = path2D.points[i + 2].minus(path2D.points[i]).toVector3D(0)\r\n    result.appendConnector(new Connector(p2.toVector3D(0), axis,\r\n          ConnectorList.defaultNormal))\r\n  }, this)\r\n  result.appendConnector(new Connector(path2D.points[pathLen - 1], end,\r\n      ConnectorList.defaultNormal))\r\n  result.closed = path2D.closed\r\n  return result\r\n}\r\n\r\n/*\r\n * angleIsh: either a static angle, or a function(point) returning an angle\r\n */\r\nConnectorList._fromPath2DExplicit = function (path2D, angleIsh) {\r\n  function getAngle (angleIsh, pt, i) {\r\n    if (typeof angleIsh === 'function') {\r\n      angleIsh = angleIsh(pt, i)\r\n    }\r\n    return angleIsh\r\n  }\r\n  let result = new ConnectorList(\r\n        path2D.points.map(function (p2, i) {\r\n          return new Connector(p2.toVector3D(0),\r\n                Vector3D.Create(1, 0, 0).rotateZ(getAngle(angleIsh, p2, i)),\r\n                  ConnectorList.defaultNormal)\r\n        }, this)\r\n    )\r\n  result.closed = path2D.closed\r\n  return result\r\n}\r\n\r\nConnectorList.prototype = {\r\n  setClosed: function (closed) {\r\n    this.closed = !!closed\r\n  },\r\n  appendConnector: function (conn) {\r\n    this.connectors_.push(conn)\r\n  },\r\n    /*\r\n     * arguments: cagish: a cag or a function(connector) returning a cag\r\n     *            closed: whether the 3d path defined by connectors location\r\n     *              should be closed or stay open\r\n     *              Note: don't duplicate connectors in the path\r\n     * TODO: consider an option \"maySelfIntersect\" to close & force union all single segments\r\n     */\r\n  followWith: function (cagish) {\r\n    const CSG = __webpack_require__(/*! ./CSG */ \"../../convert/jscad/src/core/CSG.js\") // FIXME , circular dependency connectors => CSG => connectors\r\n\r\n    this.verify()\r\n    function getCag (cagish, connector) {\r\n      if (typeof cagish === 'function') {\r\n        cagish = cagish(connector.point, connector.axisvector, connector.normalvector)\r\n      }\r\n      return cagish\r\n    }\r\n\r\n    let polygons = []\r\n    let currCag\r\n    let prevConnector = this.connectors_[this.connectors_.length - 1]\r\n    let prevCag = getCag(cagish, prevConnector)\r\n        // add walls\r\n    this.connectors_.forEach(function (connector, notFirst) {\r\n      currCag = getCag(cagish, connector)\r\n      if (notFirst || this.closed) {\r\n        polygons.push.apply(polygons, prevCag._toWallPolygons({\r\n          toConnector1: prevConnector, toConnector2: connector, cag: currCag}))\r\n      } else {\r\n                // it is the first, and shape not closed -> build start wall\r\n        polygons.push.apply(polygons,\r\n                    currCag._toPlanePolygons({toConnector: connector, flipped: true}))\r\n      }\r\n      if (notFirst === this.connectors_.length - 1 && !this.closed) {\r\n                // build end wall\r\n        polygons.push.apply(polygons,\r\n                    currCag._toPlanePolygons({toConnector: connector}))\r\n      }\r\n      prevCag = currCag\r\n      prevConnector = connector\r\n    }, this)\r\n    return CSG.fromPolygons(polygons).reTesselated().canonicalized()\r\n  },\r\n    /*\r\n     * general idea behind these checks: connectors need to have smooth transition from one to another\r\n     * TODO: add a check that 2 follow-on CAGs are not intersecting\r\n     */\r\n  verify: function () {\r\n    let connI\r\n    let connI1\r\n    for (let i = 0; i < this.connectors_.length - 1; i++) {\r\n      connI = this.connectors_[i]\r\n      connI1 = this.connectors_[i + 1]\r\n      if (connI1.point.minus(connI.point).dot(connI.axisvector) <= 0) {\r\n        throw new Error('Invalid ConnectorList. Each connectors position needs to be within a <90deg range of previous connectors axisvector')\r\n      }\r\n      if (connI.axisvector.dot(connI1.axisvector) <= 0) {\r\n        throw new Error('invalid ConnectorList. No neighboring connectors axisvectors may span a >=90deg angle')\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = {Connector, ConnectorList}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/connectors.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/constants.js":
/*!********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/constants.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const _CSGDEBUG = false\r\n\r\n/** Number of polygons per 360 degree revolution for 2D objects.\r\n * @default\r\n */\r\nconst defaultResolution2D = 32 // FIXME this seems excessive\r\n/** Number of polygons per 360 degree revolution for 3D objects.\r\n * @default\r\n */\r\nconst defaultResolution3D = 12\r\n\r\n/** Epsilon used during determination of near zero distances.\r\n * @default\r\n */\r\nconst EPS = 1e-5\r\n\r\n/** Epsilon used during determination of near zero areas.\r\n * @default\r\n */\r\nconst angleEPS = 0.10\r\n\r\n/** Epsilon used during determination of near zero areas.\r\n *  This is the minimal area of a minimal polygon.\r\n * @default\r\n */\r\nconst areaEPS = 0.50 * EPS * EPS * Math.sin(angleEPS)\r\n\r\nconst all = 0\r\nconst top = 1\r\nconst bottom = 2\r\nconst left = 3\r\nconst right = 4\r\nconst front = 5\r\nconst back = 6\r\n// Tag factory: we can request a unique tag through CSG.getTag()\r\nlet staticTag = 1\r\nconst getTag = () => staticTag++\r\n\r\nmodule.exports = {\r\n  _CSGDEBUG,\r\n  defaultResolution2D,\r\n  defaultResolution3D,\r\n  EPS,\r\n  angleEPS,\r\n  areaEPS,\r\n  all,\r\n  top,\r\n  bottom,\r\n  left,\r\n  right,\r\n  front,\r\n  back,\r\n  staticTag,\r\n  getTag\r\n}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/constants.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/math/Line2.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Line2.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector2D = __webpack_require__(/*! ./Vector2 */ \"../../convert/jscad/src/core/math/Vector2.js\")\r\nconst {solve2Linear} = __webpack_require__(/*! ../utils */ \"../../convert/jscad/src/core/utils.js\")\r\n\r\n/**  class Line2D\r\n * Represents a directional line in 2D space\r\n * A line is parametrized by its normal vector (perpendicular to the line, rotated 90 degrees counter clockwise)\r\n * and w. The line passes through the point <normal>.times(w).\r\n * Equation: p is on line if normal.dot(p)==w\r\n * @param {Vector2D} normal normal must be a unit vector!\r\n * @returns {Line2D}\r\n*/\r\nconst Line2D = function (normal, w) {\r\n  normal = new Vector2D(normal)\r\n  w = parseFloat(w)\r\n  let l = normal.length()\r\n    // normalize:\r\n  w *= l\r\n  normal = normal.times(1.0 / l)\r\n  this.normal = normal\r\n  this.w = w\r\n}\r\n\r\nLine2D.fromPoints = function (p1, p2) {\r\n  p1 = new Vector2D(p1)\r\n  p2 = new Vector2D(p2)\r\n  let direction = p2.minus(p1)\r\n  let normal = direction.normal().negated().unit()\r\n  let w = p1.dot(normal)\r\n  return new Line2D(normal, w)\r\n}\r\n\r\nLine2D.prototype = {\r\n    // same line but opposite direction:\r\n  reverse: function () {\r\n    return new Line2D(this.normal.negated(), -this.w)\r\n  },\r\n\r\n  equals: function (l) {\r\n    return (l.normal.equals(this.normal) && (l.w === this.w))\r\n  },\r\n\r\n  origin: function () {\r\n    return this.normal.times(this.w)\r\n  },\r\n\r\n  direction: function () {\r\n    return this.normal.normal()\r\n  },\r\n\r\n  xAtY: function (y) {\r\n        // (py == y) && (normal * p == w)\r\n        // -> px = (w - normal._y * y) / normal.x\r\n    let x = (this.w - this.normal._y * y) / this.normal.x\r\n    return x\r\n  },\r\n\r\n  absDistanceToPoint: function (point) {\r\n    point = new Vector2D(point)\r\n    let pointProjected = point.dot(this.normal)\r\n    let distance = Math.abs(pointProjected - this.w)\r\n    return distance\r\n  },\r\n    /* FIXME: has error - origin is not defined, the method is never used\r\n     closestPoint: function(point) {\r\n         point = new Vector2D(point);\r\n         let vector = point.dot(this.direction());\r\n         return origin.plus(vector);\r\n     },\r\n     */\r\n\r\n    // intersection between two lines, returns point as Vector2D\r\n  intersectWithLine: function (line2d) {\r\n    let point = solve2Linear(this.normal.x, this.normal.y, line2d.normal.x, line2d.normal.y, this.w, line2d.w)\r\n    point = new Vector2D(point) // make  vector2d\r\n    return point\r\n  },\r\n\r\n  transform: function (matrix4x4) {\r\n    let origin = new Vector2D(0, 0)\r\n    let pointOnPlane = this.normal.times(this.w)\r\n    let neworigin = origin.multiply4x4(matrix4x4)\r\n    let neworiginPlusNormal = this.normal.multiply4x4(matrix4x4)\r\n    let newnormal = neworiginPlusNormal.minus(neworigin)\r\n    let newpointOnPlane = pointOnPlane.multiply4x4(matrix4x4)\r\n    let neww = newnormal.dot(newpointOnPlane)\r\n    return new Line2D(newnormal, neww)\r\n  }\r\n}\r\n\r\nmodule.exports = Line2D\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Line2.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/math/Line3.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Line3.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector3D = __webpack_require__(/*! ./Vector3 */ \"../../convert/jscad/src/core/math/Vector3.js\")\r\nconst {EPS} = __webpack_require__(/*! ../constants */ \"../../convert/jscad/src/core/constants.js\")\r\nconst {solve2Linear} = __webpack_require__(/*! ../utils */ \"../../convert/jscad/src/core/utils.js\")\r\n\r\n// # class Line3D\r\n// Represents a line in 3D space\r\n// direction must be a unit vector\r\n// point is a random point on the line\r\nconst Line3D = function (point, direction) {\r\n  point = new Vector3D(point)\r\n  direction = new Vector3D(direction)\r\n  this.point = point\r\n  this.direction = direction.unit()\r\n}\r\n\r\nLine3D.fromPoints = function (p1, p2) {\r\n  p1 = new Vector3D(p1)\r\n  p2 = new Vector3D(p2)\r\n  let direction = p2.minus(p1)\r\n  return new Line3D(p1, direction)\r\n}\r\n\r\nLine3D.fromPlanes = function (p1, p2) {\r\n  let direction = p1.normal.cross(p2.normal)\r\n  let l = direction.length()\r\n  if (l < EPS) {\r\n    throw new Error('Parallel planes')\r\n  }\r\n  direction = direction.times(1.0 / l)\r\n\r\n  let mabsx = Math.abs(direction.x)\r\n  let mabsy = Math.abs(direction.y)\r\n  let mabsz = Math.abs(direction.z)\r\n  let origin\r\n  if ((mabsx >= mabsy) && (mabsx >= mabsz)) {\r\n        // direction vector is mostly pointing towards x\r\n        // find a point p for which x is zero:\r\n    let r = solve2Linear(p1.normal.y, p1.normal.z, p2.normal.y, p2.normal.z, p1.w, p2.w)\r\n    origin = new Vector3D(0, r[0], r[1])\r\n  } else if ((mabsy >= mabsx) && (mabsy >= mabsz)) {\r\n        // find a point p for which y is zero:\r\n    let r = solve2Linear(p1.normal.x, p1.normal.z, p2.normal.x, p2.normal.z, p1.w, p2.w)\r\n    origin = new Vector3D(r[0], 0, r[1])\r\n  } else {\r\n        // find a point p for which z is zero:\r\n    let r = solve2Linear(p1.normal.x, p1.normal.y, p2.normal.x, p2.normal.y, p1.w, p2.w)\r\n    origin = new Vector3D(r[0], r[1], 0)\r\n  }\r\n  return new Line3D(origin, direction)\r\n}\r\n\r\nLine3D.prototype = {\r\n  intersectWithPlane: function (plane) {\r\n        // plane: plane.normal * p = plane.w\r\n        // line: p=line.point + labda * line.direction\r\n    let labda = (plane.w - plane.normal.dot(this.point)) / plane.normal.dot(this.direction)\r\n    let point = this.point.plus(this.direction.times(labda))\r\n    return point\r\n  },\r\n\r\n  clone: function (line) {\r\n    return new Line3D(this.point.clone(), this.direction.clone())\r\n  },\r\n\r\n  reverse: function () {\r\n    return new Line3D(this.point.clone(), this.direction.negated())\r\n  },\r\n\r\n  transform: function (matrix4x4) {\r\n    let newpoint = this.point.multiply4x4(matrix4x4)\r\n    let pointPlusDirection = this.point.plus(this.direction)\r\n    let newPointPlusDirection = pointPlusDirection.multiply4x4(matrix4x4)\r\n    let newdirection = newPointPlusDirection.minus(newpoint)\r\n    return new Line3D(newpoint, newdirection)\r\n  },\r\n\r\n  closestPointOnLine: function (point) {\r\n    point = new Vector3D(point)\r\n    let t = point.minus(this.point).dot(this.direction) / this.direction.dot(this.direction)\r\n    let closestpoint = this.point.plus(this.direction.times(t))\r\n    return closestpoint\r\n  },\r\n\r\n  distanceToPoint: function (point) {\r\n    point = new Vector3D(point)\r\n    let closestpoint = this.closestPointOnLine(point)\r\n    let distancevector = point.minus(closestpoint)\r\n    let distance = distancevector.length()\r\n    return distance\r\n  },\r\n\r\n  equals: function (line3d) {\r\n    if (!this.direction.equals(line3d.direction)) return false\r\n    let distance = this.distanceToPoint(line3d.point)\r\n    if (distance > EPS) return false\r\n    return true\r\n  }\r\n}\r\n\r\nmodule.exports = Line3D\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Line3.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/math/Matrix4.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Matrix4.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector3D = __webpack_require__(/*! ./Vector3 */ \"../../convert/jscad/src/core/math/Vector3.js\")\r\nconst Vector2D = __webpack_require__(/*! ./Vector2 */ \"../../convert/jscad/src/core/math/Vector2.js\")\r\nconst OrthoNormalBasis = __webpack_require__(/*! ./OrthoNormalBasis */ \"../../convert/jscad/src/core/math/OrthoNormalBasis.js\")\r\nconst Plane = __webpack_require__(/*! ./Plane */ \"../../convert/jscad/src/core/math/Plane.js\")\r\n\r\n// # class Matrix4x4:\r\n// Represents a 4x4 matrix. Elements are specified in row order\r\nconst Matrix4x4 = function (elements) {\r\n  if (arguments.length >= 1) {\r\n    this.elements = elements\r\n  } else {\r\n        // if no arguments passed: create unity matrix\r\n    this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\r\n  }\r\n}\r\n\r\nMatrix4x4.prototype = {\r\n  plus: function (m) {\r\n    var r = []\r\n    for (var i = 0; i < 16; i++) {\r\n      r[i] = this.elements[i] + m.elements[i]\r\n    }\r\n    return new Matrix4x4(r)\r\n  },\r\n\r\n  minus: function (m) {\r\n    var r = []\r\n    for (var i = 0; i < 16; i++) {\r\n      r[i] = this.elements[i] - m.elements[i]\r\n    }\r\n    return new Matrix4x4(r)\r\n  },\r\n\r\n    // right multiply by another 4x4 matrix:\r\n  multiply: function (m) {\r\n        // cache elements in local variables, for speedup:\r\n    var this0 = this.elements[0]\r\n    var this1 = this.elements[1]\r\n    var this2 = this.elements[2]\r\n    var this3 = this.elements[3]\r\n    var this4 = this.elements[4]\r\n    var this5 = this.elements[5]\r\n    var this6 = this.elements[6]\r\n    var this7 = this.elements[7]\r\n    var this8 = this.elements[8]\r\n    var this9 = this.elements[9]\r\n    var this10 = this.elements[10]\r\n    var this11 = this.elements[11]\r\n    var this12 = this.elements[12]\r\n    var this13 = this.elements[13]\r\n    var this14 = this.elements[14]\r\n    var this15 = this.elements[15]\r\n    var m0 = m.elements[0]\r\n    var m1 = m.elements[1]\r\n    var m2 = m.elements[2]\r\n    var m3 = m.elements[3]\r\n    var m4 = m.elements[4]\r\n    var m5 = m.elements[5]\r\n    var m6 = m.elements[6]\r\n    var m7 = m.elements[7]\r\n    var m8 = m.elements[8]\r\n    var m9 = m.elements[9]\r\n    var m10 = m.elements[10]\r\n    var m11 = m.elements[11]\r\n    var m12 = m.elements[12]\r\n    var m13 = m.elements[13]\r\n    var m14 = m.elements[14]\r\n    var m15 = m.elements[15]\r\n\r\n    var result = []\r\n    result[0] = this0 * m0 + this1 * m4 + this2 * m8 + this3 * m12\r\n    result[1] = this0 * m1 + this1 * m5 + this2 * m9 + this3 * m13\r\n    result[2] = this0 * m2 + this1 * m6 + this2 * m10 + this3 * m14\r\n    result[3] = this0 * m3 + this1 * m7 + this2 * m11 + this3 * m15\r\n    result[4] = this4 * m0 + this5 * m4 + this6 * m8 + this7 * m12\r\n    result[5] = this4 * m1 + this5 * m5 + this6 * m9 + this7 * m13\r\n    result[6] = this4 * m2 + this5 * m6 + this6 * m10 + this7 * m14\r\n    result[7] = this4 * m3 + this5 * m7 + this6 * m11 + this7 * m15\r\n    result[8] = this8 * m0 + this9 * m4 + this10 * m8 + this11 * m12\r\n    result[9] = this8 * m1 + this9 * m5 + this10 * m9 + this11 * m13\r\n    result[10] = this8 * m2 + this9 * m6 + this10 * m10 + this11 * m14\r\n    result[11] = this8 * m3 + this9 * m7 + this10 * m11 + this11 * m15\r\n    result[12] = this12 * m0 + this13 * m4 + this14 * m8 + this15 * m12\r\n    result[13] = this12 * m1 + this13 * m5 + this14 * m9 + this15 * m13\r\n    result[14] = this12 * m2 + this13 * m6 + this14 * m10 + this15 * m14\r\n    result[15] = this12 * m3 + this13 * m7 + this14 * m11 + this15 * m15\r\n    return new Matrix4x4(result)\r\n  },\r\n\r\n  clone: function () {\r\n    var elements = this.elements.map(function (p) {\r\n      return p\r\n    })\r\n    return new Matrix4x4(elements)\r\n  },\r\n\r\n    // Right multiply the matrix by a Vector3D (interpreted as 3 row, 1 column)\r\n    // (result = M*v)\r\n    // Fourth element is taken as 1\r\n  rightMultiply1x3Vector: function (v) {\r\n    var v0 = v._x\r\n    var v1 = v._y\r\n    var v2 = v._z\r\n    var v3 = 1\r\n    var x = v0 * this.elements[0] + v1 * this.elements[1] + v2 * this.elements[2] + v3 * this.elements[3]\r\n    var y = v0 * this.elements[4] + v1 * this.elements[5] + v2 * this.elements[6] + v3 * this.elements[7]\r\n    var z = v0 * this.elements[8] + v1 * this.elements[9] + v2 * this.elements[10] + v3 * this.elements[11]\r\n    var w = v0 * this.elements[12] + v1 * this.elements[13] + v2 * this.elements[14] + v3 * this.elements[15]\r\n        // scale such that fourth element becomes 1:\r\n    if (w !== 1) {\r\n      var invw = 1.0 / w\r\n      x *= invw\r\n      y *= invw\r\n      z *= invw\r\n    }\r\n    return new Vector3D(x, y, z)\r\n  },\r\n\r\n    // Multiply a Vector3D (interpreted as 3 column, 1 row) by this matrix\r\n    // (result = v*M)\r\n    // Fourth element is taken as 1\r\n  leftMultiply1x3Vector: function (v) {\r\n    var v0 = v._x\r\n    var v1 = v._y\r\n    var v2 = v._z\r\n    var v3 = 1\r\n    var x = v0 * this.elements[0] + v1 * this.elements[4] + v2 * this.elements[8] + v3 * this.elements[12]\r\n    var y = v0 * this.elements[1] + v1 * this.elements[5] + v2 * this.elements[9] + v3 * this.elements[13]\r\n    var z = v0 * this.elements[2] + v1 * this.elements[6] + v2 * this.elements[10] + v3 * this.elements[14]\r\n    var w = v0 * this.elements[3] + v1 * this.elements[7] + v2 * this.elements[11] + v3 * this.elements[15]\r\n        // scale such that fourth element becomes 1:\r\n    if (w !== 1) {\r\n      var invw = 1.0 / w\r\n      x *= invw\r\n      y *= invw\r\n      z *= invw\r\n    }\r\n    return new Vector3D(x, y, z)\r\n  },\r\n\r\n    // Right multiply the matrix by a Vector2D (interpreted as 2 row, 1 column)\r\n    // (result = M*v)\r\n    // Fourth element is taken as 1\r\n  rightMultiply1x2Vector: function (v) {\r\n    var v0 = v.x\r\n    var v1 = v.y\r\n    var v2 = 0\r\n    var v3 = 1\r\n    var x = v0 * this.elements[0] + v1 * this.elements[1] + v2 * this.elements[2] + v3 * this.elements[3]\r\n    var y = v0 * this.elements[4] + v1 * this.elements[5] + v2 * this.elements[6] + v3 * this.elements[7]\r\n    var z = v0 * this.elements[8] + v1 * this.elements[9] + v2 * this.elements[10] + v3 * this.elements[11]\r\n    var w = v0 * this.elements[12] + v1 * this.elements[13] + v2 * this.elements[14] + v3 * this.elements[15]\r\n        // scale such that fourth element becomes 1:\r\n    if (w !== 1) {\r\n      var invw = 1.0 / w\r\n      x *= invw\r\n      y *= invw\r\n      z *= invw\r\n    }\r\n    return new Vector2D(x, y)\r\n  },\r\n\r\n    // Multiply a Vector2D (interpreted as 2 column, 1 row) by this matrix\r\n    // (result = v*M)\r\n    // Fourth element is taken as 1\r\n  leftMultiply1x2Vector: function (v) {\r\n    var v0 = v.x\r\n    var v1 = v.y\r\n    var v2 = 0\r\n    var v3 = 1\r\n    var x = v0 * this.elements[0] + v1 * this.elements[4] + v2 * this.elements[8] + v3 * this.elements[12]\r\n    var y = v0 * this.elements[1] + v1 * this.elements[5] + v2 * this.elements[9] + v3 * this.elements[13]\r\n    var z = v0 * this.elements[2] + v1 * this.elements[6] + v2 * this.elements[10] + v3 * this.elements[14]\r\n    var w = v0 * this.elements[3] + v1 * this.elements[7] + v2 * this.elements[11] + v3 * this.elements[15]\r\n        // scale such that fourth element becomes 1:\r\n    if (w !== 1) {\r\n      var invw = 1.0 / w\r\n      x *= invw\r\n      y *= invw\r\n      z *= invw\r\n    }\r\n    return new Vector2D(x, y)\r\n  },\r\n\r\n    // determine whether this matrix is a mirroring transformation\r\n  isMirroring: function () {\r\n    var u = new Vector3D(this.elements[0], this.elements[4], this.elements[8])\r\n    var v = new Vector3D(this.elements[1], this.elements[5], this.elements[9])\r\n    var w = new Vector3D(this.elements[2], this.elements[6], this.elements[10])\r\n\r\n        // for a true orthogonal, non-mirrored base, u.cross(v) == w\r\n        // If they have an opposite direction then we are mirroring\r\n    var mirrorvalue = u.cross(v).dot(w)\r\n    var ismirror = (mirrorvalue < 0)\r\n    return ismirror\r\n  }\r\n}\r\n\r\n// return the unity matrix\r\nMatrix4x4.unity = function () {\r\n  return new Matrix4x4()\r\n}\r\n\r\n// Create a rotation matrix for rotating around the x axis\r\nMatrix4x4.rotationX = function (degrees) {\r\n  var radians = degrees * Math.PI * (1.0 / 180.0)\r\n  var cos = Math.cos(radians)\r\n  var sin = Math.sin(radians)\r\n  var els = [\r\n    1, 0, 0, 0, 0, cos, sin, 0, 0, -sin, cos, 0, 0, 0, 0, 1\r\n  ]\r\n  return new Matrix4x4(els)\r\n}\r\n\r\n// Create a rotation matrix for rotating around the y axis\r\nMatrix4x4.rotationY = function (degrees) {\r\n  var radians = degrees * Math.PI * (1.0 / 180.0)\r\n  var cos = Math.cos(radians)\r\n  var sin = Math.sin(radians)\r\n  var els = [\r\n    cos, 0, -sin, 0, 0, 1, 0, 0, sin, 0, cos, 0, 0, 0, 0, 1\r\n  ]\r\n  return new Matrix4x4(els)\r\n}\r\n\r\n// Create a rotation matrix for rotating around the z axis\r\nMatrix4x4.rotationZ = function (degrees) {\r\n  var radians = degrees * Math.PI * (1.0 / 180.0)\r\n  var cos = Math.cos(radians)\r\n  var sin = Math.sin(radians)\r\n  var els = [\r\n    cos, sin, 0, 0, -sin, cos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1\r\n  ]\r\n  return new Matrix4x4(els)\r\n}\r\n\r\n// Matrix for rotation about arbitrary point and axis\r\nMatrix4x4.rotation = function (rotationCenter, rotationAxis, degrees) {\r\n  rotationCenter = new Vector3D(rotationCenter)\r\n  rotationAxis = new Vector3D(rotationAxis)\r\n  var rotationPlane = Plane.fromNormalAndPoint(rotationAxis, rotationCenter)\r\n  var orthobasis = new OrthoNormalBasis(rotationPlane)\r\n  var transformation = Matrix4x4.translation(rotationCenter.negated())\r\n  transformation = transformation.multiply(orthobasis.getProjectionMatrix())\r\n  transformation = transformation.multiply(Matrix4x4.rotationZ(degrees))\r\n  transformation = transformation.multiply(orthobasis.getInverseProjectionMatrix())\r\n  transformation = transformation.multiply(Matrix4x4.translation(rotationCenter))\r\n  return transformation\r\n}\r\n\r\n// Create an affine matrix for translation:\r\nMatrix4x4.translation = function (v) {\r\n    // parse as Vector3D, so we can pass an array or a Vector3D\r\n  var vec = new Vector3D(v)\r\n  var els = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, vec.x, vec.y, vec.z, 1]\r\n  return new Matrix4x4(els)\r\n}\r\n\r\n// Create an affine matrix for mirroring into an arbitrary plane:\r\nMatrix4x4.mirroring = function (plane) {\r\n  var nx = plane.normal.x\r\n  var ny = plane.normal.y\r\n  var nz = plane.normal.z\r\n  var w = plane.w\r\n  var els = [\r\n        (1.0 - 2.0 * nx * nx), (-2.0 * ny * nx), (-2.0 * nz * nx), 0,\r\n        (-2.0 * nx * ny), (1.0 - 2.0 * ny * ny), (-2.0 * nz * ny), 0,\r\n        (-2.0 * nx * nz), (-2.0 * ny * nz), (1.0 - 2.0 * nz * nz), 0,\r\n        (2.0 * nx * w), (2.0 * ny * w), (2.0 * nz * w), 1\r\n  ]\r\n  return new Matrix4x4(els)\r\n}\r\n\r\n// Create an affine matrix for scaling:\r\nMatrix4x4.scaling = function (v) {\r\n    // parse as Vector3D, so we can pass an array or a Vector3D\r\n  var vec = new Vector3D(v)\r\n  var els = [\r\n    vec.x, 0, 0, 0, 0, vec.y, 0, 0, 0, 0, vec.z, 0, 0, 0, 0, 1\r\n  ]\r\n  return new Matrix4x4(els)\r\n}\r\n\r\nmodule.exports = Matrix4x4\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Matrix4.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/math/OrthoNormalBasis.js":
/*!********************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/OrthoNormalBasis.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector2D = __webpack_require__(/*! ./Vector2 */ \"../../convert/jscad/src/core/math/Vector2.js\")\r\nconst Vector3D = __webpack_require__(/*! ./Vector3 */ \"../../convert/jscad/src/core/math/Vector3.js\")\r\nconst Line2D = __webpack_require__(/*! ./Line2 */ \"../../convert/jscad/src/core/math/Line2.js\")\r\nconst Line3D = __webpack_require__(/*! ./Line3 */ \"../../convert/jscad/src/core/math/Line3.js\")\r\nconst Plane = __webpack_require__(/*! ./Plane */ \"../../convert/jscad/src/core/math/Plane.js\")\r\n\r\n/** class OrthoNormalBasis\r\n * Reprojects points on a 3D plane onto a 2D plane\r\n * or from a 2D plane back onto the 3D plane\r\n * @param  {Plane} plane\r\n * @param  {Vector3D|Vector2D} rightvector\r\n */\r\nconst OrthoNormalBasis = function (plane, rightvector) {\r\n  if (arguments.length < 2) {\r\n    // choose an arbitrary right hand vector, making sure it is somewhat orthogonal to the plane normal:\r\n    rightvector = plane.normal.randomNonParallelVector()\r\n  } else {\r\n    rightvector = new Vector3D(rightvector)\r\n  }\r\n  this.v = plane.normal.cross(rightvector).unit()\r\n  this.u = this.v.cross(plane.normal)\r\n  this.plane = plane\r\n  this.planeorigin = plane.normal.times(plane.w)\r\n}\r\n\r\n// Get an orthonormal basis for the standard XYZ planes.\r\n// Parameters: the names of two 3D axes. The 2d x axis will map to the first given 3D axis, the 2d y\r\n// axis will map to the second.\r\n// Prepend the axis with a \"-\" to invert the direction of this axis.\r\n// For example: OrthoNormalBasis.GetCartesian(\"-Y\",\"Z\")\r\n//   will return an orthonormal basis where the 2d X axis maps to the 3D inverted Y axis, and\r\n//   the 2d Y axis maps to the 3D Z axis.\r\nOrthoNormalBasis.GetCartesian = function (xaxisid, yaxisid) {\r\n  let axisid = xaxisid + '/' + yaxisid\r\n  let planenormal, rightvector\r\n  if (axisid === 'X/Y') {\r\n    planenormal = [0, 0, 1]\r\n    rightvector = [1, 0, 0]\r\n  } else if (axisid === 'Y/-X') {\r\n    planenormal = [0, 0, 1]\r\n    rightvector = [0, 1, 0]\r\n  } else if (axisid === '-X/-Y') {\r\n    planenormal = [0, 0, 1]\r\n    rightvector = [-1, 0, 0]\r\n  } else if (axisid === '-Y/X') {\r\n    planenormal = [0, 0, 1]\r\n    rightvector = [0, -1, 0]\r\n  } else if (axisid === '-X/Y') {\r\n    planenormal = [0, 0, -1]\r\n    rightvector = [-1, 0, 0]\r\n  } else if (axisid === '-Y/-X') {\r\n    planenormal = [0, 0, -1]\r\n    rightvector = [0, -1, 0]\r\n  } else if (axisid === 'X/-Y') {\r\n    planenormal = [0, 0, -1]\r\n    rightvector = [1, 0, 0]\r\n  } else if (axisid === 'Y/X') {\r\n    planenormal = [0, 0, -1]\r\n    rightvector = [0, 1, 0]\r\n  } else if (axisid === 'X/Z') {\r\n    planenormal = [0, -1, 0]\r\n    rightvector = [1, 0, 0]\r\n  } else if (axisid === 'Z/-X') {\r\n    planenormal = [0, -1, 0]\r\n    rightvector = [0, 0, 1]\r\n  } else if (axisid === '-X/-Z') {\r\n    planenormal = [0, -1, 0]\r\n    rightvector = [-1, 0, 0]\r\n  } else if (axisid === '-Z/X') {\r\n    planenormal = [0, -1, 0]\r\n    rightvector = [0, 0, -1]\r\n  } else if (axisid === '-X/Z') {\r\n    planenormal = [0, 1, 0]\r\n    rightvector = [-1, 0, 0]\r\n  } else if (axisid === '-Z/-X') {\r\n    planenormal = [0, 1, 0]\r\n    rightvector = [0, 0, -1]\r\n  } else if (axisid === 'X/-Z') {\r\n    planenormal = [0, 1, 0]\r\n    rightvector = [1, 0, 0]\r\n  } else if (axisid === 'Z/X') {\r\n    planenormal = [0, 1, 0]\r\n    rightvector = [0, 0, 1]\r\n  } else if (axisid === 'Y/Z') {\r\n    planenormal = [1, 0, 0]\r\n    rightvector = [0, 1, 0]\r\n  } else if (axisid === 'Z/-Y') {\r\n    planenormal = [1, 0, 0]\r\n    rightvector = [0, 0, 1]\r\n  } else if (axisid === '-Y/-Z') {\r\n    planenormal = [1, 0, 0]\r\n    rightvector = [0, -1, 0]\r\n  } else if (axisid === '-Z/Y') {\r\n    planenormal = [1, 0, 0]\r\n    rightvector = [0, 0, -1]\r\n  } else if (axisid === '-Y/Z') {\r\n    planenormal = [-1, 0, 0]\r\n    rightvector = [0, -1, 0]\r\n  } else if (axisid === '-Z/-Y') {\r\n    planenormal = [-1, 0, 0]\r\n    rightvector = [0, 0, -1]\r\n  } else if (axisid === 'Y/-Z') {\r\n    planenormal = [-1, 0, 0]\r\n    rightvector = [0, 1, 0]\r\n  } else if (axisid === 'Z/Y') {\r\n    planenormal = [-1, 0, 0]\r\n    rightvector = [0, 0, 1]\r\n  } else {\r\n    throw new Error('OrthoNormalBasis.GetCartesian: invalid combination of axis identifiers. Should pass two string arguments from [X,Y,Z,-X,-Y,-Z], being two different axes.')\r\n  }\r\n  return new OrthoNormalBasis(new Plane(new Vector3D(planenormal), 0), new Vector3D(rightvector))\r\n}\r\n\r\n/*\r\n// test code for OrthoNormalBasis.GetCartesian()\r\nOrthoNormalBasis.GetCartesian_Test=function() {\r\n  let axisnames=[\"X\",\"Y\",\"Z\",\"-X\",\"-Y\",\"-Z\"];\r\n  let axisvectors=[[1,0,0], [0,1,0], [0,0,1], [-1,0,0], [0,-1,0], [0,0,-1]];\r\n  for(let axis1=0; axis1 < 3; axis1++) {\r\n    for(let axis1inverted=0; axis1inverted < 2; axis1inverted++) {\r\n      let axis1name=axisnames[axis1+3*axis1inverted];\r\n      let axis1vector=axisvectors[axis1+3*axis1inverted];\r\n      for(let axis2=0; axis2 < 3; axis2++) {\r\n        if(axis2 != axis1) {\r\n          for(let axis2inverted=0; axis2inverted < 2; axis2inverted++) {\r\n            let axis2name=axisnames[axis2+3*axis2inverted];\r\n            let axis2vector=axisvectors[axis2+3*axis2inverted];\r\n            let orthobasis=OrthoNormalBasis.GetCartesian(axis1name, axis2name);\r\n            let test1=orthobasis.to3D(new Vector2D([1,0]));\r\n            let test2=orthobasis.to3D(new Vector2D([0,1]));\r\n            let expected1=new Vector3D(axis1vector);\r\n            let expected2=new Vector3D(axis2vector);\r\n            let d1=test1.distanceTo(expected1);\r\n            let d2=test2.distanceTo(expected2);\r\n            if( (d1 > 0.01) || (d2 > 0.01) ) {\r\n              throw new Error(\"Wrong!\");\r\n  }}}}}}\r\n  throw new Error(\"OK\");\r\n};\r\n*/\r\n\r\n// The z=0 plane, with the 3D x and y vectors mapped to the 2D x and y vector\r\nOrthoNormalBasis.Z0Plane = function () {\r\n  let plane = new Plane(new Vector3D([0, 0, 1]), 0)\r\n  return new OrthoNormalBasis(plane, new Vector3D([1, 0, 0]))\r\n}\r\n\r\nOrthoNormalBasis.prototype = {\r\n  getProjectionMatrix: function () {\r\n    const Matrix4x4 = __webpack_require__(/*! ./Matrix4 */ \"../../convert/jscad/src/core/math/Matrix4.js\") // FIXME: circular dependencies Matrix=>OrthoNormalBasis => Matrix\r\n    return new Matrix4x4([\r\n      this.u.x, this.v.x, this.plane.normal.x, 0,\r\n      this.u.y, this.v.y, this.plane.normal.y, 0,\r\n      this.u.z, this.v.z, this.plane.normal.z, 0,\r\n      0, 0, -this.plane.w, 1\r\n    ])\r\n  },\r\n\r\n  getInverseProjectionMatrix: function () {\r\n    const Matrix4x4 = __webpack_require__(/*! ./Matrix4 */ \"../../convert/jscad/src/core/math/Matrix4.js\") // FIXME: circular dependencies Matrix=>OrthoNormalBasis => Matrix\r\n    let p = this.plane.normal.times(this.plane.w)\r\n    return new Matrix4x4([\r\n      this.u.x, this.u.y, this.u.z, 0,\r\n      this.v.x, this.v.y, this.v.z, 0,\r\n      this.plane.normal.x, this.plane.normal.y, this.plane.normal.z, 0,\r\n      p.x, p.y, p.z, 1\r\n    ])\r\n  },\r\n\r\n  to2D: function (vec3) {\r\n    return new Vector2D(vec3.dot(this.u), vec3.dot(this.v))\r\n  },\r\n\r\n  to3D: function (vec2) {\r\n    return this.planeorigin.plus(this.u.times(vec2.x)).plus(this.v.times(vec2.y))\r\n  },\r\n\r\n  line3Dto2D: function (line3d) {\r\n    let a = line3d.point\r\n    let b = line3d.direction.plus(a)\r\n    let a2d = this.to2D(a)\r\n    let b2d = this.to2D(b)\r\n    return Line2D.fromPoints(a2d, b2d)\r\n  },\r\n\r\n  line2Dto3D: function (line2d) {\r\n    let a = line2d.origin()\r\n    let b = line2d.direction().plus(a)\r\n    let a3d = this.to3D(a)\r\n    let b3d = this.to3D(b)\r\n    return Line3D.fromPoints(a3d, b3d)\r\n  },\r\n\r\n  transform: function (matrix4x4) {\r\n    // todo: this may not work properly in case of mirroring\r\n    let newplane = this.plane.transform(matrix4x4)\r\n    let rightpointTransformed = this.u.transform(matrix4x4)\r\n    let originTransformed = new Vector3D(0, 0, 0).transform(matrix4x4)\r\n    let newrighthandvector = rightpointTransformed.minus(originTransformed)\r\n    let newbasis = new OrthoNormalBasis(newplane, newrighthandvector)\r\n    return newbasis\r\n  }\r\n}\r\n\r\nmodule.exports = OrthoNormalBasis\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/OrthoNormalBasis.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/math/Path2.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Path2.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector2D = __webpack_require__(/*! ./Vector2 */ \"../../convert/jscad/src/core/math/Vector2.js\")\r\nconst {EPS, angleEPS} = __webpack_require__(/*! ../constants */ \"../../convert/jscad/src/core/constants.js\")\r\nconst {parseOptionAs2DVector, parseOptionAsFloat, parseOptionAsInt, parseOptionAsBool} = __webpack_require__(/*! ../../api/optionParsers */ \"../../convert/jscad/src/api/optionParsers.js\")\r\nconst {defaultResolution2D} = __webpack_require__(/*! ../constants */ \"../../convert/jscad/src/core/constants.js\")\r\nconst Vertex = __webpack_require__(/*! ./Vertex2 */ \"../../convert/jscad/src/core/math/Vertex2.js\")\r\nconst Side = __webpack_require__(/*! ./Side */ \"../../convert/jscad/src/core/math/Side.js\")\r\n\r\n/** Class Path2D\r\n * Represents a series of points, connected by infinitely thin lines.\r\n * A path can be open or closed, i.e. additional line between first and last points.\r\n * The difference between Path2D and CAG is that a path is a 'thin' line, whereas a CAG is an enclosed area.\r\n * @constructor\r\n * @param {Vector2D[]} [points=[]] - list of points\r\n * @param {boolean} [closed=false] - closer of path\r\n *\r\n * @example\r\n * new CSG.Path2D()\r\n * new CSG.Path2D([[10,10], [-10,10], [-10,-10], [10,-10]], true) // closed\r\n */\r\nconst Path2D = function (points, closed) {\r\n  closed = !!closed\r\n  points = points || []\r\n    // re-parse the points into Vector2D\r\n    // and remove any duplicate points\r\n  let prevpoint = null\r\n  if (closed && (points.length > 0)) {\r\n    prevpoint = new Vector2D(points[points.length - 1])\r\n  }\r\n  let newpoints = []\r\n  points.map(function (point) {\r\n    point = new Vector2D(point)\r\n    let skip = false\r\n    if (prevpoint !== null) {\r\n      let distance = point.distanceTo(prevpoint)\r\n      skip = distance < EPS\r\n    }\r\n    if (!skip) newpoints.push(point)\r\n    prevpoint = point\r\n  })\r\n  this.points = newpoints\r\n  this.closed = closed\r\n}\r\n\r\n/** Construct an arc.\r\n * @param {Object} [options] - options for construction\r\n * @param {Vector2D} [options.center=[0,0]] - center of circle\r\n * @param {Number} [options.radius=1] - radius of circle\r\n * @param {Number} [options.startangle=0] - starting angle of the arc, in degrees\r\n * @param {Number} [options.endangle=360] - ending angle of the arc, in degrees\r\n * @param {Number} [options.resolution=defaultResolution2D] - number of sides per 360 rotation\r\n * @param {Boolean} [options.maketangent=false] - adds line segments at both ends of the arc to ensure that the gradients at the edges are tangent\r\n * @returns {Path2D} new Path2D object (not closed)\r\n *\r\n * @example\r\n * let path = CSG.Path2D.arc({\r\n *   center: [5, 5],\r\n *   radius: 10,\r\n *   startangle: 90,\r\n *   endangle: 180,\r\n *   resolution: 36,\r\n *   maketangent: true\r\n * });\r\n */\r\nPath2D.arc = function (options) {\r\n  let center = parseOptionAs2DVector(options, 'center', 0)\r\n  let radius = parseOptionAsFloat(options, 'radius', 1)\r\n  let startangle = parseOptionAsFloat(options, 'startangle', 0)\r\n  let endangle = parseOptionAsFloat(options, 'endangle', 360)\r\n  let resolution = parseOptionAsInt(options, 'resolution', defaultResolution2D)\r\n  let maketangent = parseOptionAsBool(options, 'maketangent', false)\r\n    // no need to make multiple turns:\r\n  while (endangle - startangle >= 720) {\r\n    endangle -= 360\r\n  }\r\n  while (endangle - startangle <= -720) {\r\n    endangle += 360\r\n  }\r\n  let points = []\r\n  let point\r\n  let absangledif = Math.abs(endangle - startangle)\r\n  if (absangledif < angleEPS) {\r\n    point = Vector2D.fromAngle(startangle / 180.0 * Math.PI).times(radius)\r\n    points.push(point.plus(center))\r\n  } else {\r\n    let numsteps = Math.floor(resolution * absangledif / 360) + 1\r\n    let edgestepsize = numsteps * 0.5 / absangledif // step size for half a degree\r\n    if (edgestepsize > 0.25) edgestepsize = 0.25\r\n    let numstepsMod = maketangent ? (numsteps + 2) : numsteps\r\n    for (let i = 0; i <= numstepsMod; i++) {\r\n      let step = i\r\n      if (maketangent) {\r\n        step = (i - 1) * (numsteps - 2 * edgestepsize) / numsteps + edgestepsize\r\n        if (step < 0) step = 0\r\n        if (step > numsteps) step = numsteps\r\n      }\r\n      let angle = startangle + step * (endangle - startangle) / numsteps\r\n      point = Vector2D.fromAngle(angle / 180.0 * Math.PI).times(radius)\r\n      points.push(point.plus(center))\r\n    }\r\n  }\r\n  return new Path2D(points, false)\r\n}\r\n\r\nPath2D.prototype = {\r\n  concat: function (otherpath) {\r\n    if (this.closed || otherpath.closed) {\r\n      throw new Error('Paths must not be closed')\r\n    }\r\n    let newpoints = this.points.concat(otherpath.points)\r\n    return new Path2D(newpoints)\r\n  },\r\n\r\n  /**\r\n   * Get the points that make up the path.\r\n   * note that this is current internal list of points, not an immutable copy.\r\n   * @returns {Vector2[]} array of points the make up the path\r\n   */\r\n  getPoints: function () {\r\n    return this.points\r\n  },\r\n\r\n  /**\r\n   * Append an point to the end of the path.\r\n   * @param {Vector2D} point - point to append\r\n   * @returns {Path2D} new Path2D object (not closed)\r\n   */\r\n  appendPoint: function (point) {\r\n    if (this.closed) {\r\n      throw new Error('Path must not be closed')\r\n    }\r\n    point = new Vector2D(point) // cast to Vector2D\r\n    let newpoints = this.points.concat([point])\r\n    return new Path2D(newpoints)\r\n  },\r\n\r\n  /**\r\n   * Append a list of points to the end of the path.\r\n   * @param {Vector2D[]} points - points to append\r\n   * @returns {Path2D} new Path2D object (not closed)\r\n   */\r\n  appendPoints: function (points) {\r\n    if (this.closed) {\r\n      throw new Error('Path must not be closed')\r\n    }\r\n    let newpoints = this.points\r\n    points.forEach(function (point) {\r\n      newpoints.push(new Vector2D(point)) // cast to Vector2D\r\n    })\r\n    return new Path2D(newpoints)\r\n  },\r\n\r\n  close: function () {\r\n    return new Path2D(this.points, true)\r\n  },\r\n\r\n  /**\r\n   * Determine if the path is a closed or not.\r\n   * @returns {Boolean} true when the path is closed, otherwise false\r\n   */\r\n  isClosed: function () {\r\n    return this.closed\r\n  },\r\n\r\n  /**\r\n   * Determine the overall clockwise or anti-clockwise turn of a path.\r\n   * See: http://mathworld.wolfram.com/PolygonArea.html\r\n   * @returns {String} One of ['clockwise', 'counter-clockwise', 'straight'].\r\n   */\r\n  getTurn: function () {\r\n    const points = this.points;\r\n    let twice_area = 0;\r\n    let last = points.length - 1;\r\n    for (let current = 0; current < points.length; last = current++) {\r\n      twice_area += points[last].x * points[current].y - points[last].y * points[current].x;\r\n    }\r\n    if (twice_area > 0) {\r\n      return 'clockwise';\r\n    } else if (twice_area < 0) {\r\n      return 'counter-clockwise';\r\n    } else {\r\n      return 'straight';\r\n    }\r\n  },\r\n\r\n    // Extrude the path by following it with a rectangle (upright, perpendicular to the path direction)\r\n    // Returns a CSG solid\r\n    //   width: width of the extrusion, in the z=0 plane\r\n    //   height: height of the extrusion in the z direction\r\n    //   resolution: number of segments per 360 degrees for the curve in a corner\r\n  rectangularExtrude: function (width, height, resolution) {\r\n    let cag = this.expandToCAG(width / 2, resolution)\r\n    let result = cag.extrude({\r\n      offset: [0, 0, height]\r\n    })\r\n    return result\r\n  },\r\n\r\n    // Expand the path to a CAG\r\n    // This traces the path with a circle with radius pathradius\r\n  expandToCAG: function (pathradius, resolution) {\r\n    const CAG = __webpack_require__(/*! ../CAG */ \"../../convert/jscad/src/core/CAG.js\") // FIXME: cyclic dependencies CAG => PATH2 => CAG\r\n    let sides = []\r\n    let numpoints = this.points.length\r\n    let startindex = 0\r\n    if (this.closed && (numpoints > 2)) startindex = -1\r\n    let prevvertex\r\n    for (let i = startindex; i < numpoints; i++) {\r\n      let pointindex = i\r\n      if (pointindex < 0) pointindex = numpoints - 1\r\n      let point = this.points[pointindex]\r\n      let vertex = new Vertex(point)\r\n      if (i > startindex) {\r\n        let side = new Side(prevvertex, vertex)\r\n        sides.push(side)\r\n      }\r\n      prevvertex = vertex\r\n    }\r\n    let shellcag = CAG.fromSides(sides)\r\n    let expanded = shellcag.expandedShell(pathradius, resolution)\r\n    return expanded\r\n  },\r\n\r\n  innerToCAG: function () {\r\n    const CAG = __webpack_require__(/*! ../CAG */ \"../../convert/jscad/src/core/CAG.js\") // FIXME: cyclic dependencies CAG => PATH2 => CAG\r\n    if (!this.closed) throw new Error('The path should be closed!')\r\n    return CAG.fromPoints(this.points)\r\n  },\r\n\r\n  transform: function (matrix4x4) {\r\n    let newpoints = this.points.map(function (point) {\r\n      return point.multiply4x4(matrix4x4)\r\n    })\r\n    return new Path2D(newpoints, this.closed)\r\n  },\r\n\r\n  /**\r\n   * Append a Bezier curve to the end of the path, using the control points to transition the curve through start and end points.\r\n   * <br>\r\n   * The Bézier curve starts at the last point in the path,\r\n   * and ends at the last given control point. Other control points are intermediate control points.\r\n   * <br>\r\n   * The first control point may be null to ensure a smooth transition occurs. In this case,\r\n   * the second to last control point of the path is mirrored into the control points of the Bezier curve.\r\n   * In other words, the trailing gradient of the path matches the new gradient of the curve.\r\n   * @param {Vector2D[]} controlpoints - list of control points\r\n   * @param {Object} [options] - options for construction\r\n   * @param {Number} [options.resolution=defaultResolution2D] - number of sides per 360 rotation\r\n   * @returns {Path2D} new Path2D object (not closed)\r\n   *\r\n   * @example\r\n   * let p5 = new CSG.Path2D([[10,-20]],false);\r\n   * p5 = p5.appendBezier([[10,-10],[25,-10],[25,-20]]);\r\n   * p5 = p5.appendBezier([[25,-30],[40,-30],[40,-20]]);\r\n   */\r\n  appendBezier: function (controlpoints, options) {\r\n    if (arguments.length < 2) {\r\n      options = {}\r\n    }\r\n    if (this.closed) {\r\n      throw new Error('Path must not be closed')\r\n    }\r\n    if (!(controlpoints instanceof Array)) {\r\n      throw new Error('appendBezier: should pass an array of control points')\r\n    }\r\n    if (controlpoints.length < 1) {\r\n      throw new Error('appendBezier: need at least 1 control point')\r\n    }\r\n    if (this.points.length < 1) {\r\n      throw new Error('appendBezier: path must already contain a point (the endpoint of the path is used as the starting point for the bezier curve)')\r\n    }\r\n    let resolution = parseOptionAsInt(options, 'resolution', defaultResolution2D)\r\n    if (resolution < 4) resolution = 4\r\n    let factorials = []\r\n    let controlpointsParsed = []\r\n    controlpointsParsed.push(this.points[this.points.length - 1]) // start at the previous end point\r\n    for (let i = 0; i < controlpoints.length; ++i) {\r\n      let p = controlpoints[i]\r\n      if (p === null) {\r\n                // we can pass null as the first control point. In that case a smooth gradient is ensured:\r\n        if (i !== 0) {\r\n          throw new Error('appendBezier: null can only be passed as the first control point')\r\n        }\r\n        if (controlpoints.length < 2) {\r\n          throw new Error('appendBezier: null can only be passed if there is at least one more control point')\r\n        }\r\n        let lastBezierControlPoint\r\n        if ('lastBezierControlPoint' in this) {\r\n          lastBezierControlPoint = this.lastBezierControlPoint\r\n        } else {\r\n          if (this.points.length < 2) {\r\n            throw new Error('appendBezier: null is passed as a control point but this requires a previous bezier curve or at least two points in the existing path')\r\n          }\r\n          lastBezierControlPoint = this.points[this.points.length - 2]\r\n        }\r\n                // mirror the last bezier control point:\r\n        p = this.points[this.points.length - 1].times(2).minus(lastBezierControlPoint)\r\n      } else {\r\n        p = new Vector2D(p) // cast to Vector2D\r\n      }\r\n      controlpointsParsed.push(p)\r\n    }\r\n    let bezierOrder = controlpointsParsed.length - 1\r\n    let fact = 1\r\n    for (let i = 0; i <= bezierOrder; ++i) {\r\n      if (i > 0) fact *= i\r\n      factorials.push(fact)\r\n    }\r\n    let binomials = []\r\n    for (let i = 0; i <= bezierOrder; ++i) {\r\n      let binomial = factorials[bezierOrder] / (factorials[i] * factorials[bezierOrder - i])\r\n      binomials.push(binomial)\r\n    }\r\n    let getPointForT = function (t) {\r\n      let t_k = 1 // = pow(t,k)\r\n      let one_minus_t_n_minus_k = Math.pow(1 - t, bezierOrder) // = pow( 1-t, bezierOrder - k)\r\n      let inv_1_minus_t = (t !== 1) ? (1 / (1 - t)) : 1\r\n      let point = new Vector2D(0, 0)\r\n      for (let k = 0; k <= bezierOrder; ++k) {\r\n        if (k === bezierOrder) one_minus_t_n_minus_k = 1\r\n        let bernstein_coefficient = binomials[k] * t_k * one_minus_t_n_minus_k\r\n        point = point.plus(controlpointsParsed[k].times(bernstein_coefficient))\r\n        t_k *= t\r\n        one_minus_t_n_minus_k *= inv_1_minus_t\r\n      }\r\n      return point\r\n    }\r\n    let newpoints = []\r\n    let newpoints_t = []\r\n    let numsteps = bezierOrder + 1\r\n    for (let i = 0; i < numsteps; ++i) {\r\n      let t = i / (numsteps - 1)\r\n      let point = getPointForT(t)\r\n      newpoints.push(point)\r\n      newpoints_t.push(t)\r\n    }\r\n    // subdivide each segment until the angle at each vertex becomes small enough:\r\n    let subdivideBase = 1\r\n    let maxangle = Math.PI * 2 / resolution // segments may have differ no more in angle than this\r\n    let maxsinangle = Math.sin(maxangle)\r\n    while (subdivideBase < newpoints.length - 1) {\r\n      let dir1 = newpoints[subdivideBase].minus(newpoints[subdivideBase - 1]).unit()\r\n      let dir2 = newpoints[subdivideBase + 1].minus(newpoints[subdivideBase]).unit()\r\n      let sinangle = dir1.cross(dir2) // this is the sine of the angle\r\n      if (Math.abs(sinangle) > maxsinangle) {\r\n                // angle is too big, we need to subdivide\r\n        let t0 = newpoints_t[subdivideBase - 1]\r\n        let t1 = newpoints_t[subdivideBase + 1]\r\n        let t0_new = t0 + (t1 - t0) * 1 / 3\r\n        let t1_new = t0 + (t1 - t0) * 2 / 3\r\n        let point0_new = getPointForT(t0_new)\r\n        let point1_new = getPointForT(t1_new)\r\n                // remove the point at subdivideBase and replace with 2 new points:\r\n        newpoints.splice(subdivideBase, 1, point0_new, point1_new)\r\n        newpoints_t.splice(subdivideBase, 1, t0_new, t1_new)\r\n                // re - evaluate the angles, starting at the previous junction since it has changed:\r\n        subdivideBase--\r\n        if (subdivideBase < 1) subdivideBase = 1\r\n      } else {\r\n        ++subdivideBase\r\n      }\r\n    }\r\n        // append to the previous points, but skip the first new point because it is identical to the last point:\r\n    newpoints = this.points.concat(newpoints.slice(1))\r\n    let result = new Path2D(newpoints)\r\n    result.lastBezierControlPoint = controlpointsParsed[controlpointsParsed.length - 2]\r\n    return result\r\n  },\r\n\r\n  /**\r\n   * Append an arc to the end of the path.\r\n   * This implementation follows the SVG arc specs. For the details see\r\n   * http://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands\r\n   * @param {Vector2D} endpoint - end point of arc\r\n   * @param {Object} [options] - options for construction\r\n   * @param {Number} [options.radius=0] - radius of arc (X and Y), see also xradius and yradius\r\n   * @param {Number} [options.xradius=0] - X radius of arc, see also radius\r\n   * @param {Number} [options.yradius=0] - Y radius of arc, see also radius\r\n   * @param {Number} [options.xaxisrotation=0] -  rotation (in degrees) of the X axis of the arc with respect to the X axis of the coordinate system\r\n   * @param {Number} [options.resolution=defaultResolution2D] - number of sides per 360 rotation\r\n   * @param {Boolean} [options.clockwise=false] - draw an arc clockwise with respect to the center point\r\n   * @param {Boolean} [options.large=false] - draw an arc longer than 180 degrees\r\n   * @returns {Path2D} new Path2D object (not closed)\r\n   *\r\n   * @example\r\n   * let p1 = new CSG.Path2D([[27.5,-22.96875]],false);\r\n   * p1 = p1.appendPoint([27.5,-3.28125]);\r\n   * p1 = p1.appendArc([12.5,-22.96875],{xradius: 15,yradius: -19.6875,xaxisrotation: 0,clockwise: false,large: false});\r\n   * p1 = p1.close();\r\n   */\r\n  appendArc: function (endpoint, options) {\r\n    let decimals = 100000\r\n    if (arguments.length < 2) {\r\n      options = {}\r\n    }\r\n    if (this.closed) {\r\n      throw new Error('Path must not be closed')\r\n    }\r\n    if (this.points.length < 1) {\r\n      throw new Error('appendArc: path must already contain a point (the endpoint of the path is used as the starting point for the arc)')\r\n    }\r\n    let resolution = parseOptionAsInt(options, 'resolution', defaultResolution2D)\r\n    if (resolution < 4) resolution = 4\r\n    let xradius, yradius\r\n    if (('xradius' in options) || ('yradius' in options)) {\r\n      if ('radius' in options) {\r\n        throw new Error('Should either give an xradius and yradius parameter, or a radius parameter')\r\n      }\r\n      xradius = parseOptionAsFloat(options, 'xradius', 0)\r\n      yradius = parseOptionAsFloat(options, 'yradius', 0)\r\n    } else {\r\n      xradius = parseOptionAsFloat(options, 'radius', 0)\r\n      yradius = xradius\r\n    }\r\n    let xaxisrotation = parseOptionAsFloat(options, 'xaxisrotation', 0)\r\n    let clockwise = parseOptionAsBool(options, 'clockwise', false)\r\n    let largearc = parseOptionAsBool(options, 'large', false)\r\n    let startpoint = this.points[this.points.length - 1]\r\n    endpoint = new Vector2D(endpoint)\r\n        // round to precision in order to have determinate calculations\r\n    xradius = Math.round(xradius * decimals) / decimals\r\n    yradius = Math.round(yradius * decimals) / decimals\r\n    endpoint = new Vector2D(Math.round(endpoint.x * decimals) / decimals, Math.round(endpoint.y * decimals) / decimals)\r\n\r\n    let sweepFlag = !clockwise\r\n    let newpoints = []\r\n    if ((xradius === 0) || (yradius === 0)) {\r\n            // http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes:\r\n            // If rx = 0 or ry = 0, then treat this as a straight line from (x1, y1) to (x2, y2) and stop\r\n      newpoints.push(endpoint)\r\n    } else {\r\n      xradius = Math.abs(xradius)\r\n      yradius = Math.abs(yradius)\r\n\r\n            // see http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes :\r\n      let phi = xaxisrotation * Math.PI / 180.0\r\n      let cosphi = Math.cos(phi)\r\n      let sinphi = Math.sin(phi)\r\n      let minushalfdistance = startpoint.minus(endpoint).times(0.5)\r\n            // F.6.5.1:\r\n            // round to precision in order to have determinate calculations\r\n      let x = Math.round((cosphi * minushalfdistance.x + sinphi * minushalfdistance.y) * decimals) / decimals\r\n      let y = Math.round((-sinphi * minushalfdistance.x + cosphi * minushalfdistance.y) * decimals) / decimals\r\n      let startTranslated = new Vector2D(x, y)\r\n            // F.6.6.2:\r\n      let biglambda = (startTranslated.x * startTranslated.x) / (xradius * xradius) + (startTranslated.y * startTranslated.y) / (yradius * yradius)\r\n      if (biglambda > 1.0) {\r\n                // F.6.6.3:\r\n        let sqrtbiglambda = Math.sqrt(biglambda)\r\n        xradius *= sqrtbiglambda\r\n        yradius *= sqrtbiglambda\r\n                // round to precision in order to have determinate calculations\r\n        xradius = Math.round(xradius * decimals) / decimals\r\n        yradius = Math.round(yradius * decimals) / decimals\r\n      }\r\n            // F.6.5.2:\r\n      let multiplier1 = Math.sqrt((xradius * xradius * yradius * yradius - xradius * xradius * startTranslated.y * startTranslated.y - yradius * yradius * startTranslated.x * startTranslated.x) / (xradius * xradius * startTranslated.y * startTranslated.y + yradius * yradius * startTranslated.x * startTranslated.x))\r\n      if (sweepFlag === largearc) multiplier1 = -multiplier1\r\n      let centerTranslated = new Vector2D(xradius * startTranslated.y / yradius, -yradius * startTranslated.x / xradius).times(multiplier1)\r\n            // F.6.5.3:\r\n      let center = new Vector2D(cosphi * centerTranslated.x - sinphi * centerTranslated.y, sinphi * centerTranslated.x + cosphi * centerTranslated.y).plus((startpoint.plus(endpoint)).times(0.5))\r\n            // F.6.5.5:\r\n      let vec1 = new Vector2D((startTranslated.x - centerTranslated.x) / xradius, (startTranslated.y - centerTranslated.y) / yradius)\r\n      let vec2 = new Vector2D((-startTranslated.x - centerTranslated.x) / xradius, (-startTranslated.y - centerTranslated.y) / yradius)\r\n      let theta1 = vec1.angleRadians()\r\n      let theta2 = vec2.angleRadians()\r\n      let deltatheta = theta2 - theta1\r\n      deltatheta = deltatheta % (2 * Math.PI)\r\n      if ((!sweepFlag) && (deltatheta > 0)) {\r\n        deltatheta -= 2 * Math.PI\r\n      } else if ((sweepFlag) && (deltatheta < 0)) {\r\n        deltatheta += 2 * Math.PI\r\n      }\r\n\r\n            // Ok, we have the center point and angle range (from theta1, deltatheta radians) so we can create the ellipse\r\n      let numsteps = Math.ceil(Math.abs(deltatheta) / (2 * Math.PI) * resolution) + 1\r\n      if (numsteps < 1) numsteps = 1\r\n      for (let step = 1; step <= numsteps; step++) {\r\n        let theta = theta1 + step / numsteps * deltatheta\r\n        let costheta = Math.cos(theta)\r\n        let sintheta = Math.sin(theta)\r\n                // F.6.3.1:\r\n        let point = new Vector2D(cosphi * xradius * costheta - sinphi * yradius * sintheta, sinphi * xradius * costheta + cosphi * yradius * sintheta).plus(center)\r\n        newpoints.push(point)\r\n      }\r\n    }\r\n    newpoints = this.points.concat(newpoints)\r\n    let result = new Path2D(newpoints)\r\n    return result\r\n  }\r\n}\r\n\r\nmodule.exports = Path2D\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Path2.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/math/Plane.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Plane.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector3D = __webpack_require__(/*! ./Vector3 */ \"../../convert/jscad/src/core/math/Vector3.js\")\r\nconst Line3D = __webpack_require__(/*! ./Line3 */ \"../../convert/jscad/src/core/math/Line3.js\")\r\nconst {EPS, getTag} = __webpack_require__(/*! ../constants */ \"../../convert/jscad/src/core/constants.js\")\r\n\r\n// # class Plane\r\n// Represents a plane in 3D space.\r\nconst Plane = function (normal, w) {\r\n  this.normal = normal\r\n  this.w = w\r\n}\r\n\r\n// create from an untyped object with identical property names:\r\nPlane.fromObject = function (obj) {\r\n  let normal = new Vector3D(obj.normal)\r\n  let w = parseFloat(obj.w)\r\n  return new Plane(normal, w)\r\n}\r\n\r\nPlane.fromVector3Ds = function (a, b, c) {\r\n  let n = b.minus(a).cross(c.minus(a)).unit()\r\n  return new Plane(n, n.dot(a))\r\n}\r\n\r\n// like fromVector3Ds, but allow the vectors to be on one point or one line\r\n// in such a case a random plane through the given points is constructed\r\nPlane.anyPlaneFromVector3Ds = function (a, b, c) {\r\n  let v1 = b.minus(a)\r\n  let v2 = c.minus(a)\r\n  if (v1.length() < EPS) {\r\n    v1 = v2.randomNonParallelVector()\r\n  }\r\n  if (v2.length() < EPS) {\r\n    v2 = v1.randomNonParallelVector()\r\n  }\r\n  let normal = v1.cross(v2)\r\n  if (normal.length() < EPS) {\r\n        // this would mean that v1 == v2.negated()\r\n    v2 = v1.randomNonParallelVector()\r\n    normal = v1.cross(v2)\r\n  }\r\n  normal = normal.unit()\r\n  return new Plane(normal, normal.dot(a))\r\n}\r\n\r\nPlane.fromPoints = function (a, b, c) {\r\n  a = new Vector3D(a)\r\n  b = new Vector3D(b)\r\n  c = new Vector3D(c)\r\n  return Plane.fromVector3Ds(a, b, c)\r\n}\r\n\r\nPlane.fromNormalAndPoint = function (normal, point) {\r\n  normal = new Vector3D(normal)\r\n  point = new Vector3D(point)\r\n  normal = normal.unit()\r\n  let w = point.dot(normal)\r\n  return new Plane(normal, w)\r\n}\r\n\r\nPlane.prototype = {\r\n  flipped: function () {\r\n    return new Plane(this.normal.negated(), -this.w)\r\n  },\r\n\r\n  getTag: function () {\r\n    let result = this.tag\r\n    if (!result) {\r\n      result = getTag()\r\n      this.tag = result\r\n    }\r\n    return result\r\n  },\r\n\r\n  equals: function (n) {\r\n    return this.normal.equals(n.normal) && this.w === n.w\r\n  },\r\n\r\n  transform: function (matrix4x4) {\r\n    let ismirror = matrix4x4.isMirroring()\r\n        // get two vectors in the plane:\r\n    let r = this.normal.randomNonParallelVector()\r\n    let u = this.normal.cross(r)\r\n    let v = this.normal.cross(u)\r\n        // get 3 points in the plane:\r\n    let point1 = this.normal.times(this.w)\r\n    let point2 = point1.plus(u)\r\n    let point3 = point1.plus(v)\r\n        // transform the points:\r\n    point1 = point1.multiply4x4(matrix4x4)\r\n    point2 = point2.multiply4x4(matrix4x4)\r\n    point3 = point3.multiply4x4(matrix4x4)\r\n        // and create a new plane from the transformed points:\r\n    let newplane = Plane.fromVector3Ds(point1, point2, point3)\r\n    if (ismirror) {\r\n            // the transform is mirroring\r\n            // We should mirror the plane:\r\n      newplane = newplane.flipped()\r\n    }\r\n    return newplane\r\n  },\r\n\r\n    // robust splitting of a line by a plane\r\n    // will work even if the line is parallel to the plane\r\n  splitLineBetweenPoints: function (p1, p2) {\r\n    let direction = p2.minus(p1)\r\n    let labda = (this.w - this.normal.dot(p1)) / this.normal.dot(direction)\r\n    if (isNaN(labda)) labda = 0\r\n    if (labda > 1) labda = 1\r\n    if (labda < 0) labda = 0\r\n    let result = p1.plus(direction.times(labda))\r\n    return result\r\n  },\r\n\r\n    // returns Vector3D\r\n  intersectWithLine: function (line3d) {\r\n    return line3d.intersectWithPlane(this)\r\n  },\r\n\r\n    // intersection of two planes\r\n  intersectWithPlane: function (plane) {\r\n    return Line3D.fromPlanes(this, plane)\r\n  },\r\n\r\n  signedDistanceToPoint: function (point) {\r\n    let t = this.normal.dot(point) - this.w\r\n    return t\r\n  },\r\n\r\n  toString: function () {\r\n    return '[normal: ' + this.normal.toString() + ', w: ' + this.w + ']'\r\n  },\r\n\r\n  mirrorPoint: function (point3d) {\r\n    let distance = this.signedDistanceToPoint(point3d)\r\n    let mirrored = point3d.minus(this.normal.times(distance * 2.0))\r\n    return mirrored\r\n  }\r\n}\r\n\r\nmodule.exports = Plane\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Plane.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/math/Polygon2.js":
/*!************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Polygon2.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const CAG = __webpack_require__(/*! ../CAG */ \"../../convert/jscad/src/core/CAG.js\")\r\nconst {fromPoints} = __webpack_require__(/*! ../CAGFactories */ \"../../convert/jscad/src/core/CAGFactories.js\")\r\n\r\n/*\r\n2D polygons are now supported through the CAG class.\r\nWith many improvements (see documentation):\r\n  - shapes do no longer have to be convex\r\n  - union/intersect/subtract is supported\r\n  - expand / contract are supported\r\n\r\nBut we'll keep CSG.Polygon2D as a stub for backwards compatibility\r\n*/\r\nfunction Polygon2D (points) {\r\n  const cag = fromPoints(points)\r\n  this.sides = cag.sides\r\n}\r\n\r\nPolygon2D.prototype = CAG.prototype\r\n\r\nmodule.exports = Polygon2D\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Polygon2.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/math/Polygon3.js":
/*!************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Polygon3.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector3D = __webpack_require__(/*! ./Vector3 */ \"../../convert/jscad/src/core/math/Vector3.js\")\r\nconst Vertex = __webpack_require__(/*! ./Vertex3 */ \"../../convert/jscad/src/core/math/Vertex3.js\")\r\nconst Matrix4x4 = __webpack_require__(/*! ./Matrix4 */ \"../../convert/jscad/src/core/math/Matrix4.js\")\r\nconst {_CSGDEBUG, EPS, getTag, areaEPS} = __webpack_require__(/*! ../constants */ \"../../convert/jscad/src/core/constants.js\")\r\n\r\n/** Class Polygon\r\n * Represents a convex polygon. The vertices used to initialize a polygon must\r\n *   be coplanar and form a convex loop. They do not have to be `Vertex`\r\n *   instances but they must behave similarly (duck typing can be used for\r\n *   customization).\r\n * <br>\r\n * Each convex polygon has a `shared` property, which is shared between all\r\n *   polygons that are clones of each other or were split from the same polygon.\r\n *   This can be used to define per-polygon properties (such as surface color).\r\n * <br>\r\n * The plane of the polygon is calculated from the vertex coordinates if not provided.\r\n *   The plane can alternatively be passed as the third argument to avoid calculations.\r\n *\r\n * @constructor\r\n * @param {Vertex[]} vertices - list of vertices\r\n * @param {Polygon.Shared} [shared=defaultShared] - shared property to apply\r\n * @param {Plane} [plane] - plane of the polygon\r\n *\r\n * @example\r\n * const vertices = [\r\n *   new CSG.Vertex(new CSG.Vector3D([0, 0, 0])),\r\n *   new CSG.Vertex(new CSG.Vector3D([0, 10, 0])),\r\n *   new CSG.Vertex(new CSG.Vector3D([0, 10, 10]))\r\n * ]\r\n * let observed = new Polygon(vertices)\r\n */\r\nlet Polygon = function (vertices, shared, plane) {\r\n  this.vertices = vertices\r\n  if (!shared) shared = Polygon.defaultShared\r\n  this.shared = shared\r\n    // let numvertices = vertices.length;\r\n\r\n  if (arguments.length >= 3) {\r\n    this.plane = plane\r\n  } else {\r\n    const Plane = __webpack_require__(/*! ./Plane */ \"../../convert/jscad/src/core/math/Plane.js\") // FIXME: circular dependencies\r\n    this.plane = Plane.fromVector3Ds(vertices[0].pos, vertices[1].pos, vertices[2].pos)\r\n  }\r\n\r\n  if (_CSGDEBUG) {\r\n    if (!this.checkIfConvex()) {\r\n      throw new Error('Not convex!')\r\n    }\r\n  }\r\n}\r\n\r\nPolygon.prototype = {\r\n  /** Check whether the polygon is convex. (it should be, otherwise we will get unexpected results)\r\n   * @returns {boolean}\r\n   */\r\n  checkIfConvex: function () {\r\n    return Polygon.verticesConvex(this.vertices, this.plane.normal)\r\n  },\r\n\r\n  // FIXME what? why does this return this, and not a new polygon?\r\n  // FIXME is this used?\r\n  setColor: function (args) {\r\n    let newshared = Polygon.Shared.fromColor.apply(this, arguments)\r\n    this.shared = newshared\r\n    return this\r\n  },\r\n\r\n  getSignedVolume: function () {\r\n    let signedVolume = 0\r\n    for (let i = 0; i < this.vertices.length - 2; i++) {\r\n      signedVolume += this.vertices[0].pos.dot(this.vertices[i + 1].pos\r\n                .cross(this.vertices[i + 2].pos))\r\n    }\r\n    signedVolume /= 6\r\n    return signedVolume\r\n  },\r\n\r\n    // Note: could calculate vectors only once to speed up\r\n  getArea: function () {\r\n    let polygonArea = 0\r\n    for (let i = 0; i < this.vertices.length - 2; i++) {\r\n      polygonArea += this.vertices[i + 1].pos.minus(this.vertices[0].pos)\r\n                .cross(this.vertices[i + 2].pos.minus(this.vertices[i + 1].pos)).length()\r\n    }\r\n    polygonArea /= 2\r\n    return polygonArea\r\n  },\r\n\r\n    // accepts array of features to calculate\r\n    // returns array of results\r\n  getTetraFeatures: function (features) {\r\n    let result = []\r\n    features.forEach(function (feature) {\r\n      if (feature === 'volume') {\r\n        result.push(this.getSignedVolume())\r\n      } else if (feature === 'area') {\r\n        result.push(this.getArea())\r\n      }\r\n    }, this)\r\n    return result\r\n  },\r\n\r\n    // Extrude a polygon into the direction offsetvector\r\n    // Returns a CSG object\r\n  extrude: function (offsetvector) {\r\n    const {fromPolygons} = __webpack_require__(/*! ../CSGFactories */ \"../../convert/jscad/src/core/CSGFactories.js\") // because of circular dependencies\r\n\r\n    let newpolygons = []\r\n\r\n    let polygon1 = this\r\n    let direction = polygon1.plane.normal.dot(offsetvector)\r\n    if (direction > 0) {\r\n      polygon1 = polygon1.flipped()\r\n    }\r\n    newpolygons.push(polygon1)\r\n    let polygon2 = polygon1.translate(offsetvector)\r\n    let numvertices = this.vertices.length\r\n    for (let i = 0; i < numvertices; i++) {\r\n      let sidefacepoints = []\r\n      let nexti = (i < (numvertices - 1)) ? i + 1 : 0\r\n      sidefacepoints.push(polygon1.vertices[i].pos)\r\n      sidefacepoints.push(polygon2.vertices[i].pos)\r\n      sidefacepoints.push(polygon2.vertices[nexti].pos)\r\n      sidefacepoints.push(polygon1.vertices[nexti].pos)\r\n      let sidefacepolygon = Polygon.createFromPoints(sidefacepoints, this.shared)\r\n      newpolygons.push(sidefacepolygon)\r\n    }\r\n    polygon2 = polygon2.flipped()\r\n    newpolygons.push(polygon2)\r\n    return fromPolygons(newpolygons)\r\n  },\r\n\r\n  translate: function (offset) {\r\n    return this.transform(Matrix4x4.translation(offset))\r\n  },\r\n\r\n    // returns an array with a Vector3D (center point) and a radius\r\n  boundingSphere: function () {\r\n    if (!this.cachedBoundingSphere) {\r\n      let box = this.boundingBox()\r\n      let middle = box[0].plus(box[1]).times(0.5)\r\n      let radius3 = box[1].minus(middle)\r\n      let radius = radius3.length()\r\n      this.cachedBoundingSphere = [middle, radius]\r\n    }\r\n    return this.cachedBoundingSphere\r\n  },\r\n\r\n    // returns an array of two Vector3Ds (minimum coordinates and maximum coordinates)\r\n  boundingBox: function () {\r\n    if (!this.cachedBoundingBox) {\r\n      let minpoint, maxpoint\r\n      let vertices = this.vertices\r\n      let numvertices = vertices.length\r\n      if (numvertices === 0) {\r\n        minpoint = new Vector3D(0, 0, 0)\r\n      } else {\r\n        minpoint = vertices[0].pos\r\n      }\r\n      maxpoint = minpoint\r\n      for (let i = 1; i < numvertices; i++) {\r\n        let point = vertices[i].pos\r\n        minpoint = minpoint.min(point)\r\n        maxpoint = maxpoint.max(point)\r\n      }\r\n      this.cachedBoundingBox = [minpoint, maxpoint]\r\n    }\r\n    return this.cachedBoundingBox\r\n  },\r\n\r\n  flipped: function () {\r\n    let newvertices = this.vertices.map(function (v) {\r\n      return v.flipped()\r\n    })\r\n    newvertices.reverse()\r\n    let newplane = this.plane.flipped()\r\n    return new Polygon(newvertices, this.shared, newplane)\r\n  },\r\n\r\n    // Affine transformation of polygon. Returns a new Polygon\r\n  transform: function (matrix4x4) {\r\n    let newvertices = this.vertices.map(function (v) {\r\n      return v.transform(matrix4x4)\r\n    })\r\n    let newplane = this.plane.transform(matrix4x4)\r\n    if (matrix4x4.isMirroring()) {\r\n            // need to reverse the vertex order\r\n            // in order to preserve the inside/outside orientation:\r\n      newvertices.reverse()\r\n    }\r\n    return new Polygon(newvertices, this.shared, newplane)\r\n  },\r\n\r\n  toString: function () {\r\n    let result = 'Polygon plane: ' + this.plane.toString() + '\\n'\r\n    this.vertices.map(function (vertex) {\r\n      result += '  ' + vertex.toString() + '\\n'\r\n    })\r\n    return result\r\n  },\r\n\r\n    // project the 3D polygon onto a plane\r\n  projectToOrthoNormalBasis: function (orthobasis) {\r\n    const CAG = __webpack_require__(/*! ../CAG */ \"../../convert/jscad/src/core/CAG.js\")\r\n    const {fromPointsNoCheck} = __webpack_require__(/*! ../CAGFactories */ \"../../convert/jscad/src/core/CAGFactories.js\") // circular dependencies\r\n    let points2d = this.vertices.map(function (vertex) {\r\n      return orthobasis.to2D(vertex.pos)\r\n    })\r\n\r\n    let result = fromPointsNoCheck(points2d)\r\n    let area = result.area()\r\n    if (Math.abs(area) < areaEPS) {\r\n      // the polygon was perpendicular to the orthnormal plane. The resulting 2D polygon would be degenerate\r\n      // return an empty area instead:\r\n      result = new CAG()\r\n    } else if (area < 0) {\r\n      result = result.flipped()\r\n    }\r\n    return result\r\n  },\r\n\r\n  // ALIAS ONLY!!\r\n  solidFromSlices: function (options) {\r\n    const solidFromSlices = __webpack_require__(/*! ../../api/solidFromSlices */ \"../../convert/jscad/src/api/solidFromSlices.js\")\r\n    return solidFromSlices(this, options)\r\n  }\r\n\r\n}\r\n\r\n// create from an untyped object with identical property names:\r\nPolygon.fromObject = function (obj) {\r\n  const Plane = __webpack_require__(/*! ./Plane */ \"../../convert/jscad/src/core/math/Plane.js\") // FIXME: circular dependencies\r\n  let vertices = obj.vertices.map(function (v) {\r\n    return Vertex.fromObject(v)\r\n  })\r\n  let shared = Polygon.Shared.fromObject(obj.shared)\r\n  let plane = Plane.fromObject(obj.plane)\r\n  return new Polygon(vertices, shared, plane)\r\n}\r\n\r\n/** Create a polygon from the given points.\r\n *\r\n * @param {Array[]} points - list of points\r\n * @param {Polygon.Shared} [shared=defaultShared] - shared property to apply\r\n * @param {Plane} [plane] - plane of the polygon\r\n *\r\n * @example\r\n * const points = [\r\n *   [0,  0, 0],\r\n *   [0, 10, 0],\r\n *   [0, 10, 10]\r\n * ]\r\n * let observed = CSG.Polygon.createFromPoints(points)\r\n */\r\nPolygon.createFromPoints = function (points, shared, plane) {\r\n  // FIXME : this circular dependency does not work !\r\n  // const {fromPoints} = require('./polygon3Factories')\r\n  // return fromPoints(points, shared, plane)\r\n  let vertices = []\r\n  points.map(function (p) {\r\n    let vec = new Vector3D(p)\r\n    let vertex = new Vertex(vec)\r\n    vertices.push(vertex)\r\n  })\r\n  let polygon\r\n  if (arguments.length < 3) {\r\n    polygon = new Polygon(vertices, shared)\r\n  } else {\r\n    polygon = new Polygon(vertices, shared, plane)\r\n  }\r\n  return polygon\r\n}\r\n\r\nPolygon.verticesConvex = function (vertices, planenormal) {\r\n  let numvertices = vertices.length\r\n  if (numvertices > 2) {\r\n    let prevprevpos = vertices[numvertices - 2].pos\r\n    let prevpos = vertices[numvertices - 1].pos\r\n    for (let i = 0; i < numvertices; i++) {\r\n      let pos = vertices[i].pos\r\n      if (!Polygon.isConvexPoint(prevprevpos, prevpos, pos, planenormal)) {\r\n        return false\r\n      }\r\n      prevprevpos = prevpos\r\n      prevpos = pos\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\n// calculate whether three points form a convex corner\r\n//  prevpoint, point, nextpoint: the 3 coordinates (Vector3D instances)\r\n//  normal: the normal vector of the plane\r\nPolygon.isConvexPoint = function (prevpoint, point, nextpoint, normal) {\r\n  let crossproduct = point.minus(prevpoint).cross(nextpoint.minus(point))\r\n  let crossdotnormal = crossproduct.dot(normal)\r\n  return (crossdotnormal >= 0)\r\n}\r\n\r\nPolygon.isStrictlyConvexPoint = function (prevpoint, point, nextpoint, normal) {\r\n  let crossproduct = point.minus(prevpoint).cross(nextpoint.minus(point))\r\n  let crossdotnormal = crossproduct.dot(normal)\r\n  return (crossdotnormal >= EPS)\r\n}\r\n\r\n/** Class Polygon.Shared\r\n * Holds the shared properties for each polygon (Currently only color).\r\n * @constructor\r\n * @param {Array[]} color - array containing RGBA values, or null\r\n *\r\n * @example\r\n *   let shared = new CSG.Polygon.Shared([0, 0, 0, 1])\r\n */\r\nPolygon.Shared = function (color) {\r\n  if (color !== null && color !== undefined) {\r\n    if (color.length !== 4) {\r\n      throw new Error('Expecting 4 element array')\r\n    }\r\n  }\r\n  this.color = color\r\n}\r\n\r\nPolygon.Shared.fromObject = function (obj) {\r\n  return new Polygon.Shared(obj.color)\r\n}\r\n\r\n/** Create Polygon.Shared from color values.\r\n * @param {number} r - value of RED component\r\n * @param {number} g - value of GREEN component\r\n * @param {number} b - value of BLUE component\r\n * @param {number} [a] - value of ALPHA component\r\n * @param {Array[]} [color] - OR array containing RGB values (optional Alpha)\r\n *\r\n * @example\r\n * let s1 = Polygon.Shared.fromColor(0,0,0)\r\n * let s2 = Polygon.Shared.fromColor([0,0,0,1])\r\n */\r\nPolygon.Shared.fromColor = function (args) {\r\n  let color\r\n  if (arguments.length === 1) {\r\n    color = arguments[0].slice() // make deep copy\r\n  } else {\r\n    color = []\r\n    for (let i = 0; i < arguments.length; i++) {\r\n      color.push(arguments[i])\r\n    }\r\n  }\r\n  if (color.length === 3) {\r\n    color.push(1)\r\n  } else if (color.length !== 4) {\r\n    throw new Error('setColor expects either an array with 3 or 4 elements, or 3 or 4 parameters.')\r\n  }\r\n  return new Polygon.Shared(color)\r\n}\r\n\r\nPolygon.Shared.prototype = {\r\n  getTag: function () {\r\n    let result = this.tag\r\n    if (!result) {\r\n      result = getTag()\r\n      this.tag = result\r\n    }\r\n    return result\r\n  },\r\n    // get a string uniquely identifying this object\r\n  getHash: function () {\r\n    if (!this.color) return 'null'\r\n    return this.color.join('/')\r\n  }\r\n}\r\n\r\nPolygon.defaultShared = new Polygon.Shared(null)\r\n\r\nmodule.exports = Polygon\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Polygon3.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/math/Side.js":
/*!********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Side.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector2D = __webpack_require__(/*! ./Vector2 */ \"../../convert/jscad/src/core/math/Vector2.js\")\r\nconst Vertex = __webpack_require__(/*! ./Vertex2 */ \"../../convert/jscad/src/core/math/Vertex2.js\")\r\nconst Vertex3 = __webpack_require__(/*! ./Vertex3 */ \"../../convert/jscad/src/core/math/Vertex3.js\")\r\nconst Polygon = __webpack_require__(/*! ./Polygon3 */ \"../../convert/jscad/src/core/math/Polygon3.js\")\r\nconst {getTag} = __webpack_require__(/*! ../constants */ \"../../convert/jscad/src/core/constants.js\")\r\n\r\nconst Side = function (vertex0, vertex1) {\r\n  if (!(vertex0 instanceof Vertex)) throw new Error('Assertion failed')\r\n  if (!(vertex1 instanceof Vertex)) throw new Error('Assertion failed')\r\n  this.vertex0 = vertex0\r\n  this.vertex1 = vertex1\r\n}\r\n\r\nSide.fromObject = function (obj) {\r\n  var vertex0 = Vertex.fromObject(obj.vertex0)\r\n  var vertex1 = Vertex.fromObject(obj.vertex1)\r\n  return new Side(vertex0, vertex1)\r\n}\r\n\r\nSide._fromFakePolygon = function (polygon) {\r\n    // this can happen based on union, seems to be residuals -\r\n    // return null and handle in caller\r\n  if (polygon.vertices.length < 4) {\r\n    return null\r\n  }\r\n  var vert1Indices = []\r\n  var pts2d = polygon.vertices.filter(function (v, i) {\r\n    if (v.pos.z > 0) {\r\n      vert1Indices.push(i)\r\n      return true\r\n    }\r\n    return false\r\n  })\r\n    .map(function (v) {\r\n      return new Vector2D(v.pos.x, v.pos.y)\r\n    })\r\n  if (pts2d.length !== 2) {\r\n    throw new Error('Assertion failed: _fromFakePolygon: not enough points found')\r\n  }\r\n  var d = vert1Indices[1] - vert1Indices[0]\r\n  if (d === 1 || d === 3) {\r\n    if (d === 1) {\r\n      pts2d.reverse()\r\n    }\r\n  } else {\r\n    throw new Error('Assertion failed: _fromFakePolygon: unknown index ordering')\r\n  }\r\n  var result = new Side(new Vertex(pts2d[0]), new Vertex(pts2d[1]))\r\n  return result\r\n}\r\n\r\nSide.prototype = {\r\n  toString: function () {\r\n    return this.vertex0 + ' -> ' + this.vertex1\r\n  },\r\n\r\n  toPolygon3D: function (z0, z1) {\r\n    // console.log(this.vertex0.pos)\r\n    const vertices = [\r\n      new Vertex3(this.vertex0.pos.toVector3D(z0)),\r\n      new Vertex3(this.vertex1.pos.toVector3D(z0)),\r\n      new Vertex3(this.vertex1.pos.toVector3D(z1)),\r\n      new Vertex3(this.vertex0.pos.toVector3D(z1))\r\n    ]\r\n    return new Polygon(vertices)\r\n  },\r\n\r\n  transform: function (matrix4x4) {\r\n    var newp1 = this.vertex0.pos.transform(matrix4x4)\r\n    var newp2 = this.vertex1.pos.transform(matrix4x4)\r\n    return new Side(new Vertex(newp1), new Vertex(newp2))\r\n  },\r\n\r\n  flipped: function () {\r\n    return new Side(this.vertex1, this.vertex0)\r\n  },\r\n\r\n  direction: function () {\r\n    return this.vertex1.pos.minus(this.vertex0.pos)\r\n  },\r\n\r\n  getTag: function () {\r\n    var result = this.tag\r\n    if (!result) {\r\n      result = getTag()\r\n      this.tag = result\r\n    }\r\n    return result\r\n  },\r\n\r\n  lengthSquared: function () {\r\n    let x = this.vertex1.pos.x - this.vertex0.pos.x\r\n    let y = this.vertex1.pos.y - this.vertex0.pos.y\r\n    return x * x + y * y\r\n  },\r\n\r\n  length: function () {\r\n    return Math.sqrt(this.lengthSquared())\r\n  }\r\n}\r\n\r\nmodule.exports = Side\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Side.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/math/Vector2.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Vector2.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {IsFloat} = __webpack_require__(/*! ../utils */ \"../../convert/jscad/src/core/utils.js\")\r\n\r\n/** Class Vector2D\r\n * Represents a 2D vector with X, Y coordinates\r\n * @constructor\r\n *\r\n * @example\r\n * new CSG.Vector2D(1, 2);\r\n * new CSG.Vector2D([1, 2]);\r\n * new CSG.Vector2D({ x: 1, y: 2});\r\n */\r\nconst Vector2D = function (x, y) {\r\n  if (arguments.length === 2) {\r\n    this._x = parseFloat(x)\r\n    this._y = parseFloat(y)\r\n  } else {\r\n    var ok = true\r\n    if (arguments.length === 1) {\r\n      if (typeof (x) === 'object') {\r\n        if (x instanceof Vector2D) {\r\n          this._x = x._x\r\n          this._y = x._y\r\n        } else if (x instanceof Array) {\r\n          this._x = parseFloat(x[0])\r\n          this._y = parseFloat(x[1])\r\n        } else if (('x' in x) && ('y' in x)) {\r\n          this._x = parseFloat(x.x)\r\n          this._y = parseFloat(x.y)\r\n        } else ok = false\r\n      } else {\r\n        var v = parseFloat(x)\r\n        this._x = v\r\n        this._y = v\r\n      }\r\n    } else ok = false\r\n    if (ok) {\r\n      if ((!IsFloat(this._x)) || (!IsFloat(this._y))) ok = false\r\n    }\r\n    if (!ok) {\r\n      throw new Error('wrong arguments')\r\n    }\r\n  }\r\n}\r\n\r\nVector2D.fromAngle = function (radians) {\r\n  return Vector2D.fromAngleRadians(radians)\r\n}\r\n\r\nVector2D.fromAngleDegrees = function (degrees) {\r\n  var radians = Math.PI * degrees / 180\r\n  return Vector2D.fromAngleRadians(radians)\r\n}\r\n\r\nVector2D.fromAngleRadians = function (radians) {\r\n  return Vector2D.Create(Math.cos(radians), Math.sin(radians))\r\n}\r\n\r\n// This does the same as new Vector2D(x,y) but it doesn't go through the constructor\r\n// and the parameters are not validated. Is much faster.\r\nVector2D.Create = function (x, y) {\r\n  var result = Object.create(Vector2D.prototype)\r\n  result._x = x\r\n  result._y = y\r\n  return result\r\n}\r\n\r\nVector2D.prototype = {\r\n  get x () {\r\n    return this._x\r\n  },\r\n  get y () {\r\n    return this._y\r\n  },\r\n\r\n  set x (v) {\r\n    throw new Error('Vector2D is immutable')\r\n  },\r\n  set y (v) {\r\n    throw new Error('Vector2D is immutable')\r\n  },\r\n\r\n  // extend to a 3D vector by adding a z coordinate:\r\n  toVector3D: function (z) {\r\n    const Vector3D = __webpack_require__(/*! ./Vector3 */ \"../../convert/jscad/src/core/math/Vector3.js\") // FIXME: circular dependencies Vector2 => Vector3 => Vector2\r\n    return new Vector3D(this._x, this._y, z)\r\n  },\r\n\r\n  equals: function (a) {\r\n    return (this._x === a._x) && (this._y === a._y)\r\n  },\r\n\r\n  clone: function () {\r\n    return Vector2D.Create(this._x, this._y)\r\n  },\r\n\r\n  negated: function () {\r\n    return Vector2D.Create(-this._x, -this._y)\r\n  },\r\n\r\n  plus: function (a) {\r\n    return Vector2D.Create(this._x + a._x, this._y + a._y)\r\n  },\r\n\r\n  minus: function (a) {\r\n    return Vector2D.Create(this._x - a._x, this._y - a._y)\r\n  },\r\n\r\n  times: function (a) {\r\n    return Vector2D.Create(this._x * a, this._y * a)\r\n  },\r\n\r\n  dividedBy: function (a) {\r\n    return Vector2D.Create(this._x / a, this._y / a)\r\n  },\r\n\r\n  dot: function (a) {\r\n    return this._x * a._x + this._y * a._y\r\n  },\r\n\r\n  lerp: function (a, t) {\r\n    return this.plus(a.minus(this).times(t))\r\n  },\r\n\r\n  length: function () {\r\n    return Math.sqrt(this.dot(this))\r\n  },\r\n\r\n  distanceTo: function (a) {\r\n    return this.minus(a).length()\r\n  },\r\n\r\n  distanceToSquared: function (a) {\r\n    return this.minus(a).lengthSquared()\r\n  },\r\n\r\n  lengthSquared: function () {\r\n    return this.dot(this)\r\n  },\r\n\r\n  unit: function () {\r\n    return this.dividedBy(this.length())\r\n  },\r\n\r\n  cross: function (a) {\r\n    return this._x * a._y - this._y * a._x\r\n  },\r\n\r\n    // returns the vector rotated by 90 degrees clockwise\r\n  normal: function () {\r\n    return Vector2D.Create(this._y, -this._x)\r\n  },\r\n\r\n    // Right multiply by a 4x4 matrix (the vector is interpreted as a row vector)\r\n    // Returns a new Vector2D\r\n  multiply4x4: function (matrix4x4) {\r\n    return matrix4x4.leftMultiply1x2Vector(this)\r\n  },\r\n\r\n  transform: function (matrix4x4) {\r\n    return matrix4x4.leftMultiply1x2Vector(this)\r\n  },\r\n\r\n  angle: function () {\r\n    return this.angleRadians()\r\n  },\r\n\r\n  angleDegrees: function () {\r\n    var radians = this.angleRadians()\r\n    return 180 * radians / Math.PI\r\n  },\r\n\r\n  angleRadians: function () {\r\n        // y=sin, x=cos\r\n    return Math.atan2(this._y, this._x)\r\n  },\r\n\r\n  min: function (p) {\r\n    return Vector2D.Create(\r\n            Math.min(this._x, p._x), Math.min(this._y, p._y))\r\n  },\r\n\r\n  max: function (p) {\r\n    return Vector2D.Create(\r\n            Math.max(this._x, p._x), Math.max(this._y, p._y))\r\n  },\r\n\r\n  toString: function () {\r\n    return '(' + this._x.toFixed(5) + ', ' + this._y.toFixed(5) + ')'\r\n  },\r\n\r\n  abs: function () {\r\n    return Vector2D.Create(Math.abs(this._x), Math.abs(this._y))\r\n  }\r\n}\r\n\r\nmodule.exports = Vector2D\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Vector2.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/math/Vector3.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Vector3.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {IsFloat} = __webpack_require__(/*! ../utils */ \"../../convert/jscad/src/core/utils.js\")\r\nconst Vector2D = __webpack_require__(/*! ./Vector2 */ \"../../convert/jscad/src/core/math/Vector2.js\")\r\n\r\n/** Class Vector3D\r\n * Represents a 3D vector with X, Y, Z coordinates.\r\n * @constructor\r\n *\r\n * @example\r\n * new CSG.Vector3D(1, 2, 3);\r\n * new CSG.Vector3D([1, 2, 3]);\r\n * new CSG.Vector3D({ x: 1, y: 2, z: 3 });\r\n * new CSG.Vector3D(1, 2); // assumes z=0\r\n * new CSG.Vector3D([1, 2]); // assumes z=0\r\n */\r\nconst Vector3D = function (x, y, z) {\r\n  if (arguments.length === 3) {\r\n    this._x = parseFloat(x)\r\n    this._y = parseFloat(y)\r\n    this._z = parseFloat(z)\r\n  } else if (arguments.length === 2) {\r\n    this._x = parseFloat(x)\r\n    this._y = parseFloat(y)\r\n    this._z = 0\r\n  } else {\r\n    var ok = true\r\n    if (arguments.length === 1) {\r\n      if (typeof (x) === 'object') {\r\n        if (x instanceof Vector3D) {\r\n          this._x = x._x\r\n          this._y = x._y\r\n          this._z = x._z\r\n        } else if (x instanceof Vector2D) {\r\n          this._x = x._x\r\n          this._y = x._y\r\n          this._z = 0\r\n        } else if (x instanceof Array) {\r\n          if ((x.length < 2) || (x.length > 3)) {\r\n            ok = false\r\n          } else {\r\n            this._x = parseFloat(x[0])\r\n            this._y = parseFloat(x[1])\r\n            if (x.length === 3) {\r\n              this._z = parseFloat(x[2])\r\n            } else {\r\n              this._z = 0\r\n            }\r\n          }\r\n        } else if (('x' in x) && ('y' in x)) {\r\n          this._x = parseFloat(x.x)\r\n          this._y = parseFloat(x.y)\r\n          if ('z' in x) {\r\n            this._z = parseFloat(x.z)\r\n          } else {\r\n            this._z = 0\r\n          }\r\n        } else if (('_x' in x) && ('_y' in x)) {\r\n          this._x = parseFloat(x._x)\r\n          this._y = parseFloat(x._y)\r\n          if ('_z' in x) {\r\n            this._z = parseFloat(x._z)\r\n          } else {\r\n            this._z = 0\r\n          }\r\n        } else ok = false\r\n      } else {\r\n        var v = parseFloat(x)\r\n        this._x = v\r\n        this._y = v\r\n        this._z = v\r\n      }\r\n    } else ok = false\r\n    if (ok) {\r\n      if ((!IsFloat(this._x)) || (!IsFloat(this._y)) || (!IsFloat(this._z))) ok = false\r\n    } else {\r\n      throw new Error('wrong arguments')\r\n    }\r\n  }\r\n}\r\n\r\n// This does the same as new Vector3D(x,y,z) but it doesn't go through the constructor\r\n// and the parameters are not validated. Is much faster.\r\nVector3D.Create = function (x, y, z) {\r\n  var result = Object.create(Vector3D.prototype)\r\n  result._x = x\r\n  result._y = y\r\n  result._z = z\r\n  return result\r\n}\r\n\r\nVector3D.prototype = {\r\n  get x () {\r\n    return this._x\r\n  },\r\n  get y () {\r\n    return this._y\r\n  },\r\n  get z () {\r\n    return this._z\r\n  },\r\n\r\n  set x (v) {\r\n    throw new Error('Vector3D is immutable')\r\n  },\r\n  set y (v) {\r\n    throw new Error('Vector3D is immutable')\r\n  },\r\n  set z (v) {\r\n    throw new Error('Vector3D is immutable')\r\n  },\r\n\r\n  clone: function () {\r\n    return Vector3D.Create(this._x, this._y, this._z)\r\n  },\r\n\r\n  negated: function () {\r\n    return Vector3D.Create(-this._x, -this._y, -this._z)\r\n  },\r\n\r\n  abs: function () {\r\n    return Vector3D.Create(Math.abs(this._x), Math.abs(this._y), Math.abs(this._z))\r\n  },\r\n\r\n  plus: function (a) {\r\n    return Vector3D.Create(this._x + a._x, this._y + a._y, this._z + a._z)\r\n  },\r\n\r\n  minus: function (a) {\r\n    return Vector3D.Create(this._x - a._x, this._y - a._y, this._z - a._z)\r\n  },\r\n\r\n  times: function (a) {\r\n    return Vector3D.Create(this._x * a, this._y * a, this._z * a)\r\n  },\r\n\r\n  dividedBy: function (a) {\r\n    return Vector3D.Create(this._x / a, this._y / a, this._z / a)\r\n  },\r\n\r\n  dot: function (a) {\r\n    return this._x * a._x + this._y * a._y + this._z * a._z\r\n  },\r\n\r\n  lerp: function (a, t) {\r\n    return this.plus(a.minus(this).times(t))\r\n  },\r\n\r\n  lengthSquared: function () {\r\n    return this.dot(this)\r\n  },\r\n\r\n  length: function () {\r\n    return Math.sqrt(this.lengthSquared())\r\n  },\r\n\r\n  unit: function () {\r\n    return this.dividedBy(this.length())\r\n  },\r\n\r\n  cross: function (a) {\r\n    return Vector3D.Create(\r\n            this._y * a._z - this._z * a._y, this._z * a._x - this._x * a._z, this._x * a._y - this._y * a._x)\r\n  },\r\n\r\n  distanceTo: function (a) {\r\n    return this.minus(a).length()\r\n  },\r\n\r\n  distanceToSquared: function (a) {\r\n    return this.minus(a).lengthSquared()\r\n  },\r\n\r\n  equals: function (a) {\r\n    return (this._x === a._x) && (this._y === a._y) && (this._z === a._z)\r\n  },\r\n\r\n    // Right multiply by a 4x4 matrix (the vector is interpreted as a row vector)\r\n    // Returns a new Vector3D\r\n  multiply4x4: function (matrix4x4) {\r\n    return matrix4x4.leftMultiply1x3Vector(this)\r\n  },\r\n\r\n  transform: function (matrix4x4) {\r\n    return matrix4x4.leftMultiply1x3Vector(this)\r\n  },\r\n\r\n  toString: function () {\r\n    return '(' + this._x.toFixed(5) + ', ' + this._y.toFixed(5) + ', ' + this._z.toFixed(5) + ')'\r\n  },\r\n\r\n    // find a vector that is somewhat perpendicular to this one\r\n  randomNonParallelVector: function () {\r\n    var abs = this.abs()\r\n    if ((abs._x <= abs._y) && (abs._x <= abs._z)) {\r\n      return Vector3D.Create(1, 0, 0)\r\n    } else if ((abs._y <= abs._x) && (abs._y <= abs._z)) {\r\n      return Vector3D.Create(0, 1, 0)\r\n    } else {\r\n      return Vector3D.Create(0, 0, 1)\r\n    }\r\n  },\r\n\r\n  min: function (p) {\r\n    return Vector3D.Create(\r\n            Math.min(this._x, p._x), Math.min(this._y, p._y), Math.min(this._z, p._z))\r\n  },\r\n\r\n  max: function (p) {\r\n    return Vector3D.Create(\r\n            Math.max(this._x, p._x), Math.max(this._y, p._y), Math.max(this._z, p._z))\r\n  }\r\n}\r\n\r\nmodule.exports = Vector3D\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Vector3.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/math/Vertex2.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Vertex2.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector2D = __webpack_require__(/*! ./Vector2 */ \"../../convert/jscad/src/core/math/Vector2.js\")\r\nconst {getTag} = __webpack_require__(/*! ../constants */ \"../../convert/jscad/src/core/constants.js\")\r\n\r\nconst Vertex = function (pos) {\r\n  this.pos = pos\r\n}\r\n\r\nVertex.fromObject = function (obj) {\r\n  return new Vertex(new Vector2D(obj.pos._x, obj.pos._y))\r\n}\r\n\r\nVertex.prototype = {\r\n  toString: function () {\r\n    return '(' + this.pos.x.toFixed(5) + ',' + this.pos.y.toFixed(5) + ')'\r\n  },\r\n  getTag: function () {\r\n    var result = this.tag\r\n    if (!result) {\r\n      result = getTag()\r\n      this.tag = result\r\n    }\r\n    return result\r\n  }\r\n}\r\n\r\nmodule.exports = Vertex\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Vertex2.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/math/Vertex3.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Vertex3.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector3D = __webpack_require__(/*! ./Vector3 */ \"../../convert/jscad/src/core/math/Vector3.js\")\r\nconst {getTag} = __webpack_require__(/*! ../constants */ \"../../convert/jscad/src/core/constants.js\")\r\n\r\n// # class Vertex\r\n// Represents a vertex of a polygon. Use your own vertex class instead of this\r\n// one to provide additional features like texture coordinates and vertex\r\n// colors. Custom vertex classes need to provide a `pos` property\r\n// `flipped()`, and `interpolate()` methods that behave analogous to the ones\r\n// FIXME: And a lot MORE (see plane.fromVector3Ds for ex) ! This is fragile code\r\n// defined by `Vertex`.\r\nconst Vertex = function (pos) {\r\n  this.pos = pos\r\n}\r\n\r\n// create from an untyped object with identical property names:\r\nVertex.fromObject = function (obj) {\r\n  var pos = new Vector3D(obj.pos)\r\n  return new Vertex(pos)\r\n}\r\n\r\nVertex.prototype = {\r\n    // Return a vertex with all orientation-specific data (e.g. vertex normal) flipped. Called when the\r\n    // orientation of a polygon is flipped.\r\n  flipped: function () {\r\n    return this\r\n  },\r\n\r\n  getTag: function () {\r\n    var result = this.tag\r\n    if (!result) {\r\n      result = getTag()\r\n      this.tag = result\r\n    }\r\n    return result\r\n  },\r\n\r\n    // Create a new vertex between this vertex and `other` by linearly\r\n    // interpolating all properties using a parameter of `t`. Subclasses should\r\n    // override this to interpolate additional properties.\r\n  interpolate: function (other, t) {\r\n    var newpos = this.pos.lerp(other.pos, t)\r\n    return new Vertex(newpos)\r\n  },\r\n\r\n    // Affine transformation of vertex. Returns a new Vertex\r\n  transform: function (matrix4x4) {\r\n    var newpos = this.pos.multiply4x4(matrix4x4)\r\n    return new Vertex(newpos)\r\n  },\r\n\r\n  toString: function () {\r\n    return this.pos.toString()\r\n  }\r\n}\r\n\r\nmodule.exports = Vertex\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/Vertex3.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/math/lineUtils.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/lineUtils.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {EPS} = __webpack_require__(/*! ../constants */ \"../../convert/jscad/src/core/constants.js\")\r\nconst {solve2Linear} = __webpack_require__(/*! ../utils */ \"../../convert/jscad/src/core/utils.js\")\r\n\r\n// see if the line between p0start and p0end intersects with the line between p1start and p1end\r\n// returns true if the lines strictly intersect, the end points are not counted!\r\nconst linesIntersect = function (p0start, p0end, p1start, p1end) {\r\n  if (p0end.equals(p1start) || p1end.equals(p0start)) {\r\n    let d = p1end.minus(p1start).unit().plus(p0end.minus(p0start).unit()).length()\r\n    if (d < EPS) {\r\n      return true\r\n    }\r\n  } else {\r\n    let d0 = p0end.minus(p0start)\r\n    let d1 = p1end.minus(p1start)\r\n    // FIXME These epsilons need review and testing\r\n    if (Math.abs(d0.cross(d1)) < 1e-9) return false // lines are parallel\r\n    let alphas = solve2Linear(-d0.x, d1.x, -d0.y, d1.y, p0start.x - p1start.x, p0start.y - p1start.y)\r\n    if ((alphas[0] > 1e-6) && (alphas[0] < 0.999999) && (alphas[1] > 1e-5) && (alphas[1] < 0.999999)) return true\r\n    // if( (alphas[0] >= 0) && (alphas[0] <= 1) && (alphas[1] >= 0) && (alphas[1] <= 1) ) return true;\r\n  }\r\n  return false\r\n}\r\n\r\nmodule.exports = {linesIntersect}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/lineUtils.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/math/reTesselateCoplanarPolygons.js":
/*!*******************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/reTesselateCoplanarPolygons.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {EPS} = __webpack_require__(/*! ../constants */ \"../../convert/jscad/src/core/constants.js\")\r\nconst OrthoNormalBasis = __webpack_require__(/*! ./OrthoNormalBasis */ \"../../convert/jscad/src/core/math/OrthoNormalBasis.js\")\r\nconst {interpolateBetween2DPointsForY, insertSorted, fnNumberSort} = __webpack_require__(/*! ../utils */ \"../../convert/jscad/src/core/utils.js\")\r\nconst Vertex = __webpack_require__(/*! ./Vertex3 */ \"../../convert/jscad/src/core/math/Vertex3.js\")\r\nconst Vector2D = __webpack_require__(/*! ./Vector2 */ \"../../convert/jscad/src/core/math/Vector2.js\")\r\nconst Line2D = __webpack_require__(/*! ./Line2 */ \"../../convert/jscad/src/core/math/Line2.js\")\r\nconst Polygon = __webpack_require__(/*! ./Polygon3 */ \"../../convert/jscad/src/core/math/Polygon3.js\")\r\n\r\n// Retesselation function for a set of coplanar polygons. See the introduction at the top of\r\n// this file.\r\nconst reTesselateCoplanarPolygons = function (sourcepolygons, destpolygons) {\r\n  let numpolygons = sourcepolygons.length\r\n  if (numpolygons > 0) {\r\n    let plane = sourcepolygons[0].plane\r\n    let shared = sourcepolygons[0].shared\r\n    let orthobasis = new OrthoNormalBasis(plane)\r\n    let polygonvertices2d = [] // array of array of Vector2D\r\n    let polygontopvertexindexes = [] // array of indexes of topmost vertex per polygon\r\n    let topy2polygonindexes = {}\r\n    let ycoordinatetopolygonindexes = {}\r\n\r\n    let xcoordinatebins = {}\r\n    let ycoordinatebins = {}\r\n\r\n        // convert all polygon vertices to 2D\r\n        // Make a list of all encountered y coordinates\r\n        // And build a map of all polygons that have a vertex at a certain y coordinate:\r\n    let ycoordinateBinningFactor = 1.0 / EPS * 10\r\n    for (let polygonindex = 0; polygonindex < numpolygons; polygonindex++) {\r\n      let poly3d = sourcepolygons[polygonindex]\r\n      let vertices2d = []\r\n      let numvertices = poly3d.vertices.length\r\n      let minindex = -1\r\n      if (numvertices > 0) {\r\n        let miny, maxy, maxindex\r\n        for (let i = 0; i < numvertices; i++) {\r\n          let pos2d = orthobasis.to2D(poly3d.vertices[i].pos)\r\n                    // perform binning of y coordinates: If we have multiple vertices very\r\n                    // close to each other, give them the same y coordinate:\r\n          let ycoordinatebin = Math.floor(pos2d.y * ycoordinateBinningFactor)\r\n          let newy\r\n          if (ycoordinatebin in ycoordinatebins) {\r\n            newy = ycoordinatebins[ycoordinatebin]\r\n          } else if (ycoordinatebin + 1 in ycoordinatebins) {\r\n            newy = ycoordinatebins[ycoordinatebin + 1]\r\n          } else if (ycoordinatebin - 1 in ycoordinatebins) {\r\n            newy = ycoordinatebins[ycoordinatebin - 1]\r\n          } else {\r\n            newy = pos2d.y\r\n            ycoordinatebins[ycoordinatebin] = pos2d.y\r\n          }\r\n          pos2d = Vector2D.Create(pos2d.x, newy)\r\n          vertices2d.push(pos2d)\r\n          let y = pos2d.y\r\n          if ((i === 0) || (y < miny)) {\r\n            miny = y\r\n            minindex = i\r\n          }\r\n          if ((i === 0) || (y > maxy)) {\r\n            maxy = y\r\n            maxindex = i\r\n          }\r\n          if (!(y in ycoordinatetopolygonindexes)) {\r\n            ycoordinatetopolygonindexes[y] = {}\r\n          }\r\n          ycoordinatetopolygonindexes[y][polygonindex] = true\r\n        }\r\n        if (miny >= maxy) {\r\n                    // degenerate polygon, all vertices have same y coordinate. Just ignore it from now:\r\n          vertices2d = []\r\n          numvertices = 0\r\n          minindex = -1\r\n        } else {\r\n          if (!(miny in topy2polygonindexes)) {\r\n            topy2polygonindexes[miny] = []\r\n          }\r\n          topy2polygonindexes[miny].push(polygonindex)\r\n        }\r\n      } // if(numvertices > 0)\r\n            // reverse the vertex order:\r\n      vertices2d.reverse()\r\n      minindex = numvertices - minindex - 1\r\n      polygonvertices2d.push(vertices2d)\r\n      polygontopvertexindexes.push(minindex)\r\n    }\r\n    let ycoordinates = []\r\n    for (let ycoordinate in ycoordinatetopolygonindexes) ycoordinates.push(ycoordinate)\r\n    ycoordinates.sort(fnNumberSort)\r\n\r\n        // Now we will iterate over all y coordinates, from lowest to highest y coordinate\r\n        // activepolygons: source polygons that are 'active', i.e. intersect with our y coordinate\r\n        //   Is sorted so the polygons are in left to right order\r\n        // Each element in activepolygons has these properties:\r\n        //        polygonindex: the index of the source polygon (i.e. an index into the sourcepolygons\r\n        //                      and polygonvertices2d arrays)\r\n        //        leftvertexindex: the index of the vertex at the left side of the polygon (lowest x)\r\n        //                         that is at or just above the current y coordinate\r\n        //        rightvertexindex: dito at right hand side of polygon\r\n        //        topleft, bottomleft: coordinates of the left side of the polygon crossing the current y coordinate\r\n        //        topright, bottomright: coordinates of the right hand side of the polygon crossing the current y coordinate\r\n    let activepolygons = []\r\n    let prevoutpolygonrow = []\r\n    for (let yindex = 0; yindex < ycoordinates.length; yindex++) {\r\n      let newoutpolygonrow = []\r\n      let ycoordinate_as_string = ycoordinates[yindex]\r\n      let ycoordinate = Number(ycoordinate_as_string)\r\n\r\n            // update activepolygons for this y coordinate:\r\n            // - Remove any polygons that end at this y coordinate\r\n            // - update leftvertexindex and rightvertexindex (which point to the current vertex index\r\n            //   at the the left and right side of the polygon\r\n            // Iterate over all polygons that have a corner at this y coordinate:\r\n      let polygonindexeswithcorner = ycoordinatetopolygonindexes[ycoordinate_as_string]\r\n      for (let activepolygonindex = 0; activepolygonindex < activepolygons.length; ++activepolygonindex) {\r\n        let activepolygon = activepolygons[activepolygonindex]\r\n        let polygonindex = activepolygon.polygonindex\r\n        if (polygonindexeswithcorner[polygonindex]) {\r\n                    // this active polygon has a corner at this y coordinate:\r\n          let vertices2d = polygonvertices2d[polygonindex]\r\n          let numvertices = vertices2d.length\r\n          let newleftvertexindex = activepolygon.leftvertexindex\r\n          let newrightvertexindex = activepolygon.rightvertexindex\r\n                    // See if we need to increase leftvertexindex or decrease rightvertexindex:\r\n          while (true) {\r\n            let nextleftvertexindex = newleftvertexindex + 1\r\n            if (nextleftvertexindex >= numvertices) nextleftvertexindex = 0\r\n            if (vertices2d[nextleftvertexindex].y !== ycoordinate) break\r\n            newleftvertexindex = nextleftvertexindex\r\n          }\r\n          let nextrightvertexindex = newrightvertexindex - 1\r\n          if (nextrightvertexindex < 0) nextrightvertexindex = numvertices - 1\r\n          if (vertices2d[nextrightvertexindex].y === ycoordinate) {\r\n            newrightvertexindex = nextrightvertexindex\r\n          }\r\n          if ((newleftvertexindex !== activepolygon.leftvertexindex) && (newleftvertexindex === newrightvertexindex)) {\r\n                        // We have increased leftvertexindex or decreased rightvertexindex, and now they point to the same vertex\r\n                        // This means that this is the bottom point of the polygon. We'll remove it:\r\n            activepolygons.splice(activepolygonindex, 1)\r\n            --activepolygonindex\r\n          } else {\r\n            activepolygon.leftvertexindex = newleftvertexindex\r\n            activepolygon.rightvertexindex = newrightvertexindex\r\n            activepolygon.topleft = vertices2d[newleftvertexindex]\r\n            activepolygon.topright = vertices2d[newrightvertexindex]\r\n            let nextleftvertexindex = newleftvertexindex + 1\r\n            if (nextleftvertexindex >= numvertices) nextleftvertexindex = 0\r\n            activepolygon.bottomleft = vertices2d[nextleftvertexindex]\r\n            let nextrightvertexindex = newrightvertexindex - 1\r\n            if (nextrightvertexindex < 0) nextrightvertexindex = numvertices - 1\r\n            activepolygon.bottomright = vertices2d[nextrightvertexindex]\r\n          }\r\n        } // if polygon has corner here\r\n      } // for activepolygonindex\r\n      let nextycoordinate\r\n      if (yindex >= ycoordinates.length - 1) {\r\n                // last row, all polygons must be finished here:\r\n        activepolygons = []\r\n        nextycoordinate = null\r\n      } else // yindex < ycoordinates.length-1\r\n            {\r\n        nextycoordinate = Number(ycoordinates[yindex + 1])\r\n        let middleycoordinate = 0.5 * (ycoordinate + nextycoordinate)\r\n                // update activepolygons by adding any polygons that start here:\r\n        let startingpolygonindexes = topy2polygonindexes[ycoordinate_as_string]\r\n        for (let polygonindex_key in startingpolygonindexes) {\r\n          let polygonindex = startingpolygonindexes[polygonindex_key]\r\n          let vertices2d = polygonvertices2d[polygonindex]\r\n          let numvertices = vertices2d.length\r\n          let topvertexindex = polygontopvertexindexes[polygonindex]\r\n                    // the top of the polygon may be a horizontal line. In that case topvertexindex can point to any point on this line.\r\n                    // Find the left and right topmost vertices which have the current y coordinate:\r\n          let topleftvertexindex = topvertexindex\r\n          while (true) {\r\n            let i = topleftvertexindex + 1\r\n            if (i >= numvertices) i = 0\r\n            if (vertices2d[i].y !== ycoordinate) break\r\n            if (i === topvertexindex) break // should not happen, but just to prevent endless loops\r\n            topleftvertexindex = i\r\n          }\r\n          let toprightvertexindex = topvertexindex\r\n          while (true) {\r\n            let i = toprightvertexindex - 1\r\n            if (i < 0) i = numvertices - 1\r\n            if (vertices2d[i].y !== ycoordinate) break\r\n            if (i === topleftvertexindex) break // should not happen, but just to prevent endless loops\r\n            toprightvertexindex = i\r\n          }\r\n          let nextleftvertexindex = topleftvertexindex + 1\r\n          if (nextleftvertexindex >= numvertices) nextleftvertexindex = 0\r\n          let nextrightvertexindex = toprightvertexindex - 1\r\n          if (nextrightvertexindex < 0) nextrightvertexindex = numvertices - 1\r\n          let newactivepolygon = {\r\n            polygonindex: polygonindex,\r\n            leftvertexindex: topleftvertexindex,\r\n            rightvertexindex: toprightvertexindex,\r\n            topleft: vertices2d[topleftvertexindex],\r\n            topright: vertices2d[toprightvertexindex],\r\n            bottomleft: vertices2d[nextleftvertexindex],\r\n            bottomright: vertices2d[nextrightvertexindex]\r\n          }\r\n          insertSorted(activepolygons, newactivepolygon, function (el1, el2) {\r\n            let x1 = interpolateBetween2DPointsForY(\r\n                            el1.topleft, el1.bottomleft, middleycoordinate)\r\n            let x2 = interpolateBetween2DPointsForY(\r\n                            el2.topleft, el2.bottomleft, middleycoordinate)\r\n            if (x1 > x2) return 1\r\n            if (x1 < x2) return -1\r\n            return 0\r\n          })\r\n        } // for(let polygonindex in startingpolygonindexes)\r\n      } //  yindex < ycoordinates.length-1\r\n            // if( (yindex === ycoordinates.length-1) || (nextycoordinate - ycoordinate > EPS) )\r\n      if (true) {\r\n        // Now activepolygons is up to date\r\n        // Build the output polygons for the next row in newoutpolygonrow:\r\n        for (let activepolygonKey in activepolygons) {\r\n          let activepolygon = activepolygons[activepolygonKey]\r\n          let polygonindex = activepolygon.polygonindex\r\n          let vertices2d = polygonvertices2d[polygonindex]\r\n          let numvertices = vertices2d.length\r\n\r\n          let x = interpolateBetween2DPointsForY(activepolygon.topleft, activepolygon.bottomleft, ycoordinate)\r\n          let topleft = Vector2D.Create(x, ycoordinate)\r\n          x = interpolateBetween2DPointsForY(activepolygon.topright, activepolygon.bottomright, ycoordinate)\r\n          let topright = Vector2D.Create(x, ycoordinate)\r\n          x = interpolateBetween2DPointsForY(activepolygon.topleft, activepolygon.bottomleft, nextycoordinate)\r\n          let bottomleft = Vector2D.Create(x, nextycoordinate)\r\n          x = interpolateBetween2DPointsForY(activepolygon.topright, activepolygon.bottomright, nextycoordinate)\r\n          let bottomright = Vector2D.Create(x, nextycoordinate)\r\n          let outpolygon = {\r\n            topleft: topleft,\r\n            topright: topright,\r\n            bottomleft: bottomleft,\r\n            bottomright: bottomright,\r\n            leftline: Line2D.fromPoints(topleft, bottomleft),\r\n            rightline: Line2D.fromPoints(bottomright, topright)\r\n          }\r\n          if (newoutpolygonrow.length > 0) {\r\n            let prevoutpolygon = newoutpolygonrow[newoutpolygonrow.length - 1]\r\n            let d1 = outpolygon.topleft.distanceTo(prevoutpolygon.topright)\r\n            let d2 = outpolygon.bottomleft.distanceTo(prevoutpolygon.bottomright)\r\n            if ((d1 < EPS) && (d2 < EPS)) {\r\n                            // we can join this polygon with the one to the left:\r\n              outpolygon.topleft = prevoutpolygon.topleft\r\n              outpolygon.leftline = prevoutpolygon.leftline\r\n              outpolygon.bottomleft = prevoutpolygon.bottomleft\r\n              newoutpolygonrow.splice(newoutpolygonrow.length - 1, 1)\r\n            }\r\n          }\r\n          newoutpolygonrow.push(outpolygon)\r\n        } // for(activepolygon in activepolygons)\r\n        if (yindex > 0) {\r\n                    // try to match the new polygons against the previous row:\r\n          let prevcontinuedindexes = {}\r\n          let matchedindexes = {}\r\n          for (let i = 0; i < newoutpolygonrow.length; i++) {\r\n            let thispolygon = newoutpolygonrow[i]\r\n            for (let ii = 0; ii < prevoutpolygonrow.length; ii++) {\r\n              if (!matchedindexes[ii]) // not already processed?\r\n                            {\r\n                                // We have a match if the sidelines are equal or if the top coordinates\r\n                                // are on the sidelines of the previous polygon\r\n                let prevpolygon = prevoutpolygonrow[ii]\r\n                if (prevpolygon.bottomleft.distanceTo(thispolygon.topleft) < EPS) {\r\n                  if (prevpolygon.bottomright.distanceTo(thispolygon.topright) < EPS) {\r\n                                        // Yes, the top of this polygon matches the bottom of the previous:\r\n                    matchedindexes[ii] = true\r\n                                        // Now check if the joined polygon would remain convex:\r\n                    let d1 = thispolygon.leftline.direction().x - prevpolygon.leftline.direction().x\r\n                    let d2 = thispolygon.rightline.direction().x - prevpolygon.rightline.direction().x\r\n                    let leftlinecontinues = Math.abs(d1) < EPS\r\n                    let rightlinecontinues = Math.abs(d2) < EPS\r\n                    let leftlineisconvex = leftlinecontinues || (d1 >= 0)\r\n                    let rightlineisconvex = rightlinecontinues || (d2 >= 0)\r\n                    if (leftlineisconvex && rightlineisconvex) {\r\n                                            // yes, both sides have convex corners:\r\n                                            // This polygon will continue the previous polygon\r\n                      thispolygon.outpolygon = prevpolygon.outpolygon\r\n                      thispolygon.leftlinecontinues = leftlinecontinues\r\n                      thispolygon.rightlinecontinues = rightlinecontinues\r\n                      prevcontinuedindexes[ii] = true\r\n                    }\r\n                    break\r\n                  }\r\n                }\r\n              } // if(!prevcontinuedindexes[ii])\r\n            } // for ii\r\n          } // for i\r\n          for (let ii = 0; ii < prevoutpolygonrow.length; ii++) {\r\n            if (!prevcontinuedindexes[ii]) {\r\n                            // polygon ends here\r\n                            // Finish the polygon with the last point(s):\r\n              let prevpolygon = prevoutpolygonrow[ii]\r\n              prevpolygon.outpolygon.rightpoints.push(prevpolygon.bottomright)\r\n              if (prevpolygon.bottomright.distanceTo(prevpolygon.bottomleft) > EPS) {\r\n                                // polygon ends with a horizontal line:\r\n                prevpolygon.outpolygon.leftpoints.push(prevpolygon.bottomleft)\r\n              }\r\n                            // reverse the left half so we get a counterclockwise circle:\r\n              prevpolygon.outpolygon.leftpoints.reverse()\r\n              let points2d = prevpolygon.outpolygon.rightpoints.concat(prevpolygon.outpolygon.leftpoints)\r\n              let vertices3d = []\r\n              points2d.map(function (point2d) {\r\n                let point3d = orthobasis.to3D(point2d)\r\n                let vertex3d = new Vertex(point3d)\r\n                vertices3d.push(vertex3d)\r\n              })\r\n              let polygon = new Polygon(vertices3d, shared, plane)\r\n              destpolygons.push(polygon)\r\n            }\r\n          }\r\n        } // if(yindex > 0)\r\n        for (let i = 0; i < newoutpolygonrow.length; i++) {\r\n          let thispolygon = newoutpolygonrow[i]\r\n          if (!thispolygon.outpolygon) {\r\n                        // polygon starts here:\r\n            thispolygon.outpolygon = {\r\n              leftpoints: [],\r\n              rightpoints: []\r\n            }\r\n            thispolygon.outpolygon.leftpoints.push(thispolygon.topleft)\r\n            if (thispolygon.topleft.distanceTo(thispolygon.topright) > EPS) {\r\n                            // we have a horizontal line at the top:\r\n              thispolygon.outpolygon.rightpoints.push(thispolygon.topright)\r\n            }\r\n          } else {\r\n                        // continuation of a previous row\r\n            if (!thispolygon.leftlinecontinues) {\r\n              thispolygon.outpolygon.leftpoints.push(thispolygon.topleft)\r\n            }\r\n            if (!thispolygon.rightlinecontinues) {\r\n              thispolygon.outpolygon.rightpoints.push(thispolygon.topright)\r\n            }\r\n          }\r\n        }\r\n        prevoutpolygonrow = newoutpolygonrow\r\n      }\r\n    } // for yindex\r\n  } // if(numpolygons > 0)\r\n}\r\n\r\nmodule.exports = reTesselateCoplanarPolygons\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/math/reTesselateCoplanarPolygons.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/mutators.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/mutators.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Matrix4x4 = __webpack_require__(/*! ./math/Matrix4 */ \"../../convert/jscad/src/core/math/Matrix4.js\")\r\nconst Vector3D = __webpack_require__(/*! ./math/Vector3 */ \"../../convert/jscad/src/core/math/Vector3.js\")\r\nconst Plane = __webpack_require__(/*! ./math/Plane */ \"../../convert/jscad/src/core/math/Plane.js\")\r\n\r\n// Add several convenience methods to the classes that support a transform() method:\r\nconst addTransformationMethodsToPrototype = function (prot) {\r\n  prot.mirrored = function (plane) {\r\n    return this.transform(Matrix4x4.mirroring(plane))\r\n  }\r\n\r\n  prot.mirroredX = function () {\r\n    let plane = new Plane(Vector3D.Create(1, 0, 0), 0)\r\n    return this.mirrored(plane)\r\n  }\r\n\r\n  prot.mirroredY = function () {\r\n    let plane = new Plane(Vector3D.Create(0, 1, 0), 0)\r\n    return this.mirrored(plane)\r\n  }\r\n\r\n  prot.mirroredZ = function () {\r\n    let plane = new Plane(Vector3D.Create(0, 0, 1), 0)\r\n    return this.mirrored(plane)\r\n  }\r\n\r\n  prot.translate = function (v) {\r\n    return this.transform(Matrix4x4.translation(v))\r\n  }\r\n\r\n  prot.scale = function (f) {\r\n    return this.transform(Matrix4x4.scaling(f))\r\n  }\r\n\r\n  prot.rotateX = function (deg) {\r\n    return this.transform(Matrix4x4.rotationX(deg))\r\n  }\r\n\r\n  prot.rotateY = function (deg) {\r\n    return this.transform(Matrix4x4.rotationY(deg))\r\n  }\r\n\r\n  prot.rotateZ = function (deg) {\r\n    return this.transform(Matrix4x4.rotationZ(deg))\r\n  }\r\n\r\n  prot.rotate = function (rotationCenter, rotationAxis, degrees) {\r\n    return this.transform(Matrix4x4.rotation(rotationCenter, rotationAxis, degrees))\r\n  }\r\n\r\n  prot.rotateEulerAngles = function (alpha, beta, gamma, position) {\r\n    position = position || [0, 0, 0]\r\n\r\n    let Rz1 = Matrix4x4.rotationZ(alpha)\r\n    let Rx = Matrix4x4.rotationX(beta)\r\n    let Rz2 = Matrix4x4.rotationZ(gamma)\r\n    let T = Matrix4x4.translation(new Vector3D(position))\r\n\r\n    return this.transform(Rz2.multiply(Rx).multiply(Rz1).multiply(T))\r\n  }\r\n}\r\n\r\n// TODO: consider generalization and adding to addTransformationMethodsToPrototype\r\nconst addCenteringToPrototype = function (prot, axes) {\r\n  prot.center = function (cAxes) {\r\n    cAxes = Array.prototype.map.call(arguments, function (a) {\r\n      return a // .toLowerCase();\r\n    })\r\n        // no args: center on all axes\r\n    if (!cAxes.length) {\r\n      cAxes = axes.slice()\r\n    }\r\n    let b = this.getBounds()\r\n    return this.translate(axes.map(function (a) {\r\n      return cAxes.indexOf(a) > -1 ? -(b[0][a] + b[1][a]) / 2 : 0\r\n    }))\r\n  }\r\n}\r\nmodule.exports = {\r\n  addTransformationMethodsToPrototype,\r\n  addCenteringToPrototype\r\n}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/mutators.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/trees.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/trees.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {_CSGDEBUG, EPS} = __webpack_require__(/*! ./constants */ \"../../convert/jscad/src/core/constants.js\")\r\nconst Vertex = __webpack_require__(/*! ./math/Vertex3 */ \"../../convert/jscad/src/core/math/Vertex3.js\")\r\nconst Polygon = __webpack_require__(/*! ./math/Polygon3 */ \"../../convert/jscad/src/core/math/Polygon3.js\")\r\n\r\n// Returns object:\r\n// .type:\r\n//   0: coplanar-front\r\n//   1: coplanar-back\r\n//   2: front\r\n//   3: back\r\n//   4: spanning\r\n// In case the polygon is spanning, returns:\r\n// .front: a Polygon of the front part\r\n// .back: a Polygon of the back part\r\nfunction splitPolygonByPlane (plane, polygon) {\r\n  let result = {\r\n    type: null,\r\n    front: null,\r\n    back: null\r\n  }\r\n      // cache in local lets (speedup):\r\n  let planenormal = plane.normal\r\n  let vertices = polygon.vertices\r\n  let numvertices = vertices.length\r\n  if (polygon.plane.equals(plane)) {\r\n    result.type = 0\r\n  } else {\r\n    let thisw = plane.w\r\n    let hasfront = false\r\n    let hasback = false\r\n    let vertexIsBack = []\r\n    let MINEPS = -EPS\r\n    for (let i = 0; i < numvertices; i++) {\r\n      let t = planenormal.dot(vertices[i].pos) - thisw\r\n      let isback = (t < 0)\r\n      vertexIsBack.push(isback)\r\n      if (t > EPS) hasfront = true\r\n      if (t < MINEPS) hasback = true\r\n    }\r\n    if ((!hasfront) && (!hasback)) {\r\n              // all points coplanar\r\n      let t = planenormal.dot(polygon.plane.normal)\r\n      result.type = (t >= 0) ? 0 : 1\r\n    } else if (!hasback) {\r\n      result.type = 2\r\n    } else if (!hasfront) {\r\n      result.type = 3\r\n    } else {\r\n              // spanning\r\n      result.type = 4\r\n      let frontvertices = []\r\n      let backvertices = []\r\n      let isback = vertexIsBack[0]\r\n      for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {\r\n        let vertex = vertices[vertexindex]\r\n        let nextvertexindex = vertexindex + 1\r\n        if (nextvertexindex >= numvertices) nextvertexindex = 0\r\n        let nextisback = vertexIsBack[nextvertexindex]\r\n        if (isback === nextisback) {\r\n                      // line segment is on one side of the plane:\r\n          if (isback) {\r\n            backvertices.push(vertex)\r\n          } else {\r\n            frontvertices.push(vertex)\r\n          }\r\n        } else {\r\n                      // line segment intersects plane:\r\n          let point = vertex.pos\r\n          let nextpoint = vertices[nextvertexindex].pos\r\n          let intersectionpoint = plane.splitLineBetweenPoints(point, nextpoint)\r\n          let intersectionvertex = new Vertex(intersectionpoint)\r\n          if (isback) {\r\n            backvertices.push(vertex)\r\n            backvertices.push(intersectionvertex)\r\n            frontvertices.push(intersectionvertex)\r\n          } else {\r\n            frontvertices.push(vertex)\r\n            frontvertices.push(intersectionvertex)\r\n            backvertices.push(intersectionvertex)\r\n          }\r\n        }\r\n        isback = nextisback\r\n      } // for vertexindex\r\n              // remove duplicate vertices:\r\n      let EPS_SQUARED = EPS * EPS\r\n      if (backvertices.length >= 3) {\r\n        let prevvertex = backvertices[backvertices.length - 1]\r\n        for (let vertexindex = 0; vertexindex < backvertices.length; vertexindex++) {\r\n          let vertex = backvertices[vertexindex]\r\n          if (vertex.pos.distanceToSquared(prevvertex.pos) < EPS_SQUARED) {\r\n            backvertices.splice(vertexindex, 1)\r\n            vertexindex--\r\n          }\r\n          prevvertex = vertex\r\n        }\r\n      }\r\n      if (frontvertices.length >= 3) {\r\n        let prevvertex = frontvertices[frontvertices.length - 1]\r\n        for (let vertexindex = 0; vertexindex < frontvertices.length; vertexindex++) {\r\n          let vertex = frontvertices[vertexindex]\r\n          if (vertex.pos.distanceToSquared(prevvertex.pos) < EPS_SQUARED) {\r\n            frontvertices.splice(vertexindex, 1)\r\n            vertexindex--\r\n          }\r\n          prevvertex = vertex\r\n        }\r\n      }\r\n      if (frontvertices.length >= 3) {\r\n        result.front = new Polygon(frontvertices, polygon.shared, polygon.plane)\r\n      }\r\n      if (backvertices.length >= 3) {\r\n        result.back = new Polygon(backvertices, polygon.shared, polygon.plane)\r\n      }\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\n// # class PolygonTreeNode\r\n// This class manages hierarchical splits of polygons\r\n// At the top is a root node which doesn hold a polygon, only child PolygonTreeNodes\r\n// Below that are zero or more 'top' nodes; each holds a polygon. The polygons can be in different planes\r\n// splitByPlane() splits a node by a plane. If the plane intersects the polygon, two new child nodes\r\n// are created holding the splitted polygon.\r\n// getPolygons() retrieves the polygon from the tree. If for PolygonTreeNode the polygon is split but\r\n// the two split parts (child nodes) are still intact, then the unsplit polygon is returned.\r\n// This ensures that we can safely split a polygon into many fragments. If the fragments are untouched,\r\n//  getPolygons() will return the original unsplit polygon instead of the fragments.\r\n// remove() removes a polygon from the tree. Once a polygon is removed, the parent polygons are invalidated\r\n// since they are no longer intact.\r\n// constructor creates the root node:\r\nconst PolygonTreeNode = function () {\r\n  this.parent = null\r\n  this.children = []\r\n  this.polygon = null\r\n  this.removed = false\r\n}\r\n\r\nPolygonTreeNode.prototype = {\r\n    // fill the tree with polygons. Should be called on the root node only; child nodes must\r\n    // always be a derivate (split) of the parent node.\r\n  addPolygons: function (polygons) {\r\n    // new polygons can only be added to root node; children can only be splitted polygons\r\n    if (!this.isRootNode()) {\r\n      throw new Error('Assertion failed')\r\n    }\r\n    let _this = this\r\n    polygons.map(function (polygon) {\r\n      _this.addChild(polygon)\r\n    })\r\n  },\r\n\r\n    // remove a node\r\n    // - the siblings become toplevel nodes\r\n    // - the parent is removed recursively\r\n  remove: function () {\r\n    if (!this.removed) {\r\n      this.removed = true\r\n\r\n      if (_CSGDEBUG) {\r\n        if (this.isRootNode()) throw new Error('Assertion failed') // can't remove root node\r\n        if (this.children.length) throw new Error('Assertion failed') // we shouldn't remove nodes with children\r\n      }\r\n\r\n            // remove ourselves from the parent's children list:\r\n      let parentschildren = this.parent.children\r\n      let i = parentschildren.indexOf(this)\r\n      if (i < 0) throw new Error('Assertion failed')\r\n      parentschildren.splice(i, 1)\r\n\r\n            // invalidate the parent's polygon, and of all parents above it:\r\n      this.parent.recursivelyInvalidatePolygon()\r\n    }\r\n  },\r\n\r\n  isRemoved: function () {\r\n    return this.removed\r\n  },\r\n\r\n  isRootNode: function () {\r\n    return !this.parent\r\n  },\r\n\r\n    // invert all polygons in the tree. Call on the root node\r\n  invert: function () {\r\n    if (!this.isRootNode()) throw new Error('Assertion failed') // can only call this on the root node\r\n    this.invertSub()\r\n  },\r\n\r\n  getPolygon: function () {\r\n    if (!this.polygon) throw new Error('Assertion failed') // doesn't have a polygon, which means that it has been broken down\r\n    return this.polygon\r\n  },\r\n\r\n  getPolygons: function (result) {\r\n    let children = [this]\r\n    let queue = [children]\r\n    let i, j, l, node\r\n    for (i = 0; i < queue.length; ++i) { // queue size can change in loop, don't cache length\r\n      children = queue[i]\r\n      for (j = 0, l = children.length; j < l; j++) { // ok to cache length\r\n        node = children[j]\r\n        if (node.polygon) {\r\n                    // the polygon hasn't been broken yet. We can ignore the children and return our polygon:\r\n          result.push(node.polygon)\r\n        } else {\r\n                    // our polygon has been split up and broken, so gather all subpolygons from the children\r\n          queue.push(node.children)\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n    // split the node by a plane; add the resulting nodes to the frontnodes and backnodes array\r\n    // If the plane doesn't intersect the polygon, the 'this' object is added to one of the arrays\r\n    // If the plane does intersect the polygon, two new child nodes are created for the front and back fragments,\r\n    //  and added to both arrays.\r\n  splitByPlane: function (plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes) {\r\n    if (this.children.length) {\r\n      let queue = [this.children]\r\n      let i\r\n      let j\r\n      let l\r\n      let node\r\n      let nodes\r\n      for (i = 0; i < queue.length; i++) { // queue.length can increase, do not cache\r\n        nodes = queue[i]\r\n        for (j = 0, l = nodes.length; j < l; j++) { // ok to cache length\r\n          node = nodes[j]\r\n          if (node.children.length) {\r\n            queue.push(node.children)\r\n          } else {\r\n                        // no children. Split the polygon:\r\n            node._splitByPlane(plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes)\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      this._splitByPlane(plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes)\r\n    }\r\n  },\r\n\r\n    // only to be called for nodes with no children\r\n  _splitByPlane: function (plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes) {\r\n    let polygon = this.polygon\r\n    if (polygon) {\r\n      let bound = polygon.boundingSphere()\r\n      let sphereradius = bound[1] + EPS // FIXME Why add imprecision?\r\n      let planenormal = plane.normal\r\n      let spherecenter = bound[0]\r\n      let d = planenormal.dot(spherecenter) - plane.w\r\n      if (d > sphereradius) {\r\n        frontnodes.push(this)\r\n      } else if (d < -sphereradius) {\r\n        backnodes.push(this)\r\n      } else {\r\n        let splitresult = splitPolygonByPlane(plane, polygon)\r\n        switch (splitresult.type) {\r\n          case 0:\r\n                        // coplanar front:\r\n            coplanarfrontnodes.push(this)\r\n            break\r\n\r\n          case 1:\r\n                        // coplanar back:\r\n            coplanarbacknodes.push(this)\r\n            break\r\n\r\n          case 2:\r\n                        // front:\r\n            frontnodes.push(this)\r\n            break\r\n\r\n          case 3:\r\n                        // back:\r\n            backnodes.push(this)\r\n            break\r\n\r\n          case 4:\r\n                        // spanning:\r\n            if (splitresult.front) {\r\n              let frontnode = this.addChild(splitresult.front)\r\n              frontnodes.push(frontnode)\r\n            }\r\n            if (splitresult.back) {\r\n              let backnode = this.addChild(splitresult.back)\r\n              backnodes.push(backnode)\r\n            }\r\n            break\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n    // PRIVATE methods from here:\r\n    // add child to a node\r\n    // this should be called whenever the polygon is split\r\n    // a child should be created for every fragment of the split polygon\r\n    // returns the newly created child\r\n  addChild: function (polygon) {\r\n    let newchild = new PolygonTreeNode()\r\n    newchild.parent = this\r\n    newchild.polygon = polygon\r\n    this.children.push(newchild)\r\n    return newchild\r\n  },\r\n\r\n  invertSub: function () {\r\n    let children = [this]\r\n    let queue = [children]\r\n    let i, j, l, node\r\n    for (i = 0; i < queue.length; i++) {\r\n      children = queue[i]\r\n      for (j = 0, l = children.length; j < l; j++) {\r\n        node = children[j]\r\n        if (node.polygon) {\r\n          node.polygon = node.polygon.flipped()\r\n        }\r\n        queue.push(node.children)\r\n      }\r\n    }\r\n  },\r\n\r\n  recursivelyInvalidatePolygon: function () {\r\n    let node = this\r\n    while (node.polygon) {\r\n      node.polygon = null\r\n      if (node.parent) {\r\n        node = node.parent\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// # class Tree\r\n// This is the root of a BSP tree\r\n// We are using this separate class for the root of the tree, to hold the PolygonTreeNode root\r\n// The actual tree is kept in this.rootnode\r\nconst Tree = function (polygons) {\r\n  this.polygonTree = new PolygonTreeNode()\r\n  this.rootnode = new Node(null)\r\n  if (polygons) this.addPolygons(polygons)\r\n}\r\n\r\nTree.prototype = {\r\n  invert: function () {\r\n    this.polygonTree.invert()\r\n    this.rootnode.invert()\r\n  },\r\n\r\n    // Remove all polygons in this BSP tree that are inside the other BSP tree\r\n    // `tree`.\r\n  clipTo: function (tree, alsoRemovecoplanarFront) {\r\n    alsoRemovecoplanarFront = !!alsoRemovecoplanarFront\r\n    this.rootnode.clipTo(tree, alsoRemovecoplanarFront)\r\n  },\r\n\r\n  allPolygons: function () {\r\n    let result = []\r\n    this.polygonTree.getPolygons(result)\r\n    return result\r\n  },\r\n\r\n  addPolygons: function (polygons) {\r\n    let _this = this\r\n    let polygontreenodes = polygons.map(function (p) {\r\n      return _this.polygonTree.addChild(p)\r\n    })\r\n    this.rootnode.addPolygonTreeNodes(polygontreenodes)\r\n  }\r\n}\r\n\r\n// # class Node\r\n// Holds a node in a BSP tree. A BSP tree is built from a collection of polygons\r\n// by picking a polygon to split along.\r\n// Polygons are not stored directly in the tree, but in PolygonTreeNodes, stored in\r\n// this.polygontreenodes. Those PolygonTreeNodes are children of the owning\r\n// Tree.polygonTree\r\n// This is not a leafy BSP tree since there is\r\n// no distinction between internal and leaf nodes.\r\nconst Node = function (parent) {\r\n  this.plane = null\r\n  this.front = null\r\n  this.back = null\r\n  this.polygontreenodes = []\r\n  this.parent = parent\r\n}\r\n\r\nNode.prototype = {\r\n    // Convert solid space to empty space and empty space to solid space.\r\n  invert: function () {\r\n    let queue = [this]\r\n    let node\r\n    for (let i = 0; i < queue.length; i++) {\r\n      node = queue[i]\r\n      if (node.plane) node.plane = node.plane.flipped()\r\n      if (node.front) queue.push(node.front)\r\n      if (node.back) queue.push(node.back)\r\n      let temp = node.front\r\n      node.front = node.back\r\n      node.back = temp\r\n    }\r\n  },\r\n\r\n    // clip polygontreenodes to our plane\r\n    // calls remove() for all clipped PolygonTreeNodes\r\n  clipPolygons: function (polygontreenodes, alsoRemovecoplanarFront) {\r\n    let args = {'node': this, 'polygontreenodes': polygontreenodes}\r\n    let node\r\n    let stack = []\r\n\r\n    do {\r\n      node = args.node\r\n      polygontreenodes = args.polygontreenodes\r\n\r\n            // begin \"function\"\r\n      if (node.plane) {\r\n        let backnodes = []\r\n        let frontnodes = []\r\n        let coplanarfrontnodes = alsoRemovecoplanarFront ? backnodes : frontnodes\r\n        let plane = node.plane\r\n        let numpolygontreenodes = polygontreenodes.length\r\n        for (let i = 0; i < numpolygontreenodes; i++) {\r\n          let node1 = polygontreenodes[i]\r\n          if (!node1.isRemoved()) {\r\n            node1.splitByPlane(plane, coplanarfrontnodes, backnodes, frontnodes, backnodes)\r\n          }\r\n        }\r\n\r\n        if (node.front && (frontnodes.length > 0)) {\r\n          stack.push({'node': node.front, 'polygontreenodes': frontnodes})\r\n        }\r\n        let numbacknodes = backnodes.length\r\n        if (node.back && (numbacknodes > 0)) {\r\n          stack.push({'node': node.back, 'polygontreenodes': backnodes})\r\n        } else {\r\n                    // there's nothing behind this plane. Delete the nodes behind this plane:\r\n          for (let i = 0; i < numbacknodes; i++) {\r\n            backnodes[i].remove()\r\n          }\r\n        }\r\n      }\r\n      args = stack.pop()\r\n    } while (typeof (args) !== 'undefined')\r\n  },\r\n\r\n    // Remove all polygons in this BSP tree that are inside the other BSP tree\r\n    // `tree`.\r\n  clipTo: function (tree, alsoRemovecoplanarFront) {\r\n    let node = this\r\n    let stack = []\r\n    do {\r\n      if (node.polygontreenodes.length > 0) {\r\n        tree.rootnode.clipPolygons(node.polygontreenodes, alsoRemovecoplanarFront)\r\n      }\r\n      if (node.front) stack.push(node.front)\r\n      if (node.back) stack.push(node.back)\r\n      node = stack.pop()\r\n    } while (typeof (node) !== 'undefined')\r\n  },\r\n\r\n  addPolygonTreeNodes: function (polygontreenodes) {\r\n    let args = {'node': this, 'polygontreenodes': polygontreenodes}\r\n    let node\r\n    let stack = []\r\n    do {\r\n      node = args.node\r\n      polygontreenodes = args.polygontreenodes\r\n\r\n      if (polygontreenodes.length === 0) {\r\n        args = stack.pop()\r\n        continue\r\n      }\r\n      let _this = node\r\n      if (!node.plane) {\r\n        let bestplane = polygontreenodes[0].getPolygon().plane\r\n        node.plane = bestplane\r\n      }\r\n      let frontnodes = []\r\n      let backnodes = []\r\n\r\n      for (let i = 0, n = polygontreenodes.length; i < n; ++i) {\r\n        polygontreenodes[i].splitByPlane(_this.plane, _this.polygontreenodes, backnodes, frontnodes, backnodes)\r\n      }\r\n\r\n      if (frontnodes.length > 0) {\r\n        if (!node.front) node.front = new Node(node)\r\n        stack.push({'node': node.front, 'polygontreenodes': frontnodes})\r\n      }\r\n      if (backnodes.length > 0) {\r\n        if (!node.back) node.back = new Node(node)\r\n        stack.push({'node': node.back, 'polygontreenodes': backnodes})\r\n      }\r\n\r\n      args = stack.pop()\r\n    } while (typeof (args) !== 'undefined')\r\n  },\r\n\r\n  getParentPlaneNormals: function (normals, maxdepth) {\r\n    if (maxdepth > 0) {\r\n      if (this.parent) {\r\n        normals.push(this.parent.plane.normal)\r\n        this.parent.getParentPlaneNormals(normals, maxdepth - 1)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Tree\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/trees.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/utils.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/utils.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function fnNumberSort (a, b) {\r\n  return a - b\r\n}\r\n\r\nfunction fnSortByIndex (a, b) {\r\n  return a.index - b.index\r\n}\r\n\r\nconst IsFloat = function (n) {\r\n  return (!isNaN(n)) || (n === Infinity) || (n === -Infinity)\r\n}\r\n\r\nconst solve2Linear = function (a, b, c, d, u, v) {\r\n  let det = a * d - b * c\r\n  let invdet = 1.0 / det\r\n  let x = u * d - b * v\r\n  let y = -u * c + a * v\r\n  x *= invdet\r\n  y *= invdet\r\n  return [x, y]\r\n}\r\n\r\nfunction insertSorted (array, element, comparefunc) {\r\n  let leftbound = 0\r\n  let rightbound = array.length\r\n  while (rightbound > leftbound) {\r\n    let testindex = Math.floor((leftbound + rightbound) / 2)\r\n    let testelement = array[testindex]\r\n    let compareresult = comparefunc(element, testelement)\r\n    if (compareresult > 0) // element > testelement\r\n    {\r\n      leftbound = testindex + 1\r\n    } else {\r\n      rightbound = testindex\r\n    }\r\n  }\r\n  array.splice(leftbound, 0, element)\r\n}\r\n\r\n// Get the x coordinate of a point with a certain y coordinate, interpolated between two\r\n// points (CSG.Vector2D).\r\n// Interpolation is robust even if the points have the same y coordinate\r\nconst interpolateBetween2DPointsForY = function (point1, point2, y) {\r\n  let f1 = y - point1.y\r\n  let f2 = point2.y - point1.y\r\n  if (f2 < 0) {\r\n    f1 = -f1\r\n    f2 = -f2\r\n  }\r\n  let t\r\n  if (f1 <= 0) {\r\n    t = 0.0\r\n  } else if (f1 >= f2) {\r\n    t = 1.0\r\n  } else if (f2 < 1e-10) { // FIXME Should this be CSG.EPS?\r\n    t = 0.5\r\n  } else {\r\n    t = f1 / f2\r\n  }\r\n  let result = point1.x + t * (point2.x - point1.x)\r\n  return result\r\n}\r\n\r\nfunction isCAG (object) {\r\n  // objects[i] instanceof CAG => NOT RELIABLE\r\n  // 'instanceof' causes huge issues when using objects from\r\n  // two different versions of CSG.js as they are not reckonized as one and the same\r\n  // so DO NOT use instanceof to detect matching types for CSG/CAG\r\n  if (!('sides' in object)) {\r\n    return false\r\n  }\r\n  if (!('length' in object.sides)) {\r\n    return false\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nfunction isCSG (object) {\r\n  // objects[i] instanceof CSG => NOT RELIABLE\r\n  // 'instanceof' causes huge issues when using objects from\r\n  // two different versions of CSG.js as they are not reckonized as one and the same\r\n  // so DO NOT use instanceof to detect matching types for CSG/CAG\r\n  if (!('polygons' in object)) {\r\n    return false\r\n  }\r\n  if (!('length' in object.polygons)) {\r\n    return false\r\n  }\r\n  return true\r\n}\r\n\r\nmodule.exports = {\r\n  fnNumberSort,\r\n  fnSortByIndex,\r\n  IsFloat,\r\n  solve2Linear,\r\n  insertSorted,\r\n  interpolateBetween2DPointsForY,\r\n  isCAG,\r\n  isCSG\r\n}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/utils.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/utils/cagMeasurements.js":
/*!********************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/utils/cagMeasurements.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector2D = __webpack_require__(/*! ../math/Vector2 */ \"../../convert/jscad/src/core/math/Vector2.js\")\r\n\r\n// see http://local.wasp.uwa.edu.au/~pbourke/geometry/polyarea/ :\r\n// Area of the polygon. For a counter clockwise rotating polygon the area is positive, otherwise negative\r\n// Note(bebbi): this looks wrong. See polygon getArea()\r\nconst area = function (cag) {\r\n  let polygonArea = 0\r\n  cag.sides.map(function (side) {\r\n    polygonArea += side.vertex0.pos.cross(side.vertex1.pos)\r\n  })\r\n  polygonArea *= 0.5\r\n  return polygonArea\r\n}\r\n\r\nconst getBounds = function (cag) {\r\n  let minpoint\r\n  if (cag.sides.length === 0) {\r\n    minpoint = new Vector2D(0, 0)\r\n  } else {\r\n    minpoint = cag.sides[0].vertex0.pos\r\n  }\r\n  let maxpoint = minpoint\r\n  cag.sides.map(function (side) {\r\n    minpoint = minpoint.min(side.vertex0.pos)\r\n    minpoint = minpoint.min(side.vertex1.pos)\r\n    maxpoint = maxpoint.max(side.vertex0.pos)\r\n    maxpoint = maxpoint.max(side.vertex1.pos)\r\n  })\r\n  return [minpoint, maxpoint]\r\n}\r\n\r\nmodule.exports = {area, getBounds}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/utils/cagMeasurements.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/utils/cagValidation.js":
/*!******************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/utils/cagValidation.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {areaEPS} = __webpack_require__(/*! ../constants */ \"../../convert/jscad/src/core/constants.js\")\r\nconst {linesIntersect} = __webpack_require__(/*! ../math/lineUtils */ \"../../convert/jscad/src/core/math/lineUtils.js\")\r\n\r\n// check if we are a valid CAG (for debugging)\r\n// NOTE(bebbi) uneven side count doesn't work because rounding with EPS isn't taken into account\r\nconst isCAGValid = function (CAG) {\r\n  let errors = []\r\n  if (CAG.isSelfIntersecting(true)) {\r\n    errors.push('Self intersects')\r\n  }\r\n  let pointcount = {}\r\n  CAG.sides.map(function (side) {\r\n    function mappoint (p) {\r\n      let tag = p.x + ' ' + p.y\r\n      if (!(tag in pointcount)) pointcount[tag] = 0\r\n      pointcount[tag] ++\r\n    }\r\n    mappoint(side.vertex0.pos)\r\n    mappoint(side.vertex1.pos)\r\n  })\r\n  for (let tag in pointcount) {\r\n    let count = pointcount[tag]\r\n    if (count & 1) {\r\n      errors.push('Uneven number of sides (' + count + ') for point ' + tag)\r\n    }\r\n  }\r\n  let area = CAG.area()\r\n  if (area < areaEPS) {\r\n    errors.push('Area is ' + area)\r\n  }\r\n  if (errors.length > 0) {\r\n    let ertxt = ''\r\n    errors.map(function (err) {\r\n      ertxt += err + '\\n'\r\n    })\r\n    throw new Error(ertxt)\r\n  }\r\n}\r\n\r\nconst isSelfIntersecting = function (cag, debug) {\r\n  let numsides = cag.sides.length\r\n  for (let i = 0; i < numsides; i++) {\r\n    let side0 = cag.sides[i]\r\n    for (let ii = i + 1; ii < numsides; ii++) {\r\n      let side1 = cag.sides[ii]\r\n      if (linesIntersect(side0.vertex0.pos, side0.vertex1.pos, side1.vertex0.pos, side1.vertex1.pos)) {\r\n        if (debug) { console.log('side ' + i + ': ' + side0); console.log('side ' + ii + ': ' + side1) }\r\n        return true\r\n      }\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\n/** Check if the point stay inside the CAG shape\r\n* ray-casting algorithm based on :\r\n* https://github.com/substack/point-in-polygon/blob/master/index.js\r\n* http://www.ecse.rp1.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\r\n* originaly writed for https://github.com/lautr3k/SLAcer.js/blob/dev/js/slacer/slicer.js#L82\r\n* @param {CAG} cag - CAG object\r\n* @param {Object} p0 - Vertex2 like object\r\n* @returns {Boolean}\r\n*/\r\nconst hasPointInside = function (cag, p0) {\r\n  let p1 = null\r\n  let p2 = null\r\n  let inside = false\r\n  cag.sides.forEach(side => {\r\n    p1 = side.vertex0.pos\r\n    p2 = side.vertex1.pos\r\n    if (hasPointInside.c1(p0, p1, p2) && hasPointInside.c2(p0, p1, p2)) {\r\n      inside = !inside\r\n    }\r\n  })\r\n  return inside\r\n}\r\n\r\nhasPointInside.c1 = (p0, p1, p2) => (p1.y > p0.y) !== (p2.y > p0.y)\r\nhasPointInside.c2 = (p0, p1, p2) => (p0.x < (p2.x - p1.x) * (p0.y - p1.y) / (p2.y - p1.y) + p1.x)\r\n\r\n/** Check if all points from one CAG stay inside another CAG\r\n* @param {CAG} cag1 - CAG object\r\n* @param {Object} cag2 - CAG object\r\n* @returns {Boolean}\r\n*/\r\nconst contains = function (cag1, cag2) {\r\n  for (let i = 0, il = cag2.sides.length; i < il; i++) {\r\n    if (!hasPointInside(cag1, cag2.sides[i].vertex0.pos)) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nmodule.exports = {\r\n  isCAGValid,\r\n  isSelfIntersecting,\r\n  hasPointInside,\r\n  contains\r\n}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/utils/cagValidation.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/utils/canonicalize.js":
/*!*****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/utils/canonicalize.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {EPS} = __webpack_require__(/*! ../constants */ \"../../convert/jscad/src/core/constants.js\")\r\nconst FuzzyCSGFactory = __webpack_require__(/*! ../FuzzyFactory3d */ \"../../convert/jscad/src/core/FuzzyFactory3d.js\")\r\nconst FuzzyCAGFactory = __webpack_require__(/*! ../FuzzyFactory2d */ \"../../convert/jscad/src/core/FuzzyFactory2d.js\")\r\nconst {fromPolygons} = __webpack_require__(/*! ../CSGFactories */ \"../../convert/jscad/src/core/CSGFactories.js\")\r\nconst {fromSides} = __webpack_require__(/*! ../CAGFactories */ \"../../convert/jscad/src/core/CAGFactories.js\")\r\n\r\n/**\r\n   * Returns a cannoicalized version of the input csg/cag : ie every very close\r\n   * points get deduplicated\r\n   * @returns {CSG|CAG}\r\n   * @example\r\n   * let rawInput = someCSGORCAGMakingFunction()\r\n   * let canonicalized= canonicalize(rawInput)\r\n   */\r\nconst canonicalize = function (csgOrCAG, options) {\r\n  if (csgOrCAG.isCanonicalized) {\r\n    return csgOrCAG\r\n  } else {\r\n    if ('sides' in csgOrCAG) {\r\n      return canonicalizeCAG(csgOrCAG, options)\r\n    } else {\r\n      return canonicalizeCSG(csgOrCAG, options)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n   * Returns a cannoicalized version of the input csg : ie every very close\r\n   * points get deduplicated\r\n   * @returns {CSG}\r\n   * @example\r\n   * let rawCSG = someCSGMakingFunction()\r\n   * let canonicalizedCSG = canonicalize(rawCSG)\r\n   */\r\nconst canonicalizeCSG = function (csg, options) {\r\n  if (csg.isCanonicalized) {\r\n    return csg\r\n  } else {\r\n    const factory = new FuzzyCSGFactory()\r\n    let result = CSGFromCSGFuzzyFactory(factory, csg)\r\n    result.isCanonicalized = true\r\n    result.isRetesselated = csg.isRetesselated\r\n    result.properties = csg.properties // keep original properties\r\n    return result\r\n  }\r\n}\r\n\r\nconst canonicalizeCAG = function (cag, options) {\r\n  if (cag.isCanonicalized) {\r\n    return cag\r\n  } else {\r\n    let factory = new FuzzyCAGFactory()\r\n    let result = CAGFromCAGFuzzyFactory(factory, cag)\r\n    result.isCanonicalized = true\r\n    return result\r\n  }\r\n}\r\n\r\nconst CSGFromCSGFuzzyFactory = function (factory, sourcecsg) {\r\n  let _this = factory\r\n  let newpolygons = []\r\n  sourcecsg.polygons.forEach(function (polygon) {\r\n    let newpolygon = _this.getPolygon(polygon)\r\n          // see getPolygon above: we may get a polygon with no vertices, discard it:\r\n    if (newpolygon.vertices.length >= 3) {\r\n      newpolygons.push(newpolygon)\r\n    }\r\n  })\r\n  return fromPolygons(newpolygons)\r\n}\r\n\r\nconst CAGFromCAGFuzzyFactory = function (factory, sourcecag) {\r\n  let _this = factory\r\n  let newsides = sourcecag.sides.map(function (side) {\r\n    return _this.getSide(side)\r\n  })\r\n  // remove bad sides (mostly a user input issue)\r\n  .filter(function (side) {\r\n    return side.length() > EPS\r\n  })\r\n  return fromSides(newsides)\r\n}\r\n\r\nmodule.exports = canonicalize\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/utils/canonicalize.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/utils/csgMeasurements.js":
/*!********************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/utils/csgMeasurements.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector3D = __webpack_require__(/*! ../math/Vector3 */ \"../../convert/jscad/src/core/math/Vector3.js\")\r\n\r\n/**\r\n   * Returns an array of Vector3D, providing minimum coordinates and maximum coordinates\r\n   * of this solid.\r\n   * @returns {Vector3D[]}\r\n   * @example\r\n   * let bounds = A.getBounds()\r\n   * let minX = bounds[0].x\r\n   */\r\nconst bounds = function (csg) {\r\n  if (!csg.cachedBoundingBox) {\r\n    let minpoint = new Vector3D(0, 0, 0)\r\n    let maxpoint = new Vector3D(0, 0, 0)\r\n    let polygons = csg.polygons\r\n    let numpolygons = polygons.length\r\n    for (let i = 0; i < numpolygons; i++) {\r\n      let polygon = polygons[i]\r\n      let bounds = polygon.boundingBox()\r\n      if (i === 0) {\r\n        minpoint = bounds[0]\r\n        maxpoint = bounds[1]\r\n      } else {\r\n        minpoint = minpoint.min(bounds[0])\r\n        maxpoint = maxpoint.max(bounds[1])\r\n      }\r\n    }\r\n      // FIXME: not ideal, we are mutating the input, we need to move some of it out\r\n    csg.cachedBoundingBox = [minpoint, maxpoint]\r\n  }\r\n  return csg.cachedBoundingBox\r\n}\r\n\r\nconst volume = function (csg) {\r\n  let result = csg.toTriangles().map(function (triPoly) {\r\n    return triPoly.getTetraFeatures(['volume'])\r\n  })\r\n  console.log('volume', result)\r\n}\r\n\r\nconst area = function (csg) {\r\n  let result = csg.toTriangles().map(function (triPoly) {\r\n    return triPoly.getTetraFeatures(['area'])\r\n  })\r\n  console.log('area', result)\r\n}\r\n\r\nmodule.exports = {bounds, volume, area}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/utils/csgMeasurements.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/utils/csgProjections.js":
/*!*******************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/utils/csgProjections.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const CAG = __webpack_require__(/*! ../CAG */ \"../../convert/jscad/src/core/CAG.js\") // FIXME: circular dependency !\r\nconst {EPS} = __webpack_require__(/*! ../constants */ \"../../convert/jscad/src/core/constants.js\")\r\n\r\n// project the 3D CSG onto a plane\r\n// This returns a 2D CAG with the 'shadow' shape of the 3D solid when projected onto the\r\n // plane represented by the orthonormal basis\r\nconst projectToOrthoNormalBasis = function (csg, orthobasis) {\r\n  let cags = []\r\n  csg.polygons.filter(function (p) {\r\n    // only return polys in plane, others may disturb result\r\n    return p.plane.normal.minus(orthobasis.plane.normal).lengthSquared() < (EPS * EPS)\r\n  })\r\n  .map(function (polygon) {\r\n    let cag = polygon.projectToOrthoNormalBasis(orthobasis)\r\n    if (cag.sides.length > 0) {\r\n      cags.push(cag)\r\n    }\r\n  })\r\n  let result = new CAG().union(cags)\r\n  return result\r\n}\r\n\r\nmodule.exports = {projectToOrthoNormalBasis}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/utils/csgProjections.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/utils/fixTJunctions.js":
/*!******************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/utils/fixTJunctions.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {EPS} = __webpack_require__(/*! ../constants */ \"../../convert/jscad/src/core/constants.js\")\r\nconst Polygon = __webpack_require__(/*! ../math/Polygon3 */ \"../../convert/jscad/src/core/math/Polygon3.js\")\r\nconst Plane = __webpack_require__(/*! ../math/Plane */ \"../../convert/jscad/src/core/math/Plane.js\")\r\n\r\nfunction addSide (sidemap, vertextag2sidestart, vertextag2sideend, vertex0, vertex1, polygonindex) {\r\n  let starttag = vertex0.getTag()\r\n  let endtag = vertex1.getTag()\r\n  if (starttag === endtag) throw new Error('Assertion failed')\r\n  let newsidetag = starttag + '/' + endtag\r\n  let reversesidetag = endtag + '/' + starttag\r\n  if (reversesidetag in sidemap) {\r\n    // we have a matching reverse oriented side.\r\n    // Instead of adding the new side, cancel out the reverse side:\r\n    // console.log(\"addSide(\"+newsidetag+\") has reverse side:\");\r\n    deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, vertex1, vertex0, null)\r\n    return null\r\n  }\r\n  //  console.log(\"addSide(\"+newsidetag+\")\");\r\n  let newsideobj = {\r\n    vertex0: vertex0,\r\n    vertex1: vertex1,\r\n    polygonindex: polygonindex\r\n  }\r\n  if (!(newsidetag in sidemap)) {\r\n    sidemap[newsidetag] = [newsideobj]\r\n  } else {\r\n    sidemap[newsidetag].push(newsideobj)\r\n  }\r\n  if (starttag in vertextag2sidestart) {\r\n    vertextag2sidestart[starttag].push(newsidetag)\r\n  } else {\r\n    vertextag2sidestart[starttag] = [newsidetag]\r\n  }\r\n  if (endtag in vertextag2sideend) {\r\n    vertextag2sideend[endtag].push(newsidetag)\r\n  } else {\r\n    vertextag2sideend[endtag] = [newsidetag]\r\n  }\r\n  return newsidetag\r\n}\r\n\r\nfunction deleteSide (sidemap, vertextag2sidestart, vertextag2sideend, vertex0, vertex1, polygonindex) {\r\n  let starttag = vertex0.getTag()\r\n  let endtag = vertex1.getTag()\r\n  let sidetag = starttag + '/' + endtag\r\n  // console.log(\"deleteSide(\"+sidetag+\")\");\r\n  if (!(sidetag in sidemap)) throw new Error('Assertion failed')\r\n  let idx = -1\r\n  let sideobjs = sidemap[sidetag]\r\n  for (let i = 0; i < sideobjs.length; i++) {\r\n    let sideobj = sideobjs[i]\r\n    if (sideobj.vertex0 !== vertex0) continue\r\n    if (sideobj.vertex1 !== vertex1) continue\r\n    if (polygonindex !== null) {\r\n      if (sideobj.polygonindex !== polygonindex) continue\r\n    }\r\n    idx = i\r\n    break\r\n  }\r\n  if (idx < 0) throw new Error('Assertion failed')\r\n  sideobjs.splice(idx, 1)\r\n  if (sideobjs.length === 0) {\r\n    delete sidemap[sidetag]\r\n  }\r\n  idx = vertextag2sidestart[starttag].indexOf(sidetag)\r\n  if (idx < 0) throw new Error('Assertion failed')\r\n  vertextag2sidestart[starttag].splice(idx, 1)\r\n  if (vertextag2sidestart[starttag].length === 0) {\r\n    delete vertextag2sidestart[starttag]\r\n  }\r\n\r\n  idx = vertextag2sideend[endtag].indexOf(sidetag)\r\n  if (idx < 0) throw new Error('Assertion failed')\r\n  vertextag2sideend[endtag].splice(idx, 1)\r\n  if (vertextag2sideend[endtag].length === 0) {\r\n    delete vertextag2sideend[endtag]\r\n  }\r\n}\r\n\r\n/*\r\n     fixTJunctions:\r\n\r\n     Suppose we have two polygons ACDB and EDGF:\r\n\r\n      A-----B\r\n      |     |\r\n      |     E--F\r\n      |     |  |\r\n      C-----D--G\r\n\r\n     Note that vertex E forms a T-junction on the side BD. In this case some STL slicers will complain\r\n     that the solid is not watertight. This is because the watertightness check is done by checking if\r\n     each side DE is matched by another side ED.\r\n\r\n     This function will return a new solid with ACDB replaced by ACDEB\r\n\r\n     Note that this can create polygons that are slightly non-convex (due to rounding errors). Therefore the result should\r\n     not be used for further CSG operations!\r\n*/\r\nconst fixTJunctions = function (fromPolygons, csg) {\r\n  csg = csg.canonicalized()\r\n  let sidemap = {}\r\n\r\n  // STEP 1\r\n  for (let polygonindex = 0; polygonindex < csg.polygons.length; polygonindex++) {\r\n    let polygon = csg.polygons[polygonindex]\r\n    let numvertices = polygon.vertices.length\r\n    // should be true\r\n    if (numvertices >= 3) {\r\n      let vertex = polygon.vertices[0]\r\n      let vertextag = vertex.getTag()\r\n      for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {\r\n        let nextvertexindex = vertexindex + 1\r\n        if (nextvertexindex === numvertices) nextvertexindex = 0\r\n        let nextvertex = polygon.vertices[nextvertexindex]\r\n        let nextvertextag = nextvertex.getTag()\r\n        let sidetag = vertextag + '/' + nextvertextag\r\n        let reversesidetag = nextvertextag + '/' + vertextag\r\n        if (reversesidetag in sidemap) {\r\n          // this side matches the same side in another polygon. Remove from sidemap:\r\n          let ar = sidemap[reversesidetag]\r\n          ar.splice(-1, 1)\r\n          if (ar.length === 0) {\r\n            delete sidemap[reversesidetag]\r\n          }\r\n        } else {\r\n          let sideobj = {\r\n            vertex0: vertex,\r\n            vertex1: nextvertex,\r\n            polygonindex: polygonindex\r\n          }\r\n          if (!(sidetag in sidemap)) {\r\n            sidemap[sidetag] = [sideobj]\r\n          } else {\r\n            sidemap[sidetag].push(sideobj)\r\n          }\r\n        }\r\n        vertex = nextvertex\r\n        vertextag = nextvertextag\r\n      }\r\n    }\r\n  }\r\n  // STEP 2\r\n  // now sidemap contains 'unmatched' sides\r\n  // i.e. side AB in one polygon does not have a matching side BA in another polygon\r\n  let vertextag2sidestart = {}\r\n  let vertextag2sideend = {}\r\n  let sidestocheck = {}\r\n  let sidemapisempty = true\r\n  for (let sidetag in sidemap) {\r\n    sidemapisempty = false\r\n    sidestocheck[sidetag] = true\r\n    sidemap[sidetag].map(function (sideobj) {\r\n      let starttag = sideobj.vertex0.getTag()\r\n      let endtag = sideobj.vertex1.getTag()\r\n      if (starttag in vertextag2sidestart) {\r\n        vertextag2sidestart[starttag].push(sidetag)\r\n      } else {\r\n        vertextag2sidestart[starttag] = [sidetag]\r\n      }\r\n      if (endtag in vertextag2sideend) {\r\n        vertextag2sideend[endtag].push(sidetag)\r\n      } else {\r\n        vertextag2sideend[endtag] = [sidetag]\r\n      }\r\n    })\r\n  }\r\n\r\n  // STEP 3 : if sidemap is not empty\r\n  if (!sidemapisempty) {\r\n    // make a copy of the polygons array, since we are going to modify it:\r\n    let polygons = csg.polygons.slice(0)\r\n    while (true) {\r\n      let sidemapisempty = true\r\n      for (let sidetag in sidemap) {\r\n        sidemapisempty = false\r\n        sidestocheck[sidetag] = true\r\n      }\r\n      if (sidemapisempty) break\r\n      let donesomething = false\r\n      while (true) {\r\n        let sidetagtocheck = null\r\n        for (let sidetag in sidestocheck) {\r\n          sidetagtocheck = sidetag\r\n          break // FIXME  : say what now ?\r\n        }\r\n        if (sidetagtocheck === null) break // sidestocheck is empty, we're done!\r\n        let donewithside = true\r\n        if (sidetagtocheck in sidemap) {\r\n          let sideobjs = sidemap[sidetagtocheck]\r\n          if (sideobjs.length === 0) throw new Error('Assertion failed')\r\n          let sideobj = sideobjs[0]\r\n          for (let directionindex = 0; directionindex < 2; directionindex++) {\r\n            let startvertex = (directionindex === 0) ? sideobj.vertex0 : sideobj.vertex1\r\n            let endvertex = (directionindex === 0) ? sideobj.vertex1 : sideobj.vertex0\r\n            let startvertextag = startvertex.getTag()\r\n            let endvertextag = endvertex.getTag()\r\n            let matchingsides = []\r\n            if (directionindex === 0) {\r\n              if (startvertextag in vertextag2sideend) {\r\n                matchingsides = vertextag2sideend[startvertextag]\r\n              }\r\n            } else {\r\n              if (startvertextag in vertextag2sidestart) {\r\n                matchingsides = vertextag2sidestart[startvertextag]\r\n              }\r\n            }\r\n            for (let matchingsideindex = 0; matchingsideindex < matchingsides.length; matchingsideindex++) {\r\n              let matchingsidetag = matchingsides[matchingsideindex]\r\n              let matchingside = sidemap[matchingsidetag][0]\r\n              let matchingsidestartvertex = (directionindex === 0) ? matchingside.vertex0 : matchingside.vertex1\r\n              let matchingsideendvertex = (directionindex === 0) ? matchingside.vertex1 : matchingside.vertex0\r\n              let matchingsidestartvertextag = matchingsidestartvertex.getTag()\r\n              let matchingsideendvertextag = matchingsideendvertex.getTag()\r\n              if (matchingsideendvertextag !== startvertextag) throw new Error('Assertion failed')\r\n              if (matchingsidestartvertextag === endvertextag) {\r\n                // matchingside cancels sidetagtocheck\r\n                deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, startvertex, endvertex, null)\r\n                deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, endvertex, startvertex, null)\r\n                donewithside = false\r\n                directionindex = 2 // skip reverse direction check\r\n                donesomething = true\r\n                break\r\n              } else {\r\n                let startpos = startvertex.pos\r\n                let endpos = endvertex.pos\r\n                let checkpos = matchingsidestartvertex.pos\r\n                let direction = checkpos.minus(startpos)\r\n                // Now we need to check if endpos is on the line startpos-checkpos:\r\n                let t = endpos.minus(startpos).dot(direction) / direction.dot(direction)\r\n                if ((t > 0) && (t < 1)) {\r\n                  let closestpoint = startpos.plus(direction.times(t))\r\n                  let distancesquared = closestpoint.distanceToSquared(endpos)\r\n                  if (distancesquared < (EPS * EPS)) {\r\n                    // Yes it's a t-junction! We need to split matchingside in two:\r\n                    let polygonindex = matchingside.polygonindex\r\n                    let polygon = polygons[polygonindex]\r\n                    // find the index of startvertextag in polygon:\r\n                    let insertionvertextag = matchingside.vertex1.getTag()\r\n                    let insertionvertextagindex = -1\r\n                    for (let i = 0; i < polygon.vertices.length; i++) {\r\n                      if (polygon.vertices[i].getTag() === insertionvertextag) {\r\n                        insertionvertextagindex = i\r\n                        break\r\n                      }\r\n                    }\r\n                    if (insertionvertextagindex < 0) throw new Error('Assertion failed')\r\n                    // split the side by inserting the vertex:\r\n                    let newvertices = polygon.vertices.slice(0)\r\n                    newvertices.splice(insertionvertextagindex, 0, endvertex)\r\n                    let newpolygon = new Polygon(newvertices, polygon.shared /* polygon.plane */)\r\n\r\n                    // calculate plane with differents point\r\n                    if (isNaN(newpolygon.plane.w)) {\r\n                      let found = false\r\n                      let loop = function (callback) {\r\n                        newpolygon.vertices.forEach(function (item) {\r\n                          if (found) return\r\n                          callback(item)\r\n                        })\r\n                      }\r\n\r\n                      loop(function (a) {\r\n                        loop(function (b) {\r\n                          loop(function (c) {\r\n                            newpolygon.plane = Plane.fromPoints(a.pos, b.pos, c.pos)\r\n                            if (!isNaN(newpolygon.plane.w)) {\r\n                              found = true\r\n                            }\r\n                          })\r\n                        })\r\n                      })\r\n                    }\r\n                    polygons[polygonindex] = newpolygon\r\n                    // remove the original sides from our maps\r\n                    // deleteSide(sideobj.vertex0, sideobj.vertex1, null)\r\n                    deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, matchingside.vertex0, matchingside.vertex1, polygonindex)\r\n                    let newsidetag1 = addSide(sidemap, vertextag2sidestart, vertextag2sideend, matchingside.vertex0, endvertex, polygonindex)\r\n                    let newsidetag2 = addSide(sidemap, vertextag2sidestart, vertextag2sideend, endvertex, matchingside.vertex1, polygonindex)\r\n                    if (newsidetag1 !== null) sidestocheck[newsidetag1] = true\r\n                    if (newsidetag2 !== null) sidestocheck[newsidetag2] = true\r\n                    donewithside = false\r\n                    directionindex = 2 // skip reverse direction check\r\n                    donesomething = true\r\n                    break\r\n                  } // if(distancesquared < 1e-10)\r\n                } // if( (t > 0) && (t < 1) )\r\n              } // if(endingstidestartvertextag === endvertextag)\r\n            } // for matchingsideindex\r\n          } // for directionindex\r\n        } // if(sidetagtocheck in sidemap)\r\n        if (donewithside) {\r\n          delete sidestocheck[sidetagtocheck]\r\n        }\r\n      }\r\n      if (!donesomething) break\r\n    }\r\n    let newcsg = fromPolygons(polygons)\r\n    newcsg.properties = csg.properties\r\n    newcsg.isCanonicalized = true\r\n    newcsg.isRetesselated = true\r\n    csg = newcsg\r\n  }\r\n\r\n  // FIXME : what is even the point of this ???\r\n  /* sidemapisempty = true\r\n  for (let sidetag in sidemap) {\r\n    sidemapisempty = false\r\n    break\r\n  }\r\n  */\r\n\r\n  return csg\r\n}\r\n\r\nmodule.exports = fixTJunctions\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/utils/fixTJunctions.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/utils/retesellate.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/utils/retesellate.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const FuzzyCSGFactory = __webpack_require__(/*! ../FuzzyFactory3d */ \"../../convert/jscad/src/core/FuzzyFactory3d.js\")\r\nconst reTesselateCoplanarPolygons = __webpack_require__(/*! ../math/reTesselateCoplanarPolygons */ \"../../convert/jscad/src/core/math/reTesselateCoplanarPolygons.js\")\r\nconst {fromPolygons} = __webpack_require__(/*! ../CSGFactories */ \"../../convert/jscad/src/core/CSGFactories.js\")\r\n\r\nconst reTesselate = function (csg) {\r\n  if (csg.isRetesselated) {\r\n    return csg\r\n  } else {\r\n    let polygonsPerPlane = {}\r\n    let isCanonicalized = csg.isCanonicalized\r\n    let fuzzyfactory = new FuzzyCSGFactory()\r\n    csg.polygons.map(function (polygon) {\r\n      let plane = polygon.plane\r\n      let shared = polygon.shared\r\n      if (!isCanonicalized) {\r\n        // in order to identify polygons having the same plane, we need to canonicalize the planes\r\n        // We don't have to do a full canonizalization (including vertices), to save time only do the planes and the shared data:\r\n        plane = fuzzyfactory.getPlane(plane)\r\n        shared = fuzzyfactory.getPolygonShared(shared)\r\n      }\r\n      let tag = plane.getTag() + '/' + shared.getTag()\r\n      if (!(tag in polygonsPerPlane)) {\r\n        polygonsPerPlane[tag] = [polygon]\r\n      } else {\r\n        polygonsPerPlane[tag].push(polygon)\r\n      }\r\n    })\r\n    let destpolygons = []\r\n    for (let planetag in polygonsPerPlane) {\r\n      let sourcepolygons = polygonsPerPlane[planetag]\r\n      if (sourcepolygons.length < 2) {\r\n        destpolygons = destpolygons.concat(sourcepolygons)\r\n      } else {\r\n        let retesselayedpolygons = []\r\n        reTesselateCoplanarPolygons(sourcepolygons, retesselayedpolygons)\r\n        destpolygons = destpolygons.concat(retesselayedpolygons)\r\n      }\r\n    }\r\n    let result = fromPolygons(destpolygons)\r\n    result.isRetesselated = true\r\n    // result = result.canonicalized();\r\n    result.properties = csg.properties // keep original properties\r\n    return result\r\n  }\r\n}\r\n\r\nmodule.exports = reTesselate\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/utils/retesellate.js?");

/***/ }),

/***/ "../../convert/jscad/src/core/utils/toArray.js":
/*!************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/utils/toArray.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* converts input data to array if it is not already an array */\r\nfunction toArray (data) {\r\n  if (!data) return []\r\n  if (data.constructor !== Array) return [data]\r\n  return data\r\n}\r\n\r\nmodule.exports = toArray\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/core/utils/toArray.js?");

/***/ }),

/***/ "../../convert/jscad/src/fonts/single-line/hershey/simplex.js":
/*!***************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/fonts/single-line/hershey/simplex.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// -- data source from from http://paulbourke.net/dataformats/hershey/\r\n// -- reduced to save some bytes...\r\n// { [ascii code]: [width, x, y, ...] } - undefined value as path separator\r\nmodule.exports = {\r\n  height: 14,\r\n  32:[16],\r\n  33:[10,5,21,5,7,,5,2,4,1,5,0,6,1,5,2],\r\n  34:[16,4,21,4,14,,12,21,12,14],\r\n  35:[21,11,25,4,-7,,17,25,10,-7,,4,12,18,12,,3,6,17,6],\r\n  36:[20,8,25,8,-4,,12,25,12,-4,,17,18,15,20,12,21,8,21,5,20,3,18,3,16,4,14,5,13,7,12,13,10,15,9,16,8,17,6,17,3,15,1,12,0,8,0,5,1,3,3],\r\n  37:[24,21,21,3,0,,8,21,10,19,10,17,9,15,7,14,5,14,3,16,3,18,4,20,6,21,8,21,10,20,13,19,16,19,19,20,21,21,,17,7,15,6,14,4,14,2,16,0,18,0,20,1,21,3,21,5,19,7,17,7],\r\n  38:[26,23,12,23,13,22,14,21,14,20,13,19,11,17,6,15,3,13,1,11,0,7,0,5,1,4,2,3,4,3,6,4,8,5,9,12,13,13,14,14,16,14,18,13,20,11,21,9,20,8,18,8,16,9,13,11,10,16,3,18,1,20,0,22,0,23,1,23,2],\r\n  39:[10,5,19,4,20,5,21,6,20,6,18,5,16,4,15],\r\n  40:[14,11,25,9,23,7,20,5,16,4,11,4,7,5,2,7,-2,9,-5,11,-7],\r\n  41:[14,3,25,5,23,7,20,9,16,10,11,10,7,9,2,7,-2,5,-5,3,-7],\r\n  42:[16,8,21,8,9,,3,18,13,12,,13,18,3,12],\r\n  43:[26,13,18,13,0,,4,9,22,9],\r\n  44:[10,6,1,5,0,4,1,5,2,6,1,6,-1,5,-3,4,-4],\r\n  45:[26,4,9,22,9],\r\n  46:[10,5,2,4,1,5,0,6,1,5,2],\r\n  47:[22,20,25,2,-7],\r\n  48:[20,9,21,6,20,4,17,3,12,3,9,4,4,6,1,9,0,11,0,14,1,16,4,17,9,17,12,16,17,14,20,11,21,9,21],\r\n  49:[20,6,17,8,18,11,21,11,0],\r\n  50:[20,4,16,4,17,5,19,6,20,8,21,12,21,14,20,15,19,16,17,16,15,15,13,13,10,3,0,17,0],\r\n  51:[20,5,21,16,21,10,13,13,13,15,12,16,11,17,8,17,6,16,3,14,1,11,0,8,0,5,1,4,2,3,4],\r\n  52:[20,13,21,3,7,18,7,,13,21,13,0],\r\n  53:[20,15,21,5,21,4,12,5,13,8,14,11,14,14,13,16,11,17,8,17,6,16,3,14,1,11,0,8,0,5,1,4,2,3,4],\r\n  54:[20,16,18,15,20,12,21,10,21,7,20,5,17,4,12,4,7,5,3,7,1,10,0,11,0,14,1,16,3,17,6,17,7,16,10,14,12,11,13,10,13,7,12,5,10,4,7],\r\n  55:[20,17,21,7,0,,3,21,17,21],\r\n  56:[20,8,21,5,20,4,18,4,16,5,14,7,13,11,12,14,11,16,9,17,7,17,4,16,2,15,1,12,0,8,0,5,1,4,2,3,4,3,7,4,9,6,11,9,12,13,13,15,14,16,16,16,18,15,20,12,21,8,21],\r\n  57:[20,16,14,15,11,13,9,10,8,9,8,6,9,4,11,3,14,3,15,4,18,6,20,9,21,10,21,13,20,15,18,16,14,16,9,15,4,13,1,10,0,8,0,5,1,4,3],\r\n  58:[10,5,14,4,13,5,12,6,13,5,14,,5,2,4,1,5,0,6,1,5,2],\r\n  59:[10,5,14,4,13,5,12,6,13,5,14,,6,1,5,0,4,1,5,2,6,1,6,-1,5,-3,4,-4],\r\n  60:[24,20,18,4,9,20,0],\r\n  61:[26,4,12,22,12,,4,6,22,6],\r\n  62:[24,4,18,20,9,4,0],\r\n  63:[18,3,16,3,17,4,19,5,20,7,21,11,21,13,20,14,19,15,17,15,15,14,13,13,12,9,10,9,7,,9,2,8,1,9,0,10,1,9,2],\r\n  64:[27,18,13,17,15,15,16,12,16,10,15,9,14,8,11,8,8,9,6,11,5,14,5,16,6,17,8,,12,16,10,14,9,11,9,8,10,6,11,5,,18,16,17,8,17,6,19,5,21,5,23,7,24,10,24,12,23,15,22,17,20,19,18,20,15,21,12,21,9,20,7,19,5,17,4,15,3,12,3,9,4,6,5,4,7,2,9,1,12,0,15,0,18,1,20,2,21,3,,19,16,18,8,18,6,19,5],\r\n  65:[18,9,21,1,0,,9,21,17,0,,4,7,14,7],\r\n  66:[21,4,21,4,0,,4,21,13,21,16,20,17,19,18,17,18,15,17,13,16,12,13,11,,4,11,13,11,16,10,17,9,18,7,18,4,17,2,16,1,13,0,4,0],\r\n  67:[21,18,16,17,18,15,20,13,21,9,21,7,20,5,18,4,16,3,13,3,8,4,5,5,3,7,1,9,0,13,0,15,1,17,3,18,5],\r\n  68:[21,4,21,4,0,,4,21,11,21,14,20,16,18,17,16,18,13,18,8,17,5,16,3,14,1,11,0,4,0],\r\n  69:[19,4,21,4,0,,4,21,17,21,,4,11,12,11,,4,0,17,0],\r\n  70:[18,4,21,4,0,,4,21,17,21,,4,11,12,11],\r\n  71:[21,18,16,17,18,15,20,13,21,9,21,7,20,5,18,4,16,3,13,3,8,4,5,5,3,7,1,9,0,13,0,15,1,17,3,18,5,18,8,,13,8,18,8],\r\n  72:[22,4,21,4,0,,18,21,18,0,,4,11,18,11],\r\n  73:[8,4,21,4,0],\r\n  74:[16,12,21,12,5,11,2,10,1,8,0,6,0,4,1,3,2,2,5,2,7],\r\n  75:[21,4,21,4,0,,18,21,4,7,,9,12,18,0],\r\n  76:[17,4,21,4,0,,4,0,16,0],\r\n  77:[24,4,21,4,0,,4,21,12,0,,20,21,12,0,,20,21,20,0],\r\n  78:[22,4,21,4,0,,4,21,18,0,,18,21,18,0],\r\n  79:[22,9,21,7,20,5,18,4,16,3,13,3,8,4,5,5,3,7,1,9,0,13,0,15,1,17,3,18,5,19,8,19,13,18,16,17,18,15,20,13,21,9,21],\r\n  80:[21,4,21,4,0,,4,21,13,21,16,20,17,19,18,17,18,14,17,12,16,11,13,10,4,10],\r\n  81:[22,9,21,7,20,5,18,4,16,3,13,3,8,4,5,5,3,7,1,9,0,13,0,15,1,17,3,18,5,19,8,19,13,18,16,17,18,15,20,13,21,9,21,,12,4,18,-2],\r\n  82:[21,4,21,4,0,,4,21,13,21,16,20,17,19,18,17,18,15,17,13,16,12,13,11,4,11,,11,11,18,0],\r\n  83:[20,17,18,15,20,12,21,8,21,5,20,3,18,3,16,4,14,5,13,7,12,13,10,15,9,16,8,17,6,17,3,15,1,12,0,8,0,5,1,3,3],\r\n  84:[16,8,21,8,0,,1,21,15,21],\r\n  85:[22,4,21,4,6,5,3,7,1,10,0,12,0,15,1,17,3,18,6,18,21],\r\n  86:[18,1,21,9,0,,17,21,9,0],\r\n  87:[24,2,21,7,0,,12,21,7,0,,12,21,17,0,,22,21,17,0],\r\n  88:[20,3,21,17,0,,17,21,3,0],\r\n  89:[18,1,21,9,11,9,0,,17,21,9,11],\r\n  90:[20,17,21,3,0,,3,21,17,21,,3,0,17,0],\r\n  91:[14,4,25,4,-7,,5,25,5,-7,,4,25,11,25,,4,-7,11,-7],\r\n  92:[14,0,21,14,-3],\r\n  93:[14,9,25,9,-7,,10,25,10,-7,,3,25,10,25,,3,-7,10,-7],\r\n  94:[16,6,15,8,18,10,15,,3,12,8,17,13,12,,8,17,8,0],\r\n  95:[16,0,-2,16,-2],\r\n  96:[10,6,21,5,20,4,18,4,16,5,15,6,16,5,17],\r\n  97:[19,15,14,15,0,,15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3],\r\n  98:[19,4,21,4,0,,4,11,6,13,8,14,11,14,13,13,15,11,16,8,16,6,15,3,13,1,11,0,8,0,6,1,4,3],\r\n  99:[18,15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3],\r\n  100:[19,15,21,15,0,,15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3],\r\n  101:[18,3,8,15,8,15,10,14,12,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3],\r\n  102:[12,10,21,8,21,6,20,5,17,5,0,,2,14,9,14],\r\n  103:[19,15,14,15,-2,14,-5,13,-6,11,-7,8,-7,6,-6,,15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3],\r\n  104:[19,4,21,4,0,,4,10,7,13,9,14,12,14,14,13,15,10,15,0],\r\n  105:[8,3,21,4,20,5,21,4,22,3,21,,4,14,4,0],\r\n  106:[10,5,21,6,20,7,21,6,22,5,21,,6,14,6,-3,5,-6,3,-7,1,-7],\r\n  107:[17,4,21,4,0,,14,14,4,4,,8,8,15,0],\r\n  108:[8,4,21,4,0],\r\n  109:[30,4,14,4,0,,4,10,7,13,9,14,12,14,14,13,15,10,15,0,,15,10,18,13,20,14,23,14,25,13,26,10,26,0],\r\n  110:[19,4,14,4,0,,4,10,7,13,9,14,12,14,14,13,15,10,15,0],\r\n  111:[19,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3,16,6,16,8,15,11,13,13,11,14,8,14],\r\n  112:[19,4,14,4,-7,,4,11,6,13,8,14,11,14,13,13,15,11,16,8,16,6,15,3,13,1,11,0,8,0,6,1,4,3],\r\n  113:[19,15,14,15,-7,,15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3],\r\n  114:[13,4,14,4,0,,4,8,5,11,7,13,9,14,12,14],\r\n  115:[17,14,11,13,13,10,14,7,14,4,13,3,11,4,9,6,8,11,7,13,6,14,4,14,3,13,1,10,0,7,0,4,1,3,3],\r\n  116:[12,5,21,5,4,6,1,8,0,10,0,,2,14,9,14],\r\n  117:[19,4,14,4,4,5,1,7,0,10,0,12,1,15,4,,15,14,15,0],\r\n  118:[16,2,14,8,0,,14,14,8,0],\r\n  119:[22,3,14,7,0,,11,14,7,0,,11,14,15,0,,19,14,15,0],\r\n  120:[17,3,14,14,0,,14,14,3,0],\r\n  121:[16,2,14,8,0,,14,14,8,0,6,-4,4,-6,2,-7,1,-7],\r\n  122:[17,14,14,3,0,,3,14,14,14,,3,0,14,0],\r\n  123:[14,9,25,7,24,6,23,5,21,5,19,6,17,7,16,8,14,8,12,6,10,,7,24,6,22,6,20,7,18,8,17,9,15,9,13,8,11,4,9,8,7,9,5,9,3,8,1,7,0,6,-2,6,-4,7,-6,,6,8,8,6,8,4,7,2,6,1,5,-1,5,-3,6,-5,7,-6,9,-7],\r\n  124:[8,4,25,4,-7],\r\n  125:[14,5,25,7,24,8,23,9,21,9,19,8,17,7,16,6,14,6,12,8,10,,7,24,8,22,8,20,7,18,6,17,5,15,5,13,6,11,10,9,6,7,5,5,5,3,6,1,7,0,8,-2,8,-4,7,-6,,8,8,6,6,6,4,7,2,8,1,9,-1,9,-3,8,-5,7,-6,5,-7],\r\n  126:[24,3,6,3,8,4,11,6,12,8,12,10,11,14,8,16,7,18,7,20,8,21,10,,3,8,4,10,6,11,8,11,10,10,14,7,16,6,18,6,20,7,21,10,21,12]\r\n}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/jscad/src/fonts/single-line/hershey/simplex.js?");

/***/ }),

/***/ "../../convert/pdf/main.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/pdf/main.js ***!
  \****************************************************************/
/*! exports provided: toPdf */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _toPdf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toPdf */ \"../../convert/pdf/toPdf.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toPdf\", function() { return _toPdf__WEBPACK_IMPORTED_MODULE_0__[\"toPdf\"]; });\n\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/pdf/main.js?");

/***/ }),

/***/ "../../convert/pdf/toPdf.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/pdf/toPdf.js ***!
  \*****************************************************************/
/*! exports provided: toPdf */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toPdf\", function() { return toPdf; });\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n/* harmony import */ var _jsxcad_algorithm_assembly__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-assembly */ \"../../algorithm/assembly/main.js\");\n\r\n\r\n\r\n\r\n\r\nconst X = 0;\r\nconst Y = 1;\r\n\r\n// Not entirely sure how conformant this is, but it seems to work for simple\r\n// cases.\r\n\r\n// Width are height are in post-script points.\r\nconst header = ({ width = 595, height = 841, lineWidth = 0.096 }) =>\r\n  [`%PDF-1.5`,\r\n   `1 0 obj << /Pages 2 0 R /Type /Catalog >> endobj`,\r\n   `2 0 obj << /Count 1 /Kids [ 3 0 R ] /Type /Pages >> endobj`,\r\n   `3 0 obj <<`,\r\n   `  /Contents 4 0 R`,\r\n   `  /MediaBox [ 0 0 ${width.toFixed(9)} ${height.toFixed(9)} ]`,\r\n   `  /Parent 2 0 R`,\r\n   `  /Type /Page`,\r\n   `>>`,\r\n   `endobj`,\r\n   `4 0 obj << >>`,\r\n   `stream`,\r\n   `${lineWidth.toFixed(9)} w`];\r\n\r\nconst footer =\r\n   [`endstream`,\r\n    `endobj`,\r\n    `trailer << /Root 1 0 R /Size 4 >>`,\r\n    `%%EOF`];\r\n\r\nconst geometryToPaths = (geometry) => {\r\n  const pathsets = [];\r\n  Object(_jsxcad_algorithm_assembly__WEBPACK_IMPORTED_MODULE_2__[\"eachItem\"])(geometry,\r\n           item => {\r\n             if (item.paths) {\r\n               pathsets.push(item.paths);\r\n             }\r\n             if (item.z0Surface) {\r\n               pathsets.push(item.z0Surface);\r\n             }\r\n           });\r\n  return [].concat(...pathsets);\r\n};\r\n\r\nconst toPdf = ({ orientation = 'portrait', unit = 'mm', lineWidth = 0.096, size = [210, 297] }, geometry) => {\r\n  const paths = geometryToPaths(geometry);\r\n  // This is the size of a post-script point in mm.\r\n  const pointSize = 0.352777778;\r\n  const scale = 1 / pointSize;\r\n  const [width, height] = size;\r\n  const lines = [];\r\n  const [min, max] = Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__[\"measureBoundingBox\"])(paths);\r\n  // Currently the origin is at the bottom left.\r\n  // Subtract the x min, and the y max, then add the page height to bring\r\n  // it up to the top left. This positions the origin nicely for laser\r\n  // cutting and printing.\r\n  const offset = [-min[X] * scale, (height - max[Y]) * scale, 0];\r\n  const matrix = Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"multiply\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromTranslation\"])(offset),\r\n                          Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromScaling\"])([scale, scale, scale]));\r\n  for (const path of Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_1__[\"transform\"])(matrix, paths)) {\r\n    let nth = (path[0] === null) ? 1 : 0;\r\n    const [x1, y1] = path[nth];\r\n    lines.push(`${x1.toFixed(9)} ${y1.toFixed(9)} m`); // move-to.\r\n    for (nth++; nth < path.length; nth++) {\r\n      const [x2, y2] = path[nth];\r\n      lines.push(`${x2.toFixed(9)} ${y2.toFixed(9)} l`); // line-to.\r\n    }\r\n    if (path[0] !== null) {\r\n      // A leading null indicates an open path.\r\n      lines.push(`h`); // close path.\r\n    }\r\n    lines.push(`S`); // stroke.\r\n  }\r\n\r\n  return [].concat(header({ width: width * scale, height: height * scale, lineWidth: lineWidth }),\r\n                   lines,\r\n                   footer).join('\\n');\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/pdf/toPdf.js?");

/***/ }),

/***/ "../../convert/stl/main.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/stl/main.js ***!
  \****************************************************************/
/*! exports provided: toStla */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _toStla__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toStla */ \"../../convert/stl/toStla.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toStla\", function() { return _toStla__WEBPACK_IMPORTED_MODULE_0__[\"toStla\"]; });\n\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/stl/main.js?");

/***/ }),

/***/ "../../convert/stl/toStla.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/stl/toStla.js ***!
  \******************************************************************/
/*! exports provided: toStla */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toStla\", function() { return toStla; });\n/* harmony import */ var _jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-polygons */ \"../../algorithm/polygons/main.js\");\n/* harmony import */ var _jsxcad_algorithm_watertight__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-watertight */ \"../../algorithm/watertight/main.js\");\n/* harmony import */ var _jsxcad_algorithm_assembly__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-assembly */ \"../../algorithm/assembly/main.js\");\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n/* harmony import */ var _jsxcad_algorithm_solid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jsxcad/algorithm-solid */ \"../../algorithm/solid/main.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Translates a polygon array [[[x, y, z], [x, y, z], ...]] to ascii STL.\r\n * The exterior side of a polygon is determined by a CCW point ordering.\r\n *\r\n * @param {Object} options.\r\n * @param {Polygon Array} polygons - An array of arrays of points.\r\n * @returns {String} - the ascii STL output.\r\n */\r\n\r\nconst geometryToTriangles = (geometry) => {\r\n  const triangleSets = [];\r\n  Object(_jsxcad_algorithm_assembly__WEBPACK_IMPORTED_MODULE_2__[\"eachItem\"])(geometry,\r\n           item => {\r\n             if (item.solid) {\r\n               triangleSets.push(Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"toTriangles\"])({}, Object(_jsxcad_algorithm_solid__WEBPACK_IMPORTED_MODULE_4__[\"toPolygons\"])({}, item.solid)));\r\n             }\r\n           });\r\n  return [].concat(...triangleSets);\r\n};\r\n\r\nconst toStla = (options = {}, geometry) => {\r\n  let polygons = geometryToTriangles(geometry);\r\n  if (!Object(_jsxcad_algorithm_watertight__WEBPACK_IMPORTED_MODULE_1__[\"isWatertightPolygons\"])(polygons)) {\r\n    console.log(`polygonsToStla: Polygon is not watertight`);\r\n    if (options.doMakeWatertight) {\r\n      polygons = Object(_jsxcad_algorithm_watertight__WEBPACK_IMPORTED_MODULE_1__[\"makeWatertight\"])(polygons);\r\n    }\r\n  }\r\n  return `solid JSxCAD\\n${convertToFacets(options, Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"])(Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"toTriangles\"])({}, polygons)))}\\nendsolid JSxCAD\\n`;\r\n};\r\n\r\nconst convertToFacets = (options, polygons) =>\r\n  polygons.map(convertToFacet).join('\\n');\r\n\r\nconst toStlVector = vector =>\r\n  `${vector[0]} ${vector[1]} ${vector[2]}`;\r\n\r\nconst toStlVertex = vertex =>\r\n  `vertex ${toStlVector(vertex)}`;\r\n\r\nconst convertToFacet = polygon =>\r\n  `facet normal ${toStlVector(Object(_jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_3__[\"toPlane\"])(polygon))}\\n` +\r\n  `outer loop\\n` +\r\n  `${toStlVertex(polygon[0])}\\n` +\r\n  `${toStlVertex(polygon[1])}\\n` +\r\n  `${toStlVertex(polygon[2])}\\n` +\r\n  `endloop\\n` +\r\n  `endfacet`;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/stl/toStla.js?");

/***/ }),

/***/ "../../convert/svg/canonicalize.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/svg/canonicalize.js ***!
  \************************************************************************/
/*! exports provided: canonicalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return canonicalize; });\n/* harmony import */ var _jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-utils */ \"../../math/utils/main.js\");\n\r\n\r\nconst canonicalizeSegment = ([directive, ...args]) => [directive, ...args.map(_jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_0__[\"reallyQuantizeForSpace\"])];\r\n\r\nconst canonicalize = (svgPath) => svgPath.map(canonicalizeSegment);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/svg/canonicalize.js?");

/***/ }),

/***/ "../../convert/svg/fromSvg.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/svg/fromSvg.js ***!
  \*******************************************************************/
/*! exports provided: fromSvg */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromSvg\", function() { return fromSvg; });\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n/* harmony import */ var xmldom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! xmldom */ \"../../node_modules/xmldom/dom-parser.js\");\n/* harmony import */ var xmldom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xmldom__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _fromSvgPath__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fromSvgPath */ \"../../convert/svg/fromSvgPath.js\");\n/* harmony import */ var svg_points__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! svg-points */ \"../../node_modules/svg-points/modules/index.js\");\n/* harmony import */ var _jsxcad_algorithm_assembly__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jsxcad/algorithm-assembly */ \"../../algorithm/assembly/main.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Normally svgPathToPaths normalized the coordinate system, but this would interfere with our own normalization.\r\nconst fromSvgPath = (options = {}, svgPath) =>\r\n  Object(_fromSvgPath__WEBPACK_IMPORTED_MODULE_2__[\"fromSvgPath\"])(Object.assign({ normalizeCoordinateSystem: false }, options), svgPath);\r\n\r\nconst ELEMENT_NODE = 1;\r\nconst ATTRIBUTE_NODE = 2;\r\nconst TEXT_NODE = 3;\r\nconst CDATA_SECTION_NODE = 4;\r\nconst ENTITY_REFERENCE_NODE = 5;\r\nconst ENTITY_NODE = 6;\r\nconst PROCESSING_INSTRUCTION_NODE = 7;\r\nconst COMMENT_NODE = 8;\r\nconst DOCUMENT_NODE = 9;\r\nconst DOCUMENT_TYPE_NODE = 10;\r\nconst DOCUMENT_FRAGMENT_NODE = 11;\r\nconst NOTATION_NODE = 12;\r\n\r\nconst applyTransforms = ({ matrix }, transformText) => {\r\n  const match = /([^(]+)[(]([^)]*)[)] *(.*)/.exec(transformText);\r\n  if (match) {\r\n    const [operator, operandText, rest] = match.slice(1);\r\n    const operands = operandText.split(/ +/).map(operand => parseFloat(operand));\r\n    switch (operator) {\r\n      case 'matrix': {\r\n        // a b c\r\n        const [a, b, c, d, tx, ty] = operands;\r\n        matrix = Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"multiply\"])(matrix, [a, b, 0, 0, c, d, 0, 0, 0, 0, 1, 0, tx, ty, 0, 1]);\r\n        break;\r\n      }\r\n      case 'translate': {\r\n        const [x = 0, y = 0, z = 0] = operands;\r\n        matrix = Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"multiply\"])(matrix, Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromTranslation\"])([x, y, z]));\r\n        break;\r\n      }\r\n      case 'scale': {\r\n        const [x = 1, y = x, z = 1] = operands;\r\n        matrix = Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"multiply\"])(matrix, Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromScaling\"])([x, y, z]));\r\n        break;\r\n      }\r\n      case 'rotate': {\r\n        const [degrees = 0, x = 0, y = 0, z = 0] = operands;\r\n        matrix = Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"multiply\"])(matrix, Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromTranslation\"])([x, y, z]));\r\n        matrix = Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"multiply\"])(matrix, Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromZRotation\"])(degrees * Math.PI / 180));\r\n        matrix = Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"multiply\"])(matrix, Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromTranslation\"])([-x, -y, -z]));\r\n        break;\r\n      }\r\n      case 'skewX': {\r\n        // TODO: Move to math-mat4.\r\n        const [degrees = 0] = operands;\r\n        const [a, b, c, d, tx, ty] = [1, 0, Math.tan(degrees * Math.PI / 180), 1, 0, 0];\r\n        matrix = Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"multiply\"])(matrix, [a, b, 0, 0, c, d, 0, 0, 0, 0, 1, 0, tx, ty, 0, 1]);\r\n        break;\r\n      }\r\n      case 'skewY': {\r\n        // TODO: Move to math-mat4.\r\n        const [degrees = 0] = operands;\r\n        const [a, b, c, d, tx, ty] = [1, Math.tan(degrees * Math.PI / 180), 0, 1, 0, 0];\r\n        matrix = Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"multiply\"])(matrix, [a, b, 0, 0, c, d, 0, 0, 0, 0, 1, 0, tx, ty, 0, 1]);\r\n        break;\r\n      }\r\n      default: {\r\n        throw Error(`die: Unknown operator '${operator}'.`);\r\n      }\r\n    }\r\n    if (rest) {\r\n      return applyTransforms({ matrix }, rest);\r\n    }\r\n  }\r\n  return { matrix };\r\n};\r\n\r\nconst fromSvg = (options = {}, svgString) => {\r\n  const geometry = { assembly: [] };\r\n  const svg = new xmldom__WEBPACK_IMPORTED_MODULE_1__[\"DOMParser\"]().parseFromString(svgString, 'image/svg+xml');\r\n\r\n  const measureScale = (node) => {\r\n    // FIX: This is wrong and assumes width and height are in cm. Parse the units properly.\r\n    const width = parseFloat(node.getAttribute('width')) * 10;\r\n    const height = parseFloat(node.getAttribute('height')) * 10;\r\n    const [minX, minY, maxX, maxY] = node.getAttribute('viewBox').split(/ +/).map(text => parseFloat(text));\r\n    const scaling = [width / (maxX - minX), -height / (maxY - minY), 1];\r\n    return scaling;\r\n  };\r\n\r\n  const scaling = measureScale(svg.documentElement);\r\n  const scale = (matrix) => Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"multiply\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"fromScaling\"])(scaling), matrix);\r\n\r\n  const walk = ({ matrix }, node) => {\r\n    const buildShape = (...attrs) => {\r\n      const result = { type: node.tagName };\r\n      for (const attr of attrs) {\r\n        const value = node.getAttribute(attr);\r\n        // FIX: Update toPath to handle these naturally.\r\n        // toPath has some odd requirements about its inputs.\r\n        if (value === '') {\r\n          if (attr === 'cx' || attr === 'cy') {\r\n            result[attr] = 0;\r\n          }\r\n        } else {\r\n          if (attr === 'points' || attr === 'd') {\r\n            result[attr] = value;\r\n          } else {\r\n            result[attr] = parseFloat(value);\r\n          }\r\n        }\r\n      }\r\n      return result;\r\n    };\r\n    switch (node.nodeType) {\r\n      case ELEMENT_NODE: {\r\n        ({ matrix } = applyTransforms({ matrix }, node.getAttribute('transform')));\r\n\r\n        const output = (svgPath) =>\r\n          geometry.assembly.push(Object(_jsxcad_algorithm_assembly__WEBPACK_IMPORTED_MODULE_4__[\"transform\"])(scale(matrix), fromSvgPath({}, svgPath)));\r\n\r\n        // FIX: Should output a path given a stroke, should output a surface given a fill.\r\n        switch (node.tagName) {\r\n          case 'path': output(node.getAttribute('d')); break;\r\n          case 'circle': output(Object(svg_points__WEBPACK_IMPORTED_MODULE_3__[\"toPath\"])(buildShape('cx', 'cy', 'r'))); break;\r\n          case 'ellipse': output(Object(svg_points__WEBPACK_IMPORTED_MODULE_3__[\"toPath\"])(buildShape('cx', 'cy', 'rx', 'ry'))); break;\r\n          case 'line': output(Object(svg_points__WEBPACK_IMPORTED_MODULE_3__[\"toPath\"])(buildShape('x1', 'x2', 'y1', 'y2'))); break;\r\n          case 'polygon': output(Object(svg_points__WEBPACK_IMPORTED_MODULE_3__[\"toPath\"])(buildShape('points'))); break;\r\n          case 'polyline': output(Object(svg_points__WEBPACK_IMPORTED_MODULE_3__[\"toPath\"])(buildShape('points'))); break;\r\n          case 'rect': output(Object(svg_points__WEBPACK_IMPORTED_MODULE_3__[\"toPath\"])(buildShape('height', 'width', 'x', 'y', 'rx', 'ry'))); break;\r\n          default: break;\r\n        }\r\n        break;\r\n      }\r\n      case ATTRIBUTE_NODE:\r\n      case TEXT_NODE:\r\n      case CDATA_SECTION_NODE:\r\n      case ENTITY_REFERENCE_NODE:\r\n      case ENTITY_NODE:\r\n      case PROCESSING_INSTRUCTION_NODE:\r\n      case COMMENT_NODE:\r\n      case DOCUMENT_NODE:\r\n      case DOCUMENT_TYPE_NODE:\r\n      case DOCUMENT_FRAGMENT_NODE:\r\n      case NOTATION_NODE:\r\n        break;\r\n    }\r\n    if (node.childNodes) {\r\n      for (let nth = 0; nth < node.childNodes.length; nth++) {\r\n        const childNode = node.childNodes[nth];\r\n        walk({ matrix }, childNode);\r\n      }\r\n    }\r\n  };\r\n\r\n  walk({ matrix: Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"identity\"])() }, svg);\r\n  return geometry;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/svg/fromSvg.js?");

/***/ }),

/***/ "../../convert/svg/fromSvgPath.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/svg/fromSvgPath.js ***!
  \***********************************************************************/
/*! exports provided: fromSvgPath */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromSvgPath\", function() { return fromSvgPath; });\n/* harmony import */ var abs_svg_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! abs-svg-path */ \"../../node_modules/abs-svg-path/index.js\");\n/* harmony import */ var abs_svg_path__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(abs_svg_path__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-shape */ \"../../algorithm/shape/main.js\");\n/* harmony import */ var _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/algorithm-path */ \"../../algorithm/path/main.js\");\n/* harmony import */ var curvify_svg_path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! curvify-svg-path */ \"../../node_modules/curvify-svg-path/index.js\");\n/* harmony import */ var curvify_svg_path__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(curvify_svg_path__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _jsxcad_math_vec2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jsxcad/math-vec2 */ \"../../math/vec2/main.js\");\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n/* harmony import */ var parse_svg_path__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! parse-svg-path */ \"../../node_modules/parse-svg-path/index.js\");\n/* harmony import */ var parse_svg_path__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(parse_svg_path__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @jsxcad/algorithm-paths */ \"../../algorithm/paths/main.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// FIX: Check scaling.\r\n\r\nconst removeRepeatedPoints = (path) => {\r\n  const unrepeated = [path[0]];\r\n  for (let nth = 1; nth < path.length; nth++) {\r\n    const last = path[nth - 1];\r\n    const current = path[nth];\r\n    if (last === null || !Object(_jsxcad_math_vec2__WEBPACK_IMPORTED_MODULE_4__[\"equals\"])(last, current)) {\r\n      unrepeated.push(current);\r\n    }\r\n  }\r\n  return unrepeated;\r\n};\r\n\r\nconst toPaths = ({ curveSegments, normalizeCoordinateSystem = true }, svgPath) => {\r\n  const paths = [];\r\n  let path = [null];\r\n\r\n  const newPath = () => {\r\n    if (path[0] === null) {\r\n      maybeClosePath();\r\n    }\r\n    if (path.length < 2) {\r\n      // An empty path.\r\n      return;\r\n    }\r\n    paths.push(path);\r\n    path = [null];\r\n  };\r\n\r\n  const maybeClosePath = () => {\r\n    path = removeRepeatedPoints(Object(_jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_2__[\"canonicalize\"])(path));\r\n    if (path.length > 3) {\r\n      if (path[0] === null && Object(_jsxcad_math_vec2__WEBPACK_IMPORTED_MODULE_4__[\"equals\"])(path[1], path[path.length - 1])) {\r\n        // The path is closed, remove the leading null, and the duplicate point at the end.\r\n        path = path.slice(1, path.length - 1);\r\n        newPath();\r\n      }\r\n    }\r\n  };\r\n\r\n  for (const segment of svgPath) {\r\n    const [directive, ...args] = segment;\r\n    switch (directive) {\r\n      case 'M': {\r\n        maybeClosePath();\r\n        newPath();\r\n        const [x, y] = args;\r\n        path.push([x, y]);\r\n        break;\r\n      }\r\n      case 'C': {\r\n        const [x1, y1, x2, y2, x, y] = args;\r\n        const start = path[path.length - 1];\r\n        const [xStart, yStart] = (start === null) ? [0, 0] : start;\r\n        path = path.concat(Object(_jsxcad_algorithm_shape__WEBPACK_IMPORTED_MODULE_1__[\"buildAdaptiveCubicBezierCurve\"])({ segments: curveSegments }, [[xStart, yStart], [x1, y1], [x2, y2], [x, y]]));\r\n        break;\r\n      }\r\n      default: {\r\n        throw Error(`Unexpected segment: ${JSON.stringify(segment)}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  maybeClosePath();\r\n  newPath();\r\n\r\n  if (normalizeCoordinateSystem) {\r\n    // Turn it upside down.\r\n    return Object(_jsxcad_algorithm_paths__WEBPACK_IMPORTED_MODULE_7__[\"transform\"])(Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_5__[\"fromScaling\"])([1, -1, 0]), paths);\r\n  } else {\r\n    return paths;\r\n  }\r\n};\r\n\r\nconst fromSvgPath = (options = {}, svgPath) =>\r\n  ({ paths: toPaths(options, curvify_svg_path__WEBPACK_IMPORTED_MODULE_3___default()(abs_svg_path__WEBPACK_IMPORTED_MODULE_0___default()(parse_svg_path__WEBPACK_IMPORTED_MODULE_6___default()(svgPath)))) });\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/svg/fromSvgPath.js?");

/***/ }),

/***/ "../../convert/svg/main.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/svg/main.js ***!
  \****************************************************************/
/*! exports provided: canonicalize, fromSvg, fromSvgPath, toSvg */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _canonicalize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canonicalize */ \"../../convert/svg/canonicalize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return _canonicalize__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"]; });\n\n/* harmony import */ var _fromSvg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fromSvg */ \"../../convert/svg/fromSvg.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromSvg\", function() { return _fromSvg__WEBPACK_IMPORTED_MODULE_1__[\"fromSvg\"]; });\n\n/* harmony import */ var _fromSvgPath__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fromSvgPath */ \"../../convert/svg/fromSvgPath.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromSvgPath\", function() { return _fromSvgPath__WEBPACK_IMPORTED_MODULE_2__[\"fromSvgPath\"]; });\n\n/* harmony import */ var _toSvg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./toSvg */ \"../../convert/svg/toSvg.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toSvg\", function() { return _toSvg__WEBPACK_IMPORTED_MODULE_3__[\"toSvg\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/svg/main.js?");

/***/ }),

/***/ "../../convert/svg/toSvg.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/svg/toSvg.js ***!
  \*****************************************************************/
/*! exports provided: toSvg */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toSvg\", function() { return toSvg; });\n/* harmony import */ var _jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-polygons */ \"../../algorithm/polygons/main.js\");\n/* harmony import */ var _jsxcad_algorithm_assembly__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/algorithm-assembly */ \"../../algorithm/assembly/main.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\n\r\nconst toPolygons = (geometry) => {\r\n  const polygonSets = [];\r\n  Object(_jsxcad_algorithm_assembly__WEBPACK_IMPORTED_MODULE_1__[\"eachItem\"])(geometry,\r\n           item => {\r\n             if (item.z0Surface) {\r\n               polygonSets.push(item.z0Surface);\r\n             }\r\n           });\r\n  return [].concat(...polygonSets);\r\n};\r\n\r\n/** Serialize the give objects to SVG format.\r\n * @param {Object} [options] - options for serialization\r\n * @param {Object|Array} objects - objects to serialize as SVG\r\n * @returns {Array} serialized contents, SVG format\r\n */\r\nconst toSvg = ({ padding = 0 }, geometry) => {\r\n  // FIX: SVG should handle both surfaces and paths.\r\n  const polygons = Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"])(toPolygons(geometry));\r\n  const min = Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"measureBoundingBox\"])(polygons)[0];\r\n  // TODO: Add transform and translate support to polygons.\r\n  const shiftedPolygons = Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"])(Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"translate\"])(Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"negate\"])(min), polygons));\r\n  const [width, height] = Object(_jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_0__[\"measureBoundingBox\"])(shiftedPolygons)[1];\r\n\r\n  return [\r\n    `<?xml version=\"1.0\" encoding=\"UTF-8\"?>`,\r\n    `<!-- Generated by jsxcad -->`,\r\n    `<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1 Tiny//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-tiny.dtd\">`,\r\n    `<svg baseProfile=\"tiny\" height=\"${height} mm\" width=\"${width} mm\" viewBox=\"${-padding} ${-padding} ${width + 2 * padding} ${height + 2 * padding}\" version=\"1.1\" stroke=\"black\" stroke-width=\".1\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">`,\r\n    ...shiftedPolygons.map(polygon => `<path d=\"${polygon.map((point, index) => `${index === 0 ? 'M' : 'L'}${point[0]} ${point[1]}`).join(' ')} z\"/>`),\r\n    `</svg>`\r\n  ].join('\\n');\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/svg/toSvg.js?");

/***/ }),

/***/ "../../convert/threejs/main.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/threejs/main.js ***!
  \********************************************************************/
/*! exports provided: toThreejsPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _toThreejsPage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toThreejsPage */ \"../../convert/threejs/toThreejsPage.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toThreejsPage\", function() { return _toThreejsPage__WEBPACK_IMPORTED_MODULE_0__[\"toThreejsPage\"]; });\n\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/threejs/main.js?");

/***/ }),

/***/ "../../convert/threejs/toThreejsPage.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/convert/threejs/toThreejsPage.js ***!
  \*****************************************************************************/
/*! exports provided: toThreejsPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toThreejsPage\", function() { return toThreejsPage; });\n/* harmony import */ var _jsxcad_sys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/sys */ \"../../sys/main.js\");\n\r\n\r\nconst toThreejsPage = async ({ cameraPosition = [0, 0, 16], title = 'JSxCAD Viewer' }, geometry) => {\r\n  // FIX: Avoid injection issues.\r\n  const head = [\r\n    `<title>${title}</title>`,\r\n    `<meta charset=\"utf-8\">`,\r\n    `<meta name=\"viewport\" content=\"width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0\">`,\r\n    `<style>`,\r\n    Object(_jsxcad_sys__WEBPACK_IMPORTED_MODULE_0__[\"readFileSync\"])('resource/page.css', { encoding: 'utf8' }),\r\n    Object(_jsxcad_sys__WEBPACK_IMPORTED_MODULE_0__[\"readFileSync\"])('resource/three.css', { encoding: 'utf8' }),\r\n    Object(_jsxcad_sys__WEBPACK_IMPORTED_MODULE_0__[\"readFileSync\"])('resource/codemirror.css', { encoding: 'utf8' }),\r\n    `</style>`,\r\n    `<link href=\"https://codemirror.net/lib/codemirror.css\" rel=\"stylesheet\">`\r\n  ].join('\\n');\r\n\r\n  const body = [\r\n    `<!-- CodeMirror -->`,\r\n    `<script src=\"https://codemirror.net/lib/codemirror.js\"><\\\\/script>`.replace('\\\\/', '/'),\r\n    `<script src=\"https://codemirror.net/addon/display/autorefresh.js\"><\\\\/script>`.replace('\\\\/', '/'),\r\n    `<script src=\"https://codemirror.net/addon/display/fullscreen.js\"><\\\\/script>`.replace('\\\\/', '/'),\r\n    `<script src=\"https://codemirror.net/mode/javascript/javascript.js\"><\\\\/script>`.replace('\\\\/', '/'),\r\n    `<!-- ThreeJS -->`,\r\n    `<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/87/three.min.js\"><\\\\/script>`.replace('\\\\/', '/'),\r\n    `<script type=\"text/javascript\" src=\"https://cdn.rawgit.com/mrdoob/stats.js/master/build/stats.min.js\"><\\\\/script>`.replace('\\\\/', '/'),\r\n    `<script type=\"text/javascript\" src=\"https://cdn.rawgit.com/mrdoob/three.js/master/examples/js/controls/TrackballControls.js\"><\\\\/script>`.replace('\\\\/', '/'),\r\n    `<script type=\"text/javascript\" src=\"https://cdn.rawgit.com/dataarts/dat.gui/master/build/dat.gui.min.js\"><\\\\/script>`.replace('\\\\/', '/'),\r\n    `<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/ami.js//0.0.20/ami.min.js\"><\\\\/script>`.replace('\\\\/', '/'),\r\n    `<!-- FileSaver -->`,\r\n    `<script>`,\r\n    Object(_jsxcad_sys__WEBPACK_IMPORTED_MODULE_0__[\"readFileSync\"])('resource/FileSaver.js', { encoding: 'utf8' }),\r\n    Object(_jsxcad_sys__WEBPACK_IMPORTED_MODULE_0__[\"readFileSync\"])('resource/JSxCAD.js', { encoding: 'utf8' }),\r\n    `const { api, flipPolygon, makeConvexSurface, polygonsToTriangles, readFileSync, solidToPolygons, toPlane, toSegments, watchFile, watchFileCreation, writeFileSync } = JSxCAD;`,\r\n    Object(_jsxcad_sys__WEBPACK_IMPORTED_MODULE_0__[\"readFileSync\"])('resource/display.js', { encoding: 'utf8' }),\r\n    `<\\\\/script>`.replace('\\\\/', '/')\r\n  ].join('\\n');\r\n\r\n  const app = [\r\n    `<script>const runApp = () => {`,\r\n    `  addDisplay('main', { cameraPosition: ${JSON.stringify(cameraPosition)}, geometry: ${JSON.stringify(geometry)} });`,\r\n    `  nextPage();`,\r\n    `}`,\r\n    `document.addEventListener(\"DOMContentLoaded\", runApp);`,\r\n    `<\\\\/script>`.replace('\\\\/', '/')\r\n  ].join('\\n');\r\n\r\n  return `<html><head>${head}</head><body id=\"body\">${body}${app}</body></html>`;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/convert/threejs/toThreejsPage.js?");

/***/ }),

/***/ "../../geometry/assembly/main.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/geometry/assembly/main.js ***!
  \**********************************************************************/
/*! exports provided: Assembly, fromGeometry */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Assembly\", function() { return Assembly; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromGeometry\", function() { return fromGeometry; });\n/* harmony import */ var _jsxcad_algorithm_assembly__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/algorithm-assembly */ \"../../algorithm/assembly/main.js\");\n\r\n\r\n// FIX: Make it clear this should be lazy.\r\nclass Assembly {\r\n  constructor (geometry = { assembly: [] }) {\r\n    this.geometry = geometry;\r\n    if (geometry instanceof Array) throw Error('die');\r\n    if (geometry.geometry) throw Error('die');\r\n  }\r\n\r\n  addTag (tag) {\r\n    return fromGeometry(Object(_jsxcad_algorithm_assembly__WEBPACK_IMPORTED_MODULE_0__[\"addTag\"])(tag, toGeometry(this)));\r\n  }\r\n\r\n  assemble (...geometries) {\r\n    const assembled = Object(_jsxcad_algorithm_assembly__WEBPACK_IMPORTED_MODULE_0__[\"assemble\"])(toGeometry(this), ...geometries.map(toGeometry));\r\n    return fromGeometry(assembled);\r\n  }\r\n\r\n  difference (...geometries) {\r\n    return fromGeometry(Object(_jsxcad_algorithm_assembly__WEBPACK_IMPORTED_MODULE_0__[\"difference\"])(toGeometry(this), ...geometries.map(toGeometry)));\r\n  }\r\n\r\n  flip () {\r\n    return fromGeometry(Object(_jsxcad_algorithm_assembly__WEBPACK_IMPORTED_MODULE_0__[\"flip\"])(toGeometry(this)));\r\n  }\r\n\r\n  getTags () {\r\n    const tags = this.geometry.tags;\r\n    if (tags === undefined) {\r\n      return [];\r\n    } else {\r\n      return tags;\r\n    }\r\n  }\r\n\r\n  intersection (...geometries) {\r\n    return fromGeometry(Object(_jsxcad_algorithm_assembly__WEBPACK_IMPORTED_MODULE_0__[\"intersection\"])(toGeometry(this), ...geometries.map(toGeometry)));\r\n  }\r\n\r\n  eachPoint (options = {}, operation) {\r\n    return Object(_jsxcad_algorithm_assembly__WEBPACK_IMPORTED_MODULE_0__[\"eachPoint\"])(options, operation, toGeometry(this));\r\n  }\r\n\r\n  toGeometry (options = {}) {\r\n    return this.geometry;\r\n  }\r\n\r\n  toPaths (options = {}) {\r\n    return fromGeometry(Object(_jsxcad_algorithm_assembly__WEBPACK_IMPORTED_MODULE_0__[\"toPaths\"])(options, toGeometry(this)));\r\n  }\r\n\r\n  toSolid (options = {}) {\r\n    return fromGeometry(Object(_jsxcad_algorithm_assembly__WEBPACK_IMPORTED_MODULE_0__[\"toSolid\"])(options, toGeometry(this)));\r\n  }\r\n\r\n  toZ0Surface (options = {}) {\r\n    return fromGeometry(Object(_jsxcad_algorithm_assembly__WEBPACK_IMPORTED_MODULE_0__[\"toZ0Surface\"])(options, toGeometry(this)));\r\n  }\r\n\r\n  toDisjointGeometry () {\r\n    return Object(_jsxcad_algorithm_assembly__WEBPACK_IMPORTED_MODULE_0__[\"toDisjointGeometry\"])(toGeometry(this));\r\n  }\r\n\r\n  transform (matrix) {\r\n    return fromGeometry(Object(_jsxcad_algorithm_assembly__WEBPACK_IMPORTED_MODULE_0__[\"transform\"])(matrix, toGeometry(this)));\r\n  }\r\n\r\n  union (...geometries) {\r\n    return fromGeometry(Object(_jsxcad_algorithm_assembly__WEBPACK_IMPORTED_MODULE_0__[\"union\"])(toGeometry(this), ...geometries.map(toGeometry)));\r\n  }\r\n}\r\n\r\nconst fromGeometry = (geometry) => {\r\n  if (geometry instanceof Array) throw Error('die');\r\n  return new Assembly(geometry);\r\n};\r\n\r\nconst toGeometry = (assembly) => assembly.toGeometry();\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/geometry/assembly/main.js?");

/***/ }),

/***/ "../../math/mat4/add.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/add.js ***!
  \*************************************************************/
/*! exports provided: add */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nconst add = (a, b) =>\r\n  [a[0] + b[0], a[1] + b[1], a[2] + b[2], a[3] + b[3], a[4] + b[4], a[5] + b[5], a[6] + b[6], a[7] + b[7], a[8] + b[8],\r\n   a[9] + b[9], a[10] + b[10], a[11] + b[11], a[12] + b[12], a[13] + b[13], a[14] + b[14], a[15] + b[15]];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/add.js?");

/***/ }),

/***/ "../../math/mat4/equals.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/equals.js ***!
  \****************************************************************/
/*! exports provided: equals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nconst equals = (a, b) => {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\r\n         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\r\n         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\r\n         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/equals.js?");

/***/ }),

/***/ "../../math/mat4/fromRotation.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromRotation.js ***!
  \**********************************************************************/
/*! exports provided: fromRotation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromRotation\", function() { return fromRotation; });\nconst EPSILON = 1e-5;\r\n\r\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nconst fromRotation = (rad, [x, y, z]) => {\r\n  let len = Math.sqrt(x * x + y * y + z * z);\r\n\r\n  if (Math.abs(len) < EPSILON) { return null; }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  const s = Math.sin(rad);\r\n  const c = Math.cos(rad);\r\n  const t = 1 - c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  return [x * x * t + c,\r\n          y * x * t + z * s,\r\n          z * x * t - y * s,\r\n          0,\r\n          x * y * t - z * s,\r\n          y * y * t + c,\r\n          z * y * t + x * s,\r\n          0,\r\n          x * z * t + y * s,\r\n          y * z * t - x * s,\r\n          z * z * t + c,\r\n          0,\r\n          0,\r\n          0,\r\n          0,\r\n          1];\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromRotation.js?");

/***/ }),

/***/ "../../math/mat4/fromScaling.js":
/*!*********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromScaling.js ***!
  \*********************************************************************/
/*! exports provided: fromScaling */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromScaling\", function() { return fromScaling; });\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\r\nconst fromScaling = ([x = 1, y = 1, z = 1]) => [x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromScaling.js?");

/***/ }),

/***/ "../../math/mat4/fromTranslation.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromTranslation.js ***!
  \*************************************************************************/
/*! exports provided: fromTranslation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromTranslation\", function() { return fromTranslation; });\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nconst fromTranslation = ([x = 0, y = 0, z = 0]) => [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, y, z, 1];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromTranslation.js?");

/***/ }),

/***/ "../../math/mat4/fromValues.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromValues.js ***!
  \********************************************************************/
/*! exports provided: fromValues */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\r\nconst fromValues = (m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) =>\r\n  [m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromValues.js?");

/***/ }),

/***/ "../../math/mat4/fromXRotation.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromXRotation.js ***!
  \***********************************************************************/
/*! exports provided: fromXRotation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromXRotation\", function() { return fromXRotation; });\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nconst fromXRotation = (rad) => {\r\n  const s = Math.sin(rad);\r\n  const c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  return [1, 0, 0, 0, 0, c, s, 0, 0, -s, c, 0, 0, 0, 0, 1];\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromXRotation.js?");

/***/ }),

/***/ "../../math/mat4/fromYRotation.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromYRotation.js ***!
  \***********************************************************************/
/*! exports provided: fromYRotation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromYRotation\", function() { return fromYRotation; });\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nconst fromYRotation = (rad) => {\r\n  const s = Math.sin(rad);\r\n  const c = Math.cos(rad);\r\n  // Perform axis-specific matrix multiplication\r\n  return [c, 0, -s, 0, 0, 1, 0, 0, s, 0, c, 0, 0, 0, 0, 1];\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromYRotation.js?");

/***/ }),

/***/ "../../math/mat4/fromZRotation.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromZRotation.js ***!
  \***********************************************************************/
/*! exports provided: fromZRotation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromZRotation\", function() { return fromZRotation; });\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nconst fromZRotation = (rad) => {\r\n  const s = Math.sin(rad);\r\n  const c = Math.cos(rad);\r\n  // Perform axis-specific matrix multiplication\r\n  return [c, s, 0, 0, -s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/fromZRotation.js?");

/***/ }),

/***/ "../../math/mat4/identity.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/identity.js ***!
  \******************************************************************/
/*! exports provided: identity */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"identity\", function() { return identity; });\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @returns {mat4} out\r\n */\r\nconst identity = () => [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/identity.js?");

/***/ }),

/***/ "../../math/mat4/isMirroring.js":
/*!*********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/isMirroring.js ***!
  \*********************************************************************/
/*! exports provided: isMirroring */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isMirroring\", function() { return isMirroring; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n/**\r\n * determine whether the input matrix is a mirroring transformation\r\n *\r\n * @param {mat4} mat the input matrix\r\n * @returns {boolean} output\r\n */\r\nconst isMirroring = (mat) => {\r\n  const u = [mat[0], mat[4], mat[8]];\r\n  const v = [mat[1], mat[5], mat[9]];\r\n  const w = [mat[2], mat[6], mat[10]];\r\n\r\n  // for a true orthogonal, non-mirrored base, u.cross(v) == w\r\n  // If they have an opposite direction then we are mirroring\r\n  const mirrorvalue = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"cross\"])(u, v), w);\r\n  const ismirror = (mirrorvalue < 0);\r\n  return ismirror;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/isMirroring.js?");

/***/ }),

/***/ "../../math/mat4/main.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/main.js ***!
  \**************************************************************/
/*! exports provided: add, equals, fromRotation, fromScaling, fromTranslation, fromValues, fromXRotation, fromYRotation, fromZRotation, identity, isMirroring, mirror, mirrorByPlane, multiply, rightMultiplyVec2, rightMultiplyVec3, subtract */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./add */ \"../../math/mat4/add.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return _add__WEBPACK_IMPORTED_MODULE_0__[\"add\"]; });\n\n/* harmony import */ var _equals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./equals */ \"../../math/mat4/equals.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return _equals__WEBPACK_IMPORTED_MODULE_1__[\"equals\"]; });\n\n/* harmony import */ var _fromRotation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fromRotation */ \"../../math/mat4/fromRotation.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromRotation\", function() { return _fromRotation__WEBPACK_IMPORTED_MODULE_2__[\"fromRotation\"]; });\n\n/* harmony import */ var _fromScaling__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fromScaling */ \"../../math/mat4/fromScaling.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromScaling\", function() { return _fromScaling__WEBPACK_IMPORTED_MODULE_3__[\"fromScaling\"]; });\n\n/* harmony import */ var _fromTranslation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fromTranslation */ \"../../math/mat4/fromTranslation.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromTranslation\", function() { return _fromTranslation__WEBPACK_IMPORTED_MODULE_4__[\"fromTranslation\"]; });\n\n/* harmony import */ var _fromValues__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./fromValues */ \"../../math/mat4/fromValues.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return _fromValues__WEBPACK_IMPORTED_MODULE_5__[\"fromValues\"]; });\n\n/* harmony import */ var _fromXRotation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./fromXRotation */ \"../../math/mat4/fromXRotation.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromXRotation\", function() { return _fromXRotation__WEBPACK_IMPORTED_MODULE_6__[\"fromXRotation\"]; });\n\n/* harmony import */ var _fromYRotation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./fromYRotation */ \"../../math/mat4/fromYRotation.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromYRotation\", function() { return _fromYRotation__WEBPACK_IMPORTED_MODULE_7__[\"fromYRotation\"]; });\n\n/* harmony import */ var _fromZRotation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./fromZRotation */ \"../../math/mat4/fromZRotation.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromZRotation\", function() { return _fromZRotation__WEBPACK_IMPORTED_MODULE_8__[\"fromZRotation\"]; });\n\n/* harmony import */ var _identity__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./identity */ \"../../math/mat4/identity.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"identity\", function() { return _identity__WEBPACK_IMPORTED_MODULE_9__[\"identity\"]; });\n\n/* harmony import */ var _isMirroring__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./isMirroring */ \"../../math/mat4/isMirroring.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"isMirroring\", function() { return _isMirroring__WEBPACK_IMPORTED_MODULE_10__[\"isMirroring\"]; });\n\n/* harmony import */ var _mirror__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./mirror */ \"../../math/mat4/mirror.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"mirror\", function() { return _mirror__WEBPACK_IMPORTED_MODULE_11__[\"mirror\"]; });\n\n/* harmony import */ var _mirrorByPlane__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./mirrorByPlane */ \"../../math/mat4/mirrorByPlane.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"mirrorByPlane\", function() { return _mirrorByPlane__WEBPACK_IMPORTED_MODULE_12__[\"mirrorByPlane\"]; });\n\n/* harmony import */ var _multiply__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./multiply */ \"../../math/mat4/multiply.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return _multiply__WEBPACK_IMPORTED_MODULE_13__[\"multiply\"]; });\n\n/* harmony import */ var _rightMultiplyVec2__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./rightMultiplyVec2 */ \"../../math/mat4/rightMultiplyVec2.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rightMultiplyVec2\", function() { return _rightMultiplyVec2__WEBPACK_IMPORTED_MODULE_14__[\"rightMultiplyVec2\"]; });\n\n/* harmony import */ var _rightMultiplyVec3__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./rightMultiplyVec3 */ \"../../math/mat4/rightMultiplyVec3.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rightMultiplyVec3\", function() { return _rightMultiplyVec3__WEBPACK_IMPORTED_MODULE_15__[\"rightMultiplyVec3\"]; });\n\n/* harmony import */ var _subtract__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./subtract */ \"../../math/mat4/subtract.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return _subtract__WEBPACK_IMPORTED_MODULE_16__[\"subtract\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/main.js?");

/***/ }),

/***/ "../../math/mat4/mirror.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/mirror.js ***!
  \****************************************************************/
/*! exports provided: mirror */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mirror\", function() { return mirror; });\n/**\r\n * m the mat4 by the dimensions in the given vec3\r\n * create an affine matrix for mirroring into an arbitrary plane:\r\n *\r\n * @param {vec3} v the vec3 to mirror the matrix by\r\n * @param {mat4} a the matrix to mirror\r\n * @returns {mat4} out\r\n */\r\nconst mirror = ([x, y, z], a) => [\r\n  a[0] * x, a[1] * x, a[2] * x, a[3] * x,\r\n  a[4] * y, a[5] * y, a[6] * y, a[7] * y,\r\n  a[8] * z, a[9] * z, a[10] * z, a[11] * z,\r\n  a[12], a[13], a[14], a[15]];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/mirror.js?");

/***/ }),

/***/ "../../math/mat4/mirrorByPlane.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/mirrorByPlane.js ***!
  \***********************************************************************/
/*! exports provided: mirrorByPlane */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mirrorByPlane\", function() { return mirrorByPlane; });\n/**\r\n * Create an affine matrix for mirroring onto an arbitrary plane\r\n *\r\n * @param {vec4} plane to mirror the matrix by\r\n * @returns {mat4} out\r\n */\r\nconst mirrorByPlane = ([nx, ny, nz, w]) => [\r\n  (1.0 - 2.0 * nx * nx), (-2.0 * ny * nx), (-2.0 * nz * nx), 0,\r\n  (-2.0 * nx * ny), (1.0 - 2.0 * ny * ny), (-2.0 * nz * ny), 0,\r\n  (-2.0 * nx * nz), (-2.0 * ny * nz), (1.0 - 2.0 * nz * nz), 0,\r\n  (2.0 * nx * w), (2.0 * ny * w), (2.0 * nz * w), 1];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/mirrorByPlane.js?");

/***/ }),

/***/ "../../math/mat4/multiply.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/multiply.js ***!
  \******************************************************************/
/*! exports provided: multiply */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/**\r\n * Multiplies two mat4's\r\n *\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nconst multiply = (a, b) => {\r\n  const out = Array(16);\r\n  const a00 = a[0];\r\n  const a01 = a[1];\r\n  const a02 = a[2];\r\n  const a03 = a[3];\r\n  const a10 = a[4];\r\n  const a11 = a[5];\r\n  const a12 = a[6];\r\n  const a13 = a[7];\r\n  const a20 = a[8];\r\n  const a21 = a[9];\r\n  const a22 = a[10];\r\n  const a23 = a[11];\r\n  const a30 = a[12];\r\n  const a31 = a[13];\r\n  const a32 = a[14];\r\n  const a33 = a[15];\r\n\r\n  // Cache only the current line of the second matrix\r\n  let b0 = b[0];\r\n  let b1 = b[1];\r\n  let b2 = b[2];\r\n  let b3 = b[3];\r\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[4];\r\n  b1 = b[5];\r\n  b2 = b[6];\r\n  b3 = b[7];\r\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[8];\r\n  b1 = b[9];\r\n  b2 = b[10];\r\n  b3 = b[11];\r\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[12];\r\n  b1 = b[13];\r\n  b2 = b[14];\r\n  b3 = b[15];\r\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  return out;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/multiply.js?");

/***/ }),

/***/ "../../math/mat4/rightMultiplyVec2.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/rightMultiplyVec2.js ***!
  \***************************************************************************/
/*! exports provided: rightMultiplyVec2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rightMultiplyVec2\", function() { return rightMultiplyVec2; });\n/* harmony import */ var _jsxcad_math_vec2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec2 */ \"../../math/vec2/main.js\");\n\r\n\r\n/**\r\n * Multiply the input matrix by a Vector2 (interpreted as 2 row, 1 column)\r\n * (result = M*v)\r\n * Fourth element is set to 1\r\n * @param {vec2} vector the input vector\r\n * @param {mat4} matrix the input matrix\r\n * @returns {vec2} output\r\n */\r\nconst rightMultiplyVec2 = ([v0, v1], matrix) => {\r\n  const v2 = 0;\r\n  const v3 = 1;\r\n  let x = v0 * matrix[0] + v1 * matrix[1] + v2 * matrix[2] + v3 * matrix[3];\r\n  let y = v0 * matrix[4] + v1 * matrix[5] + v2 * matrix[6] + v3 * matrix[7];\r\n  const w = v0 * matrix[12] + v1 * matrix[13] + v2 * matrix[14] + v3 * matrix[15];\r\n\r\n  // scale such that fourth element becomes 1:\r\n  if (w !== 1) {\r\n    const invw = 1.0 / w;\r\n    x *= invw;\r\n    y *= invw;\r\n  }\r\n  return Object(_jsxcad_math_vec2__WEBPACK_IMPORTED_MODULE_0__[\"fromValues\"])(x, y);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/rightMultiplyVec2.js?");

/***/ }),

/***/ "../../math/mat4/rightMultiplyVec3.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/rightMultiplyVec3.js ***!
  \***************************************************************************/
/*! exports provided: rightMultiplyVec3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rightMultiplyVec3\", function() { return rightMultiplyVec3; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n/**\r\n * Multiply the input matrix by a Vector3 (interpreted as 3 row, 1 column)\r\n * (result = M*v)\r\n * Fourth element is set to 1\r\n * @param {vec3} vector the input vector\r\n * @param {mat4} matrix the input matrix\r\n * @returns {vec3} output\r\n */\r\nconst rightMultiplyVec3 = ([v0, v1, v2], matrix) => {\r\n  const v3 = 1;\r\n  let x = v0 * matrix[0] + v1 * matrix[1] + v2 * matrix[2] + v3 * matrix[3];\r\n  let y = v0 * matrix[4] + v1 * matrix[5] + v2 * matrix[6] + v3 * matrix[7];\r\n  let z = v0 * matrix[8] + v1 * matrix[9] + v2 * matrix[10] + v3 * matrix[11];\r\n  const w = v0 * matrix[12] + v1 * matrix[13] + v2 * matrix[14] + v3 * matrix[15];\r\n\r\n  // scale such that fourth element becomes 1:\r\n  if (w !== 1) {\r\n    const invw = 1.0 / w;\r\n    x *= invw;\r\n    y *= invw;\r\n    z *= invw;\r\n  }\r\n  return Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"fromValues\"])(x, y, z);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/rightMultiplyVec3.js?");

/***/ }),

/***/ "../../math/mat4/subtract.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/subtract.js ***!
  \******************************************************************/
/*! exports provided: subtract */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return subtract; });\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nconst subtract = (a, b) => [\r\n  a[0] - b[0],\r\n  a[1] - b[1],\r\n  a[2] - b[2],\r\n  a[3] - b[3],\r\n  a[4] - b[4],\r\n  a[5] - b[5],\r\n  a[6] - b[6],\r\n  a[7] - b[7],\r\n  a[8] - b[8],\r\n  a[9] - b[9],\r\n  a[10] - b[10],\r\n  a[11] - b[11],\r\n  a[12] - b[12],\r\n  a[13] - b[13],\r\n  a[14] - b[14],\r\n  a[15] - b[15]];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/mat4/subtract.js?");

/***/ }),

/***/ "../../math/plane/equals.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/equals.js ***!
  \*****************************************************************/
/*! exports provided: equals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/**\r\n * Compare the given planes for equality\r\n * @return {boolean} true if planes are equal\r\n */\r\nconst equals = (a, b) => (a[0] === b[0]) && (a[1] === b[1]) && (a[2] === b[2]) && (a[3] === b[3]);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/equals.js?");

/***/ }),

/***/ "../../math/plane/flip.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/flip.js ***!
  \***************************************************************/
/*! exports provided: flip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return flip; });\n/**\r\n * Flip the given plane (vec4)\r\n *\r\n * @param {vec4} vec - plane to flip\r\n * @return {vec4} flipped plane\r\n */\r\nconst flip = ([x = 0, y = 0, z = 0, w = 0]) => [-x, -y, -z, -w];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/flip.js?");

/***/ }),

/***/ "../../math/plane/fromNormalAndPoint.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/fromNormalAndPoint.js ***!
  \*****************************************************************************/
/*! exports provided: fromNormalAndPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromNormalAndPoint\", function() { return fromNormalAndPoint; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n/**\r\n * Create a new plane from the given normal and point values\r\n * @param {Vec3} normal  - vector 3D\r\n * @param {Vec3}  point- vector 3D\r\n * @returns {Array} a new plane with properly typed values\r\n */\r\nconst fromNormalAndPoint = (normal, point) => {\r\n  const u = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"unit\"])(normal);\r\n  const w = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(point, u);\r\n  return [u[0], u[1], u[2], w];\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/fromNormalAndPoint.js?");

/***/ }),

/***/ "../../math/plane/fromPoints.js":
/*!*********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/fromPoints.js ***!
  \*********************************************************************/
/*! exports provided: fromPoints */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPoints\", function() { return fromPoints; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n/**\r\n * Create a new plane from the given points\r\n *\r\n * @param {Vec3} a - 3D point\r\n * @param {Vec3} b - 3D point\r\n * @param {Vec3} c - 3D point\r\n * @returns {Vec4} a new plane with properly typed values\r\n */\r\nconst fromPoints = (a, b, c) => {\r\n  // let n = b.minus(a).cross(c.minus(a)).unit()\r\n  // FIXME optimize later\r\n  const ba = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(b, a);\r\n  const ca = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(c, a);\r\n  const cr = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"cross\"])(ba, ca);\r\n  const normal = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"unit\"])(cr); // normal part\r\n  //\r\n  const w = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(normal, a);\r\n  return [normal[0], normal[1], normal[2], w];\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/fromPoints.js?");

/***/ }),

/***/ "../../math/plane/fromPointsRandom.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/fromPointsRandom.js ***!
  \***************************************************************************/
/*! exports provided: fromPointsRandom */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPointsRandom\", function() { return fromPointsRandom; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n\r\n\r\n\r\nconst EPS = 1e-5;\r\n\r\n/** Create a new plane from the given points like fromPoints,\r\n * but allow the vectors to be on one point or one line\r\n * in such a case a random plane through the given points is constructed\r\n * @param {Vec3} a - 3D point\r\n * @param {Vec3} b - 3D point\r\n * @param {Vec3} c - 3D point\r\n * @returns {Vec4} a new plane with properly typed values\r\n */\r\nconst fromPointsRandom = (a, b, c) => {\r\n  let v1 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(b, a);\r\n  let v2 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(c, a);\r\n  if (Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"length\"])(v1) < EPS) {\r\n    v1 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"random\"])(v2);\r\n  }\r\n  if (Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"length\"])(v2) < EPS) {\r\n    v2 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"random\"])(v1);\r\n  }\r\n  let normal = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"cross\"])(v1, v2);\r\n  if (Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"length\"])(normal) < EPS) {\r\n    // this would mean that v1 == v2.negated()\r\n    v2 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"random\"])(v1);\r\n    normal = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"cross\"])(v1, v2);\r\n  }\r\n  normal = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"unit\"])(normal);\r\n  return Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__[\"fromValues\"])(normal[0], normal[1], normal[2], Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(normal, a));\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/fromPointsRandom.js?");

/***/ }),

/***/ "../../math/plane/main.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/main.js ***!
  \***************************************************************/
/*! exports provided: equals, flip, fromNormalAndPoint, fromPoints, fromPointsRandom, signedDistanceToPoint, splitLineSegmentByPlane, toXYPlaneTransforms, transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _equals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./equals */ \"../../math/plane/equals.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return _equals__WEBPACK_IMPORTED_MODULE_0__[\"equals\"]; });\n\n/* harmony import */ var _flip__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./flip */ \"../../math/plane/flip.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return _flip__WEBPACK_IMPORTED_MODULE_1__[\"flip\"]; });\n\n/* harmony import */ var _fromNormalAndPoint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fromNormalAndPoint */ \"../../math/plane/fromNormalAndPoint.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromNormalAndPoint\", function() { return _fromNormalAndPoint__WEBPACK_IMPORTED_MODULE_2__[\"fromNormalAndPoint\"]; });\n\n/* harmony import */ var _fromPoints__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fromPoints */ \"../../math/plane/fromPoints.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromPoints\", function() { return _fromPoints__WEBPACK_IMPORTED_MODULE_3__[\"fromPoints\"]; });\n\n/* harmony import */ var _fromPointsRandom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fromPointsRandom */ \"../../math/plane/fromPointsRandom.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromPointsRandom\", function() { return _fromPointsRandom__WEBPACK_IMPORTED_MODULE_4__[\"fromPointsRandom\"]; });\n\n/* harmony import */ var _signedDistanceToPoint__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./signedDistanceToPoint */ \"../../math/plane/signedDistanceToPoint.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"signedDistanceToPoint\", function() { return _signedDistanceToPoint__WEBPACK_IMPORTED_MODULE_5__[\"signedDistanceToPoint\"]; });\n\n/* harmony import */ var _splitLineSegmentByPlane__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./splitLineSegmentByPlane */ \"../../math/plane/splitLineSegmentByPlane.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"splitLineSegmentByPlane\", function() { return _splitLineSegmentByPlane__WEBPACK_IMPORTED_MODULE_6__[\"splitLineSegmentByPlane\"]; });\n\n/* harmony import */ var _toXYPlaneTransforms__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./toXYPlaneTransforms */ \"../../math/plane/toXYPlaneTransforms.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toXYPlaneTransforms\", function() { return _toXYPlaneTransforms__WEBPACK_IMPORTED_MODULE_7__[\"toXYPlaneTransforms\"]; });\n\n/* harmony import */ var _transform__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./transform */ \"../../math/plane/transform.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return _transform__WEBPACK_IMPORTED_MODULE_8__[\"transform\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/main.js?");

/***/ }),

/***/ "../../math/plane/signedDistanceToPoint.js":
/*!********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/signedDistanceToPoint.js ***!
  \********************************************************************************/
/*! exports provided: signedDistanceToPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"signedDistanceToPoint\", function() { return signedDistanceToPoint; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\nconst W = 3;\r\n\r\n/**\r\n * Calculate the distance to the given point\r\n * @return {Number} signed distance to point\r\n */\r\nconst signedDistanceToPoint = (plane, point) => Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(plane, point) - plane[W];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/signedDistanceToPoint.js?");

/***/ }),

/***/ "../../math/plane/splitLineSegmentByPlane.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/splitLineSegmentByPlane.js ***!
  \**********************************************************************************/
/*! exports provided: splitLineSegmentByPlane */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"splitLineSegmentByPlane\", function() { return splitLineSegmentByPlane; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n/**\r\n * Split the given line by the given plane.\r\n * Robust splitting, even if the line is parallel to the plane\r\n * @return {vec3} a new point\r\n */\r\nconst splitLineSegmentByPlane = (plane, p1, p2) => {\r\n  const direction = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(p2, p1);\r\n  let lambda = (plane[3] - Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(plane, p1)) / Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(plane, direction);\r\n  if (Number.isNaN(lambda)) lambda = 0;\r\n  if (lambda > 1) lambda = 1;\r\n  if (lambda < 0) lambda = 0;\r\n  return Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(p1, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"scale\"])(lambda, direction));\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/splitLineSegmentByPlane.js?");

/***/ }),

/***/ "../../math/plane/toXYPlaneTransforms.js":
/*!******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/toXYPlaneTransforms.js ***!
  \******************************************************************************/
/*! exports provided: toXYPlaneTransforms */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toXYPlaneTransforms\", function() { return toXYPlaneTransforms; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n\r\n\r\n\r\n\r\nconst X = 0;\r\nconst Y = 1;\r\nconst Z = 2;\r\nconst W = 3;\r\n\r\nconst toXYPlaneTransforms = (plane, rightVector) => {\r\n  if (rightVector === undefined) {\r\n    rightVector = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"random\"])(plane);\r\n  }\r\n\r\n  const v = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"unit\"])(Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"cross\"])(plane, rightVector));\r\n  const u = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"cross\"])(v, plane);\r\n  const p = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"multiply\"])(plane, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"fromScalar\"])(plane[W]));\r\n\r\n  return [\r\n    // to\r\n    Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__[\"fromValues\"])(\r\n      u[X], v[X], plane[X], 0,\r\n      u[Y], v[Y], plane[Y], 0,\r\n      u[Z], v[Z], plane[Z], 0,\r\n      0, 0, -plane[W], 1),\r\n    // from\r\n    Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_1__[\"fromValues\"])(\r\n      u[X], u[Y], u[Z], 0,\r\n      v[X], v[Y], v[Z], 0,\r\n      plane[X], plane[Y], plane[Z], 0,\r\n      p[X], p[Y], p[Z], 1)\r\n  ];\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/toXYPlaneTransforms.js?");

/***/ }),

/***/ "../../math/plane/transform.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/transform.js ***!
  \********************************************************************/
/*! exports provided: transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return transform; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _flip__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./flip */ \"../../math/plane/flip.js\");\n/* harmony import */ var _fromPoints__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fromPoints */ \"../../math/plane/fromPoints.js\");\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Transform the given plane using the given matrix\r\n * @return {Array} a new plane with properly typed values\r\n */\r\nconst transform = (matrix, plane) => {\r\n  const ismirror = Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_3__[\"isMirroring\"])(matrix);\r\n  // get two vectors in the plane:\r\n  const r = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"random\"])(plane);\r\n  const u = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"cross\"])(plane, r);\r\n  const v = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"cross\"])(plane, u);\r\n  // get 3 points in the plane:\r\n  let point1 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"multiply\"])(plane, [plane[3], plane[3], plane[3]]);\r\n  let point2 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(point1, u);\r\n  let point3 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(point1, v);\r\n  // transform the points:\r\n  point1 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"transform\"])(matrix, point1);\r\n  point2 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"transform\"])(matrix, point2);\r\n  point3 = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"transform\"])(matrix, point3);\r\n  // and create a new plane from the transformed points:\r\n  let newplane = Object(_fromPoints__WEBPACK_IMPORTED_MODULE_2__[\"fromPoints\"])(point1, point2, point3);\r\n  if (ismirror) {\r\n    // the transform is mirroring so mirror the plane\r\n    newplane = Object(_flip__WEBPACK_IMPORTED_MODULE_1__[\"flip\"])(newplane);\r\n  }\r\n  return newplane;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/plane/transform.js?");

/***/ }),

/***/ "../../math/poly3/canonicalize.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/canonicalize.js ***!
  \***********************************************************************/
/*! exports provided: canonicalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return canonicalize; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./map */ \"../../math/poly3/map.js\");\n\r\n\r\n\r\nconst canonicalize = polygon => Object(_map__WEBPACK_IMPORTED_MODULE_1__[\"map\"])(polygon, _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"]);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/canonicalize.js?");

/***/ }),

/***/ "../../math/poly3/eachEdge.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/eachEdge.js ***!
  \*******************************************************************/
/*! exports provided: eachEdge */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eachEdge\", function() { return eachEdge; });\n/**\r\n * Emits the edges of a polygon in order.\r\n *\r\n * @param {function} the function to call with each edge in order.\r\n * @param {Polygon} the polygon of which to emit the edges.\r\n */\r\n\r\nconst eachEdge = (options = {}, thunk, polygon) => {\r\n  if (polygon.length >= 2) {\r\n    for (let nth = 1; nth < polygon.length; nth++) {\r\n      thunk(polygon[nth - 1], polygon[nth]);\r\n    }\r\n    thunk(polygon[polygon.length - 1], polygon[0]);\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/eachEdge.js?");

/***/ }),

/***/ "../../math/poly3/flip.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/flip.js ***!
  \***************************************************************/
/*! exports provided: flip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return flip; });\n/**\r\n * Flip the give polygon to face the opposite direction.\r\n *\r\n * @param {poly3} polygon - the polygon to flip\r\n * @returns {poly3} a new poly3\r\n */\r\nconst flip = (polygon) => [...polygon].reverse();\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/flip.js?");

/***/ }),

/***/ "../../math/poly3/fromPoints.js":
/*!*********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/fromPoints.js ***!
  \*********************************************************************/
/*! exports provided: fromPoints */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPoints\", function() { return fromPoints; });\n/**\r\n * Create a poly3 from the given points.\r\n *\r\n * @param {Array[]} points - list of points\r\n * @param {plane} [planeof] - plane of the polygon\r\n *\r\n * @example\r\n * const points = [\r\n *   [0,  0, 0],\r\n *   [0, 10, 0],\r\n *   [0, 10, 10]\r\n * ]\r\n * const polygon = createFromPoints(points)\r\n */\r\nconst fromPoints = (points, planeof) => [...points];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/fromPoints.js?");

/***/ }),

/***/ "../../math/poly3/isConvex.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/isConvex.js ***!
  \*******************************************************************/
/*! exports provided: isConvex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isConvex\", function() { return isConvex; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _toPlane__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toPlane */ \"../../math/poly3/toPlane.js\");\n\r\n\r\n\r\n\r\n/**\r\n * Check whether the polygon is convex.\r\n * @returns {boolean}\r\n */\r\nconst areVerticesConvex = (vertices, plane) => {\r\n  const numvertices = vertices.length;\r\n  if (numvertices > 2) {\r\n    let prevprevpos = vertices[numvertices - 2];\r\n    let prevpos = vertices[numvertices - 1];\r\n    for (let i = 0; i < numvertices; i++) {\r\n      const pos = vertices[i];\r\n      if (!isConvexPoint(prevprevpos, prevpos, pos, plane)) {\r\n        return false;\r\n      }\r\n      prevprevpos = prevpos;\r\n      prevpos = pos;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\n// calculate whether three points form a convex corner\r\n//  prevpoint, point, nextpoint: the 3 coordinates (Vector3D instances)\r\n//  normal: the normal vector of the plane\r\nconst isConvexPoint = (prevpoint, point, nextpoint, plane) => {\r\n  const crossproduct = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"cross\"])(\r\n    Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(point, prevpoint),\r\n    Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(nextpoint, point)\r\n  );\r\n  // note: plane ~= normal point\r\n  const crossdotnormal = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(crossproduct, plane);\r\n  return crossdotnormal >= 0;\r\n};\r\n\r\n// FIXME: not used anywhere ???\r\n/* const isStrictlyConvexPoint = function (prevpoint, point, nextpoint, normal) {\r\n  let crossproduct = point.minus(prevpoint).cross(nextpoint.minus(point))\r\n  let crossdotnormal = crossproduct.dot(normal)\r\n  return (crossdotnormal >= EPS)\r\n} */\r\n\r\nconst isConvex = (polygon) => areVerticesConvex(polygon, Object(_toPlane__WEBPACK_IMPORTED_MODULE_1__[\"toPlane\"])(polygon));\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/isConvex.js?");

/***/ }),

/***/ "../../math/poly3/isCoplanar.js":
/*!*********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/isCoplanar.js ***!
  \*********************************************************************/
/*! exports provided: isCoplanar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isCoplanar\", function() { return isCoplanar; });\n/* harmony import */ var _jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-plane */ \"../../math/plane/main.js\");\n/* harmony import */ var _toPlane__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toPlane */ \"../../math/poly3/toPlane.js\");\n\r\n\r\n\r\nconst isCoplanar = (polygon) => {\r\n  const plane = Object(_toPlane__WEBPACK_IMPORTED_MODULE_1__[\"toPlane\"])(polygon);\r\n  for (const point of polygon) {\r\n    if (Object(_jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_0__[\"signedDistanceToPoint\"])(plane, point) > 1e-5) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/isCoplanar.js?");

/***/ }),

/***/ "../../math/poly3/isStrictlyCoplanar.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/isStrictlyCoplanar.js ***!
  \*****************************************************************************/
/*! exports provided: isStrictlyCoplanar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isStrictlyCoplanar\", function() { return isStrictlyCoplanar; });\n/* harmony import */ var _jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-plane */ \"../../math/plane/main.js\");\n/* harmony import */ var _toPlane__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toPlane */ \"../../math/poly3/toPlane.js\");\n\r\n\r\n\r\nconst isStrictlyCoplanar = (polygon) => {\r\n  const plane = Object(_toPlane__WEBPACK_IMPORTED_MODULE_1__[\"toPlane\"])(polygon);\r\n  for (let nth = 1; nth < polygon.length - 2; nth++) {\r\n    if (!Object(_jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_0__[\"equals\"])(plane, Object(_toPlane__WEBPACK_IMPORTED_MODULE_1__[\"toPlane\"])(polygon.slice(nth)))) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/isStrictlyCoplanar.js?");

/***/ }),

/***/ "../../math/poly3/main.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/main.js ***!
  \***************************************************************/
/*! exports provided: canonicalize, eachEdge, flip, fromPoints, isConvex, isCoplanar, isStrictlyCoplanar, map, measureArea, measureBoundingBox, measureBoundingSphere, toEdges, toPlane, toPoints, transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _canonicalize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canonicalize */ \"../../math/poly3/canonicalize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return _canonicalize__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"]; });\n\n/* harmony import */ var _eachEdge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./eachEdge */ \"../../math/poly3/eachEdge.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"eachEdge\", function() { return _eachEdge__WEBPACK_IMPORTED_MODULE_1__[\"eachEdge\"]; });\n\n/* harmony import */ var _flip__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./flip */ \"../../math/poly3/flip.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"flip\", function() { return _flip__WEBPACK_IMPORTED_MODULE_2__[\"flip\"]; });\n\n/* harmony import */ var _fromPoints__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fromPoints */ \"../../math/poly3/fromPoints.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromPoints\", function() { return _fromPoints__WEBPACK_IMPORTED_MODULE_3__[\"fromPoints\"]; });\n\n/* harmony import */ var _isConvex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isConvex */ \"../../math/poly3/isConvex.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"isConvex\", function() { return _isConvex__WEBPACK_IMPORTED_MODULE_4__[\"isConvex\"]; });\n\n/* harmony import */ var _isCoplanar__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./isCoplanar */ \"../../math/poly3/isCoplanar.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"isCoplanar\", function() { return _isCoplanar__WEBPACK_IMPORTED_MODULE_5__[\"isCoplanar\"]; });\n\n/* harmony import */ var _isStrictlyCoplanar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./isStrictlyCoplanar */ \"../../math/poly3/isStrictlyCoplanar.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"isStrictlyCoplanar\", function() { return _isStrictlyCoplanar__WEBPACK_IMPORTED_MODULE_6__[\"isStrictlyCoplanar\"]; });\n\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./map */ \"../../math/poly3/map.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"map\", function() { return _map__WEBPACK_IMPORTED_MODULE_7__[\"map\"]; });\n\n/* harmony import */ var _measureArea__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./measureArea */ \"../../math/poly3/measureArea.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"measureArea\", function() { return _measureArea__WEBPACK_IMPORTED_MODULE_8__[\"measureArea\"]; });\n\n/* harmony import */ var _measureBoundingBox__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./measureBoundingBox */ \"../../math/poly3/measureBoundingBox.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingBox\", function() { return _measureBoundingBox__WEBPACK_IMPORTED_MODULE_9__[\"measureBoundingBox\"]; });\n\n/* harmony import */ var _measureBoundingSphere__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./measureBoundingSphere */ \"../../math/poly3/measureBoundingSphere.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingSphere\", function() { return _measureBoundingSphere__WEBPACK_IMPORTED_MODULE_10__[\"measureBoundingSphere\"]; });\n\n/* harmony import */ var _toEdges__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./toEdges */ \"../../math/poly3/toEdges.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toEdges\", function() { return _toEdges__WEBPACK_IMPORTED_MODULE_11__[\"toEdges\"]; });\n\n/* harmony import */ var _toPlane__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./toPlane */ \"../../math/poly3/toPlane.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toPlane\", function() { return _toPlane__WEBPACK_IMPORTED_MODULE_12__[\"toPlane\"]; });\n\n/* harmony import */ var _toPoints__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./toPoints */ \"../../math/poly3/toPoints.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toPoints\", function() { return _toPoints__WEBPACK_IMPORTED_MODULE_13__[\"toPoints\"]; });\n\n/* harmony import */ var _transform__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./transform */ \"../../math/poly3/transform.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return _transform__WEBPACK_IMPORTED_MODULE_14__[\"transform\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/main.js?");

/***/ }),

/***/ "../../math/poly3/map.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/map.js ***!
  \**************************************************************/
/*! exports provided: map */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"map\", function() { return map; });\n/**\r\n * Transforms the vertices of a polygon, producing a new poly3.\r\n *\r\n * The polygon does not need to be a poly3, but may be any array of\r\n * points. The points being represented as arrays of values.\r\n *\r\n * If the original has a 'plane' property, the result will have a clone\r\n * of the plane.\r\n *\r\n * @param {Function} [transform=vec3.clone] - function used to transform the vertices.\r\n * @returns {Array} a copy with transformed vertices and copied properties.\r\n *\r\n * @example\r\n * const vertices = [ [0, 0, 0], [0, 10, 0], [0, 10, 10] ]\r\n * let observed = poly3.map(vertices)\r\n */\r\nconst map = (original, transform) => {\r\n  if (original === undefined) {\r\n    original = [];\r\n  }\r\n  if (transform === undefined) {\r\n    transform = _ => _;\r\n  }\r\n  return original.map(vertex => transform(vertex));\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/map.js?");

/***/ }),

/***/ "../../math/poly3/measureArea.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/measureArea.js ***!
  \**********************************************************************/
/*! exports provided: measureArea */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"measureArea\", function() { return measureArea; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n// measure the area of the given poly3 (3D planar polygon)\r\n// translated from the orginal C++ code from Dan Sunday\r\n// 2000 softSurfer http://geomalgorithms.com\r\nconst measureArea = (poly3) => {\r\n  let area = poly3.area;\r\n  if (area !== undefined) {\r\n    return area;\r\n  }\r\n\r\n  area = 0;\r\n  const n = poly3.length;\r\n  if (n < 3) {\r\n    return 0; // degenerate polygon\r\n  }\r\n  const vertices = poly3;\r\n\r\n  // calculate a real normal\r\n  const a = vertices[0];\r\n  const b = vertices[1];\r\n  const c = vertices[2];\r\n  const ba = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(b, a);\r\n  const ca = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(c, a);\r\n  const normal = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"cross\"])(ba, ca);\r\n  // let normal = b.minus(a).cross(c.minus(a))\r\n  // let normal = poly3.plane.normal // unit based normal, CANNOT use\r\n\r\n  // determin direction of projection\r\n  const ax = Math.abs(normal[0]);\r\n  const ay = Math.abs(normal[1]);\r\n  const az = Math.abs(normal[2]);\r\n  const an = Math.sqrt((ax * ax) + (ay * ay) + (az * az)); // length of normal\r\n\r\n  let coord = 3; // ignore Z coordinates\r\n  if ((ax > ay) && (ax > az)) {\r\n    coord = 1; // ignore X coordinates\r\n  } else\r\n  if (ay > az) {\r\n    coord = 2; // ignore Y coordinates\r\n  }\r\n\r\n  let h = 0;\r\n  let i = 1;\r\n  let j = 2;\r\n  switch (coord) {\r\n    case 1: // ignore X coordinates\r\n    // compute area of 2D projection\r\n      for (i = 1; i < n; i++) {\r\n        h = i - 1;\r\n        j = (i + 1) % n;\r\n        area += (vertices[i][1] * (vertices[j][2] - vertices[h][2]));\r\n      }\r\n      area += (vertices[0][1] * (vertices[1][2] - vertices[n - 1][2]));\r\n      // scale to get area\r\n      area *= (an / (2 * normal[0]));\r\n      break;\r\n\r\n    case 2: // ignore Y coordinates\r\n    // compute area of 2D projection\r\n      for (i = 1; i < n; i++) {\r\n        h = i - 1;\r\n        j = (i + 1) % n;\r\n        area += (vertices[i][2] * (vertices[j][0] - vertices[h][0]));\r\n      }\r\n      area += (vertices[0][2] * (vertices[1][0] - vertices[n - 1][0]));\r\n      // scale to get area\r\n      area *= (an / (2 * normal[1]));\r\n      break;\r\n\r\n    case 3: // ignore Z coordinates\r\n    default:\r\n    // compute area of 2D projection\r\n      for (i = 1; i < n; i++) {\r\n        h = i - 1;\r\n        j = (i + 1) % n;\r\n        area += (vertices[i][0] * (vertices[j][1] - vertices[h][1]));\r\n      }\r\n      area += (vertices[0][0] * (vertices[1][1] - vertices[n - 1][1]));\r\n      // scale to get area\r\n      area *= (an / (2 * normal[2]));\r\n      break;\r\n  }\r\n\r\n  poly3.area = area;\r\n  return area;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/measureArea.js?");

/***/ }),

/***/ "../../math/poly3/measureBoundingBox.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/measureBoundingBox.js ***!
  \*****************************************************************************/
/*! exports provided: measureBoundingBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingBox\", function() { return measureBoundingBox; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n// returns an array of two Vector3Ds (minimum coordinates and maximum coordinates)\r\nconst measureBoundingBox = (poly3) => {\r\n  const cached = poly3.boundingBox;\r\n  if (cached === undefined) {\r\n    const vertices = poly3;\r\n    const numvertices = vertices.length;\r\n    let min = numvertices === 0 ? Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"fromValues\"])() : vertices[0];\r\n    let max = min;\r\n    for (let i = 1; i < numvertices; i++) {\r\n      min = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"min\"])(min, vertices[i]);\r\n      max = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"max\"])(max, vertices[i]);\r\n    }\r\n    poly3.boundingBox = [min, max];\r\n    return poly3.boundingBox;\r\n  }\r\n  return cached;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/measureBoundingBox.js?");

/***/ }),

/***/ "../../math/poly3/measureBoundingSphere.js":
/*!********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/measureBoundingSphere.js ***!
  \********************************************************************************/
/*! exports provided: measureBoundingSphere */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"measureBoundingSphere\", function() { return measureBoundingSphere; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _measureBoundingBox__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./measureBoundingBox */ \"../../math/poly3/measureBoundingBox.js\");\n\r\n\r\n\r\n\r\n/** Measure the bounding sphere of the given poly3\r\n * @param {poly3} the poly3 to measure\r\n * @returns computed bounding sphere; center (vec3) and radius\r\n */\r\nconst measureBoundingSphere = (poly3) => {\r\n  const box = Object(_measureBoundingBox__WEBPACK_IMPORTED_MODULE_1__[\"measureBoundingBox\"])(poly3);\r\n  const center = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"scale\"])(0.5, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(box[0], box[1]));\r\n  const radius = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"distance\"])(center, box[1]);\r\n  return [center, radius];\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/measureBoundingSphere.js?");

/***/ }),

/***/ "../../math/poly3/toEdges.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/toEdges.js ***!
  \******************************************************************/
/*! exports provided: toEdges */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toEdges\", function() { return toEdges; });\n/* harmony import */ var _eachEdge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eachEdge */ \"../../math/poly3/eachEdge.js\");\n\r\n\r\n/**\r\n * Converts the polygon to an ordered list of edges.\r\n *\r\n * @param {Polygon}\r\n * @returns {Edges}\r\n */\r\n\r\nconst toEdges = (options = {}, polygon) => {\r\n  let edges = [];\r\n  Object(_eachEdge__WEBPACK_IMPORTED_MODULE_0__[\"eachEdge\"])({}, (a, b) => edges.push([a, b]), polygon);\r\n  return edges;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/toEdges.js?");

/***/ }),

/***/ "../../math/poly3/toPlane.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/toPlane.js ***!
  \******************************************************************/
/*! exports provided: toPlane */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toPlane\", function() { return toPlane; });\n/* harmony import */ var _jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-plane */ \"../../math/plane/main.js\");\n\r\n\r\nconst toPlane = (polygon) => {\r\n  if (polygon.plane === undefined) {\r\n    if (polygon.length >= 3) {\r\n      polygon.plane = Object(_jsxcad_math_plane__WEBPACK_IMPORTED_MODULE_0__[\"fromPoints\"])(...polygon);\r\n    } else {\r\n      throw Error('die');\r\n    }\r\n  }\r\n  return polygon.plane;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/toPlane.js?");

/***/ }),

/***/ "../../math/poly3/toPoints.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/toPoints.js ***!
  \*******************************************************************/
/*! exports provided: toPoints */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toPoints\", function() { return toPoints; });\n/**\r\n * Returns the polygon as an array of points.\r\n * @param {Polygon}\r\n * @returns {Points}\r\n */\r\n\r\nconst toPoints = polygon => polygon;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/toPoints.js?");

/***/ }),

/***/ "../../math/poly3/transform.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/transform.js ***!
  \********************************************************************/
/*! exports provided: transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return transform; });\n/* harmony import */ var _jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-mat4 */ \"../../math/mat4/main.js\");\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./map */ \"../../math/poly3/map.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\n\r\n// Affine transformation of polygon. Returns a new polygon.\r\nconst transform = (matrix, polygon) => {\r\n  const transformed = Object(_map__WEBPACK_IMPORTED_MODULE_1__[\"map\"])(polygon, vertex => Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_2__[\"transform\"])(matrix, vertex));\r\n  if (Object(_jsxcad_math_mat4__WEBPACK_IMPORTED_MODULE_0__[\"isMirroring\"])(matrix)) {\r\n    // Reverse the order to preserve the orientation.\r\n    transformed.reverse();\r\n  }\r\n  return transformed;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/poly3/transform.js?");

/***/ }),

/***/ "../../math/ray3/canonicalize.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/canonicalize.js ***!
  \**********************************************************************/
/*! exports provided: canonicalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return canonicalize; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n/**\r\n * Produce a canonical version of a ray3.\r\n * @param {ray3} the ray\r\n * @returns {ray3} the canonical ray3\r\n */\r\nconst canonicalize = ([point, unitDirection]) => [Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"])(point), Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"])(unitDirection)];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/canonicalize.js?");

/***/ }),

/***/ "../../math/ray3/closestPoint.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/closestPoint.js ***!
  \**********************************************************************/
/*! exports provided: closestPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"closestPoint\", function() { return closestPoint; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n/**\r\n * Determine the closest point on the given line to the given point.\r\n *\r\n * @param {vec3} point the point of reference\r\n * @param {line3} line the 3D line for calculations\r\n * @returns {vec3} a new point\r\n */\r\nconst closestPoint = (point, [lpoint, ldirection]) => {\r\n  const a = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(point, lpoint), ldirection);\r\n  const b = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(ldirection, ldirection);\r\n  const t = a / b;\r\n  return Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(lpoint, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"scale\"])(t, ldirection));\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/closestPoint.js?");

/***/ }),

/***/ "../../math/ray3/direction.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/direction.js ***!
  \*******************************************************************/
/*! exports provided: direction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"direction\", function() { return direction; });\n/**\r\n * Return the direction of the given line.\r\n *\r\n * @return {vec3} the relative vector in the direction of the line\r\n */\r\nconst direction = ([point, unitDirection]) => unitDirection;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/direction.js?");

/***/ }),

/***/ "../../math/ray3/distanceToPoint.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/distanceToPoint.js ***!
  \*************************************************************************/
/*! exports provided: distanceToPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"distanceToPoint\", function() { return distanceToPoint; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _closestPoint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./closestPoint */ \"../../math/ray3/closestPoint.js\");\n\r\n\r\n\r\n\r\n/**\r\n * Calculate the distance (positive) between the given point and line\r\n *\r\n * @param {vec3} point the point of reference\r\n * @param {line3} line the 3D line of reference\r\n * @return {Number} distance between line and point\r\n */\r\nconst distanceToPoint = (point, line) => {\r\n  const closest = Object(_closestPoint__WEBPACK_IMPORTED_MODULE_1__[\"closestPoint\"])(point, line);\r\n  const distancevector = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(point, closest);\r\n  return Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"length\"])(distancevector);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/distanceToPoint.js?");

/***/ }),

/***/ "../../math/ray3/equals.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/equals.js ***!
  \****************************************************************/
/*! exports provided: equals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n/**\r\n * Compare the given 3D lines for equality\r\n *\r\n * @return {boolean} true if lines are equal\r\n */\r\nconst equals = ([point1, unit1], [point2, unit2]) => {\r\n  // compare directions (unit vectors)\r\n  if (!Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"equals\"])(unit1, unit2)) return false;\r\n\r\n  // compare points\r\n  if (!Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"equals\"])(point1, point2)) return false;\r\n\r\n  // why would lines with the same slope (direction) and different points be equal?\r\n  // let distance = distanceToPoint(line1, line2[0])\r\n  // if (distance > EPS) return false\r\n\r\n  return true;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/equals.js?");

/***/ }),

/***/ "../../math/ray3/fromPlanes.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/fromPlanes.js ***!
  \********************************************************************/
/*! exports provided: fromPlanes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPlanes\", function() { return fromPlanes; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _fromPointAndDirection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fromPointAndDirection */ \"../../math/ray3/fromPointAndDirection.js\");\n/* harmony import */ var _jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/math-utils */ \"../../math/utils/main.js\");\n\r\n\r\n\r\n\r\n\r\nconst EPS = 1e-5;\r\n\r\nconst fromPlanes = (plane1, plane2) => {\r\n  let direction = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"cross\"])(plane1, plane2);\r\n  let length = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"length\"])(direction);\r\n  if (length < EPS) {\r\n    throw new Error('parallel planes do not intersect');\r\n  }\r\n  length = (1.0 / length);\r\n  direction = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"scale\"])(length, direction);\r\n\r\n  const absx = Math.abs(direction[0]);\r\n  const absy = Math.abs(direction[1]);\r\n  const absz = Math.abs(direction[2]);\r\n  let origin;\r\n  let r;\r\n  if ((absx >= absy) && (absx >= absz)) {\r\n    // find a point p for which x is zero\r\n    r = Object(_jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_2__[\"solve2Linear\"])(plane1[1], plane1[2], plane2[1], plane2[2], plane1[3], plane2[3]);\r\n    origin = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"fromValues\"])(0, r[0], r[1]);\r\n  } else if ((absy >= absx) && (absy >= absz)) {\r\n    // find a point p for which y is zero\r\n    r = Object(_jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_2__[\"solve2Linear\"])(plane1[0], plane1[2], plane2[0], plane2[2], plane1[3], plane2[3]);\r\n    origin = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"fromValues\"])(r[0], 0, r[1]);\r\n  } else {\r\n    // find a point p for which z is zero\r\n    r = Object(_jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_2__[\"solve2Linear\"])(plane1[0], plane1[1], plane2[0], plane2[1], plane1[3], plane2[3]);\r\n    origin = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"fromValues\"])(r[0], r[1], 0);\r\n  }\r\n  return Object(_fromPointAndDirection__WEBPACK_IMPORTED_MODULE_1__[\"fromPointAndDirection\"])(origin, direction);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/fromPlanes.js?");

/***/ }),

/***/ "../../math/ray3/fromPointAndDirection.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/fromPointAndDirection.js ***!
  \*******************************************************************************/
/*! exports provided: fromPointAndDirection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPointAndDirection\", function() { return fromPointAndDirection; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n/**\r\n * Create a line in 3D space from the given data.\r\n *\r\n * The point can be any random point on the line.\r\n * The direction must be a vector with positive or negative distance from the point.\r\n * See the logic of fromPoints for appropriate values.\r\n *\r\n * @param {vec3} point start point of the line segment\r\n * @param {vec3} direction direction of the line segment\r\n * @returns {line3} a new unbounded 3D line\r\n */\r\nconst fromPointAndDirection = (point, direction) => [point, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"unit\"])(direction)];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/fromPointAndDirection.js?");

/***/ }),

/***/ "../../math/ray3/fromPoints.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/fromPoints.js ***!
  \********************************************************************/
/*! exports provided: fromPoints */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPoints\", function() { return fromPoints; });\n/* harmony import */ var _fromPointAndDirection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fromPointAndDirection */ \"../../math/ray3/fromPointAndDirection.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\n/**\r\n * Creates a new 3D line that passes through the given points.\r\n *\r\n * @param {vec3} p1 start point of the line segment\r\n * @param {vec3} p2 end point of the line segment\r\n * @returns {line3} a new unbounded 3D line\r\n */\r\nconst fromPoints = (p1, p2) => {\r\n  const direction = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"subtract\"])(p2, p1);\r\n  return Object(_fromPointAndDirection__WEBPACK_IMPORTED_MODULE_0__[\"fromPointAndDirection\"])(p1, direction);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/fromPoints.js?");

/***/ }),

/***/ "../../math/ray3/intersectPointOfLineAndPlane.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/intersectPointOfLineAndPlane.js ***!
  \**************************************************************************************/
/*! exports provided: intersectPointOfLineAndPlane */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"intersectPointOfLineAndPlane\", function() { return intersectPointOfLineAndPlane; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\nconst W = 3;\r\n\r\n/**\r\n * Determine the closest point on the given plane to the given line.\r\n *\r\n * The point of intersection will be invalid if parallel to the plane, e.g. NaN.\r\n *\r\n * @param {plane} plane the plane of reference\r\n * @param {line3} line the 3D line of reference\r\n * @returns {vec3} a new point\r\n */\r\nconst intersectPointOfLineAndPlane = (plane, [origin, direction]) => {\r\n  // plane: plane.normal * p = plane.w\r\n  const pw = plane[W];\r\n\r\n  // point: p = line.point + labda * line.direction\r\n  const lambda = (pw - Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(plane, origin)) / Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(plane, direction);\r\n\r\n  const point = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(origin, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"scale\"])(lambda, direction));\r\n  return point;\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/intersectPointOfLineAndPlane.js?");

/***/ }),

/***/ "../../math/ray3/main.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/main.js ***!
  \**************************************************************/
/*! exports provided: canonicalize, closestPoint, direction, distanceToPoint, equals, fromPointAndDirection, fromPlanes, fromPoints, intersectPointOfLineAndPlane, origin, reverse, transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _canonicalize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canonicalize */ \"../../math/ray3/canonicalize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return _canonicalize__WEBPACK_IMPORTED_MODULE_0__[\"canonicalize\"]; });\n\n/* harmony import */ var _closestPoint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./closestPoint */ \"../../math/ray3/closestPoint.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"closestPoint\", function() { return _closestPoint__WEBPACK_IMPORTED_MODULE_1__[\"closestPoint\"]; });\n\n/* harmony import */ var _direction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./direction */ \"../../math/ray3/direction.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"direction\", function() { return _direction__WEBPACK_IMPORTED_MODULE_2__[\"direction\"]; });\n\n/* harmony import */ var _distanceToPoint__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./distanceToPoint */ \"../../math/ray3/distanceToPoint.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"distanceToPoint\", function() { return _distanceToPoint__WEBPACK_IMPORTED_MODULE_3__[\"distanceToPoint\"]; });\n\n/* harmony import */ var _equals__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./equals */ \"../../math/ray3/equals.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return _equals__WEBPACK_IMPORTED_MODULE_4__[\"equals\"]; });\n\n/* harmony import */ var _fromPlanes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./fromPlanes */ \"../../math/ray3/fromPlanes.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromPlanes\", function() { return _fromPlanes__WEBPACK_IMPORTED_MODULE_5__[\"fromPlanes\"]; });\n\n/* harmony import */ var _fromPointAndDirection__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./fromPointAndDirection */ \"../../math/ray3/fromPointAndDirection.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromPointAndDirection\", function() { return _fromPointAndDirection__WEBPACK_IMPORTED_MODULE_6__[\"fromPointAndDirection\"]; });\n\n/* harmony import */ var _fromPoints__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./fromPoints */ \"../../math/ray3/fromPoints.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromPoints\", function() { return _fromPoints__WEBPACK_IMPORTED_MODULE_7__[\"fromPoints\"]; });\n\n/* harmony import */ var _intersectPointOfLineAndPlane__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./intersectPointOfLineAndPlane */ \"../../math/ray3/intersectPointOfLineAndPlane.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"intersectPointOfLineAndPlane\", function() { return _intersectPointOfLineAndPlane__WEBPACK_IMPORTED_MODULE_8__[\"intersectPointOfLineAndPlane\"]; });\n\n/* harmony import */ var _origin__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./origin */ \"../../math/ray3/origin.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"origin\", function() { return _origin__WEBPACK_IMPORTED_MODULE_9__[\"origin\"]; });\n\n/* harmony import */ var _reverse__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./reverse */ \"../../math/ray3/reverse.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"reverse\", function() { return _reverse__WEBPACK_IMPORTED_MODULE_10__[\"reverse\"]; });\n\n/* harmony import */ var _transform__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./transform */ \"../../math/ray3/transform.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return _transform__WEBPACK_IMPORTED_MODULE_11__[\"transform\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/main.js?");

/***/ }),

/***/ "../../math/ray3/origin.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/origin.js ***!
  \****************************************************************/
/*! exports provided: origin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"origin\", function() { return origin; });\n/**\r\n * Return the origin of the given line.\r\n *\r\n * @param {line3} line the 3D line of reference\r\n * @return {vec3} the origin of the line\r\n */\r\nconst origin = ([origin, unitDirection]) => origin;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/origin.js?");

/***/ }),

/***/ "../../math/ray3/reverse.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/reverse.js ***!
  \*****************************************************************/
/*! exports provided: reverse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"reverse\", function() { return reverse; });\n/* harmony import */ var _fromPointAndDirection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fromPointAndDirection */ \"../../math/ray3/fromPointAndDirection.js\");\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n\r\n\r\n\r\n/**\r\n * Create a new line in the opposite direction as the given.\r\n *\r\n * @param {line3} line the 3D line to reverse\r\n * @returns {line3} a new unbounded 3D line\r\n */\r\nconst reverse = ([point, unitDirection]) => Object(_fromPointAndDirection__WEBPACK_IMPORTED_MODULE_0__[\"fromPointAndDirection\"])(point, Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_1__[\"negate\"])(unitDirection));\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/reverse.js?");

/***/ }),

/***/ "../../math/ray3/transform.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/transform.js ***!
  \*******************************************************************/
/*! exports provided: transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return transform; });\n/* harmony import */ var _jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-vec3 */ \"../../math/vec3/main.js\");\n/* harmony import */ var _fromPointAndDirection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fromPointAndDirection */ \"../../math/ray3/fromPointAndDirection.js\");\n\r\n\r\n\r\n\r\n/**\r\n * Transforms the given 3D line using the given matrix.\r\n *\r\n * @param {mat4} matrix matrix to transform with\r\n * @param {line3} line the 3D line to transform\r\n * @returns {line3} a new unbounded 3D line\r\n */\r\nconst transform = (matrix, [point, direction]) => {\r\n  const pointPlusDirection = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(point, direction);\r\n  const newpoint = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"transform\"])(matrix, point);\r\n  const newPointPlusDirection = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"transform\"])(matrix, pointPlusDirection);\r\n  const newdirection = Object(_jsxcad_math_vec3__WEBPACK_IMPORTED_MODULE_0__[\"subtract\"])(newPointPlusDirection, newpoint);\r\n  return Object(_fromPointAndDirection__WEBPACK_IMPORTED_MODULE_1__[\"fromPointAndDirection\"])(newpoint, newdirection);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/ray3/transform.js?");

/***/ }),

/***/ "../../math/utils/clamp.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/clamp.js ***!
  \****************************************************************/
/*! exports provided: clamp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clamp\", function() { return clamp; });\nconst clamp = (value, min, max) => Math.min(Math.max(value, min), max);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/clamp.js?");

/***/ }),

/***/ "../../math/utils/degToRad.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/degToRad.js ***!
  \*******************************************************************/
/*! exports provided: degToRad */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"degToRad\", function() { return degToRad; });\n// radians = degrees * PI / 180\r\nconst degToRad = degrees => degrees * 0.017453292519943295;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/degToRad.js?");

/***/ }),

/***/ "../../math/utils/main.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/main.js ***!
  \***************************************************************/
/*! exports provided: clamp, degToRad, quantizeForSpace, radToDeg, reallyQuantizeForSpace, solve2Linear */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _clamp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clamp */ \"../../math/utils/clamp.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"clamp\", function() { return _clamp__WEBPACK_IMPORTED_MODULE_0__[\"clamp\"]; });\n\n/* harmony import */ var _degToRad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./degToRad */ \"../../math/utils/degToRad.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"degToRad\", function() { return _degToRad__WEBPACK_IMPORTED_MODULE_1__[\"degToRad\"]; });\n\n/* harmony import */ var _quantizeForSpace__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./quantizeForSpace */ \"../../math/utils/quantizeForSpace.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"quantizeForSpace\", function() { return _quantizeForSpace__WEBPACK_IMPORTED_MODULE_2__[\"quantizeForSpace\"]; });\n\n/* harmony import */ var _radToDeg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./radToDeg */ \"../../math/utils/radToDeg.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"radToDeg\", function() { return _radToDeg__WEBPACK_IMPORTED_MODULE_3__[\"radToDeg\"]; });\n\n/* harmony import */ var _reallyQuantizeForSpace__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reallyQuantizeForSpace */ \"../../math/utils/reallyQuantizeForSpace.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"reallyQuantizeForSpace\", function() { return _reallyQuantizeForSpace__WEBPACK_IMPORTED_MODULE_4__[\"reallyQuantizeForSpace\"]; });\n\n/* harmony import */ var _solve2Linear__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./solve2Linear */ \"../../math/utils/solve2Linear.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"solve2Linear\", function() { return _solve2Linear__WEBPACK_IMPORTED_MODULE_5__[\"solve2Linear\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/main.js?");

/***/ }),

/***/ "../../math/utils/quantizeForSpace.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/quantizeForSpace.js ***!
  \***************************************************************************/
/*! exports provided: quantizeForSpace */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"quantizeForSpace\", function() { return quantizeForSpace; });\n// TODO: Clean this up.\r\nconst quantizeForSpace = (value) => value;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/quantizeForSpace.js?");

/***/ }),

/***/ "../../math/utils/radToDeg.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/radToDeg.js ***!
  \*******************************************************************/
/*! exports provided: radToDeg */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"radToDeg\", function() { return radToDeg; });\n// degrees = radians * 180 / PI\r\nconst radToDeg = radians => radians * 57.29577951308232;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/radToDeg.js?");

/***/ }),

/***/ "../../math/utils/reallyQuantizeForSpace.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/reallyQuantizeForSpace.js ***!
  \*********************************************************************************/
/*! exports provided: reallyQuantizeForSpace */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"reallyQuantizeForSpace\", function() { return reallyQuantizeForSpace; });\nconst spatialResolution = 1e5;\r\n\r\n// Quantize values for use in spatial coordinates, and so on, even if the usual quantizeForSpace is disabled.\r\nconst reallyQuantizeForSpace = (value) => (Math.round(value * spatialResolution) / spatialResolution);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/reallyQuantizeForSpace.js?");

/***/ }),

/***/ "../../math/utils/solve2Linear.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/solve2Linear.js ***!
  \***********************************************************************/
/*! exports provided: solve2Linear */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"solve2Linear\", function() { return solve2Linear; });\nconst solve2Linear = (a, b, c, d, u, v) => {\r\n  const det = a * d - b * c;\r\n  const invdet = 1.0 / det;\r\n  const x = u * d - b * v;\r\n  const y = -u * c + a * v;\r\n  return [x * invdet, y * invdet];\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/utils/solve2Linear.js?");

/***/ }),

/***/ "../../math/vec2/abs.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/abs.js ***!
  \*************************************************************/
/*! exports provided: abs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"abs\", function() { return abs; });\n/**\r\n * Calculates the absolute value of the give vector\r\n *\r\n * @param {vec2} vec - given value\r\n * @returns {vec2} absolute value of the vector\r\n */\r\nconst abs = ([x, y]) => [Math.abs(x), Math.abs(y)];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/abs.js?");

/***/ }),

/***/ "../../math/vec2/add.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/add.js ***!
  \*************************************************************/
/*! exports provided: add */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nconst add = ([ax, ay], [bx, by]) => [ax + bx, ay + by];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/add.js?");

/***/ }),

/***/ "../../math/vec2/angleDegrees.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/angleDegrees.js ***!
  \**********************************************************************/
/*! exports provided: angleDegrees */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"angleDegrees\", function() { return angleDegrees; });\n/* harmony import */ var _angleRadians__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./angleRadians */ \"../../math/vec2/angleRadians.js\");\n/* harmony import */ var _jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-utils */ \"../../math/utils/main.js\");\n\r\n\r\n\r\nconst angleDegrees = (vector) => Object(_jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_1__[\"radToDeg\"])(Object(_angleRadians__WEBPACK_IMPORTED_MODULE_0__[\"angleRadians\"])(vector));\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/angleDegrees.js?");

/***/ }),

/***/ "../../math/vec2/angleRadians.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/angleRadians.js ***!
  \**********************************************************************/
/*! exports provided: angleRadians */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"angleRadians\", function() { return angleRadians; });\n// y=sin, x=cos\r\nconst angleRadians = ([x, y]) => Math.atan2(y, x);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/angleRadians.js?");

/***/ }),

/***/ "../../math/vec2/canonicalize.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/canonicalize.js ***!
  \**********************************************************************/
/*! exports provided: canonicalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return canonicalize; });\n/* harmony import */ var _jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-utils */ \"../../math/utils/main.js\");\n\r\n\r\nconst canonicalize = ([x, y]) => [Object(_jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_0__[\"reallyQuantizeForSpace\"])(x), Object(_jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_0__[\"reallyQuantizeForSpace\"])(y)];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/canonicalize.js?");

/***/ }),

/***/ "../../math/vec2/cross.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/cross.js ***!
  \***************************************************************/
/*! exports provided: cross */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cross\", function() { return cross; });\n/**\r\n * Computes the cross product (3D) of two vectors\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} cross product\r\n */\r\n// Alternatively return vec3.cross(out, vec3.fromVec2(a), vec3.fromVec2(b))\r\nconst cross = (a, b) => [0, 0, a[0] * b[1] - a[1] * b[0]];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/cross.js?");

/***/ }),

/***/ "../../math/vec2/distance.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/distance.js ***!
  \******************************************************************/
/*! exports provided: distance */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"distance\", function() { return distance; });\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nconst distance = ([ax, ay], [bx, by]) => {\r\n  const x = bx - ax;\r\n  const y = by - ay;\r\n  return Math.sqrt(x * x + y * y);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/distance.js?");

/***/ }),

/***/ "../../math/vec2/divide.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/divide.js ***!
  \****************************************************************/
/*! exports provided: divide */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"divide\", function() { return divide; });\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nconst divide = ([ax, ay], [bx, by]) => [ax / bx, ay / by];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/divide.js?");

/***/ }),

/***/ "../../math/vec2/dot.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/dot.js ***!
  \*************************************************************/
/*! exports provided: dot */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dot\", function() { return dot; });\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nconst dot = ([ax, ay], [bx, by]) => (ax * bx) + (ay * by);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/dot.js?");

/***/ }),

/***/ "../../math/vec2/equals.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/equals.js ***!
  \****************************************************************/
/*! exports provided: equals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\nconst equals = ([ax, ay], [bx, by]) => (ax === bx) && (ay === by);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/equals.js?");

/***/ }),

/***/ "../../math/vec2/fromAngleDegrees.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/fromAngleDegrees.js ***!
  \**************************************************************************/
/*! exports provided: fromAngleDegrees */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromAngleDegrees\", function() { return fromAngleDegrees; });\nconst fromAngleDegrees = (degrees) => {\r\n  const radians = Math.PI * degrees / 180;\r\n  return [Math.cos(radians), Math.sin(radians)];\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/fromAngleDegrees.js?");

/***/ }),

/***/ "../../math/vec2/fromAngleRadians.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/fromAngleRadians.js ***!
  \**************************************************************************/
/*! exports provided: fromAngleRadians */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromAngleRadians\", function() { return fromAngleRadians; });\nconst fromAngleRadians = (radians) => [Math.cos(radians), Math.sin(radians)];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/fromAngleRadians.js?");

/***/ }),

/***/ "../../math/vec2/fromPoint.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/fromPoint.js ***!
  \*******************************************************************/
/*! exports provided: fromPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPoint\", function() { return fromPoint; });\n/**\r\n * Creates a new vec2 from the point given.\r\n * Missing ranks are implicitly zero.\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\r\nconst fromPoint = ([x = 0, y = 0]) => [x, y];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/fromPoint.js?");

/***/ }),

/***/ "../../math/vec2/fromScalar.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/fromScalar.js ***!
  \********************************************************************/
/*! exports provided: fromScalar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromScalar\", function() { return fromScalar; });\n/** Create a vec2 from a single scalar value\r\n * @param  {Float} scalar\r\n * @returns {Vec2} a new vec2\r\n */\r\nconst fromScalar = (scalar) => [scalar, scalar];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/fromScalar.js?");

/***/ }),

/***/ "../../math/vec2/fromValues.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/fromValues.js ***!
  \********************************************************************/
/*! exports provided: fromValues */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/**\r\n * Creates a new vec3 initialized with the given values\r\n * Any missing ranks are implicitly zero.\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec3} a new 2D vector\r\n */\r\nconst fromValues = (x = 0, y = 0) => [x, y];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/fromValues.js?");

/***/ }),

/***/ "../../math/vec2/length.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/length.js ***!
  \****************************************************************/
/*! exports provided: length */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"length\", function() { return length; });\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nconst length = ([x, y]) => Math.sqrt((x * x) + (y * y));\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/length.js?");

/***/ }),

/***/ "../../math/vec2/lerp.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/lerp.js ***!
  \**************************************************************/
/*! exports provided: lerp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lerp\", function() { return lerp; });\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nconst lerp = (t, [ax, ay], [bx, by]) => [ax + t * (bx - ax),\r\n                                                ay + t * (by - ay)];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/lerp.js?");

/***/ }),

/***/ "../../math/vec2/main.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/main.js ***!
  \**************************************************************/
/*! exports provided: abs, add, angle, angleDegrees, angleRadians, canonicalize, cross, distance, divide, dot, equals, fromAngle, fromAngleDegrees, fromAngleRadians, fromPoint, fromScalar, fromValues, length, lerp, max, min, multiply, negate, normal, normalize, rotate, scale, squaredDistance, squaredLength, subtract, transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"angle\", function() { return angle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromAngle\", function() { return fromAngle; });\n/* harmony import */ var _abs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abs */ \"../../math/vec2/abs.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"abs\", function() { return _abs__WEBPACK_IMPORTED_MODULE_0__[\"abs\"]; });\n\n/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add */ \"../../math/vec2/add.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return _add__WEBPACK_IMPORTED_MODULE_1__[\"add\"]; });\n\n/* harmony import */ var _angleDegrees__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./angleDegrees */ \"../../math/vec2/angleDegrees.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"angleDegrees\", function() { return _angleDegrees__WEBPACK_IMPORTED_MODULE_2__[\"angleDegrees\"]; });\n\n/* harmony import */ var _angleRadians__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./angleRadians */ \"../../math/vec2/angleRadians.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"angleRadians\", function() { return _angleRadians__WEBPACK_IMPORTED_MODULE_3__[\"angleRadians\"]; });\n\n/* harmony import */ var _canonicalize__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./canonicalize */ \"../../math/vec2/canonicalize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return _canonicalize__WEBPACK_IMPORTED_MODULE_4__[\"canonicalize\"]; });\n\n/* harmony import */ var _cross__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cross */ \"../../math/vec2/cross.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"cross\", function() { return _cross__WEBPACK_IMPORTED_MODULE_5__[\"cross\"]; });\n\n/* harmony import */ var _distance__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./distance */ \"../../math/vec2/distance.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"distance\", function() { return _distance__WEBPACK_IMPORTED_MODULE_6__[\"distance\"]; });\n\n/* harmony import */ var _divide__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./divide */ \"../../math/vec2/divide.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"divide\", function() { return _divide__WEBPACK_IMPORTED_MODULE_7__[\"divide\"]; });\n\n/* harmony import */ var _dot__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dot */ \"../../math/vec2/dot.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"dot\", function() { return _dot__WEBPACK_IMPORTED_MODULE_8__[\"dot\"]; });\n\n/* harmony import */ var _equals__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./equals */ \"../../math/vec2/equals.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return _equals__WEBPACK_IMPORTED_MODULE_9__[\"equals\"]; });\n\n/* harmony import */ var _fromAngleDegrees__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./fromAngleDegrees */ \"../../math/vec2/fromAngleDegrees.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromAngleDegrees\", function() { return _fromAngleDegrees__WEBPACK_IMPORTED_MODULE_10__[\"fromAngleDegrees\"]; });\n\n/* harmony import */ var _fromAngleRadians__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./fromAngleRadians */ \"../../math/vec2/fromAngleRadians.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromAngleRadians\", function() { return _fromAngleRadians__WEBPACK_IMPORTED_MODULE_11__[\"fromAngleRadians\"]; });\n\n/* harmony import */ var _fromPoint__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./fromPoint */ \"../../math/vec2/fromPoint.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromPoint\", function() { return _fromPoint__WEBPACK_IMPORTED_MODULE_12__[\"fromPoint\"]; });\n\n/* harmony import */ var _fromScalar__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./fromScalar */ \"../../math/vec2/fromScalar.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromScalar\", function() { return _fromScalar__WEBPACK_IMPORTED_MODULE_13__[\"fromScalar\"]; });\n\n/* harmony import */ var _fromValues__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./fromValues */ \"../../math/vec2/fromValues.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return _fromValues__WEBPACK_IMPORTED_MODULE_14__[\"fromValues\"]; });\n\n/* harmony import */ var _length__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./length */ \"../../math/vec2/length.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"length\", function() { return _length__WEBPACK_IMPORTED_MODULE_15__[\"length\"]; });\n\n/* harmony import */ var _lerp__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./lerp */ \"../../math/vec2/lerp.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"lerp\", function() { return _lerp__WEBPACK_IMPORTED_MODULE_16__[\"lerp\"]; });\n\n/* harmony import */ var _max__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./max */ \"../../math/vec2/max.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"max\", function() { return _max__WEBPACK_IMPORTED_MODULE_17__[\"max\"]; });\n\n/* harmony import */ var _min__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./min */ \"../../math/vec2/min.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"min\", function() { return _min__WEBPACK_IMPORTED_MODULE_18__[\"min\"]; });\n\n/* harmony import */ var _multiply__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./multiply */ \"../../math/vec2/multiply.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return _multiply__WEBPACK_IMPORTED_MODULE_19__[\"multiply\"]; });\n\n/* harmony import */ var _negate__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./negate */ \"../../math/vec2/negate.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"negate\", function() { return _negate__WEBPACK_IMPORTED_MODULE_20__[\"negate\"]; });\n\n/* harmony import */ var _normal__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./normal */ \"../../math/vec2/normal.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"normal\", function() { return _normal__WEBPACK_IMPORTED_MODULE_21__[\"normal\"]; });\n\n/* harmony import */ var _normalize__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./normalize */ \"../../math/vec2/normalize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"normalize\", function() { return _normalize__WEBPACK_IMPORTED_MODULE_22__[\"normalize\"]; });\n\n/* harmony import */ var _rotate__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./rotate */ \"../../math/vec2/rotate.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rotate\", function() { return _rotate__WEBPACK_IMPORTED_MODULE_23__[\"rotate\"]; });\n\n/* harmony import */ var _scale__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./scale */ \"../../math/vec2/scale.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return _scale__WEBPACK_IMPORTED_MODULE_24__[\"scale\"]; });\n\n/* harmony import */ var _squaredDistance__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./squaredDistance */ \"../../math/vec2/squaredDistance.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"squaredDistance\", function() { return _squaredDistance__WEBPACK_IMPORTED_MODULE_25__[\"squaredDistance\"]; });\n\n/* harmony import */ var _squaredLength__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./squaredLength */ \"../../math/vec2/squaredLength.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"squaredLength\", function() { return _squaredLength__WEBPACK_IMPORTED_MODULE_26__[\"squaredLength\"]; });\n\n/* harmony import */ var _subtract__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./subtract */ \"../../math/vec2/subtract.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return _subtract__WEBPACK_IMPORTED_MODULE_27__[\"subtract\"]; });\n\n/* harmony import */ var _transform__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./transform */ \"../../math/vec2/transform.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return _transform__WEBPACK_IMPORTED_MODULE_28__[\"transform\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst angle = _angleRadians__WEBPACK_IMPORTED_MODULE_3__[\"angleRadians\"];\r\nconst fromAngle = _fromAngleRadians__WEBPACK_IMPORTED_MODULE_11__[\"fromAngleRadians\"];\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/main.js?");

/***/ }),

/***/ "../../math/vec2/max.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/max.js ***!
  \*************************************************************/
/*! exports provided: max */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"max\", function() { return max; });\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nconst max = ([ax, ay], [bx, by]) => [Math.max(ax, bx), Math.max(ay, by)];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/max.js?");

/***/ }),

/***/ "../../math/vec2/min.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/min.js ***!
  \*************************************************************/
/*! exports provided: min */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"min\", function() { return min; });\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nconst min = ([ax, ay], [bx, by]) => [Math.min(ax, bx), Math.min(ay, by)];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/min.js?");

/***/ }),

/***/ "../../math/vec2/multiply.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/multiply.js ***!
  \******************************************************************/
/*! exports provided: multiply */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nconst multiply = ([ax, ay], [bx, by]) => [ax * bx, ay * by];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/multiply.js?");

/***/ }),

/***/ "../../math/vec2/negate.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/negate.js ***!
  \****************************************************************/
/*! exports provided: negate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"negate\", function() { return negate; });\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\r\nconst negate = ([x, y]) => [-x, -y];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/negate.js?");

/***/ }),

/***/ "../../math/vec2/normal.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/normal.js ***!
  \****************************************************************/
/*! exports provided: normal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"normal\", function() { return normal; });\n/* harmony import */ var _rotate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rotate */ \"../../math/vec2/rotate.js\");\n\r\n\r\n/**\r\n * Calculates the normal value of the give vector\r\n * The normal value is the given vector rotated 90 degress.\r\n *\r\n * @param {vec2} vec - given value\r\n * @returns {vec2} normal value of the vector\r\n */\r\nconst normal = (vec) => Object(_rotate__WEBPACK_IMPORTED_MODULE_0__[\"rotate\"])(Math.PI / 2, vec);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/normal.js?");

/***/ }),

/***/ "../../math/vec2/normalize.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/normalize.js ***!
  \*******************************************************************/
/*! exports provided: normalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"normalize\", function() { return normalize; });\n/**\r\n * Normalize the given vector.\r\n *\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} normalized (unit) vector\r\n */\r\nconst normalize = ([x, y]) => {\r\n  let len = x * x + y * y;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    return [x * len, y * len];\r\n  } else {\r\n    return [x, y];\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/normalize.js?");

/***/ }),

/***/ "../../math/vec2/rotate.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/rotate.js ***!
  \****************************************************************/
/*! exports provided: rotate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotate\", function() { return rotate; });\n/**\r\n * Rotates a vec2 by an angle\r\n *\r\n * @param {Number} angle the angle of rotation (in radians)\r\n * @param {vec2} vector the vector to rotate\r\n * @returns {vec2} out\r\n */\r\nconst rotate = (angle, [x, y]) => {\r\n  const c = Math.cos(angle);\r\n  const s = Math.sin(angle);\r\n  return [x * c - y * s,\r\n          x * s + y * c];\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/rotate.js?");

/***/ }),

/***/ "../../math/vec2/scale.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/scale.js ***!
  \***************************************************************/
/*! exports provided: scale */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {Number} amount amount to scale the vector by\r\n * @param {vec2} vector the vector to scale\r\n * @returns {vec2} out\r\n */\r\nconst scale = (amount, [x, y]) => [x * amount, y * amount];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/scale.js?");

/***/ }),

/***/ "../../math/vec2/squaredDistance.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/squaredDistance.js ***!
  \*************************************************************************/
/*! exports provided: squaredDistance */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredDistance\", function() { return squaredDistance; });\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nconst squaredDistance = ([ax, ay], [bx, by]) => {\r\n  const x = bx - ax;\r\n  const y = by - ay;\r\n  return (x * x) + (y * y);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/squaredDistance.js?");

/***/ }),

/***/ "../../math/vec2/squaredLength.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/squaredLength.js ***!
  \***********************************************************************/
/*! exports provided: squaredLength */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredLength\", function() { return squaredLength; });\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nconst squaredLength = ([x, y]) => (x * x) + (y * y);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/squaredLength.js?");

/***/ }),

/***/ "../../math/vec2/subtract.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/subtract.js ***!
  \******************************************************************/
/*! exports provided: subtract */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return subtract; });\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nconst subtract = ([ax, ay], [bx, by]) => [ax - bx, ay - by];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/subtract.js?");

/***/ }),

/***/ "../../math/vec2/transform.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/transform.js ***!
  \*******************************************************************/
/*! exports provided: transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return transform; });\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {mat4} matrix matrix to transform with\r\n * @param {vec2} vector the vector to transform\r\n * @returns {vec2} out\r\n */\r\nconst transform = (matrix, [x, y]) => [matrix[0] * x + matrix[4] * y + matrix[12],\r\n                                              matrix[1] * x + matrix[5] * y + matrix[13]];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec2/transform.js?");

/***/ }),

/***/ "../../math/vec3/abs.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/abs.js ***!
  \*************************************************************/
/*! exports provided: abs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"abs\", function() { return abs; });\n/**\r\n * Calculates the absolute value of the give vector\r\n *\r\n * @param {vec3} [out] - receiving vector\r\n * @param {vec3} vec - given value\r\n * @returns {vec3} absolute value of the vector\r\n */\r\nconst abs = ([x, y, z]) => [Math.abs(x), Math.abs(y), Math.abs(z)];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/abs.js?");

/***/ }),

/***/ "../../math/vec3/add.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/add.js ***!
  \*************************************************************/
/*! exports provided: add */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} a the first vector to add\r\n * @param {vec3} b the second vector to add\r\n * @returns {vec3} the added vectors\r\n */\r\nconst add = ([ax, ay, az], [bx, by, bz]) => [(ax + bx), (ay + by), (az + bz)];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/add.js?");

/***/ }),

/***/ "../../math/vec3/angle.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/angle.js ***!
  \***************************************************************/
/*! exports provided: angle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"angle\", function() { return angle; });\n/* harmony import */ var _dot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dot */ \"../../math/vec3/dot.js\");\n/* harmony import */ var _normalize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./normalize */ \"../../math/vec3/normalize.js\");\n/* harmony import */ var _jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/math-utils */ \"../../math/utils/main.js\");\n\r\n\r\n\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nconst angle = (a, b) => {\r\n  const cosine = Object(_jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_2__[\"reallyQuantizeForSpace\"])(Object(_dot__WEBPACK_IMPORTED_MODULE_0__[\"dot\"])(Object(_normalize__WEBPACK_IMPORTED_MODULE_1__[\"normalize\"])(a), Object(_normalize__WEBPACK_IMPORTED_MODULE_1__[\"normalize\"])(b)));\r\n  return cosine > 1.0 ? 0 : Math.acos(cosine);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/angle.js?");

/***/ }),

/***/ "../../math/vec3/canonicalize.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/canonicalize.js ***!
  \**********************************************************************/
/*! exports provided: canonicalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return canonicalize; });\n/* harmony import */ var _jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/math-utils */ \"../../math/utils/main.js\");\n\r\n\r\nconst canonicalize = ([x = 0, y = 0, z = 0]) => [Object(_jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_0__[\"reallyQuantizeForSpace\"])(x), Object(_jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_0__[\"reallyQuantizeForSpace\"])(y), Object(_jsxcad_math_utils__WEBPACK_IMPORTED_MODULE_0__[\"reallyQuantizeForSpace\"])(z)];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/canonicalize.js?");

/***/ }),

/***/ "../../math/vec3/cross.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/cross.js ***!
  \***************************************************************/
/*! exports provided: cross */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cross\", function() { return cross; });\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nconst cross = ([ax, ay, az], [bx, by, bz]) => [ay * bz - az * by,\r\n                                                      az * bx - ax * bz,\r\n                                                      ax * by - ay * bx];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/cross.js?");

/***/ }),

/***/ "../../math/vec3/distance.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/distance.js ***!
  \******************************************************************/
/*! exports provided: distance */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"distance\", function() { return distance; });\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nconst distance = ([ax, ay, az], [bx, by, bz]) => {\r\n  const x = bx - ax;\r\n  const y = by - ay;\r\n  const z = bz - az;\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/distance.js?");

/***/ }),

/***/ "../../math/vec3/divide.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/divide.js ***!
  \****************************************************************/
/*! exports provided: divide */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"divide\", function() { return divide; });\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nconst divide = ([ax, ay, az], [bx, by, bz]) => [ax / bx,\r\n                                                       ay / by,\r\n                                                       az / bz];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/divide.js?");

/***/ }),

/***/ "../../math/vec3/dot.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/dot.js ***!
  \*************************************************************/
/*! exports provided: dot */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dot\", function() { return dot; });\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nconst dot = ([ax, ay, az], [bx, by, bz]) => (ax * bx) + (ay * by) + (az * bz);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/dot.js?");

/***/ }),

/***/ "../../math/vec3/equals.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/equals.js ***!
  \****************************************************************/
/*! exports provided: equals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\nconst equals = ([ax, ay, az], [bx, by, bz]) => (ax === bx) && (ay === by) && (az === bz);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/equals.js?");

/***/ }),

/***/ "../../math/vec3/fromPoint.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/fromPoint.js ***!
  \*******************************************************************/
/*! exports provided: fromPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromPoint\", function() { return fromPoint; });\n/**\r\n * Creates a new vec3 from the point given.\r\n * Missing ranks are implicitly zero.\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nconst fromPoint = ([x = 0, y = 0, z = 0]) => [x, y, z];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/fromPoint.js?");

/***/ }),

/***/ "../../math/vec3/fromScalar.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/fromScalar.js ***!
  \********************************************************************/
/*! exports provided: fromScalar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromScalar\", function() { return fromScalar; });\n/** create a vec3 from a single scalar value\r\n * all components of the resulting vec3 have the value of the\r\n * input scalar\r\n * @param  {Float} scalar\r\n * @returns {Vec3}\r\n */\r\nconst fromScalar = (scalar) => [scalar, scalar, scalar];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/fromScalar.js?");

/***/ }),

/***/ "../../math/vec3/fromValues.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/fromValues.js ***!
  \********************************************************************/
/*! exports provided: fromValues */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nconst fromValues = (x = 0, y = 0, z = 0) => [x, y, z];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/fromValues.js?");

/***/ }),

/***/ "../../math/vec3/fromVec2.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/fromVec2.js ***!
  \******************************************************************/
/*! exports provided: fromVec2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromVec2\", function() { return fromVec2; });\n// extend to a 3D vector by adding a z coordinate:\r\nconst fromVec2 = ([x = 0, y = 0], z = 0) => [x, y, z];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/fromVec2.js?");

/***/ }),

/***/ "../../math/vec3/length.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/length.js ***!
  \****************************************************************/
/*! exports provided: length */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"length\", function() { return length; });\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nconst length = ([x = 0, y = 0, z = 0]) => Math.sqrt((x * x) + (y * y) + (z * z));\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/length.js?");

/***/ }),

/***/ "../../math/vec3/lerp.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/lerp.js ***!
  \**************************************************************/
/*! exports provided: lerp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lerp\", function() { return lerp; });\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {Number} t interpolant (0.0 to 1.0) applied between the two inputs\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nconst lerp = (t, [ax, ay, az], [bx, by, bz]) => [ax + t * (bx - ax),\r\n                                                        ay + t * (by - ay),\r\n                                                        az + t * (bz - az)];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/lerp.js?");

/***/ }),

/***/ "../../math/vec3/main.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/main.js ***!
  \**************************************************************/
/*! exports provided: abs, add, angle, canonicalize, cross, distance, divide, dot, equals, fromPoint, fromScalar, fromValues, fromVec2, length, lerp, max, min, multiply, negate, normalize, random, rotateX, rotateY, rotateZ, scale, squaredDistance, squaredLength, subtract, transform, unit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _abs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abs */ \"../../math/vec3/abs.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"abs\", function() { return _abs__WEBPACK_IMPORTED_MODULE_0__[\"abs\"]; });\n\n/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add */ \"../../math/vec3/add.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return _add__WEBPACK_IMPORTED_MODULE_1__[\"add\"]; });\n\n/* harmony import */ var _angle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./angle */ \"../../math/vec3/angle.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"angle\", function() { return _angle__WEBPACK_IMPORTED_MODULE_2__[\"angle\"]; });\n\n/* harmony import */ var _canonicalize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./canonicalize */ \"../../math/vec3/canonicalize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"canonicalize\", function() { return _canonicalize__WEBPACK_IMPORTED_MODULE_3__[\"canonicalize\"]; });\n\n/* harmony import */ var _cross__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cross */ \"../../math/vec3/cross.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"cross\", function() { return _cross__WEBPACK_IMPORTED_MODULE_4__[\"cross\"]; });\n\n/* harmony import */ var _distance__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./distance */ \"../../math/vec3/distance.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"distance\", function() { return _distance__WEBPACK_IMPORTED_MODULE_5__[\"distance\"]; });\n\n/* harmony import */ var _divide__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./divide */ \"../../math/vec3/divide.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"divide\", function() { return _divide__WEBPACK_IMPORTED_MODULE_6__[\"divide\"]; });\n\n/* harmony import */ var _dot__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dot */ \"../../math/vec3/dot.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"dot\", function() { return _dot__WEBPACK_IMPORTED_MODULE_7__[\"dot\"]; });\n\n/* harmony import */ var _equals__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./equals */ \"../../math/vec3/equals.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return _equals__WEBPACK_IMPORTED_MODULE_8__[\"equals\"]; });\n\n/* harmony import */ var _fromPoint__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./fromPoint */ \"../../math/vec3/fromPoint.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromPoint\", function() { return _fromPoint__WEBPACK_IMPORTED_MODULE_9__[\"fromPoint\"]; });\n\n/* harmony import */ var _fromScalar__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./fromScalar */ \"../../math/vec3/fromScalar.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromScalar\", function() { return _fromScalar__WEBPACK_IMPORTED_MODULE_10__[\"fromScalar\"]; });\n\n/* harmony import */ var _fromValues__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./fromValues */ \"../../math/vec3/fromValues.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return _fromValues__WEBPACK_IMPORTED_MODULE_11__[\"fromValues\"]; });\n\n/* harmony import */ var _fromVec2__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./fromVec2 */ \"../../math/vec3/fromVec2.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"fromVec2\", function() { return _fromVec2__WEBPACK_IMPORTED_MODULE_12__[\"fromVec2\"]; });\n\n/* harmony import */ var _length__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./length */ \"../../math/vec3/length.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"length\", function() { return _length__WEBPACK_IMPORTED_MODULE_13__[\"length\"]; });\n\n/* harmony import */ var _lerp__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./lerp */ \"../../math/vec3/lerp.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"lerp\", function() { return _lerp__WEBPACK_IMPORTED_MODULE_14__[\"lerp\"]; });\n\n/* harmony import */ var _max__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./max */ \"../../math/vec3/max.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"max\", function() { return _max__WEBPACK_IMPORTED_MODULE_15__[\"max\"]; });\n\n/* harmony import */ var _min__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./min */ \"../../math/vec3/min.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"min\", function() { return _min__WEBPACK_IMPORTED_MODULE_16__[\"min\"]; });\n\n/* harmony import */ var _multiply__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./multiply */ \"../../math/vec3/multiply.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return _multiply__WEBPACK_IMPORTED_MODULE_17__[\"multiply\"]; });\n\n/* harmony import */ var _negate__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./negate */ \"../../math/vec3/negate.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"negate\", function() { return _negate__WEBPACK_IMPORTED_MODULE_18__[\"negate\"]; });\n\n/* harmony import */ var _normalize__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./normalize */ \"../../math/vec3/normalize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"normalize\", function() { return _normalize__WEBPACK_IMPORTED_MODULE_19__[\"normalize\"]; });\n\n/* harmony import */ var _random__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./random */ \"../../math/vec3/random.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"random\", function() { return _random__WEBPACK_IMPORTED_MODULE_20__[\"random\"]; });\n\n/* harmony import */ var _rotateX__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./rotateX */ \"../../math/vec3/rotateX.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rotateX\", function() { return _rotateX__WEBPACK_IMPORTED_MODULE_21__[\"rotateX\"]; });\n\n/* harmony import */ var _rotateY__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./rotateY */ \"../../math/vec3/rotateY.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rotateY\", function() { return _rotateY__WEBPACK_IMPORTED_MODULE_22__[\"rotateY\"]; });\n\n/* harmony import */ var _rotateZ__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./rotateZ */ \"../../math/vec3/rotateZ.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rotateZ\", function() { return _rotateZ__WEBPACK_IMPORTED_MODULE_23__[\"rotateZ\"]; });\n\n/* harmony import */ var _scale__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./scale */ \"../../math/vec3/scale.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return _scale__WEBPACK_IMPORTED_MODULE_24__[\"scale\"]; });\n\n/* harmony import */ var _squaredDistance__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./squaredDistance */ \"../../math/vec3/squaredDistance.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"squaredDistance\", function() { return _squaredDistance__WEBPACK_IMPORTED_MODULE_25__[\"squaredDistance\"]; });\n\n/* harmony import */ var _squaredLength__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./squaredLength */ \"../../math/vec3/squaredLength.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"squaredLength\", function() { return _squaredLength__WEBPACK_IMPORTED_MODULE_26__[\"squaredLength\"]; });\n\n/* harmony import */ var _subtract__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./subtract */ \"../../math/vec3/subtract.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return _subtract__WEBPACK_IMPORTED_MODULE_27__[\"subtract\"]; });\n\n/* harmony import */ var _transform__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./transform */ \"../../math/vec3/transform.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return _transform__WEBPACK_IMPORTED_MODULE_28__[\"transform\"]; });\n\n/* harmony import */ var _unit__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./unit */ \"../../math/vec3/unit.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"unit\", function() { return _unit__WEBPACK_IMPORTED_MODULE_29__[\"unit\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/main.js?");

/***/ }),

/***/ "../../math/vec3/max.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/max.js ***!
  \*************************************************************/
/*! exports provided: max */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"max\", function() { return max; });\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nconst max = ([ax, ay, az], [bx, by, bz]) => [Math.max(ax, bx),\r\n                                                    Math.max(ay, by),\r\n                                                    Math.max(az, bz)];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/max.js?");

/***/ }),

/***/ "../../math/vec3/min.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/min.js ***!
  \*************************************************************/
/*! exports provided: min */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"min\", function() { return min; });\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nconst min = ([ax, ay, az], [bx, by, bz]) => [Math.min(ax, bx),\r\n                                                    Math.min(ay, by),\r\n                                                    Math.min(az, bz)];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/min.js?");

/***/ }),

/***/ "../../math/vec3/multiply.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/multiply.js ***!
  \******************************************************************/
/*! exports provided: multiply */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nconst multiply = ([ax, ay, az], [bx, by, bz]) => [(ax * bx), (ay * by), (az * bz)];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/multiply.js?");

/***/ }),

/***/ "../../math/vec3/negate.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/negate.js ***!
  \****************************************************************/
/*! exports provided: negate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"negate\", function() { return negate; });\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nconst negate = ([x, y, z]) => [-x, -y, -z];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/negate.js?");

/***/ }),

/***/ "../../math/vec3/normalize.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/normalize.js ***!
  \*******************************************************************/
/*! exports provided: normalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"normalize\", function() { return normalize; });\n/* harmony import */ var _scale__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scale */ \"../../math/vec3/scale.js\");\n\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nconst normalize = (a) => {\r\n  const [x, y, z] = a;\r\n  const len = (x * x) + (y * y) + (z * z);\r\n  if (len > 0) {\r\n    // TODO: evaluate use of glm_invsqrt here?\r\n    return Object(_scale__WEBPACK_IMPORTED_MODULE_0__[\"scale\"])(1 / Math.sqrt(len), a);\r\n  } else {\r\n    return a;\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/normalize.js?");

/***/ }),

/***/ "../../math/vec3/random.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/random.js ***!
  \****************************************************************/
/*! exports provided: random */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"random\", function() { return random; });\n/* harmony import */ var _abs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abs */ \"../../math/vec3/abs.js\");\n\r\n\r\n// find a vector that is somewhat perpendicular to this one\r\nconst random = (vec) => {\r\n  const temp = Object(_abs__WEBPACK_IMPORTED_MODULE_0__[\"abs\"])(vec);\r\n  if ((temp[0] <= temp[1]) && (temp[0] <= temp[2])) {\r\n    return [1, 0, 0];\r\n  } else if ((temp[1] <= temp[0]) && (temp[1] <= temp[2])) {\r\n    return [0, 1, 0];\r\n  } else {\r\n    return [0, 0, 1];\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/random.js?");

/***/ }),

/***/ "../../math/vec3/rotateX.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/rotateX.js ***!
  \*****************************************************************/
/*! exports provided: rotateX */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateX\", function() { return rotateX; });\n/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./add */ \"../../math/vec3/add.js\");\n/* harmony import */ var _subtract__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./subtract */ \"../../math/vec3/subtract.js\");\n\r\n\r\n\r\n/**\r\n * Rotate vector 3D vector around the x-axis\r\n * @param {Number} angle The angle of rotation\r\n * @param {vec3} origin The origin of the rotation\r\n * @param {vec3} vector The vec3 point to rotate\r\n * @returns {vec3} out\r\n */\r\nconst rotateX = (angle, origin, vector) => {\r\n  const p = Object(_subtract__WEBPACK_IMPORTED_MODULE_1__[\"subtract\"])(vector, origin);\r\n  // rotate\r\n  const r = [p[0],\r\n             p[1] * Math.cos(angle) - p[2] * Math.sin(angle),\r\n             p[1] * Math.sin(angle) + p[2] * Math.cos(angle)];\r\n  // translate\r\n  return Object(_add__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(r, origin);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/rotateX.js?");

/***/ }),

/***/ "../../math/vec3/rotateY.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/rotateY.js ***!
  \*****************************************************************/
/*! exports provided: rotateY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateY\", function() { return rotateY; });\n/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./add */ \"../../math/vec3/add.js\");\n/* harmony import */ var _subtract__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./subtract */ \"../../math/vec3/subtract.js\");\n\r\n\r\n\r\n/**\r\n * Rotate vector 3D vector around the y-axis\r\n * @param {Number} angle The angle of rotation\r\n * @param {vec3} origin The origin of the rotation\r\n * @param {vec3} vector The vec3 point to rotate\r\n * @returns {vec3} out\r\n */\r\nconst rotateY = (angle, origin, vector) => {\r\n  const p = Object(_subtract__WEBPACK_IMPORTED_MODULE_1__[\"subtract\"])(vector, origin);\r\n  // rotate\r\n  const r = [p[2] * Math.sin(angle) + p[0] * Math.cos(angle),\r\n             p[1],\r\n             p[2] * Math.cos(angle) - p[0] * Math.sin(angle)];\r\n  // translate\r\n  return Object(_add__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(r, origin);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/rotateY.js?");

/***/ }),

/***/ "../../math/vec3/rotateZ.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/rotateZ.js ***!
  \*****************************************************************/
/*! exports provided: rotateZ */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateZ\", function() { return rotateZ; });\n/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./add */ \"../../math/vec3/add.js\");\n/* harmony import */ var _subtract__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./subtract */ \"../../math/vec3/subtract.js\");\n\r\n\r\n\r\n/**\r\n * Rotate vector 3D vector around the z-axis\r\n * @param {Number} angle The angle of rotation in radians\r\n * @param {vec3} origin The origin of the rotation\r\n * @param {vec3} vector The vec3 point to rotate\r\n * @returns {vec3} out\r\n */\r\nconst rotateZ = (angle, origin, vector) => {\r\n  const p = Object(_subtract__WEBPACK_IMPORTED_MODULE_1__[\"subtract\"])(vector, origin);\r\n  // rotate\r\n  const r = [p[0] * Math.cos(angle) - p[1] * Math.sin(angle),\r\n             p[0] * Math.sin(angle) + p[1] * Math.cos(angle),\r\n             p[2]];\r\n  // translate\r\n  return Object(_add__WEBPACK_IMPORTED_MODULE_0__[\"add\"])(r, origin);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/rotateZ.js?");

/***/ }),

/***/ "../../math/vec3/scale.js":
/*!***************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/scale.js ***!
  \***************************************************************/
/*! exports provided: scale */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {Number} amount amount to scale the vector by\r\n * @param {vec3} vector the vector to scale\r\n * @returns {vec3} out\r\n */\r\nconst scale = (amount, [x, y, z]) => [(x * amount), (y * amount), (z * amount)];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/scale.js?");

/***/ }),

/***/ "../../math/vec3/squaredDistance.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/squaredDistance.js ***!
  \*************************************************************************/
/*! exports provided: squaredDistance */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredDistance\", function() { return squaredDistance; });\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nconst squaredDistance = ([ax, ay, az], [bx, by, bz]) => {\r\n  const x = bx - ax;\r\n  const y = by - ay;\r\n  const z = bz - az;\r\n  return (x * x) + (y * y) + (z * z);\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/squaredDistance.js?");

/***/ }),

/***/ "../../math/vec3/squaredLength.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/squaredLength.js ***!
  \***********************************************************************/
/*! exports provided: squaredLength */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredLength\", function() { return squaredLength; });\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nconst squaredLength = ([x, y, z]) => (x * x) + (y * y) + (z * z);\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/squaredLength.js?");

/***/ }),

/***/ "../../math/vec3/subtract.js":
/*!******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/subtract.js ***!
  \******************************************************************/
/*! exports provided: subtract */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return subtract; });\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nconst subtract = ([ax, ay, az], [bx, by, bz]) => [(ax - bx), (ay - by), (az - bz)];\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/subtract.js?");

/***/ }),

/***/ "../../math/vec3/transform.js":
/*!*******************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/transform.js ***!
  \*******************************************************************/
/*! exports provided: transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transform\", function() { return transform; });\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n * @param {[[<vec3>], <mat4> , <vec3>]} params\r\n * @param {mat4} params[1] matrix matrix to transform with\r\n * @param {vec3} params[2] vector the vector to transform\r\n * @returns {vec3} out\r\n */\r\nconst transform = (matrix, [x = 0, y = 0, z = 0]) => {\r\n  let w = matrix[3] * x + matrix[7] * y + matrix[11] * z + matrix[15];\r\n  w = w || 1.0;\r\n  return [(matrix[0] * x + matrix[4] * y + matrix[8] * z + matrix[12]) / w,\r\n          (matrix[1] * x + matrix[5] * y + matrix[9] * z + matrix[13]) / w,\r\n          (matrix[2] * x + matrix[6] * y + matrix[10] * z + matrix[14]) / w];\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/transform.js?");

/***/ }),

/***/ "../../math/vec3/unit.js":
/*!**************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/unit.js ***!
  \**************************************************************/
/*! exports provided: unit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"unit\", function() { return unit; });\n/* harmony import */ var _length__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./length */ \"../../math/vec3/length.js\");\n\r\n\r\n/**\r\n * Calculates the unit vector of the given vector\r\n *\r\n * @param {vec3} vector - the base vector for calculations\r\n * @returns {vec3} unit vector of the given vector\r\n */\r\nconst unit = (vector) => {\r\n  const [x, y, z] = vector;\r\n  const magnitude = Object(_length__WEBPACK_IMPORTED_MODULE_0__[\"length\"])(vector);\r\n  return [x / magnitude,\r\n          y / magnitude,\r\n          z / magnitude];\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/math/vec3/unit.js?");

/***/ }),

/***/ "../../node_modules/abs-svg-path/index.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/abs-svg-path/index.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\nmodule.exports = absolutize\n\n/**\n * redefine `path` with absolute coordinates\n *\n * @param {Array} path\n * @return {Array}\n */\n\nfunction absolutize(path){\n\tvar startX = 0\n\tvar startY = 0\n\tvar x = 0\n\tvar y = 0\n\n\treturn path.map(function(seg){\n\t\tseg = seg.slice()\n\t\tvar type = seg[0]\n\t\tvar command = type.toUpperCase()\n\n\t\t// is relative\n\t\tif (type != command) {\n\t\t\tseg[0] = command\n\t\t\tswitch (type) {\n\t\t\t\tcase 'a':\n\t\t\t\t\tseg[6] += x\n\t\t\t\t\tseg[7] += y\n\t\t\t\t\tbreak\n\t\t\t\tcase 'v':\n\t\t\t\t\tseg[1] += y\n\t\t\t\t\tbreak\n\t\t\t\tcase 'h':\n\t\t\t\t\tseg[1] += x\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tfor (var i = 1; i < seg.length;) {\n\t\t\t\t\t\tseg[i++] += x\n\t\t\t\t\t\tseg[i++] += y\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// update cursor state\n\t\tswitch (command) {\n\t\t\tcase 'Z':\n\t\t\t\tx = startX\n\t\t\t\ty = startY\n\t\t\t\tbreak\n\t\t\tcase 'H':\n\t\t\t\tx = seg[1]\n\t\t\t\tbreak\n\t\t\tcase 'V':\n\t\t\t\ty = seg[1]\n\t\t\t\tbreak\n\t\t\tcase 'M':\n\t\t\t\tx = startX = seg[1]\n\t\t\t\ty = startY = seg[2]\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tx = seg[seg.length - 2]\n\t\t\t\ty = seg[seg.length - 1]\n\t\t}\n\n\t\treturn seg\n\t})\n}\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/abs-svg-path/index.js?");

/***/ }),

/***/ "../../node_modules/adaptive-bezier-curve/function.js":
/*!*******************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/adaptive-bezier-curve/function.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function clone(point) { //TODO: use gl-vec2 for this\n    return [point[0], point[1]]\n}\n\nfunction vec2(x, y) {\n    return [x, y]\n}\n\nmodule.exports = function createBezierBuilder(opt) {\n    opt = opt||{}\n\n    var RECURSION_LIMIT = typeof opt.recursion === 'number' ? opt.recursion : 8\n    var FLT_EPSILON = typeof opt.epsilon === 'number' ? opt.epsilon : 1.19209290e-7\n    var PATH_DISTANCE_EPSILON = typeof opt.pathEpsilon === 'number' ? opt.pathEpsilon : 1.0\n\n    var curve_angle_tolerance_epsilon = typeof opt.angleEpsilon === 'number' ? opt.angleEpsilon : 0.01\n    var m_angle_tolerance = opt.angleTolerance || 0\n    var m_cusp_limit = opt.cuspLimit || 0\n\n    return function bezierCurve(start, c1, c2, end, scale, points) {\n        if (!points)\n            points = []\n\n        scale = typeof scale === 'number' ? scale : 1.0\n        var distanceTolerance = PATH_DISTANCE_EPSILON / scale\n        distanceTolerance *= distanceTolerance\n        begin(start, c1, c2, end, points, distanceTolerance)\n        return points\n    }\n\n\n    ////// Based on:\n    ////// https://github.com/pelson/antigrain/blob/master/agg-2.4/src/agg_curves.cpp\n\n    function begin(start, c1, c2, end, points, distanceTolerance) {\n        points.push(clone(start))\n        var x1 = start[0],\n            y1 = start[1],\n            x2 = c1[0],\n            y2 = c1[1],\n            x3 = c2[0],\n            y3 = c2[1],\n            x4 = end[0],\n            y4 = end[1]\n        recursive(x1, y1, x2, y2, x3, y3, x4, y4, points, distanceTolerance, 0)\n        points.push(clone(end))\n    }\n\n    function recursive(x1, y1, x2, y2, x3, y3, x4, y4, points, distanceTolerance, level) {\n        if(level > RECURSION_LIMIT) \n            return\n\n        var pi = Math.PI\n\n        // Calculate all the mid-points of the line segments\n        //----------------------\n        var x12   = (x1 + x2) / 2\n        var y12   = (y1 + y2) / 2\n        var x23   = (x2 + x3) / 2\n        var y23   = (y2 + y3) / 2\n        var x34   = (x3 + x4) / 2\n        var y34   = (y3 + y4) / 2\n        var x123  = (x12 + x23) / 2\n        var y123  = (y12 + y23) / 2\n        var x234  = (x23 + x34) / 2\n        var y234  = (y23 + y34) / 2\n        var x1234 = (x123 + x234) / 2\n        var y1234 = (y123 + y234) / 2\n\n        if(level > 0) { // Enforce subdivision first time\n            // Try to approximate the full cubic curve by a single straight line\n            //------------------\n            var dx = x4-x1\n            var dy = y4-y1\n\n            var d2 = Math.abs((x2 - x4) * dy - (y2 - y4) * dx)\n            var d3 = Math.abs((x3 - x4) * dy - (y3 - y4) * dx)\n\n            var da1, da2\n\n            if(d2 > FLT_EPSILON && d3 > FLT_EPSILON) {\n                // Regular care\n                //-----------------\n                if((d2 + d3)*(d2 + d3) <= distanceTolerance * (dx*dx + dy*dy)) {\n                    // If the curvature doesn't exceed the distanceTolerance value\n                    // we tend to finish subdivisions.\n                    //----------------------\n                    if(m_angle_tolerance < curve_angle_tolerance_epsilon) {\n                        points.push(vec2(x1234, y1234))\n                        return\n                    }\n\n                    // Angle & Cusp Condition\n                    //----------------------\n                    var a23 = Math.atan2(y3 - y2, x3 - x2)\n                    da1 = Math.abs(a23 - Math.atan2(y2 - y1, x2 - x1))\n                    da2 = Math.abs(Math.atan2(y4 - y3, x4 - x3) - a23)\n                    if(da1 >= pi) da1 = 2*pi - da1\n                    if(da2 >= pi) da2 = 2*pi - da2\n\n                    if(da1 + da2 < m_angle_tolerance) {\n                        // Finally we can stop the recursion\n                        //----------------------\n                        points.push(vec2(x1234, y1234))\n                        return\n                    }\n\n                    if(m_cusp_limit !== 0.0) {\n                        if(da1 > m_cusp_limit) {\n                            points.push(vec2(x2, y2))\n                            return\n                        }\n\n                        if(da2 > m_cusp_limit) {\n                            points.push(vec2(x3, y3))\n                            return\n                        }\n                    }\n                }\n            }\n            else {\n                if(d2 > FLT_EPSILON) {\n                    // p1,p3,p4 are collinear, p2 is considerable\n                    //----------------------\n                    if(d2 * d2 <= distanceTolerance * (dx*dx + dy*dy)) {\n                        if(m_angle_tolerance < curve_angle_tolerance_epsilon) {\n                            points.push(vec2(x1234, y1234))\n                            return\n                        }\n\n                        // Angle Condition\n                        //----------------------\n                        da1 = Math.abs(Math.atan2(y3 - y2, x3 - x2) - Math.atan2(y2 - y1, x2 - x1))\n                        if(da1 >= pi) da1 = 2*pi - da1\n\n                        if(da1 < m_angle_tolerance) {\n                            points.push(vec2(x2, y2))\n                            points.push(vec2(x3, y3))\n                            return\n                        }\n\n                        if(m_cusp_limit !== 0.0) {\n                            if(da1 > m_cusp_limit) {\n                                points.push(vec2(x2, y2))\n                                return\n                            }\n                        }\n                    }\n                }\n                else if(d3 > FLT_EPSILON) {\n                    // p1,p2,p4 are collinear, p3 is considerable\n                    //----------------------\n                    if(d3 * d3 <= distanceTolerance * (dx*dx + dy*dy)) {\n                        if(m_angle_tolerance < curve_angle_tolerance_epsilon) {\n                            points.push(vec2(x1234, y1234))\n                            return\n                        }\n\n                        // Angle Condition\n                        //----------------------\n                        da1 = Math.abs(Math.atan2(y4 - y3, x4 - x3) - Math.atan2(y3 - y2, x3 - x2))\n                        if(da1 >= pi) da1 = 2*pi - da1\n\n                        if(da1 < m_angle_tolerance) {\n                            points.push(vec2(x2, y2))\n                            points.push(vec2(x3, y3))\n                            return\n                        }\n\n                        if(m_cusp_limit !== 0.0) {\n                            if(da1 > m_cusp_limit)\n                            {\n                                points.push(vec2(x3, y3))\n                                return\n                            }\n                        }\n                    }\n                }\n                else {\n                    // Collinear case\n                    //-----------------\n                    dx = x1234 - (x1 + x4) / 2\n                    dy = y1234 - (y1 + y4) / 2\n                    if(dx*dx + dy*dy <= distanceTolerance) {\n                        points.push(vec2(x1234, y1234))\n                        return\n                    }\n                }\n            }\n        }\n\n        // Continue subdivision\n        //----------------------\n        recursive(x1, y1, x12, y12, x123, y123, x1234, y1234, points, distanceTolerance, level + 1) \n        recursive(x1234, y1234, x234, y234, x34, y34, x4, y4, points, distanceTolerance, level + 1) \n    }\n}\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/adaptive-bezier-curve/function.js?");

/***/ }),

/***/ "../../node_modules/adaptive-bezier-curve/index.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/adaptive-bezier-curve/index.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./function */ \"../../node_modules/adaptive-bezier-curve/function.js\")()\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/adaptive-bezier-curve/index.js?");

/***/ }),

/***/ "../../node_modules/assert/assert.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/assert/assert.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {\n\n// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js\n// original notice:\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nfunction isBuffer(b) {\n  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {\n    return global.Buffer.isBuffer(b);\n  }\n  return !!(b != null && b._isBuffer);\n}\n\n// based on node assert, original notice:\n\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar util = __webpack_require__(/*! util/ */ \"../../node_modules/util/util.js\");\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar pSlice = Array.prototype.slice;\nvar functionsHaveNames = (function () {\n  return function foo() {}.name === 'foo';\n}());\nfunction pToString (obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isView(arrbuf) {\n  if (isBuffer(arrbuf)) {\n    return false;\n  }\n  if (typeof global.ArrayBuffer !== 'function') {\n    return false;\n  }\n  if (typeof ArrayBuffer.isView === 'function') {\n    return ArrayBuffer.isView(arrbuf);\n  }\n  if (!arrbuf) {\n    return false;\n  }\n  if (arrbuf instanceof DataView) {\n    return true;\n  }\n  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n    return true;\n  }\n  return false;\n}\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nvar regex = /\\s*function\\s+([^\\(\\s]*)\\s*/;\n// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\nfunction getName(func) {\n  if (!util.isFunction(func)) {\n    return;\n  }\n  if (functionsHaveNames) {\n    return func.name;\n  }\n  var str = func.toString();\n  var match = str.match(regex);\n  return match && match[1];\n}\nassert.AssertionError = function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = getName(stackStartFunction);\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n};\n\n// assert.AssertionError instanceof Error\nutil.inherits(assert.AssertionError, Error);\n\nfunction truncate(s, n) {\n  if (typeof s === 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\nfunction inspect(something) {\n  if (functionsHaveNames || !util.isFunction(something)) {\n    return util.inspect(something);\n  }\n  var rawname = getName(something);\n  var name = rawname ? ': ' + rawname : '';\n  return '[Function' +  name + ']';\n}\nfunction getMessage(self) {\n  return truncate(inspect(self.actual), 128) + ' ' +\n         self.operator + ' ' +\n         truncate(inspect(self.expected), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nfunction ok(value, message) {\n  if (!value) fail(value, true, message, '==', assert.ok);\n}\nassert.ok = ok;\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\n\nassert.equal = function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);\n};\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\n\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', assert.notEqual);\n  }\n};\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\n\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n  }\n};\n\nassert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);\n  }\n};\n\nfunction _deepEqual(actual, expected, strict, memos) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (isBuffer(actual) && isBuffer(expected)) {\n    return compare(actual, expected) === 0;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (util.isDate(actual) && util.isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3 If the expected value is a RegExp object, the actual value is\n  // equivalent if it is also a RegExp object with the same source and\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {\n    return actual.source === expected.source &&\n           actual.global === expected.global &&\n           actual.multiline === expected.multiline &&\n           actual.lastIndex === expected.lastIndex &&\n           actual.ignoreCase === expected.ignoreCase;\n\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') &&\n             (expected === null || typeof expected !== 'object')) {\n    return strict ? actual === expected : actual == expected;\n\n  // If both values are instances of typed arrays, wrap their underlying\n  // ArrayBuffers in a Buffer each to increase performance\n  // This optimization requires the arrays to have the same type as checked by\n  // Object.prototype.toString (aka pToString). Never perform binary\n  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n  // bit patterns are not identical.\n  } else if (isView(actual) && isView(expected) &&\n             pToString(actual) === pToString(expected) &&\n             !(actual instanceof Float32Array ||\n               actual instanceof Float64Array)) {\n    return compare(new Uint8Array(actual.buffer),\n                   new Uint8Array(expected.buffer)) === 0;\n\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else if (isBuffer(actual) !== isBuffer(expected)) {\n    return false;\n  } else {\n    memos = memos || {actual: [], expected: []};\n\n    var actualIndex = memos.actual.indexOf(actual);\n    if (actualIndex !== -1) {\n      if (actualIndex === memos.expected.indexOf(expected)) {\n        return true;\n      }\n    }\n\n    memos.actual.push(actual);\n    memos.expected.push(expected);\n\n    return objEquiv(actual, expected, strict, memos);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b, strict, actualVisitedObjects) {\n  if (a === null || a === undefined || b === null || b === undefined)\n    return false;\n  // if one is a primitive, the other must be same\n  if (util.isPrimitive(a) || util.isPrimitive(b))\n    return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))\n    return false;\n  var aIsArgs = isArguments(a);\n  var bIsArgs = isArguments(b);\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n    return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b, strict);\n  }\n  var ka = objectKeys(a);\n  var kb = objectKeys(b);\n  var key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))\n      return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\n\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n  }\n};\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\nfunction notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n  }\n}\n\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\n\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', assert.strictEqual);\n  }\n};\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\n  }\n};\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  }\n\n  try {\n    if (actual instanceof expected) {\n      return true;\n    }\n  } catch (e) {\n    // Ignore.  The instanceof check doesn't work for arrow functions.\n  }\n\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n\n  return expected.call({}, actual) === true;\n}\n\nfunction _tryBlock(block) {\n  var error;\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (typeof block !== 'function') {\n    throw new TypeError('\"block\" argument must be a function');\n  }\n\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  actual = _tryBlock(block);\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  var userProvidedMessage = typeof message === 'string';\n  var isUnwantedException = !shouldThrow && util.isError(actual);\n  var isUnexpectedException = !shouldThrow && actual && !expected;\n\n  if ((isUnwantedException &&\n      userProvidedMessage &&\n      expectedException(actual, expected)) ||\n      isUnexpectedException) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\n\nassert.throws = function(block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n};\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n};\n\nassert.ifError = function(err) { if (err) throw err; };\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"../../node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/assert/assert.js?");

/***/ }),

/***/ "../../node_modules/ast-types/def/babel-core.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/def/babel-core.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = __importDefault(__webpack_require__(/*! ../lib/types */ \"../../node_modules/ast-types/lib/types.js\"));\nvar shared_1 = __importDefault(__webpack_require__(/*! ../lib/shared */ \"../../node_modules/ast-types/lib/shared.js\"));\nvar es7_1 = __importDefault(__webpack_require__(/*! ./es7 */ \"../../node_modules/ast-types/def/es7.js\"));\nfunction default_1(fork) {\n    fork.use(es7_1.default);\n    var types = fork.use(types_1.default);\n    var defaults = fork.use(shared_1.default).defaults;\n    var def = types.Type.def;\n    var or = types.Type.or;\n    def(\"Noop\")\n        .bases(\"Statement\")\n        .build();\n    def(\"DoExpression\")\n        .bases(\"Expression\")\n        .build(\"body\")\n        .field(\"body\", [def(\"Statement\")]);\n    def(\"Super\")\n        .bases(\"Expression\")\n        .build();\n    def(\"BindExpression\")\n        .bases(\"Expression\")\n        .build(\"object\", \"callee\")\n        .field(\"object\", or(def(\"Expression\"), null))\n        .field(\"callee\", def(\"Expression\"));\n    def(\"Decorator\")\n        .bases(\"Node\")\n        .build(\"expression\")\n        .field(\"expression\", def(\"Expression\"));\n    def(\"Property\")\n        .field(\"decorators\", or([def(\"Decorator\")], null), defaults[\"null\"]);\n    def(\"MethodDefinition\")\n        .field(\"decorators\", or([def(\"Decorator\")], null), defaults[\"null\"]);\n    def(\"MetaProperty\")\n        .bases(\"Expression\")\n        .build(\"meta\", \"property\")\n        .field(\"meta\", def(\"Identifier\"))\n        .field(\"property\", def(\"Identifier\"));\n    def(\"ParenthesizedExpression\")\n        .bases(\"Expression\")\n        .build(\"expression\")\n        .field(\"expression\", def(\"Expression\"));\n    def(\"ImportSpecifier\")\n        .bases(\"ModuleSpecifier\")\n        .build(\"imported\", \"local\")\n        .field(\"imported\", def(\"Identifier\"));\n    def(\"ImportDefaultSpecifier\")\n        .bases(\"ModuleSpecifier\")\n        .build(\"local\");\n    def(\"ImportNamespaceSpecifier\")\n        .bases(\"ModuleSpecifier\")\n        .build(\"local\");\n    def(\"ExportDefaultDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"declaration\")\n        .field(\"declaration\", or(def(\"Declaration\"), def(\"Expression\")));\n    def(\"ExportNamedDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"declaration\", \"specifiers\", \"source\")\n        .field(\"declaration\", or(def(\"Declaration\"), null))\n        .field(\"specifiers\", [def(\"ExportSpecifier\")], defaults.emptyArray)\n        .field(\"source\", or(def(\"Literal\"), null), defaults[\"null\"]);\n    def(\"ExportSpecifier\")\n        .bases(\"ModuleSpecifier\")\n        .build(\"local\", \"exported\")\n        .field(\"exported\", def(\"Identifier\"));\n    def(\"ExportNamespaceSpecifier\")\n        .bases(\"Specifier\")\n        .build(\"exported\")\n        .field(\"exported\", def(\"Identifier\"));\n    def(\"ExportDefaultSpecifier\")\n        .bases(\"Specifier\")\n        .build(\"exported\")\n        .field(\"exported\", def(\"Identifier\"));\n    def(\"ExportAllDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"exported\", \"source\")\n        .field(\"exported\", or(def(\"Identifier\"), null))\n        .field(\"source\", def(\"Literal\"));\n    def(\"CommentBlock\")\n        .bases(\"Comment\")\n        .build(\"value\", /*optional:*/ \"leading\", \"trailing\");\n    def(\"CommentLine\")\n        .bases(\"Comment\")\n        .build(\"value\", /*optional:*/ \"leading\", \"trailing\");\n    def(\"Directive\")\n        .bases(\"Node\")\n        .build(\"value\")\n        .field(\"value\", def(\"DirectiveLiteral\"));\n    def(\"DirectiveLiteral\")\n        .bases(\"Node\", \"Expression\")\n        .build(\"value\")\n        .field(\"value\", String, defaults[\"use strict\"]);\n    def(\"InterpreterDirective\")\n        .bases(\"Node\")\n        .build(\"value\")\n        .field(\"value\", String);\n    def(\"BlockStatement\")\n        .bases(\"Statement\")\n        .build(\"body\")\n        .field(\"body\", [def(\"Statement\")])\n        .field(\"directives\", [def(\"Directive\")], defaults.emptyArray);\n    def(\"Program\")\n        .bases(\"Node\")\n        .build(\"body\")\n        .field(\"body\", [def(\"Statement\")])\n        .field(\"directives\", [def(\"Directive\")], defaults.emptyArray)\n        .field(\"interpreter\", or(def(\"InterpreterDirective\"), null), defaults[\"null\"]);\n    // Split Literal\n    def(\"StringLiteral\")\n        .bases(\"Literal\")\n        .build(\"value\")\n        .field(\"value\", String);\n    def(\"NumericLiteral\")\n        .bases(\"Literal\")\n        .build(\"value\")\n        .field(\"value\", Number)\n        .field(\"raw\", or(String, null), defaults[\"null\"])\n        .field(\"extra\", {\n        rawValue: Number,\n        raw: String\n    }, function getDefault() {\n        return {\n            rawValue: this.value,\n            raw: this.value + \"\"\n        };\n    });\n    def(\"BigIntLiteral\")\n        .bases(\"Literal\")\n        .build(\"value\")\n        // Only String really seems appropriate here, since BigInt values\n        // often exceed the limits of JS numbers.\n        .field(\"value\", or(String, Number))\n        .field(\"extra\", {\n        rawValue: String,\n        raw: String\n    }, function getDefault() {\n        return {\n            rawValue: String(this.value),\n            raw: this.value + \"n\"\n        };\n    });\n    def(\"NullLiteral\")\n        .bases(\"Literal\")\n        .build()\n        .field(\"value\", null, defaults[\"null\"]);\n    def(\"BooleanLiteral\")\n        .bases(\"Literal\")\n        .build(\"value\")\n        .field(\"value\", Boolean);\n    def(\"RegExpLiteral\")\n        .bases(\"Literal\")\n        .build(\"pattern\", \"flags\")\n        .field(\"pattern\", String)\n        .field(\"flags\", String)\n        .field(\"value\", RegExp, function () {\n        return new RegExp(this.pattern, this.flags);\n    });\n    var ObjectExpressionProperty = or(def(\"Property\"), def(\"ObjectMethod\"), def(\"ObjectProperty\"), def(\"SpreadProperty\"), def(\"SpreadElement\"));\n    // Split Property -> ObjectProperty and ObjectMethod\n    def(\"ObjectExpression\")\n        .bases(\"Expression\")\n        .build(\"properties\")\n        .field(\"properties\", [ObjectExpressionProperty]);\n    // ObjectMethod hoist .value properties to own properties\n    def(\"ObjectMethod\")\n        .bases(\"Node\", \"Function\")\n        .build(\"kind\", \"key\", \"params\", \"body\", \"computed\")\n        .field(\"kind\", or(\"method\", \"get\", \"set\"))\n        .field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\")))\n        .field(\"params\", [def(\"Pattern\")])\n        .field(\"body\", def(\"BlockStatement\"))\n        .field(\"computed\", Boolean, defaults[\"false\"])\n        .field(\"generator\", Boolean, defaults[\"false\"])\n        .field(\"async\", Boolean, defaults[\"false\"])\n        .field(\"accessibility\", // TypeScript\n    or(def(\"Literal\"), null), defaults[\"null\"])\n        .field(\"decorators\", or([def(\"Decorator\")], null), defaults[\"null\"]);\n    def(\"ObjectProperty\")\n        .bases(\"Node\")\n        .build(\"key\", \"value\")\n        .field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\")))\n        .field(\"value\", or(def(\"Expression\"), def(\"Pattern\")))\n        .field(\"accessibility\", // TypeScript\n    or(def(\"Literal\"), null), defaults[\"null\"])\n        .field(\"computed\", Boolean, defaults[\"false\"]);\n    var ClassBodyElement = or(def(\"MethodDefinition\"), def(\"VariableDeclarator\"), def(\"ClassPropertyDefinition\"), def(\"ClassProperty\"), def(\"ClassPrivateProperty\"), def(\"ClassMethod\"), def(\"ClassPrivateMethod\"));\n    // MethodDefinition -> ClassMethod\n    def(\"ClassBody\")\n        .bases(\"Declaration\")\n        .build(\"body\")\n        .field(\"body\", [ClassBodyElement]);\n    def(\"ClassMethod\")\n        .bases(\"Declaration\", \"Function\")\n        .build(\"kind\", \"key\", \"params\", \"body\", \"computed\", \"static\")\n        .field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\")));\n    def(\"ClassPrivateMethod\")\n        .bases(\"Declaration\", \"Function\")\n        .build(\"key\", \"params\", \"body\", \"kind\", \"computed\", \"static\")\n        .field(\"key\", def(\"PrivateName\"));\n    [\"ClassMethod\",\n        \"ClassPrivateMethod\",\n    ].forEach(function (typeName) {\n        def(typeName)\n            .field(\"kind\", or(\"get\", \"set\", \"method\", \"constructor\"), function () { return \"method\"; })\n            .field(\"body\", def(\"BlockStatement\"))\n            .field(\"computed\", Boolean, defaults[\"false\"])\n            .field(\"static\", or(Boolean, null), defaults[\"null\"])\n            .field(\"abstract\", or(Boolean, null), defaults[\"null\"])\n            .field(\"access\", or(\"public\", \"private\", \"protected\", null), defaults[\"null\"])\n            .field(\"accessibility\", or(\"public\", \"private\", \"protected\", null), defaults[\"null\"])\n            .field(\"decorators\", or([def(\"Decorator\")], null), defaults[\"null\"])\n            .field(\"optional\", or(Boolean, null), defaults[\"null\"]);\n    });\n    def(\"ClassPrivateProperty\")\n        .bases(\"ClassProperty\")\n        .build(\"key\", \"value\")\n        .field(\"key\", def(\"PrivateName\"))\n        .field(\"value\", or(def(\"Expression\"), null), defaults[\"null\"]);\n    def(\"PrivateName\")\n        .bases(\"Expression\", \"Pattern\")\n        .build(\"id\")\n        .field(\"id\", def(\"Identifier\"));\n    var ObjectPatternProperty = or(def(\"Property\"), def(\"PropertyPattern\"), def(\"SpreadPropertyPattern\"), def(\"SpreadProperty\"), // Used by Esprima\n    def(\"ObjectProperty\"), // Babel 6\n    def(\"RestProperty\") // Babel 6\n    );\n    // Split into RestProperty and SpreadProperty\n    def(\"ObjectPattern\")\n        .bases(\"Pattern\")\n        .build(\"properties\")\n        .field(\"properties\", [ObjectPatternProperty])\n        .field(\"decorators\", or([def(\"Decorator\")], null), defaults[\"null\"]);\n    def(\"SpreadProperty\")\n        .bases(\"Node\")\n        .build(\"argument\")\n        .field(\"argument\", def(\"Expression\"));\n    def(\"RestProperty\")\n        .bases(\"Node\")\n        .build(\"argument\")\n        .field(\"argument\", def(\"Expression\"));\n    def(\"ForAwaitStatement\")\n        .bases(\"Statement\")\n        .build(\"left\", \"right\", \"body\")\n        .field(\"left\", or(def(\"VariableDeclaration\"), def(\"Expression\")))\n        .field(\"right\", def(\"Expression\"))\n        .field(\"body\", def(\"Statement\"));\n    // The callee node of a dynamic import(...) expression.\n    def(\"Import\")\n        .bases(\"Expression\")\n        .build();\n}\nexports.default = default_1;\nmodule.exports = exports[\"default\"];\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/def/babel-core.js?");

/***/ }),

/***/ "../../node_modules/ast-types/def/babel.js":
/*!********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/def/babel.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar babel_core_1 = __importDefault(__webpack_require__(/*! ./babel-core */ \"../../node_modules/ast-types/def/babel-core.js\"));\nvar flow_1 = __importDefault(__webpack_require__(/*! ./flow */ \"../../node_modules/ast-types/def/flow.js\"));\nfunction default_1(fork) {\n    fork.use(babel_core_1.default);\n    fork.use(flow_1.default);\n}\nexports.default = default_1;\nmodule.exports = exports[\"default\"];\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/def/babel.js?");

/***/ }),

/***/ "../../node_modules/ast-types/def/core.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/def/core.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = __importDefault(__webpack_require__(/*! ../lib/types */ \"../../node_modules/ast-types/lib/types.js\"));\nvar shared_1 = __importDefault(__webpack_require__(/*! ../lib/shared */ \"../../node_modules/ast-types/lib/shared.js\"));\nfunction default_1(fork) {\n    var types = fork.use(types_1.default);\n    var Type = types.Type;\n    var def = Type.def;\n    var or = Type.or;\n    var shared = fork.use(shared_1.default);\n    var defaults = shared.defaults;\n    var geq = shared.geq;\n    // Abstract supertype of all syntactic entities that are allowed to have a\n    // .loc field.\n    def(\"Printable\")\n        .field(\"loc\", or(def(\"SourceLocation\"), null), defaults[\"null\"], true);\n    def(\"Node\")\n        .bases(\"Printable\")\n        .field(\"type\", String)\n        .field(\"comments\", or([def(\"Comment\")], null), defaults[\"null\"], true);\n    def(\"SourceLocation\")\n        .field(\"start\", def(\"Position\"))\n        .field(\"end\", def(\"Position\"))\n        .field(\"source\", or(String, null), defaults[\"null\"]);\n    def(\"Position\")\n        .field(\"line\", geq(1))\n        .field(\"column\", geq(0));\n    def(\"File\")\n        .bases(\"Node\")\n        .build(\"program\", \"name\")\n        .field(\"program\", def(\"Program\"))\n        .field(\"name\", or(String, null), defaults[\"null\"]);\n    def(\"Program\")\n        .bases(\"Node\")\n        .build(\"body\")\n        .field(\"body\", [def(\"Statement\")]);\n    def(\"Function\")\n        .bases(\"Node\")\n        .field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"])\n        .field(\"params\", [def(\"Pattern\")])\n        .field(\"body\", def(\"BlockStatement\"))\n        .field(\"generator\", Boolean, defaults[\"false\"])\n        .field(\"async\", Boolean, defaults[\"false\"]);\n    def(\"Statement\").bases(\"Node\");\n    // The empty .build() here means that an EmptyStatement can be constructed\n    // (i.e. it's not abstract) but that it needs no arguments.\n    def(\"EmptyStatement\").bases(\"Statement\").build();\n    def(\"BlockStatement\")\n        .bases(\"Statement\")\n        .build(\"body\")\n        .field(\"body\", [def(\"Statement\")]);\n    // TODO Figure out how to silently coerce Expressions to\n    // ExpressionStatements where a Statement was expected.\n    def(\"ExpressionStatement\")\n        .bases(\"Statement\")\n        .build(\"expression\")\n        .field(\"expression\", def(\"Expression\"));\n    def(\"IfStatement\")\n        .bases(\"Statement\")\n        .build(\"test\", \"consequent\", \"alternate\")\n        .field(\"test\", def(\"Expression\"))\n        .field(\"consequent\", def(\"Statement\"))\n        .field(\"alternate\", or(def(\"Statement\"), null), defaults[\"null\"]);\n    def(\"LabeledStatement\")\n        .bases(\"Statement\")\n        .build(\"label\", \"body\")\n        .field(\"label\", def(\"Identifier\"))\n        .field(\"body\", def(\"Statement\"));\n    def(\"BreakStatement\")\n        .bases(\"Statement\")\n        .build(\"label\")\n        .field(\"label\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n    def(\"ContinueStatement\")\n        .bases(\"Statement\")\n        .build(\"label\")\n        .field(\"label\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n    def(\"WithStatement\")\n        .bases(\"Statement\")\n        .build(\"object\", \"body\")\n        .field(\"object\", def(\"Expression\"))\n        .field(\"body\", def(\"Statement\"));\n    def(\"SwitchStatement\")\n        .bases(\"Statement\")\n        .build(\"discriminant\", \"cases\", \"lexical\")\n        .field(\"discriminant\", def(\"Expression\"))\n        .field(\"cases\", [def(\"SwitchCase\")])\n        .field(\"lexical\", Boolean, defaults[\"false\"]);\n    def(\"ReturnStatement\")\n        .bases(\"Statement\")\n        .build(\"argument\")\n        .field(\"argument\", or(def(\"Expression\"), null));\n    def(\"ThrowStatement\")\n        .bases(\"Statement\")\n        .build(\"argument\")\n        .field(\"argument\", def(\"Expression\"));\n    def(\"TryStatement\")\n        .bases(\"Statement\")\n        .build(\"block\", \"handler\", \"finalizer\")\n        .field(\"block\", def(\"BlockStatement\"))\n        .field(\"handler\", or(def(\"CatchClause\"), null), function () {\n        return this.handlers && this.handlers[0] || null;\n    })\n        .field(\"handlers\", [def(\"CatchClause\")], function () {\n        return this.handler ? [this.handler] : [];\n    }, true) // Indicates this field is hidden from eachField iteration.\n        .field(\"guardedHandlers\", [def(\"CatchClause\")], defaults.emptyArray)\n        .field(\"finalizer\", or(def(\"BlockStatement\"), null), defaults[\"null\"]);\n    def(\"CatchClause\")\n        .bases(\"Node\")\n        .build(\"param\", \"guard\", \"body\")\n        // https://github.com/tc39/proposal-optional-catch-binding\n        .field(\"param\", or(def(\"Pattern\"), null), defaults[\"null\"])\n        .field(\"guard\", or(def(\"Expression\"), null), defaults[\"null\"])\n        .field(\"body\", def(\"BlockStatement\"));\n    def(\"WhileStatement\")\n        .bases(\"Statement\")\n        .build(\"test\", \"body\")\n        .field(\"test\", def(\"Expression\"))\n        .field(\"body\", def(\"Statement\"));\n    def(\"DoWhileStatement\")\n        .bases(\"Statement\")\n        .build(\"body\", \"test\")\n        .field(\"body\", def(\"Statement\"))\n        .field(\"test\", def(\"Expression\"));\n    def(\"ForStatement\")\n        .bases(\"Statement\")\n        .build(\"init\", \"test\", \"update\", \"body\")\n        .field(\"init\", or(def(\"VariableDeclaration\"), def(\"Expression\"), null))\n        .field(\"test\", or(def(\"Expression\"), null))\n        .field(\"update\", or(def(\"Expression\"), null))\n        .field(\"body\", def(\"Statement\"));\n    def(\"ForInStatement\")\n        .bases(\"Statement\")\n        .build(\"left\", \"right\", \"body\")\n        .field(\"left\", or(def(\"VariableDeclaration\"), def(\"Expression\")))\n        .field(\"right\", def(\"Expression\"))\n        .field(\"body\", def(\"Statement\"));\n    def(\"DebuggerStatement\").bases(\"Statement\").build();\n    def(\"Declaration\").bases(\"Statement\");\n    def(\"FunctionDeclaration\")\n        .bases(\"Function\", \"Declaration\")\n        .build(\"id\", \"params\", \"body\")\n        .field(\"id\", def(\"Identifier\"));\n    def(\"FunctionExpression\")\n        .bases(\"Function\", \"Expression\")\n        .build(\"id\", \"params\", \"body\");\n    def(\"VariableDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"kind\", \"declarations\")\n        .field(\"kind\", or(\"var\", \"let\", \"const\"))\n        .field(\"declarations\", [def(\"VariableDeclarator\")]);\n    def(\"VariableDeclarator\")\n        .bases(\"Node\")\n        .build(\"id\", \"init\")\n        .field(\"id\", def(\"Pattern\"))\n        .field(\"init\", or(def(\"Expression\"), null), defaults[\"null\"]);\n    // TODO Are all Expressions really Patterns?\n    def(\"Expression\").bases(\"Node\", \"Pattern\");\n    def(\"ThisExpression\").bases(\"Expression\").build();\n    def(\"ArrayExpression\")\n        .bases(\"Expression\")\n        .build(\"elements\")\n        .field(\"elements\", [or(def(\"Expression\"), null)]);\n    def(\"ObjectExpression\")\n        .bases(\"Expression\")\n        .build(\"properties\")\n        .field(\"properties\", [def(\"Property\")]);\n    // TODO Not in the Mozilla Parser API, but used by Esprima.\n    def(\"Property\")\n        .bases(\"Node\") // Want to be able to visit Property Nodes.\n        .build(\"kind\", \"key\", \"value\")\n        .field(\"kind\", or(\"init\", \"get\", \"set\"))\n        .field(\"key\", or(def(\"Literal\"), def(\"Identifier\")))\n        .field(\"value\", def(\"Expression\"));\n    def(\"SequenceExpression\")\n        .bases(\"Expression\")\n        .build(\"expressions\")\n        .field(\"expressions\", [def(\"Expression\")]);\n    var UnaryOperator = or(\"-\", \"+\", \"!\", \"~\", \"typeof\", \"void\", \"delete\");\n    def(\"UnaryExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"argument\", \"prefix\")\n        .field(\"operator\", UnaryOperator)\n        .field(\"argument\", def(\"Expression\"))\n        // Esprima doesn't bother with this field, presumably because it's\n        // always true for unary operators.\n        .field(\"prefix\", Boolean, defaults[\"true\"]);\n    var BinaryOperator = or(\"==\", \"!=\", \"===\", \"!==\", \"<\", \"<=\", \">\", \">=\", \"<<\", \">>\", \">>>\", \"+\", \"-\", \"*\", \"/\", \"%\", \"**\", \"&\", // TODO Missing from the Parser API.\n    \"|\", \"^\", \"in\", \"instanceof\");\n    def(\"BinaryExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"left\", \"right\")\n        .field(\"operator\", BinaryOperator)\n        .field(\"left\", def(\"Expression\"))\n        .field(\"right\", def(\"Expression\"));\n    var AssignmentOperator = or(\"=\", \"+=\", \"-=\", \"*=\", \"/=\", \"%=\", \"<<=\", \">>=\", \">>>=\", \"|=\", \"^=\", \"&=\");\n    def(\"AssignmentExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"left\", \"right\")\n        .field(\"operator\", AssignmentOperator)\n        .field(\"left\", def(\"Pattern\"))\n        .field(\"right\", def(\"Expression\"));\n    var UpdateOperator = or(\"++\", \"--\");\n    def(\"UpdateExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"argument\", \"prefix\")\n        .field(\"operator\", UpdateOperator)\n        .field(\"argument\", def(\"Expression\"))\n        .field(\"prefix\", Boolean);\n    var LogicalOperator = or(\"||\", \"&&\");\n    def(\"LogicalExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"left\", \"right\")\n        .field(\"operator\", LogicalOperator)\n        .field(\"left\", def(\"Expression\"))\n        .field(\"right\", def(\"Expression\"));\n    def(\"ConditionalExpression\")\n        .bases(\"Expression\")\n        .build(\"test\", \"consequent\", \"alternate\")\n        .field(\"test\", def(\"Expression\"))\n        .field(\"consequent\", def(\"Expression\"))\n        .field(\"alternate\", def(\"Expression\"));\n    def(\"NewExpression\")\n        .bases(\"Expression\")\n        .build(\"callee\", \"arguments\")\n        .field(\"callee\", def(\"Expression\"))\n        // The Mozilla Parser API gives this type as [or(def(\"Expression\"),\n        // null)], but null values don't really make sense at the call site.\n        // TODO Report this nonsense.\n        .field(\"arguments\", [def(\"Expression\")]);\n    def(\"CallExpression\")\n        .bases(\"Expression\")\n        .build(\"callee\", \"arguments\")\n        .field(\"callee\", def(\"Expression\"))\n        // See comment for NewExpression above.\n        .field(\"arguments\", [def(\"Expression\")]);\n    def(\"MemberExpression\")\n        .bases(\"Expression\")\n        .build(\"object\", \"property\", \"computed\")\n        .field(\"object\", def(\"Expression\"))\n        .field(\"property\", or(def(\"Identifier\"), def(\"Expression\")))\n        .field(\"computed\", Boolean, function () {\n        var type = this.property.type;\n        if (type === 'Literal' ||\n            type === 'MemberExpression' ||\n            type === 'BinaryExpression') {\n            return true;\n        }\n        return false;\n    });\n    def(\"Pattern\").bases(\"Node\");\n    def(\"SwitchCase\")\n        .bases(\"Node\")\n        .build(\"test\", \"consequent\")\n        .field(\"test\", or(def(\"Expression\"), null))\n        .field(\"consequent\", [def(\"Statement\")]);\n    def(\"Identifier\")\n        // But aren't Expressions and Patterns already Nodes? TODO Report this.\n        .bases(\"Node\", \"Expression\", \"Pattern\")\n        .build(\"name\")\n        .field(\"name\", String)\n        .field(\"optional\", Boolean, defaults[\"false\"]);\n    def(\"Literal\")\n        // But aren't Expressions already Nodes? TODO Report this.\n        .bases(\"Node\", \"Expression\")\n        .build(\"value\")\n        .field(\"value\", or(String, Boolean, null, Number, RegExp))\n        .field(\"regex\", or({\n        pattern: String,\n        flags: String\n    }, null), function () {\n        if (this.value instanceof RegExp) {\n            var flags = \"\";\n            if (this.value.ignoreCase)\n                flags += \"i\";\n            if (this.value.multiline)\n                flags += \"m\";\n            if (this.value.global)\n                flags += \"g\";\n            return {\n                pattern: this.value.source,\n                flags: flags\n            };\n        }\n        return null;\n    });\n    // Abstract (non-buildable) comment supertype. Not a Node.\n    def(\"Comment\")\n        .bases(\"Printable\")\n        .field(\"value\", String)\n        // A .leading comment comes before the node, whereas a .trailing\n        // comment comes after it. These two fields should not both be true,\n        // but they might both be false when the comment falls inside a node\n        // and the node has no children for the comment to lead or trail,\n        // e.g. { /*dangling*/ }.\n        .field(\"leading\", Boolean, defaults[\"true\"])\n        .field(\"trailing\", Boolean, defaults[\"false\"]);\n}\nexports.default = default_1;\nmodule.exports = exports[\"default\"];\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/def/core.js?");

/***/ }),

/***/ "../../node_modules/ast-types/def/es-proposals.js":
/*!***************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/def/es-proposals.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = __importDefault(__webpack_require__(/*! ../lib/types */ \"../../node_modules/ast-types/lib/types.js\"));\nvar shared_1 = __importDefault(__webpack_require__(/*! ../lib/shared */ \"../../node_modules/ast-types/lib/shared.js\"));\nvar core_1 = __importDefault(__webpack_require__(/*! ./core */ \"../../node_modules/ast-types/def/core.js\"));\nfunction default_1(fork) {\n    fork.use(core_1.default);\n    var types = fork.use(types_1.default);\n    var Type = types.Type;\n    var def = types.Type.def;\n    var or = Type.or;\n    var shared = fork.use(shared_1.default);\n    var defaults = shared.defaults;\n    // https://github.com/tc39/proposal-optional-chaining\n    // `a?.b` as per https://github.com/estree/estree/issues/146\n    def(\"OptionalMemberExpression\")\n        .bases(\"MemberExpression\")\n        .build(\"object\", \"property\", \"computed\", \"optional\")\n        .field(\"optional\", Boolean, defaults[\"true\"]);\n    // a?.b()\n    def(\"OptionalCallExpression\")\n        .bases(\"CallExpression\")\n        .build(\"callee\", \"arguments\", \"optional\")\n        .field(\"optional\", Boolean, defaults[\"true\"]);\n    // https://github.com/tc39/proposal-nullish-coalescing\n    // `a ?? b` as per https://github.com/babel/babylon/pull/761/files\n    var LogicalOperator = or(\"||\", \"&&\", \"??\");\n    def(\"LogicalExpression\")\n        .field(\"operator\", LogicalOperator);\n}\nexports.default = default_1;\nmodule.exports = exports[\"default\"];\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/def/es-proposals.js?");

/***/ }),

/***/ "../../node_modules/ast-types/def/es6.js":
/*!******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/def/es6.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = __importDefault(__webpack_require__(/*! ./core */ \"../../node_modules/ast-types/def/core.js\"));\nvar types_1 = __importDefault(__webpack_require__(/*! ../lib/types */ \"../../node_modules/ast-types/lib/types.js\"));\nvar shared_1 = __importDefault(__webpack_require__(/*! ../lib/shared */ \"../../node_modules/ast-types/lib/shared.js\"));\nfunction default_1(fork) {\n    fork.use(core_1.default);\n    var types = fork.use(types_1.default);\n    var def = types.Type.def;\n    var or = types.Type.or;\n    var defaults = fork.use(shared_1.default).defaults;\n    def(\"Function\")\n        .field(\"generator\", Boolean, defaults[\"false\"])\n        .field(\"expression\", Boolean, defaults[\"false\"])\n        .field(\"defaults\", [or(def(\"Expression\"), null)], defaults.emptyArray)\n        // TODO This could be represented as a RestElement in .params.\n        .field(\"rest\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n    // The ESTree way of representing a ...rest parameter.\n    def(\"RestElement\")\n        .bases(\"Pattern\")\n        .build(\"argument\")\n        .field(\"argument\", def(\"Pattern\"))\n        .field(\"typeAnnotation\", // for Babylon. Flow parser puts it on the identifier\n    or(def(\"TypeAnnotation\"), def(\"TSTypeAnnotation\"), null), defaults[\"null\"]);\n    def(\"SpreadElementPattern\")\n        .bases(\"Pattern\")\n        .build(\"argument\")\n        .field(\"argument\", def(\"Pattern\"));\n    def(\"FunctionDeclaration\")\n        .build(\"id\", \"params\", \"body\", \"generator\", \"expression\");\n    def(\"FunctionExpression\")\n        .build(\"id\", \"params\", \"body\", \"generator\", \"expression\");\n    // The Parser API calls this ArrowExpression, but Esprima and all other\n    // actual parsers use ArrowFunctionExpression.\n    def(\"ArrowFunctionExpression\")\n        .bases(\"Function\", \"Expression\")\n        .build(\"params\", \"body\", \"expression\")\n        // The forced null value here is compatible with the overridden\n        // definition of the \"id\" field in the Function interface.\n        .field(\"id\", null, defaults[\"null\"])\n        // Arrow function bodies are allowed to be expressions.\n        .field(\"body\", or(def(\"BlockStatement\"), def(\"Expression\")))\n        // The current spec forbids arrow generators, so I have taken the\n        // liberty of enforcing that. TODO Report this.\n        .field(\"generator\", false, defaults[\"false\"]);\n    def(\"ForOfStatement\")\n        .bases(\"Statement\")\n        .build(\"left\", \"right\", \"body\")\n        .field(\"left\", or(def(\"VariableDeclaration\"), def(\"Pattern\")))\n        .field(\"right\", def(\"Expression\"))\n        .field(\"body\", def(\"Statement\"));\n    def(\"YieldExpression\")\n        .bases(\"Expression\")\n        .build(\"argument\", \"delegate\")\n        .field(\"argument\", or(def(\"Expression\"), null))\n        .field(\"delegate\", Boolean, defaults[\"false\"]);\n    def(\"GeneratorExpression\")\n        .bases(\"Expression\")\n        .build(\"body\", \"blocks\", \"filter\")\n        .field(\"body\", def(\"Expression\"))\n        .field(\"blocks\", [def(\"ComprehensionBlock\")])\n        .field(\"filter\", or(def(\"Expression\"), null));\n    def(\"ComprehensionExpression\")\n        .bases(\"Expression\")\n        .build(\"body\", \"blocks\", \"filter\")\n        .field(\"body\", def(\"Expression\"))\n        .field(\"blocks\", [def(\"ComprehensionBlock\")])\n        .field(\"filter\", or(def(\"Expression\"), null));\n    def(\"ComprehensionBlock\")\n        .bases(\"Node\")\n        .build(\"left\", \"right\", \"each\")\n        .field(\"left\", def(\"Pattern\"))\n        .field(\"right\", def(\"Expression\"))\n        .field(\"each\", Boolean);\n    def(\"Property\")\n        .field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\")))\n        .field(\"value\", or(def(\"Expression\"), def(\"Pattern\")))\n        .field(\"method\", Boolean, defaults[\"false\"])\n        .field(\"shorthand\", Boolean, defaults[\"false\"])\n        .field(\"computed\", Boolean, defaults[\"false\"]);\n    def(\"ObjectProperty\")\n        .field(\"shorthand\", Boolean, defaults[\"false\"]);\n    def(\"PropertyPattern\")\n        .bases(\"Pattern\")\n        .build(\"key\", \"pattern\")\n        .field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\")))\n        .field(\"pattern\", def(\"Pattern\"))\n        .field(\"computed\", Boolean, defaults[\"false\"]);\n    def(\"ObjectPattern\")\n        .bases(\"Pattern\")\n        .build(\"properties\")\n        .field(\"properties\", [or(def(\"PropertyPattern\"), def(\"Property\"))]);\n    def(\"ArrayPattern\")\n        .bases(\"Pattern\")\n        .build(\"elements\")\n        .field(\"elements\", [or(def(\"Pattern\"), null)]);\n    def(\"MethodDefinition\")\n        .bases(\"Declaration\")\n        .build(\"kind\", \"key\", \"value\", \"static\")\n        .field(\"kind\", or(\"constructor\", \"method\", \"get\", \"set\"))\n        .field(\"key\", def(\"Expression\"))\n        .field(\"value\", def(\"Function\"))\n        .field(\"computed\", Boolean, defaults[\"false\"])\n        .field(\"static\", Boolean, defaults[\"false\"]);\n    def(\"SpreadElement\")\n        .bases(\"Node\")\n        .build(\"argument\")\n        .field(\"argument\", def(\"Expression\"));\n    def(\"ArrayExpression\")\n        .field(\"elements\", [or(def(\"Expression\"), def(\"SpreadElement\"), def(\"RestElement\"), null)]);\n    def(\"NewExpression\")\n        .field(\"arguments\", [or(def(\"Expression\"), def(\"SpreadElement\"))]);\n    def(\"CallExpression\")\n        .field(\"arguments\", [or(def(\"Expression\"), def(\"SpreadElement\"))]);\n    // Note: this node type is *not* an AssignmentExpression with a Pattern on\n    // the left-hand side! The existing AssignmentExpression type already\n    // supports destructuring assignments. AssignmentPattern nodes may appear\n    // wherever a Pattern is allowed, and the right-hand side represents a\n    // default value to be destructured against the left-hand side, if no\n    // value is otherwise provided. For example: default parameter values.\n    def(\"AssignmentPattern\")\n        .bases(\"Pattern\")\n        .build(\"left\", \"right\")\n        .field(\"left\", def(\"Pattern\"))\n        .field(\"right\", def(\"Expression\"));\n    var ClassBodyElement = or(def(\"MethodDefinition\"), def(\"VariableDeclarator\"), def(\"ClassPropertyDefinition\"), def(\"ClassProperty\"));\n    def(\"ClassProperty\")\n        .bases(\"Declaration\")\n        .build(\"key\")\n        .field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\")))\n        .field(\"computed\", Boolean, defaults[\"false\"]);\n    def(\"ClassPropertyDefinition\") // static property\n        .bases(\"Declaration\")\n        .build(\"definition\")\n        // Yes, Virginia, circular definitions are permitted.\n        .field(\"definition\", ClassBodyElement);\n    def(\"ClassBody\")\n        .bases(\"Declaration\")\n        .build(\"body\")\n        .field(\"body\", [ClassBodyElement]);\n    def(\"ClassDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"id\", \"body\", \"superClass\")\n        .field(\"id\", or(def(\"Identifier\"), null))\n        .field(\"body\", def(\"ClassBody\"))\n        .field(\"superClass\", or(def(\"Expression\"), null), defaults[\"null\"]);\n    def(\"ClassExpression\")\n        .bases(\"Expression\")\n        .build(\"id\", \"body\", \"superClass\")\n        .field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"])\n        .field(\"body\", def(\"ClassBody\"))\n        .field(\"superClass\", or(def(\"Expression\"), null), defaults[\"null\"]);\n    // Specifier and ModuleSpecifier are abstract non-standard types\n    // introduced for definitional convenience.\n    def(\"Specifier\").bases(\"Node\");\n    // This supertype is shared/abused by both def/babel.js and\n    // def/esprima.js. In the future, it will be possible to load only one set\n    // of definitions appropriate for a given parser, but until then we must\n    // rely on default functions to reconcile the conflicting AST formats.\n    def(\"ModuleSpecifier\")\n        .bases(\"Specifier\")\n        // This local field is used by Babel/Acorn. It should not technically\n        // be optional in the Babel/Acorn AST format, but it must be optional\n        // in the Esprima AST format.\n        .field(\"local\", or(def(\"Identifier\"), null), defaults[\"null\"])\n        // The id and name fields are used by Esprima. The id field should not\n        // technically be optional in the Esprima AST format, but it must be\n        // optional in the Babel/Acorn AST format.\n        .field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"])\n        .field(\"name\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n    // Like ModuleSpecifier, except type:\"ImportSpecifier\" and buildable.\n    // import {<id [as name]>} from ...;\n    def(\"ImportSpecifier\")\n        .bases(\"ModuleSpecifier\")\n        .build(\"id\", \"name\");\n    // import <* as id> from ...;\n    def(\"ImportNamespaceSpecifier\")\n        .bases(\"ModuleSpecifier\")\n        .build(\"id\");\n    // import <id> from ...;\n    def(\"ImportDefaultSpecifier\")\n        .bases(\"ModuleSpecifier\")\n        .build(\"id\");\n    def(\"ImportDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"specifiers\", \"source\", \"importKind\")\n        .field(\"specifiers\", [or(def(\"ImportSpecifier\"), def(\"ImportNamespaceSpecifier\"), def(\"ImportDefaultSpecifier\"))], defaults.emptyArray)\n        .field(\"source\", def(\"Literal\"))\n        .field(\"importKind\", or(\"value\", \"type\"), function () {\n        return \"value\";\n    });\n    def(\"TaggedTemplateExpression\")\n        .bases(\"Expression\")\n        .build(\"tag\", \"quasi\")\n        .field(\"tag\", def(\"Expression\"))\n        .field(\"quasi\", def(\"TemplateLiteral\"));\n    def(\"TemplateLiteral\")\n        .bases(\"Expression\")\n        .build(\"quasis\", \"expressions\")\n        .field(\"quasis\", [def(\"TemplateElement\")])\n        .field(\"expressions\", [def(\"Expression\")]);\n    def(\"TemplateElement\")\n        .bases(\"Node\")\n        .build(\"value\", \"tail\")\n        .field(\"value\", { \"cooked\": String, \"raw\": String })\n        .field(\"tail\", Boolean);\n}\nexports.default = default_1;\nmodule.exports = exports[\"default\"];\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/def/es6.js?");

/***/ }),

/***/ "../../node_modules/ast-types/def/es7.js":
/*!******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/def/es7.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar es6_1 = __importDefault(__webpack_require__(/*! ./es6 */ \"../../node_modules/ast-types/def/es6.js\"));\nvar types_1 = __importDefault(__webpack_require__(/*! ../lib/types */ \"../../node_modules/ast-types/lib/types.js\"));\nvar shared_1 = __importDefault(__webpack_require__(/*! ../lib/shared */ \"../../node_modules/ast-types/lib/shared.js\"));\nfunction default_1(fork) {\n    fork.use(es6_1.default);\n    var types = fork.use(types_1.default);\n    var def = types.Type.def;\n    var or = types.Type.or;\n    var defaults = fork.use(shared_1.default).defaults;\n    def(\"Function\")\n        .field(\"async\", Boolean, defaults[\"false\"]);\n    def(\"SpreadProperty\")\n        .bases(\"Node\")\n        .build(\"argument\")\n        .field(\"argument\", def(\"Expression\"));\n    def(\"ObjectExpression\")\n        .field(\"properties\", [or(def(\"Property\"), def(\"SpreadProperty\"), def(\"SpreadElement\"))]);\n    def(\"SpreadPropertyPattern\")\n        .bases(\"Pattern\")\n        .build(\"argument\")\n        .field(\"argument\", def(\"Pattern\"));\n    def(\"ObjectPattern\")\n        .field(\"properties\", [or(def(\"Property\"), def(\"PropertyPattern\"), def(\"SpreadPropertyPattern\"))]);\n    def(\"AwaitExpression\")\n        .bases(\"Expression\")\n        .build(\"argument\", \"all\")\n        .field(\"argument\", or(def(\"Expression\"), null))\n        .field(\"all\", Boolean, defaults[\"false\"]);\n}\nexports.default = default_1;\nmodule.exports = exports[\"default\"];\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/def/es7.js?");

/***/ }),

/***/ "../../node_modules/ast-types/def/esprima.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/def/esprima.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar es7_1 = __importDefault(__webpack_require__(/*! ./es7 */ \"../../node_modules/ast-types/def/es7.js\"));\nvar types_1 = __importDefault(__webpack_require__(/*! ../lib/types */ \"../../node_modules/ast-types/lib/types.js\"));\nvar shared_1 = __importDefault(__webpack_require__(/*! ../lib/shared */ \"../../node_modules/ast-types/lib/shared.js\"));\nfunction default_1(fork) {\n    fork.use(es7_1.default);\n    var types = fork.use(types_1.default);\n    var defaults = fork.use(shared_1.default).defaults;\n    var def = types.Type.def;\n    var or = types.Type.or;\n    def(\"VariableDeclaration\")\n        .field(\"declarations\", [or(def(\"VariableDeclarator\"), def(\"Identifier\") // Esprima deviation.\n        )]);\n    def(\"Property\")\n        .field(\"value\", or(def(\"Expression\"), def(\"Pattern\") // Esprima deviation.\n    ));\n    def(\"ArrayPattern\")\n        .field(\"elements\", [or(def(\"Pattern\"), def(\"SpreadElement\"), null)]);\n    def(\"ObjectPattern\")\n        .field(\"properties\", [or(def(\"Property\"), def(\"PropertyPattern\"), def(\"SpreadPropertyPattern\"), def(\"SpreadProperty\") // Used by Esprima.\n        )]);\n    // Like ModuleSpecifier, except type:\"ExportSpecifier\" and buildable.\n    // export {<id [as name]>} [from ...];\n    def(\"ExportSpecifier\")\n        .bases(\"ModuleSpecifier\")\n        .build(\"id\", \"name\");\n    // export <*> from ...;\n    def(\"ExportBatchSpecifier\")\n        .bases(\"Specifier\")\n        .build();\n    def(\"ExportDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"default\", \"declaration\", \"specifiers\", \"source\")\n        .field(\"default\", Boolean)\n        .field(\"declaration\", or(def(\"Declaration\"), def(\"Expression\"), // Implies default.\n    null))\n        .field(\"specifiers\", [or(def(\"ExportSpecifier\"), def(\"ExportBatchSpecifier\"))], defaults.emptyArray)\n        .field(\"source\", or(def(\"Literal\"), null), defaults[\"null\"]);\n    def(\"Block\")\n        .bases(\"Comment\")\n        .build(\"value\", /*optional:*/ \"leading\", \"trailing\");\n    def(\"Line\")\n        .bases(\"Comment\")\n        .build(\"value\", /*optional:*/ \"leading\", \"trailing\");\n}\nexports.default = default_1;\nmodule.exports = exports[\"default\"];\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/def/esprima.js?");

/***/ }),

/***/ "../../node_modules/ast-types/def/flow.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/def/flow.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar es7_1 = __importDefault(__webpack_require__(/*! ./es7 */ \"../../node_modules/ast-types/def/es7.js\"));\nvar type_annotations_1 = __importDefault(__webpack_require__(/*! ./type-annotations */ \"../../node_modules/ast-types/def/type-annotations.js\"));\nvar types_1 = __importDefault(__webpack_require__(/*! ../lib/types */ \"../../node_modules/ast-types/lib/types.js\"));\nvar shared_1 = __importDefault(__webpack_require__(/*! ../lib/shared */ \"../../node_modules/ast-types/lib/shared.js\"));\nfunction default_1(fork) {\n    fork.use(es7_1.default);\n    fork.use(type_annotations_1.default);\n    var types = fork.use(types_1.default);\n    var def = types.Type.def;\n    var or = types.Type.or;\n    var defaults = fork.use(shared_1.default).defaults;\n    // Base types\n    def(\"Flow\").bases(\"Node\");\n    def(\"FlowType\").bases(\"Flow\");\n    // Type annotations\n    def(\"AnyTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build();\n    def(\"EmptyTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build();\n    def(\"MixedTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build();\n    def(\"VoidTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build();\n    def(\"NumberTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build();\n    def(\"NumberLiteralTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build(\"value\", \"raw\")\n        .field(\"value\", Number)\n        .field(\"raw\", String);\n    // Babylon 6 differs in AST from Flow\n    // same as NumberLiteralTypeAnnotation\n    def(\"NumericLiteralTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build(\"value\", \"raw\")\n        .field(\"value\", Number)\n        .field(\"raw\", String);\n    def(\"StringTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build();\n    def(\"StringLiteralTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build(\"value\", \"raw\")\n        .field(\"value\", String)\n        .field(\"raw\", String);\n    def(\"BooleanTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build();\n    def(\"BooleanLiteralTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build(\"value\", \"raw\")\n        .field(\"value\", Boolean)\n        .field(\"raw\", String);\n    def(\"TypeAnnotation\")\n        .bases(\"Node\")\n        .build(\"typeAnnotation\")\n        .field(\"typeAnnotation\", def(\"FlowType\"));\n    def(\"NullableTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build(\"typeAnnotation\")\n        .field(\"typeAnnotation\", def(\"FlowType\"));\n    def(\"NullLiteralTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build();\n    def(\"NullTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build();\n    def(\"ThisTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build();\n    def(\"ExistsTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build();\n    def(\"ExistentialTypeParam\")\n        .bases(\"FlowType\")\n        .build();\n    def(\"FunctionTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build(\"params\", \"returnType\", \"rest\", \"typeParameters\")\n        .field(\"params\", [def(\"FunctionTypeParam\")])\n        .field(\"returnType\", def(\"FlowType\"))\n        .field(\"rest\", or(def(\"FunctionTypeParam\"), null))\n        .field(\"typeParameters\", or(def(\"TypeParameterDeclaration\"), null));\n    def(\"FunctionTypeParam\")\n        .bases(\"Node\")\n        .build(\"name\", \"typeAnnotation\", \"optional\")\n        .field(\"name\", def(\"Identifier\"))\n        .field(\"typeAnnotation\", def(\"FlowType\"))\n        .field(\"optional\", Boolean);\n    def(\"ArrayTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build(\"elementType\")\n        .field(\"elementType\", def(\"FlowType\"));\n    def(\"ObjectTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build(\"properties\", \"indexers\", \"callProperties\")\n        .field(\"properties\", [\n        or(def(\"ObjectTypeProperty\"), def(\"ObjectTypeSpreadProperty\"))\n    ])\n        .field(\"indexers\", [def(\"ObjectTypeIndexer\")], defaults.emptyArray)\n        .field(\"callProperties\", [def(\"ObjectTypeCallProperty\")], defaults.emptyArray)\n        .field(\"inexact\", or(Boolean, void 0), defaults[\"undefined\"])\n        .field(\"exact\", Boolean, defaults[\"false\"])\n        .field(\"internalSlots\", [def(\"ObjectTypeInternalSlot\")], defaults.emptyArray);\n    def(\"Variance\")\n        .bases(\"Node\")\n        .build(\"kind\")\n        .field(\"kind\", or(\"plus\", \"minus\"));\n    var LegacyVariance = or(def(\"Variance\"), \"plus\", \"minus\", null);\n    def(\"ObjectTypeProperty\")\n        .bases(\"Node\")\n        .build(\"key\", \"value\", \"optional\")\n        .field(\"key\", or(def(\"Literal\"), def(\"Identifier\")))\n        .field(\"value\", def(\"FlowType\"))\n        .field(\"optional\", Boolean)\n        .field(\"variance\", LegacyVariance, defaults[\"null\"]);\n    def(\"ObjectTypeIndexer\")\n        .bases(\"Node\")\n        .build(\"id\", \"key\", \"value\")\n        .field(\"id\", def(\"Identifier\"))\n        .field(\"key\", def(\"FlowType\"))\n        .field(\"value\", def(\"FlowType\"))\n        .field(\"variance\", LegacyVariance, defaults[\"null\"]);\n    def(\"ObjectTypeCallProperty\")\n        .bases(\"Node\")\n        .build(\"value\")\n        .field(\"value\", def(\"FunctionTypeAnnotation\"))\n        .field(\"static\", Boolean, defaults[\"false\"]);\n    def(\"QualifiedTypeIdentifier\")\n        .bases(\"Node\")\n        .build(\"qualification\", \"id\")\n        .field(\"qualification\", or(def(\"Identifier\"), def(\"QualifiedTypeIdentifier\")))\n        .field(\"id\", def(\"Identifier\"));\n    def(\"GenericTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build(\"id\", \"typeParameters\")\n        .field(\"id\", or(def(\"Identifier\"), def(\"QualifiedTypeIdentifier\")))\n        .field(\"typeParameters\", or(def(\"TypeParameterInstantiation\"), null));\n    def(\"MemberTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build(\"object\", \"property\")\n        .field(\"object\", def(\"Identifier\"))\n        .field(\"property\", or(def(\"MemberTypeAnnotation\"), def(\"GenericTypeAnnotation\")));\n    def(\"UnionTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build(\"types\")\n        .field(\"types\", [def(\"FlowType\")]);\n    def(\"IntersectionTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build(\"types\")\n        .field(\"types\", [def(\"FlowType\")]);\n    def(\"TypeofTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build(\"argument\")\n        .field(\"argument\", def(\"FlowType\"));\n    def(\"ObjectTypeSpreadProperty\")\n        .bases(\"Node\")\n        .build(\"argument\")\n        .field(\"argument\", def(\"FlowType\"));\n    def(\"ObjectTypeInternalSlot\")\n        .bases(\"Node\")\n        .build(\"id\", \"value\", \"optional\", \"static\", \"method\")\n        .field(\"id\", def(\"Identifier\"))\n        .field(\"value\", def(\"FlowType\"))\n        .field(\"optional\", Boolean)\n        .field(\"static\", Boolean)\n        .field(\"method\", Boolean);\n    def(\"TypeParameterDeclaration\")\n        .bases(\"Node\")\n        .build(\"params\")\n        .field(\"params\", [def(\"TypeParameter\")]);\n    def(\"TypeParameterInstantiation\")\n        .bases(\"Node\")\n        .build(\"params\")\n        .field(\"params\", [def(\"FlowType\")]);\n    def(\"TypeParameter\")\n        .bases(\"FlowType\")\n        .build(\"name\", \"variance\", \"bound\")\n        .field(\"name\", String)\n        .field(\"variance\", LegacyVariance, defaults[\"null\"])\n        .field(\"bound\", or(def(\"TypeAnnotation\"), null), defaults[\"null\"]);\n    def(\"ClassProperty\")\n        .field(\"variance\", LegacyVariance, defaults[\"null\"]);\n    def(\"ClassImplements\")\n        .bases(\"Node\")\n        .build(\"id\")\n        .field(\"id\", def(\"Identifier\"))\n        .field(\"superClass\", or(def(\"Expression\"), null), defaults[\"null\"])\n        .field(\"typeParameters\", or(def(\"TypeParameterInstantiation\"), null), defaults[\"null\"]);\n    def(\"InterfaceTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build(\"body\", \"extends\")\n        .field(\"body\", def(\"ObjectTypeAnnotation\"))\n        .field(\"extends\", or([def(\"InterfaceExtends\")], null), defaults[\"null\"]);\n    def(\"InterfaceDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"id\", \"body\", \"extends\")\n        .field(\"id\", def(\"Identifier\"))\n        .field(\"typeParameters\", or(def(\"TypeParameterDeclaration\"), null), defaults[\"null\"])\n        .field(\"body\", def(\"ObjectTypeAnnotation\"))\n        .field(\"extends\", [def(\"InterfaceExtends\")]);\n    def(\"DeclareInterface\")\n        .bases(\"InterfaceDeclaration\")\n        .build(\"id\", \"body\", \"extends\");\n    def(\"InterfaceExtends\")\n        .bases(\"Node\")\n        .build(\"id\")\n        .field(\"id\", def(\"Identifier\"))\n        .field(\"typeParameters\", or(def(\"TypeParameterInstantiation\"), null), defaults[\"null\"]);\n    def(\"TypeAlias\")\n        .bases(\"Declaration\")\n        .build(\"id\", \"typeParameters\", \"right\")\n        .field(\"id\", def(\"Identifier\"))\n        .field(\"typeParameters\", or(def(\"TypeParameterDeclaration\"), null))\n        .field(\"right\", def(\"FlowType\"));\n    def(\"OpaqueType\")\n        .bases(\"Declaration\")\n        .build(\"id\", \"typeParameters\", \"impltype\", \"supertype\")\n        .field(\"id\", def(\"Identifier\"))\n        .field(\"typeParameters\", or(def(\"TypeParameterDeclaration\"), null))\n        .field(\"impltype\", def(\"FlowType\"))\n        .field(\"supertype\", def(\"FlowType\"));\n    def(\"DeclareTypeAlias\")\n        .bases(\"TypeAlias\")\n        .build(\"id\", \"typeParameters\", \"right\");\n    def(\"DeclareOpaqueType\")\n        .bases(\"TypeAlias\")\n        .build(\"id\", \"typeParameters\", \"supertype\");\n    def(\"TypeCastExpression\")\n        .bases(\"Expression\")\n        .build(\"expression\", \"typeAnnotation\")\n        .field(\"expression\", def(\"Expression\"))\n        .field(\"typeAnnotation\", def(\"TypeAnnotation\"));\n    def(\"TupleTypeAnnotation\")\n        .bases(\"FlowType\")\n        .build(\"types\")\n        .field(\"types\", [def(\"FlowType\")]);\n    def(\"DeclareVariable\")\n        .bases(\"Statement\")\n        .build(\"id\")\n        .field(\"id\", def(\"Identifier\"));\n    def(\"DeclareFunction\")\n        .bases(\"Statement\")\n        .build(\"id\")\n        .field(\"id\", def(\"Identifier\"));\n    def(\"DeclareClass\")\n        .bases(\"InterfaceDeclaration\")\n        .build(\"id\");\n    def(\"DeclareModule\")\n        .bases(\"Statement\")\n        .build(\"id\", \"body\")\n        .field(\"id\", or(def(\"Identifier\"), def(\"Literal\")))\n        .field(\"body\", def(\"BlockStatement\"));\n    def(\"DeclareModuleExports\")\n        .bases(\"Statement\")\n        .build(\"typeAnnotation\")\n        .field(\"typeAnnotation\", def(\"TypeAnnotation\"));\n    def(\"DeclareExportDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"default\", \"declaration\", \"specifiers\", \"source\")\n        .field(\"default\", Boolean)\n        .field(\"declaration\", or(def(\"DeclareVariable\"), def(\"DeclareFunction\"), def(\"DeclareClass\"), def(\"FlowType\"), // Implies default.\n    null))\n        .field(\"specifiers\", [or(def(\"ExportSpecifier\"), def(\"ExportBatchSpecifier\"))], defaults.emptyArray)\n        .field(\"source\", or(def(\"Literal\"), null), defaults[\"null\"]);\n    def(\"DeclareExportAllDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"source\")\n        .field(\"source\", or(def(\"Literal\"), null), defaults[\"null\"]);\n    def(\"FlowPredicate\").bases(\"Flow\");\n    def(\"InferredPredicate\")\n        .bases(\"FlowPredicate\")\n        .build();\n    def(\"DeclaredPredicate\")\n        .bases(\"FlowPredicate\")\n        .build(\"value\")\n        .field(\"value\", def(\"Expression\"));\n}\nexports.default = default_1;\nmodule.exports = exports[\"default\"];\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/def/flow.js?");

/***/ }),

/***/ "../../node_modules/ast-types/def/jsx.js":
/*!******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/def/jsx.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar es7_1 = __importDefault(__webpack_require__(/*! ./es7 */ \"../../node_modules/ast-types/def/es7.js\"));\nvar types_1 = __importDefault(__webpack_require__(/*! ../lib/types */ \"../../node_modules/ast-types/lib/types.js\"));\nvar shared_1 = __importDefault(__webpack_require__(/*! ../lib/shared */ \"../../node_modules/ast-types/lib/shared.js\"));\nfunction default_1(fork) {\n    fork.use(es7_1.default);\n    var types = fork.use(types_1.default);\n    var def = types.Type.def;\n    var or = types.Type.or;\n    var defaults = fork.use(shared_1.default).defaults;\n    def(\"JSXAttribute\")\n        .bases(\"Node\")\n        .build(\"name\", \"value\")\n        .field(\"name\", or(def(\"JSXIdentifier\"), def(\"JSXNamespacedName\")))\n        .field(\"value\", or(def(\"Literal\"), // attr=\"value\"\n    def(\"JSXExpressionContainer\"), // attr={value}\n    null // attr= or just attr\n    ), defaults[\"null\"]);\n    def(\"JSXIdentifier\")\n        .bases(\"Identifier\")\n        .build(\"name\")\n        .field(\"name\", String);\n    def(\"JSXNamespacedName\")\n        .bases(\"Node\")\n        .build(\"namespace\", \"name\")\n        .field(\"namespace\", def(\"JSXIdentifier\"))\n        .field(\"name\", def(\"JSXIdentifier\"));\n    def(\"JSXMemberExpression\")\n        .bases(\"MemberExpression\")\n        .build(\"object\", \"property\")\n        .field(\"object\", or(def(\"JSXIdentifier\"), def(\"JSXMemberExpression\")))\n        .field(\"property\", def(\"JSXIdentifier\"))\n        .field(\"computed\", Boolean, defaults.false);\n    var JSXElementName = or(def(\"JSXIdentifier\"), def(\"JSXNamespacedName\"), def(\"JSXMemberExpression\"));\n    def(\"JSXSpreadAttribute\")\n        .bases(\"Node\")\n        .build(\"argument\")\n        .field(\"argument\", def(\"Expression\"));\n    var JSXAttributes = [or(def(\"JSXAttribute\"), def(\"JSXSpreadAttribute\"))];\n    def(\"JSXExpressionContainer\")\n        .bases(\"Expression\")\n        .build(\"expression\")\n        .field(\"expression\", def(\"Expression\"));\n    def(\"JSXElement\")\n        .bases(\"Expression\")\n        .build(\"openingElement\", \"closingElement\", \"children\")\n        .field(\"openingElement\", def(\"JSXOpeningElement\"))\n        .field(\"closingElement\", or(def(\"JSXClosingElement\"), null), defaults[\"null\"])\n        .field(\"children\", [or(def(\"JSXElement\"), def(\"JSXExpressionContainer\"), def(\"JSXFragment\"), def(\"JSXText\"), def(\"Literal\") // TODO Esprima should return JSXText instead.\n        )], defaults.emptyArray)\n        .field(\"name\", JSXElementName, function () {\n        // Little-known fact: the `this` object inside a default function\n        // is none other than the partially-built object itself, and any\n        // fields initialized directly from builder function arguments\n        // (like openingElement, closingElement, and children) are\n        // guaranteed to be available.\n        return this.openingElement.name;\n    }, true) // hidden from traversal\n        .field(\"selfClosing\", Boolean, function () {\n        return this.openingElement.selfClosing;\n    }, true) // hidden from traversal\n        .field(\"attributes\", JSXAttributes, function () {\n        return this.openingElement.attributes;\n    }, true); // hidden from traversal\n    def(\"JSXOpeningElement\")\n        .bases(\"Node\") // TODO Does this make sense? Can't really be an JSXElement.\n        .build(\"name\", \"attributes\", \"selfClosing\")\n        .field(\"name\", JSXElementName)\n        .field(\"attributes\", JSXAttributes, defaults.emptyArray)\n        .field(\"selfClosing\", Boolean, defaults[\"false\"]);\n    def(\"JSXClosingElement\")\n        .bases(\"Node\") // TODO Same concern.\n        .build(\"name\")\n        .field(\"name\", JSXElementName);\n    def(\"JSXFragment\")\n        .bases(\"Expression\")\n        .build(\"openingElement\", \"closingElement\", \"children\")\n        .field(\"openingElement\", def(\"JSXOpeningFragment\"))\n        .field(\"closingElement\", def(\"JSXClosingFragment\"))\n        .field(\"children\", [or(def(\"JSXElement\"), def(\"JSXExpressionContainer\"), def(\"JSXFragment\"), def(\"JSXText\"), def(\"Literal\") // TODO Esprima should return JSXText instead.\n        )], defaults.emptyArray);\n    def(\"JSXOpeningFragment\")\n        .bases(\"Node\") // TODO Same concern.\n        .build();\n    def(\"JSXClosingFragment\")\n        .bases(\"Node\") // TODO Same concern.\n        .build();\n    def(\"JSXText\")\n        .bases(\"Literal\")\n        .build(\"value\")\n        .field(\"value\", String);\n    def(\"JSXEmptyExpression\").bases(\"Expression\").build();\n    // This PR has caused many people issues, but supporting it seems like a\n    // good idea anyway: https://github.com/babel/babel/pull/4988\n    def(\"JSXSpreadChild\")\n        .bases(\"Expression\")\n        .build(\"expression\")\n        .field(\"expression\", def(\"Expression\"));\n}\nexports.default = default_1;\nmodule.exports = exports[\"default\"];\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/def/jsx.js?");

/***/ }),

/***/ "../../node_modules/ast-types/def/type-annotations.js":
/*!*******************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/def/type-annotations.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\n/**\n * Type annotation defs shared between Flow and TypeScript.\n * These defs could not be defined in ./flow.ts or ./typescript.ts directly\n * because they use the same name.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = __importDefault(__webpack_require__(/*! ../lib/types */ \"../../node_modules/ast-types/lib/types.js\"));\nvar shared_1 = __importDefault(__webpack_require__(/*! ../lib/shared */ \"../../node_modules/ast-types/lib/shared.js\"));\nfunction default_1(fork) {\n    var types = fork.use(types_1.default);\n    var def = types.Type.def;\n    var or = types.Type.or;\n    var defaults = fork.use(shared_1.default).defaults;\n    var TypeAnnotation = or(def(\"TypeAnnotation\"), def(\"TSTypeAnnotation\"), null);\n    var TypeParamDecl = or(def(\"TypeParameterDeclaration\"), def(\"TSTypeParameterDeclaration\"), null);\n    def(\"Identifier\")\n        .field(\"typeAnnotation\", TypeAnnotation, defaults[\"null\"]);\n    def(\"ObjectPattern\")\n        .field(\"typeAnnotation\", TypeAnnotation, defaults[\"null\"]);\n    def(\"Function\")\n        .field(\"returnType\", TypeAnnotation, defaults[\"null\"])\n        .field(\"typeParameters\", TypeParamDecl, defaults[\"null\"]);\n    def(\"ClassProperty\")\n        .build(\"key\", \"value\", \"typeAnnotation\", \"static\")\n        .field(\"value\", or(def(\"Expression\"), null))\n        .field(\"static\", Boolean, defaults[\"false\"])\n        .field(\"typeAnnotation\", TypeAnnotation, defaults[\"null\"]);\n    [\"ClassDeclaration\",\n        \"ClassExpression\",\n    ].forEach(function (typeName) {\n        def(typeName)\n            .field(\"typeParameters\", TypeParamDecl, defaults[\"null\"])\n            .field(\"superTypeParameters\", or(def(\"TypeParameterInstantiation\"), def(\"TSTypeParameterInstantiation\"), null), defaults[\"null\"])\n            .field(\"implements\", or([def(\"ClassImplements\")], [def(\"TSExpressionWithTypeArguments\")]), defaults.emptyArray);\n    });\n}\nexports.default = default_1;\nmodule.exports = exports[\"default\"];\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/def/type-annotations.js?");

/***/ }),

/***/ "../../node_modules/ast-types/def/typescript.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/def/typescript.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar babel_core_1 = __importDefault(__webpack_require__(/*! ./babel-core */ \"../../node_modules/ast-types/def/babel-core.js\"));\nvar type_annotations_1 = __importDefault(__webpack_require__(/*! ./type-annotations */ \"../../node_modules/ast-types/def/type-annotations.js\"));\nvar types_1 = __importDefault(__webpack_require__(/*! ../lib/types */ \"../../node_modules/ast-types/lib/types.js\"));\nvar shared_1 = __importDefault(__webpack_require__(/*! ../lib/shared */ \"../../node_modules/ast-types/lib/shared.js\"));\nfunction default_1(fork) {\n    // Since TypeScript is parsed by Babylon, include the core Babylon types\n    // but omit the Flow-related types.\n    fork.use(babel_core_1.default);\n    fork.use(type_annotations_1.default);\n    var types = fork.use(types_1.default);\n    var n = types.namedTypes;\n    var def = types.Type.def;\n    var or = types.Type.or;\n    var defaults = fork.use(shared_1.default).defaults;\n    var StringLiteral = types.Type.from(function (value, deep) {\n        if (n.StringLiteral &&\n            n.StringLiteral.check(value, deep)) {\n            return true;\n        }\n        if (n.Literal &&\n            n.Literal.check(value, deep) &&\n            typeof value.value === \"string\") {\n            return true;\n        }\n        return false;\n    }, \"StringLiteral\");\n    def(\"TSType\")\n        .bases(\"Node\");\n    var TSEntityName = or(def(\"Identifier\"), def(\"TSQualifiedName\"));\n    def(\"TSTypeReference\")\n        .bases(\"TSType\", \"TSHasOptionalTypeParameterInstantiation\")\n        .build(\"typeName\", \"typeParameters\")\n        .field(\"typeName\", TSEntityName);\n    // An abstract (non-buildable) base type that provide a commonly-needed\n    // optional .typeParameters field.\n    def(\"TSHasOptionalTypeParameterInstantiation\")\n        .field(\"typeParameters\", or(def(\"TSTypeParameterInstantiation\"), null), defaults[\"null\"]);\n    // An abstract (non-buildable) base type that provide a commonly-needed\n    // optional .typeParameters field.\n    def(\"TSHasOptionalTypeParameters\")\n        .field(\"typeParameters\", or(def(\"TSTypeParameterDeclaration\"), null, void 0), defaults[\"null\"]);\n    // An abstract (non-buildable) base type that provide a commonly-needed\n    // optional .typeAnnotation field.\n    def(\"TSHasOptionalTypeAnnotation\")\n        .field(\"typeAnnotation\", or(def(\"TSTypeAnnotation\"), null), defaults[\"null\"]);\n    def(\"TSQualifiedName\")\n        .bases(\"Node\")\n        .build(\"left\", \"right\")\n        .field(\"left\", TSEntityName)\n        .field(\"right\", TSEntityName);\n    def(\"TSAsExpression\")\n        .bases(\"Expression\")\n        .build(\"expression\")\n        .field(\"expression\", def(\"Expression\"))\n        .field(\"typeAnnotation\", def(\"TSType\"))\n        .field(\"extra\", or({ parenthesized: Boolean }, null), defaults[\"null\"]);\n    def(\"TSNonNullExpression\")\n        .bases(\"Expression\")\n        .build(\"expression\")\n        .field(\"expression\", def(\"Expression\"));\n    [\n        \"TSAnyKeyword\",\n        \"TSBigIntKeyword\",\n        \"TSBooleanKeyword\",\n        \"TSNeverKeyword\",\n        \"TSNullKeyword\",\n        \"TSNumberKeyword\",\n        \"TSObjectKeyword\",\n        \"TSStringKeyword\",\n        \"TSSymbolKeyword\",\n        \"TSUndefinedKeyword\",\n        \"TSUnknownKeyword\",\n        \"TSVoidKeyword\",\n        \"TSThisType\",\n    ].forEach(function (keywordType) {\n        def(keywordType)\n            .bases(\"TSType\")\n            .build();\n    });\n    def(\"TSArrayType\")\n        .bases(\"TSType\")\n        .build(\"elementType\")\n        .field(\"elementType\", def(\"TSType\"));\n    def(\"TSLiteralType\")\n        .bases(\"TSType\")\n        .build(\"literal\")\n        .field(\"literal\", or(def(\"NumericLiteral\"), def(\"StringLiteral\"), def(\"BooleanLiteral\"), def(\"TemplateLiteral\"), def(\"UnaryExpression\")));\n    [\"TSUnionType\",\n        \"TSIntersectionType\",\n    ].forEach(function (typeName) {\n        def(typeName)\n            .bases(\"TSType\")\n            .build(\"types\")\n            .field(\"types\", [def(\"TSType\")]);\n    });\n    def(\"TSConditionalType\")\n        .bases(\"TSType\")\n        .build(\"checkType\", \"extendsType\", \"trueType\", \"falseType\")\n        .field(\"checkType\", def(\"TSType\"))\n        .field(\"extendsType\", def(\"TSType\"))\n        .field(\"trueType\", def(\"TSType\"))\n        .field(\"falseType\", def(\"TSType\"));\n    def(\"TSInferType\")\n        .bases(\"TSType\")\n        .build(\"typeParameter\")\n        .field(\"typeParameter\", def(\"TSTypeParameter\"));\n    def(\"TSParenthesizedType\")\n        .bases(\"TSType\")\n        .build(\"typeAnnotation\")\n        .field(\"typeAnnotation\", def(\"TSType\"));\n    var ParametersType = [or(def(\"Identifier\"), def(\"RestElement\"), def(\"ArrayPattern\"), def(\"ObjectPattern\"))];\n    [\"TSFunctionType\",\n        \"TSConstructorType\",\n    ].forEach(function (typeName) {\n        def(typeName)\n            .bases(\"TSType\", \"TSHasOptionalTypeParameters\", \"TSHasOptionalTypeAnnotation\")\n            .build(\"parameters\")\n            .field(\"parameters\", ParametersType);\n    });\n    def(\"TSDeclareFunction\")\n        .bases(\"Declaration\", \"TSHasOptionalTypeParameters\")\n        .build(\"id\", \"params\", \"returnType\")\n        .field(\"declare\", Boolean, defaults[\"false\"])\n        .field(\"async\", Boolean, defaults[\"false\"])\n        .field(\"generator\", Boolean, defaults[\"false\"])\n        .field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"])\n        .field(\"params\", [def(\"Pattern\")])\n        // tSFunctionTypeAnnotationCommon\n        .field(\"returnType\", or(def(\"TSTypeAnnotation\"), def(\"Noop\"), // Still used?\n    null), defaults[\"null\"]);\n    def(\"TSDeclareMethod\")\n        .bases(\"Declaration\", \"TSHasOptionalTypeParameters\")\n        .build(\"key\", \"params\", \"returnType\")\n        .field(\"async\", Boolean, defaults[\"false\"])\n        .field(\"generator\", Boolean, defaults[\"false\"])\n        .field(\"params\", [def(\"Pattern\")])\n        // classMethodOrPropertyCommon\n        .field(\"abstract\", Boolean, defaults[\"false\"])\n        .field(\"accessibility\", or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"])\n        .field(\"static\", Boolean, defaults[\"false\"])\n        .field(\"computed\", Boolean, defaults[\"false\"])\n        .field(\"optional\", Boolean, defaults[\"false\"])\n        .field(\"key\", or(def(\"Identifier\"), def(\"StringLiteral\"), def(\"NumericLiteral\"), \n    // Only allowed if .computed is true.\n    def(\"Expression\")))\n        // classMethodOrDeclareMethodCommon\n        .field(\"kind\", or(\"get\", \"set\", \"method\", \"constructor\"), function getDefault() { return \"method\"; })\n        .field(\"access\", // Not \"accessibility\"?\n    or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"])\n        .field(\"decorators\", or([def(\"Decorator\")], null), defaults[\"null\"])\n        // tSFunctionTypeAnnotationCommon\n        .field(\"returnType\", or(def(\"TSTypeAnnotation\"), def(\"Noop\"), // Still used?\n    null), defaults[\"null\"]);\n    def(\"TSMappedType\")\n        .bases(\"TSType\")\n        .build(\"typeParameter\", \"typeAnnotation\")\n        .field(\"readonly\", or(Boolean, \"+\", \"-\"), defaults[\"false\"])\n        .field(\"typeParameter\", def(\"TSTypeParameter\"))\n        .field(\"optional\", or(Boolean, \"+\", \"-\"), defaults[\"false\"])\n        .field(\"typeAnnotation\", or(def(\"TSType\"), null), defaults[\"null\"]);\n    def(\"TSTupleType\")\n        .bases(\"TSType\")\n        .build(\"elementTypes\")\n        .field(\"elementTypes\", [def(\"TSType\")]);\n    def(\"TSRestType\")\n        .bases(\"TSType\")\n        .build(\"typeAnnotation\")\n        .field(\"typeAnnotation\", def(\"TSType\"));\n    def(\"TSOptionalType\")\n        .bases(\"TSType\")\n        .build(\"typeAnnotation\")\n        .field(\"typeAnnotation\", def(\"TSType\"));\n    def(\"TSIndexedAccessType\")\n        .bases(\"TSType\")\n        .build(\"objectType\", \"indexType\")\n        .field(\"objectType\", def(\"TSType\"))\n        .field(\"indexType\", def(\"TSType\"));\n    def(\"TSTypeOperator\")\n        .bases(\"TSType\")\n        .build(\"operator\")\n        .field(\"operator\", String)\n        .field(\"typeAnnotation\", def(\"TSType\"));\n    def(\"TSTypeAnnotation\")\n        .bases(\"Node\")\n        .build(\"typeAnnotation\")\n        .field(\"typeAnnotation\", or(def(\"TSType\"), def(\"TSTypeAnnotation\")));\n    def(\"TSIndexSignature\")\n        .bases(\"Declaration\", \"TSHasOptionalTypeAnnotation\")\n        .build(\"parameters\", \"typeAnnotation\")\n        .field(\"parameters\", [def(\"Identifier\")]) // Length === 1\n        .field(\"readonly\", Boolean, defaults[\"false\"]);\n    def(\"TSPropertySignature\")\n        .bases(\"Declaration\", \"TSHasOptionalTypeAnnotation\")\n        .build(\"key\", \"typeAnnotation\", \"optional\")\n        .field(\"key\", def(\"Expression\"))\n        .field(\"computed\", Boolean, defaults[\"false\"])\n        .field(\"readonly\", Boolean, defaults[\"false\"])\n        .field(\"optional\", Boolean, defaults[\"false\"])\n        .field(\"initializer\", or(def(\"Expression\"), null), defaults[\"null\"]);\n    def(\"TSMethodSignature\")\n        .bases(\"Declaration\", \"TSHasOptionalTypeParameters\", \"TSHasOptionalTypeAnnotation\")\n        .build(\"key\", \"parameters\", \"typeAnnotation\")\n        .field(\"key\", def(\"Expression\"))\n        .field(\"computed\", Boolean, defaults[\"false\"])\n        .field(\"optional\", Boolean, defaults[\"false\"])\n        .field(\"parameters\", ParametersType);\n    def(\"TSTypePredicate\")\n        .bases(\"TSTypeAnnotation\")\n        .build(\"parameterName\", \"typeAnnotation\")\n        .field(\"parameterName\", or(def(\"Identifier\"), def(\"TSThisType\")))\n        .field(\"typeAnnotation\", def(\"TSTypeAnnotation\"));\n    [\"TSCallSignatureDeclaration\",\n        \"TSConstructSignatureDeclaration\",\n    ].forEach(function (typeName) {\n        def(typeName)\n            .bases(\"Declaration\", \"TSHasOptionalTypeParameters\", \"TSHasOptionalTypeAnnotation\")\n            .build(\"parameters\", \"typeAnnotation\")\n            .field(\"parameters\", ParametersType);\n    });\n    def(\"TSEnumMember\")\n        .bases(\"Node\")\n        .build(\"id\", \"initializer\")\n        .field(\"id\", or(def(\"Identifier\"), StringLiteral))\n        .field(\"initializer\", or(def(\"Expression\"), null), defaults[\"null\"]);\n    def(\"TSTypeQuery\")\n        .bases(\"TSType\")\n        .build(\"exprName\")\n        .field(\"exprName\", or(TSEntityName, def(\"TSImportType\")));\n    // Inferred from Babylon's tsParseTypeMember method.\n    var TSTypeMember = or(def(\"TSCallSignatureDeclaration\"), def(\"TSConstructSignatureDeclaration\"), def(\"TSIndexSignature\"), def(\"TSMethodSignature\"), def(\"TSPropertySignature\"));\n    def(\"TSTypeLiteral\")\n        .bases(\"TSType\")\n        .build(\"members\")\n        .field(\"members\", [TSTypeMember]);\n    def(\"TSTypeParameter\")\n        .bases(\"Identifier\")\n        .build(\"name\", \"constraint\", \"default\")\n        .field(\"name\", String)\n        .field(\"constraint\", or(def(\"TSType\"), void 0), defaults[\"undefined\"])\n        .field(\"default\", or(def(\"TSType\"), void 0), defaults[\"undefined\"]);\n    def(\"TSTypeAssertion\")\n        .bases(\"Expression\")\n        .build(\"typeAnnotation\", \"expression\")\n        .field(\"typeAnnotation\", def(\"TSType\"))\n        .field(\"expression\", def(\"Expression\"))\n        .field(\"extra\", or({ parenthesized: Boolean }, null), defaults[\"null\"]);\n    def(\"TSTypeParameterDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"params\")\n        .field(\"params\", [def(\"TSTypeParameter\")]);\n    def(\"TSTypeParameterInstantiation\")\n        .bases(\"Node\")\n        .build(\"params\")\n        .field(\"params\", [def(\"TSType\")]);\n    def(\"TSEnumDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"id\", \"members\")\n        .field(\"id\", def(\"Identifier\"))\n        .field(\"const\", Boolean, defaults[\"false\"])\n        .field(\"declare\", Boolean, defaults[\"false\"])\n        .field(\"members\", [def(\"TSEnumMember\")])\n        .field(\"initializer\", or(def(\"Expression\"), null), defaults[\"null\"]);\n    def(\"TSTypeAliasDeclaration\")\n        .bases(\"Declaration\", \"TSHasOptionalTypeParameters\")\n        .build(\"id\", \"typeAnnotation\")\n        .field(\"id\", def(\"Identifier\"))\n        .field(\"declare\", Boolean, defaults[\"false\"])\n        .field(\"typeAnnotation\", def(\"TSType\"));\n    def(\"TSModuleBlock\")\n        .bases(\"Node\")\n        .build(\"body\")\n        .field(\"body\", [def(\"Statement\")]);\n    def(\"TSModuleDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"id\", \"body\")\n        .field(\"id\", or(StringLiteral, TSEntityName))\n        .field(\"declare\", Boolean, defaults[\"false\"])\n        .field(\"global\", Boolean, defaults[\"false\"])\n        .field(\"body\", or(def(\"TSModuleBlock\"), def(\"TSModuleDeclaration\"), null), defaults[\"null\"]);\n    def(\"TSImportType\")\n        .bases(\"TSType\", \"TSHasOptionalTypeParameterInstantiation\")\n        .build(\"argument\", \"qualifier\", \"typeParameters\")\n        .field(\"argument\", StringLiteral)\n        .field(\"qualifier\", or(TSEntityName, void 0), defaults[\"undefined\"]);\n    def(\"TSImportEqualsDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"id\", \"moduleReference\")\n        .field(\"id\", def(\"Identifier\"))\n        .field(\"isExport\", Boolean, defaults[\"false\"])\n        .field(\"moduleReference\", or(TSEntityName, def(\"TSExternalModuleReference\")));\n    def(\"TSExternalModuleReference\")\n        .bases(\"Declaration\")\n        .build(\"expression\")\n        .field(\"expression\", StringLiteral);\n    def(\"TSExportAssignment\")\n        .bases(\"Statement\")\n        .build(\"expression\")\n        .field(\"expression\", def(\"Expression\"));\n    def(\"TSNamespaceExportDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"id\")\n        .field(\"id\", def(\"Identifier\"));\n    def(\"TSInterfaceBody\")\n        .bases(\"Node\")\n        .build(\"body\")\n        .field(\"body\", [TSTypeMember]);\n    def(\"TSExpressionWithTypeArguments\")\n        .bases(\"TSType\", \"TSHasOptionalTypeParameterInstantiation\")\n        .build(\"expression\", \"typeParameters\")\n        .field(\"expression\", TSEntityName);\n    def(\"TSInterfaceDeclaration\")\n        .bases(\"Declaration\", \"TSHasOptionalTypeParameters\")\n        .build(\"id\", \"body\")\n        .field(\"id\", TSEntityName)\n        .field(\"declare\", Boolean, defaults[\"false\"])\n        .field(\"extends\", or([def(\"TSExpressionWithTypeArguments\")], null), defaults[\"null\"])\n        .field(\"body\", def(\"TSInterfaceBody\"));\n    def(\"TSParameterProperty\")\n        .bases(\"Pattern\")\n        .build(\"parameter\")\n        .field(\"accessibility\", or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"])\n        .field(\"readonly\", Boolean, defaults[\"false\"])\n        .field(\"parameter\", or(def(\"Identifier\"), def(\"AssignmentPattern\")));\n    def(\"ClassProperty\")\n        .field(\"access\", // Not \"accessibility\"?\n    or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"]);\n    // Defined already in es6 and babel-core.\n    def(\"ClassBody\")\n        .field(\"body\", [or(def(\"MethodDefinition\"), def(\"VariableDeclarator\"), def(\"ClassPropertyDefinition\"), def(\"ClassProperty\"), def(\"ClassPrivateProperty\"), def(\"ClassMethod\"), def(\"ClassPrivateMethod\"), \n        // Just need to add these types:\n        def(\"TSDeclareMethod\"), TSTypeMember)]);\n}\nexports.default = default_1;\nmodule.exports = exports[\"default\"];\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/def/typescript.js?");

/***/ }),

/***/ "../../node_modules/ast-types/fork.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/fork.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = __importDefault(__webpack_require__(/*! ./lib/types */ \"../../node_modules/ast-types/lib/types.js\"));\nvar path_visitor_1 = __importDefault(__webpack_require__(/*! ./lib/path-visitor */ \"../../node_modules/ast-types/lib/path-visitor.js\"));\nvar equiv_1 = __importDefault(__webpack_require__(/*! ./lib/equiv */ \"../../node_modules/ast-types/lib/equiv.js\"));\nvar path_1 = __importDefault(__webpack_require__(/*! ./lib/path */ \"../../node_modules/ast-types/lib/path.js\"));\nvar node_path_1 = __importDefault(__webpack_require__(/*! ./lib/node-path */ \"../../node_modules/ast-types/lib/node-path.js\"));\nfunction default_1(defs) {\n    var fork = createFork();\n    var types = fork.use(types_1.default);\n    defs.forEach(fork.use);\n    types.finalize();\n    var PathVisitor = fork.use(path_visitor_1.default);\n    var exports = {\n        Type: types.Type,\n        builtInTypes: types.builtInTypes,\n        namedTypes: types.namedTypes,\n        builders: types.builders,\n        defineMethod: types.defineMethod,\n        getFieldNames: types.getFieldNames,\n        getFieldValue: types.getFieldValue,\n        eachField: types.eachField,\n        someField: types.someField,\n        getSupertypeNames: types.getSupertypeNames,\n        getBuilderName: types.getBuilderName,\n        astNodesAreEquivalent: fork.use(equiv_1.default),\n        finalize: types.finalize,\n        Path: fork.use(path_1.default),\n        NodePath: fork.use(node_path_1.default),\n        PathVisitor: PathVisitor,\n        use: fork.use,\n        visit: PathVisitor.visit,\n    };\n    return exports;\n}\nexports.default = default_1;\nfunction createFork() {\n    var used = [];\n    var usedResult = [];\n    function use(plugin) {\n        var idx = used.indexOf(plugin);\n        if (idx === -1) {\n            idx = used.length;\n            used.push(plugin);\n            usedResult[idx] = plugin(fork);\n        }\n        return usedResult[idx];\n    }\n    var fork = { use: use };\n    return fork;\n}\nmodule.exports = exports[\"default\"];\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/fork.js?");

/***/ }),

/***/ "../../node_modules/ast-types/lib/equiv.js":
/*!********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/lib/equiv.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = __importDefault(__webpack_require__(/*! ./types */ \"../../node_modules/ast-types/lib/types.js\"));\nfunction default_1(fork) {\n    var types = fork.use(types_1.default);\n    var getFieldNames = types.getFieldNames;\n    var getFieldValue = types.getFieldValue;\n    var isArray = types.builtInTypes.array;\n    var isObject = types.builtInTypes.object;\n    var isDate = types.builtInTypes.Date;\n    var isRegExp = types.builtInTypes.RegExp;\n    var hasOwn = Object.prototype.hasOwnProperty;\n    function astNodesAreEquivalent(a, b, problemPath) {\n        if (isArray.check(problemPath)) {\n            problemPath.length = 0;\n        }\n        else {\n            problemPath = null;\n        }\n        return areEquivalent(a, b, problemPath);\n    }\n    astNodesAreEquivalent.assert = function (a, b) {\n        var problemPath = [];\n        if (!astNodesAreEquivalent(a, b, problemPath)) {\n            if (problemPath.length === 0) {\n                if (a !== b) {\n                    throw new Error(\"Nodes must be equal\");\n                }\n            }\n            else {\n                throw new Error(\"Nodes differ in the following path: \" +\n                    problemPath.map(subscriptForProperty).join(\"\"));\n            }\n        }\n    };\n    function subscriptForProperty(property) {\n        if (/[_$a-z][_$a-z0-9]*/i.test(property)) {\n            return \".\" + property;\n        }\n        return \"[\" + JSON.stringify(property) + \"]\";\n    }\n    function areEquivalent(a, b, problemPath) {\n        if (a === b) {\n            return true;\n        }\n        if (isArray.check(a)) {\n            return arraysAreEquivalent(a, b, problemPath);\n        }\n        if (isObject.check(a)) {\n            return objectsAreEquivalent(a, b, problemPath);\n        }\n        if (isDate.check(a)) {\n            return isDate.check(b) && (+a === +b);\n        }\n        if (isRegExp.check(a)) {\n            return isRegExp.check(b) && (a.source === b.source &&\n                a.global === b.global &&\n                a.multiline === b.multiline &&\n                a.ignoreCase === b.ignoreCase);\n        }\n        return a == b;\n    }\n    function arraysAreEquivalent(a, b, problemPath) {\n        isArray.assert(a);\n        var aLength = a.length;\n        if (!isArray.check(b) || b.length !== aLength) {\n            if (problemPath) {\n                problemPath.push(\"length\");\n            }\n            return false;\n        }\n        for (var i = 0; i < aLength; ++i) {\n            if (problemPath) {\n                problemPath.push(i);\n            }\n            if (i in a !== i in b) {\n                return false;\n            }\n            if (!areEquivalent(a[i], b[i], problemPath)) {\n                return false;\n            }\n            if (problemPath) {\n                var problemPathTail = problemPath.pop();\n                if (problemPathTail !== i) {\n                    throw new Error(\"\" + problemPathTail);\n                }\n            }\n        }\n        return true;\n    }\n    function objectsAreEquivalent(a, b, problemPath) {\n        isObject.assert(a);\n        if (!isObject.check(b)) {\n            return false;\n        }\n        // Fast path for a common property of AST nodes.\n        if (a.type !== b.type) {\n            if (problemPath) {\n                problemPath.push(\"type\");\n            }\n            return false;\n        }\n        var aNames = getFieldNames(a);\n        var aNameCount = aNames.length;\n        var bNames = getFieldNames(b);\n        var bNameCount = bNames.length;\n        if (aNameCount === bNameCount) {\n            for (var i = 0; i < aNameCount; ++i) {\n                var name = aNames[i];\n                var aChild = getFieldValue(a, name);\n                var bChild = getFieldValue(b, name);\n                if (problemPath) {\n                    problemPath.push(name);\n                }\n                if (!areEquivalent(aChild, bChild, problemPath)) {\n                    return false;\n                }\n                if (problemPath) {\n                    var problemPathTail = problemPath.pop();\n                    if (problemPathTail !== name) {\n                        throw new Error(\"\" + problemPathTail);\n                    }\n                }\n            }\n            return true;\n        }\n        if (!problemPath) {\n            return false;\n        }\n        // Since aNameCount !== bNameCount, we need to find some name that's\n        // missing in aNames but present in bNames, or vice-versa.\n        var seenNames = Object.create(null);\n        for (i = 0; i < aNameCount; ++i) {\n            seenNames[aNames[i]] = true;\n        }\n        for (i = 0; i < bNameCount; ++i) {\n            name = bNames[i];\n            if (!hasOwn.call(seenNames, name)) {\n                problemPath.push(name);\n                return false;\n            }\n            delete seenNames[name];\n        }\n        for (name in seenNames) {\n            problemPath.push(name);\n            break;\n        }\n        return false;\n    }\n    return astNodesAreEquivalent;\n}\nexports.default = default_1;\nmodule.exports = exports[\"default\"];\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/lib/equiv.js?");

/***/ }),

/***/ "../../node_modules/ast-types/lib/node-path.js":
/*!************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/lib/node-path.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = __importDefault(__webpack_require__(/*! ./types */ \"../../node_modules/ast-types/lib/types.js\"));\nvar path_1 = __importDefault(__webpack_require__(/*! ./path */ \"../../node_modules/ast-types/lib/path.js\"));\nvar scope_1 = __importDefault(__webpack_require__(/*! ./scope */ \"../../node_modules/ast-types/lib/scope.js\"));\nfunction nodePathPlugin(fork) {\n    var types = fork.use(types_1.default);\n    var n = types.namedTypes;\n    var b = types.builders;\n    var isNumber = types.builtInTypes.number;\n    var isArray = types.builtInTypes.array;\n    var Path = fork.use(path_1.default);\n    var Scope = fork.use(scope_1.default);\n    var NodePath = function NodePath(value, parentPath, name) {\n        if (!(this instanceof NodePath)) {\n            throw new Error(\"NodePath constructor cannot be invoked without 'new'\");\n        }\n        Path.call(this, value, parentPath, name);\n    };\n    var NPp = NodePath.prototype = Object.create(Path.prototype, {\n        constructor: {\n            value: NodePath,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n    Object.defineProperties(NPp, {\n        node: {\n            get: function () {\n                Object.defineProperty(this, \"node\", {\n                    configurable: true,\n                    value: this._computeNode()\n                });\n                return this.node;\n            }\n        },\n        parent: {\n            get: function () {\n                Object.defineProperty(this, \"parent\", {\n                    configurable: true,\n                    value: this._computeParent()\n                });\n                return this.parent;\n            }\n        },\n        scope: {\n            get: function () {\n                Object.defineProperty(this, \"scope\", {\n                    configurable: true,\n                    value: this._computeScope()\n                });\n                return this.scope;\n            }\n        }\n    });\n    NPp.replace = function () {\n        delete this.node;\n        delete this.parent;\n        delete this.scope;\n        return Path.prototype.replace.apply(this, arguments);\n    };\n    NPp.prune = function () {\n        var remainingNodePath = this.parent;\n        this.replace();\n        return cleanUpNodesAfterPrune(remainingNodePath);\n    };\n    // The value of the first ancestor Path whose value is a Node.\n    NPp._computeNode = function () {\n        var value = this.value;\n        if (n.Node.check(value)) {\n            return value;\n        }\n        var pp = this.parentPath;\n        return pp && pp.node || null;\n    };\n    // The first ancestor Path whose value is a Node distinct from this.node.\n    NPp._computeParent = function () {\n        var value = this.value;\n        var pp = this.parentPath;\n        if (!n.Node.check(value)) {\n            while (pp && !n.Node.check(pp.value)) {\n                pp = pp.parentPath;\n            }\n            if (pp) {\n                pp = pp.parentPath;\n            }\n        }\n        while (pp && !n.Node.check(pp.value)) {\n            pp = pp.parentPath;\n        }\n        return pp || null;\n    };\n    // The closest enclosing scope that governs this node.\n    NPp._computeScope = function () {\n        var value = this.value;\n        var pp = this.parentPath;\n        var scope = pp && pp.scope;\n        if (n.Node.check(value) &&\n            Scope.isEstablishedBy(value)) {\n            scope = new Scope(this, scope);\n        }\n        return scope || null;\n    };\n    NPp.getValueProperty = function (name) {\n        return types.getFieldValue(this.value, name);\n    };\n    /**\n     * Determine whether this.node needs to be wrapped in parentheses in order\n     * for a parser to reproduce the same local AST structure.\n     *\n     * For instance, in the expression `(1 + 2) * 3`, the BinaryExpression\n     * whose operator is \"+\" needs parentheses, because `1 + 2 * 3` would\n     * parse differently.\n     *\n     * If assumeExpressionContext === true, we don't worry about edge cases\n     * like an anonymous FunctionExpression appearing lexically first in its\n     * enclosing statement and thus needing parentheses to avoid being parsed\n     * as a FunctionDeclaration with a missing name.\n     */\n    NPp.needsParens = function (assumeExpressionContext) {\n        var pp = this.parentPath;\n        if (!pp) {\n            return false;\n        }\n        var node = this.value;\n        // Only expressions need parentheses.\n        if (!n.Expression.check(node)) {\n            return false;\n        }\n        // Identifiers never need parentheses.\n        if (node.type === \"Identifier\") {\n            return false;\n        }\n        while (!n.Node.check(pp.value)) {\n            pp = pp.parentPath;\n            if (!pp) {\n                return false;\n            }\n        }\n        var parent = pp.value;\n        switch (node.type) {\n            case \"UnaryExpression\":\n            case \"SpreadElement\":\n            case \"SpreadProperty\":\n                return parent.type === \"MemberExpression\"\n                    && this.name === \"object\"\n                    && parent.object === node;\n            case \"BinaryExpression\":\n            case \"LogicalExpression\":\n                switch (parent.type) {\n                    case \"CallExpression\":\n                        return this.name === \"callee\"\n                            && parent.callee === node;\n                    case \"UnaryExpression\":\n                    case \"SpreadElement\":\n                    case \"SpreadProperty\":\n                        return true;\n                    case \"MemberExpression\":\n                        return this.name === \"object\"\n                            && parent.object === node;\n                    case \"BinaryExpression\":\n                    case \"LogicalExpression\":\n                        var po = parent.operator;\n                        var pp = PRECEDENCE[po];\n                        var no = node.operator;\n                        var np = PRECEDENCE[no];\n                        if (pp > np) {\n                            return true;\n                        }\n                        if (pp === np && this.name === \"right\") {\n                            if (parent.right !== node) {\n                                throw new Error(\"Nodes must be equal\");\n                            }\n                            return true;\n                        }\n                    default:\n                        return false;\n                }\n            case \"SequenceExpression\":\n                switch (parent.type) {\n                    case \"ForStatement\":\n                        // Although parentheses wouldn't hurt around sequence\n                        // expressions in the head of for loops, traditional style\n                        // dictates that e.g. i++, j++ should not be wrapped with\n                        // parentheses.\n                        return false;\n                    case \"ExpressionStatement\":\n                        return this.name !== \"expression\";\n                    default:\n                        // Otherwise err on the side of overparenthesization, adding\n                        // explicit exceptions above if this proves overzealous.\n                        return true;\n                }\n            case \"YieldExpression\":\n                switch (parent.type) {\n                    case \"BinaryExpression\":\n                    case \"LogicalExpression\":\n                    case \"UnaryExpression\":\n                    case \"SpreadElement\":\n                    case \"SpreadProperty\":\n                    case \"CallExpression\":\n                    case \"MemberExpression\":\n                    case \"NewExpression\":\n                    case \"ConditionalExpression\":\n                    case \"YieldExpression\":\n                        return true;\n                    default:\n                        return false;\n                }\n            case \"Literal\":\n                return parent.type === \"MemberExpression\"\n                    && isNumber.check(node.value)\n                    && this.name === \"object\"\n                    && parent.object === node;\n            case \"AssignmentExpression\":\n            case \"ConditionalExpression\":\n                switch (parent.type) {\n                    case \"UnaryExpression\":\n                    case \"SpreadElement\":\n                    case \"SpreadProperty\":\n                    case \"BinaryExpression\":\n                    case \"LogicalExpression\":\n                        return true;\n                    case \"CallExpression\":\n                        return this.name === \"callee\"\n                            && parent.callee === node;\n                    case \"ConditionalExpression\":\n                        return this.name === \"test\"\n                            && parent.test === node;\n                    case \"MemberExpression\":\n                        return this.name === \"object\"\n                            && parent.object === node;\n                    default:\n                        return false;\n                }\n            default:\n                if (parent.type === \"NewExpression\" &&\n                    this.name === \"callee\" &&\n                    parent.callee === node) {\n                    return containsCallExpression(node);\n                }\n        }\n        if (assumeExpressionContext !== true &&\n            !this.canBeFirstInStatement() &&\n            this.firstInStatement())\n            return true;\n        return false;\n    };\n    function isBinary(node) {\n        return n.BinaryExpression.check(node)\n            || n.LogicalExpression.check(node);\n    }\n    // @ts-ignore 'isUnaryLike' is declared but its value is never read. [6133]\n    function isUnaryLike(node) {\n        return n.UnaryExpression.check(node)\n            // I considered making SpreadElement and SpreadProperty subtypes\n            // of UnaryExpression, but they're not really Expression nodes.\n            || (n.SpreadElement && n.SpreadElement.check(node))\n            || (n.SpreadProperty && n.SpreadProperty.check(node));\n    }\n    var PRECEDENCE = {};\n    [[\"||\"],\n        [\"&&\"],\n        [\"|\"],\n        [\"^\"],\n        [\"&\"],\n        [\"==\", \"===\", \"!=\", \"!==\"],\n        [\"<\", \">\", \"<=\", \">=\", \"in\", \"instanceof\"],\n        [\">>\", \"<<\", \">>>\"],\n        [\"+\", \"-\"],\n        [\"*\", \"/\", \"%\"]\n    ].forEach(function (tier, i) {\n        tier.forEach(function (op) {\n            PRECEDENCE[op] = i;\n        });\n    });\n    function containsCallExpression(node) {\n        if (n.CallExpression.check(node)) {\n            return true;\n        }\n        if (isArray.check(node)) {\n            return node.some(containsCallExpression);\n        }\n        if (n.Node.check(node)) {\n            return types.someField(node, function (_name, child) {\n                return containsCallExpression(child);\n            });\n        }\n        return false;\n    }\n    NPp.canBeFirstInStatement = function () {\n        var node = this.node;\n        return !n.FunctionExpression.check(node)\n            && !n.ObjectExpression.check(node);\n    };\n    NPp.firstInStatement = function () {\n        return firstInStatement(this);\n    };\n    function firstInStatement(path) {\n        for (var node, parent; path.parent; path = path.parent) {\n            node = path.node;\n            parent = path.parent.node;\n            if (n.BlockStatement.check(parent) &&\n                path.parent.name === \"body\" &&\n                path.name === 0) {\n                if (parent.body[0] !== node) {\n                    throw new Error(\"Nodes must be equal\");\n                }\n                return true;\n            }\n            if (n.ExpressionStatement.check(parent) &&\n                path.name === \"expression\") {\n                if (parent.expression !== node) {\n                    throw new Error(\"Nodes must be equal\");\n                }\n                return true;\n            }\n            if (n.SequenceExpression.check(parent) &&\n                path.parent.name === \"expressions\" &&\n                path.name === 0) {\n                if (parent.expressions[0] !== node) {\n                    throw new Error(\"Nodes must be equal\");\n                }\n                continue;\n            }\n            if (n.CallExpression.check(parent) &&\n                path.name === \"callee\") {\n                if (parent.callee !== node) {\n                    throw new Error(\"Nodes must be equal\");\n                }\n                continue;\n            }\n            if (n.MemberExpression.check(parent) &&\n                path.name === \"object\") {\n                if (parent.object !== node) {\n                    throw new Error(\"Nodes must be equal\");\n                }\n                continue;\n            }\n            if (n.ConditionalExpression.check(parent) &&\n                path.name === \"test\") {\n                if (parent.test !== node) {\n                    throw new Error(\"Nodes must be equal\");\n                }\n                continue;\n            }\n            if (isBinary(parent) &&\n                path.name === \"left\") {\n                if (parent.left !== node) {\n                    throw new Error(\"Nodes must be equal\");\n                }\n                continue;\n            }\n            if (n.UnaryExpression.check(parent) &&\n                !parent.prefix &&\n                path.name === \"argument\") {\n                if (parent.argument !== node) {\n                    throw new Error(\"Nodes must be equal\");\n                }\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Pruning certain nodes will result in empty or incomplete nodes, here we clean those nodes up.\n     */\n    function cleanUpNodesAfterPrune(remainingNodePath) {\n        if (n.VariableDeclaration.check(remainingNodePath.node)) {\n            var declarations = remainingNodePath.get('declarations').value;\n            if (!declarations || declarations.length === 0) {\n                return remainingNodePath.prune();\n            }\n        }\n        else if (n.ExpressionStatement.check(remainingNodePath.node)) {\n            if (!remainingNodePath.get('expression').value) {\n                return remainingNodePath.prune();\n            }\n        }\n        else if (n.IfStatement.check(remainingNodePath.node)) {\n            cleanUpIfStatementAfterPrune(remainingNodePath);\n        }\n        return remainingNodePath;\n    }\n    function cleanUpIfStatementAfterPrune(ifStatement) {\n        var testExpression = ifStatement.get('test').value;\n        var alternate = ifStatement.get('alternate').value;\n        var consequent = ifStatement.get('consequent').value;\n        if (!consequent && !alternate) {\n            var testExpressionStatement = b.expressionStatement(testExpression);\n            ifStatement.replace(testExpressionStatement);\n        }\n        else if (!consequent && alternate) {\n            var negatedTestExpression = b.unaryExpression('!', testExpression, true);\n            if (n.UnaryExpression.check(testExpression) && testExpression.operator === '!') {\n                negatedTestExpression = testExpression.argument;\n            }\n            ifStatement.get(\"test\").replace(negatedTestExpression);\n            ifStatement.get(\"consequent\").replace(alternate);\n            ifStatement.get(\"alternate\").replace();\n        }\n    }\n    return NodePath;\n}\nexports.default = nodePathPlugin;\nmodule.exports = exports[\"default\"];\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/lib/node-path.js?");

/***/ }),

/***/ "../../node_modules/ast-types/lib/path-visitor.js":
/*!***************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/lib/path-visitor.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = __importDefault(__webpack_require__(/*! ./types */ \"../../node_modules/ast-types/lib/types.js\"));\nvar node_path_1 = __importDefault(__webpack_require__(/*! ./node-path */ \"../../node_modules/ast-types/lib/node-path.js\"));\nvar hasOwn = Object.prototype.hasOwnProperty;\nfunction pathVisitorPlugin(fork) {\n    var types = fork.use(types_1.default);\n    var NodePath = fork.use(node_path_1.default);\n    var isArray = types.builtInTypes.array;\n    var isObject = types.builtInTypes.object;\n    var isFunction = types.builtInTypes.function;\n    var undefined;\n    var PathVisitor = function PathVisitor() {\n        if (!(this instanceof PathVisitor)) {\n            throw new Error(\"PathVisitor constructor cannot be invoked without 'new'\");\n        }\n        // Permanent state.\n        this._reusableContextStack = [];\n        this._methodNameTable = computeMethodNameTable(this);\n        this._shouldVisitComments =\n            hasOwn.call(this._methodNameTable, \"Block\") ||\n                hasOwn.call(this._methodNameTable, \"Line\");\n        this.Context = makeContextConstructor(this);\n        // State reset every time PathVisitor.prototype.visit is called.\n        this._visiting = false;\n        this._changeReported = false;\n    };\n    function computeMethodNameTable(visitor) {\n        var typeNames = Object.create(null);\n        for (var methodName in visitor) {\n            if (/^visit[A-Z]/.test(methodName)) {\n                typeNames[methodName.slice(\"visit\".length)] = true;\n            }\n        }\n        var supertypeTable = types.computeSupertypeLookupTable(typeNames);\n        var methodNameTable = Object.create(null);\n        var typeNameKeys = Object.keys(supertypeTable);\n        var typeNameCount = typeNameKeys.length;\n        for (var i = 0; i < typeNameCount; ++i) {\n            var typeName = typeNameKeys[i];\n            methodName = \"visit\" + supertypeTable[typeName];\n            if (isFunction.check(visitor[methodName])) {\n                methodNameTable[typeName] = methodName;\n            }\n        }\n        return methodNameTable;\n    }\n    PathVisitor.fromMethodsObject = function fromMethodsObject(methods) {\n        if (methods instanceof PathVisitor) {\n            return methods;\n        }\n        if (!isObject.check(methods)) {\n            // An empty visitor?\n            return new PathVisitor;\n        }\n        var Visitor = function Visitor() {\n            if (!(this instanceof Visitor)) {\n                throw new Error(\"Visitor constructor cannot be invoked without 'new'\");\n            }\n            PathVisitor.call(this);\n        };\n        var Vp = Visitor.prototype = Object.create(PVp);\n        Vp.constructor = Visitor;\n        extend(Vp, methods);\n        extend(Visitor, PathVisitor);\n        isFunction.assert(Visitor.fromMethodsObject);\n        isFunction.assert(Visitor.visit);\n        return new Visitor;\n    };\n    function extend(target, source) {\n        for (var property in source) {\n            if (hasOwn.call(source, property)) {\n                target[property] = source[property];\n            }\n        }\n        return target;\n    }\n    PathVisitor.visit = function visit(node, methods) {\n        return PathVisitor.fromMethodsObject(methods).visit(node);\n    };\n    var PVp = PathVisitor.prototype;\n    PVp.visit = function () {\n        if (this._visiting) {\n            throw new Error(\"Recursively calling visitor.visit(path) resets visitor state. \" +\n                \"Try this.visit(path) or this.traverse(path) instead.\");\n        }\n        // Private state that needs to be reset before every traversal.\n        this._visiting = true;\n        this._changeReported = false;\n        this._abortRequested = false;\n        var argc = arguments.length;\n        var args = new Array(argc);\n        for (var i = 0; i < argc; ++i) {\n            args[i] = arguments[i];\n        }\n        if (!(args[0] instanceof NodePath)) {\n            args[0] = new NodePath({ root: args[0] }).get(\"root\");\n        }\n        // Called with the same arguments as .visit.\n        this.reset.apply(this, args);\n        var didNotThrow;\n        try {\n            var root = this.visitWithoutReset(args[0]);\n            didNotThrow = true;\n        }\n        finally {\n            this._visiting = false;\n            if (!didNotThrow && this._abortRequested) {\n                // If this.visitWithoutReset threw an exception and\n                // this._abortRequested was set to true, return the root of\n                // the AST instead of letting the exception propagate, so that\n                // client code does not have to provide a try-catch block to\n                // intercept the AbortRequest exception.  Other kinds of\n                // exceptions will propagate without being intercepted and\n                // rethrown by a catch block, so their stacks will accurately\n                // reflect the original throwing context.\n                return args[0].value;\n            }\n        }\n        return root;\n    };\n    PVp.AbortRequest = function AbortRequest() { };\n    PVp.abort = function () {\n        var visitor = this;\n        visitor._abortRequested = true;\n        var request = new visitor.AbortRequest();\n        // If you decide to catch this exception and stop it from propagating,\n        // make sure to call its cancel method to avoid silencing other\n        // exceptions that might be thrown later in the traversal.\n        request.cancel = function () {\n            visitor._abortRequested = false;\n        };\n        throw request;\n    };\n    PVp.reset = function (_path /*, additional arguments */) {\n        // Empty stub; may be reassigned or overridden by subclasses.\n    };\n    PVp.visitWithoutReset = function (path) {\n        if (this instanceof this.Context) {\n            // Since this.Context.prototype === this, there's a chance we\n            // might accidentally call context.visitWithoutReset. If that\n            // happens, re-invoke the method against context.visitor.\n            return this.visitor.visitWithoutReset(path);\n        }\n        if (!(path instanceof NodePath)) {\n            throw new Error(\"\");\n        }\n        var value = path.value;\n        var methodName = value &&\n            typeof value === \"object\" &&\n            typeof value.type === \"string\" &&\n            this._methodNameTable[value.type];\n        if (methodName) {\n            var context = this.acquireContext(path);\n            try {\n                return context.invokeVisitorMethod(methodName);\n            }\n            finally {\n                this.releaseContext(context);\n            }\n        }\n        else {\n            // If there was no visitor method to call, visit the children of\n            // this node generically.\n            return visitChildren(path, this);\n        }\n    };\n    function visitChildren(path, visitor) {\n        if (!(path instanceof NodePath)) {\n            throw new Error(\"\");\n        }\n        if (!(visitor instanceof PathVisitor)) {\n            throw new Error(\"\");\n        }\n        var value = path.value;\n        if (isArray.check(value)) {\n            path.each(visitor.visitWithoutReset, visitor);\n        }\n        else if (!isObject.check(value)) {\n            // No children to visit.\n        }\n        else {\n            var childNames = types.getFieldNames(value);\n            // The .comments field of the Node type is hidden, so we only\n            // visit it if the visitor defines visitBlock or visitLine, and\n            // value.comments is defined.\n            if (visitor._shouldVisitComments &&\n                value.comments &&\n                childNames.indexOf(\"comments\") < 0) {\n                childNames.push(\"comments\");\n            }\n            var childCount = childNames.length;\n            var childPaths = [];\n            for (var i = 0; i < childCount; ++i) {\n                var childName = childNames[i];\n                if (!hasOwn.call(value, childName)) {\n                    value[childName] = types.getFieldValue(value, childName);\n                }\n                childPaths.push(path.get(childName));\n            }\n            for (var i = 0; i < childCount; ++i) {\n                visitor.visitWithoutReset(childPaths[i]);\n            }\n        }\n        return path.value;\n    }\n    PVp.acquireContext = function (path) {\n        if (this._reusableContextStack.length === 0) {\n            return new this.Context(path);\n        }\n        return this._reusableContextStack.pop().reset(path);\n    };\n    PVp.releaseContext = function (context) {\n        if (!(context instanceof this.Context)) {\n            throw new Error(\"\");\n        }\n        this._reusableContextStack.push(context);\n        context.currentPath = null;\n    };\n    PVp.reportChanged = function () {\n        this._changeReported = true;\n    };\n    PVp.wasChangeReported = function () {\n        return this._changeReported;\n    };\n    function makeContextConstructor(visitor) {\n        function Context(path) {\n            if (!(this instanceof Context)) {\n                throw new Error(\"\");\n            }\n            if (!(this instanceof PathVisitor)) {\n                throw new Error(\"\");\n            }\n            if (!(path instanceof NodePath)) {\n                throw new Error(\"\");\n            }\n            Object.defineProperty(this, \"visitor\", {\n                value: visitor,\n                writable: false,\n                enumerable: true,\n                configurable: false\n            });\n            this.currentPath = path;\n            this.needToCallTraverse = true;\n            Object.seal(this);\n        }\n        if (!(visitor instanceof PathVisitor)) {\n            throw new Error(\"\");\n        }\n        // Note that the visitor object is the prototype of Context.prototype,\n        // so all visitor methods are inherited by context objects.\n        var Cp = Context.prototype = Object.create(visitor);\n        Cp.constructor = Context;\n        extend(Cp, sharedContextProtoMethods);\n        return Context;\n    }\n    // Every PathVisitor has a different this.Context constructor and\n    // this.Context.prototype object, but those prototypes can all use the\n    // same reset, invokeVisitorMethod, and traverse function objects.\n    var sharedContextProtoMethods = Object.create(null);\n    sharedContextProtoMethods.reset =\n        function reset(path) {\n            if (!(this instanceof this.Context)) {\n                throw new Error(\"\");\n            }\n            if (!(path instanceof NodePath)) {\n                throw new Error(\"\");\n            }\n            this.currentPath = path;\n            this.needToCallTraverse = true;\n            return this;\n        };\n    sharedContextProtoMethods.invokeVisitorMethod =\n        function invokeVisitorMethod(methodName) {\n            if (!(this instanceof this.Context)) {\n                throw new Error(\"\");\n            }\n            if (!(this.currentPath instanceof NodePath)) {\n                throw new Error(\"\");\n            }\n            var result = this.visitor[methodName].call(this, this.currentPath);\n            if (result === false) {\n                // Visitor methods return false to indicate that they have handled\n                // their own traversal needs, and we should not complain if\n                // this.needToCallTraverse is still true.\n                this.needToCallTraverse = false;\n            }\n            else if (result !== undefined) {\n                // Any other non-undefined value returned from the visitor method\n                // is interpreted as a replacement value.\n                this.currentPath = this.currentPath.replace(result)[0];\n                if (this.needToCallTraverse) {\n                    // If this.traverse still hasn't been called, visit the\n                    // children of the replacement node.\n                    this.traverse(this.currentPath);\n                }\n            }\n            if (this.needToCallTraverse !== false) {\n                throw new Error(\"Must either call this.traverse or return false in \" + methodName);\n            }\n            var path = this.currentPath;\n            return path && path.value;\n        };\n    sharedContextProtoMethods.traverse =\n        function traverse(path, newVisitor) {\n            if (!(this instanceof this.Context)) {\n                throw new Error(\"\");\n            }\n            if (!(path instanceof NodePath)) {\n                throw new Error(\"\");\n            }\n            if (!(this.currentPath instanceof NodePath)) {\n                throw new Error(\"\");\n            }\n            this.needToCallTraverse = false;\n            return visitChildren(path, PathVisitor.fromMethodsObject(newVisitor || this.visitor));\n        };\n    sharedContextProtoMethods.visit =\n        function visit(path, newVisitor) {\n            if (!(this instanceof this.Context)) {\n                throw new Error(\"\");\n            }\n            if (!(path instanceof NodePath)) {\n                throw new Error(\"\");\n            }\n            if (!(this.currentPath instanceof NodePath)) {\n                throw new Error(\"\");\n            }\n            this.needToCallTraverse = false;\n            return PathVisitor.fromMethodsObject(newVisitor || this.visitor).visitWithoutReset(path);\n        };\n    sharedContextProtoMethods.reportChanged = function reportChanged() {\n        this.visitor.reportChanged();\n    };\n    sharedContextProtoMethods.abort = function abort() {\n        this.needToCallTraverse = false;\n        this.visitor.abort();\n    };\n    return PathVisitor;\n}\nexports.default = pathVisitorPlugin;\nmodule.exports = exports[\"default\"];\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/lib/path-visitor.js?");

/***/ }),

/***/ "../../node_modules/ast-types/lib/path.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/lib/path.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = __importDefault(__webpack_require__(/*! ./types */ \"../../node_modules/ast-types/lib/types.js\"));\nvar Op = Object.prototype;\nvar hasOwn = Op.hasOwnProperty;\nfunction pathPlugin(fork) {\n    var types = fork.use(types_1.default);\n    var isArray = types.builtInTypes.array;\n    var isNumber = types.builtInTypes.number;\n    var Path = function Path(value, parentPath, name) {\n        if (!(this instanceof Path)) {\n            throw new Error(\"Path constructor cannot be invoked without 'new'\");\n        }\n        if (parentPath) {\n            if (!(parentPath instanceof Path)) {\n                throw new Error(\"\");\n            }\n        }\n        else {\n            parentPath = null;\n            name = null;\n        }\n        // The value encapsulated by this Path, generally equal to\n        // parentPath.value[name] if we have a parentPath.\n        this.value = value;\n        // The immediate parent Path of this Path.\n        this.parentPath = parentPath;\n        // The name of the property of parentPath.value through which this\n        // Path's value was reached.\n        this.name = name;\n        // Calling path.get(\"child\") multiple times always returns the same\n        // child Path object, for both performance and consistency reasons.\n        this.__childCache = null;\n    };\n    var Pp = Path.prototype;\n    function getChildCache(path) {\n        // Lazily create the child cache. This also cheapens cache\n        // invalidation, since you can just reset path.__childCache to null.\n        return path.__childCache || (path.__childCache = Object.create(null));\n    }\n    function getChildPath(path, name) {\n        var cache = getChildCache(path);\n        var actualChildValue = path.getValueProperty(name);\n        var childPath = cache[name];\n        if (!hasOwn.call(cache, name) ||\n            // Ensure consistency between cache and reality.\n            childPath.value !== actualChildValue) {\n            childPath = cache[name] = new path.constructor(actualChildValue, path, name);\n        }\n        return childPath;\n    }\n    // This method is designed to be overridden by subclasses that need to\n    // handle missing properties, etc.\n    Pp.getValueProperty = function getValueProperty(name) {\n        return this.value[name];\n    };\n    Pp.get = function get() {\n        var names = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            names[_i] = arguments[_i];\n        }\n        var path = this;\n        var count = names.length;\n        for (var i = 0; i < count; ++i) {\n            path = getChildPath(path, names[i]);\n        }\n        return path;\n    };\n    Pp.each = function each(callback, context) {\n        var childPaths = [];\n        var len = this.value.length;\n        var i = 0;\n        // Collect all the original child paths before invoking the callback.\n        for (var i = 0; i < len; ++i) {\n            if (hasOwn.call(this.value, i)) {\n                childPaths[i] = this.get(i);\n            }\n        }\n        // Invoke the callback on just the original child paths, regardless of\n        // any modifications made to the array by the callback. I chose these\n        // semantics over cleverly invoking the callback on new elements because\n        // this way is much easier to reason about.\n        context = context || this;\n        for (i = 0; i < len; ++i) {\n            if (hasOwn.call(childPaths, i)) {\n                callback.call(context, childPaths[i]);\n            }\n        }\n    };\n    Pp.map = function map(callback, context) {\n        var result = [];\n        this.each(function (childPath) {\n            result.push(callback.call(this, childPath));\n        }, context);\n        return result;\n    };\n    Pp.filter = function filter(callback, context) {\n        var result = [];\n        this.each(function (childPath) {\n            if (callback.call(this, childPath)) {\n                result.push(childPath);\n            }\n        }, context);\n        return result;\n    };\n    function emptyMoves() { }\n    function getMoves(path, offset, start, end) {\n        isArray.assert(path.value);\n        if (offset === 0) {\n            return emptyMoves;\n        }\n        var length = path.value.length;\n        if (length < 1) {\n            return emptyMoves;\n        }\n        var argc = arguments.length;\n        if (argc === 2) {\n            start = 0;\n            end = length;\n        }\n        else if (argc === 3) {\n            start = Math.max(start, 0);\n            end = length;\n        }\n        else {\n            start = Math.max(start, 0);\n            end = Math.min(end, length);\n        }\n        isNumber.assert(start);\n        isNumber.assert(end);\n        var moves = Object.create(null);\n        var cache = getChildCache(path);\n        for (var i = start; i < end; ++i) {\n            if (hasOwn.call(path.value, i)) {\n                var childPath = path.get(i);\n                if (childPath.name !== i) {\n                    throw new Error(\"\");\n                }\n                var newIndex = i + offset;\n                childPath.name = newIndex;\n                moves[newIndex] = childPath;\n                delete cache[i];\n            }\n        }\n        delete cache.length;\n        return function () {\n            for (var newIndex in moves) {\n                var childPath = moves[newIndex];\n                if (childPath.name !== +newIndex) {\n                    throw new Error(\"\");\n                }\n                cache[newIndex] = childPath;\n                path.value[newIndex] = childPath.value;\n            }\n        };\n    }\n    Pp.shift = function shift() {\n        var move = getMoves(this, -1);\n        var result = this.value.shift();\n        move();\n        return result;\n    };\n    Pp.unshift = function unshift() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var move = getMoves(this, args.length);\n        var result = this.value.unshift.apply(this.value, args);\n        move();\n        return result;\n    };\n    Pp.push = function push() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        isArray.assert(this.value);\n        delete getChildCache(this).length;\n        return this.value.push.apply(this.value, args);\n    };\n    Pp.pop = function pop() {\n        isArray.assert(this.value);\n        var cache = getChildCache(this);\n        delete cache[this.value.length - 1];\n        delete cache.length;\n        return this.value.pop();\n    };\n    Pp.insertAt = function insertAt(index) {\n        var argc = arguments.length;\n        var move = getMoves(this, argc - 1, index);\n        if (move === emptyMoves && argc <= 1) {\n            return this;\n        }\n        index = Math.max(index, 0);\n        for (var i = 1; i < argc; ++i) {\n            this.value[index + i - 1] = arguments[i];\n        }\n        move();\n        return this;\n    };\n    Pp.insertBefore = function insertBefore() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var pp = this.parentPath;\n        var argc = args.length;\n        var insertAtArgs = [this.name];\n        for (var i = 0; i < argc; ++i) {\n            insertAtArgs.push(args[i]);\n        }\n        return pp.insertAt.apply(pp, insertAtArgs);\n    };\n    Pp.insertAfter = function insertAfter() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var pp = this.parentPath;\n        var argc = args.length;\n        var insertAtArgs = [this.name + 1];\n        for (var i = 0; i < argc; ++i) {\n            insertAtArgs.push(args[i]);\n        }\n        return pp.insertAt.apply(pp, insertAtArgs);\n    };\n    function repairRelationshipWithParent(path) {\n        if (!(path instanceof Path)) {\n            throw new Error(\"\");\n        }\n        var pp = path.parentPath;\n        if (!pp) {\n            // Orphan paths have no relationship to repair.\n            return path;\n        }\n        var parentValue = pp.value;\n        var parentCache = getChildCache(pp);\n        // Make sure parentCache[path.name] is populated.\n        if (parentValue[path.name] === path.value) {\n            parentCache[path.name] = path;\n        }\n        else if (isArray.check(parentValue)) {\n            // Something caused path.name to become out of date, so attempt to\n            // recover by searching for path.value in parentValue.\n            var i = parentValue.indexOf(path.value);\n            if (i >= 0) {\n                parentCache[path.name = i] = path;\n            }\n        }\n        else {\n            // If path.value disagrees with parentValue[path.name], and\n            // path.name is not an array index, let path.value become the new\n            // parentValue[path.name] and update parentCache accordingly.\n            parentValue[path.name] = path.value;\n            parentCache[path.name] = path;\n        }\n        if (parentValue[path.name] !== path.value) {\n            throw new Error(\"\");\n        }\n        if (path.parentPath.get(path.name) !== path) {\n            throw new Error(\"\");\n        }\n        return path;\n    }\n    Pp.replace = function replace(replacement) {\n        var results = [];\n        var parentValue = this.parentPath.value;\n        var parentCache = getChildCache(this.parentPath);\n        var count = arguments.length;\n        repairRelationshipWithParent(this);\n        if (isArray.check(parentValue)) {\n            var originalLength = parentValue.length;\n            var move = getMoves(this.parentPath, count - 1, this.name + 1);\n            var spliceArgs = [this.name, 1];\n            for (var i = 0; i < count; ++i) {\n                spliceArgs.push(arguments[i]);\n            }\n            var splicedOut = parentValue.splice.apply(parentValue, spliceArgs);\n            if (splicedOut[0] !== this.value) {\n                throw new Error(\"\");\n            }\n            if (parentValue.length !== (originalLength - 1 + count)) {\n                throw new Error(\"\");\n            }\n            move();\n            if (count === 0) {\n                delete this.value;\n                delete parentCache[this.name];\n                this.__childCache = null;\n            }\n            else {\n                if (parentValue[this.name] !== replacement) {\n                    throw new Error(\"\");\n                }\n                if (this.value !== replacement) {\n                    this.value = replacement;\n                    this.__childCache = null;\n                }\n                for (i = 0; i < count; ++i) {\n                    results.push(this.parentPath.get(this.name + i));\n                }\n                if (results[0] !== this) {\n                    throw new Error(\"\");\n                }\n            }\n        }\n        else if (count === 1) {\n            if (this.value !== replacement) {\n                this.__childCache = null;\n            }\n            this.value = parentValue[this.name] = replacement;\n            results.push(this);\n        }\n        else if (count === 0) {\n            delete parentValue[this.name];\n            delete this.value;\n            this.__childCache = null;\n            // Leave this path cached as parentCache[this.name], even though\n            // it no longer has a value defined.\n        }\n        else {\n            throw new Error(\"Could not replace path\");\n        }\n        return results;\n    };\n    return Path;\n}\nexports.default = pathPlugin;\nmodule.exports = exports[\"default\"];\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/lib/path.js?");

/***/ }),

/***/ "../../node_modules/ast-types/lib/scope.js":
/*!********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/lib/scope.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = __importDefault(__webpack_require__(/*! ./types */ \"../../node_modules/ast-types/lib/types.js\"));\nvar hasOwn = Object.prototype.hasOwnProperty;\nfunction scopePlugin(fork) {\n    var types = fork.use(types_1.default);\n    var Type = types.Type;\n    var namedTypes = types.namedTypes;\n    var Node = namedTypes.Node;\n    var Expression = namedTypes.Expression;\n    var isArray = types.builtInTypes.array;\n    var b = types.builders;\n    var Scope = function Scope(path, parentScope) {\n        if (!(this instanceof Scope)) {\n            throw new Error(\"Scope constructor cannot be invoked without 'new'\");\n        }\n        ScopeType.assert(path.value);\n        var depth;\n        if (parentScope) {\n            if (!(parentScope instanceof Scope)) {\n                throw new Error(\"\");\n            }\n            depth = parentScope.depth + 1;\n        }\n        else {\n            parentScope = null;\n            depth = 0;\n        }\n        Object.defineProperties(this, {\n            path: { value: path },\n            node: { value: path.value },\n            isGlobal: { value: !parentScope, enumerable: true },\n            depth: { value: depth },\n            parent: { value: parentScope },\n            bindings: { value: {} },\n            types: { value: {} },\n        });\n    };\n    var scopeTypes = [\n        // Program nodes introduce global scopes.\n        namedTypes.Program,\n        // Function is the supertype of FunctionExpression,\n        // FunctionDeclaration, ArrowExpression, etc.\n        namedTypes.Function,\n        // In case you didn't know, the caught parameter shadows any variable\n        // of the same name in an outer scope.\n        namedTypes.CatchClause\n    ];\n    var ScopeType = Type.or.apply(Type, scopeTypes);\n    Scope.isEstablishedBy = function (node) {\n        return ScopeType.check(node);\n    };\n    var Sp = Scope.prototype;\n    // Will be overridden after an instance lazily calls scanScope.\n    Sp.didScan = false;\n    Sp.declares = function (name) {\n        this.scan();\n        return hasOwn.call(this.bindings, name);\n    };\n    Sp.declaresType = function (name) {\n        this.scan();\n        return hasOwn.call(this.types, name);\n    };\n    Sp.declareTemporary = function (prefix) {\n        if (prefix) {\n            if (!/^[a-z$_]/i.test(prefix)) {\n                throw new Error(\"\");\n            }\n        }\n        else {\n            prefix = \"t$\";\n        }\n        // Include this.depth in the name to make sure the name does not\n        // collide with any variables in nested/enclosing scopes.\n        prefix += this.depth.toString(36) + \"$\";\n        this.scan();\n        var index = 0;\n        while (this.declares(prefix + index)) {\n            ++index;\n        }\n        var name = prefix + index;\n        return this.bindings[name] = types.builders.identifier(name);\n    };\n    Sp.injectTemporary = function (identifier, init) {\n        identifier || (identifier = this.declareTemporary());\n        var bodyPath = this.path.get(\"body\");\n        if (namedTypes.BlockStatement.check(bodyPath.value)) {\n            bodyPath = bodyPath.get(\"body\");\n        }\n        bodyPath.unshift(b.variableDeclaration(\"var\", [b.variableDeclarator(identifier, init || null)]));\n        return identifier;\n    };\n    Sp.scan = function (force) {\n        if (force || !this.didScan) {\n            for (var name in this.bindings) {\n                // Empty out this.bindings, just in cases.\n                delete this.bindings[name];\n            }\n            scanScope(this.path, this.bindings, this.types);\n            this.didScan = true;\n        }\n    };\n    Sp.getBindings = function () {\n        this.scan();\n        return this.bindings;\n    };\n    Sp.getTypes = function () {\n        this.scan();\n        return this.types;\n    };\n    function scanScope(path, bindings, scopeTypes) {\n        var node = path.value;\n        ScopeType.assert(node);\n        if (namedTypes.CatchClause.check(node)) {\n            // A catch clause establishes a new scope but the only variable\n            // bound in that scope is the catch parameter. Any other\n            // declarations create bindings in the outer scope.\n            addPattern(path.get(\"param\"), bindings);\n        }\n        else {\n            recursiveScanScope(path, bindings, scopeTypes);\n        }\n    }\n    function recursiveScanScope(path, bindings, scopeTypes) {\n        var node = path.value;\n        if (path.parent &&\n            namedTypes.FunctionExpression.check(path.parent.node) &&\n            path.parent.node.id) {\n            addPattern(path.parent.get(\"id\"), bindings);\n        }\n        if (!node) {\n            // None of the remaining cases matter if node is falsy.\n        }\n        else if (isArray.check(node)) {\n            path.each(function (childPath) {\n                recursiveScanChild(childPath, bindings, scopeTypes);\n            });\n        }\n        else if (namedTypes.Function.check(node)) {\n            path.get(\"params\").each(function (paramPath) {\n                addPattern(paramPath, bindings);\n            });\n            recursiveScanChild(path.get(\"body\"), bindings, scopeTypes);\n        }\n        else if ((namedTypes.TypeAlias && namedTypes.TypeAlias.check(node)) ||\n            (namedTypes.InterfaceDeclaration && namedTypes.InterfaceDeclaration.check(node)) ||\n            (namedTypes.TSTypeAliasDeclaration && namedTypes.TSTypeAliasDeclaration.check(node)) ||\n            (namedTypes.TSInterfaceDeclaration && namedTypes.TSInterfaceDeclaration.check(node))) {\n            addTypePattern(path.get(\"id\"), scopeTypes);\n        }\n        else if (namedTypes.VariableDeclarator.check(node)) {\n            addPattern(path.get(\"id\"), bindings);\n            recursiveScanChild(path.get(\"init\"), bindings, scopeTypes);\n        }\n        else if (node.type === \"ImportSpecifier\" ||\n            node.type === \"ImportNamespaceSpecifier\" ||\n            node.type === \"ImportDefaultSpecifier\") {\n            addPattern(\n            // Esprima used to use the .name field to refer to the local\n            // binding identifier for ImportSpecifier nodes, but .id for\n            // ImportNamespaceSpecifier and ImportDefaultSpecifier nodes.\n            // ESTree/Acorn/ESpree use .local for all three node types.\n            path.get(node.local ? \"local\" :\n                node.name ? \"name\" : \"id\"), bindings);\n        }\n        else if (Node.check(node) && !Expression.check(node)) {\n            types.eachField(node, function (name, child) {\n                var childPath = path.get(name);\n                if (!pathHasValue(childPath, child)) {\n                    throw new Error(\"\");\n                }\n                recursiveScanChild(childPath, bindings, scopeTypes);\n            });\n        }\n    }\n    function pathHasValue(path, value) {\n        if (path.value === value) {\n            return true;\n        }\n        // Empty arrays are probably produced by defaults.emptyArray, in which\n        // case is makes sense to regard them as equivalent, if not ===.\n        if (Array.isArray(path.value) &&\n            path.value.length === 0 &&\n            Array.isArray(value) &&\n            value.length === 0) {\n            return true;\n        }\n        return false;\n    }\n    function recursiveScanChild(path, bindings, scopeTypes) {\n        var node = path.value;\n        if (!node || Expression.check(node)) {\n            // Ignore falsy values and Expressions.\n        }\n        else if (namedTypes.FunctionDeclaration.check(node) &&\n            node.id !== null) {\n            addPattern(path.get(\"id\"), bindings);\n        }\n        else if (namedTypes.ClassDeclaration &&\n            namedTypes.ClassDeclaration.check(node)) {\n            addPattern(path.get(\"id\"), bindings);\n        }\n        else if (ScopeType.check(node)) {\n            if (namedTypes.CatchClause.check(node)) {\n                var catchParamName = node.param.name;\n                var hadBinding = hasOwn.call(bindings, catchParamName);\n                // Any declarations that occur inside the catch body that do\n                // not have the same name as the catch parameter should count\n                // as bindings in the outer scope.\n                recursiveScanScope(path.get(\"body\"), bindings, scopeTypes);\n                // If a new binding matching the catch parameter name was\n                // created while scanning the catch body, ignore it because it\n                // actually refers to the catch parameter and not the outer\n                // scope that we're currently scanning.\n                if (!hadBinding) {\n                    delete bindings[catchParamName];\n                }\n            }\n        }\n        else {\n            recursiveScanScope(path, bindings, scopeTypes);\n        }\n    }\n    function addPattern(patternPath, bindings) {\n        var pattern = patternPath.value;\n        namedTypes.Pattern.assert(pattern);\n        if (namedTypes.Identifier.check(pattern)) {\n            if (hasOwn.call(bindings, pattern.name)) {\n                bindings[pattern.name].push(patternPath);\n            }\n            else {\n                bindings[pattern.name] = [patternPath];\n            }\n        }\n        else if (namedTypes.AssignmentPattern &&\n            namedTypes.AssignmentPattern.check(pattern)) {\n            addPattern(patternPath.get('left'), bindings);\n        }\n        else if (namedTypes.ObjectPattern &&\n            namedTypes.ObjectPattern.check(pattern)) {\n            patternPath.get('properties').each(function (propertyPath) {\n                var property = propertyPath.value;\n                if (namedTypes.Pattern.check(property)) {\n                    addPattern(propertyPath, bindings);\n                }\n                else if (namedTypes.Property.check(property)) {\n                    addPattern(propertyPath.get('value'), bindings);\n                }\n                else if (namedTypes.SpreadProperty &&\n                    namedTypes.SpreadProperty.check(property)) {\n                    addPattern(propertyPath.get('argument'), bindings);\n                }\n            });\n        }\n        else if (namedTypes.ArrayPattern &&\n            namedTypes.ArrayPattern.check(pattern)) {\n            patternPath.get('elements').each(function (elementPath) {\n                var element = elementPath.value;\n                if (namedTypes.Pattern.check(element)) {\n                    addPattern(elementPath, bindings);\n                }\n                else if (namedTypes.SpreadElement &&\n                    namedTypes.SpreadElement.check(element)) {\n                    addPattern(elementPath.get(\"argument\"), bindings);\n                }\n            });\n        }\n        else if (namedTypes.PropertyPattern &&\n            namedTypes.PropertyPattern.check(pattern)) {\n            addPattern(patternPath.get('pattern'), bindings);\n        }\n        else if ((namedTypes.SpreadElementPattern &&\n            namedTypes.SpreadElementPattern.check(pattern)) ||\n            (namedTypes.SpreadPropertyPattern &&\n                namedTypes.SpreadPropertyPattern.check(pattern))) {\n            addPattern(patternPath.get('argument'), bindings);\n        }\n    }\n    function addTypePattern(patternPath, types) {\n        var pattern = patternPath.value;\n        namedTypes.Pattern.assert(pattern);\n        if (namedTypes.Identifier.check(pattern)) {\n            if (hasOwn.call(types, pattern.name)) {\n                types[pattern.name].push(patternPath);\n            }\n            else {\n                types[pattern.name] = [patternPath];\n            }\n        }\n    }\n    Sp.lookup = function (name) {\n        for (var scope = this; scope; scope = scope.parent)\n            if (scope.declares(name))\n                break;\n        return scope;\n    };\n    Sp.lookupType = function (name) {\n        for (var scope = this; scope; scope = scope.parent)\n            if (scope.declaresType(name))\n                break;\n        return scope;\n    };\n    Sp.getGlobalScope = function () {\n        var scope = this;\n        while (!scope.isGlobal)\n            scope = scope.parent;\n        return scope;\n    };\n    return Scope;\n}\nexports.default = scopePlugin;\nmodule.exports = exports[\"default\"];\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/lib/scope.js?");

/***/ }),

/***/ "../../node_modules/ast-types/lib/shared.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/lib/shared.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = __importDefault(__webpack_require__(/*! ./types */ \"../../node_modules/ast-types/lib/types.js\"));\nfunction default_1(fork) {\n    var types = fork.use(types_1.default);\n    var Type = types.Type;\n    var builtin = types.builtInTypes;\n    var isNumber = builtin.number;\n    // An example of constructing a new type with arbitrary constraints from\n    // an existing type.\n    function geq(than) {\n        return Type.from(function (value) { return isNumber.check(value) && value >= than; }, isNumber + \" >= \" + than);\n    }\n    ;\n    // Default value-returning functions that may optionally be passed as a\n    // third argument to Def.prototype.field.\n    var defaults = {\n        // Functions were used because (among other reasons) that's the most\n        // elegant way to allow for the emptyArray one always to give a new\n        // array instance.\n        \"null\": function () { return null; },\n        \"emptyArray\": function () { return []; },\n        \"false\": function () { return false; },\n        \"true\": function () { return true; },\n        \"undefined\": function () { },\n        \"use strict\": function () { return \"use strict\"; }\n    };\n    var naiveIsPrimitive = Type.or(builtin.string, builtin.number, builtin.boolean, builtin.null, builtin.undefined);\n    var isPrimitive = Type.from(function (value) {\n        if (value === null)\n            return true;\n        var type = typeof value;\n        if (type === \"object\" ||\n            type === \"function\") {\n            return false;\n        }\n        return true;\n    }, naiveIsPrimitive.toString());\n    return {\n        geq: geq,\n        defaults: defaults,\n        isPrimitive: isPrimitive,\n    };\n}\nexports.default = default_1;\nmodule.exports = exports[\"default\"];\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/lib/shared.js?");

/***/ }),

/***/ "../../node_modules/ast-types/lib/types.js":
/*!********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/lib/types.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Op = Object.prototype;\nvar objToStr = Op.toString;\nvar hasOwn = Op.hasOwnProperty;\nvar BaseType = /** @class */ (function () {\n    function BaseType() {\n    }\n    BaseType.prototype.assert = function (value, deep) {\n        if (!this.check(value, deep)) {\n            var str = shallowStringify(value);\n            throw new Error(str + \" does not match type \" + this);\n        }\n        return true;\n    };\n    BaseType.prototype.arrayOf = function () {\n        var elemType = this;\n        return new ArrayType(elemType);\n    };\n    return BaseType;\n}());\nvar ArrayType = /** @class */ (function (_super) {\n    __extends(ArrayType, _super);\n    function ArrayType(elemType) {\n        var _this = _super.call(this) || this;\n        _this.elemType = elemType;\n        _this.kind = \"ArrayType\";\n        return _this;\n    }\n    ArrayType.prototype.toString = function () {\n        return \"[\" + this.elemType + \"]\";\n    };\n    ArrayType.prototype.check = function (value, deep) {\n        var _this = this;\n        return Array.isArray(value) && value.every(function (elem) { return _this.elemType.check(elem, deep); });\n    };\n    return ArrayType;\n}(BaseType));\nvar IdentityType = /** @class */ (function (_super) {\n    __extends(IdentityType, _super);\n    function IdentityType(value) {\n        var _this = _super.call(this) || this;\n        _this.value = value;\n        _this.kind = \"IdentityType\";\n        return _this;\n    }\n    IdentityType.prototype.toString = function () {\n        return String(this.value);\n    };\n    IdentityType.prototype.check = function (value, deep) {\n        var result = value === this.value;\n        if (!result && typeof deep === \"function\") {\n            deep(this, value);\n        }\n        return result;\n    };\n    return IdentityType;\n}(BaseType));\nvar ObjectType = /** @class */ (function (_super) {\n    __extends(ObjectType, _super);\n    function ObjectType(fields) {\n        var _this = _super.call(this) || this;\n        _this.fields = fields;\n        _this.kind = \"ObjectType\";\n        return _this;\n    }\n    ObjectType.prototype.toString = function () {\n        return \"{ \" + this.fields.join(\", \") + \" }\";\n    };\n    ObjectType.prototype.check = function (value, deep) {\n        return (objToStr.call(value) === objToStr.call({}) &&\n            this.fields.every(function (field) {\n                return field.type.check(value[field.name], deep);\n            }));\n    };\n    return ObjectType;\n}(BaseType));\nvar OrType = /** @class */ (function (_super) {\n    __extends(OrType, _super);\n    function OrType(types) {\n        var _this = _super.call(this) || this;\n        _this.types = types;\n        _this.kind = \"OrType\";\n        return _this;\n    }\n    OrType.prototype.toString = function () {\n        return this.types.join(\" | \");\n    };\n    OrType.prototype.check = function (value, deep) {\n        return this.types.some(function (type) {\n            return type.check(value, deep);\n        });\n    };\n    return OrType;\n}(BaseType));\nvar PredicateType = /** @class */ (function (_super) {\n    __extends(PredicateType, _super);\n    function PredicateType(name, predicate) {\n        var _this = _super.call(this) || this;\n        _this.name = name;\n        _this.predicate = predicate;\n        _this.kind = \"PredicateType\";\n        return _this;\n    }\n    PredicateType.prototype.toString = function () {\n        return this.name;\n    };\n    PredicateType.prototype.check = function (value, deep) {\n        var result = this.predicate(value, deep);\n        if (!result && typeof deep === \"function\") {\n            deep(this, value);\n        }\n        return result;\n    };\n    return PredicateType;\n}(BaseType));\nvar Def = /** @class */ (function () {\n    function Def(type, typeName) {\n        this.type = type;\n        this.typeName = typeName;\n        this.baseNames = [];\n        this.ownFields = Object.create(null);\n        // Includes own typeName. Populated during finalization.\n        this.allSupertypes = Object.create(null);\n        // Linear inheritance hierarchy. Populated during finalization.\n        this.supertypeList = [];\n        // Includes inherited fields.\n        this.allFields = Object.create(null);\n        // Non-hidden keys of allFields.\n        this.fieldNames = [];\n        // This property will be overridden as true by individual Def instances\n        // when they are finalized.\n        this.finalized = false;\n        // False by default until .build(...) is called on an instance.\n        this.buildable = false;\n        this.buildParams = [];\n    }\n    Def.prototype.isSupertypeOf = function (that) {\n        if (that instanceof Def) {\n            if (this.finalized !== true ||\n                that.finalized !== true) {\n                throw new Error(\"\");\n            }\n            return hasOwn.call(that.allSupertypes, this.typeName);\n        }\n        else {\n            throw new Error(that + \" is not a Def\");\n        }\n    };\n    Def.prototype.checkAllFields = function (value, deep) {\n        var allFields = this.allFields;\n        if (this.finalized !== true) {\n            throw new Error(\"\" + this.typeName);\n        }\n        function checkFieldByName(name) {\n            var field = allFields[name];\n            var type = field.type;\n            var child = field.getValue(value);\n            return type.check(child, deep);\n        }\n        return value !== null &&\n            typeof value === \"object\" &&\n            Object.keys(allFields).every(checkFieldByName);\n    };\n    Def.prototype.bases = function () {\n        var supertypeNames = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            supertypeNames[_i] = arguments[_i];\n        }\n        var bases = this.baseNames;\n        if (this.finalized) {\n            if (supertypeNames.length !== bases.length) {\n                throw new Error(\"\");\n            }\n            for (var i = 0; i < supertypeNames.length; i++) {\n                if (supertypeNames[i] !== bases[i]) {\n                    throw new Error(\"\");\n                }\n            }\n            return this;\n        }\n        supertypeNames.forEach(function (baseName) {\n            // This indexOf lookup may be O(n), but the typical number of base\n            // names is very small, and indexOf is a native Array method.\n            if (bases.indexOf(baseName) < 0) {\n                bases.push(baseName);\n            }\n        });\n        return this; // For chaining.\n    };\n    return Def;\n}());\nexports.Def = Def;\nvar Field = /** @class */ (function () {\n    function Field(name, type, defaultFn, hidden) {\n        this.name = name;\n        this.type = type;\n        this.defaultFn = defaultFn;\n        this.hidden = !!hidden;\n    }\n    Field.prototype.toString = function () {\n        return JSON.stringify(this.name) + \": \" + this.type;\n    };\n    Field.prototype.getValue = function (obj) {\n        var value = obj[this.name];\n        if (typeof value !== \"undefined\") {\n            return value;\n        }\n        if (typeof this.defaultFn === \"function\") {\n            value = this.defaultFn.call(obj);\n        }\n        return value;\n    };\n    return Field;\n}());\nfunction shallowStringify(value) {\n    if (Array.isArray(value)) {\n        return \"[\" + value.map(shallowStringify).join(\", \") + \"]\";\n    }\n    if (value && typeof value === \"object\") {\n        return \"{ \" + Object.keys(value).map(function (key) {\n            return key + \": \" + value[key];\n        }).join(\", \") + \" }\";\n    }\n    return JSON.stringify(value);\n}\nfunction typesPlugin(_fork) {\n    var Type = {\n        or: function () {\n            var types = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                types[_i] = arguments[_i];\n            }\n            return new OrType(types.map(function (type) { return Type.from(type); }));\n        },\n        from: function (value, name) {\n            if (value instanceof ArrayType ||\n                value instanceof IdentityType ||\n                value instanceof ObjectType ||\n                value instanceof OrType ||\n                value instanceof PredicateType) {\n                return value;\n            }\n            // The Def type is used as a helper for constructing compound\n            // interface types for AST nodes.\n            if (value instanceof Def) {\n                return value.type;\n            }\n            // Support [ElemType] syntax.\n            if (isArray.check(value)) {\n                if (value.length !== 1) {\n                    throw new Error(\"only one element type is permitted for typed arrays\");\n                }\n                return new ArrayType(Type.from(value[0]));\n            }\n            // Support { someField: FieldType, ... } syntax.\n            if (isObject.check(value)) {\n                return new ObjectType(Object.keys(value).map(function (name) {\n                    return new Field(name, Type.from(value[name], name));\n                }));\n            }\n            if (typeof value === \"function\") {\n                var bicfIndex = builtInCtorFns.indexOf(value);\n                if (bicfIndex >= 0) {\n                    return builtInCtorTypes[bicfIndex];\n                }\n                if (typeof name !== \"string\") {\n                    throw new Error(\"missing name\");\n                }\n                return new PredicateType(name, value);\n            }\n            // As a last resort, toType returns a type that matches any value that\n            // is === from. This is primarily useful for literal values like\n            // toType(null), but it has the additional advantage of allowing\n            // toType to be a total function.\n            return new IdentityType(value);\n        },\n        // Define a type whose name is registered in a namespace (the defCache) so\n        // that future definitions will return the same type given the same name.\n        // In particular, this system allows for circular and forward definitions.\n        // The Def object d returned from Type.def may be used to configure the\n        // type d.type by calling methods such as d.bases, d.build, and d.field.\n        def: function (typeName) {\n            return hasOwn.call(defCache, typeName)\n                ? defCache[typeName]\n                : defCache[typeName] = new DefImpl(typeName);\n        },\n        hasDef: function (typeName) {\n            return hasOwn.call(defCache, typeName);\n        }\n    };\n    var builtInCtorFns = [];\n    var builtInCtorTypes = [];\n    var builtInTypes = {};\n    function defBuiltInType(example, name) {\n        var objStr = objToStr.call(example);\n        var type = new PredicateType(name, function (value) { return objToStr.call(value) === objStr; });\n        builtInTypes[name] = type;\n        if (example && typeof example.constructor === \"function\") {\n            builtInCtorFns.push(example.constructor);\n            builtInCtorTypes.push(type);\n        }\n        return type;\n    }\n    // These types check the underlying [[Class]] attribute of the given\n    // value, rather than using the problematic typeof operator. Note however\n    // that no subtyping is considered; so, for instance, isObject.check\n    // returns false for [], /./, new Date, and null.\n    var isString = defBuiltInType(\"truthy\", \"string\");\n    var isFunction = defBuiltInType(function () { }, \"function\");\n    var isArray = defBuiltInType([], \"array\");\n    var isObject = defBuiltInType({}, \"object\");\n    var isRegExp = defBuiltInType(/./, \"RegExp\");\n    var isDate = defBuiltInType(new Date, \"Date\");\n    var isNumber = defBuiltInType(3, \"number\");\n    var isBoolean = defBuiltInType(true, \"boolean\");\n    var isNull = defBuiltInType(null, \"null\");\n    var isUndefined = defBuiltInType(void 0, \"undefined\");\n    // In order to return the same Def instance every time Type.def is called\n    // with a particular name, those instances need to be stored in a cache.\n    var defCache = Object.create(null);\n    function defFromValue(value) {\n        if (value && typeof value === \"object\") {\n            var type = value.type;\n            if (typeof type === \"string\" &&\n                hasOwn.call(defCache, type)) {\n                var d = defCache[type];\n                if (d.finalized) {\n                    return d;\n                }\n            }\n        }\n        return null;\n    }\n    var DefImpl = /** @class */ (function (_super) {\n        __extends(DefImpl, _super);\n        function DefImpl(typeName) {\n            var _this = _super.call(this, new PredicateType(typeName, function (value, deep) { return _this.check(value, deep); }), typeName) || this;\n            return _this;\n        }\n        DefImpl.prototype.check = function (value, deep) {\n            if (this.finalized !== true) {\n                throw new Error(\"prematurely checking unfinalized type \" + this.typeName);\n            }\n            // A Def type can only match an object value.\n            if (value === null || typeof value !== \"object\") {\n                return false;\n            }\n            var vDef = defFromValue(value);\n            if (!vDef) {\n                // If we couldn't infer the Def associated with the given value,\n                // and we expected it to be a SourceLocation or a Position, it was\n                // probably just missing a \"type\" field (because Esprima does not\n                // assign a type property to such nodes). Be optimistic and let\n                // this.checkAllFields make the final decision.\n                if (this.typeName === \"SourceLocation\" ||\n                    this.typeName === \"Position\") {\n                    return this.checkAllFields(value, deep);\n                }\n                // Calling this.checkAllFields for any other type of node is both\n                // bad for performance and way too forgiving.\n                return false;\n            }\n            // If checking deeply and vDef === this, then we only need to call\n            // checkAllFields once. Calling checkAllFields is too strict when deep\n            // is false, because then we only care about this.isSupertypeOf(vDef).\n            if (deep && vDef === this) {\n                return this.checkAllFields(value, deep);\n            }\n            // In most cases we rely exclusively on isSupertypeOf to make O(1)\n            // subtyping determinations. This suffices in most situations outside\n            // of unit tests, since interface conformance is checked whenever new\n            // instances are created using builder functions.\n            if (!this.isSupertypeOf(vDef)) {\n                return false;\n            }\n            // The exception is when deep is true; then, we recursively check all\n            // fields.\n            if (!deep) {\n                return true;\n            }\n            // Use the more specific Def (vDef) to perform the deep check, but\n            // shallow-check fields defined by the less specific Def (this).\n            return vDef.checkAllFields(value, deep)\n                && this.checkAllFields(value, false);\n        };\n        DefImpl.prototype.build = function () {\n            var _this = this;\n            var buildParams = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                buildParams[_i] = arguments[_i];\n            }\n            // Calling Def.prototype.build multiple times has the effect of merely\n            // redefining this property.\n            this.buildParams = buildParams;\n            if (this.buildable) {\n                // If this Def is already buildable, update self.buildParams and\n                // continue using the old builder function.\n                return this;\n            }\n            // Every buildable type will have its \"type\" field filled in\n            // automatically. This includes types that are not subtypes of Node,\n            // like SourceLocation, but that seems harmless (TODO?).\n            this.field(\"type\", String, function () { return _this.typeName; });\n            // Override Dp.buildable for this Def instance.\n            this.buildable = true;\n            var addParam = function (built, param, arg, isArgAvailable) {\n                if (hasOwn.call(built, param))\n                    return;\n                var all = _this.allFields;\n                if (!hasOwn.call(all, param)) {\n                    throw new Error(\"\" + param);\n                }\n                var field = all[param];\n                var type = field.type;\n                var value;\n                if (isArgAvailable) {\n                    value = arg;\n                }\n                else if (field.defaultFn) {\n                    // Expose the partially-built object to the default\n                    // function as its `this` object.\n                    value = field.defaultFn.call(built);\n                }\n                else {\n                    var message = \"no value or default function given for field \" +\n                        JSON.stringify(param) + \" of \" + _this.typeName + \"(\" +\n                        _this.buildParams.map(function (name) {\n                            return all[name];\n                        }).join(\", \") + \")\";\n                    throw new Error(message);\n                }\n                if (!type.check(value)) {\n                    throw new Error(shallowStringify(value) +\n                        \" does not match field \" + field +\n                        \" of type \" + _this.typeName);\n                }\n                built[param] = value;\n            };\n            // Calling the builder function will construct an instance of the Def,\n            // with positional arguments mapped to the fields original passed to .build.\n            // If not enough arguments are provided, the default value for the remaining fields\n            // will be used.\n            var builder = function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var argc = args.length;\n                if (!_this.finalized) {\n                    throw new Error(\"attempting to instantiate unfinalized type \" +\n                        _this.typeName);\n                }\n                var built = Object.create(nodePrototype);\n                _this.buildParams.forEach(function (param, i) {\n                    if (i < argc) {\n                        addParam(built, param, args[i], true);\n                    }\n                    else {\n                        addParam(built, param, null, false);\n                    }\n                });\n                Object.keys(_this.allFields).forEach(function (param) {\n                    // Use the default value.\n                    addParam(built, param, null, false);\n                });\n                // Make sure that the \"type\" field was filled automatically.\n                if (built.type !== _this.typeName) {\n                    throw new Error(\"\");\n                }\n                return built;\n            };\n            // Calling .from on the builder function will construct an instance of the Def,\n            // using field values from the passed object. For fields missing from the passed object,\n            // their default value will be used.\n            builder.from = function (obj) {\n                if (!_this.finalized) {\n                    throw new Error(\"attempting to instantiate unfinalized type \" +\n                        _this.typeName);\n                }\n                var built = Object.create(nodePrototype);\n                Object.keys(_this.allFields).forEach(function (param) {\n                    if (hasOwn.call(obj, param)) {\n                        addParam(built, param, obj[param], true);\n                    }\n                    else {\n                        addParam(built, param, null, false);\n                    }\n                });\n                // Make sure that the \"type\" field was filled automatically.\n                if (built.type !== _this.typeName) {\n                    throw new Error(\"\");\n                }\n                return built;\n            };\n            Object.defineProperty(builders, getBuilderName(this.typeName), {\n                enumerable: true,\n                value: builder\n            });\n            return this;\n        };\n        // The reason fields are specified using .field(...) instead of an object\n        // literal syntax is somewhat subtle: the object literal syntax would\n        // support only one key and one value, but with .field(...) we can pass\n        // any number of arguments to specify the field.\n        DefImpl.prototype.field = function (name, type, defaultFn, hidden) {\n            if (this.finalized) {\n                console.error(\"Ignoring attempt to redefine field \" +\n                    JSON.stringify(name) + \" of finalized type \" +\n                    JSON.stringify(this.typeName));\n                return this;\n            }\n            this.ownFields[name] = new Field(name, Type.from(type), defaultFn, hidden);\n            return this; // For chaining.\n        };\n        DefImpl.prototype.finalize = function () {\n            var _this = this;\n            // It's not an error to finalize a type more than once, but only the\n            // first call to .finalize does anything.\n            if (!this.finalized) {\n                var allFields = this.allFields;\n                var allSupertypes = this.allSupertypes;\n                this.baseNames.forEach(function (name) {\n                    var def = defCache[name];\n                    if (def instanceof Def) {\n                        def.finalize();\n                        extend(allFields, def.allFields);\n                        extend(allSupertypes, def.allSupertypes);\n                    }\n                    else {\n                        var message = \"unknown supertype name \" +\n                            JSON.stringify(name) +\n                            \" for subtype \" +\n                            JSON.stringify(_this.typeName);\n                        throw new Error(message);\n                    }\n                });\n                // TODO Warn if fields are overridden with incompatible types.\n                extend(allFields, this.ownFields);\n                allSupertypes[this.typeName] = this;\n                this.fieldNames.length = 0;\n                for (var fieldName in allFields) {\n                    if (hasOwn.call(allFields, fieldName) &&\n                        !allFields[fieldName].hidden) {\n                        this.fieldNames.push(fieldName);\n                    }\n                }\n                // Types are exported only once they have been finalized.\n                Object.defineProperty(namedTypes, this.typeName, {\n                    enumerable: true,\n                    value: this.type\n                });\n                this.finalized = true;\n                // A linearization of the inheritance hierarchy.\n                populateSupertypeList(this.typeName, this.supertypeList);\n                if (this.buildable &&\n                    this.supertypeList.lastIndexOf(\"Expression\") >= 0) {\n                    wrapExpressionBuilderWithStatement(this.typeName);\n                }\n            }\n        };\n        return DefImpl;\n    }(Def));\n    // Note that the list returned by this function is a copy of the internal\n    // supertypeList, *without* the typeName itself as the first element.\n    function getSupertypeNames(typeName) {\n        if (!hasOwn.call(defCache, typeName)) {\n            throw new Error(\"\");\n        }\n        var d = defCache[typeName];\n        if (d.finalized !== true) {\n            throw new Error(\"\");\n        }\n        return d.supertypeList.slice(1);\n    }\n    // Returns an object mapping from every known type in the defCache to the\n    // most specific supertype whose name is an own property of the candidates\n    // object.\n    function computeSupertypeLookupTable(candidates) {\n        var table = {};\n        var typeNames = Object.keys(defCache);\n        var typeNameCount = typeNames.length;\n        for (var i = 0; i < typeNameCount; ++i) {\n            var typeName = typeNames[i];\n            var d = defCache[typeName];\n            if (d.finalized !== true) {\n                throw new Error(\"\" + typeName);\n            }\n            for (var j = 0; j < d.supertypeList.length; ++j) {\n                var superTypeName = d.supertypeList[j];\n                if (hasOwn.call(candidates, superTypeName)) {\n                    table[typeName] = superTypeName;\n                    break;\n                }\n            }\n        }\n        return table;\n    }\n    var builders = Object.create(null);\n    // This object is used as prototype for any node created by a builder.\n    var nodePrototype = {};\n    // Call this function to define a new method to be shared by all AST\n    // nodes. The replaced method (if any) is returned for easy wrapping.\n    function defineMethod(name, func) {\n        var old = nodePrototype[name];\n        // Pass undefined as func to delete nodePrototype[name].\n        if (isUndefined.check(func)) {\n            delete nodePrototype[name];\n        }\n        else {\n            isFunction.assert(func);\n            Object.defineProperty(nodePrototype, name, {\n                enumerable: true,\n                configurable: true,\n                value: func\n            });\n        }\n        return old;\n    }\n    function getBuilderName(typeName) {\n        return typeName.replace(/^[A-Z]+/, function (upperCasePrefix) {\n            var len = upperCasePrefix.length;\n            switch (len) {\n                case 0: return \"\";\n                // If there's only one initial capital letter, just lower-case it.\n                case 1: return upperCasePrefix.toLowerCase();\n                default:\n                    // If there's more than one initial capital letter, lower-case\n                    // all but the last one, so that XMLDefaultDeclaration (for\n                    // example) becomes xmlDefaultDeclaration.\n                    return upperCasePrefix.slice(0, len - 1).toLowerCase() +\n                        upperCasePrefix.charAt(len - 1);\n            }\n        });\n    }\n    function getStatementBuilderName(typeName) {\n        typeName = getBuilderName(typeName);\n        return typeName.replace(/(Expression)?$/, \"Statement\");\n    }\n    var namedTypes = {};\n    // Like Object.keys, but aware of what fields each AST type should have.\n    function getFieldNames(object) {\n        var d = defFromValue(object);\n        if (d) {\n            return d.fieldNames.slice(0);\n        }\n        if (\"type\" in object) {\n            throw new Error(\"did not recognize object of type \" +\n                JSON.stringify(object.type));\n        }\n        return Object.keys(object);\n    }\n    // Get the value of an object property, taking object.type and default\n    // functions into account.\n    function getFieldValue(object, fieldName) {\n        var d = defFromValue(object);\n        if (d) {\n            var field = d.allFields[fieldName];\n            if (field) {\n                return field.getValue(object);\n            }\n        }\n        return object && object[fieldName];\n    }\n    // Iterate over all defined fields of an object, including those missing\n    // or undefined, passing each field name and effective value (as returned\n    // by getFieldValue) to the callback. If the object has no corresponding\n    // Def, the callback will never be called.\n    function eachField(object, callback, context) {\n        getFieldNames(object).forEach(function (name) {\n            callback.call(this, name, getFieldValue(object, name));\n        }, context);\n    }\n    // Similar to eachField, except that iteration stops as soon as the\n    // callback returns a truthy value. Like Array.prototype.some, the final\n    // result is either true or false to indicates whether the callback\n    // returned true for any element or not.\n    function someField(object, callback, context) {\n        return getFieldNames(object).some(function (name) {\n            return callback.call(this, name, getFieldValue(object, name));\n        }, context);\n    }\n    // Adds an additional builder for Expression subtypes\n    // that wraps the built Expression in an ExpressionStatements.\n    function wrapExpressionBuilderWithStatement(typeName) {\n        var wrapperName = getStatementBuilderName(typeName);\n        // skip if the builder already exists\n        if (builders[wrapperName])\n            return;\n        // the builder function to wrap with builders.ExpressionStatement\n        var wrapped = builders[getBuilderName(typeName)];\n        // skip if there is nothing to wrap\n        if (!wrapped)\n            return;\n        var builder = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return builders.expressionStatement(wrapped.apply(builders, args));\n        };\n        builder.from = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return builders.expressionStatement(wrapped.from.apply(builders, args));\n        };\n        builders[wrapperName] = builder;\n    }\n    function populateSupertypeList(typeName, list) {\n        list.length = 0;\n        list.push(typeName);\n        var lastSeen = Object.create(null);\n        for (var pos = 0; pos < list.length; ++pos) {\n            typeName = list[pos];\n            var d = defCache[typeName];\n            if (d.finalized !== true) {\n                throw new Error(\"\");\n            }\n            // If we saw typeName earlier in the breadth-first traversal,\n            // delete the last-seen occurrence.\n            if (hasOwn.call(lastSeen, typeName)) {\n                delete list[lastSeen[typeName]];\n            }\n            // Record the new index of the last-seen occurrence of typeName.\n            lastSeen[typeName] = pos;\n            // Enqueue the base names of this type.\n            list.push.apply(list, d.baseNames);\n        }\n        // Compaction loop to remove array holes.\n        for (var to = 0, from = to, len = list.length; from < len; ++from) {\n            if (hasOwn.call(list, from)) {\n                list[to++] = list[from];\n            }\n        }\n        list.length = to;\n    }\n    function extend(into, from) {\n        Object.keys(from).forEach(function (name) {\n            into[name] = from[name];\n        });\n        return into;\n    }\n    function finalize() {\n        Object.keys(defCache).forEach(function (name) {\n            defCache[name].finalize();\n        });\n    }\n    return {\n        Type: Type,\n        builtInTypes: builtInTypes,\n        getSupertypeNames: getSupertypeNames,\n        computeSupertypeLookupTable: computeSupertypeLookupTable,\n        builders: builders,\n        defineMethod: defineMethod,\n        getBuilderName: getBuilderName,\n        getStatementBuilderName: getStatementBuilderName,\n        namedTypes: namedTypes,\n        getFieldNames: getFieldNames,\n        getFieldValue: getFieldValue,\n        eachField: eachField,\n        someField: someField,\n        finalize: finalize,\n    };\n}\nexports.default = typesPlugin;\n;\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/lib/types.js?");

/***/ }),

/***/ "../../node_modules/ast-types/main.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/main.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar fork_1 = __importDefault(__webpack_require__(/*! ./fork */ \"../../node_modules/ast-types/fork.js\"));\nvar core_1 = __importDefault(__webpack_require__(/*! ./def/core */ \"../../node_modules/ast-types/def/core.js\"));\nvar es6_1 = __importDefault(__webpack_require__(/*! ./def/es6 */ \"../../node_modules/ast-types/def/es6.js\"));\nvar es7_1 = __importDefault(__webpack_require__(/*! ./def/es7 */ \"../../node_modules/ast-types/def/es7.js\"));\nvar jsx_1 = __importDefault(__webpack_require__(/*! ./def/jsx */ \"../../node_modules/ast-types/def/jsx.js\"));\nvar flow_1 = __importDefault(__webpack_require__(/*! ./def/flow */ \"../../node_modules/ast-types/def/flow.js\"));\nvar esprima_1 = __importDefault(__webpack_require__(/*! ./def/esprima */ \"../../node_modules/ast-types/def/esprima.js\"));\nvar babel_1 = __importDefault(__webpack_require__(/*! ./def/babel */ \"../../node_modules/ast-types/def/babel.js\"));\nvar typescript_1 = __importDefault(__webpack_require__(/*! ./def/typescript */ \"../../node_modules/ast-types/def/typescript.js\"));\nvar es_proposals_1 = __importDefault(__webpack_require__(/*! ./def/es-proposals */ \"../../node_modules/ast-types/def/es-proposals.js\"));\nvar defs = [\n    // This core module of AST types captures ES5 as it is parsed today by\n    // git://github.com/ariya/esprima.git#master.\n    core_1.default,\n    // Feel free to add to or remove from this list of extension modules to\n    // configure the precise type hierarchy that you need.\n    es6_1.default,\n    es7_1.default,\n    jsx_1.default,\n    flow_1.default,\n    esprima_1.default,\n    babel_1.default,\n    typescript_1.default,\n    es_proposals_1.default,\n];\nvar main = fork_1.default(defs);\nexports.default = main;\nmodule.exports = exports[\"default\"];\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ast-types/main.js?");

/***/ }),

/***/ "../../node_modules/base64-js/index.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/base64-js/index.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/base64-js/index.js?");

/***/ }),

/***/ "../../node_modules/bezier/index.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/bezier/index.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var cache = {\n    '1': bezier1\n  , '2': bezier2\n  , '3': bezier3\n  , '4': bezier4\n}\n\nmodule.exports = neat\nmodule.exports.prepare = prepare\n\nfunction neat(arr, t) {\n  return prepare(arr.length)(arr, t)\n}\n\nfunction prepare(pieces) {\n  pieces = +pieces|0\n  if (!pieces) throw new Error('Cannot create a interpolator with no elements')\n  if (cache[pieces]) return cache[pieces]\n\n  var fn = ['var ut = 1 - t', '']\n\n  var n = pieces\n  while (n--) {\n    for (var j = 0; j < n; j += 1) {\n      if (n+1 === pieces) {\n        fn.push('var p'+j+' = arr['+j+'] * ut + arr['+(j+1)+'] * t')\n      } else\n      if (n > 1) {\n        fn.push('p'+j+' = p'+j+' * ut + p'+(j+1)+' * t')\n      } else {\n        fn.push('return p'+j+' * ut + p'+(j+1)+' * t')\n      }\n    }\n    if (n > 1) fn.push('')\n  }\n\n  fn = [\n    'return function bezier'+pieces+'(arr, t) {'\n    , fn.map(function(s) { return '  ' + s }).join('\\n')\n    , '}'\n  ].join('\\n')\n\n  return Function(fn)()\n}\n\n//\n// Including the first four degrees\n// manually - there's a slight performance penalty\n// to generated code. It's outweighed by\n// the gains of the optimisations, but always\n// helps to cover the most common cases :)\n//\n\nfunction bezier1(arr) {\n  return arr[0]\n}\n\nfunction bezier2(arr, t) {\n  return arr[0] + (arr[1] - arr[0]) * t\n}\n\nfunction bezier3(arr, t) {\n  var ut = 1 - t\n  return (arr[0] * ut + arr[1] * t) * ut + (arr[1] * ut + arr[2] * t) * t\n}\n\nfunction bezier4(arr, t) {\n  var ut = 1 - t\n  var a1 = arr[1] * ut + arr[2] * t\n  return ((arr[0] * ut + arr[1] * t) * ut + a1 * t) * ut + (a1 * ut + (arr[2] * ut + arr[3] * t) * t) * t\n}\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/bezier/index.js?");

/***/ }),

/***/ "../../node_modules/buffer/index.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/buffer/index.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"../../node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"../../node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"../../node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"../../node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/buffer/index.js?");

/***/ }),

/***/ "../../node_modules/curvify-svg-path/arc-to-curves.js":
/*!*******************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/curvify-svg-path/arc-to-curves.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var max = Math.max\nvar abs = Math.abs\nvar pow = Math.pow\nvar sin = Math.sin\nvar cos = Math.cos\nvar tan = Math.tan\nvar acos = Math.acos\nvar sqrt = Math.sqrt\nvar ceil = Math.ceil\nvar τ = Math.PI * 2\n\nmodule.exports = curves\n\nfunction curves (px, py, cx, cy, rx, ry, xrot, large, sweep) {\n  if (rx === 0 || ry === 0) return []\n\n  xrot = xrot || 0\n  large = large || 0\n  sweep = sweep || 0\n\n  var sinphi = sin(xrot * τ / 360)\n  var cosphi = cos(xrot * τ / 360)\n\n  var pxp = cosphi * (px - cx) / 2 + sinphi * (py - cy) / 2\n  var pyp = -sinphi * (px - cx) / 2 + cosphi * (py - cy) / 2\n  if (pxp === 0 && pyp === 0) return []\n\n  rx = abs(rx)\n  ry = abs(ry)\n\n  var lambda = (\n    pow(pxp, 2) / pow(rx, 2) +\n    pow(pyp, 2) / pow(ry, 2)\n  )\n\n  if (lambda > 1) {\n    rx *= sqrt(lambda)\n    ry *= sqrt(lambda)\n  }\n\n  var centre = getArcCentre(px, py, cx, cy, rx, ry, large, sweep, sinphi, cosphi, pxp, pyp)\n  var centrex = centre[0]\n  var centrey = centre[1]\n  var ang1 = centre[2]\n  var ang2 = centre[3]\n\n  var segments = max(ceil(abs(ang2) / (τ / 4)), 1)\n  if (!segments) return []\n\n  var curves = []\n  ang2 /= segments\n  while (segments--) {\n    curves.push(approxUnitArc(ang1, ang2))\n    ang1 += ang2\n  }\n\n  var result = []\n  var curve, a, b, c\n  var i = 0, l = curves.length\n\n  while (i < l) {\n    curve = curves[i++]\n    a = mapToEllipse(curve[0], rx, ry, cosphi, sinphi, centrex, centrey)\n    b = mapToEllipse(curve[1], rx, ry, cosphi, sinphi, centrex, centrey)\n    c = mapToEllipse(curve[2], rx, ry, cosphi, sinphi, centrex, centrey)\n    result[result.length] = [a[0], a[1], b[0], b[1], c[0], c[1]]\n  }\n\n  return result\n}\n\nfunction mapToEllipse (curve, rx, ry, cosphi, sinphi, centrex, centrey) {\n  var x = curve[0] * rx\n  var y = curve[1] * ry\n\n  var xp = cosphi * x - sinphi * y\n  var yp = sinphi * x + cosphi * y\n\n  return [xp + centrex, yp + centrey]\n}\n\nfunction approxUnitArc (ang1, ang2) {\n  var a = 4 / 3 * tan(ang2 / 4)\n\n  var x1 = cos(ang1)\n  var y1 = sin(ang1)\n  var x2 = cos(ang1 + ang2)\n  var y2 = sin(ang1 + ang2)\n\n  return [\n    [x1 - y1 * a, y1 + x1 * a ],\n    [x2 + y2 * a, y2 - x2 * a],\n    [x2, y2]\n  ]\n}\n\nfunction getArcCentre (px, py, cx, cy, rx, ry, large, sweep, sinphi, cosphi, pxp, pyp) {\n  var rxsq = pow(rx, 2)\n  var rysq = pow(ry, 2)\n  var pxpsq = pow(pxp, 2)\n  var pypsq = pow(pyp, 2)\n\n  var radicant = (rxsq * rysq) - (rxsq * pypsq) - (rysq * pxpsq)\n\n  if (radicant < 0) radicant = 0\n  radicant /= (rxsq * pypsq) + (rysq * pxpsq)\n  radicant = sqrt(radicant) * (large === sweep ? -1 : 1)\n\n  var centrexp = radicant * rx / ry * pyp\n  var centreyp = radicant * -ry / rx * pxp\n  var centrex = cosphi * centrexp - sinphi * centreyp + (px + cx) / 2\n  var centrey = sinphi * centrexp + cosphi * centreyp + (py + cy) / 2\n\n  var vx1 = (pxp - centrexp) / rx\n  var vy1 = (pyp - centreyp) / ry\n  var vx2 = (-pxp - centrexp) / rx\n  var vy2 = (-pyp - centreyp) / ry\n\n  var ang1 = vectorAngle(1, 0, vx1, vy1)\n  var ang2 = vectorAngle(vx1, vy1, vx2, vy2)\n\n  if (sweep === 0 && ang2 > 0) ang2 -= τ\n  if (sweep === 1 && ang2 < 0) ang2 += τ\n\n  return [centrex, centrey, ang1, ang2]\n}\n\nfunction vectorAngle (ux, uy, vx, vy) {\n  var sign = (ux * vy - uy * vx < 0) ? -1 : 1\n  var umag = sqrt(ux * ux + uy * uy)\n  var vmag = sqrt(ux * ux + uy * uy)\n  var dot = ux * vx + uy * vy\n\n  var div = dot / (umag * vmag)\n  if (div > 1) div = 1\n  if (div < -1) div = -1\n\n  return sign * acos(div)\n}\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/curvify-svg-path/arc-to-curves.js?");

/***/ }),

/***/ "../../node_modules/curvify-svg-path/index.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/curvify-svg-path/index.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var arc = __webpack_require__(/*! ./arc-to-curves */ \"../../node_modules/curvify-svg-path/arc-to-curves.js\")\n\nmodule.exports = curvify\n\nfunction curvify (path) {\n  var result = []\n  var cmd, prev, curves\n  var x = 0, y = 0\n  var bx = 0, by = 0\n  var sx = 0, sy = 0\n  var qx, qy, cx, cy\n  var i = 0, j, m, sl\n  var l = path.length\n\n  while (i < l) {\n    seg = path[i++], cmd = seg[0]\n\n    if (cmd == 'M') sx = seg[1], sy = seg[2]\n    else if (cmd == 'L') seg = line(x, y, seg[1], seg[2])\n    else if (cmd == 'H') seg = line(x, y, seg[1], y)\n    else if (cmd == 'V') seg = line(x, y, x, seg[1])\n    else if (cmd == 'Z') seg = line(x, y, sx, sy)\n\n    else if (cmd == 'A') {\n      curves = arc(\n        x, y, seg[6], seg[7],\n        seg[1], seg[2], seg[3],\n        seg[4], seg[5]\n      )\n\n      m = curves.length\n      if (!m) continue\n      j = 0\n\n      while (j < m) {\n        c = curves[j++]\n        seg = ['C', c[0], c[1], c[2], c[3], c[4], c[5]]\n        if (j < m) result[result.length] = seg\n      }\n    }\n\n    else if (cmd == 'S') {\n      cx = x, cy = y\n      if (prev == 'C' || prev == 'S') {\n        cx += cx - bx,\n        cy += cy - by\n      }\n      seg = ['C', cx, cy, seg[1], seg[2], seg[3], seg[4]]\n    }\n\n    else if (cmd == 'T') {\n      if (prev == 'Q' || prev == 'T') {\n        qx = x * 2 - qx, qy = y * 2 - qy\n      }\n      else qx = x, qy = y\n      seg = quadratic(x, y, qx, qy, seg[1], seg[2])\n    }\n\n    else if (cmd == 'Q') {\n      qx = seg[1], qy = seg[2]\n      seg = quadratic(x, y, seg[1], seg[2], seg[3], seg[4])\n    }\n\n    sl = seg.length\n    x = seg[sl - 2], y = seg[sl - 1]\n    if (sl > 4) bx = seg[sl - 4], by = seg[sl - 3]\n    else bx = x, by = y\n    prev = cmd\n\n    result[result.length] = seg\n  }\n\n  return result\n}\n\nfunction line (x1, y1, x2, y2) {\n  return ['C', x1, y1, x2, y2, x2, y2]\n}\n\nfunction quadratic (x1, y1, cx, cy, x2, y2) {\n  return ['C',\n    x1 / 3 + (2 / 3) * cx, y1 / 3 + (2 / 3) * cy,\n    x2 / 3 + (2 / 3) * cx, y2 / 3 + (2 / 3) * cy,\n    x2, y2\n  ]\n}\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/curvify-svg-path/index.js?");

/***/ }),

/***/ "../../node_modules/debug/src/browser.js":
/*!******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/debug/src/browser.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\n/**\n * Colors.\n */\n\nexports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n// eslint-disable-next-line complexity\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n    return true;\n  } // Internet Explorer and Edge do not support colors.\n\n\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  } // Is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\n\n  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773\n  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?\n  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n}\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\n\nfunction formatArgs(args) {\n  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);\n\n  if (!this.useColors) {\n    return;\n  }\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit'); // The final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function (match) {\n    if (match === '%%') {\n      return;\n    }\n\n    index++;\n\n    if (match === '%c') {\n      // We only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n  args.splice(lastC, 0, c);\n}\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\n\nfunction log() {\n  var _console;\n\n  // This hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return (typeof console === \"undefined\" ? \"undefined\" : _typeof(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);\n}\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\n\nfunction save(namespaces) {\n  try {\n    if (namespaces) {\n      exports.storage.setItem('debug', namespaces);\n    } else {\n      exports.storage.removeItem('debug');\n    }\n  } catch (error) {// Swallow\n    // XXX (@Qix-) should we be logging these?\n  }\n}\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\n\nfunction load() {\n  var r;\n\n  try {\n    r = exports.storage.getItem('debug');\n  } catch (error) {} // Swallow\n  // XXX (@Qix-) should we be logging these?\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\n\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\n\nfunction localstorage() {\n  try {\n    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n    // The Browser also has localStorage in the global context.\n    return localStorage;\n  } catch (error) {// Swallow\n    // XXX (@Qix-) should we be logging these?\n  }\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"../../node_modules/debug/src/common.js\")(exports);\nvar formatters = module.exports.formatters;\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n  try {\n    return JSON.stringify(v);\n  } catch (error) {\n    return '[UnexpectedJSONParseError]: ' + error.message;\n  }\n};\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"../../node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/debug/src/browser.js?");

/***/ }),

/***/ "../../node_modules/debug/src/common.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/debug/src/common.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\nfunction setup(env) {\n  createDebug.debug = createDebug;\n  createDebug.default = createDebug;\n  createDebug.coerce = coerce;\n  createDebug.disable = disable;\n  createDebug.enable = enable;\n  createDebug.enabled = enabled;\n  createDebug.humanize = __webpack_require__(/*! ms */ \"../../node_modules/ms/index.js\");\n  Object.keys(env).forEach(function (key) {\n    createDebug[key] = env[key];\n  });\n  /**\n  * Active `debug` instances.\n  */\n\n  createDebug.instances = [];\n  /**\n  * The currently active debug mode names, and names to skip.\n  */\n\n  createDebug.names = [];\n  createDebug.skips = [];\n  /**\n  * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n  *\n  * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n  */\n\n  createDebug.formatters = {};\n  /**\n  * Selects a color for a debug namespace\n  * @param {String} namespace The namespace string for the for the debug instance to be colored\n  * @return {Number|String} An ANSI color code for the given namespace\n  * @api private\n  */\n\n  function selectColor(namespace) {\n    var hash = 0;\n\n    for (var i = 0; i < namespace.length; i++) {\n      hash = (hash << 5) - hash + namespace.charCodeAt(i);\n      hash |= 0; // Convert to 32bit integer\n    }\n\n    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n  }\n\n  createDebug.selectColor = selectColor;\n  /**\n  * Create a debugger with the given `namespace`.\n  *\n  * @param {String} namespace\n  * @return {Function}\n  * @api public\n  */\n\n  function createDebug(namespace) {\n    var prevTime;\n\n    function debug() {\n      // Disabled?\n      if (!debug.enabled) {\n        return;\n      }\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var self = debug; // Set `diff` timestamp\n\n      var curr = Number(new Date());\n      var ms = curr - (prevTime || curr);\n      self.diff = ms;\n      self.prev = prevTime;\n      self.curr = curr;\n      prevTime = curr;\n      args[0] = createDebug.coerce(args[0]);\n\n      if (typeof args[0] !== 'string') {\n        // Anything else let's inspect with %O\n        args.unshift('%O');\n      } // Apply any `formatters` transformations\n\n\n      var index = 0;\n      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {\n        // If we encounter an escaped % then don't increase the array index\n        if (match === '%%') {\n          return match;\n        }\n\n        index++;\n        var formatter = createDebug.formatters[format];\n\n        if (typeof formatter === 'function') {\n          var val = args[index];\n          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`\n\n          args.splice(index, 1);\n          index--;\n        }\n\n        return match;\n      }); // Apply env-specific formatting (colors, etc.)\n\n      createDebug.formatArgs.call(self, args);\n      var logFn = self.log || createDebug.log;\n      logFn.apply(self, args);\n    }\n\n    debug.namespace = namespace;\n    debug.enabled = createDebug.enabled(namespace);\n    debug.useColors = createDebug.useColors();\n    debug.color = selectColor(namespace);\n    debug.destroy = destroy;\n    debug.extend = extend; // Debug.formatArgs = formatArgs;\n    // debug.rawLog = rawLog;\n    // env-specific initialization logic for debug instances\n\n    if (typeof createDebug.init === 'function') {\n      createDebug.init(debug);\n    }\n\n    createDebug.instances.push(debug);\n    return debug;\n  }\n\n  function destroy() {\n    var index = createDebug.instances.indexOf(this);\n\n    if (index !== -1) {\n      createDebug.instances.splice(index, 1);\n      return true;\n    }\n\n    return false;\n  }\n\n  function extend(namespace, delimiter) {\n    return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n  }\n  /**\n  * Enables a debug mode by namespaces. This can include modes\n  * separated by a colon and wildcards.\n  *\n  * @param {String} namespaces\n  * @api public\n  */\n\n\n  function enable(namespaces) {\n    createDebug.save(namespaces);\n    createDebug.names = [];\n    createDebug.skips = [];\n    var i;\n    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n    var len = split.length;\n\n    for (i = 0; i < len; i++) {\n      if (!split[i]) {\n        // ignore empty strings\n        continue;\n      }\n\n      namespaces = split[i].replace(/\\*/g, '.*?');\n\n      if (namespaces[0] === '-') {\n        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n      } else {\n        createDebug.names.push(new RegExp('^' + namespaces + '$'));\n      }\n    }\n\n    for (i = 0; i < createDebug.instances.length; i++) {\n      var instance = createDebug.instances[i];\n      instance.enabled = createDebug.enabled(instance.namespace);\n    }\n  }\n  /**\n  * Disable debug output.\n  *\n  * @api public\n  */\n\n\n  function disable() {\n    createDebug.enable('');\n  }\n  /**\n  * Returns true if the given mode name is enabled, false otherwise.\n  *\n  * @param {String} name\n  * @return {Boolean}\n  * @api public\n  */\n\n\n  function enabled(name) {\n    if (name[name.length - 1] === '*') {\n      return true;\n    }\n\n    var i;\n    var len;\n\n    for (i = 0, len = createDebug.skips.length; i < len; i++) {\n      if (createDebug.skips[i].test(name)) {\n        return false;\n      }\n    }\n\n    for (i = 0, len = createDebug.names.length; i < len; i++) {\n      if (createDebug.names[i].test(name)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n  * Coerce `val`.\n  *\n  * @param {Mixed} val\n  * @return {Mixed}\n  * @api private\n  */\n\n\n  function coerce(val) {\n    if (val instanceof Error) {\n      return val.stack || val.message;\n    }\n\n    return val;\n  }\n\n  createDebug.enable(createDebug.load());\n  return createDebug;\n}\n\nmodule.exports = setup;\n\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/debug/src/common.js?");

/***/ }),

/***/ "../../node_modules/esprima/dist/esprima.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/esprima/dist/esprima.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n/* istanbul ignore next */\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/* istanbul ignore if */\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/*\n\t  Copyright JS Foundation and other contributors, https://js.foundation/\n\n\t  Redistribution and use in source and binary forms, with or without\n\t  modification, are permitted provided that the following conditions are met:\n\n\t    * Redistributions of source code must retain the above copyright\n\t      notice, this list of conditions and the following disclaimer.\n\t    * Redistributions in binary form must reproduce the above copyright\n\t      notice, this list of conditions and the following disclaimer in the\n\t      documentation and/or other materials provided with the distribution.\n\n\t  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\t  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\t  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\t  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n\t  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\t  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\t  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n\t  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n\t  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t*/\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar comment_handler_1 = __webpack_require__(1);\n\tvar jsx_parser_1 = __webpack_require__(3);\n\tvar parser_1 = __webpack_require__(8);\n\tvar tokenizer_1 = __webpack_require__(15);\n\tfunction parse(code, options, delegate) {\n\t    var commentHandler = null;\n\t    var proxyDelegate = function (node, metadata) {\n\t        if (delegate) {\n\t            delegate(node, metadata);\n\t        }\n\t        if (commentHandler) {\n\t            commentHandler.visit(node, metadata);\n\t        }\n\t    };\n\t    var parserDelegate = (typeof delegate === 'function') ? proxyDelegate : null;\n\t    var collectComment = false;\n\t    if (options) {\n\t        collectComment = (typeof options.comment === 'boolean' && options.comment);\n\t        var attachComment = (typeof options.attachComment === 'boolean' && options.attachComment);\n\t        if (collectComment || attachComment) {\n\t            commentHandler = new comment_handler_1.CommentHandler();\n\t            commentHandler.attach = attachComment;\n\t            options.comment = true;\n\t            parserDelegate = proxyDelegate;\n\t        }\n\t    }\n\t    var isModule = false;\n\t    if (options && typeof options.sourceType === 'string') {\n\t        isModule = (options.sourceType === 'module');\n\t    }\n\t    var parser;\n\t    if (options && typeof options.jsx === 'boolean' && options.jsx) {\n\t        parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);\n\t    }\n\t    else {\n\t        parser = new parser_1.Parser(code, options, parserDelegate);\n\t    }\n\t    var program = isModule ? parser.parseModule() : parser.parseScript();\n\t    var ast = program;\n\t    if (collectComment && commentHandler) {\n\t        ast.comments = commentHandler.comments;\n\t    }\n\t    if (parser.config.tokens) {\n\t        ast.tokens = parser.tokens;\n\t    }\n\t    if (parser.config.tolerant) {\n\t        ast.errors = parser.errorHandler.errors;\n\t    }\n\t    return ast;\n\t}\n\texports.parse = parse;\n\tfunction parseModule(code, options, delegate) {\n\t    var parsingOptions = options || {};\n\t    parsingOptions.sourceType = 'module';\n\t    return parse(code, parsingOptions, delegate);\n\t}\n\texports.parseModule = parseModule;\n\tfunction parseScript(code, options, delegate) {\n\t    var parsingOptions = options || {};\n\t    parsingOptions.sourceType = 'script';\n\t    return parse(code, parsingOptions, delegate);\n\t}\n\texports.parseScript = parseScript;\n\tfunction tokenize(code, options, delegate) {\n\t    var tokenizer = new tokenizer_1.Tokenizer(code, options);\n\t    var tokens;\n\t    tokens = [];\n\t    try {\n\t        while (true) {\n\t            var token = tokenizer.getNextToken();\n\t            if (!token) {\n\t                break;\n\t            }\n\t            if (delegate) {\n\t                token = delegate(token);\n\t            }\n\t            tokens.push(token);\n\t        }\n\t    }\n\t    catch (e) {\n\t        tokenizer.errorHandler.tolerate(e);\n\t    }\n\t    if (tokenizer.errorHandler.tolerant) {\n\t        tokens.errors = tokenizer.errors();\n\t    }\n\t    return tokens;\n\t}\n\texports.tokenize = tokenize;\n\tvar syntax_1 = __webpack_require__(2);\n\texports.Syntax = syntax_1.Syntax;\n\t// Sync with *.json manifests.\n\texports.version = '4.0.1';\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar syntax_1 = __webpack_require__(2);\n\tvar CommentHandler = (function () {\n\t    function CommentHandler() {\n\t        this.attach = false;\n\t        this.comments = [];\n\t        this.stack = [];\n\t        this.leading = [];\n\t        this.trailing = [];\n\t    }\n\t    CommentHandler.prototype.insertInnerComments = function (node, metadata) {\n\t        //  innnerComments for properties empty block\n\t        //  `function a() {/** comments **\\/}`\n\t        if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {\n\t            var innerComments = [];\n\t            for (var i = this.leading.length - 1; i >= 0; --i) {\n\t                var entry = this.leading[i];\n\t                if (metadata.end.offset >= entry.start) {\n\t                    innerComments.unshift(entry.comment);\n\t                    this.leading.splice(i, 1);\n\t                    this.trailing.splice(i, 1);\n\t                }\n\t            }\n\t            if (innerComments.length) {\n\t                node.innerComments = innerComments;\n\t            }\n\t        }\n\t    };\n\t    CommentHandler.prototype.findTrailingComments = function (metadata) {\n\t        var trailingComments = [];\n\t        if (this.trailing.length > 0) {\n\t            for (var i = this.trailing.length - 1; i >= 0; --i) {\n\t                var entry_1 = this.trailing[i];\n\t                if (entry_1.start >= metadata.end.offset) {\n\t                    trailingComments.unshift(entry_1.comment);\n\t                }\n\t            }\n\t            this.trailing.length = 0;\n\t            return trailingComments;\n\t        }\n\t        var entry = this.stack[this.stack.length - 1];\n\t        if (entry && entry.node.trailingComments) {\n\t            var firstComment = entry.node.trailingComments[0];\n\t            if (firstComment && firstComment.range[0] >= metadata.end.offset) {\n\t                trailingComments = entry.node.trailingComments;\n\t                delete entry.node.trailingComments;\n\t            }\n\t        }\n\t        return trailingComments;\n\t    };\n\t    CommentHandler.prototype.findLeadingComments = function (metadata) {\n\t        var leadingComments = [];\n\t        var target;\n\t        while (this.stack.length > 0) {\n\t            var entry = this.stack[this.stack.length - 1];\n\t            if (entry && entry.start >= metadata.start.offset) {\n\t                target = entry.node;\n\t                this.stack.pop();\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        if (target) {\n\t            var count = target.leadingComments ? target.leadingComments.length : 0;\n\t            for (var i = count - 1; i >= 0; --i) {\n\t                var comment = target.leadingComments[i];\n\t                if (comment.range[1] <= metadata.start.offset) {\n\t                    leadingComments.unshift(comment);\n\t                    target.leadingComments.splice(i, 1);\n\t                }\n\t            }\n\t            if (target.leadingComments && target.leadingComments.length === 0) {\n\t                delete target.leadingComments;\n\t            }\n\t            return leadingComments;\n\t        }\n\t        for (var i = this.leading.length - 1; i >= 0; --i) {\n\t            var entry = this.leading[i];\n\t            if (entry.start <= metadata.start.offset) {\n\t                leadingComments.unshift(entry.comment);\n\t                this.leading.splice(i, 1);\n\t            }\n\t        }\n\t        return leadingComments;\n\t    };\n\t    CommentHandler.prototype.visitNode = function (node, metadata) {\n\t        if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {\n\t            return;\n\t        }\n\t        this.insertInnerComments(node, metadata);\n\t        var trailingComments = this.findTrailingComments(metadata);\n\t        var leadingComments = this.findLeadingComments(metadata);\n\t        if (leadingComments.length > 0) {\n\t            node.leadingComments = leadingComments;\n\t        }\n\t        if (trailingComments.length > 0) {\n\t            node.trailingComments = trailingComments;\n\t        }\n\t        this.stack.push({\n\t            node: node,\n\t            start: metadata.start.offset\n\t        });\n\t    };\n\t    CommentHandler.prototype.visitComment = function (node, metadata) {\n\t        var type = (node.type[0] === 'L') ? 'Line' : 'Block';\n\t        var comment = {\n\t            type: type,\n\t            value: node.value\n\t        };\n\t        if (node.range) {\n\t            comment.range = node.range;\n\t        }\n\t        if (node.loc) {\n\t            comment.loc = node.loc;\n\t        }\n\t        this.comments.push(comment);\n\t        if (this.attach) {\n\t            var entry = {\n\t                comment: {\n\t                    type: type,\n\t                    value: node.value,\n\t                    range: [metadata.start.offset, metadata.end.offset]\n\t                },\n\t                start: metadata.start.offset\n\t            };\n\t            if (node.loc) {\n\t                entry.comment.loc = node.loc;\n\t            }\n\t            node.type = type;\n\t            this.leading.push(entry);\n\t            this.trailing.push(entry);\n\t        }\n\t    };\n\t    CommentHandler.prototype.visit = function (node, metadata) {\n\t        if (node.type === 'LineComment') {\n\t            this.visitComment(node, metadata);\n\t        }\n\t        else if (node.type === 'BlockComment') {\n\t            this.visitComment(node, metadata);\n\t        }\n\t        else if (this.attach) {\n\t            this.visitNode(node, metadata);\n\t        }\n\t    };\n\t    return CommentHandler;\n\t}());\n\texports.CommentHandler = CommentHandler;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.Syntax = {\n\t    AssignmentExpression: 'AssignmentExpression',\n\t    AssignmentPattern: 'AssignmentPattern',\n\t    ArrayExpression: 'ArrayExpression',\n\t    ArrayPattern: 'ArrayPattern',\n\t    ArrowFunctionExpression: 'ArrowFunctionExpression',\n\t    AwaitExpression: 'AwaitExpression',\n\t    BlockStatement: 'BlockStatement',\n\t    BinaryExpression: 'BinaryExpression',\n\t    BreakStatement: 'BreakStatement',\n\t    CallExpression: 'CallExpression',\n\t    CatchClause: 'CatchClause',\n\t    ClassBody: 'ClassBody',\n\t    ClassDeclaration: 'ClassDeclaration',\n\t    ClassExpression: 'ClassExpression',\n\t    ConditionalExpression: 'ConditionalExpression',\n\t    ContinueStatement: 'ContinueStatement',\n\t    DoWhileStatement: 'DoWhileStatement',\n\t    DebuggerStatement: 'DebuggerStatement',\n\t    EmptyStatement: 'EmptyStatement',\n\t    ExportAllDeclaration: 'ExportAllDeclaration',\n\t    ExportDefaultDeclaration: 'ExportDefaultDeclaration',\n\t    ExportNamedDeclaration: 'ExportNamedDeclaration',\n\t    ExportSpecifier: 'ExportSpecifier',\n\t    ExpressionStatement: 'ExpressionStatement',\n\t    ForStatement: 'ForStatement',\n\t    ForOfStatement: 'ForOfStatement',\n\t    ForInStatement: 'ForInStatement',\n\t    FunctionDeclaration: 'FunctionDeclaration',\n\t    FunctionExpression: 'FunctionExpression',\n\t    Identifier: 'Identifier',\n\t    IfStatement: 'IfStatement',\n\t    ImportDeclaration: 'ImportDeclaration',\n\t    ImportDefaultSpecifier: 'ImportDefaultSpecifier',\n\t    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\n\t    ImportSpecifier: 'ImportSpecifier',\n\t    Literal: 'Literal',\n\t    LabeledStatement: 'LabeledStatement',\n\t    LogicalExpression: 'LogicalExpression',\n\t    MemberExpression: 'MemberExpression',\n\t    MetaProperty: 'MetaProperty',\n\t    MethodDefinition: 'MethodDefinition',\n\t    NewExpression: 'NewExpression',\n\t    ObjectExpression: 'ObjectExpression',\n\t    ObjectPattern: 'ObjectPattern',\n\t    Program: 'Program',\n\t    Property: 'Property',\n\t    RestElement: 'RestElement',\n\t    ReturnStatement: 'ReturnStatement',\n\t    SequenceExpression: 'SequenceExpression',\n\t    SpreadElement: 'SpreadElement',\n\t    Super: 'Super',\n\t    SwitchCase: 'SwitchCase',\n\t    SwitchStatement: 'SwitchStatement',\n\t    TaggedTemplateExpression: 'TaggedTemplateExpression',\n\t    TemplateElement: 'TemplateElement',\n\t    TemplateLiteral: 'TemplateLiteral',\n\t    ThisExpression: 'ThisExpression',\n\t    ThrowStatement: 'ThrowStatement',\n\t    TryStatement: 'TryStatement',\n\t    UnaryExpression: 'UnaryExpression',\n\t    UpdateExpression: 'UpdateExpression',\n\t    VariableDeclaration: 'VariableDeclaration',\n\t    VariableDeclarator: 'VariableDeclarator',\n\t    WhileStatement: 'WhileStatement',\n\t    WithStatement: 'WithStatement',\n\t    YieldExpression: 'YieldExpression'\n\t};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n/* istanbul ignore next */\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar character_1 = __webpack_require__(4);\n\tvar JSXNode = __webpack_require__(5);\n\tvar jsx_syntax_1 = __webpack_require__(6);\n\tvar Node = __webpack_require__(7);\n\tvar parser_1 = __webpack_require__(8);\n\tvar token_1 = __webpack_require__(13);\n\tvar xhtml_entities_1 = __webpack_require__(14);\n\ttoken_1.TokenName[100 /* Identifier */] = 'JSXIdentifier';\n\ttoken_1.TokenName[101 /* Text */] = 'JSXText';\n\t// Fully qualified element name, e.g. <svg:path> returns \"svg:path\"\n\tfunction getQualifiedElementName(elementName) {\n\t    var qualifiedName;\n\t    switch (elementName.type) {\n\t        case jsx_syntax_1.JSXSyntax.JSXIdentifier:\n\t            var id = elementName;\n\t            qualifiedName = id.name;\n\t            break;\n\t        case jsx_syntax_1.JSXSyntax.JSXNamespacedName:\n\t            var ns = elementName;\n\t            qualifiedName = getQualifiedElementName(ns.namespace) + ':' +\n\t                getQualifiedElementName(ns.name);\n\t            break;\n\t        case jsx_syntax_1.JSXSyntax.JSXMemberExpression:\n\t            var expr = elementName;\n\t            qualifiedName = getQualifiedElementName(expr.object) + '.' +\n\t                getQualifiedElementName(expr.property);\n\t            break;\n\t        /* istanbul ignore next */\n\t        default:\n\t            break;\n\t    }\n\t    return qualifiedName;\n\t}\n\tvar JSXParser = (function (_super) {\n\t    __extends(JSXParser, _super);\n\t    function JSXParser(code, options, delegate) {\n\t        return _super.call(this, code, options, delegate) || this;\n\t    }\n\t    JSXParser.prototype.parsePrimaryExpression = function () {\n\t        return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);\n\t    };\n\t    JSXParser.prototype.startJSX = function () {\n\t        // Unwind the scanner before the lookahead token.\n\t        this.scanner.index = this.startMarker.index;\n\t        this.scanner.lineNumber = this.startMarker.line;\n\t        this.scanner.lineStart = this.startMarker.index - this.startMarker.column;\n\t    };\n\t    JSXParser.prototype.finishJSX = function () {\n\t        // Prime the next lookahead.\n\t        this.nextToken();\n\t    };\n\t    JSXParser.prototype.reenterJSX = function () {\n\t        this.startJSX();\n\t        this.expectJSX('}');\n\t        // Pop the closing '}' added from the lookahead.\n\t        if (this.config.tokens) {\n\t            this.tokens.pop();\n\t        }\n\t    };\n\t    JSXParser.prototype.createJSXNode = function () {\n\t        this.collectComments();\n\t        return {\n\t            index: this.scanner.index,\n\t            line: this.scanner.lineNumber,\n\t            column: this.scanner.index - this.scanner.lineStart\n\t        };\n\t    };\n\t    JSXParser.prototype.createJSXChildNode = function () {\n\t        return {\n\t            index: this.scanner.index,\n\t            line: this.scanner.lineNumber,\n\t            column: this.scanner.index - this.scanner.lineStart\n\t        };\n\t    };\n\t    JSXParser.prototype.scanXHTMLEntity = function (quote) {\n\t        var result = '&';\n\t        var valid = true;\n\t        var terminated = false;\n\t        var numeric = false;\n\t        var hex = false;\n\t        while (!this.scanner.eof() && valid && !terminated) {\n\t            var ch = this.scanner.source[this.scanner.index];\n\t            if (ch === quote) {\n\t                break;\n\t            }\n\t            terminated = (ch === ';');\n\t            result += ch;\n\t            ++this.scanner.index;\n\t            if (!terminated) {\n\t                switch (result.length) {\n\t                    case 2:\n\t                        // e.g. '&#123;'\n\t                        numeric = (ch === '#');\n\t                        break;\n\t                    case 3:\n\t                        if (numeric) {\n\t                            // e.g. '&#x41;'\n\t                            hex = (ch === 'x');\n\t                            valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));\n\t                            numeric = numeric && !hex;\n\t                        }\n\t                        break;\n\t                    default:\n\t                        valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));\n\t                        valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));\n\t                        break;\n\t                }\n\t            }\n\t        }\n\t        if (valid && terminated && result.length > 2) {\n\t            // e.g. '&#x41;' becomes just '#x41'\n\t            var str = result.substr(1, result.length - 2);\n\t            if (numeric && str.length > 1) {\n\t                result = String.fromCharCode(parseInt(str.substr(1), 10));\n\t            }\n\t            else if (hex && str.length > 2) {\n\t                result = String.fromCharCode(parseInt('0' + str.substr(1), 16));\n\t            }\n\t            else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {\n\t                result = xhtml_entities_1.XHTMLEntities[str];\n\t            }\n\t        }\n\t        return result;\n\t    };\n\t    // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.\n\t    JSXParser.prototype.lexJSX = function () {\n\t        var cp = this.scanner.source.charCodeAt(this.scanner.index);\n\t        // < > / : = { }\n\t        if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {\n\t            var value = this.scanner.source[this.scanner.index++];\n\t            return {\n\t                type: 7 /* Punctuator */,\n\t                value: value,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: this.scanner.index - 1,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // \" '\n\t        if (cp === 34 || cp === 39) {\n\t            var start = this.scanner.index;\n\t            var quote = this.scanner.source[this.scanner.index++];\n\t            var str = '';\n\t            while (!this.scanner.eof()) {\n\t                var ch = this.scanner.source[this.scanner.index++];\n\t                if (ch === quote) {\n\t                    break;\n\t                }\n\t                else if (ch === '&') {\n\t                    str += this.scanXHTMLEntity(quote);\n\t                }\n\t                else {\n\t                    str += ch;\n\t                }\n\t            }\n\t            return {\n\t                type: 8 /* StringLiteral */,\n\t                value: str,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // ... or .\n\t        if (cp === 46) {\n\t            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);\n\t            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);\n\t            var value = (n1 === 46 && n2 === 46) ? '...' : '.';\n\t            var start = this.scanner.index;\n\t            this.scanner.index += value.length;\n\t            return {\n\t                type: 7 /* Punctuator */,\n\t                value: value,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // `\n\t        if (cp === 96) {\n\t            // Only placeholder, since it will be rescanned as a real assignment expression.\n\t            return {\n\t                type: 10 /* Template */,\n\t                value: '',\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: this.scanner.index,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // Identifer can not contain backslash (char code 92).\n\t        if (character_1.Character.isIdentifierStart(cp) && (cp !== 92)) {\n\t            var start = this.scanner.index;\n\t            ++this.scanner.index;\n\t            while (!this.scanner.eof()) {\n\t                var ch = this.scanner.source.charCodeAt(this.scanner.index);\n\t                if (character_1.Character.isIdentifierPart(ch) && (ch !== 92)) {\n\t                    ++this.scanner.index;\n\t                }\n\t                else if (ch === 45) {\n\t                    // Hyphen (char code 45) can be part of an identifier.\n\t                    ++this.scanner.index;\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            var id = this.scanner.source.slice(start, this.scanner.index);\n\t            return {\n\t                type: 100 /* Identifier */,\n\t                value: id,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        return this.scanner.lex();\n\t    };\n\t    JSXParser.prototype.nextJSXToken = function () {\n\t        this.collectComments();\n\t        this.startMarker.index = this.scanner.index;\n\t        this.startMarker.line = this.scanner.lineNumber;\n\t        this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        var token = this.lexJSX();\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.line = this.scanner.lineNumber;\n\t        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        if (this.config.tokens) {\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        return token;\n\t    };\n\t    JSXParser.prototype.nextJSXText = function () {\n\t        this.startMarker.index = this.scanner.index;\n\t        this.startMarker.line = this.scanner.lineNumber;\n\t        this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        var start = this.scanner.index;\n\t        var text = '';\n\t        while (!this.scanner.eof()) {\n\t            var ch = this.scanner.source[this.scanner.index];\n\t            if (ch === '{' || ch === '<') {\n\t                break;\n\t            }\n\t            ++this.scanner.index;\n\t            text += ch;\n\t            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                ++this.scanner.lineNumber;\n\t                if (ch === '\\r' && this.scanner.source[this.scanner.index] === '\\n') {\n\t                    ++this.scanner.index;\n\t                }\n\t                this.scanner.lineStart = this.scanner.index;\n\t            }\n\t        }\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.line = this.scanner.lineNumber;\n\t        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        var token = {\n\t            type: 101 /* Text */,\n\t            value: text,\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: this.scanner.lineStart,\n\t            start: start,\n\t            end: this.scanner.index\n\t        };\n\t        if ((text.length > 0) && this.config.tokens) {\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        return token;\n\t    };\n\t    JSXParser.prototype.peekJSXToken = function () {\n\t        var state = this.scanner.saveState();\n\t        this.scanner.scanComments();\n\t        var next = this.lexJSX();\n\t        this.scanner.restoreState(state);\n\t        return next;\n\t    };\n\t    // Expect the next JSX token to match the specified punctuator.\n\t    // If not, an exception will be thrown.\n\t    JSXParser.prototype.expectJSX = function (value) {\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== 7 /* Punctuator */ || token.value !== value) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Return true if the next JSX token matches the specified punctuator.\n\t    JSXParser.prototype.matchJSX = function (value) {\n\t        var next = this.peekJSXToken();\n\t        return next.type === 7 /* Punctuator */ && next.value === value;\n\t    };\n\t    JSXParser.prototype.parseJSXIdentifier = function () {\n\t        var node = this.createJSXNode();\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== 100 /* Identifier */) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXIdentifier(token.value));\n\t    };\n\t    JSXParser.prototype.parseJSXElementName = function () {\n\t        var node = this.createJSXNode();\n\t        var elementName = this.parseJSXIdentifier();\n\t        if (this.matchJSX(':')) {\n\t            var namespace = elementName;\n\t            this.expectJSX(':');\n\t            var name_1 = this.parseJSXIdentifier();\n\t            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));\n\t        }\n\t        else if (this.matchJSX('.')) {\n\t            while (this.matchJSX('.')) {\n\t                var object = elementName;\n\t                this.expectJSX('.');\n\t                var property = this.parseJSXIdentifier();\n\t                elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));\n\t            }\n\t        }\n\t        return elementName;\n\t    };\n\t    JSXParser.prototype.parseJSXAttributeName = function () {\n\t        var node = this.createJSXNode();\n\t        var attributeName;\n\t        var identifier = this.parseJSXIdentifier();\n\t        if (this.matchJSX(':')) {\n\t            var namespace = identifier;\n\t            this.expectJSX(':');\n\t            var name_2 = this.parseJSXIdentifier();\n\t            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));\n\t        }\n\t        else {\n\t            attributeName = identifier;\n\t        }\n\t        return attributeName;\n\t    };\n\t    JSXParser.prototype.parseJSXStringLiteralAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== 8 /* StringLiteral */) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        var raw = this.getTokenRaw(token);\n\t        return this.finalize(node, new Node.Literal(token.value, raw));\n\t    };\n\t    JSXParser.prototype.parseJSXExpressionAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        this.finishJSX();\n\t        if (this.match('}')) {\n\t            this.tolerateError('JSX attributes must only be assigned a non-empty expression');\n\t        }\n\t        var expression = this.parseAssignmentExpression();\n\t        this.reenterJSX();\n\t        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n\t    };\n\t    JSXParser.prototype.parseJSXAttributeValue = function () {\n\t        return this.matchJSX('{') ? this.parseJSXExpressionAttribute() :\n\t            this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();\n\t    };\n\t    JSXParser.prototype.parseJSXNameValueAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        var name = this.parseJSXAttributeName();\n\t        var value = null;\n\t        if (this.matchJSX('=')) {\n\t            this.expectJSX('=');\n\t            value = this.parseJSXAttributeValue();\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXAttribute(name, value));\n\t    };\n\t    JSXParser.prototype.parseJSXSpreadAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        this.expectJSX('...');\n\t        this.finishJSX();\n\t        var argument = this.parseAssignmentExpression();\n\t        this.reenterJSX();\n\t        return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));\n\t    };\n\t    JSXParser.prototype.parseJSXAttributes = function () {\n\t        var attributes = [];\n\t        while (!this.matchJSX('/') && !this.matchJSX('>')) {\n\t            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() :\n\t                this.parseJSXNameValueAttribute();\n\t            attributes.push(attribute);\n\t        }\n\t        return attributes;\n\t    };\n\t    JSXParser.prototype.parseJSXOpeningElement = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('<');\n\t        var name = this.parseJSXElementName();\n\t        var attributes = this.parseJSXAttributes();\n\t        var selfClosing = this.matchJSX('/');\n\t        if (selfClosing) {\n\t            this.expectJSX('/');\n\t        }\n\t        this.expectJSX('>');\n\t        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n\t    };\n\t    JSXParser.prototype.parseJSXBoundaryElement = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('<');\n\t        if (this.matchJSX('/')) {\n\t            this.expectJSX('/');\n\t            var name_3 = this.parseJSXElementName();\n\t            this.expectJSX('>');\n\t            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));\n\t        }\n\t        var name = this.parseJSXElementName();\n\t        var attributes = this.parseJSXAttributes();\n\t        var selfClosing = this.matchJSX('/');\n\t        if (selfClosing) {\n\t            this.expectJSX('/');\n\t        }\n\t        this.expectJSX('>');\n\t        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n\t    };\n\t    JSXParser.prototype.parseJSXEmptyExpression = function () {\n\t        var node = this.createJSXChildNode();\n\t        this.collectComments();\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.line = this.scanner.lineNumber;\n\t        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        return this.finalize(node, new JSXNode.JSXEmptyExpression());\n\t    };\n\t    JSXParser.prototype.parseJSXExpressionContainer = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        var expression;\n\t        if (this.matchJSX('}')) {\n\t            expression = this.parseJSXEmptyExpression();\n\t            this.expectJSX('}');\n\t        }\n\t        else {\n\t            this.finishJSX();\n\t            expression = this.parseAssignmentExpression();\n\t            this.reenterJSX();\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n\t    };\n\t    JSXParser.prototype.parseJSXChildren = function () {\n\t        var children = [];\n\t        while (!this.scanner.eof()) {\n\t            var node = this.createJSXChildNode();\n\t            var token = this.nextJSXText();\n\t            if (token.start < token.end) {\n\t                var raw = this.getTokenRaw(token);\n\t                var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));\n\t                children.push(child);\n\t            }\n\t            if (this.scanner.source[this.scanner.index] === '{') {\n\t                var container = this.parseJSXExpressionContainer();\n\t                children.push(container);\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return children;\n\t    };\n\t    JSXParser.prototype.parseComplexJSXElement = function (el) {\n\t        var stack = [];\n\t        while (!this.scanner.eof()) {\n\t            el.children = el.children.concat(this.parseJSXChildren());\n\t            var node = this.createJSXChildNode();\n\t            var element = this.parseJSXBoundaryElement();\n\t            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {\n\t                var opening = element;\n\t                if (opening.selfClosing) {\n\t                    var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));\n\t                    el.children.push(child);\n\t                }\n\t                else {\n\t                    stack.push(el);\n\t                    el = { node: node, opening: opening, closing: null, children: [] };\n\t                }\n\t            }\n\t            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {\n\t                el.closing = element;\n\t                var open_1 = getQualifiedElementName(el.opening.name);\n\t                var close_1 = getQualifiedElementName(el.closing.name);\n\t                if (open_1 !== close_1) {\n\t                    this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);\n\t                }\n\t                if (stack.length > 0) {\n\t                    var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));\n\t                    el = stack[stack.length - 1];\n\t                    el.children.push(child);\n\t                    stack.pop();\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return el;\n\t    };\n\t    JSXParser.prototype.parseJSXElement = function () {\n\t        var node = this.createJSXNode();\n\t        var opening = this.parseJSXOpeningElement();\n\t        var children = [];\n\t        var closing = null;\n\t        if (!opening.selfClosing) {\n\t            var el = this.parseComplexJSXElement({ node: node, opening: opening, closing: closing, children: children });\n\t            children = el.children;\n\t            closing = el.closing;\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));\n\t    };\n\t    JSXParser.prototype.parseJSXRoot = function () {\n\t        // Pop the opening '<' added from the lookahead.\n\t        if (this.config.tokens) {\n\t            this.tokens.pop();\n\t        }\n\t        this.startJSX();\n\t        var element = this.parseJSXElement();\n\t        this.finishJSX();\n\t        return element;\n\t    };\n\t    JSXParser.prototype.isStartOfExpression = function () {\n\t        return _super.prototype.isStartOfExpression.call(this) || this.match('<');\n\t    };\n\t    return JSXParser;\n\t}(parser_1.Parser));\n\texports.JSXParser = JSXParser;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t// See also tools/generate-unicode-regex.js.\n\tvar Regex = {\n\t    // Unicode v8.0.0 NonAsciiIdentifierStart:\n\t    NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\n\t    // Unicode v8.0.0 NonAsciiIdentifierPart:\n\t    NonAsciiIdentifierPart: /[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/\n\t};\n\texports.Character = {\n\t    /* tslint:disable:no-bitwise */\n\t    fromCodePoint: function (cp) {\n\t        return (cp < 0x10000) ? String.fromCharCode(cp) :\n\t            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +\n\t                String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));\n\t    },\n\t    // https://tc39.github.io/ecma262/#sec-white-space\n\t    isWhiteSpace: function (cp) {\n\t        return (cp === 0x20) || (cp === 0x09) || (cp === 0x0B) || (cp === 0x0C) || (cp === 0xA0) ||\n\t            (cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0);\n\t    },\n\t    // https://tc39.github.io/ecma262/#sec-line-terminators\n\t    isLineTerminator: function (cp) {\n\t        return (cp === 0x0A) || (cp === 0x0D) || (cp === 0x2028) || (cp === 0x2029);\n\t    },\n\t    // https://tc39.github.io/ecma262/#sec-names-and-keywords\n\t    isIdentifierStart: function (cp) {\n\t        return (cp === 0x24) || (cp === 0x5F) ||\n\t            (cp >= 0x41 && cp <= 0x5A) ||\n\t            (cp >= 0x61 && cp <= 0x7A) ||\n\t            (cp === 0x5C) ||\n\t            ((cp >= 0x80) && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp)));\n\t    },\n\t    isIdentifierPart: function (cp) {\n\t        return (cp === 0x24) || (cp === 0x5F) ||\n\t            (cp >= 0x41 && cp <= 0x5A) ||\n\t            (cp >= 0x61 && cp <= 0x7A) ||\n\t            (cp >= 0x30 && cp <= 0x39) ||\n\t            (cp === 0x5C) ||\n\t            ((cp >= 0x80) && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp)));\n\t    },\n\t    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals\n\t    isDecimalDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x39); // 0..9\n\t    },\n\t    isHexDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x39) ||\n\t            (cp >= 0x41 && cp <= 0x46) ||\n\t            (cp >= 0x61 && cp <= 0x66); // a..f\n\t    },\n\t    isOctalDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x37); // 0..7\n\t    }\n\t};\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar jsx_syntax_1 = __webpack_require__(6);\n\t/* tslint:disable:max-classes-per-file */\n\tvar JSXClosingElement = (function () {\n\t    function JSXClosingElement(name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;\n\t        this.name = name;\n\t    }\n\t    return JSXClosingElement;\n\t}());\n\texports.JSXClosingElement = JSXClosingElement;\n\tvar JSXElement = (function () {\n\t    function JSXElement(openingElement, children, closingElement) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXElement;\n\t        this.openingElement = openingElement;\n\t        this.children = children;\n\t        this.closingElement = closingElement;\n\t    }\n\t    return JSXElement;\n\t}());\n\texports.JSXElement = JSXElement;\n\tvar JSXEmptyExpression = (function () {\n\t    function JSXEmptyExpression() {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;\n\t    }\n\t    return JSXEmptyExpression;\n\t}());\n\texports.JSXEmptyExpression = JSXEmptyExpression;\n\tvar JSXExpressionContainer = (function () {\n\t    function JSXExpressionContainer(expression) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;\n\t        this.expression = expression;\n\t    }\n\t    return JSXExpressionContainer;\n\t}());\n\texports.JSXExpressionContainer = JSXExpressionContainer;\n\tvar JSXIdentifier = (function () {\n\t    function JSXIdentifier(name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;\n\t        this.name = name;\n\t    }\n\t    return JSXIdentifier;\n\t}());\n\texports.JSXIdentifier = JSXIdentifier;\n\tvar JSXMemberExpression = (function () {\n\t    function JSXMemberExpression(object, property) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return JSXMemberExpression;\n\t}());\n\texports.JSXMemberExpression = JSXMemberExpression;\n\tvar JSXAttribute = (function () {\n\t    function JSXAttribute(name, value) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;\n\t        this.name = name;\n\t        this.value = value;\n\t    }\n\t    return JSXAttribute;\n\t}());\n\texports.JSXAttribute = JSXAttribute;\n\tvar JSXNamespacedName = (function () {\n\t    function JSXNamespacedName(namespace, name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;\n\t        this.namespace = namespace;\n\t        this.name = name;\n\t    }\n\t    return JSXNamespacedName;\n\t}());\n\texports.JSXNamespacedName = JSXNamespacedName;\n\tvar JSXOpeningElement = (function () {\n\t    function JSXOpeningElement(name, selfClosing, attributes) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;\n\t        this.name = name;\n\t        this.selfClosing = selfClosing;\n\t        this.attributes = attributes;\n\t    }\n\t    return JSXOpeningElement;\n\t}());\n\texports.JSXOpeningElement = JSXOpeningElement;\n\tvar JSXSpreadAttribute = (function () {\n\t    function JSXSpreadAttribute(argument) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;\n\t        this.argument = argument;\n\t    }\n\t    return JSXSpreadAttribute;\n\t}());\n\texports.JSXSpreadAttribute = JSXSpreadAttribute;\n\tvar JSXText = (function () {\n\t    function JSXText(value, raw) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXText;\n\t        this.value = value;\n\t        this.raw = raw;\n\t    }\n\t    return JSXText;\n\t}());\n\texports.JSXText = JSXText;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.JSXSyntax = {\n\t    JSXAttribute: 'JSXAttribute',\n\t    JSXClosingElement: 'JSXClosingElement',\n\t    JSXElement: 'JSXElement',\n\t    JSXEmptyExpression: 'JSXEmptyExpression',\n\t    JSXExpressionContainer: 'JSXExpressionContainer',\n\t    JSXIdentifier: 'JSXIdentifier',\n\t    JSXMemberExpression: 'JSXMemberExpression',\n\t    JSXNamespacedName: 'JSXNamespacedName',\n\t    JSXOpeningElement: 'JSXOpeningElement',\n\t    JSXSpreadAttribute: 'JSXSpreadAttribute',\n\t    JSXText: 'JSXText'\n\t};\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar syntax_1 = __webpack_require__(2);\n\t/* tslint:disable:max-classes-per-file */\n\tvar ArrayExpression = (function () {\n\t    function ArrayExpression(elements) {\n\t        this.type = syntax_1.Syntax.ArrayExpression;\n\t        this.elements = elements;\n\t    }\n\t    return ArrayExpression;\n\t}());\n\texports.ArrayExpression = ArrayExpression;\n\tvar ArrayPattern = (function () {\n\t    function ArrayPattern(elements) {\n\t        this.type = syntax_1.Syntax.ArrayPattern;\n\t        this.elements = elements;\n\t    }\n\t    return ArrayPattern;\n\t}());\n\texports.ArrayPattern = ArrayPattern;\n\tvar ArrowFunctionExpression = (function () {\n\t    function ArrowFunctionExpression(params, body, expression) {\n\t        this.type = syntax_1.Syntax.ArrowFunctionExpression;\n\t        this.id = null;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = false;\n\t        this.expression = expression;\n\t        this.async = false;\n\t    }\n\t    return ArrowFunctionExpression;\n\t}());\n\texports.ArrowFunctionExpression = ArrowFunctionExpression;\n\tvar AssignmentExpression = (function () {\n\t    function AssignmentExpression(operator, left, right) {\n\t        this.type = syntax_1.Syntax.AssignmentExpression;\n\t        this.operator = operator;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return AssignmentExpression;\n\t}());\n\texports.AssignmentExpression = AssignmentExpression;\n\tvar AssignmentPattern = (function () {\n\t    function AssignmentPattern(left, right) {\n\t        this.type = syntax_1.Syntax.AssignmentPattern;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return AssignmentPattern;\n\t}());\n\texports.AssignmentPattern = AssignmentPattern;\n\tvar AsyncArrowFunctionExpression = (function () {\n\t    function AsyncArrowFunctionExpression(params, body, expression) {\n\t        this.type = syntax_1.Syntax.ArrowFunctionExpression;\n\t        this.id = null;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = false;\n\t        this.expression = expression;\n\t        this.async = true;\n\t    }\n\t    return AsyncArrowFunctionExpression;\n\t}());\n\texports.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression;\n\tvar AsyncFunctionDeclaration = (function () {\n\t    function AsyncFunctionDeclaration(id, params, body) {\n\t        this.type = syntax_1.Syntax.FunctionDeclaration;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = false;\n\t        this.expression = false;\n\t        this.async = true;\n\t    }\n\t    return AsyncFunctionDeclaration;\n\t}());\n\texports.AsyncFunctionDeclaration = AsyncFunctionDeclaration;\n\tvar AsyncFunctionExpression = (function () {\n\t    function AsyncFunctionExpression(id, params, body) {\n\t        this.type = syntax_1.Syntax.FunctionExpression;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = false;\n\t        this.expression = false;\n\t        this.async = true;\n\t    }\n\t    return AsyncFunctionExpression;\n\t}());\n\texports.AsyncFunctionExpression = AsyncFunctionExpression;\n\tvar AwaitExpression = (function () {\n\t    function AwaitExpression(argument) {\n\t        this.type = syntax_1.Syntax.AwaitExpression;\n\t        this.argument = argument;\n\t    }\n\t    return AwaitExpression;\n\t}());\n\texports.AwaitExpression = AwaitExpression;\n\tvar BinaryExpression = (function () {\n\t    function BinaryExpression(operator, left, right) {\n\t        var logical = (operator === '||' || operator === '&&');\n\t        this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;\n\t        this.operator = operator;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return BinaryExpression;\n\t}());\n\texports.BinaryExpression = BinaryExpression;\n\tvar BlockStatement = (function () {\n\t    function BlockStatement(body) {\n\t        this.type = syntax_1.Syntax.BlockStatement;\n\t        this.body = body;\n\t    }\n\t    return BlockStatement;\n\t}());\n\texports.BlockStatement = BlockStatement;\n\tvar BreakStatement = (function () {\n\t    function BreakStatement(label) {\n\t        this.type = syntax_1.Syntax.BreakStatement;\n\t        this.label = label;\n\t    }\n\t    return BreakStatement;\n\t}());\n\texports.BreakStatement = BreakStatement;\n\tvar CallExpression = (function () {\n\t    function CallExpression(callee, args) {\n\t        this.type = syntax_1.Syntax.CallExpression;\n\t        this.callee = callee;\n\t        this.arguments = args;\n\t    }\n\t    return CallExpression;\n\t}());\n\texports.CallExpression = CallExpression;\n\tvar CatchClause = (function () {\n\t    function CatchClause(param, body) {\n\t        this.type = syntax_1.Syntax.CatchClause;\n\t        this.param = param;\n\t        this.body = body;\n\t    }\n\t    return CatchClause;\n\t}());\n\texports.CatchClause = CatchClause;\n\tvar ClassBody = (function () {\n\t    function ClassBody(body) {\n\t        this.type = syntax_1.Syntax.ClassBody;\n\t        this.body = body;\n\t    }\n\t    return ClassBody;\n\t}());\n\texports.ClassBody = ClassBody;\n\tvar ClassDeclaration = (function () {\n\t    function ClassDeclaration(id, superClass, body) {\n\t        this.type = syntax_1.Syntax.ClassDeclaration;\n\t        this.id = id;\n\t        this.superClass = superClass;\n\t        this.body = body;\n\t    }\n\t    return ClassDeclaration;\n\t}());\n\texports.ClassDeclaration = ClassDeclaration;\n\tvar ClassExpression = (function () {\n\t    function ClassExpression(id, superClass, body) {\n\t        this.type = syntax_1.Syntax.ClassExpression;\n\t        this.id = id;\n\t        this.superClass = superClass;\n\t        this.body = body;\n\t    }\n\t    return ClassExpression;\n\t}());\n\texports.ClassExpression = ClassExpression;\n\tvar ComputedMemberExpression = (function () {\n\t    function ComputedMemberExpression(object, property) {\n\t        this.type = syntax_1.Syntax.MemberExpression;\n\t        this.computed = true;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return ComputedMemberExpression;\n\t}());\n\texports.ComputedMemberExpression = ComputedMemberExpression;\n\tvar ConditionalExpression = (function () {\n\t    function ConditionalExpression(test, consequent, alternate) {\n\t        this.type = syntax_1.Syntax.ConditionalExpression;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t        this.alternate = alternate;\n\t    }\n\t    return ConditionalExpression;\n\t}());\n\texports.ConditionalExpression = ConditionalExpression;\n\tvar ContinueStatement = (function () {\n\t    function ContinueStatement(label) {\n\t        this.type = syntax_1.Syntax.ContinueStatement;\n\t        this.label = label;\n\t    }\n\t    return ContinueStatement;\n\t}());\n\texports.ContinueStatement = ContinueStatement;\n\tvar DebuggerStatement = (function () {\n\t    function DebuggerStatement() {\n\t        this.type = syntax_1.Syntax.DebuggerStatement;\n\t    }\n\t    return DebuggerStatement;\n\t}());\n\texports.DebuggerStatement = DebuggerStatement;\n\tvar Directive = (function () {\n\t    function Directive(expression, directive) {\n\t        this.type = syntax_1.Syntax.ExpressionStatement;\n\t        this.expression = expression;\n\t        this.directive = directive;\n\t    }\n\t    return Directive;\n\t}());\n\texports.Directive = Directive;\n\tvar DoWhileStatement = (function () {\n\t    function DoWhileStatement(body, test) {\n\t        this.type = syntax_1.Syntax.DoWhileStatement;\n\t        this.body = body;\n\t        this.test = test;\n\t    }\n\t    return DoWhileStatement;\n\t}());\n\texports.DoWhileStatement = DoWhileStatement;\n\tvar EmptyStatement = (function () {\n\t    function EmptyStatement() {\n\t        this.type = syntax_1.Syntax.EmptyStatement;\n\t    }\n\t    return EmptyStatement;\n\t}());\n\texports.EmptyStatement = EmptyStatement;\n\tvar ExportAllDeclaration = (function () {\n\t    function ExportAllDeclaration(source) {\n\t        this.type = syntax_1.Syntax.ExportAllDeclaration;\n\t        this.source = source;\n\t    }\n\t    return ExportAllDeclaration;\n\t}());\n\texports.ExportAllDeclaration = ExportAllDeclaration;\n\tvar ExportDefaultDeclaration = (function () {\n\t    function ExportDefaultDeclaration(declaration) {\n\t        this.type = syntax_1.Syntax.ExportDefaultDeclaration;\n\t        this.declaration = declaration;\n\t    }\n\t    return ExportDefaultDeclaration;\n\t}());\n\texports.ExportDefaultDeclaration = ExportDefaultDeclaration;\n\tvar ExportNamedDeclaration = (function () {\n\t    function ExportNamedDeclaration(declaration, specifiers, source) {\n\t        this.type = syntax_1.Syntax.ExportNamedDeclaration;\n\t        this.declaration = declaration;\n\t        this.specifiers = specifiers;\n\t        this.source = source;\n\t    }\n\t    return ExportNamedDeclaration;\n\t}());\n\texports.ExportNamedDeclaration = ExportNamedDeclaration;\n\tvar ExportSpecifier = (function () {\n\t    function ExportSpecifier(local, exported) {\n\t        this.type = syntax_1.Syntax.ExportSpecifier;\n\t        this.exported = exported;\n\t        this.local = local;\n\t    }\n\t    return ExportSpecifier;\n\t}());\n\texports.ExportSpecifier = ExportSpecifier;\n\tvar ExpressionStatement = (function () {\n\t    function ExpressionStatement(expression) {\n\t        this.type = syntax_1.Syntax.ExpressionStatement;\n\t        this.expression = expression;\n\t    }\n\t    return ExpressionStatement;\n\t}());\n\texports.ExpressionStatement = ExpressionStatement;\n\tvar ForInStatement = (function () {\n\t    function ForInStatement(left, right, body) {\n\t        this.type = syntax_1.Syntax.ForInStatement;\n\t        this.left = left;\n\t        this.right = right;\n\t        this.body = body;\n\t        this.each = false;\n\t    }\n\t    return ForInStatement;\n\t}());\n\texports.ForInStatement = ForInStatement;\n\tvar ForOfStatement = (function () {\n\t    function ForOfStatement(left, right, body) {\n\t        this.type = syntax_1.Syntax.ForOfStatement;\n\t        this.left = left;\n\t        this.right = right;\n\t        this.body = body;\n\t    }\n\t    return ForOfStatement;\n\t}());\n\texports.ForOfStatement = ForOfStatement;\n\tvar ForStatement = (function () {\n\t    function ForStatement(init, test, update, body) {\n\t        this.type = syntax_1.Syntax.ForStatement;\n\t        this.init = init;\n\t        this.test = test;\n\t        this.update = update;\n\t        this.body = body;\n\t    }\n\t    return ForStatement;\n\t}());\n\texports.ForStatement = ForStatement;\n\tvar FunctionDeclaration = (function () {\n\t    function FunctionDeclaration(id, params, body, generator) {\n\t        this.type = syntax_1.Syntax.FunctionDeclaration;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = generator;\n\t        this.expression = false;\n\t        this.async = false;\n\t    }\n\t    return FunctionDeclaration;\n\t}());\n\texports.FunctionDeclaration = FunctionDeclaration;\n\tvar FunctionExpression = (function () {\n\t    function FunctionExpression(id, params, body, generator) {\n\t        this.type = syntax_1.Syntax.FunctionExpression;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = generator;\n\t        this.expression = false;\n\t        this.async = false;\n\t    }\n\t    return FunctionExpression;\n\t}());\n\texports.FunctionExpression = FunctionExpression;\n\tvar Identifier = (function () {\n\t    function Identifier(name) {\n\t        this.type = syntax_1.Syntax.Identifier;\n\t        this.name = name;\n\t    }\n\t    return Identifier;\n\t}());\n\texports.Identifier = Identifier;\n\tvar IfStatement = (function () {\n\t    function IfStatement(test, consequent, alternate) {\n\t        this.type = syntax_1.Syntax.IfStatement;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t        this.alternate = alternate;\n\t    }\n\t    return IfStatement;\n\t}());\n\texports.IfStatement = IfStatement;\n\tvar ImportDeclaration = (function () {\n\t    function ImportDeclaration(specifiers, source) {\n\t        this.type = syntax_1.Syntax.ImportDeclaration;\n\t        this.specifiers = specifiers;\n\t        this.source = source;\n\t    }\n\t    return ImportDeclaration;\n\t}());\n\texports.ImportDeclaration = ImportDeclaration;\n\tvar ImportDefaultSpecifier = (function () {\n\t    function ImportDefaultSpecifier(local) {\n\t        this.type = syntax_1.Syntax.ImportDefaultSpecifier;\n\t        this.local = local;\n\t    }\n\t    return ImportDefaultSpecifier;\n\t}());\n\texports.ImportDefaultSpecifier = ImportDefaultSpecifier;\n\tvar ImportNamespaceSpecifier = (function () {\n\t    function ImportNamespaceSpecifier(local) {\n\t        this.type = syntax_1.Syntax.ImportNamespaceSpecifier;\n\t        this.local = local;\n\t    }\n\t    return ImportNamespaceSpecifier;\n\t}());\n\texports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\n\tvar ImportSpecifier = (function () {\n\t    function ImportSpecifier(local, imported) {\n\t        this.type = syntax_1.Syntax.ImportSpecifier;\n\t        this.local = local;\n\t        this.imported = imported;\n\t    }\n\t    return ImportSpecifier;\n\t}());\n\texports.ImportSpecifier = ImportSpecifier;\n\tvar LabeledStatement = (function () {\n\t    function LabeledStatement(label, body) {\n\t        this.type = syntax_1.Syntax.LabeledStatement;\n\t        this.label = label;\n\t        this.body = body;\n\t    }\n\t    return LabeledStatement;\n\t}());\n\texports.LabeledStatement = LabeledStatement;\n\tvar Literal = (function () {\n\t    function Literal(value, raw) {\n\t        this.type = syntax_1.Syntax.Literal;\n\t        this.value = value;\n\t        this.raw = raw;\n\t    }\n\t    return Literal;\n\t}());\n\texports.Literal = Literal;\n\tvar MetaProperty = (function () {\n\t    function MetaProperty(meta, property) {\n\t        this.type = syntax_1.Syntax.MetaProperty;\n\t        this.meta = meta;\n\t        this.property = property;\n\t    }\n\t    return MetaProperty;\n\t}());\n\texports.MetaProperty = MetaProperty;\n\tvar MethodDefinition = (function () {\n\t    function MethodDefinition(key, computed, value, kind, isStatic) {\n\t        this.type = syntax_1.Syntax.MethodDefinition;\n\t        this.key = key;\n\t        this.computed = computed;\n\t        this.value = value;\n\t        this.kind = kind;\n\t        this.static = isStatic;\n\t    }\n\t    return MethodDefinition;\n\t}());\n\texports.MethodDefinition = MethodDefinition;\n\tvar Module = (function () {\n\t    function Module(body) {\n\t        this.type = syntax_1.Syntax.Program;\n\t        this.body = body;\n\t        this.sourceType = 'module';\n\t    }\n\t    return Module;\n\t}());\n\texports.Module = Module;\n\tvar NewExpression = (function () {\n\t    function NewExpression(callee, args) {\n\t        this.type = syntax_1.Syntax.NewExpression;\n\t        this.callee = callee;\n\t        this.arguments = args;\n\t    }\n\t    return NewExpression;\n\t}());\n\texports.NewExpression = NewExpression;\n\tvar ObjectExpression = (function () {\n\t    function ObjectExpression(properties) {\n\t        this.type = syntax_1.Syntax.ObjectExpression;\n\t        this.properties = properties;\n\t    }\n\t    return ObjectExpression;\n\t}());\n\texports.ObjectExpression = ObjectExpression;\n\tvar ObjectPattern = (function () {\n\t    function ObjectPattern(properties) {\n\t        this.type = syntax_1.Syntax.ObjectPattern;\n\t        this.properties = properties;\n\t    }\n\t    return ObjectPattern;\n\t}());\n\texports.ObjectPattern = ObjectPattern;\n\tvar Property = (function () {\n\t    function Property(kind, key, computed, value, method, shorthand) {\n\t        this.type = syntax_1.Syntax.Property;\n\t        this.key = key;\n\t        this.computed = computed;\n\t        this.value = value;\n\t        this.kind = kind;\n\t        this.method = method;\n\t        this.shorthand = shorthand;\n\t    }\n\t    return Property;\n\t}());\n\texports.Property = Property;\n\tvar RegexLiteral = (function () {\n\t    function RegexLiteral(value, raw, pattern, flags) {\n\t        this.type = syntax_1.Syntax.Literal;\n\t        this.value = value;\n\t        this.raw = raw;\n\t        this.regex = { pattern: pattern, flags: flags };\n\t    }\n\t    return RegexLiteral;\n\t}());\n\texports.RegexLiteral = RegexLiteral;\n\tvar RestElement = (function () {\n\t    function RestElement(argument) {\n\t        this.type = syntax_1.Syntax.RestElement;\n\t        this.argument = argument;\n\t    }\n\t    return RestElement;\n\t}());\n\texports.RestElement = RestElement;\n\tvar ReturnStatement = (function () {\n\t    function ReturnStatement(argument) {\n\t        this.type = syntax_1.Syntax.ReturnStatement;\n\t        this.argument = argument;\n\t    }\n\t    return ReturnStatement;\n\t}());\n\texports.ReturnStatement = ReturnStatement;\n\tvar Script = (function () {\n\t    function Script(body) {\n\t        this.type = syntax_1.Syntax.Program;\n\t        this.body = body;\n\t        this.sourceType = 'script';\n\t    }\n\t    return Script;\n\t}());\n\texports.Script = Script;\n\tvar SequenceExpression = (function () {\n\t    function SequenceExpression(expressions) {\n\t        this.type = syntax_1.Syntax.SequenceExpression;\n\t        this.expressions = expressions;\n\t    }\n\t    return SequenceExpression;\n\t}());\n\texports.SequenceExpression = SequenceExpression;\n\tvar SpreadElement = (function () {\n\t    function SpreadElement(argument) {\n\t        this.type = syntax_1.Syntax.SpreadElement;\n\t        this.argument = argument;\n\t    }\n\t    return SpreadElement;\n\t}());\n\texports.SpreadElement = SpreadElement;\n\tvar StaticMemberExpression = (function () {\n\t    function StaticMemberExpression(object, property) {\n\t        this.type = syntax_1.Syntax.MemberExpression;\n\t        this.computed = false;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return StaticMemberExpression;\n\t}());\n\texports.StaticMemberExpression = StaticMemberExpression;\n\tvar Super = (function () {\n\t    function Super() {\n\t        this.type = syntax_1.Syntax.Super;\n\t    }\n\t    return Super;\n\t}());\n\texports.Super = Super;\n\tvar SwitchCase = (function () {\n\t    function SwitchCase(test, consequent) {\n\t        this.type = syntax_1.Syntax.SwitchCase;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t    }\n\t    return SwitchCase;\n\t}());\n\texports.SwitchCase = SwitchCase;\n\tvar SwitchStatement = (function () {\n\t    function SwitchStatement(discriminant, cases) {\n\t        this.type = syntax_1.Syntax.SwitchStatement;\n\t        this.discriminant = discriminant;\n\t        this.cases = cases;\n\t    }\n\t    return SwitchStatement;\n\t}());\n\texports.SwitchStatement = SwitchStatement;\n\tvar TaggedTemplateExpression = (function () {\n\t    function TaggedTemplateExpression(tag, quasi) {\n\t        this.type = syntax_1.Syntax.TaggedTemplateExpression;\n\t        this.tag = tag;\n\t        this.quasi = quasi;\n\t    }\n\t    return TaggedTemplateExpression;\n\t}());\n\texports.TaggedTemplateExpression = TaggedTemplateExpression;\n\tvar TemplateElement = (function () {\n\t    function TemplateElement(value, tail) {\n\t        this.type = syntax_1.Syntax.TemplateElement;\n\t        this.value = value;\n\t        this.tail = tail;\n\t    }\n\t    return TemplateElement;\n\t}());\n\texports.TemplateElement = TemplateElement;\n\tvar TemplateLiteral = (function () {\n\t    function TemplateLiteral(quasis, expressions) {\n\t        this.type = syntax_1.Syntax.TemplateLiteral;\n\t        this.quasis = quasis;\n\t        this.expressions = expressions;\n\t    }\n\t    return TemplateLiteral;\n\t}());\n\texports.TemplateLiteral = TemplateLiteral;\n\tvar ThisExpression = (function () {\n\t    function ThisExpression() {\n\t        this.type = syntax_1.Syntax.ThisExpression;\n\t    }\n\t    return ThisExpression;\n\t}());\n\texports.ThisExpression = ThisExpression;\n\tvar ThrowStatement = (function () {\n\t    function ThrowStatement(argument) {\n\t        this.type = syntax_1.Syntax.ThrowStatement;\n\t        this.argument = argument;\n\t    }\n\t    return ThrowStatement;\n\t}());\n\texports.ThrowStatement = ThrowStatement;\n\tvar TryStatement = (function () {\n\t    function TryStatement(block, handler, finalizer) {\n\t        this.type = syntax_1.Syntax.TryStatement;\n\t        this.block = block;\n\t        this.handler = handler;\n\t        this.finalizer = finalizer;\n\t    }\n\t    return TryStatement;\n\t}());\n\texports.TryStatement = TryStatement;\n\tvar UnaryExpression = (function () {\n\t    function UnaryExpression(operator, argument) {\n\t        this.type = syntax_1.Syntax.UnaryExpression;\n\t        this.operator = operator;\n\t        this.argument = argument;\n\t        this.prefix = true;\n\t    }\n\t    return UnaryExpression;\n\t}());\n\texports.UnaryExpression = UnaryExpression;\n\tvar UpdateExpression = (function () {\n\t    function UpdateExpression(operator, argument, prefix) {\n\t        this.type = syntax_1.Syntax.UpdateExpression;\n\t        this.operator = operator;\n\t        this.argument = argument;\n\t        this.prefix = prefix;\n\t    }\n\t    return UpdateExpression;\n\t}());\n\texports.UpdateExpression = UpdateExpression;\n\tvar VariableDeclaration = (function () {\n\t    function VariableDeclaration(declarations, kind) {\n\t        this.type = syntax_1.Syntax.VariableDeclaration;\n\t        this.declarations = declarations;\n\t        this.kind = kind;\n\t    }\n\t    return VariableDeclaration;\n\t}());\n\texports.VariableDeclaration = VariableDeclaration;\n\tvar VariableDeclarator = (function () {\n\t    function VariableDeclarator(id, init) {\n\t        this.type = syntax_1.Syntax.VariableDeclarator;\n\t        this.id = id;\n\t        this.init = init;\n\t    }\n\t    return VariableDeclarator;\n\t}());\n\texports.VariableDeclarator = VariableDeclarator;\n\tvar WhileStatement = (function () {\n\t    function WhileStatement(test, body) {\n\t        this.type = syntax_1.Syntax.WhileStatement;\n\t        this.test = test;\n\t        this.body = body;\n\t    }\n\t    return WhileStatement;\n\t}());\n\texports.WhileStatement = WhileStatement;\n\tvar WithStatement = (function () {\n\t    function WithStatement(object, body) {\n\t        this.type = syntax_1.Syntax.WithStatement;\n\t        this.object = object;\n\t        this.body = body;\n\t    }\n\t    return WithStatement;\n\t}());\n\texports.WithStatement = WithStatement;\n\tvar YieldExpression = (function () {\n\t    function YieldExpression(argument, delegate) {\n\t        this.type = syntax_1.Syntax.YieldExpression;\n\t        this.argument = argument;\n\t        this.delegate = delegate;\n\t    }\n\t    return YieldExpression;\n\t}());\n\texports.YieldExpression = YieldExpression;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar assert_1 = __webpack_require__(9);\n\tvar error_handler_1 = __webpack_require__(10);\n\tvar messages_1 = __webpack_require__(11);\n\tvar Node = __webpack_require__(7);\n\tvar scanner_1 = __webpack_require__(12);\n\tvar syntax_1 = __webpack_require__(2);\n\tvar token_1 = __webpack_require__(13);\n\tvar ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';\n\tvar Parser = (function () {\n\t    function Parser(code, options, delegate) {\n\t        if (options === void 0) { options = {}; }\n\t        this.config = {\n\t            range: (typeof options.range === 'boolean') && options.range,\n\t            loc: (typeof options.loc === 'boolean') && options.loc,\n\t            source: null,\n\t            tokens: (typeof options.tokens === 'boolean') && options.tokens,\n\t            comment: (typeof options.comment === 'boolean') && options.comment,\n\t            tolerant: (typeof options.tolerant === 'boolean') && options.tolerant\n\t        };\n\t        if (this.config.loc && options.source && options.source !== null) {\n\t            this.config.source = String(options.source);\n\t        }\n\t        this.delegate = delegate;\n\t        this.errorHandler = new error_handler_1.ErrorHandler();\n\t        this.errorHandler.tolerant = this.config.tolerant;\n\t        this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n\t        this.scanner.trackComment = this.config.comment;\n\t        this.operatorPrecedence = {\n\t            ')': 0,\n\t            ';': 0,\n\t            ',': 0,\n\t            '=': 0,\n\t            ']': 0,\n\t            '||': 1,\n\t            '&&': 2,\n\t            '|': 3,\n\t            '^': 4,\n\t            '&': 5,\n\t            '==': 6,\n\t            '!=': 6,\n\t            '===': 6,\n\t            '!==': 6,\n\t            '<': 7,\n\t            '>': 7,\n\t            '<=': 7,\n\t            '>=': 7,\n\t            '<<': 8,\n\t            '>>': 8,\n\t            '>>>': 8,\n\t            '+': 9,\n\t            '-': 9,\n\t            '*': 11,\n\t            '/': 11,\n\t            '%': 11\n\t        };\n\t        this.lookahead = {\n\t            type: 2 /* EOF */,\n\t            value: '',\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: 0,\n\t            start: 0,\n\t            end: 0\n\t        };\n\t        this.hasLineTerminator = false;\n\t        this.context = {\n\t            isModule: false,\n\t            await: false,\n\t            allowIn: true,\n\t            allowStrictDirective: true,\n\t            allowYield: true,\n\t            firstCoverInitializedNameError: null,\n\t            isAssignmentTarget: false,\n\t            isBindingElement: false,\n\t            inFunctionBody: false,\n\t            inIteration: false,\n\t            inSwitch: false,\n\t            labelSet: {},\n\t            strict: false\n\t        };\n\t        this.tokens = [];\n\t        this.startMarker = {\n\t            index: 0,\n\t            line: this.scanner.lineNumber,\n\t            column: 0\n\t        };\n\t        this.lastMarker = {\n\t            index: 0,\n\t            line: this.scanner.lineNumber,\n\t            column: 0\n\t        };\n\t        this.nextToken();\n\t        this.lastMarker = {\n\t            index: this.scanner.index,\n\t            line: this.scanner.lineNumber,\n\t            column: this.scanner.index - this.scanner.lineStart\n\t        };\n\t    }\n\t    Parser.prototype.throwError = function (messageFormat) {\n\t        var values = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            values[_i - 1] = arguments[_i];\n\t        }\n\t        var args = Array.prototype.slice.call(arguments, 1);\n\t        var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n\t            assert_1.assert(idx < args.length, 'Message reference must be in range');\n\t            return args[idx];\n\t        });\n\t        var index = this.lastMarker.index;\n\t        var line = this.lastMarker.line;\n\t        var column = this.lastMarker.column + 1;\n\t        throw this.errorHandler.createError(index, line, column, msg);\n\t    };\n\t    Parser.prototype.tolerateError = function (messageFormat) {\n\t        var values = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            values[_i - 1] = arguments[_i];\n\t        }\n\t        var args = Array.prototype.slice.call(arguments, 1);\n\t        var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n\t            assert_1.assert(idx < args.length, 'Message reference must be in range');\n\t            return args[idx];\n\t        });\n\t        var index = this.lastMarker.index;\n\t        var line = this.scanner.lineNumber;\n\t        var column = this.lastMarker.column + 1;\n\t        this.errorHandler.tolerateError(index, line, column, msg);\n\t    };\n\t    // Throw an exception because of the token.\n\t    Parser.prototype.unexpectedTokenError = function (token, message) {\n\t        var msg = message || messages_1.Messages.UnexpectedToken;\n\t        var value;\n\t        if (token) {\n\t            if (!message) {\n\t                msg = (token.type === 2 /* EOF */) ? messages_1.Messages.UnexpectedEOS :\n\t                    (token.type === 3 /* Identifier */) ? messages_1.Messages.UnexpectedIdentifier :\n\t                        (token.type === 6 /* NumericLiteral */) ? messages_1.Messages.UnexpectedNumber :\n\t                            (token.type === 8 /* StringLiteral */) ? messages_1.Messages.UnexpectedString :\n\t                                (token.type === 10 /* Template */) ? messages_1.Messages.UnexpectedTemplate :\n\t                                    messages_1.Messages.UnexpectedToken;\n\t                if (token.type === 4 /* Keyword */) {\n\t                    if (this.scanner.isFutureReservedWord(token.value)) {\n\t                        msg = messages_1.Messages.UnexpectedReserved;\n\t                    }\n\t                    else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {\n\t                        msg = messages_1.Messages.StrictReservedWord;\n\t                    }\n\t                }\n\t            }\n\t            value = token.value;\n\t        }\n\t        else {\n\t            value = 'ILLEGAL';\n\t        }\n\t        msg = msg.replace('%0', value);\n\t        if (token && typeof token.lineNumber === 'number') {\n\t            var index = token.start;\n\t            var line = token.lineNumber;\n\t            var lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;\n\t            var column = token.start - lastMarkerLineStart + 1;\n\t            return this.errorHandler.createError(index, line, column, msg);\n\t        }\n\t        else {\n\t            var index = this.lastMarker.index;\n\t            var line = this.lastMarker.line;\n\t            var column = this.lastMarker.column + 1;\n\t            return this.errorHandler.createError(index, line, column, msg);\n\t        }\n\t    };\n\t    Parser.prototype.throwUnexpectedToken = function (token, message) {\n\t        throw this.unexpectedTokenError(token, message);\n\t    };\n\t    Parser.prototype.tolerateUnexpectedToken = function (token, message) {\n\t        this.errorHandler.tolerate(this.unexpectedTokenError(token, message));\n\t    };\n\t    Parser.prototype.collectComments = function () {\n\t        if (!this.config.comment) {\n\t            this.scanner.scanComments();\n\t        }\n\t        else {\n\t            var comments = this.scanner.scanComments();\n\t            if (comments.length > 0 && this.delegate) {\n\t                for (var i = 0; i < comments.length; ++i) {\n\t                    var e = comments[i];\n\t                    var node = void 0;\n\t                    node = {\n\t                        type: e.multiLine ? 'BlockComment' : 'LineComment',\n\t                        value: this.scanner.source.slice(e.slice[0], e.slice[1])\n\t                    };\n\t                    if (this.config.range) {\n\t                        node.range = e.range;\n\t                    }\n\t                    if (this.config.loc) {\n\t                        node.loc = e.loc;\n\t                    }\n\t                    var metadata = {\n\t                        start: {\n\t                            line: e.loc.start.line,\n\t                            column: e.loc.start.column,\n\t                            offset: e.range[0]\n\t                        },\n\t                        end: {\n\t                            line: e.loc.end.line,\n\t                            column: e.loc.end.column,\n\t                            offset: e.range[1]\n\t                        }\n\t                    };\n\t                    this.delegate(node, metadata);\n\t                }\n\t            }\n\t        }\n\t    };\n\t    // From internal representation to an external structure\n\t    Parser.prototype.getTokenRaw = function (token) {\n\t        return this.scanner.source.slice(token.start, token.end);\n\t    };\n\t    Parser.prototype.convertToken = function (token) {\n\t        var t = {\n\t            type: token_1.TokenName[token.type],\n\t            value: this.getTokenRaw(token)\n\t        };\n\t        if (this.config.range) {\n\t            t.range = [token.start, token.end];\n\t        }\n\t        if (this.config.loc) {\n\t            t.loc = {\n\t                start: {\n\t                    line: this.startMarker.line,\n\t                    column: this.startMarker.column\n\t                },\n\t                end: {\n\t                    line: this.scanner.lineNumber,\n\t                    column: this.scanner.index - this.scanner.lineStart\n\t                }\n\t            };\n\t        }\n\t        if (token.type === 9 /* RegularExpression */) {\n\t            var pattern = token.pattern;\n\t            var flags = token.flags;\n\t            t.regex = { pattern: pattern, flags: flags };\n\t        }\n\t        return t;\n\t    };\n\t    Parser.prototype.nextToken = function () {\n\t        var token = this.lookahead;\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.line = this.scanner.lineNumber;\n\t        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        this.collectComments();\n\t        if (this.scanner.index !== this.startMarker.index) {\n\t            this.startMarker.index = this.scanner.index;\n\t            this.startMarker.line = this.scanner.lineNumber;\n\t            this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        }\n\t        var next = this.scanner.lex();\n\t        this.hasLineTerminator = (token.lineNumber !== next.lineNumber);\n\t        if (next && this.context.strict && next.type === 3 /* Identifier */) {\n\t            if (this.scanner.isStrictModeReservedWord(next.value)) {\n\t                next.type = 4 /* Keyword */;\n\t            }\n\t        }\n\t        this.lookahead = next;\n\t        if (this.config.tokens && next.type !== 2 /* EOF */) {\n\t            this.tokens.push(this.convertToken(next));\n\t        }\n\t        return token;\n\t    };\n\t    Parser.prototype.nextRegexToken = function () {\n\t        this.collectComments();\n\t        var token = this.scanner.scanRegExp();\n\t        if (this.config.tokens) {\n\t            // Pop the previous token, '/' or '/='\n\t            // This is added from the lookahead token.\n\t            this.tokens.pop();\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        // Prime the next lookahead.\n\t        this.lookahead = token;\n\t        this.nextToken();\n\t        return token;\n\t    };\n\t    Parser.prototype.createNode = function () {\n\t        return {\n\t            index: this.startMarker.index,\n\t            line: this.startMarker.line,\n\t            column: this.startMarker.column\n\t        };\n\t    };\n\t    Parser.prototype.startNode = function (token, lastLineStart) {\n\t        if (lastLineStart === void 0) { lastLineStart = 0; }\n\t        var column = token.start - token.lineStart;\n\t        var line = token.lineNumber;\n\t        if (column < 0) {\n\t            column += lastLineStart;\n\t            line--;\n\t        }\n\t        return {\n\t            index: token.start,\n\t            line: line,\n\t            column: column\n\t        };\n\t    };\n\t    Parser.prototype.finalize = function (marker, node) {\n\t        if (this.config.range) {\n\t            node.range = [marker.index, this.lastMarker.index];\n\t        }\n\t        if (this.config.loc) {\n\t            node.loc = {\n\t                start: {\n\t                    line: marker.line,\n\t                    column: marker.column,\n\t                },\n\t                end: {\n\t                    line: this.lastMarker.line,\n\t                    column: this.lastMarker.column\n\t                }\n\t            };\n\t            if (this.config.source) {\n\t                node.loc.source = this.config.source;\n\t            }\n\t        }\n\t        if (this.delegate) {\n\t            var metadata = {\n\t                start: {\n\t                    line: marker.line,\n\t                    column: marker.column,\n\t                    offset: marker.index\n\t                },\n\t                end: {\n\t                    line: this.lastMarker.line,\n\t                    column: this.lastMarker.column,\n\t                    offset: this.lastMarker.index\n\t                }\n\t            };\n\t            this.delegate(node, metadata);\n\t        }\n\t        return node;\n\t    };\n\t    // Expect the next token to match the specified punctuator.\n\t    // If not, an exception will be thrown.\n\t    Parser.prototype.expect = function (value) {\n\t        var token = this.nextToken();\n\t        if (token.type !== 7 /* Punctuator */ || token.value !== value) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().\n\t    Parser.prototype.expectCommaSeparator = function () {\n\t        if (this.config.tolerant) {\n\t            var token = this.lookahead;\n\t            if (token.type === 7 /* Punctuator */ && token.value === ',') {\n\t                this.nextToken();\n\t            }\n\t            else if (token.type === 7 /* Punctuator */ && token.value === ';') {\n\t                this.nextToken();\n\t                this.tolerateUnexpectedToken(token);\n\t            }\n\t            else {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);\n\t            }\n\t        }\n\t        else {\n\t            this.expect(',');\n\t        }\n\t    };\n\t    // Expect the next token to match the specified keyword.\n\t    // If not, an exception will be thrown.\n\t    Parser.prototype.expectKeyword = function (keyword) {\n\t        var token = this.nextToken();\n\t        if (token.type !== 4 /* Keyword */ || token.value !== keyword) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Return true if the next token matches the specified punctuator.\n\t    Parser.prototype.match = function (value) {\n\t        return this.lookahead.type === 7 /* Punctuator */ && this.lookahead.value === value;\n\t    };\n\t    // Return true if the next token matches the specified keyword\n\t    Parser.prototype.matchKeyword = function (keyword) {\n\t        return this.lookahead.type === 4 /* Keyword */ && this.lookahead.value === keyword;\n\t    };\n\t    // Return true if the next token matches the specified contextual keyword\n\t    // (where an identifier is sometimes a keyword depending on the context)\n\t    Parser.prototype.matchContextualKeyword = function (keyword) {\n\t        return this.lookahead.type === 3 /* Identifier */ && this.lookahead.value === keyword;\n\t    };\n\t    // Return true if the next token is an assignment operator\n\t    Parser.prototype.matchAssign = function () {\n\t        if (this.lookahead.type !== 7 /* Punctuator */) {\n\t            return false;\n\t        }\n\t        var op = this.lookahead.value;\n\t        return op === '=' ||\n\t            op === '*=' ||\n\t            op === '**=' ||\n\t            op === '/=' ||\n\t            op === '%=' ||\n\t            op === '+=' ||\n\t            op === '-=' ||\n\t            op === '<<=' ||\n\t            op === '>>=' ||\n\t            op === '>>>=' ||\n\t            op === '&=' ||\n\t            op === '^=' ||\n\t            op === '|=';\n\t    };\n\t    // Cover grammar support.\n\t    //\n\t    // When an assignment expression position starts with an left parenthesis, the determination of the type\n\t    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)\n\t    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.\n\t    //\n\t    // There are three productions that can be parsed in a parentheses pair that needs to be determined\n\t    // after the outermost pair is closed. They are:\n\t    //\n\t    //   1. AssignmentExpression\n\t    //   2. BindingElements\n\t    //   3. AssignmentTargets\n\t    //\n\t    // In order to avoid exponential backtracking, we use two flags to denote if the production can be\n\t    // binding element or assignment target.\n\t    //\n\t    // The three productions have the relationship:\n\t    //\n\t    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression\n\t    //\n\t    // with a single exception that CoverInitializedName when used directly in an Expression, generates\n\t    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the\n\t    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.\n\t    //\n\t    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not\n\t    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore\n\t    // the CoverInitializedName check is conducted.\n\t    //\n\t    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates\n\t    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential\n\t    // pattern. The CoverInitializedName check is deferred.\n\t    Parser.prototype.isolateCoverGrammar = function (parseFunction) {\n\t        var previousIsBindingElement = this.context.isBindingElement;\n\t        var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n\t        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n\t        this.context.isBindingElement = true;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.firstCoverInitializedNameError = null;\n\t        var result = parseFunction.call(this);\n\t        if (this.context.firstCoverInitializedNameError !== null) {\n\t            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);\n\t        }\n\t        this.context.isBindingElement = previousIsBindingElement;\n\t        this.context.isAssignmentTarget = previousIsAssignmentTarget;\n\t        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;\n\t        return result;\n\t    };\n\t    Parser.prototype.inheritCoverGrammar = function (parseFunction) {\n\t        var previousIsBindingElement = this.context.isBindingElement;\n\t        var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n\t        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n\t        this.context.isBindingElement = true;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.firstCoverInitializedNameError = null;\n\t        var result = parseFunction.call(this);\n\t        this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;\n\t        this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;\n\t        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;\n\t        return result;\n\t    };\n\t    Parser.prototype.consumeSemicolon = function () {\n\t        if (this.match(';')) {\n\t            this.nextToken();\n\t        }\n\t        else if (!this.hasLineTerminator) {\n\t            if (this.lookahead.type !== 2 /* EOF */ && !this.match('}')) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            this.lastMarker.index = this.startMarker.index;\n\t            this.lastMarker.line = this.startMarker.line;\n\t            this.lastMarker.column = this.startMarker.column;\n\t        }\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-primary-expression\n\t    Parser.prototype.parsePrimaryExpression = function () {\n\t        var node = this.createNode();\n\t        var expr;\n\t        var token, raw;\n\t        switch (this.lookahead.type) {\n\t            case 3 /* Identifier */:\n\t                if ((this.context.isModule || this.context.await) && this.lookahead.value === 'await') {\n\t                    this.tolerateUnexpectedToken(this.lookahead);\n\t                }\n\t                expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Node.Identifier(this.nextToken().value));\n\t                break;\n\t            case 6 /* NumericLiteral */:\n\t            case 8 /* StringLiteral */:\n\t                if (this.context.strict && this.lookahead.octal) {\n\t                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case 1 /* BooleanLiteral */:\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(token.value === 'true', raw));\n\t                break;\n\t            case 5 /* NullLiteral */:\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(null, raw));\n\t                break;\n\t            case 10 /* Template */:\n\t                expr = this.parseTemplateLiteral();\n\t                break;\n\t            case 7 /* Punctuator */:\n\t                switch (this.lookahead.value) {\n\t                    case '(':\n\t                        this.context.isBindingElement = false;\n\t                        expr = this.inheritCoverGrammar(this.parseGroupExpression);\n\t                        break;\n\t                    case '[':\n\t                        expr = this.inheritCoverGrammar(this.parseArrayInitializer);\n\t                        break;\n\t                    case '{':\n\t                        expr = this.inheritCoverGrammar(this.parseObjectInitializer);\n\t                        break;\n\t                    case '/':\n\t                    case '/=':\n\t                        this.context.isAssignmentTarget = false;\n\t                        this.context.isBindingElement = false;\n\t                        this.scanner.index = this.startMarker.index;\n\t                        token = this.nextRegexToken();\n\t                        raw = this.getTokenRaw(token);\n\t                        expr = this.finalize(node, new Node.RegexLiteral(token.regex, raw, token.pattern, token.flags));\n\t                        break;\n\t                    default:\n\t                        expr = this.throwUnexpectedToken(this.nextToken());\n\t                }\n\t                break;\n\t            case 4 /* Keyword */:\n\t                if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {\n\t                    expr = this.parseIdentifierName();\n\t                }\n\t                else if (!this.context.strict && this.matchKeyword('let')) {\n\t                    expr = this.finalize(node, new Node.Identifier(this.nextToken().value));\n\t                }\n\t                else {\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    if (this.matchKeyword('function')) {\n\t                        expr = this.parseFunctionExpression();\n\t                    }\n\t                    else if (this.matchKeyword('this')) {\n\t                        this.nextToken();\n\t                        expr = this.finalize(node, new Node.ThisExpression());\n\t                    }\n\t                    else if (this.matchKeyword('class')) {\n\t                        expr = this.parseClassExpression();\n\t                    }\n\t                    else {\n\t                        expr = this.throwUnexpectedToken(this.nextToken());\n\t                    }\n\t                }\n\t                break;\n\t            default:\n\t                expr = this.throwUnexpectedToken(this.nextToken());\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-array-initializer\n\t    Parser.prototype.parseSpreadElement = function () {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t        return this.finalize(node, new Node.SpreadElement(arg));\n\t    };\n\t    Parser.prototype.parseArrayInitializer = function () {\n\t        var node = this.createNode();\n\t        var elements = [];\n\t        this.expect('[');\n\t        while (!this.match(']')) {\n\t            if (this.match(',')) {\n\t                this.nextToken();\n\t                elements.push(null);\n\t            }\n\t            else if (this.match('...')) {\n\t                var element = this.parseSpreadElement();\n\t                if (!this.match(']')) {\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    this.expect(',');\n\t                }\n\t                elements.push(element);\n\t            }\n\t            else {\n\t                elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n\t                if (!this.match(']')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t        }\n\t        this.expect(']');\n\t        return this.finalize(node, new Node.ArrayExpression(elements));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-object-initializer\n\t    Parser.prototype.parsePropertyMethod = function (params) {\n\t        this.context.isAssignmentTarget = false;\n\t        this.context.isBindingElement = false;\n\t        var previousStrict = this.context.strict;\n\t        var previousAllowStrictDirective = this.context.allowStrictDirective;\n\t        this.context.allowStrictDirective = params.simple;\n\t        var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);\n\t        if (this.context.strict && params.firstRestricted) {\n\t            this.tolerateUnexpectedToken(params.firstRestricted, params.message);\n\t        }\n\t        if (this.context.strict && params.stricted) {\n\t            this.tolerateUnexpectedToken(params.stricted, params.message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        this.context.allowStrictDirective = previousAllowStrictDirective;\n\t        return body;\n\t    };\n\t    Parser.prototype.parsePropertyMethodFunction = function () {\n\t        var isGenerator = false;\n\t        var node = this.createNode();\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = true;\n\t        var params = this.parseFormalParameters();\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parsePropertyMethodAsyncFunction = function () {\n\t        var node = this.createNode();\n\t        var previousAllowYield = this.context.allowYield;\n\t        var previousAwait = this.context.await;\n\t        this.context.allowYield = false;\n\t        this.context.await = true;\n\t        var params = this.parseFormalParameters();\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        this.context.await = previousAwait;\n\t        return this.finalize(node, new Node.AsyncFunctionExpression(null, params.params, method));\n\t    };\n\t    Parser.prototype.parseObjectPropertyKey = function () {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var key;\n\t        switch (token.type) {\n\t            case 8 /* StringLiteral */:\n\t            case 6 /* NumericLiteral */:\n\t                if (this.context.strict && token.octal) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t                var raw = this.getTokenRaw(token);\n\t                key = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case 3 /* Identifier */:\n\t            case 1 /* BooleanLiteral */:\n\t            case 5 /* NullLiteral */:\n\t            case 4 /* Keyword */:\n\t                key = this.finalize(node, new Node.Identifier(token.value));\n\t                break;\n\t            case 7 /* Punctuator */:\n\t                if (token.value === '[') {\n\t                    key = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    this.expect(']');\n\t                }\n\t                else {\n\t                    key = this.throwUnexpectedToken(token);\n\t                }\n\t                break;\n\t            default:\n\t                key = this.throwUnexpectedToken(token);\n\t        }\n\t        return key;\n\t    };\n\t    Parser.prototype.isPropertyKey = function (key, value) {\n\t        return (key.type === syntax_1.Syntax.Identifier && key.name === value) ||\n\t            (key.type === syntax_1.Syntax.Literal && key.value === value);\n\t    };\n\t    Parser.prototype.parseObjectProperty = function (hasProto) {\n\t        var node = this.createNode();\n\t        var token = this.lookahead;\n\t        var kind;\n\t        var key = null;\n\t        var value = null;\n\t        var computed = false;\n\t        var method = false;\n\t        var shorthand = false;\n\t        var isAsync = false;\n\t        if (token.type === 3 /* Identifier */) {\n\t            var id = token.value;\n\t            this.nextToken();\n\t            computed = this.match('[');\n\t            isAsync = !this.hasLineTerminator && (id === 'async') &&\n\t                !this.match(':') && !this.match('(') && !this.match('*') && !this.match(',');\n\t            key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Node.Identifier(id));\n\t        }\n\t        else if (this.match('*')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t        }\n\t        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\t        if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'get' && lookaheadPropertyKey) {\n\t            kind = 'get';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            this.context.allowYield = false;\n\t            value = this.parseGetterMethod();\n\t        }\n\t        else if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'set' && lookaheadPropertyKey) {\n\t            kind = 'set';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseSetterMethod();\n\t        }\n\t        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {\n\t            kind = 'init';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseGeneratorMethod();\n\t            method = true;\n\t        }\n\t        else {\n\t            if (!key) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            kind = 'init';\n\t            if (this.match(':') && !isAsync) {\n\t                if (!computed && this.isPropertyKey(key, '__proto__')) {\n\t                    if (hasProto.value) {\n\t                        this.tolerateError(messages_1.Messages.DuplicateProtoProperty);\n\t                    }\n\t                    hasProto.value = true;\n\t                }\n\t                this.nextToken();\n\t                value = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t            }\n\t            else if (this.match('(')) {\n\t                value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();\n\t                method = true;\n\t            }\n\t            else if (token.type === 3 /* Identifier */) {\n\t                var id = this.finalize(node, new Node.Identifier(token.value));\n\t                if (this.match('=')) {\n\t                    this.context.firstCoverInitializedNameError = this.lookahead;\n\t                    this.nextToken();\n\t                    shorthand = true;\n\t                    var init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    value = this.finalize(node, new Node.AssignmentPattern(id, init));\n\t                }\n\t                else {\n\t                    shorthand = true;\n\t                    value = id;\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));\n\t    };\n\t    Parser.prototype.parseObjectInitializer = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var properties = [];\n\t        var hasProto = { value: false };\n\t        while (!this.match('}')) {\n\t            properties.push(this.parseObjectProperty(hasProto));\n\t            if (!this.match('}')) {\n\t                this.expectCommaSeparator();\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.ObjectExpression(properties));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-template-literals\n\t    Parser.prototype.parseTemplateHead = function () {\n\t        assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var raw = token.value;\n\t        var cooked = token.cooked;\n\t        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));\n\t    };\n\t    Parser.prototype.parseTemplateElement = function () {\n\t        if (this.lookahead.type !== 10 /* Template */) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var raw = token.value;\n\t        var cooked = token.cooked;\n\t        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));\n\t    };\n\t    Parser.prototype.parseTemplateLiteral = function () {\n\t        var node = this.createNode();\n\t        var expressions = [];\n\t        var quasis = [];\n\t        var quasi = this.parseTemplateHead();\n\t        quasis.push(quasi);\n\t        while (!quasi.tail) {\n\t            expressions.push(this.parseExpression());\n\t            quasi = this.parseTemplateElement();\n\t            quasis.push(quasi);\n\t        }\n\t        return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-grouping-operator\n\t    Parser.prototype.reinterpretExpressionAsPattern = function (expr) {\n\t        switch (expr.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t            case syntax_1.Syntax.MemberExpression:\n\t            case syntax_1.Syntax.RestElement:\n\t            case syntax_1.Syntax.AssignmentPattern:\n\t                break;\n\t            case syntax_1.Syntax.SpreadElement:\n\t                expr.type = syntax_1.Syntax.RestElement;\n\t                this.reinterpretExpressionAsPattern(expr.argument);\n\t                break;\n\t            case syntax_1.Syntax.ArrayExpression:\n\t                expr.type = syntax_1.Syntax.ArrayPattern;\n\t                for (var i = 0; i < expr.elements.length; i++) {\n\t                    if (expr.elements[i] !== null) {\n\t                        this.reinterpretExpressionAsPattern(expr.elements[i]);\n\t                    }\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.ObjectExpression:\n\t                expr.type = syntax_1.Syntax.ObjectPattern;\n\t                for (var i = 0; i < expr.properties.length; i++) {\n\t                    this.reinterpretExpressionAsPattern(expr.properties[i].value);\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.AssignmentExpression:\n\t                expr.type = syntax_1.Syntax.AssignmentPattern;\n\t                delete expr.operator;\n\t                this.reinterpretExpressionAsPattern(expr.left);\n\t                break;\n\t            default:\n\t                // Allow other node type for tolerant parsing.\n\t                break;\n\t        }\n\t    };\n\t    Parser.prototype.parseGroupExpression = function () {\n\t        var expr;\n\t        this.expect('(');\n\t        if (this.match(')')) {\n\t            this.nextToken();\n\t            if (!this.match('=>')) {\n\t                this.expect('=>');\n\t            }\n\t            expr = {\n\t                type: ArrowParameterPlaceHolder,\n\t                params: [],\n\t                async: false\n\t            };\n\t        }\n\t        else {\n\t            var startToken = this.lookahead;\n\t            var params = [];\n\t            if (this.match('...')) {\n\t                expr = this.parseRestElement(params);\n\t                this.expect(')');\n\t                if (!this.match('=>')) {\n\t                    this.expect('=>');\n\t                }\n\t                expr = {\n\t                    type: ArrowParameterPlaceHolder,\n\t                    params: [expr],\n\t                    async: false\n\t                };\n\t            }\n\t            else {\n\t                var arrow = false;\n\t                this.context.isBindingElement = true;\n\t                expr = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t                if (this.match(',')) {\n\t                    var expressions = [];\n\t                    this.context.isAssignmentTarget = false;\n\t                    expressions.push(expr);\n\t                    while (this.lookahead.type !== 2 /* EOF */) {\n\t                        if (!this.match(',')) {\n\t                            break;\n\t                        }\n\t                        this.nextToken();\n\t                        if (this.match(')')) {\n\t                            this.nextToken();\n\t                            for (var i = 0; i < expressions.length; i++) {\n\t                                this.reinterpretExpressionAsPattern(expressions[i]);\n\t                            }\n\t                            arrow = true;\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: expressions,\n\t                                async: false\n\t                            };\n\t                        }\n\t                        else if (this.match('...')) {\n\t                            if (!this.context.isBindingElement) {\n\t                                this.throwUnexpectedToken(this.lookahead);\n\t                            }\n\t                            expressions.push(this.parseRestElement(params));\n\t                            this.expect(')');\n\t                            if (!this.match('=>')) {\n\t                                this.expect('=>');\n\t                            }\n\t                            this.context.isBindingElement = false;\n\t                            for (var i = 0; i < expressions.length; i++) {\n\t                                this.reinterpretExpressionAsPattern(expressions[i]);\n\t                            }\n\t                            arrow = true;\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: expressions,\n\t                                async: false\n\t                            };\n\t                        }\n\t                        else {\n\t                            expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n\t                        }\n\t                        if (arrow) {\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (!arrow) {\n\t                        expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n\t                    }\n\t                }\n\t                if (!arrow) {\n\t                    this.expect(')');\n\t                    if (this.match('=>')) {\n\t                        if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {\n\t                            arrow = true;\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: [expr],\n\t                                async: false\n\t                            };\n\t                        }\n\t                        if (!arrow) {\n\t                            if (!this.context.isBindingElement) {\n\t                                this.throwUnexpectedToken(this.lookahead);\n\t                            }\n\t                            if (expr.type === syntax_1.Syntax.SequenceExpression) {\n\t                                for (var i = 0; i < expr.expressions.length; i++) {\n\t                                    this.reinterpretExpressionAsPattern(expr.expressions[i]);\n\t                                }\n\t                            }\n\t                            else {\n\t                                this.reinterpretExpressionAsPattern(expr);\n\t                            }\n\t                            var parameters = (expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr]);\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: parameters,\n\t                                async: false\n\t                            };\n\t                        }\n\t                    }\n\t                    this.context.isBindingElement = false;\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions\n\t    Parser.prototype.parseArguments = function () {\n\t        this.expect('(');\n\t        var args = [];\n\t        if (!this.match(')')) {\n\t            while (true) {\n\t                var expr = this.match('...') ? this.parseSpreadElement() :\n\t                    this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                args.push(expr);\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t                this.expectCommaSeparator();\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        this.expect(')');\n\t        return args;\n\t    };\n\t    Parser.prototype.isIdentifierName = function (token) {\n\t        return token.type === 3 /* Identifier */ ||\n\t            token.type === 4 /* Keyword */ ||\n\t            token.type === 1 /* BooleanLiteral */ ||\n\t            token.type === 5 /* NullLiteral */;\n\t    };\n\t    Parser.prototype.parseIdentifierName = function () {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        if (!this.isIdentifierName(token)) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new Node.Identifier(token.value));\n\t    };\n\t    Parser.prototype.parseNewExpression = function () {\n\t        var node = this.createNode();\n\t        var id = this.parseIdentifierName();\n\t        assert_1.assert(id.name === 'new', 'New expression must start with `new`');\n\t        var expr;\n\t        if (this.match('.')) {\n\t            this.nextToken();\n\t            if (this.lookahead.type === 3 /* Identifier */ && this.context.inFunctionBody && this.lookahead.value === 'target') {\n\t                var property = this.parseIdentifierName();\n\t                expr = new Node.MetaProperty(id, property);\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t        }\n\t        else {\n\t            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);\n\t            var args = this.match('(') ? this.parseArguments() : [];\n\t            expr = new Node.NewExpression(callee, args);\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        return this.finalize(node, expr);\n\t    };\n\t    Parser.prototype.parseAsyncArgument = function () {\n\t        var arg = this.parseAssignmentExpression();\n\t        this.context.firstCoverInitializedNameError = null;\n\t        return arg;\n\t    };\n\t    Parser.prototype.parseAsyncArguments = function () {\n\t        this.expect('(');\n\t        var args = [];\n\t        if (!this.match(')')) {\n\t            while (true) {\n\t                var expr = this.match('...') ? this.parseSpreadElement() :\n\t                    this.isolateCoverGrammar(this.parseAsyncArgument);\n\t                args.push(expr);\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t                this.expectCommaSeparator();\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        this.expect(')');\n\t        return args;\n\t    };\n\t    Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {\n\t        var startToken = this.lookahead;\n\t        var maybeAsync = this.matchContextualKeyword('async');\n\t        var previousAllowIn = this.context.allowIn;\n\t        this.context.allowIn = true;\n\t        var expr;\n\t        if (this.matchKeyword('super') && this.context.inFunctionBody) {\n\t            expr = this.createNode();\n\t            this.nextToken();\n\t            expr = this.finalize(expr, new Node.Super());\n\t            if (!this.match('(') && !this.match('.') && !this.match('[')) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t        }\n\t        else {\n\t            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n\t        }\n\t        while (true) {\n\t            if (this.match('.')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('.');\n\t                var property = this.parseIdentifierName();\n\t                expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));\n\t            }\n\t            else if (this.match('(')) {\n\t                var asyncArrow = maybeAsync && (startToken.lineNumber === this.lookahead.lineNumber);\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = false;\n\t                var args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();\n\t                expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));\n\t                if (asyncArrow && this.match('=>')) {\n\t                    for (var i = 0; i < args.length; ++i) {\n\t                        this.reinterpretExpressionAsPattern(args[i]);\n\t                    }\n\t                    expr = {\n\t                        type: ArrowParameterPlaceHolder,\n\t                        params: args,\n\t                        async: true\n\t                    };\n\t                }\n\t            }\n\t            else if (this.match('[')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('[');\n\t                var property = this.isolateCoverGrammar(this.parseExpression);\n\t                this.expect(']');\n\t                expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));\n\t            }\n\t            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {\n\t                var quasi = this.parseTemplateLiteral();\n\t                expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        this.context.allowIn = previousAllowIn;\n\t        return expr;\n\t    };\n\t    Parser.prototype.parseSuper = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('super');\n\t        if (!this.match('[') && !this.match('.')) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        return this.finalize(node, new Node.Super());\n\t    };\n\t    Parser.prototype.parseLeftHandSideExpression = function () {\n\t        assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');\n\t        var node = this.startNode(this.lookahead);\n\t        var expr = (this.matchKeyword('super') && this.context.inFunctionBody) ? this.parseSuper() :\n\t            this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n\t        while (true) {\n\t            if (this.match('[')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('[');\n\t                var property = this.isolateCoverGrammar(this.parseExpression);\n\t                this.expect(']');\n\t                expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));\n\t            }\n\t            else if (this.match('.')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('.');\n\t                var property = this.parseIdentifierName();\n\t                expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));\n\t            }\n\t            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {\n\t                var quasi = this.parseTemplateLiteral();\n\t                expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-update-expressions\n\t    Parser.prototype.parseUpdateExpression = function () {\n\t        var expr;\n\t        var startToken = this.lookahead;\n\t        if (this.match('++') || this.match('--')) {\n\t            var node = this.startNode(startToken);\n\t            var token = this.nextToken();\n\t            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n\t                this.tolerateError(messages_1.Messages.StrictLHSPrefix);\n\t            }\n\t            if (!this.context.isAssignmentTarget) {\n\t                this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t            }\n\t            var prefix = true;\n\t            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        else {\n\t            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t            if (!this.hasLineTerminator && this.lookahead.type === 7 /* Punctuator */) {\n\t                if (this.match('++') || this.match('--')) {\n\t                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n\t                        this.tolerateError(messages_1.Messages.StrictLHSPostfix);\n\t                    }\n\t                    if (!this.context.isAssignmentTarget) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t                    }\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    var operator = this.nextToken().value;\n\t                    var prefix = false;\n\t                    expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-unary-operators\n\t    Parser.prototype.parseAwaitExpression = function () {\n\t        var node = this.createNode();\n\t        this.nextToken();\n\t        var argument = this.parseUnaryExpression();\n\t        return this.finalize(node, new Node.AwaitExpression(argument));\n\t    };\n\t    Parser.prototype.parseUnaryExpression = function () {\n\t        var expr;\n\t        if (this.match('+') || this.match('-') || this.match('~') || this.match('!') ||\n\t            this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {\n\t            var node = this.startNode(this.lookahead);\n\t            var token = this.nextToken();\n\t            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));\n\t            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {\n\t                this.tolerateError(messages_1.Messages.StrictDelete);\n\t            }\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        else if (this.context.await && this.matchContextualKeyword('await')) {\n\t            expr = this.parseAwaitExpression();\n\t        }\n\t        else {\n\t            expr = this.parseUpdateExpression();\n\t        }\n\t        return expr;\n\t    };\n\t    Parser.prototype.parseExponentiationExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t        if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {\n\t            this.nextToken();\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t            var left = expr;\n\t            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n\t            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-exp-operator\n\t    // https://tc39.github.io/ecma262/#sec-multiplicative-operators\n\t    // https://tc39.github.io/ecma262/#sec-additive-operators\n\t    // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators\n\t    // https://tc39.github.io/ecma262/#sec-relational-operators\n\t    // https://tc39.github.io/ecma262/#sec-equality-operators\n\t    // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators\n\t    // https://tc39.github.io/ecma262/#sec-binary-logical-operators\n\t    Parser.prototype.binaryPrecedence = function (token) {\n\t        var op = token.value;\n\t        var precedence;\n\t        if (token.type === 7 /* Punctuator */) {\n\t            precedence = this.operatorPrecedence[op] || 0;\n\t        }\n\t        else if (token.type === 4 /* Keyword */) {\n\t            precedence = (op === 'instanceof' || (this.context.allowIn && op === 'in')) ? 7 : 0;\n\t        }\n\t        else {\n\t            precedence = 0;\n\t        }\n\t        return precedence;\n\t    };\n\t    Parser.prototype.parseBinaryExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);\n\t        var token = this.lookahead;\n\t        var prec = this.binaryPrecedence(token);\n\t        if (prec > 0) {\n\t            this.nextToken();\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t            var markers = [startToken, this.lookahead];\n\t            var left = expr;\n\t            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n\t            var stack = [left, token.value, right];\n\t            var precedences = [prec];\n\t            while (true) {\n\t                prec = this.binaryPrecedence(this.lookahead);\n\t                if (prec <= 0) {\n\t                    break;\n\t                }\n\t                // Reduce: make a binary expression from the three topmost entries.\n\t                while ((stack.length > 2) && (prec <= precedences[precedences.length - 1])) {\n\t                    right = stack.pop();\n\t                    var operator = stack.pop();\n\t                    precedences.pop();\n\t                    left = stack.pop();\n\t                    markers.pop();\n\t                    var node = this.startNode(markers[markers.length - 1]);\n\t                    stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));\n\t                }\n\t                // Shift.\n\t                stack.push(this.nextToken().value);\n\t                precedences.push(prec);\n\t                markers.push(this.lookahead);\n\t                stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));\n\t            }\n\t            // Final reduce to clean-up the stack.\n\t            var i = stack.length - 1;\n\t            expr = stack[i];\n\t            var lastMarker = markers.pop();\n\t            while (i > 1) {\n\t                var marker = markers.pop();\n\t                var lastLineStart = lastMarker && lastMarker.lineStart;\n\t                var node = this.startNode(marker, lastLineStart);\n\t                var operator = stack[i - 1];\n\t                expr = this.finalize(node, new Node.BinaryExpression(operator, stack[i - 2], expr));\n\t                i -= 2;\n\t                lastMarker = marker;\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-conditional-operator\n\t    Parser.prototype.parseConditionalExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseBinaryExpression);\n\t        if (this.match('?')) {\n\t            this.nextToken();\n\t            var previousAllowIn = this.context.allowIn;\n\t            this.context.allowIn = true;\n\t            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            this.context.allowIn = previousAllowIn;\n\t            this.expect(':');\n\t            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-assignment-operators\n\t    Parser.prototype.checkPatternParam = function (options, param) {\n\t        switch (param.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t                this.validateParam(options, param, param.name);\n\t                break;\n\t            case syntax_1.Syntax.RestElement:\n\t                this.checkPatternParam(options, param.argument);\n\t                break;\n\t            case syntax_1.Syntax.AssignmentPattern:\n\t                this.checkPatternParam(options, param.left);\n\t                break;\n\t            case syntax_1.Syntax.ArrayPattern:\n\t                for (var i = 0; i < param.elements.length; i++) {\n\t                    if (param.elements[i] !== null) {\n\t                        this.checkPatternParam(options, param.elements[i]);\n\t                    }\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.ObjectPattern:\n\t                for (var i = 0; i < param.properties.length; i++) {\n\t                    this.checkPatternParam(options, param.properties[i].value);\n\t                }\n\t                break;\n\t            default:\n\t                break;\n\t        }\n\t        options.simple = options.simple && (param instanceof Node.Identifier);\n\t    };\n\t    Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {\n\t        var params = [expr];\n\t        var options;\n\t        var asyncArrow = false;\n\t        switch (expr.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t                break;\n\t            case ArrowParameterPlaceHolder:\n\t                params = expr.params;\n\t                asyncArrow = expr.async;\n\t                break;\n\t            default:\n\t                return null;\n\t        }\n\t        options = {\n\t            simple: true,\n\t            paramSet: {}\n\t        };\n\t        for (var i = 0; i < params.length; ++i) {\n\t            var param = params[i];\n\t            if (param.type === syntax_1.Syntax.AssignmentPattern) {\n\t                if (param.right.type === syntax_1.Syntax.YieldExpression) {\n\t                    if (param.right.argument) {\n\t                        this.throwUnexpectedToken(this.lookahead);\n\t                    }\n\t                    param.right.type = syntax_1.Syntax.Identifier;\n\t                    param.right.name = 'yield';\n\t                    delete param.right.argument;\n\t                    delete param.right.delegate;\n\t                }\n\t            }\n\t            else if (asyncArrow && param.type === syntax_1.Syntax.Identifier && param.name === 'await') {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            this.checkPatternParam(options, param);\n\t            params[i] = param;\n\t        }\n\t        if (this.context.strict || !this.context.allowYield) {\n\t            for (var i = 0; i < params.length; ++i) {\n\t                var param = params[i];\n\t                if (param.type === syntax_1.Syntax.YieldExpression) {\n\t                    this.throwUnexpectedToken(this.lookahead);\n\t                }\n\t            }\n\t        }\n\t        if (options.message === messages_1.Messages.StrictParamDupe) {\n\t            var token = this.context.strict ? options.stricted : options.firstRestricted;\n\t            this.throwUnexpectedToken(token, options.message);\n\t        }\n\t        return {\n\t            simple: options.simple,\n\t            params: params,\n\t            stricted: options.stricted,\n\t            firstRestricted: options.firstRestricted,\n\t            message: options.message\n\t        };\n\t    };\n\t    Parser.prototype.parseAssignmentExpression = function () {\n\t        var expr;\n\t        if (!this.context.allowYield && this.matchKeyword('yield')) {\n\t            expr = this.parseYieldExpression();\n\t        }\n\t        else {\n\t            var startToken = this.lookahead;\n\t            var token = startToken;\n\t            expr = this.parseConditionalExpression();\n\t            if (token.type === 3 /* Identifier */ && (token.lineNumber === this.lookahead.lineNumber) && token.value === 'async') {\n\t                if (this.lookahead.type === 3 /* Identifier */ || this.matchKeyword('yield')) {\n\t                    var arg = this.parsePrimaryExpression();\n\t                    this.reinterpretExpressionAsPattern(arg);\n\t                    expr = {\n\t                        type: ArrowParameterPlaceHolder,\n\t                        params: [arg],\n\t                        async: true\n\t                    };\n\t                }\n\t            }\n\t            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {\n\t                // https://tc39.github.io/ecma262/#sec-arrow-function-definitions\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                var isAsync = expr.async;\n\t                var list = this.reinterpretAsCoverFormalsList(expr);\n\t                if (list) {\n\t                    if (this.hasLineTerminator) {\n\t                        this.tolerateUnexpectedToken(this.lookahead);\n\t                    }\n\t                    this.context.firstCoverInitializedNameError = null;\n\t                    var previousStrict = this.context.strict;\n\t                    var previousAllowStrictDirective = this.context.allowStrictDirective;\n\t                    this.context.allowStrictDirective = list.simple;\n\t                    var previousAllowYield = this.context.allowYield;\n\t                    var previousAwait = this.context.await;\n\t                    this.context.allowYield = true;\n\t                    this.context.await = isAsync;\n\t                    var node = this.startNode(startToken);\n\t                    this.expect('=>');\n\t                    var body = void 0;\n\t                    if (this.match('{')) {\n\t                        var previousAllowIn = this.context.allowIn;\n\t                        this.context.allowIn = true;\n\t                        body = this.parseFunctionSourceElements();\n\t                        this.context.allowIn = previousAllowIn;\n\t                    }\n\t                    else {\n\t                        body = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    }\n\t                    var expression = body.type !== syntax_1.Syntax.BlockStatement;\n\t                    if (this.context.strict && list.firstRestricted) {\n\t                        this.throwUnexpectedToken(list.firstRestricted, list.message);\n\t                    }\n\t                    if (this.context.strict && list.stricted) {\n\t                        this.tolerateUnexpectedToken(list.stricted, list.message);\n\t                    }\n\t                    expr = isAsync ? this.finalize(node, new Node.AsyncArrowFunctionExpression(list.params, body, expression)) :\n\t                        this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));\n\t                    this.context.strict = previousStrict;\n\t                    this.context.allowStrictDirective = previousAllowStrictDirective;\n\t                    this.context.allowYield = previousAllowYield;\n\t                    this.context.await = previousAwait;\n\t                }\n\t            }\n\t            else {\n\t                if (this.matchAssign()) {\n\t                    if (!this.context.isAssignmentTarget) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t                    }\n\t                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {\n\t                        var id = expr;\n\t                        if (this.scanner.isRestrictedWord(id.name)) {\n\t                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);\n\t                        }\n\t                        if (this.scanner.isStrictModeReservedWord(id.name)) {\n\t                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t                        }\n\t                    }\n\t                    if (!this.match('=')) {\n\t                        this.context.isAssignmentTarget = false;\n\t                        this.context.isBindingElement = false;\n\t                    }\n\t                    else {\n\t                        this.reinterpretExpressionAsPattern(expr);\n\t                    }\n\t                    token = this.nextToken();\n\t                    var operator = token.value;\n\t                    var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(operator, expr, right));\n\t                    this.context.firstCoverInitializedNameError = null;\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-comma-operator\n\t    Parser.prototype.parseExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        if (this.match(',')) {\n\t            var expressions = [];\n\t            expressions.push(expr);\n\t            while (this.lookahead.type !== 2 /* EOF */) {\n\t                if (!this.match(',')) {\n\t                    break;\n\t                }\n\t                this.nextToken();\n\t                expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n\t            }\n\t            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-block\n\t    Parser.prototype.parseStatementListItem = function () {\n\t        var statement;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.isBindingElement = true;\n\t        if (this.lookahead.type === 4 /* Keyword */) {\n\t            switch (this.lookahead.value) {\n\t                case 'export':\n\t                    if (!this.context.isModule) {\n\t                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);\n\t                    }\n\t                    statement = this.parseExportDeclaration();\n\t                    break;\n\t                case 'import':\n\t                    if (!this.context.isModule) {\n\t                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);\n\t                    }\n\t                    statement = this.parseImportDeclaration();\n\t                    break;\n\t                case 'const':\n\t                    statement = this.parseLexicalDeclaration({ inFor: false });\n\t                    break;\n\t                case 'function':\n\t                    statement = this.parseFunctionDeclaration();\n\t                    break;\n\t                case 'class':\n\t                    statement = this.parseClassDeclaration();\n\t                    break;\n\t                case 'let':\n\t                    statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();\n\t                    break;\n\t                default:\n\t                    statement = this.parseStatement();\n\t                    break;\n\t            }\n\t        }\n\t        else {\n\t            statement = this.parseStatement();\n\t        }\n\t        return statement;\n\t    };\n\t    Parser.prototype.parseBlock = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var block = [];\n\t        while (true) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            block.push(this.parseStatementListItem());\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.BlockStatement(block));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-let-and-const-declarations\n\t    Parser.prototype.parseLexicalBinding = function (kind, options) {\n\t        var node = this.createNode();\n\t        var params = [];\n\t        var id = this.parsePattern(params, kind);\n\t        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord(id.name)) {\n\t                this.tolerateError(messages_1.Messages.StrictVarName);\n\t            }\n\t        }\n\t        var init = null;\n\t        if (kind === 'const') {\n\t            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {\n\t                if (this.match('=')) {\n\t                    this.nextToken();\n\t                    init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                }\n\t                else {\n\t                    this.throwError(messages_1.Messages.DeclarationMissingInitializer, 'const');\n\t                }\n\t            }\n\t        }\n\t        else if ((!options.inFor && id.type !== syntax_1.Syntax.Identifier) || this.match('=')) {\n\t            this.expect('=');\n\t            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        }\n\t        return this.finalize(node, new Node.VariableDeclarator(id, init));\n\t    };\n\t    Parser.prototype.parseBindingList = function (kind, options) {\n\t        var list = [this.parseLexicalBinding(kind, options)];\n\t        while (this.match(',')) {\n\t            this.nextToken();\n\t            list.push(this.parseLexicalBinding(kind, options));\n\t        }\n\t        return list;\n\t    };\n\t    Parser.prototype.isLexicalDeclaration = function () {\n\t        var state = this.scanner.saveState();\n\t        this.scanner.scanComments();\n\t        var next = this.scanner.lex();\n\t        this.scanner.restoreState(state);\n\t        return (next.type === 3 /* Identifier */) ||\n\t            (next.type === 7 /* Punctuator */ && next.value === '[') ||\n\t            (next.type === 7 /* Punctuator */ && next.value === '{') ||\n\t            (next.type === 4 /* Keyword */ && next.value === 'let') ||\n\t            (next.type === 4 /* Keyword */ && next.value === 'yield');\n\t    };\n\t    Parser.prototype.parseLexicalDeclaration = function (options) {\n\t        var node = this.createNode();\n\t        var kind = this.nextToken().value;\n\t        assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');\n\t        var declarations = this.parseBindingList(kind, options);\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.VariableDeclaration(declarations, kind));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns\n\t    Parser.prototype.parseBindingRestElement = function (params, kind) {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.parsePattern(params, kind);\n\t        return this.finalize(node, new Node.RestElement(arg));\n\t    };\n\t    Parser.prototype.parseArrayPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        this.expect('[');\n\t        var elements = [];\n\t        while (!this.match(']')) {\n\t            if (this.match(',')) {\n\t                this.nextToken();\n\t                elements.push(null);\n\t            }\n\t            else {\n\t                if (this.match('...')) {\n\t                    elements.push(this.parseBindingRestElement(params, kind));\n\t                    break;\n\t                }\n\t                else {\n\t                    elements.push(this.parsePatternWithDefault(params, kind));\n\t                }\n\t                if (!this.match(']')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t        }\n\t        this.expect(']');\n\t        return this.finalize(node, new Node.ArrayPattern(elements));\n\t    };\n\t    Parser.prototype.parsePropertyPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        var computed = false;\n\t        var shorthand = false;\n\t        var method = false;\n\t        var key;\n\t        var value;\n\t        if (this.lookahead.type === 3 /* Identifier */) {\n\t            var keyToken = this.lookahead;\n\t            key = this.parseVariableIdentifier();\n\t            var init = this.finalize(node, new Node.Identifier(keyToken.value));\n\t            if (this.match('=')) {\n\t                params.push(keyToken);\n\t                shorthand = true;\n\t                this.nextToken();\n\t                var expr = this.parseAssignmentExpression();\n\t                value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));\n\t            }\n\t            else if (!this.match(':')) {\n\t                params.push(keyToken);\n\t                shorthand = true;\n\t                value = init;\n\t            }\n\t            else {\n\t                this.expect(':');\n\t                value = this.parsePatternWithDefault(params, kind);\n\t            }\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            this.expect(':');\n\t            value = this.parsePatternWithDefault(params, kind);\n\t        }\n\t        return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));\n\t    };\n\t    Parser.prototype.parseObjectPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        var properties = [];\n\t        this.expect('{');\n\t        while (!this.match('}')) {\n\t            properties.push(this.parsePropertyPattern(params, kind));\n\t            if (!this.match('}')) {\n\t                this.expect(',');\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.ObjectPattern(properties));\n\t    };\n\t    Parser.prototype.parsePattern = function (params, kind) {\n\t        var pattern;\n\t        if (this.match('[')) {\n\t            pattern = this.parseArrayPattern(params, kind);\n\t        }\n\t        else if (this.match('{')) {\n\t            pattern = this.parseObjectPattern(params, kind);\n\t        }\n\t        else {\n\t            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {\n\t                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.LetInLexicalBinding);\n\t            }\n\t            params.push(this.lookahead);\n\t            pattern = this.parseVariableIdentifier(kind);\n\t        }\n\t        return pattern;\n\t    };\n\t    Parser.prototype.parsePatternWithDefault = function (params, kind) {\n\t        var startToken = this.lookahead;\n\t        var pattern = this.parsePattern(params, kind);\n\t        if (this.match('=')) {\n\t            this.nextToken();\n\t            var previousAllowYield = this.context.allowYield;\n\t            this.context.allowYield = true;\n\t            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            this.context.allowYield = previousAllowYield;\n\t            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));\n\t        }\n\t        return pattern;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-variable-statement\n\t    Parser.prototype.parseVariableIdentifier = function (kind) {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        if (token.type === 4 /* Keyword */ && token.value === 'yield') {\n\t            if (this.context.strict) {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t            }\n\t            else if (!this.context.allowYield) {\n\t                this.throwUnexpectedToken(token);\n\t            }\n\t        }\n\t        else if (token.type !== 3 /* Identifier */) {\n\t            if (this.context.strict && token.type === 4 /* Keyword */ && this.scanner.isStrictModeReservedWord(token.value)) {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t            }\n\t            else {\n\t                if (this.context.strict || token.value !== 'let' || kind !== 'var') {\n\t                    this.throwUnexpectedToken(token);\n\t                }\n\t            }\n\t        }\n\t        else if ((this.context.isModule || this.context.await) && token.type === 3 /* Identifier */ && token.value === 'await') {\n\t            this.tolerateUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new Node.Identifier(token.value));\n\t    };\n\t    Parser.prototype.parseVariableDeclaration = function (options) {\n\t        var node = this.createNode();\n\t        var params = [];\n\t        var id = this.parsePattern(params, 'var');\n\t        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord(id.name)) {\n\t                this.tolerateError(messages_1.Messages.StrictVarName);\n\t            }\n\t        }\n\t        var init = null;\n\t        if (this.match('=')) {\n\t            this.nextToken();\n\t            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        }\n\t        else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {\n\t            this.expect('=');\n\t        }\n\t        return this.finalize(node, new Node.VariableDeclarator(id, init));\n\t    };\n\t    Parser.prototype.parseVariableDeclarationList = function (options) {\n\t        var opt = { inFor: options.inFor };\n\t        var list = [];\n\t        list.push(this.parseVariableDeclaration(opt));\n\t        while (this.match(',')) {\n\t            this.nextToken();\n\t            list.push(this.parseVariableDeclaration(opt));\n\t        }\n\t        return list;\n\t    };\n\t    Parser.prototype.parseVariableStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('var');\n\t        var declarations = this.parseVariableDeclarationList({ inFor: false });\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-empty-statement\n\t    Parser.prototype.parseEmptyStatement = function () {\n\t        var node = this.createNode();\n\t        this.expect(';');\n\t        return this.finalize(node, new Node.EmptyStatement());\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-expression-statement\n\t    Parser.prototype.parseExpressionStatement = function () {\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ExpressionStatement(expr));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-if-statement\n\t    Parser.prototype.parseIfClause = function () {\n\t        if (this.context.strict && this.matchKeyword('function')) {\n\t            this.tolerateError(messages_1.Messages.StrictFunction);\n\t        }\n\t        return this.parseStatement();\n\t    };\n\t    Parser.prototype.parseIfStatement = function () {\n\t        var node = this.createNode();\n\t        var consequent;\n\t        var alternate = null;\n\t        this.expectKeyword('if');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            consequent = this.parseIfClause();\n\t            if (this.matchKeyword('else')) {\n\t                this.nextToken();\n\t                alternate = this.parseIfClause();\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.IfStatement(test, consequent, alternate));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-do-while-statement\n\t    Parser.prototype.parseDoWhileStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('do');\n\t        var previousInIteration = this.context.inIteration;\n\t        this.context.inIteration = true;\n\t        var body = this.parseStatement();\n\t        this.context.inIteration = previousInIteration;\n\t        this.expectKeyword('while');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            if (this.match(';')) {\n\t                this.nextToken();\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.DoWhileStatement(body, test));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-while-statement\n\t    Parser.prototype.parseWhileStatement = function () {\n\t        var node = this.createNode();\n\t        var body;\n\t        this.expectKeyword('while');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            var previousInIteration = this.context.inIteration;\n\t            this.context.inIteration = true;\n\t            body = this.parseStatement();\n\t            this.context.inIteration = previousInIteration;\n\t        }\n\t        return this.finalize(node, new Node.WhileStatement(test, body));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-for-statement\n\t    // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements\n\t    Parser.prototype.parseForStatement = function () {\n\t        var init = null;\n\t        var test = null;\n\t        var update = null;\n\t        var forIn = true;\n\t        var left, right;\n\t        var node = this.createNode();\n\t        this.expectKeyword('for');\n\t        this.expect('(');\n\t        if (this.match(';')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            if (this.matchKeyword('var')) {\n\t                init = this.createNode();\n\t                this.nextToken();\n\t                var previousAllowIn = this.context.allowIn;\n\t                this.context.allowIn = false;\n\t                var declarations = this.parseVariableDeclarationList({ inFor: true });\n\t                this.context.allowIn = previousAllowIn;\n\t                if (declarations.length === 1 && this.matchKeyword('in')) {\n\t                    var decl = declarations[0];\n\t                    if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {\n\t                        this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');\n\t                    }\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseAssignmentExpression();\n\t                    init = null;\n\t                    forIn = false;\n\t                }\n\t                else {\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.expect(';');\n\t                }\n\t            }\n\t            else if (this.matchKeyword('const') || this.matchKeyword('let')) {\n\t                init = this.createNode();\n\t                var kind = this.nextToken().value;\n\t                if (!this.context.strict && this.lookahead.value === 'in') {\n\t                    init = this.finalize(init, new Node.Identifier(kind));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else {\n\t                    var previousAllowIn = this.context.allowIn;\n\t                    this.context.allowIn = false;\n\t                    var declarations = this.parseBindingList(kind, { inFor: true });\n\t                    this.context.allowIn = previousAllowIn;\n\t                    if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                        this.nextToken();\n\t                        left = init;\n\t                        right = this.parseExpression();\n\t                        init = null;\n\t                    }\n\t                    else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                        this.nextToken();\n\t                        left = init;\n\t                        right = this.parseAssignmentExpression();\n\t                        init = null;\n\t                        forIn = false;\n\t                    }\n\t                    else {\n\t                        this.consumeSemicolon();\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                var initStartToken = this.lookahead;\n\t                var previousAllowIn = this.context.allowIn;\n\t                this.context.allowIn = false;\n\t                init = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t                this.context.allowIn = previousAllowIn;\n\t                if (this.matchKeyword('in')) {\n\t                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInForIn);\n\t                    }\n\t                    this.nextToken();\n\t                    this.reinterpretExpressionAsPattern(init);\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else if (this.matchContextualKeyword('of')) {\n\t                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);\n\t                    }\n\t                    this.nextToken();\n\t                    this.reinterpretExpressionAsPattern(init);\n\t                    left = init;\n\t                    right = this.parseAssignmentExpression();\n\t                    init = null;\n\t                    forIn = false;\n\t                }\n\t                else {\n\t                    if (this.match(',')) {\n\t                        var initSeq = [init];\n\t                        while (this.match(',')) {\n\t                            this.nextToken();\n\t                            initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n\t                        }\n\t                        init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));\n\t                    }\n\t                    this.expect(';');\n\t                }\n\t            }\n\t        }\n\t        if (typeof left === 'undefined') {\n\t            if (!this.match(';')) {\n\t                test = this.parseExpression();\n\t            }\n\t            this.expect(';');\n\t            if (!this.match(')')) {\n\t                update = this.parseExpression();\n\t            }\n\t        }\n\t        var body;\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            var previousInIteration = this.context.inIteration;\n\t            this.context.inIteration = true;\n\t            body = this.isolateCoverGrammar(this.parseStatement);\n\t            this.context.inIteration = previousInIteration;\n\t        }\n\t        return (typeof left === 'undefined') ?\n\t            this.finalize(node, new Node.ForStatement(init, test, update, body)) :\n\t            forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) :\n\t                this.finalize(node, new Node.ForOfStatement(left, right, body));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-continue-statement\n\t    Parser.prototype.parseContinueStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('continue');\n\t        var label = null;\n\t        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {\n\t            var id = this.parseVariableIdentifier();\n\t            label = id;\n\t            var key = '$' + id.name;\n\t            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.UnknownLabel, id.name);\n\t            }\n\t        }\n\t        this.consumeSemicolon();\n\t        if (label === null && !this.context.inIteration) {\n\t            this.throwError(messages_1.Messages.IllegalContinue);\n\t        }\n\t        return this.finalize(node, new Node.ContinueStatement(label));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-break-statement\n\t    Parser.prototype.parseBreakStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('break');\n\t        var label = null;\n\t        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {\n\t            var id = this.parseVariableIdentifier();\n\t            var key = '$' + id.name;\n\t            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.UnknownLabel, id.name);\n\t            }\n\t            label = id;\n\t        }\n\t        this.consumeSemicolon();\n\t        if (label === null && !this.context.inIteration && !this.context.inSwitch) {\n\t            this.throwError(messages_1.Messages.IllegalBreak);\n\t        }\n\t        return this.finalize(node, new Node.BreakStatement(label));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-return-statement\n\t    Parser.prototype.parseReturnStatement = function () {\n\t        if (!this.context.inFunctionBody) {\n\t            this.tolerateError(messages_1.Messages.IllegalReturn);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('return');\n\t        var hasArgument = (!this.match(';') && !this.match('}') &&\n\t            !this.hasLineTerminator && this.lookahead.type !== 2 /* EOF */) ||\n\t            this.lookahead.type === 8 /* StringLiteral */ ||\n\t            this.lookahead.type === 10 /* Template */;\n\t        var argument = hasArgument ? this.parseExpression() : null;\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ReturnStatement(argument));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-with-statement\n\t    Parser.prototype.parseWithStatement = function () {\n\t        if (this.context.strict) {\n\t            this.tolerateError(messages_1.Messages.StrictModeWith);\n\t        }\n\t        var node = this.createNode();\n\t        var body;\n\t        this.expectKeyword('with');\n\t        this.expect('(');\n\t        var object = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            body = this.parseStatement();\n\t        }\n\t        return this.finalize(node, new Node.WithStatement(object, body));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-switch-statement\n\t    Parser.prototype.parseSwitchCase = function () {\n\t        var node = this.createNode();\n\t        var test;\n\t        if (this.matchKeyword('default')) {\n\t            this.nextToken();\n\t            test = null;\n\t        }\n\t        else {\n\t            this.expectKeyword('case');\n\t            test = this.parseExpression();\n\t        }\n\t        this.expect(':');\n\t        var consequent = [];\n\t        while (true) {\n\t            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {\n\t                break;\n\t            }\n\t            consequent.push(this.parseStatementListItem());\n\t        }\n\t        return this.finalize(node, new Node.SwitchCase(test, consequent));\n\t    };\n\t    Parser.prototype.parseSwitchStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('switch');\n\t        this.expect('(');\n\t        var discriminant = this.parseExpression();\n\t        this.expect(')');\n\t        var previousInSwitch = this.context.inSwitch;\n\t        this.context.inSwitch = true;\n\t        var cases = [];\n\t        var defaultFound = false;\n\t        this.expect('{');\n\t        while (true) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            var clause = this.parseSwitchCase();\n\t            if (clause.test === null) {\n\t                if (defaultFound) {\n\t                    this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);\n\t                }\n\t                defaultFound = true;\n\t            }\n\t            cases.push(clause);\n\t        }\n\t        this.expect('}');\n\t        this.context.inSwitch = previousInSwitch;\n\t        return this.finalize(node, new Node.SwitchStatement(discriminant, cases));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-labelled-statements\n\t    Parser.prototype.parseLabelledStatement = function () {\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        var statement;\n\t        if ((expr.type === syntax_1.Syntax.Identifier) && this.match(':')) {\n\t            this.nextToken();\n\t            var id = expr;\n\t            var key = '$' + id.name;\n\t            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);\n\t            }\n\t            this.context.labelSet[key] = true;\n\t            var body = void 0;\n\t            if (this.matchKeyword('class')) {\n\t                this.tolerateUnexpectedToken(this.lookahead);\n\t                body = this.parseClassDeclaration();\n\t            }\n\t            else if (this.matchKeyword('function')) {\n\t                var token = this.lookahead;\n\t                var declaration = this.parseFunctionDeclaration();\n\t                if (this.context.strict) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunction);\n\t                }\n\t                else if (declaration.generator) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.GeneratorInLegacyContext);\n\t                }\n\t                body = declaration;\n\t            }\n\t            else {\n\t                body = this.parseStatement();\n\t            }\n\t            delete this.context.labelSet[key];\n\t            statement = new Node.LabeledStatement(id, body);\n\t        }\n\t        else {\n\t            this.consumeSemicolon();\n\t            statement = new Node.ExpressionStatement(expr);\n\t        }\n\t        return this.finalize(node, statement);\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-throw-statement\n\t    Parser.prototype.parseThrowStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('throw');\n\t        if (this.hasLineTerminator) {\n\t            this.throwError(messages_1.Messages.NewlineAfterThrow);\n\t        }\n\t        var argument = this.parseExpression();\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ThrowStatement(argument));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-try-statement\n\t    Parser.prototype.parseCatchClause = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('catch');\n\t        this.expect('(');\n\t        if (this.match(')')) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        var params = [];\n\t        var param = this.parsePattern(params);\n\t        var paramMap = {};\n\t        for (var i = 0; i < params.length; i++) {\n\t            var key = '$' + params[i].value;\n\t            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {\n\t                this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);\n\t            }\n\t            paramMap[key] = true;\n\t        }\n\t        if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord(param.name)) {\n\t                this.tolerateError(messages_1.Messages.StrictCatchVariable);\n\t            }\n\t        }\n\t        this.expect(')');\n\t        var body = this.parseBlock();\n\t        return this.finalize(node, new Node.CatchClause(param, body));\n\t    };\n\t    Parser.prototype.parseFinallyClause = function () {\n\t        this.expectKeyword('finally');\n\t        return this.parseBlock();\n\t    };\n\t    Parser.prototype.parseTryStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('try');\n\t        var block = this.parseBlock();\n\t        var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;\n\t        var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;\n\t        if (!handler && !finalizer) {\n\t            this.throwError(messages_1.Messages.NoCatchOrFinally);\n\t        }\n\t        return this.finalize(node, new Node.TryStatement(block, handler, finalizer));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-debugger-statement\n\t    Parser.prototype.parseDebuggerStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('debugger');\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.DebuggerStatement());\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations\n\t    Parser.prototype.parseStatement = function () {\n\t        var statement;\n\t        switch (this.lookahead.type) {\n\t            case 1 /* BooleanLiteral */:\n\t            case 5 /* NullLiteral */:\n\t            case 6 /* NumericLiteral */:\n\t            case 8 /* StringLiteral */:\n\t            case 10 /* Template */:\n\t            case 9 /* RegularExpression */:\n\t                statement = this.parseExpressionStatement();\n\t                break;\n\t            case 7 /* Punctuator */:\n\t                var value = this.lookahead.value;\n\t                if (value === '{') {\n\t                    statement = this.parseBlock();\n\t                }\n\t                else if (value === '(') {\n\t                    statement = this.parseExpressionStatement();\n\t                }\n\t                else if (value === ';') {\n\t                    statement = this.parseEmptyStatement();\n\t                }\n\t                else {\n\t                    statement = this.parseExpressionStatement();\n\t                }\n\t                break;\n\t            case 3 /* Identifier */:\n\t                statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();\n\t                break;\n\t            case 4 /* Keyword */:\n\t                switch (this.lookahead.value) {\n\t                    case 'break':\n\t                        statement = this.parseBreakStatement();\n\t                        break;\n\t                    case 'continue':\n\t                        statement = this.parseContinueStatement();\n\t                        break;\n\t                    case 'debugger':\n\t                        statement = this.parseDebuggerStatement();\n\t                        break;\n\t                    case 'do':\n\t                        statement = this.parseDoWhileStatement();\n\t                        break;\n\t                    case 'for':\n\t                        statement = this.parseForStatement();\n\t                        break;\n\t                    case 'function':\n\t                        statement = this.parseFunctionDeclaration();\n\t                        break;\n\t                    case 'if':\n\t                        statement = this.parseIfStatement();\n\t                        break;\n\t                    case 'return':\n\t                        statement = this.parseReturnStatement();\n\t                        break;\n\t                    case 'switch':\n\t                        statement = this.parseSwitchStatement();\n\t                        break;\n\t                    case 'throw':\n\t                        statement = this.parseThrowStatement();\n\t                        break;\n\t                    case 'try':\n\t                        statement = this.parseTryStatement();\n\t                        break;\n\t                    case 'var':\n\t                        statement = this.parseVariableStatement();\n\t                        break;\n\t                    case 'while':\n\t                        statement = this.parseWhileStatement();\n\t                        break;\n\t                    case 'with':\n\t                        statement = this.parseWithStatement();\n\t                        break;\n\t                    default:\n\t                        statement = this.parseExpressionStatement();\n\t                        break;\n\t                }\n\t                break;\n\t            default:\n\t                statement = this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        return statement;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-function-definitions\n\t    Parser.prototype.parseFunctionSourceElements = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var body = this.parseDirectivePrologues();\n\t        var previousLabelSet = this.context.labelSet;\n\t        var previousInIteration = this.context.inIteration;\n\t        var previousInSwitch = this.context.inSwitch;\n\t        var previousInFunctionBody = this.context.inFunctionBody;\n\t        this.context.labelSet = {};\n\t        this.context.inIteration = false;\n\t        this.context.inSwitch = false;\n\t        this.context.inFunctionBody = true;\n\t        while (this.lookahead.type !== 2 /* EOF */) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            body.push(this.parseStatementListItem());\n\t        }\n\t        this.expect('}');\n\t        this.context.labelSet = previousLabelSet;\n\t        this.context.inIteration = previousInIteration;\n\t        this.context.inSwitch = previousInSwitch;\n\t        this.context.inFunctionBody = previousInFunctionBody;\n\t        return this.finalize(node, new Node.BlockStatement(body));\n\t    };\n\t    Parser.prototype.validateParam = function (options, param, name) {\n\t        var key = '$' + name;\n\t        if (this.context.strict) {\n\t            if (this.scanner.isRestrictedWord(name)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamName;\n\t            }\n\t            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamDupe;\n\t            }\n\t        }\n\t        else if (!options.firstRestricted) {\n\t            if (this.scanner.isRestrictedWord(name)) {\n\t                options.firstRestricted = param;\n\t                options.message = messages_1.Messages.StrictParamName;\n\t            }\n\t            else if (this.scanner.isStrictModeReservedWord(name)) {\n\t                options.firstRestricted = param;\n\t                options.message = messages_1.Messages.StrictReservedWord;\n\t            }\n\t            else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamDupe;\n\t            }\n\t        }\n\t        /* istanbul ignore next */\n\t        if (typeof Object.defineProperty === 'function') {\n\t            Object.defineProperty(options.paramSet, key, { value: true, enumerable: true, writable: true, configurable: true });\n\t        }\n\t        else {\n\t            options.paramSet[key] = true;\n\t        }\n\t    };\n\t    Parser.prototype.parseRestElement = function (params) {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.parsePattern(params);\n\t        if (this.match('=')) {\n\t            this.throwError(messages_1.Messages.DefaultRestParameter);\n\t        }\n\t        if (!this.match(')')) {\n\t            this.throwError(messages_1.Messages.ParameterAfterRestParameter);\n\t        }\n\t        return this.finalize(node, new Node.RestElement(arg));\n\t    };\n\t    Parser.prototype.parseFormalParameter = function (options) {\n\t        var params = [];\n\t        var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);\n\t        for (var i = 0; i < params.length; i++) {\n\t            this.validateParam(options, params[i], params[i].value);\n\t        }\n\t        options.simple = options.simple && (param instanceof Node.Identifier);\n\t        options.params.push(param);\n\t    };\n\t    Parser.prototype.parseFormalParameters = function (firstRestricted) {\n\t        var options;\n\t        options = {\n\t            simple: true,\n\t            params: [],\n\t            firstRestricted: firstRestricted\n\t        };\n\t        this.expect('(');\n\t        if (!this.match(')')) {\n\t            options.paramSet = {};\n\t            while (this.lookahead.type !== 2 /* EOF */) {\n\t                this.parseFormalParameter(options);\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t                this.expect(',');\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        this.expect(')');\n\t        return {\n\t            simple: options.simple,\n\t            params: options.params,\n\t            stricted: options.stricted,\n\t            firstRestricted: options.firstRestricted,\n\t            message: options.message\n\t        };\n\t    };\n\t    Parser.prototype.matchAsyncFunction = function () {\n\t        var match = this.matchContextualKeyword('async');\n\t        if (match) {\n\t            var state = this.scanner.saveState();\n\t            this.scanner.scanComments();\n\t            var next = this.scanner.lex();\n\t            this.scanner.restoreState(state);\n\t            match = (state.lineNumber === next.lineNumber) && (next.type === 4 /* Keyword */) && (next.value === 'function');\n\t        }\n\t        return match;\n\t    };\n\t    Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {\n\t        var node = this.createNode();\n\t        var isAsync = this.matchContextualKeyword('async');\n\t        if (isAsync) {\n\t            this.nextToken();\n\t        }\n\t        this.expectKeyword('function');\n\t        var isGenerator = isAsync ? false : this.match('*');\n\t        if (isGenerator) {\n\t            this.nextToken();\n\t        }\n\t        var message;\n\t        var id = null;\n\t        var firstRestricted = null;\n\t        if (!identifierIsOptional || !this.match('(')) {\n\t            var token = this.lookahead;\n\t            id = this.parseVariableIdentifier();\n\t            if (this.context.strict) {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n\t                }\n\t            }\n\t            else {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictFunctionName;\n\t                }\n\t                else if (this.scanner.isStrictModeReservedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictReservedWord;\n\t                }\n\t            }\n\t        }\n\t        var previousAllowAwait = this.context.await;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.await = isAsync;\n\t        this.context.allowYield = !isGenerator;\n\t        var formalParameters = this.parseFormalParameters(firstRestricted);\n\t        var params = formalParameters.params;\n\t        var stricted = formalParameters.stricted;\n\t        firstRestricted = formalParameters.firstRestricted;\n\t        if (formalParameters.message) {\n\t            message = formalParameters.message;\n\t        }\n\t        var previousStrict = this.context.strict;\n\t        var previousAllowStrictDirective = this.context.allowStrictDirective;\n\t        this.context.allowStrictDirective = formalParameters.simple;\n\t        var body = this.parseFunctionSourceElements();\n\t        if (this.context.strict && firstRestricted) {\n\t            this.throwUnexpectedToken(firstRestricted, message);\n\t        }\n\t        if (this.context.strict && stricted) {\n\t            this.tolerateUnexpectedToken(stricted, message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        this.context.allowStrictDirective = previousAllowStrictDirective;\n\t        this.context.await = previousAllowAwait;\n\t        this.context.allowYield = previousAllowYield;\n\t        return isAsync ? this.finalize(node, new Node.AsyncFunctionDeclaration(id, params, body)) :\n\t            this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));\n\t    };\n\t    Parser.prototype.parseFunctionExpression = function () {\n\t        var node = this.createNode();\n\t        var isAsync = this.matchContextualKeyword('async');\n\t        if (isAsync) {\n\t            this.nextToken();\n\t        }\n\t        this.expectKeyword('function');\n\t        var isGenerator = isAsync ? false : this.match('*');\n\t        if (isGenerator) {\n\t            this.nextToken();\n\t        }\n\t        var message;\n\t        var id = null;\n\t        var firstRestricted;\n\t        var previousAllowAwait = this.context.await;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.await = isAsync;\n\t        this.context.allowYield = !isGenerator;\n\t        if (!this.match('(')) {\n\t            var token = this.lookahead;\n\t            id = (!this.context.strict && !isGenerator && this.matchKeyword('yield')) ? this.parseIdentifierName() : this.parseVariableIdentifier();\n\t            if (this.context.strict) {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n\t                }\n\t            }\n\t            else {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictFunctionName;\n\t                }\n\t                else if (this.scanner.isStrictModeReservedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictReservedWord;\n\t                }\n\t            }\n\t        }\n\t        var formalParameters = this.parseFormalParameters(firstRestricted);\n\t        var params = formalParameters.params;\n\t        var stricted = formalParameters.stricted;\n\t        firstRestricted = formalParameters.firstRestricted;\n\t        if (formalParameters.message) {\n\t            message = formalParameters.message;\n\t        }\n\t        var previousStrict = this.context.strict;\n\t        var previousAllowStrictDirective = this.context.allowStrictDirective;\n\t        this.context.allowStrictDirective = formalParameters.simple;\n\t        var body = this.parseFunctionSourceElements();\n\t        if (this.context.strict && firstRestricted) {\n\t            this.throwUnexpectedToken(firstRestricted, message);\n\t        }\n\t        if (this.context.strict && stricted) {\n\t            this.tolerateUnexpectedToken(stricted, message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        this.context.allowStrictDirective = previousAllowStrictDirective;\n\t        this.context.await = previousAllowAwait;\n\t        this.context.allowYield = previousAllowYield;\n\t        return isAsync ? this.finalize(node, new Node.AsyncFunctionExpression(id, params, body)) :\n\t            this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive\n\t    Parser.prototype.parseDirective = function () {\n\t        var token = this.lookahead;\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        var directive = (expr.type === syntax_1.Syntax.Literal) ? this.getTokenRaw(token).slice(1, -1) : null;\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));\n\t    };\n\t    Parser.prototype.parseDirectivePrologues = function () {\n\t        var firstRestricted = null;\n\t        var body = [];\n\t        while (true) {\n\t            var token = this.lookahead;\n\t            if (token.type !== 8 /* StringLiteral */) {\n\t                break;\n\t            }\n\t            var statement = this.parseDirective();\n\t            body.push(statement);\n\t            var directive = statement.directive;\n\t            if (typeof directive !== 'string') {\n\t                break;\n\t            }\n\t            if (directive === 'use strict') {\n\t                this.context.strict = true;\n\t                if (firstRestricted) {\n\t                    this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t                if (!this.context.allowStrictDirective) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.IllegalLanguageModeDirective);\n\t                }\n\t            }\n\t            else {\n\t                if (!firstRestricted && token.octal) {\n\t                    firstRestricted = token;\n\t                }\n\t            }\n\t        }\n\t        return body;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-method-definitions\n\t    Parser.prototype.qualifiedPropertyName = function (token) {\n\t        switch (token.type) {\n\t            case 3 /* Identifier */:\n\t            case 8 /* StringLiteral */:\n\t            case 1 /* BooleanLiteral */:\n\t            case 5 /* NullLiteral */:\n\t            case 6 /* NumericLiteral */:\n\t            case 4 /* Keyword */:\n\t                return true;\n\t            case 7 /* Punctuator */:\n\t                return token.value === '[';\n\t            default:\n\t                break;\n\t        }\n\t        return false;\n\t    };\n\t    Parser.prototype.parseGetterMethod = function () {\n\t        var node = this.createNode();\n\t        var isGenerator = false;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = !isGenerator;\n\t        var formalParameters = this.parseFormalParameters();\n\t        if (formalParameters.params.length > 0) {\n\t            this.tolerateError(messages_1.Messages.BadGetterArity);\n\t        }\n\t        var method = this.parsePropertyMethod(formalParameters);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parseSetterMethod = function () {\n\t        var node = this.createNode();\n\t        var isGenerator = false;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = !isGenerator;\n\t        var formalParameters = this.parseFormalParameters();\n\t        if (formalParameters.params.length !== 1) {\n\t            this.tolerateError(messages_1.Messages.BadSetterArity);\n\t        }\n\t        else if (formalParameters.params[0] instanceof Node.RestElement) {\n\t            this.tolerateError(messages_1.Messages.BadSetterRestParameter);\n\t        }\n\t        var method = this.parsePropertyMethod(formalParameters);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parseGeneratorMethod = function () {\n\t        var node = this.createNode();\n\t        var isGenerator = true;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = true;\n\t        var params = this.parseFormalParameters();\n\t        this.context.allowYield = false;\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-generator-function-definitions\n\t    Parser.prototype.isStartOfExpression = function () {\n\t        var start = true;\n\t        var value = this.lookahead.value;\n\t        switch (this.lookahead.type) {\n\t            case 7 /* Punctuator */:\n\t                start = (value === '[') || (value === '(') || (value === '{') ||\n\t                    (value === '+') || (value === '-') ||\n\t                    (value === '!') || (value === '~') ||\n\t                    (value === '++') || (value === '--') ||\n\t                    (value === '/') || (value === '/='); // regular expression literal\n\t                break;\n\t            case 4 /* Keyword */:\n\t                start = (value === 'class') || (value === 'delete') ||\n\t                    (value === 'function') || (value === 'let') || (value === 'new') ||\n\t                    (value === 'super') || (value === 'this') || (value === 'typeof') ||\n\t                    (value === 'void') || (value === 'yield');\n\t                break;\n\t            default:\n\t                break;\n\t        }\n\t        return start;\n\t    };\n\t    Parser.prototype.parseYieldExpression = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('yield');\n\t        var argument = null;\n\t        var delegate = false;\n\t        if (!this.hasLineTerminator) {\n\t            var previousAllowYield = this.context.allowYield;\n\t            this.context.allowYield = false;\n\t            delegate = this.match('*');\n\t            if (delegate) {\n\t                this.nextToken();\n\t                argument = this.parseAssignmentExpression();\n\t            }\n\t            else if (this.isStartOfExpression()) {\n\t                argument = this.parseAssignmentExpression();\n\t            }\n\t            this.context.allowYield = previousAllowYield;\n\t        }\n\t        return this.finalize(node, new Node.YieldExpression(argument, delegate));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-class-definitions\n\t    Parser.prototype.parseClassElement = function (hasConstructor) {\n\t        var token = this.lookahead;\n\t        var node = this.createNode();\n\t        var kind = '';\n\t        var key = null;\n\t        var value = null;\n\t        var computed = false;\n\t        var method = false;\n\t        var isStatic = false;\n\t        var isAsync = false;\n\t        if (this.match('*')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            var id = key;\n\t            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {\n\t                token = this.lookahead;\n\t                isStatic = true;\n\t                computed = this.match('[');\n\t                if (this.match('*')) {\n\t                    this.nextToken();\n\t                }\n\t                else {\n\t                    key = this.parseObjectPropertyKey();\n\t                }\n\t            }\n\t            if ((token.type === 3 /* Identifier */) && !this.hasLineTerminator && (token.value === 'async')) {\n\t                var punctuator = this.lookahead.value;\n\t                if (punctuator !== ':' && punctuator !== '(' && punctuator !== '*') {\n\t                    isAsync = true;\n\t                    token = this.lookahead;\n\t                    key = this.parseObjectPropertyKey();\n\t                    if (token.type === 3 /* Identifier */ && token.value === 'constructor') {\n\t                        this.tolerateUnexpectedToken(token, messages_1.Messages.ConstructorIsAsync);\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\t        if (token.type === 3 /* Identifier */) {\n\t            if (token.value === 'get' && lookaheadPropertyKey) {\n\t                kind = 'get';\n\t                computed = this.match('[');\n\t                key = this.parseObjectPropertyKey();\n\t                this.context.allowYield = false;\n\t                value = this.parseGetterMethod();\n\t            }\n\t            else if (token.value === 'set' && lookaheadPropertyKey) {\n\t                kind = 'set';\n\t                computed = this.match('[');\n\t                key = this.parseObjectPropertyKey();\n\t                value = this.parseSetterMethod();\n\t            }\n\t        }\n\t        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {\n\t            kind = 'init';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseGeneratorMethod();\n\t            method = true;\n\t        }\n\t        if (!kind && key && this.match('(')) {\n\t            kind = 'init';\n\t            value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();\n\t            method = true;\n\t        }\n\t        if (!kind) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        if (kind === 'init') {\n\t            kind = 'method';\n\t        }\n\t        if (!computed) {\n\t            if (isStatic && this.isPropertyKey(key, 'prototype')) {\n\t                this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);\n\t            }\n\t            if (!isStatic && this.isPropertyKey(key, 'constructor')) {\n\t                if (kind !== 'method' || !method || (value && value.generator)) {\n\t                    this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);\n\t                }\n\t                if (hasConstructor.value) {\n\t                    this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);\n\t                }\n\t                else {\n\t                    hasConstructor.value = true;\n\t                }\n\t                kind = 'constructor';\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));\n\t    };\n\t    Parser.prototype.parseClassElementList = function () {\n\t        var body = [];\n\t        var hasConstructor = { value: false };\n\t        this.expect('{');\n\t        while (!this.match('}')) {\n\t            if (this.match(';')) {\n\t                this.nextToken();\n\t            }\n\t            else {\n\t                body.push(this.parseClassElement(hasConstructor));\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return body;\n\t    };\n\t    Parser.prototype.parseClassBody = function () {\n\t        var node = this.createNode();\n\t        var elementList = this.parseClassElementList();\n\t        return this.finalize(node, new Node.ClassBody(elementList));\n\t    };\n\t    Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {\n\t        var node = this.createNode();\n\t        var previousStrict = this.context.strict;\n\t        this.context.strict = true;\n\t        this.expectKeyword('class');\n\t        var id = (identifierIsOptional && (this.lookahead.type !== 3 /* Identifier */)) ? null : this.parseVariableIdentifier();\n\t        var superClass = null;\n\t        if (this.matchKeyword('extends')) {\n\t            this.nextToken();\n\t            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t        }\n\t        var classBody = this.parseClassBody();\n\t        this.context.strict = previousStrict;\n\t        return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));\n\t    };\n\t    Parser.prototype.parseClassExpression = function () {\n\t        var node = this.createNode();\n\t        var previousStrict = this.context.strict;\n\t        this.context.strict = true;\n\t        this.expectKeyword('class');\n\t        var id = (this.lookahead.type === 3 /* Identifier */) ? this.parseVariableIdentifier() : null;\n\t        var superClass = null;\n\t        if (this.matchKeyword('extends')) {\n\t            this.nextToken();\n\t            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t        }\n\t        var classBody = this.parseClassBody();\n\t        this.context.strict = previousStrict;\n\t        return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-scripts\n\t    // https://tc39.github.io/ecma262/#sec-modules\n\t    Parser.prototype.parseModule = function () {\n\t        this.context.strict = true;\n\t        this.context.isModule = true;\n\t        this.scanner.isModule = true;\n\t        var node = this.createNode();\n\t        var body = this.parseDirectivePrologues();\n\t        while (this.lookahead.type !== 2 /* EOF */) {\n\t            body.push(this.parseStatementListItem());\n\t        }\n\t        return this.finalize(node, new Node.Module(body));\n\t    };\n\t    Parser.prototype.parseScript = function () {\n\t        var node = this.createNode();\n\t        var body = this.parseDirectivePrologues();\n\t        while (this.lookahead.type !== 2 /* EOF */) {\n\t            body.push(this.parseStatementListItem());\n\t        }\n\t        return this.finalize(node, new Node.Script(body));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-imports\n\t    Parser.prototype.parseModuleSpecifier = function () {\n\t        var node = this.createNode();\n\t        if (this.lookahead.type !== 8 /* StringLiteral */) {\n\t            this.throwError(messages_1.Messages.InvalidModuleSpecifier);\n\t        }\n\t        var token = this.nextToken();\n\t        var raw = this.getTokenRaw(token);\n\t        return this.finalize(node, new Node.Literal(token.value, raw));\n\t    };\n\t    // import {<foo as bar>} ...;\n\t    Parser.prototype.parseImportSpecifier = function () {\n\t        var node = this.createNode();\n\t        var imported;\n\t        var local;\n\t        if (this.lookahead.type === 3 /* Identifier */) {\n\t            imported = this.parseVariableIdentifier();\n\t            local = imported;\n\t            if (this.matchContextualKeyword('as')) {\n\t                this.nextToken();\n\t                local = this.parseVariableIdentifier();\n\t            }\n\t        }\n\t        else {\n\t            imported = this.parseIdentifierName();\n\t            local = imported;\n\t            if (this.matchContextualKeyword('as')) {\n\t                this.nextToken();\n\t                local = this.parseVariableIdentifier();\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.ImportSpecifier(local, imported));\n\t    };\n\t    // {foo, bar as bas}\n\t    Parser.prototype.parseNamedImports = function () {\n\t        this.expect('{');\n\t        var specifiers = [];\n\t        while (!this.match('}')) {\n\t            specifiers.push(this.parseImportSpecifier());\n\t            if (!this.match('}')) {\n\t                this.expect(',');\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return specifiers;\n\t    };\n\t    // import <foo> ...;\n\t    Parser.prototype.parseImportDefaultSpecifier = function () {\n\t        var node = this.createNode();\n\t        var local = this.parseIdentifierName();\n\t        return this.finalize(node, new Node.ImportDefaultSpecifier(local));\n\t    };\n\t    // import <* as foo> ...;\n\t    Parser.prototype.parseImportNamespaceSpecifier = function () {\n\t        var node = this.createNode();\n\t        this.expect('*');\n\t        if (!this.matchContextualKeyword('as')) {\n\t            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);\n\t        }\n\t        this.nextToken();\n\t        var local = this.parseIdentifierName();\n\t        return this.finalize(node, new Node.ImportNamespaceSpecifier(local));\n\t    };\n\t    Parser.prototype.parseImportDeclaration = function () {\n\t        if (this.context.inFunctionBody) {\n\t            this.throwError(messages_1.Messages.IllegalImportDeclaration);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('import');\n\t        var src;\n\t        var specifiers = [];\n\t        if (this.lookahead.type === 8 /* StringLiteral */) {\n\t            // import 'foo';\n\t            src = this.parseModuleSpecifier();\n\t        }\n\t        else {\n\t            if (this.match('{')) {\n\t                // import {bar}\n\t                specifiers = specifiers.concat(this.parseNamedImports());\n\t            }\n\t            else if (this.match('*')) {\n\t                // import * as foo\n\t                specifiers.push(this.parseImportNamespaceSpecifier());\n\t            }\n\t            else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {\n\t                // import foo\n\t                specifiers.push(this.parseImportDefaultSpecifier());\n\t                if (this.match(',')) {\n\t                    this.nextToken();\n\t                    if (this.match('*')) {\n\t                        // import foo, * as foo\n\t                        specifiers.push(this.parseImportNamespaceSpecifier());\n\t                    }\n\t                    else if (this.match('{')) {\n\t                        // import foo, {bar}\n\t                        specifiers = specifiers.concat(this.parseNamedImports());\n\t                    }\n\t                    else {\n\t                        this.throwUnexpectedToken(this.lookahead);\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t            if (!this.matchContextualKeyword('from')) {\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            this.nextToken();\n\t            src = this.parseModuleSpecifier();\n\t        }\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ImportDeclaration(specifiers, src));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-exports\n\t    Parser.prototype.parseExportSpecifier = function () {\n\t        var node = this.createNode();\n\t        var local = this.parseIdentifierName();\n\t        var exported = local;\n\t        if (this.matchContextualKeyword('as')) {\n\t            this.nextToken();\n\t            exported = this.parseIdentifierName();\n\t        }\n\t        return this.finalize(node, new Node.ExportSpecifier(local, exported));\n\t    };\n\t    Parser.prototype.parseExportDeclaration = function () {\n\t        if (this.context.inFunctionBody) {\n\t            this.throwError(messages_1.Messages.IllegalExportDeclaration);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('export');\n\t        var exportDeclaration;\n\t        if (this.matchKeyword('default')) {\n\t            // export default ...\n\t            this.nextToken();\n\t            if (this.matchKeyword('function')) {\n\t                // export default function foo () {}\n\t                // export default function () {}\n\t                var declaration = this.parseFunctionDeclaration(true);\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t            else if (this.matchKeyword('class')) {\n\t                // export default class foo {}\n\t                var declaration = this.parseClassDeclaration(true);\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t            else if (this.matchContextualKeyword('async')) {\n\t                // export default async function f () {}\n\t                // export default async function () {}\n\t                // export default async x => x\n\t                var declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t            else {\n\t                if (this.matchContextualKeyword('from')) {\n\t                    this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);\n\t                }\n\t                // export default {};\n\t                // export default [];\n\t                // export default (1 + 2);\n\t                var declaration = this.match('{') ? this.parseObjectInitializer() :\n\t                    this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();\n\t                this.consumeSemicolon();\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t        }\n\t        else if (this.match('*')) {\n\t            // export * from 'foo';\n\t            this.nextToken();\n\t            if (!this.matchContextualKeyword('from')) {\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            this.nextToken();\n\t            var src = this.parseModuleSpecifier();\n\t            this.consumeSemicolon();\n\t            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));\n\t        }\n\t        else if (this.lookahead.type === 4 /* Keyword */) {\n\t            // export var f = 1;\n\t            var declaration = void 0;\n\t            switch (this.lookahead.value) {\n\t                case 'let':\n\t                case 'const':\n\t                    declaration = this.parseLexicalDeclaration({ inFor: false });\n\t                    break;\n\t                case 'var':\n\t                case 'class':\n\t                case 'function':\n\t                    declaration = this.parseStatementListItem();\n\t                    break;\n\t                default:\n\t                    this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\n\t        }\n\t        else if (this.matchAsyncFunction()) {\n\t            var declaration = this.parseFunctionDeclaration();\n\t            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\n\t        }\n\t        else {\n\t            var specifiers = [];\n\t            var source = null;\n\t            var isExportFromIdentifier = false;\n\t            this.expect('{');\n\t            while (!this.match('}')) {\n\t                isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');\n\t                specifiers.push(this.parseExportSpecifier());\n\t                if (!this.match('}')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t            this.expect('}');\n\t            if (this.matchContextualKeyword('from')) {\n\t                // export {default} from 'foo';\n\t                // export {foo} from 'foo';\n\t                this.nextToken();\n\t                source = this.parseModuleSpecifier();\n\t                this.consumeSemicolon();\n\t            }\n\t            else if (isExportFromIdentifier) {\n\t                // export {default}; // missing fromClause\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            else {\n\t                // export {foo};\n\t                this.consumeSemicolon();\n\t            }\n\t            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));\n\t        }\n\t        return exportDeclaration;\n\t    };\n\t    return Parser;\n\t}());\n\texports.Parser = Parser;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t// Ensure the condition is true, otherwise throw an error.\n\t// This is only to have a better contract semantic, i.e. another safety net\n\t// to catch a logic error. The condition shall be fulfilled in normal case.\n\t// Do NOT use this to enforce a certain condition on any user input.\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tfunction assert(condition, message) {\n\t    /* istanbul ignore if */\n\t    if (!condition) {\n\t        throw new Error('ASSERT: ' + message);\n\t    }\n\t}\n\texports.assert = assert;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/* tslint:disable:max-classes-per-file */\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar ErrorHandler = (function () {\n\t    function ErrorHandler() {\n\t        this.errors = [];\n\t        this.tolerant = false;\n\t    }\n\t    ErrorHandler.prototype.recordError = function (error) {\n\t        this.errors.push(error);\n\t    };\n\t    ErrorHandler.prototype.tolerate = function (error) {\n\t        if (this.tolerant) {\n\t            this.recordError(error);\n\t        }\n\t        else {\n\t            throw error;\n\t        }\n\t    };\n\t    ErrorHandler.prototype.constructError = function (msg, column) {\n\t        var error = new Error(msg);\n\t        try {\n\t            throw error;\n\t        }\n\t        catch (base) {\n\t            /* istanbul ignore else */\n\t            if (Object.create && Object.defineProperty) {\n\t                error = Object.create(base);\n\t                Object.defineProperty(error, 'column', { value: column });\n\t            }\n\t        }\n\t        /* istanbul ignore next */\n\t        return error;\n\t    };\n\t    ErrorHandler.prototype.createError = function (index, line, col, description) {\n\t        var msg = 'Line ' + line + ': ' + description;\n\t        var error = this.constructError(msg, col);\n\t        error.index = index;\n\t        error.lineNumber = line;\n\t        error.description = description;\n\t        return error;\n\t    };\n\t    ErrorHandler.prototype.throwError = function (index, line, col, description) {\n\t        throw this.createError(index, line, col, description);\n\t    };\n\t    ErrorHandler.prototype.tolerateError = function (index, line, col, description) {\n\t        var error = this.createError(index, line, col, description);\n\t        if (this.tolerant) {\n\t            this.recordError(error);\n\t        }\n\t        else {\n\t            throw error;\n\t        }\n\t    };\n\t    return ErrorHandler;\n\t}());\n\texports.ErrorHandler = ErrorHandler;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t// Error messages should be identical to V8.\n\texports.Messages = {\n\t    BadGetterArity: 'Getter must not have any formal parameters',\n\t    BadSetterArity: 'Setter must have exactly one formal parameter',\n\t    BadSetterRestParameter: 'Setter function argument must not be a rest parameter',\n\t    ConstructorIsAsync: 'Class constructor may not be an async method',\n\t    ConstructorSpecialMethod: 'Class constructor may not be an accessor',\n\t    DeclarationMissingInitializer: 'Missing initializer in %0 declaration',\n\t    DefaultRestParameter: 'Unexpected token =',\n\t    DuplicateBinding: 'Duplicate binding %0',\n\t    DuplicateConstructor: 'A class may only have one constructor',\n\t    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',\n\t    ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer',\n\t    GeneratorInLegacyContext: 'Generator declarations are not allowed in legacy contexts',\n\t    IllegalBreak: 'Illegal break statement',\n\t    IllegalContinue: 'Illegal continue statement',\n\t    IllegalExportDeclaration: 'Unexpected token',\n\t    IllegalImportDeclaration: 'Unexpected token',\n\t    IllegalLanguageModeDirective: 'Illegal \\'use strict\\' directive in function with non-simple parameter list',\n\t    IllegalReturn: 'Illegal return statement',\n\t    InvalidEscapedReservedWord: 'Keyword must not contain escaped characters',\n\t    InvalidHexEscapeSequence: 'Invalid hexadecimal escape sequence',\n\t    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',\n\t    InvalidLHSInForIn: 'Invalid left-hand side in for-in',\n\t    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',\n\t    InvalidModuleSpecifier: 'Unexpected token',\n\t    InvalidRegExp: 'Invalid regular expression',\n\t    LetInLexicalBinding: 'let is disallowed as a lexically bound name',\n\t    MissingFromClause: 'Unexpected token',\n\t    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n\t    NewlineAfterThrow: 'Illegal newline after throw',\n\t    NoAsAfterImportNamespace: 'Unexpected token',\n\t    NoCatchOrFinally: 'Missing catch or finally after try',\n\t    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',\n\t    Redeclaration: '%0 \\'%1\\' has already been declared',\n\t    StaticPrototype: 'Classes may not have static property named prototype',\n\t    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',\n\t    StrictDelete: 'Delete of an unqualified identifier in strict mode.',\n\t    StrictFunction: 'In strict mode code, functions can only be declared at top level or inside a block',\n\t    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',\n\t    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',\n\t    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n\t    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n\t    StrictModeWith: 'Strict mode code may not include a with statement',\n\t    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',\n\t    StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n\t    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',\n\t    StrictReservedWord: 'Use of future reserved word in strict mode',\n\t    StrictVarName: 'Variable name may not be eval or arguments in strict mode',\n\t    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',\n\t    UnexpectedEOS: 'Unexpected end of input',\n\t    UnexpectedIdentifier: 'Unexpected identifier',\n\t    UnexpectedNumber: 'Unexpected number',\n\t    UnexpectedReserved: 'Unexpected reserved word',\n\t    UnexpectedString: 'Unexpected string',\n\t    UnexpectedTemplate: 'Unexpected quasi %0',\n\t    UnexpectedToken: 'Unexpected token %0',\n\t    UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',\n\t    UnknownLabel: 'Undefined label \\'%0\\'',\n\t    UnterminatedRegExp: 'Invalid regular expression: missing /'\n\t};\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar assert_1 = __webpack_require__(9);\n\tvar character_1 = __webpack_require__(4);\n\tvar messages_1 = __webpack_require__(11);\n\tfunction hexValue(ch) {\n\t    return '0123456789abcdef'.indexOf(ch.toLowerCase());\n\t}\n\tfunction octalValue(ch) {\n\t    return '01234567'.indexOf(ch);\n\t}\n\tvar Scanner = (function () {\n\t    function Scanner(code, handler) {\n\t        this.source = code;\n\t        this.errorHandler = handler;\n\t        this.trackComment = false;\n\t        this.isModule = false;\n\t        this.length = code.length;\n\t        this.index = 0;\n\t        this.lineNumber = (code.length > 0) ? 1 : 0;\n\t        this.lineStart = 0;\n\t        this.curlyStack = [];\n\t    }\n\t    Scanner.prototype.saveState = function () {\n\t        return {\n\t            index: this.index,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart\n\t        };\n\t    };\n\t    Scanner.prototype.restoreState = function (state) {\n\t        this.index = state.index;\n\t        this.lineNumber = state.lineNumber;\n\t        this.lineStart = state.lineStart;\n\t    };\n\t    Scanner.prototype.eof = function () {\n\t        return this.index >= this.length;\n\t    };\n\t    Scanner.prototype.throwUnexpectedToken = function (message) {\n\t        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }\n\t        return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\n\t    };\n\t    Scanner.prototype.tolerateUnexpectedToken = function (message) {\n\t        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }\n\t        this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-comments\n\t    Scanner.prototype.skipSingleLineComment = function (offset) {\n\t        var comments = [];\n\t        var start, loc;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t            start = this.index - offset;\n\t            loc = {\n\t                start: {\n\t                    line: this.lineNumber,\n\t                    column: this.index - this.lineStart - offset\n\t                },\n\t                end: {}\n\t            };\n\t        }\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            ++this.index;\n\t            if (character_1.Character.isLineTerminator(ch)) {\n\t                if (this.trackComment) {\n\t                    loc.end = {\n\t                        line: this.lineNumber,\n\t                        column: this.index - this.lineStart - 1\n\t                    };\n\t                    var entry = {\n\t                        multiLine: false,\n\t                        slice: [start + offset, this.index - 1],\n\t                        range: [start, this.index - 1],\n\t                        loc: loc\n\t                    };\n\t                    comments.push(entry);\n\t                }\n\t                if (ch === 13 && this.source.charCodeAt(this.index) === 10) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                this.lineStart = this.index;\n\t                return comments;\n\t            }\n\t        }\n\t        if (this.trackComment) {\n\t            loc.end = {\n\t                line: this.lineNumber,\n\t                column: this.index - this.lineStart\n\t            };\n\t            var entry = {\n\t                multiLine: false,\n\t                slice: [start + offset, this.index],\n\t                range: [start, this.index],\n\t                loc: loc\n\t            };\n\t            comments.push(entry);\n\t        }\n\t        return comments;\n\t    };\n\t    Scanner.prototype.skipMultiLineComment = function () {\n\t        var comments = [];\n\t        var start, loc;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t            start = this.index - 2;\n\t            loc = {\n\t                start: {\n\t                    line: this.lineNumber,\n\t                    column: this.index - this.lineStart - 2\n\t                },\n\t                end: {}\n\t            };\n\t        }\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (character_1.Character.isLineTerminator(ch)) {\n\t                if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                ++this.index;\n\t                this.lineStart = this.index;\n\t            }\n\t            else if (ch === 0x2A) {\n\t                // Block comment ends with '*/'.\n\t                if (this.source.charCodeAt(this.index + 1) === 0x2F) {\n\t                    this.index += 2;\n\t                    if (this.trackComment) {\n\t                        loc.end = {\n\t                            line: this.lineNumber,\n\t                            column: this.index - this.lineStart\n\t                        };\n\t                        var entry = {\n\t                            multiLine: true,\n\t                            slice: [start + 2, this.index - 2],\n\t                            range: [start, this.index],\n\t                            loc: loc\n\t                        };\n\t                        comments.push(entry);\n\t                    }\n\t                    return comments;\n\t                }\n\t                ++this.index;\n\t            }\n\t            else {\n\t                ++this.index;\n\t            }\n\t        }\n\t        // Ran off the end of the file - the whole thing is a comment\n\t        if (this.trackComment) {\n\t            loc.end = {\n\t                line: this.lineNumber,\n\t                column: this.index - this.lineStart\n\t            };\n\t            var entry = {\n\t                multiLine: true,\n\t                slice: [start + 2, this.index],\n\t                range: [start, this.index],\n\t                loc: loc\n\t            };\n\t            comments.push(entry);\n\t        }\n\t        this.tolerateUnexpectedToken();\n\t        return comments;\n\t    };\n\t    Scanner.prototype.scanComments = function () {\n\t        var comments;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t        }\n\t        var start = (this.index === 0);\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (character_1.Character.isWhiteSpace(ch)) {\n\t                ++this.index;\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch)) {\n\t                ++this.index;\n\t                if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                this.lineStart = this.index;\n\t                start = true;\n\t            }\n\t            else if (ch === 0x2F) {\n\t                ch = this.source.charCodeAt(this.index + 1);\n\t                if (ch === 0x2F) {\n\t                    this.index += 2;\n\t                    var comment = this.skipSingleLineComment(2);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                    start = true;\n\t                }\n\t                else if (ch === 0x2A) {\n\t                    this.index += 2;\n\t                    var comment = this.skipMultiLineComment();\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else if (start && ch === 0x2D) {\n\t                // U+003E is '>'\n\t                if ((this.source.charCodeAt(this.index + 1) === 0x2D) && (this.source.charCodeAt(this.index + 2) === 0x3E)) {\n\t                    // '-->' is a single-line comment\n\t                    this.index += 3;\n\t                    var comment = this.skipSingleLineComment(3);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else if (ch === 0x3C && !this.isModule) {\n\t                if (this.source.slice(this.index + 1, this.index + 4) === '!--') {\n\t                    this.index += 4; // `<!--`\n\t                    var comment = this.skipSingleLineComment(4);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return comments;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-future-reserved-words\n\t    Scanner.prototype.isFutureReservedWord = function (id) {\n\t        switch (id) {\n\t            case 'enum':\n\t            case 'export':\n\t            case 'import':\n\t            case 'super':\n\t                return true;\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    Scanner.prototype.isStrictModeReservedWord = function (id) {\n\t        switch (id) {\n\t            case 'implements':\n\t            case 'interface':\n\t            case 'package':\n\t            case 'private':\n\t            case 'protected':\n\t            case 'public':\n\t            case 'static':\n\t            case 'yield':\n\t            case 'let':\n\t                return true;\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    Scanner.prototype.isRestrictedWord = function (id) {\n\t        return id === 'eval' || id === 'arguments';\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-keywords\n\t    Scanner.prototype.isKeyword = function (id) {\n\t        switch (id.length) {\n\t            case 2:\n\t                return (id === 'if') || (id === 'in') || (id === 'do');\n\t            case 3:\n\t                return (id === 'var') || (id === 'for') || (id === 'new') ||\n\t                    (id === 'try') || (id === 'let');\n\t            case 4:\n\t                return (id === 'this') || (id === 'else') || (id === 'case') ||\n\t                    (id === 'void') || (id === 'with') || (id === 'enum');\n\t            case 5:\n\t                return (id === 'while') || (id === 'break') || (id === 'catch') ||\n\t                    (id === 'throw') || (id === 'const') || (id === 'yield') ||\n\t                    (id === 'class') || (id === 'super');\n\t            case 6:\n\t                return (id === 'return') || (id === 'typeof') || (id === 'delete') ||\n\t                    (id === 'switch') || (id === 'export') || (id === 'import');\n\t            case 7:\n\t                return (id === 'default') || (id === 'finally') || (id === 'extends');\n\t            case 8:\n\t                return (id === 'function') || (id === 'continue') || (id === 'debugger');\n\t            case 10:\n\t                return (id === 'instanceof');\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    Scanner.prototype.codePointAt = function (i) {\n\t        var cp = this.source.charCodeAt(i);\n\t        if (cp >= 0xD800 && cp <= 0xDBFF) {\n\t            var second = this.source.charCodeAt(i + 1);\n\t            if (second >= 0xDC00 && second <= 0xDFFF) {\n\t                var first = cp;\n\t                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t            }\n\t        }\n\t        return cp;\n\t    };\n\t    Scanner.prototype.scanHexEscape = function (prefix) {\n\t        var len = (prefix === 'u') ? 4 : 2;\n\t        var code = 0;\n\t        for (var i = 0; i < len; ++i) {\n\t            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n\t                code = code * 16 + hexValue(this.source[this.index++]);\n\t            }\n\t            else {\n\t                return null;\n\t            }\n\t        }\n\t        return String.fromCharCode(code);\n\t    };\n\t    Scanner.prototype.scanUnicodeCodePointEscape = function () {\n\t        var ch = this.source[this.index];\n\t        var code = 0;\n\t        // At least, one hex digit is required.\n\t        if (ch === '}') {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index++];\n\t            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            code = code * 16 + hexValue(ch);\n\t        }\n\t        if (code > 0x10FFFF || ch !== '}') {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return character_1.Character.fromCodePoint(code);\n\t    };\n\t    Scanner.prototype.getIdentifier = function () {\n\t        var start = this.index++;\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (ch === 0x5C) {\n\t                // Blackslash (U+005C) marks Unicode escape sequence.\n\t                this.index = start;\n\t                return this.getComplexIdentifier();\n\t            }\n\t            else if (ch >= 0xD800 && ch < 0xDFFF) {\n\t                // Need to handle surrogate pairs.\n\t                this.index = start;\n\t                return this.getComplexIdentifier();\n\t            }\n\t            if (character_1.Character.isIdentifierPart(ch)) {\n\t                ++this.index;\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return this.source.slice(start, this.index);\n\t    };\n\t    Scanner.prototype.getComplexIdentifier = function () {\n\t        var cp = this.codePointAt(this.index);\n\t        var id = character_1.Character.fromCodePoint(cp);\n\t        this.index += id.length;\n\t        // '\\u' (U+005C, U+0075) denotes an escaped character.\n\t        var ch;\n\t        if (cp === 0x5C) {\n\t            if (this.source.charCodeAt(this.index) !== 0x75) {\n\t                this.throwUnexpectedToken();\n\t            }\n\t            ++this.index;\n\t            if (this.source[this.index] === '{') {\n\t                ++this.index;\n\t                ch = this.scanUnicodeCodePointEscape();\n\t            }\n\t            else {\n\t                ch = this.scanHexEscape('u');\n\t                if (ch === null || ch === '\\\\' || !character_1.Character.isIdentifierStart(ch.charCodeAt(0))) {\n\t                    this.throwUnexpectedToken();\n\t                }\n\t            }\n\t            id = ch;\n\t        }\n\t        while (!this.eof()) {\n\t            cp = this.codePointAt(this.index);\n\t            if (!character_1.Character.isIdentifierPart(cp)) {\n\t                break;\n\t            }\n\t            ch = character_1.Character.fromCodePoint(cp);\n\t            id += ch;\n\t            this.index += ch.length;\n\t            // '\\u' (U+005C, U+0075) denotes an escaped character.\n\t            if (cp === 0x5C) {\n\t                id = id.substr(0, id.length - 1);\n\t                if (this.source.charCodeAt(this.index) !== 0x75) {\n\t                    this.throwUnexpectedToken();\n\t                }\n\t                ++this.index;\n\t                if (this.source[this.index] === '{') {\n\t                    ++this.index;\n\t                    ch = this.scanUnicodeCodePointEscape();\n\t                }\n\t                else {\n\t                    ch = this.scanHexEscape('u');\n\t                    if (ch === null || ch === '\\\\' || !character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\n\t                        this.throwUnexpectedToken();\n\t                    }\n\t                }\n\t                id += ch;\n\t            }\n\t        }\n\t        return id;\n\t    };\n\t    Scanner.prototype.octalToDecimal = function (ch) {\n\t        // \\0 is not octal escape sequence\n\t        var octal = (ch !== '0');\n\t        var code = octalValue(ch);\n\t        if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t            octal = true;\n\t            code = code * 8 + octalValue(this.source[this.index++]);\n\t            // 3 digits are only allowed when string starts\n\t            // with 0, 1, 2, 3\n\t            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t                code = code * 8 + octalValue(this.source[this.index++]);\n\t            }\n\t        }\n\t        return {\n\t            code: code,\n\t            octal: octal\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-names-and-keywords\n\t    Scanner.prototype.scanIdentifier = function () {\n\t        var type;\n\t        var start = this.index;\n\t        // Backslash (U+005C) starts an escaped character.\n\t        var id = (this.source.charCodeAt(start) === 0x5C) ? this.getComplexIdentifier() : this.getIdentifier();\n\t        // There is no keyword or literal with only one character.\n\t        // Thus, it must be an identifier.\n\t        if (id.length === 1) {\n\t            type = 3 /* Identifier */;\n\t        }\n\t        else if (this.isKeyword(id)) {\n\t            type = 4 /* Keyword */;\n\t        }\n\t        else if (id === 'null') {\n\t            type = 5 /* NullLiteral */;\n\t        }\n\t        else if (id === 'true' || id === 'false') {\n\t            type = 1 /* BooleanLiteral */;\n\t        }\n\t        else {\n\t            type = 3 /* Identifier */;\n\t        }\n\t        if (type !== 3 /* Identifier */ && (start + id.length !== this.index)) {\n\t            var restore = this.index;\n\t            this.index = start;\n\t            this.tolerateUnexpectedToken(messages_1.Messages.InvalidEscapedReservedWord);\n\t            this.index = restore;\n\t        }\n\t        return {\n\t            type: type,\n\t            value: id,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-punctuators\n\t    Scanner.prototype.scanPunctuator = function () {\n\t        var start = this.index;\n\t        // Check for most common single-character punctuators.\n\t        var str = this.source[this.index];\n\t        switch (str) {\n\t            case '(':\n\t            case '{':\n\t                if (str === '{') {\n\t                    this.curlyStack.push('{');\n\t                }\n\t                ++this.index;\n\t                break;\n\t            case '.':\n\t                ++this.index;\n\t                if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {\n\t                    // Spread operator: ...\n\t                    this.index += 2;\n\t                    str = '...';\n\t                }\n\t                break;\n\t            case '}':\n\t                ++this.index;\n\t                this.curlyStack.pop();\n\t                break;\n\t            case ')':\n\t            case ';':\n\t            case ',':\n\t            case '[':\n\t            case ']':\n\t            case ':':\n\t            case '?':\n\t            case '~':\n\t                ++this.index;\n\t                break;\n\t            default:\n\t                // 4-character punctuator.\n\t                str = this.source.substr(this.index, 4);\n\t                if (str === '>>>=') {\n\t                    this.index += 4;\n\t                }\n\t                else {\n\t                    // 3-character punctuators.\n\t                    str = str.substr(0, 3);\n\t                    if (str === '===' || str === '!==' || str === '>>>' ||\n\t                        str === '<<=' || str === '>>=' || str === '**=') {\n\t                        this.index += 3;\n\t                    }\n\t                    else {\n\t                        // 2-character punctuators.\n\t                        str = str.substr(0, 2);\n\t                        if (str === '&&' || str === '||' || str === '==' || str === '!=' ||\n\t                            str === '+=' || str === '-=' || str === '*=' || str === '/=' ||\n\t                            str === '++' || str === '--' || str === '<<' || str === '>>' ||\n\t                            str === '&=' || str === '|=' || str === '^=' || str === '%=' ||\n\t                            str === '<=' || str === '>=' || str === '=>' || str === '**') {\n\t                            this.index += 2;\n\t                        }\n\t                        else {\n\t                            // 1-character punctuators.\n\t                            str = this.source[this.index];\n\t                            if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {\n\t                                ++this.index;\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t        }\n\t        if (this.index === start) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: 7 /* Punctuator */,\n\t            value: str,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals\n\t    Scanner.prototype.scanHexLiteral = function (start) {\n\t        var num = '';\n\t        while (!this.eof()) {\n\t            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n\t                break;\n\t            }\n\t            num += this.source[this.index++];\n\t        }\n\t        if (num.length === 0) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: 6 /* NumericLiteral */,\n\t            value: parseInt('0x' + num, 16),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    Scanner.prototype.scanBinaryLiteral = function (start) {\n\t        var num = '';\n\t        var ch;\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index];\n\t            if (ch !== '0' && ch !== '1') {\n\t                break;\n\t            }\n\t            num += this.source[this.index++];\n\t        }\n\t        if (num.length === 0) {\n\t            // only 0b or 0B\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (!this.eof()) {\n\t            ch = this.source.charCodeAt(this.index);\n\t            /* istanbul ignore else */\n\t            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {\n\t                this.throwUnexpectedToken();\n\t            }\n\t        }\n\t        return {\n\t            type: 6 /* NumericLiteral */,\n\t            value: parseInt(num, 2),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    Scanner.prototype.scanOctalLiteral = function (prefix, start) {\n\t        var num = '';\n\t        var octal = false;\n\t        if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {\n\t            octal = true;\n\t            num = '0' + this.source[this.index++];\n\t        }\n\t        else {\n\t            ++this.index;\n\t        }\n\t        while (!this.eof()) {\n\t            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t                break;\n\t            }\n\t            num += this.source[this.index++];\n\t        }\n\t        if (!octal && num.length === 0) {\n\t            // only 0o or 0O\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: 6 /* NumericLiteral */,\n\t            value: parseInt(num, 8),\n\t            octal: octal,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    Scanner.prototype.isImplicitOctalLiteral = function () {\n\t        // Implicit octal, unless there is a non-octal digit.\n\t        // (Annex B.1.1 on Numeric Literals)\n\t        for (var i = this.index + 1; i < this.length; ++i) {\n\t            var ch = this.source[i];\n\t            if (ch === '8' || ch === '9') {\n\t                return false;\n\t            }\n\t            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                return true;\n\t            }\n\t        }\n\t        return true;\n\t    };\n\t    Scanner.prototype.scanNumericLiteral = function () {\n\t        var start = this.index;\n\t        var ch = this.source[start];\n\t        assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'), 'Numeric literal must start with a decimal digit or a decimal point');\n\t        var num = '';\n\t        if (ch !== '.') {\n\t            num = this.source[this.index++];\n\t            ch = this.source[this.index];\n\t            // Hex number starts with '0x'.\n\t            // Octal number starts with '0'.\n\t            // Octal number in ES6 starts with '0o'.\n\t            // Binary number in ES6 starts with '0b'.\n\t            if (num === '0') {\n\t                if (ch === 'x' || ch === 'X') {\n\t                    ++this.index;\n\t                    return this.scanHexLiteral(start);\n\t                }\n\t                if (ch === 'b' || ch === 'B') {\n\t                    ++this.index;\n\t                    return this.scanBinaryLiteral(start);\n\t                }\n\t                if (ch === 'o' || ch === 'O') {\n\t                    return this.scanOctalLiteral(ch, start);\n\t                }\n\t                if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                    if (this.isImplicitOctalLiteral()) {\n\t                        return this.scanOctalLiteral(ch, start);\n\t                    }\n\t                }\n\t            }\n\t            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                num += this.source[this.index++];\n\t            }\n\t            ch = this.source[this.index];\n\t        }\n\t        if (ch === '.') {\n\t            num += this.source[this.index++];\n\t            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                num += this.source[this.index++];\n\t            }\n\t            ch = this.source[this.index];\n\t        }\n\t        if (ch === 'e' || ch === 'E') {\n\t            num += this.source[this.index++];\n\t            ch = this.source[this.index];\n\t            if (ch === '+' || ch === '-') {\n\t                num += this.source[this.index++];\n\t            }\n\t            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                    num += this.source[this.index++];\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken();\n\t            }\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: 6 /* NumericLiteral */,\n\t            value: parseFloat(num),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-literals-string-literals\n\t    Scanner.prototype.scanStringLiteral = function () {\n\t        var start = this.index;\n\t        var quote = this.source[start];\n\t        assert_1.assert((quote === '\\'' || quote === '\"'), 'String literal must starts with a quote');\n\t        ++this.index;\n\t        var octal = false;\n\t        var str = '';\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index++];\n\t            if (ch === quote) {\n\t                quote = '';\n\t                break;\n\t            }\n\t            else if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    switch (ch) {\n\t                        case 'u':\n\t                            if (this.source[this.index] === '{') {\n\t                                ++this.index;\n\t                                str += this.scanUnicodeCodePointEscape();\n\t                            }\n\t                            else {\n\t                                var unescaped_1 = this.scanHexEscape(ch);\n\t                                if (unescaped_1 === null) {\n\t                                    this.throwUnexpectedToken();\n\t                                }\n\t                                str += unescaped_1;\n\t                            }\n\t                            break;\n\t                        case 'x':\n\t                            var unescaped = this.scanHexEscape(ch);\n\t                            if (unescaped === null) {\n\t                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);\n\t                            }\n\t                            str += unescaped;\n\t                            break;\n\t                        case 'n':\n\t                            str += '\\n';\n\t                            break;\n\t                        case 'r':\n\t                            str += '\\r';\n\t                            break;\n\t                        case 't':\n\t                            str += '\\t';\n\t                            break;\n\t                        case 'b':\n\t                            str += '\\b';\n\t                            break;\n\t                        case 'f':\n\t                            str += '\\f';\n\t                            break;\n\t                        case 'v':\n\t                            str += '\\x0B';\n\t                            break;\n\t                        case '8':\n\t                        case '9':\n\t                            str += ch;\n\t                            this.tolerateUnexpectedToken();\n\t                            break;\n\t                        default:\n\t                            if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                                var octToDec = this.octalToDecimal(ch);\n\t                                octal = octToDec.octal || octal;\n\t                                str += String.fromCharCode(octToDec.code);\n\t                            }\n\t                            else {\n\t                                str += ch;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t                else {\n\t                    ++this.lineNumber;\n\t                    if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                        ++this.index;\n\t                    }\n\t                    this.lineStart = this.index;\n\t                }\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            else {\n\t                str += ch;\n\t            }\n\t        }\n\t        if (quote !== '') {\n\t            this.index = start;\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: 8 /* StringLiteral */,\n\t            value: str,\n\t            octal: octal,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components\n\t    Scanner.prototype.scanTemplate = function () {\n\t        var cooked = '';\n\t        var terminated = false;\n\t        var start = this.index;\n\t        var head = (this.source[start] === '`');\n\t        var tail = false;\n\t        var rawOffset = 2;\n\t        ++this.index;\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index++];\n\t            if (ch === '`') {\n\t                rawOffset = 1;\n\t                tail = true;\n\t                terminated = true;\n\t                break;\n\t            }\n\t            else if (ch === '$') {\n\t                if (this.source[this.index] === '{') {\n\t                    this.curlyStack.push('${');\n\t                    ++this.index;\n\t                    terminated = true;\n\t                    break;\n\t                }\n\t                cooked += ch;\n\t            }\n\t            else if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    switch (ch) {\n\t                        case 'n':\n\t                            cooked += '\\n';\n\t                            break;\n\t                        case 'r':\n\t                            cooked += '\\r';\n\t                            break;\n\t                        case 't':\n\t                            cooked += '\\t';\n\t                            break;\n\t                        case 'u':\n\t                            if (this.source[this.index] === '{') {\n\t                                ++this.index;\n\t                                cooked += this.scanUnicodeCodePointEscape();\n\t                            }\n\t                            else {\n\t                                var restore = this.index;\n\t                                var unescaped_2 = this.scanHexEscape(ch);\n\t                                if (unescaped_2 !== null) {\n\t                                    cooked += unescaped_2;\n\t                                }\n\t                                else {\n\t                                    this.index = restore;\n\t                                    cooked += ch;\n\t                                }\n\t                            }\n\t                            break;\n\t                        case 'x':\n\t                            var unescaped = this.scanHexEscape(ch);\n\t                            if (unescaped === null) {\n\t                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);\n\t                            }\n\t                            cooked += unescaped;\n\t                            break;\n\t                        case 'b':\n\t                            cooked += '\\b';\n\t                            break;\n\t                        case 'f':\n\t                            cooked += '\\f';\n\t                            break;\n\t                        case 'v':\n\t                            cooked += '\\v';\n\t                            break;\n\t                        default:\n\t                            if (ch === '0') {\n\t                                if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                                    // Illegal: \\01 \\02 and so on\n\t                                    this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n\t                                }\n\t                                cooked += '\\0';\n\t                            }\n\t                            else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                                // Illegal: \\1 \\2\n\t                                this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n\t                            }\n\t                            else {\n\t                                cooked += ch;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t                else {\n\t                    ++this.lineNumber;\n\t                    if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                        ++this.index;\n\t                    }\n\t                    this.lineStart = this.index;\n\t                }\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                ++this.lineNumber;\n\t                if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                    ++this.index;\n\t                }\n\t                this.lineStart = this.index;\n\t                cooked += '\\n';\n\t            }\n\t            else {\n\t                cooked += ch;\n\t            }\n\t        }\n\t        if (!terminated) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (!head) {\n\t            this.curlyStack.pop();\n\t        }\n\t        return {\n\t            type: 10 /* Template */,\n\t            value: this.source.slice(start + 1, this.index - rawOffset),\n\t            cooked: cooked,\n\t            head: head,\n\t            tail: tail,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals\n\t    Scanner.prototype.testRegExp = function (pattern, flags) {\n\t        // The BMP character to use as a replacement for astral symbols when\n\t        // translating an ES6 \"u\"-flagged pattern to an ES5-compatible\n\t        // approximation.\n\t        // Note: replacing with '\\uFFFF' enables false positives in unlikely\n\t        // scenarios. For example, `[\\u{1044f}-\\u{10440}]` is an invalid\n\t        // pattern that would not be detected by this substitution.\n\t        var astralSubstitute = '\\uFFFF';\n\t        var tmp = pattern;\n\t        var self = this;\n\t        if (flags.indexOf('u') >= 0) {\n\t            tmp = tmp\n\t                .replace(/\\\\u\\{([0-9a-fA-F]+)\\}|\\\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {\n\t                var codePoint = parseInt($1 || $2, 16);\n\t                if (codePoint > 0x10FFFF) {\n\t                    self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n\t                }\n\t                if (codePoint <= 0xFFFF) {\n\t                    return String.fromCharCode(codePoint);\n\t                }\n\t                return astralSubstitute;\n\t            })\n\t                .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, astralSubstitute);\n\t        }\n\t        // First, detect invalid regular expressions.\n\t        try {\n\t            RegExp(tmp);\n\t        }\n\t        catch (e) {\n\t            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n\t        }\n\t        // Return a regular expression object for this pattern-flag pair, or\n\t        // `null` in case the current environment doesn't support the flags it\n\t        // uses.\n\t        try {\n\t            return new RegExp(pattern, flags);\n\t        }\n\t        catch (exception) {\n\t            /* istanbul ignore next */\n\t            return null;\n\t        }\n\t    };\n\t    Scanner.prototype.scanRegExpBody = function () {\n\t        var ch = this.source[this.index];\n\t        assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');\n\t        var str = this.source[this.index++];\n\t        var classMarker = false;\n\t        var terminated = false;\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index++];\n\t            str += ch;\n\t            if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals\n\t                if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t                }\n\t                str += ch;\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t            }\n\t            else if (classMarker) {\n\t                if (ch === ']') {\n\t                    classMarker = false;\n\t                }\n\t            }\n\t            else {\n\t                if (ch === '/') {\n\t                    terminated = true;\n\t                    break;\n\t                }\n\t                else if (ch === '[') {\n\t                    classMarker = true;\n\t                }\n\t            }\n\t        }\n\t        if (!terminated) {\n\t            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t        }\n\t        // Exclude leading and trailing slash.\n\t        return str.substr(1, str.length - 2);\n\t    };\n\t    Scanner.prototype.scanRegExpFlags = function () {\n\t        var str = '';\n\t        var flags = '';\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index];\n\t            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            ++this.index;\n\t            if (ch === '\\\\' && !this.eof()) {\n\t                ch = this.source[this.index];\n\t                if (ch === 'u') {\n\t                    ++this.index;\n\t                    var restore = this.index;\n\t                    var char = this.scanHexEscape('u');\n\t                    if (char !== null) {\n\t                        flags += char;\n\t                        for (str += '\\\\u'; restore < this.index; ++restore) {\n\t                            str += this.source[restore];\n\t                        }\n\t                    }\n\t                    else {\n\t                        this.index = restore;\n\t                        flags += 'u';\n\t                        str += '\\\\u';\n\t                    }\n\t                    this.tolerateUnexpectedToken();\n\t                }\n\t                else {\n\t                    str += '\\\\';\n\t                    this.tolerateUnexpectedToken();\n\t                }\n\t            }\n\t            else {\n\t                flags += ch;\n\t                str += ch;\n\t            }\n\t        }\n\t        return flags;\n\t    };\n\t    Scanner.prototype.scanRegExp = function () {\n\t        var start = this.index;\n\t        var pattern = this.scanRegExpBody();\n\t        var flags = this.scanRegExpFlags();\n\t        var value = this.testRegExp(pattern, flags);\n\t        return {\n\t            type: 9 /* RegularExpression */,\n\t            value: '',\n\t            pattern: pattern,\n\t            flags: flags,\n\t            regex: value,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    Scanner.prototype.lex = function () {\n\t        if (this.eof()) {\n\t            return {\n\t                type: 2 /* EOF */,\n\t                value: '',\n\t                lineNumber: this.lineNumber,\n\t                lineStart: this.lineStart,\n\t                start: this.index,\n\t                end: this.index\n\t            };\n\t        }\n\t        var cp = this.source.charCodeAt(this.index);\n\t        if (character_1.Character.isIdentifierStart(cp)) {\n\t            return this.scanIdentifier();\n\t        }\n\t        // Very common: ( and ) and ;\n\t        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {\n\t            return this.scanPunctuator();\n\t        }\n\t        // String literal starts with single quote (U+0027) or double quote (U+0022).\n\t        if (cp === 0x27 || cp === 0x22) {\n\t            return this.scanStringLiteral();\n\t        }\n\t        // Dot (.) U+002E can also start a floating-point number, hence the need\n\t        // to check the next character.\n\t        if (cp === 0x2E) {\n\t            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {\n\t                return this.scanNumericLiteral();\n\t            }\n\t            return this.scanPunctuator();\n\t        }\n\t        if (character_1.Character.isDecimalDigit(cp)) {\n\t            return this.scanNumericLiteral();\n\t        }\n\t        // Template literals start with ` (U+0060) for template head\n\t        // or } (U+007D) for template middle or template tail.\n\t        if (cp === 0x60 || (cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${')) {\n\t            return this.scanTemplate();\n\t        }\n\t        // Possible identifier start in a surrogate pair.\n\t        if (cp >= 0xD800 && cp < 0xDFFF) {\n\t            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {\n\t                return this.scanIdentifier();\n\t            }\n\t        }\n\t        return this.scanPunctuator();\n\t    };\n\t    return Scanner;\n\t}());\n\texports.Scanner = Scanner;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.TokenName = {};\n\texports.TokenName[1 /* BooleanLiteral */] = 'Boolean';\n\texports.TokenName[2 /* EOF */] = '<end>';\n\texports.TokenName[3 /* Identifier */] = 'Identifier';\n\texports.TokenName[4 /* Keyword */] = 'Keyword';\n\texports.TokenName[5 /* NullLiteral */] = 'Null';\n\texports.TokenName[6 /* NumericLiteral */] = 'Numeric';\n\texports.TokenName[7 /* Punctuator */] = 'Punctuator';\n\texports.TokenName[8 /* StringLiteral */] = 'String';\n\texports.TokenName[9 /* RegularExpression */] = 'RegularExpression';\n\texports.TokenName[10 /* Template */] = 'Template';\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t// Generated by generate-xhtml-entities.js. DO NOT MODIFY!\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.XHTMLEntities = {\n\t    quot: '\\u0022',\n\t    amp: '\\u0026',\n\t    apos: '\\u0027',\n\t    gt: '\\u003E',\n\t    nbsp: '\\u00A0',\n\t    iexcl: '\\u00A1',\n\t    cent: '\\u00A2',\n\t    pound: '\\u00A3',\n\t    curren: '\\u00A4',\n\t    yen: '\\u00A5',\n\t    brvbar: '\\u00A6',\n\t    sect: '\\u00A7',\n\t    uml: '\\u00A8',\n\t    copy: '\\u00A9',\n\t    ordf: '\\u00AA',\n\t    laquo: '\\u00AB',\n\t    not: '\\u00AC',\n\t    shy: '\\u00AD',\n\t    reg: '\\u00AE',\n\t    macr: '\\u00AF',\n\t    deg: '\\u00B0',\n\t    plusmn: '\\u00B1',\n\t    sup2: '\\u00B2',\n\t    sup3: '\\u00B3',\n\t    acute: '\\u00B4',\n\t    micro: '\\u00B5',\n\t    para: '\\u00B6',\n\t    middot: '\\u00B7',\n\t    cedil: '\\u00B8',\n\t    sup1: '\\u00B9',\n\t    ordm: '\\u00BA',\n\t    raquo: '\\u00BB',\n\t    frac14: '\\u00BC',\n\t    frac12: '\\u00BD',\n\t    frac34: '\\u00BE',\n\t    iquest: '\\u00BF',\n\t    Agrave: '\\u00C0',\n\t    Aacute: '\\u00C1',\n\t    Acirc: '\\u00C2',\n\t    Atilde: '\\u00C3',\n\t    Auml: '\\u00C4',\n\t    Aring: '\\u00C5',\n\t    AElig: '\\u00C6',\n\t    Ccedil: '\\u00C7',\n\t    Egrave: '\\u00C8',\n\t    Eacute: '\\u00C9',\n\t    Ecirc: '\\u00CA',\n\t    Euml: '\\u00CB',\n\t    Igrave: '\\u00CC',\n\t    Iacute: '\\u00CD',\n\t    Icirc: '\\u00CE',\n\t    Iuml: '\\u00CF',\n\t    ETH: '\\u00D0',\n\t    Ntilde: '\\u00D1',\n\t    Ograve: '\\u00D2',\n\t    Oacute: '\\u00D3',\n\t    Ocirc: '\\u00D4',\n\t    Otilde: '\\u00D5',\n\t    Ouml: '\\u00D6',\n\t    times: '\\u00D7',\n\t    Oslash: '\\u00D8',\n\t    Ugrave: '\\u00D9',\n\t    Uacute: '\\u00DA',\n\t    Ucirc: '\\u00DB',\n\t    Uuml: '\\u00DC',\n\t    Yacute: '\\u00DD',\n\t    THORN: '\\u00DE',\n\t    szlig: '\\u00DF',\n\t    agrave: '\\u00E0',\n\t    aacute: '\\u00E1',\n\t    acirc: '\\u00E2',\n\t    atilde: '\\u00E3',\n\t    auml: '\\u00E4',\n\t    aring: '\\u00E5',\n\t    aelig: '\\u00E6',\n\t    ccedil: '\\u00E7',\n\t    egrave: '\\u00E8',\n\t    eacute: '\\u00E9',\n\t    ecirc: '\\u00EA',\n\t    euml: '\\u00EB',\n\t    igrave: '\\u00EC',\n\t    iacute: '\\u00ED',\n\t    icirc: '\\u00EE',\n\t    iuml: '\\u00EF',\n\t    eth: '\\u00F0',\n\t    ntilde: '\\u00F1',\n\t    ograve: '\\u00F2',\n\t    oacute: '\\u00F3',\n\t    ocirc: '\\u00F4',\n\t    otilde: '\\u00F5',\n\t    ouml: '\\u00F6',\n\t    divide: '\\u00F7',\n\t    oslash: '\\u00F8',\n\t    ugrave: '\\u00F9',\n\t    uacute: '\\u00FA',\n\t    ucirc: '\\u00FB',\n\t    uuml: '\\u00FC',\n\t    yacute: '\\u00FD',\n\t    thorn: '\\u00FE',\n\t    yuml: '\\u00FF',\n\t    OElig: '\\u0152',\n\t    oelig: '\\u0153',\n\t    Scaron: '\\u0160',\n\t    scaron: '\\u0161',\n\t    Yuml: '\\u0178',\n\t    fnof: '\\u0192',\n\t    circ: '\\u02C6',\n\t    tilde: '\\u02DC',\n\t    Alpha: '\\u0391',\n\t    Beta: '\\u0392',\n\t    Gamma: '\\u0393',\n\t    Delta: '\\u0394',\n\t    Epsilon: '\\u0395',\n\t    Zeta: '\\u0396',\n\t    Eta: '\\u0397',\n\t    Theta: '\\u0398',\n\t    Iota: '\\u0399',\n\t    Kappa: '\\u039A',\n\t    Lambda: '\\u039B',\n\t    Mu: '\\u039C',\n\t    Nu: '\\u039D',\n\t    Xi: '\\u039E',\n\t    Omicron: '\\u039F',\n\t    Pi: '\\u03A0',\n\t    Rho: '\\u03A1',\n\t    Sigma: '\\u03A3',\n\t    Tau: '\\u03A4',\n\t    Upsilon: '\\u03A5',\n\t    Phi: '\\u03A6',\n\t    Chi: '\\u03A7',\n\t    Psi: '\\u03A8',\n\t    Omega: '\\u03A9',\n\t    alpha: '\\u03B1',\n\t    beta: '\\u03B2',\n\t    gamma: '\\u03B3',\n\t    delta: '\\u03B4',\n\t    epsilon: '\\u03B5',\n\t    zeta: '\\u03B6',\n\t    eta: '\\u03B7',\n\t    theta: '\\u03B8',\n\t    iota: '\\u03B9',\n\t    kappa: '\\u03BA',\n\t    lambda: '\\u03BB',\n\t    mu: '\\u03BC',\n\t    nu: '\\u03BD',\n\t    xi: '\\u03BE',\n\t    omicron: '\\u03BF',\n\t    pi: '\\u03C0',\n\t    rho: '\\u03C1',\n\t    sigmaf: '\\u03C2',\n\t    sigma: '\\u03C3',\n\t    tau: '\\u03C4',\n\t    upsilon: '\\u03C5',\n\t    phi: '\\u03C6',\n\t    chi: '\\u03C7',\n\t    psi: '\\u03C8',\n\t    omega: '\\u03C9',\n\t    thetasym: '\\u03D1',\n\t    upsih: '\\u03D2',\n\t    piv: '\\u03D6',\n\t    ensp: '\\u2002',\n\t    emsp: '\\u2003',\n\t    thinsp: '\\u2009',\n\t    zwnj: '\\u200C',\n\t    zwj: '\\u200D',\n\t    lrm: '\\u200E',\n\t    rlm: '\\u200F',\n\t    ndash: '\\u2013',\n\t    mdash: '\\u2014',\n\t    lsquo: '\\u2018',\n\t    rsquo: '\\u2019',\n\t    sbquo: '\\u201A',\n\t    ldquo: '\\u201C',\n\t    rdquo: '\\u201D',\n\t    bdquo: '\\u201E',\n\t    dagger: '\\u2020',\n\t    Dagger: '\\u2021',\n\t    bull: '\\u2022',\n\t    hellip: '\\u2026',\n\t    permil: '\\u2030',\n\t    prime: '\\u2032',\n\t    Prime: '\\u2033',\n\t    lsaquo: '\\u2039',\n\t    rsaquo: '\\u203A',\n\t    oline: '\\u203E',\n\t    frasl: '\\u2044',\n\t    euro: '\\u20AC',\n\t    image: '\\u2111',\n\t    weierp: '\\u2118',\n\t    real: '\\u211C',\n\t    trade: '\\u2122',\n\t    alefsym: '\\u2135',\n\t    larr: '\\u2190',\n\t    uarr: '\\u2191',\n\t    rarr: '\\u2192',\n\t    darr: '\\u2193',\n\t    harr: '\\u2194',\n\t    crarr: '\\u21B5',\n\t    lArr: '\\u21D0',\n\t    uArr: '\\u21D1',\n\t    rArr: '\\u21D2',\n\t    dArr: '\\u21D3',\n\t    hArr: '\\u21D4',\n\t    forall: '\\u2200',\n\t    part: '\\u2202',\n\t    exist: '\\u2203',\n\t    empty: '\\u2205',\n\t    nabla: '\\u2207',\n\t    isin: '\\u2208',\n\t    notin: '\\u2209',\n\t    ni: '\\u220B',\n\t    prod: '\\u220F',\n\t    sum: '\\u2211',\n\t    minus: '\\u2212',\n\t    lowast: '\\u2217',\n\t    radic: '\\u221A',\n\t    prop: '\\u221D',\n\t    infin: '\\u221E',\n\t    ang: '\\u2220',\n\t    and: '\\u2227',\n\t    or: '\\u2228',\n\t    cap: '\\u2229',\n\t    cup: '\\u222A',\n\t    int: '\\u222B',\n\t    there4: '\\u2234',\n\t    sim: '\\u223C',\n\t    cong: '\\u2245',\n\t    asymp: '\\u2248',\n\t    ne: '\\u2260',\n\t    equiv: '\\u2261',\n\t    le: '\\u2264',\n\t    ge: '\\u2265',\n\t    sub: '\\u2282',\n\t    sup: '\\u2283',\n\t    nsub: '\\u2284',\n\t    sube: '\\u2286',\n\t    supe: '\\u2287',\n\t    oplus: '\\u2295',\n\t    otimes: '\\u2297',\n\t    perp: '\\u22A5',\n\t    sdot: '\\u22C5',\n\t    lceil: '\\u2308',\n\t    rceil: '\\u2309',\n\t    lfloor: '\\u230A',\n\t    rfloor: '\\u230B',\n\t    loz: '\\u25CA',\n\t    spades: '\\u2660',\n\t    clubs: '\\u2663',\n\t    hearts: '\\u2665',\n\t    diams: '\\u2666',\n\t    lang: '\\u27E8',\n\t    rang: '\\u27E9'\n\t};\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar error_handler_1 = __webpack_require__(10);\n\tvar scanner_1 = __webpack_require__(12);\n\tvar token_1 = __webpack_require__(13);\n\tvar Reader = (function () {\n\t    function Reader() {\n\t        this.values = [];\n\t        this.curly = this.paren = -1;\n\t    }\n\t    // A function following one of those tokens is an expression.\n\t    Reader.prototype.beforeFunctionExpression = function (t) {\n\t        return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',\n\t            'return', 'case', 'delete', 'throw', 'void',\n\t            // assignment operators\n\t            '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=',\n\t            '&=', '|=', '^=', ',',\n\t            // binary/unary operators\n\t            '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&',\n\t            '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',\n\t            '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;\n\t    };\n\t    // Determine if forward slash (/) is an operator or part of a regular expression\n\t    // https://github.com/mozilla/sweet.js/wiki/design\n\t    Reader.prototype.isRegexStart = function () {\n\t        var previous = this.values[this.values.length - 1];\n\t        var regex = (previous !== null);\n\t        switch (previous) {\n\t            case 'this':\n\t            case ']':\n\t                regex = false;\n\t                break;\n\t            case ')':\n\t                var keyword = this.values[this.paren - 1];\n\t                regex = (keyword === 'if' || keyword === 'while' || keyword === 'for' || keyword === 'with');\n\t                break;\n\t            case '}':\n\t                // Dividing a function by anything makes little sense,\n\t                // but we have to check for that.\n\t                regex = false;\n\t                if (this.values[this.curly - 3] === 'function') {\n\t                    // Anonymous function, e.g. function(){} /42\n\t                    var check = this.values[this.curly - 4];\n\t                    regex = check ? !this.beforeFunctionExpression(check) : false;\n\t                }\n\t                else if (this.values[this.curly - 4] === 'function') {\n\t                    // Named function, e.g. function f(){} /42/\n\t                    var check = this.values[this.curly - 5];\n\t                    regex = check ? !this.beforeFunctionExpression(check) : true;\n\t                }\n\t                break;\n\t            default:\n\t                break;\n\t        }\n\t        return regex;\n\t    };\n\t    Reader.prototype.push = function (token) {\n\t        if (token.type === 7 /* Punctuator */ || token.type === 4 /* Keyword */) {\n\t            if (token.value === '{') {\n\t                this.curly = this.values.length;\n\t            }\n\t            else if (token.value === '(') {\n\t                this.paren = this.values.length;\n\t            }\n\t            this.values.push(token.value);\n\t        }\n\t        else {\n\t            this.values.push(null);\n\t        }\n\t    };\n\t    return Reader;\n\t}());\n\tvar Tokenizer = (function () {\n\t    function Tokenizer(code, config) {\n\t        this.errorHandler = new error_handler_1.ErrorHandler();\n\t        this.errorHandler.tolerant = config ? (typeof config.tolerant === 'boolean' && config.tolerant) : false;\n\t        this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n\t        this.scanner.trackComment = config ? (typeof config.comment === 'boolean' && config.comment) : false;\n\t        this.trackRange = config ? (typeof config.range === 'boolean' && config.range) : false;\n\t        this.trackLoc = config ? (typeof config.loc === 'boolean' && config.loc) : false;\n\t        this.buffer = [];\n\t        this.reader = new Reader();\n\t    }\n\t    Tokenizer.prototype.errors = function () {\n\t        return this.errorHandler.errors;\n\t    };\n\t    Tokenizer.prototype.getNextToken = function () {\n\t        if (this.buffer.length === 0) {\n\t            var comments = this.scanner.scanComments();\n\t            if (this.scanner.trackComment) {\n\t                for (var i = 0; i < comments.length; ++i) {\n\t                    var e = comments[i];\n\t                    var value = this.scanner.source.slice(e.slice[0], e.slice[1]);\n\t                    var comment = {\n\t                        type: e.multiLine ? 'BlockComment' : 'LineComment',\n\t                        value: value\n\t                    };\n\t                    if (this.trackRange) {\n\t                        comment.range = e.range;\n\t                    }\n\t                    if (this.trackLoc) {\n\t                        comment.loc = e.loc;\n\t                    }\n\t                    this.buffer.push(comment);\n\t                }\n\t            }\n\t            if (!this.scanner.eof()) {\n\t                var loc = void 0;\n\t                if (this.trackLoc) {\n\t                    loc = {\n\t                        start: {\n\t                            line: this.scanner.lineNumber,\n\t                            column: this.scanner.index - this.scanner.lineStart\n\t                        },\n\t                        end: {}\n\t                    };\n\t                }\n\t                var startRegex = (this.scanner.source[this.scanner.index] === '/') && this.reader.isRegexStart();\n\t                var token = startRegex ? this.scanner.scanRegExp() : this.scanner.lex();\n\t                this.reader.push(token);\n\t                var entry = {\n\t                    type: token_1.TokenName[token.type],\n\t                    value: this.scanner.source.slice(token.start, token.end)\n\t                };\n\t                if (this.trackRange) {\n\t                    entry.range = [token.start, token.end];\n\t                }\n\t                if (this.trackLoc) {\n\t                    loc.end = {\n\t                        line: this.scanner.lineNumber,\n\t                        column: this.scanner.index - this.scanner.lineStart\n\t                    };\n\t                    entry.loc = loc;\n\t                }\n\t                if (token.type === 9 /* RegularExpression */) {\n\t                    var pattern = token.pattern;\n\t                    var flags = token.flags;\n\t                    entry.regex = { pattern: pattern, flags: flags };\n\t                }\n\t                this.buffer.push(entry);\n\t            }\n\t        }\n\t        return this.buffer.shift();\n\t    };\n\t    return Tokenizer;\n\t}());\n\texports.Tokenizer = Tokenizer;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/esprima/dist/esprima.js?");

/***/ }),

/***/ "../../node_modules/get-plane-normal/index.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/get-plane-normal/index.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var normalize = __webpack_require__(/*! gl-vec3/normalize */ \"../../node_modules/gl-vec3/normalize.js\")\nvar sub = __webpack_require__(/*! gl-vec3/subtract */ \"../../node_modules/gl-vec3/subtract.js\")\nvar cross = __webpack_require__(/*! gl-vec3/cross */ \"../../node_modules/gl-vec3/cross.js\")\nvar tmp = [0, 0, 0]\n\nmodule.exports = planeNormal\n\nfunction planeNormal (out, point1, point2, point3) {\n  sub(out, point1, point2)\n  sub(tmp, point2, point3)\n  cross(out, out, tmp)\n  return normalize(out, out)\n}\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/get-plane-normal/index.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/add.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/add.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = add;\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction add(out, a, b) {\n    out[0] = a[0] + b[0]\n    out[1] = a[1] + b[1]\n    out[2] = a[2] + b[2]\n    return out\n}\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/add.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/copy.js":
/*!*************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/copy.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = copy;\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nfunction copy(out, a) {\n    out[0] = a[0]\n    out[1] = a[1]\n    out[2] = a[2]\n    return out\n}\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/copy.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/cross.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/cross.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = cross;\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction cross(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2],\n        bx = b[0], by = b[1], bz = b[2]\n\n    out[0] = ay * bz - az * by\n    out[1] = az * bx - ax * bz\n    out[2] = ax * by - ay * bx\n    return out\n}\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/cross.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/distance.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/distance.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = distance;\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nfunction distance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2]\n    return Math.sqrt(x*x + y*y + z*z)\n}\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/distance.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/dot.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/dot.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = dot;\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nfunction dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]\n}\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/dot.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/length.js":
/*!***************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/length.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = length;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nfunction length(a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2]\n    return Math.sqrt(x*x + y*y + z*z)\n}\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/length.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/normalize.js":
/*!******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/normalize.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = normalize;\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nfunction normalize(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2]\n    var len = x*x + y*y + z*z\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len)\n        out[0] = a[0] * len\n        out[1] = a[1] * len\n        out[2] = a[2] * len\n    }\n    return out\n}\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/normalize.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/scale.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/scale.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = scale;\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nfunction scale(out, a, b) {\n    out[0] = a[0] * b\n    out[1] = a[1] * b\n    out[2] = a[2] * b\n    return out\n}\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/scale.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/scaleAndAdd.js":
/*!********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/scaleAndAdd.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = scaleAndAdd;\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nfunction scaleAndAdd(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale)\n    out[1] = a[1] + (b[1] * scale)\n    out[2] = a[2] + (b[2] * scale)\n    return out\n}\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/scaleAndAdd.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/squaredDistance.js":
/*!************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/squaredDistance.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = squaredDistance;\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nfunction squaredDistance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2]\n    return x*x + y*y + z*z\n}\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/squaredDistance.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/squaredLength.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/squaredLength.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = squaredLength;\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nfunction squaredLength(a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2]\n    return x*x + y*y + z*z\n}\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/squaredLength.js?");

/***/ }),

/***/ "../../node_modules/gl-vec3/subtract.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/subtract.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = subtract;\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction subtract(out, a, b) {\n    out[0] = a[0] - b[0]\n    out[1] = a[1] - b[1]\n    out[2] = a[2] - b[2]\n    return out\n}\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/gl-vec3/subtract.js?");

/***/ }),

/***/ "../../node_modules/ieee754/index.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ieee754/index.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ieee754/index.js?");

/***/ }),

/***/ "../../node_modules/inherits/inherits_browser.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/inherits/inherits_browser.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/inherits/inherits_browser.js?");

/***/ }),

/***/ "../../node_modules/isarray/index.js":
/*!**************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/isarray/index.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/isarray/index.js?");

/***/ }),

/***/ "../../node_modules/ms/index.js":
/*!*********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ms/index.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\-?\\d?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/ms/index.js?");

/***/ }),

/***/ "../../node_modules/node-fetch/browser.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/node-fetch/browser.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar global = getGlobal();\n\nmodule.exports = exports = global.fetch;\n\n// Needed for TypeScript and Webpack.\nexports.default = global.fetch.bind(global);\n\nexports.Headers = global.Headers;\nexports.Request = global.Request;\nexports.Response = global.Response;\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/node-fetch/browser.js?");

/***/ }),

/***/ "../../node_modules/node-libs-browser/mock/empty.js":
/*!*****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/node-libs-browser/mock/empty.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/node-libs-browser/mock/empty.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/bbox.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/bbox.js ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// The Bounding Box object\n\nfunction derive(v0, v1, v2, v3, t) {\n    return Math.pow(1 - t, 3) * v0 +\n        3 * Math.pow(1 - t, 2) * t * v1 +\n        3 * (1 - t) * Math.pow(t, 2) * v2 +\n        Math.pow(t, 3) * v3;\n}\n/**\n * A bounding box is an enclosing box that describes the smallest measure within which all the points lie.\n * It is used to calculate the bounding box of a glyph or text path.\n *\n * On initialization, x1/y1/x2/y2 will be NaN. Check if the bounding box is empty using `isEmpty()`.\n *\n * @exports opentype.BoundingBox\n * @class\n * @constructor\n */\nfunction BoundingBox() {\n    this.x1 = Number.NaN;\n    this.y1 = Number.NaN;\n    this.x2 = Number.NaN;\n    this.y2 = Number.NaN;\n}\n\n/**\n * Returns true if the bounding box is empty, that is, no points have been added to the box yet.\n */\nBoundingBox.prototype.isEmpty = function() {\n    return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);\n};\n\n/**\n * Add the point to the bounding box.\n * The x1/y1/x2/y2 coordinates of the bounding box will now encompass the given point.\n * @param {number} x - The X coordinate of the point.\n * @param {number} y - The Y coordinate of the point.\n */\nBoundingBox.prototype.addPoint = function(x, y) {\n    if (typeof x === 'number') {\n        if (isNaN(this.x1) || isNaN(this.x2)) {\n            this.x1 = x;\n            this.x2 = x;\n        }\n        if (x < this.x1) {\n            this.x1 = x;\n        }\n        if (x > this.x2) {\n            this.x2 = x;\n        }\n    }\n    if (typeof y === 'number') {\n        if (isNaN(this.y1) || isNaN(this.y2)) {\n            this.y1 = y;\n            this.y2 = y;\n        }\n        if (y < this.y1) {\n            this.y1 = y;\n        }\n        if (y > this.y2) {\n            this.y2 = y;\n        }\n    }\n};\n\n/**\n * Add a X coordinate to the bounding box.\n * This extends the bounding box to include the X coordinate.\n * This function is used internally inside of addBezier.\n * @param {number} x - The X coordinate of the point.\n */\nBoundingBox.prototype.addX = function(x) {\n    this.addPoint(x, null);\n};\n\n/**\n * Add a Y coordinate to the bounding box.\n * This extends the bounding box to include the Y coordinate.\n * This function is used internally inside of addBezier.\n * @param {number} y - The Y coordinate of the point.\n */\nBoundingBox.prototype.addY = function(y) {\n    this.addPoint(null, y);\n};\n\n/**\n * Add a Bézier curve to the bounding box.\n * This extends the bounding box to include the entire Bézier.\n * @param {number} x0 - The starting X coordinate.\n * @param {number} y0 - The starting Y coordinate.\n * @param {number} x1 - The X coordinate of the first control point.\n * @param {number} y1 - The Y coordinate of the first control point.\n * @param {number} x2 - The X coordinate of the second control point.\n * @param {number} y2 - The Y coordinate of the second control point.\n * @param {number} x - The ending X coordinate.\n * @param {number} y - The ending Y coordinate.\n */\nBoundingBox.prototype.addBezier = function(x0, y0, x1, y1, x2, y2, x, y) {\n    // This code is based on http://nishiohirokazu.blogspot.com/2009/06/how-to-calculate-bezier-curves-bounding.html\n    // and https://github.com/icons8/svg-path-bounding-box\n\n    const p0 = [x0, y0];\n    const p1 = [x1, y1];\n    const p2 = [x2, y2];\n    const p3 = [x, y];\n\n    this.addPoint(x0, y0);\n    this.addPoint(x, y);\n\n    for (let i = 0; i <= 1; i++) {\n        const b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n        const a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n        const c = 3 * p1[i] - 3 * p0[i];\n\n        if (a === 0) {\n            if (b === 0) continue;\n            const t = -c / b;\n            if (0 < t && t < 1) {\n                if (i === 0) this.addX(derive(p0[i], p1[i], p2[i], p3[i], t));\n                if (i === 1) this.addY(derive(p0[i], p1[i], p2[i], p3[i], t));\n            }\n            continue;\n        }\n\n        const b2ac = Math.pow(b, 2) - 4 * c * a;\n        if (b2ac < 0) continue;\n        const t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n        if (0 < t1 && t1 < 1) {\n            if (i === 0) this.addX(derive(p0[i], p1[i], p2[i], p3[i], t1));\n            if (i === 1) this.addY(derive(p0[i], p1[i], p2[i], p3[i], t1));\n        }\n        const t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n        if (0 < t2 && t2 < 1) {\n            if (i === 0) this.addX(derive(p0[i], p1[i], p2[i], p3[i], t2));\n            if (i === 1) this.addY(derive(p0[i], p1[i], p2[i], p3[i], t2));\n        }\n    }\n};\n\n/**\n * Add a quadratic curve to the bounding box.\n * This extends the bounding box to include the entire quadratic curve.\n * @param {number} x0 - The starting X coordinate.\n * @param {number} y0 - The starting Y coordinate.\n * @param {number} x1 - The X coordinate of the control point.\n * @param {number} y1 - The Y coordinate of the control point.\n * @param {number} x - The ending X coordinate.\n * @param {number} y - The ending Y coordinate.\n */\nBoundingBox.prototype.addQuad = function(x0, y0, x1, y1, x, y) {\n    const cp1x = x0 + 2 / 3 * (x1 - x0);\n    const cp1y = y0 + 2 / 3 * (y1 - y0);\n    const cp2x = cp1x + 1 / 3 * (x - x0);\n    const cp2y = cp1y + 1 / 3 * (y - y0);\n    this.addBezier(x0, y0, cp1x, cp1y, cp2x, cp2y, x, y);\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (BoundingBox);\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/bbox.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/bidi.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/bidi.js ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tokenizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tokenizer */ \"../../node_modules/opentype.js/src/tokenizer.js\");\n/* harmony import */ var _features_arab_contextCheck_arabicWord__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./features/arab/contextCheck/arabicWord */ \"../../node_modules/opentype.js/src/features/arab/contextCheck/arabicWord.js\");\n/* harmony import */ var _features_arab_contextCheck_arabicSentence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./features/arab/contextCheck/arabicSentence */ \"../../node_modules/opentype.js/src/features/arab/contextCheck/arabicSentence.js\");\n/* harmony import */ var _features_arab_arabicPresentationForms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./features/arab/arabicPresentationForms */ \"../../node_modules/opentype.js/src/features/arab/arabicPresentationForms.js\");\n/* harmony import */ var _features_arab_arabicRequiredLigatures__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./features/arab/arabicRequiredLigatures */ \"../../node_modules/opentype.js/src/features/arab/arabicRequiredLigatures.js\");\n/**\n * Infer bidirectional properties for a given text and apply\n * the corresponding layout rules.\n */\n\n\n\n\n\n\n\n/**\n * Create Bidi. features\n * @param {string} baseDir text base direction. value either 'ltr' or 'rtl'\n */\nfunction Bidi(baseDir) {\n    this.baseDir = baseDir || 'ltr';\n    this.tokenizer = new _tokenizer__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    this.features = [];\n}\n\n/**\n * Sets Bidi text\n * @param {string} text a text input\n */\nBidi.prototype.setText = function (text) {\n    this.text = text;\n};\n\n/**\n * Store essential context checks:\n * arabic word check for applying gsub features\n * arabic sentence check for adjusting arabic layout\n */\nBidi.prototype.contextChecks = ({\n    arabicWordCheck: _features_arab_contextCheck_arabicWord__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    arabicSentenceCheck: _features_arab_contextCheck_arabicSentence__WEBPACK_IMPORTED_MODULE_2__[\"default\"]\n});\n\n/**\n * Register arabic word check\n */\nfunction registerArabicWordCheck() {\n    const checks = this.contextChecks.arabicWordCheck;\n    return this.tokenizer.registerContextChecker(\n        'arabicWord',\n        checks.arabicWordStartCheck,\n        checks.arabicWordEndCheck\n    );\n}\n\n/**\n * Register arabic sentence check\n */\nfunction registerArabicSentenceCheck() {\n    const checks = this.contextChecks.arabicSentenceCheck;\n    return this.tokenizer.registerContextChecker(\n        'arabicSentence',\n        checks.arabicSentenceStartCheck,\n        checks.arabicSentenceEndCheck\n    );\n}\n\n/**\n * Perform pre tokenization procedure then\n * tokenize text input\n */\nfunction tokenizeText() {\n    registerArabicWordCheck.call(this);\n    registerArabicSentenceCheck.call(this);\n    return this.tokenizer.tokenize(this.text);\n}\n\n/**\n * Reverse arabic sentence layout\n * TODO: check base dir before applying adjustments - priority low\n */\nfunction reverseArabicSentences() {\n    const ranges = this.tokenizer.getContextRanges('arabicSentence');\n    ranges.forEach(range => {\n        let rangeTokens = this.tokenizer.getRangeTokens(range);\n        this.tokenizer.replaceRange(\n            range.startIndex,\n            range.endOffset,\n            rangeTokens.reverse()\n        );\n    });\n}\n\n/**\n * Subscribe arabic presentation form features\n * @param {feature} feature a feature to apply\n */\nBidi.prototype.subscribeArabicForms = function(feature) {\n    this.tokenizer.events.contextEnd.subscribe(\n        (contextName, range) => {\n            if (contextName === 'arabicWord') {\n                return _features_arab_arabicPresentationForms__WEBPACK_IMPORTED_MODULE_3__[\"default\"].call(\n                    this.tokenizer, range, feature\n                );\n            }\n        }\n    );\n};\n\n/**\n * Apply Gsub features\n * @param {feature} features a list of features\n */\nBidi.prototype.applyFeatures = function (features) {\n    for (let i = 0; i < features.length; i++) {\n        const feature = features[i];\n        if (feature) {\n            const script = feature.script;\n            if (!this.features[script]) {\n                this.features[script] = {};\n            }\n            this.features[script][feature.tag] = feature;\n        }\n    }\n};\n\n/**\n * Register a state modifier\n * @param {string} modifierId state modifier id\n * @param {function} condition a predicate function that returns true or false\n * @param {function} modifier a modifier function to set token state\n */\nBidi.prototype.registerModifier = function (modifierId, condition, modifier) {\n    this.tokenizer.registerModifier(modifierId, condition, modifier);\n};\n\n/**\n * Check if 'glyphIndex' is registered\n */\nfunction checkGlyphIndexStatus() {\n    if (this.tokenizer.registeredModifiers.indexOf('glyphIndex') === -1) {\n        throw new Error(\n            'glyphIndex modifier is required to apply ' +\n            'arabic presentation features.'\n        );\n    }\n}\n\n/**\n * Apply arabic presentation forms features\n */\nfunction applyArabicPresentationForms() {\n    if (!this.features.hasOwnProperty('arab')) return;\n    checkGlyphIndexStatus.call(this);\n    const ranges = this.tokenizer.getContextRanges('arabicWord');\n    ranges.forEach(range => {\n        _features_arab_arabicPresentationForms__WEBPACK_IMPORTED_MODULE_3__[\"default\"].call(this, range);\n    });\n}\n\n/**\n * Apply required arabic ligatures\n */\nfunction applyArabicRequireLigatures() {\n    if (!this.features.hasOwnProperty('arab')) return;\n    if (!this.features.arab.hasOwnProperty('rlig')) return;\n    checkGlyphIndexStatus.call(this);\n    const ranges = this.tokenizer.getContextRanges('arabicWord');\n    ranges.forEach(range => {\n        _features_arab_arabicRequiredLigatures__WEBPACK_IMPORTED_MODULE_4__[\"default\"].call(this, range);\n    });\n}\n\n/**\n * process text input\n * @param {string} text an input text\n */\nBidi.prototype.processText = function(text) {\n    if (!this.text || this.text !== text) {\n        this.setText(text);\n        tokenizeText.call(this);\n        applyArabicPresentationForms.call(this);\n        applyArabicRequireLigatures.call(this);\n        reverseArabicSentences.call(this);\n    }\n};\n\n/**\n * Process a string of text to identify and adjust\n * bidirectional text entities.\n * @param {string} text input text\n */\nBidi.prototype.getBidiText = function (text) {\n    this.processText(text);\n    return this.tokenizer.getText();\n};\n\n/**\n * Get the current state index of each token\n * @param {text} text an input text\n */\nBidi.prototype.getTextGlyphs = function (text) {\n    this.processText(text);\n    let indexes = [];\n    for (let i = 0; i < this.tokenizer.tokens.length; i++) {\n        const token = this.tokenizer.tokens[i];\n        if (token.state.deleted) continue;\n        const index = token.activeState.value;\n        indexes.push(Array.isArray(index) ? index[0] : index);\n    }\n    return indexes;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Bidi);\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/bidi.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/char.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/char.js ***!
  \*********************************************************************************/
/*! exports provided: isArabicChar, isIsolatedArabicChar, isTashkeelArabicChar, isWhiteSpace */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isArabicChar\", function() { return isArabicChar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isIsolatedArabicChar\", function() { return isIsolatedArabicChar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isTashkeelArabicChar\", function() { return isTashkeelArabicChar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isWhiteSpace\", function() { return isWhiteSpace; });\n// ╭─┄┄┄────────────────────────┄─────────────────────────────────────────────╮\n// ┊ Character Class Assertions ┊ Checks if a char belongs to a certain class ┊\n// ╰─╾──────────────────────────┄─────────────────────────────────────────────╯\n// jscs:disable maximumLineLength\n/**\n * Check if a char is Arabic\n * @param {string} c a single char\n */\nfunction isArabicChar(c) {\n    return /[\\u0600-\\u065F\\u066A-\\u06D2\\u06FA-\\u06FF]/.test(c);\n}\n\n/**\n * Check if a char is an isolated arabic char\n * @param {string} c a single char\n */\nfunction isIsolatedArabicChar(char) {\n    return /[\\u0630\\u0690\\u0621\\u0631\\u0661\\u0671\\u0622\\u0632\\u0672\\u0692\\u06C2\\u0623\\u0673\\u0693\\u06C3\\u0624\\u0694\\u06C4\\u0625\\u0675\\u0695\\u06C5\\u06E5\\u0676\\u0696\\u06C6\\u0627\\u0677\\u0697\\u06C7\\u0648\\u0688\\u0698\\u06C8\\u0689\\u0699\\u06C9\\u068A\\u06CA\\u066B\\u068B\\u06CB\\u068C\\u068D\\u06CD\\u06FD\\u068E\\u06EE\\u06FE\\u062F\\u068F\\u06CF\\u06EF]/.test(char);\n}\n\n/**\n * Check if a char is an Arabic Tashkeel char\n * @param {string} c a single char\n */\nfunction isTashkeelArabicChar(char) {\n    return /[\\u0600-\\u0605\\u060C-\\u060E\\u0610-\\u061B\\u061E\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED]/.test(char);\n}\n\n/**\n * Check if a char is whitespace char\n * @param {string} c a single char\n */\nfunction isWhiteSpace(c) {\n    return /\\s/.test(c);\n}\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/char.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/check.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/check.js ***!
  \**********************************************************************************/
/*! exports provided: fail, argument, assert, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fail\", function() { return fail; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"argument\", function() { return argument; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assert\", function() { return argument; });\n// Run-time checking of preconditions.\n\nfunction fail(message) {\n    throw new Error(message);\n}\n\n// Precondition function that checks if the given predicate is true.\n// If not, it will throw an error.\nfunction argument(predicate, message) {\n    if (!predicate) {\n        fail(message);\n    }\n}\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ fail, argument, assert: argument });\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/check.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/draw.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/draw.js ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// Drawing utility functions.\n\n// Draw a line on the given context from point `x1,y1` to point `x2,y2`.\nfunction line(ctx, x1, y1, x2, y2) {\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ line });\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/draw.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/encoding.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/encoding.js ***!
  \*************************************************************************************/
/*! exports provided: cffStandardStrings, cffStandardEncoding, cffExpertEncoding, standardNames, DefaultEncoding, CmapEncoding, CffEncoding, GlyphNames, addGlyphNames */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cffStandardStrings\", function() { return cffStandardStrings; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cffStandardEncoding\", function() { return cffStandardEncoding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cffExpertEncoding\", function() { return cffExpertEncoding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"standardNames\", function() { return standardNames; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DefaultEncoding\", function() { return DefaultEncoding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CmapEncoding\", function() { return CmapEncoding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CffEncoding\", function() { return CffEncoding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GlyphNames\", function() { return GlyphNames; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addGlyphNames\", function() { return addGlyphNames; });\n// Glyph encoding\n\nconst cffStandardStrings = [\n    '.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',\n    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',\n    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',\n    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\n    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',\n    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling',\n    'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft',\n    'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph',\n    'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand',\n    'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring',\n    'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE',\n    'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu',\n    'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn',\n    'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright',\n    'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex',\n    'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex',\n    'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute',\n    'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute',\n    'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute',\n    'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave',\n    'yacute', 'ydieresis', 'zcaron', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior',\n    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', '266 ff', 'onedotenleader',\n    'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle',\n    'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'commasuperior', 'threequartersemdash', 'periodsuperior',\n    'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior',\n    'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'ffi', 'ffl',\n    'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',\n    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',\n    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',\n    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall',\n    'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall',\n    'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall',\n    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds',\n    'zerosuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior',\n    'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior',\n    'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior',\n    'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall',\n    'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall',\n    'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall',\n    'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall',\n    'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall', '001.000',\n    '001.001', '001.002', '001.003', 'Black', 'Bold', 'Book', 'Light', 'Medium', 'Regular', 'Roman', 'Semibold'];\n\nconst cffStandardEncoding = [\n    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',\n    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',\n    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',\n    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\n    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',\n    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n    'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle',\n    'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger',\n    'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright',\n    'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde',\n    'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron',\n    'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '',\n    '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '',\n    'lslash', 'oslash', 'oe', 'germandbls'];\n\nconst cffExpertEncoding = [\n    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior',\n    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader',\n    'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle',\n    'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon',\n    'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior',\n    'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior',\n    'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl',\n    'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',\n    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',\n    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',\n    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n    'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall',\n    'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior',\n    '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters',\n    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '',\n    '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',\n    'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior',\n    'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior',\n    'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall',\n    'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall',\n    'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall',\n    'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall',\n    'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall',\n    'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];\n\nconst standardNames = [\n    '.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent',\n    'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash',\n    'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less',\n    'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',\n    'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright',\n    'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n    'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde',\n    'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave',\n    'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis',\n    'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis',\n    'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section',\n    'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal',\n    'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation',\n    'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown',\n    'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright',\n    'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft',\n    'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction',\n    'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase',\n    'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute',\n    'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex',\n    'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut',\n    'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth',\n    'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior',\n    'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla',\n    'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];\n\n/**\n * This is the encoding used for fonts created from scratch.\n * It loops through all glyphs and finds the appropriate unicode value.\n * Since it's linear time, other encodings will be faster.\n * @exports opentype.DefaultEncoding\n * @class\n * @constructor\n * @param {opentype.Font}\n */\nfunction DefaultEncoding(font) {\n    this.font = font;\n}\n\nDefaultEncoding.prototype.charToGlyphIndex = function(c) {\n    const code = c.codePointAt(0);\n    const glyphs = this.font.glyphs;\n    if (glyphs) {\n        for (let i = 0; i < glyphs.length; i += 1) {\n            const glyph = glyphs.get(i);\n            for (let j = 0; j < glyph.unicodes.length; j += 1) {\n                if (glyph.unicodes[j] === code) {\n                    return i;\n                }\n            }\n        }\n    }\n    return null;\n};\n\n/**\n * @exports opentype.CmapEncoding\n * @class\n * @constructor\n * @param {Object} cmap - a object with the cmap encoded data\n */\nfunction CmapEncoding(cmap) {\n    this.cmap = cmap;\n}\n\n/**\n * @param  {string} c - the character\n * @return {number} The glyph index.\n */\nCmapEncoding.prototype.charToGlyphIndex = function(c) {\n    return this.cmap.glyphIndexMap[c.codePointAt(0)] || 0;\n};\n\n/**\n * @exports opentype.CffEncoding\n * @class\n * @constructor\n * @param {string} encoding - The encoding\n * @param {Array} charset - The character set.\n */\nfunction CffEncoding(encoding, charset) {\n    this.encoding = encoding;\n    this.charset = charset;\n}\n\n/**\n * @param  {string} s - The character\n * @return {number} The index.\n */\nCffEncoding.prototype.charToGlyphIndex = function(s) {\n    const code = s.codePointAt(0);\n    const charName = this.encoding[code];\n    return this.charset.indexOf(charName);\n};\n\n/**\n * @exports opentype.GlyphNames\n * @class\n * @constructor\n * @param {Object} post\n */\nfunction GlyphNames(post) {\n    switch (post.version) {\n        case 1:\n            this.names = standardNames.slice();\n            break;\n        case 2:\n            this.names = new Array(post.numberOfGlyphs);\n            for (let i = 0; i < post.numberOfGlyphs; i++) {\n                if (post.glyphNameIndex[i] < standardNames.length) {\n                    this.names[i] = standardNames[post.glyphNameIndex[i]];\n                } else {\n                    this.names[i] = post.names[post.glyphNameIndex[i] - standardNames.length];\n                }\n            }\n\n            break;\n        case 2.5:\n            this.names = new Array(post.numberOfGlyphs);\n            for (let i = 0; i < post.numberOfGlyphs; i++) {\n                this.names[i] = standardNames[i + post.glyphNameIndex[i]];\n            }\n\n            break;\n        case 3:\n            this.names = [];\n            break;\n        default:\n            this.names = [];\n            break;\n    }\n}\n\n/**\n * Gets the index of a glyph by name.\n * @param  {string} name - The glyph name\n * @return {number} The index\n */\nGlyphNames.prototype.nameToGlyphIndex = function(name) {\n    return this.names.indexOf(name);\n};\n\n/**\n * @param  {number} gid\n * @return {string}\n */\nGlyphNames.prototype.glyphIndexToName = function(gid) {\n    return this.names[gid];\n};\n\n/**\n * @alias opentype.addGlyphNames\n * @param {opentype.Font}\n */\nfunction addGlyphNames(font) {\n    let glyph;\n    const glyphIndexMap = font.tables.cmap.glyphIndexMap;\n    const charCodes = Object.keys(glyphIndexMap);\n\n    for (let i = 0; i < charCodes.length; i += 1) {\n        const c = charCodes[i];\n        const glyphIndex = glyphIndexMap[c];\n        glyph = font.glyphs.get(glyphIndex);\n        glyph.addUnicode(parseInt(c));\n    }\n\n    for (let i = 0; i < font.glyphs.length; i += 1) {\n        glyph = font.glyphs.get(i);\n        if (font.cffEncoding) {\n            if (font.isCIDFont) {\n                glyph.name = 'gid' + i;\n            } else {\n                glyph.name = font.cffEncoding.charset[i];\n            }\n        } else if (font.glyphNames.names) {\n            glyph.name = font.glyphNames.glyphIndexToName(i);\n        }\n    }\n}\n\n\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/encoding.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/features/arab/arabicPresentationForms.js":
/*!******************************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/features/arab/arabicPresentationForms.js ***!
  \******************************************************************************************************************/
/*! exports provided: default, arabicPresentationForms */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arabicPresentationForms\", function() { return arabicPresentationForms; });\n/* harmony import */ var _tokenizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tokenizer */ \"../../node_modules/opentype.js/src/tokenizer.js\");\n/* harmony import */ var _char__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../char */ \"../../node_modules/opentype.js/src/char.js\");\n/**\n * Apply Arabic presentation forms to a range of tokens\n */\n\n\n\n/**\n * Check if a char can be connected to it's preceding char\n * @param {ContextParams} charContextParams context params of a char\n */\nfunction willConnectPrev(charContextParams) {\n    let backtrack = [].concat(charContextParams.backtrack);\n    for (let i = backtrack.length - 1; i >= 0; i--) {\n        const prevChar = backtrack[i];\n        const isolated = Object(_char__WEBPACK_IMPORTED_MODULE_1__[\"isIsolatedArabicChar\"])(prevChar);\n        const tashkeel = Object(_char__WEBPACK_IMPORTED_MODULE_1__[\"isTashkeelArabicChar\"])(prevChar);\n        if (!isolated && !tashkeel) return true;\n        if (isolated) return false;\n    }\n    return false;\n}\n\n/**\n * Check if a char can be connected to it's proceeding char\n * @param {ContextParams} charContextParams context params of a char\n */\nfunction willConnectNext(charContextParams) {\n    if (Object(_char__WEBPACK_IMPORTED_MODULE_1__[\"isIsolatedArabicChar\"])(charContextParams.current)) return false;\n    for (let i = 0; i < charContextParams.lookahead.length; i++) {\n        const nextChar = charContextParams.lookahead[i];\n        const tashkeel = Object(_char__WEBPACK_IMPORTED_MODULE_1__[\"isTashkeelArabicChar\"])(nextChar);\n        if (!tashkeel) return true;\n    }\n    return false;\n}\n\n/**\n * Apply arabic presentation forms to a list of tokens\n * @param {ContextRange} range a range of tokens\n */\nfunction arabicPresentationForms(range) {\n    const features = this.features.arab;\n    const rangeTokens = this.tokenizer.getRangeTokens(range);\n    if (rangeTokens.length === 1) return;\n    const getSubstitutionIndex = substitution => (\n        substitution.length === 1 &&\n        substitution[0].id === 12 &&\n        substitution[0].substitution\n    );\n    const applyForm = (tag, token, params) => {\n        if (!features.hasOwnProperty(tag)) return;\n        let substitution = features[tag].lookup(params) || null;\n        let substIndex = getSubstitutionIndex(substitution)[0];\n        if (substIndex >= 0) {\n            return token.setState(tag, substIndex);\n        }\n    };\n    const tokensParams = new _tokenizer__WEBPACK_IMPORTED_MODULE_0__[\"ContextParams\"](rangeTokens, 0);\n    const charContextParams = new _tokenizer__WEBPACK_IMPORTED_MODULE_0__[\"ContextParams\"](rangeTokens.map(t=>t.char), 0);\n    rangeTokens.forEach((token, i) => {\n        if (Object(_char__WEBPACK_IMPORTED_MODULE_1__[\"isTashkeelArabicChar\"])(token.char)) return;\n        tokensParams.setCurrentIndex(i);\n        charContextParams.setCurrentIndex(i);\n        let CONNECT = 0; // 2 bits 00 (10: can connect next) (01: can connect prev)\n        if (willConnectPrev(charContextParams)) CONNECT |= 1;\n        if (willConnectNext(charContextParams)) CONNECT |= 2;\n        switch (CONNECT) {\n            case 0: // isolated * original form\n                return;\n            case 1: // fina\n                applyForm('fina', token, tokensParams);\n                break;\n            case 2: // init\n                applyForm('init', token, tokensParams);\n                break;\n            case 3: // medi\n                applyForm('medi', token, tokensParams);\n                break;\n        }\n    });\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (arabicPresentationForms);\n\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/features/arab/arabicPresentationForms.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/features/arab/arabicRequiredLigatures.js":
/*!******************************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/features/arab/arabicRequiredLigatures.js ***!
  \******************************************************************************************************************/
/*! exports provided: default, arabicRequiredLigatures */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arabicRequiredLigatures\", function() { return arabicRequiredLigatures; });\n/* harmony import */ var _tokenizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tokenizer */ \"../../node_modules/opentype.js/src/tokenizer.js\");\n/**\n * Apply Arabic required ligatures feature to a range of tokens\n */\n\n\n\n/**\n * Apply Arabic required ligatures to a context range\n * @param {ContextRange} range a range of tokens\n */\nfunction arabicRequiredLigatures(range) {\n    const features = this.features.arab;\n    if (!features.hasOwnProperty('rlig')) return;\n    let tokens = this.tokenizer.getRangeTokens(range);\n    for (let i = 0; i < tokens.length; i++) {\n        const lookupParams = new _tokenizer__WEBPACK_IMPORTED_MODULE_0__[\"ContextParams\"](tokens, i);\n        let substitution = features.rlig.lookup(lookupParams) || null;\n        const chainingContext = (\n            substitution.length === 1 &&\n            substitution[0].id === 63 &&\n            substitution[0].substitution\n        );\n        const ligature = (\n            substitution.length === 1 &&\n            substitution[0].id === 41 &&\n            substitution[0].substitution[0]\n        );\n        const token = tokens[i];\n        if (!!ligature) {\n            token.setState('rlig', [ligature.ligGlyph]);\n            for (let c = 0; c < ligature.components.length; c++) {\n                const component = ligature.components[c];\n                const lookaheadToken = lookupParams.get(c + 1);\n                if (lookaheadToken.activeState.value === component) {\n                    lookaheadToken.state.deleted = true;\n                }\n            }\n        } else if (chainingContext) {\n            const substIndex = (\n                chainingContext &&\n                chainingContext.length === 1 &&\n                chainingContext[0].id === 12 &&\n                chainingContext[0].substitution\n            );\n            if (!!substIndex && substIndex >= 0) token.setState('rlig', substIndex);\n        }\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (arabicRequiredLigatures);\n\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/features/arab/arabicRequiredLigatures.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/features/arab/contextCheck/arabicSentence.js":
/*!**********************************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/features/arab/contextCheck/arabicSentence.js ***!
  \**********************************************************************************************************************/
/*! exports provided: arabicSentenceStartCheck, arabicSentenceEndCheck, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arabicSentenceStartCheck\", function() { return arabicSentenceStartCheck; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arabicSentenceEndCheck\", function() { return arabicSentenceEndCheck; });\n/* harmony import */ var _char__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../char */ \"../../node_modules/opentype.js/src/char.js\");\n/**\n * Arabic sentence context checkers\n */\n\n\n\nfunction arabicSentenceStartCheck(contextParams) {\n    const char = contextParams.current;\n    const prevChar = contextParams.get(-1);\n    return (\n        // ? an arabic char preceded with a non arabic char\n        (Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isArabicChar\"])(char) || Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isTashkeelArabicChar\"])(char)) &&\n        !Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isArabicChar\"])(prevChar)\n    );\n}\n\nfunction arabicSentenceEndCheck(contextParams) {\n    const nextChar = contextParams.get(1);\n    switch (true) {\n        case nextChar === null:\n            return true;\n        case (!Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isArabicChar\"])(nextChar) && !Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isTashkeelArabicChar\"])(nextChar)):\n            const nextIsWhitespace = Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isWhiteSpace\"])(nextChar);\n            if (!nextIsWhitespace) return true;\n            if (nextIsWhitespace) {\n                let arabicCharAhead = false;\n                arabicCharAhead = (\n                    contextParams.lookahead.some(\n                        c => Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isArabicChar\"])(c) || Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isTashkeelArabicChar\"])(c)\n                    )\n                );\n                if (!arabicCharAhead) return true;\n            }\n            break;\n        default:\n            return false;\n    }\n}\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ arabicSentenceStartCheck, arabicSentenceEndCheck });\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/features/arab/contextCheck/arabicSentence.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/features/arab/contextCheck/arabicWord.js":
/*!******************************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/features/arab/contextCheck/arabicWord.js ***!
  \******************************************************************************************************************/
/*! exports provided: arabicWordStartCheck, arabicWordEndCheck, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arabicWordStartCheck\", function() { return arabicWordStartCheck; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arabicWordEndCheck\", function() { return arabicWordEndCheck; });\n/* harmony import */ var _char__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../char */ \"../../node_modules/opentype.js/src/char.js\");\n/**\n * Arabic word context checkers\n */\n\n\n\nfunction arabicWordStartCheck(contextParams) {\n    const char = contextParams.current;\n    const prevChar = contextParams.get(-1);\n    return (\n        // ? arabic first char\n        (prevChar === null && Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isArabicChar\"])(char)) ||\n        // ? arabic char preceded with a non arabic char\n        (!Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isArabicChar\"])(prevChar) && Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isArabicChar\"])(char))\n    );\n}\n\nfunction arabicWordEndCheck(contextParams) {\n    const nextChar = contextParams.get(1);\n    return (\n        // ? last arabic char\n        (nextChar === null) ||\n        // ? next char is not arabic\n        (!Object(_char__WEBPACK_IMPORTED_MODULE_0__[\"isArabicChar\"])(nextChar))\n    );\n}\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ arabicWordStartCheck, arabicWordEndCheck });\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/features/arab/contextCheck/arabicWord.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/features/featureQuery.js":
/*!**************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/features/featureQuery.js ***!
  \**************************************************************************************************/
/*! exports provided: default, Feature */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Feature\", function() { return Feature; });\n/* harmony import */ var _tokenizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tokenizer */ \"../../node_modules/opentype.js/src/tokenizer.js\");\n/* harmony import */ var _char__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../char */ \"../../node_modules/opentype.js/src/char.js\");\n/**\n * Query a feature by some of it's properties to lookup a glyph substitution.\n */\n\n\n\n\n// DEFAULT TEXT BASE DIRECTION\nlet BASE_DIR = 'ltr';\n\n/**\n * Create feature query instance\n * @param {Font} font opentype font instance\n * @param {string} baseDir text base direction\n */\nfunction FeatureQuery(font, baseDir) {\n    this.font = font;\n    this.features = {};\n    BASE_DIR = !!baseDir ? baseDir : BASE_DIR;\n}\n\n/**\n * Create a new feature lookup\n * @param {string} tag feature tag\n * @param {feature} feature reference to feature at gsub table\n * @param {FeatureLookups} feature lookups associated with this feature\n * @param {string} script gsub script tag\n */\nfunction Feature(tag, feature, featureLookups, script) {\n    this.tag = tag;\n    this.featureRef = feature;\n    this.lookups = featureLookups.lookups;\n    this.script = script;\n}\n\n/**\n * Create a coverage table lookup\n * @param {any} coverageTable gsub coverage table\n */\nfunction Coverage(coverageTable) {\n    this.table = coverageTable;\n}\n\n/**\n * Create a ligature set lookup\n * @param {any} ligatureSets gsub ligature set\n */\nfunction LigatureSets(ligatureSets) {\n    this.ligatureSets = ligatureSets;\n}\n\n/**\n * Lookup a glyph ligature\n * @param {ContextParams} contextParams context params to lookup\n * @param {number} ligSetIndex ligature set index at ligature sets\n */\nLigatureSets.prototype.lookup = function (contextParams, ligSetIndex) {\n    const ligatureSet = this.ligatureSets[ligSetIndex];\n    const matchComponents = (components, indexes) => {\n        if (components.length > indexes.length) return null;\n        for (let c = 0; c < components.length; c++) {\n            const component = components[c];\n            const index = indexes[c];\n            if (component !== index) return false;\n        }\n        return true;\n    };\n    for (let s = 0; s < ligatureSet.length; s++) {\n        const ligSetItem = ligatureSet[s];\n        const lookaheadIndexes = contextParams.lookahead.map(\n            token => token.activeState.value\n        );\n        if (BASE_DIR === 'rtl') lookaheadIndexes.reverse();\n        const componentsMatch = matchComponents(\n            ligSetItem.components, lookaheadIndexes\n        );\n        if (componentsMatch) return ligSetItem;\n    }\n    return null;\n};\n\n/**\n * Create a feature substitution\n * @param {any} lookups a reference to gsub lookups\n * @param {Lookuptable} lookupTable a feature lookup table\n * @param {any} subtable substitution table\n */\nfunction Substitution(lookups, lookupTable, subtable) {\n    this.lookups = lookups;\n    this.subtable = subtable;\n    this.lookupTable = lookupTable;\n    if (subtable.hasOwnProperty('coverage')) {\n        this.coverage = new Coverage(\n            subtable.coverage\n        );\n    }\n    if (subtable.hasOwnProperty('inputCoverage')) {\n        this.inputCoverage = subtable.inputCoverage.map(\n            table => new Coverage(table)\n        );\n    }\n    if (subtable.hasOwnProperty('backtrackCoverage')) {\n        this.backtrackCoverage = subtable.backtrackCoverage.map(\n            table => new Coverage(table)\n        );\n    }\n    if (subtable.hasOwnProperty('lookaheadCoverage')) {\n        this.lookaheadCoverage = subtable.lookaheadCoverage.map(\n            table => new Coverage(table)\n        );\n    }\n    if (subtable.hasOwnProperty('ligatureSets')) {\n        this.ligatureSets = new LigatureSets(subtable.ligatureSets);\n    }\n}\n\n/**\n * Create a lookup table lookup\n * @param {number} index table index at gsub lookups\n * @param {any} lookups a reference to gsub lookups\n */\nfunction LookupTable(index, lookups) {\n    this.index = index;\n    this.subtables = lookups[index].subtables.map(\n        subtable => new Substitution(\n            lookups, lookups[index], subtable\n        )\n    );\n}\n\nfunction FeatureLookups(lookups, lookupListIndexes) {\n    this.lookups = lookupListIndexes.map(\n        index => new LookupTable(index, lookups)\n    );\n}\n\n/**\n * Lookup a lookup table subtables\n * @param {ContextParams} contextParams context params to lookup\n */\nLookupTable.prototype.lookup = function (contextParams) {\n    let substitutions = [];\n    for (let i = 0; i < this.subtables.length; i++) {\n        const subsTable = this.subtables[i];\n        let substitution = subsTable.lookup(contextParams);\n        if (substitution !== null || substitution.length) {\n            substitutions = substitutions.concat(substitution);\n        }\n    }\n    return substitutions;\n};\n\n/**\n * Handle a single substitution - format 2\n * @param {ContextParams} contextParams context params to lookup\n */\nfunction singleSubstitutionFormat2(contextParams) {\n    let glyphIndex = contextParams.current.activeState.value;\n    glyphIndex = Array.isArray(glyphIndex) ? glyphIndex[0] : glyphIndex;\n    let substituteIndex = this.coverage.lookup(glyphIndex);\n    if (substituteIndex === -1) return [];\n    return [this.subtable.substitute[substituteIndex]];\n}\n\n/**\n * Lookup a list of coverage tables\n * @param {any} coverageList a list of coverage tables\n * @param {any} contextParams context params to lookup\n */\nfunction lookupCoverageList(coverageList, contextParams) {\n    let lookupList = [];\n    for (let i = 0; i < coverageList.length; i++) {\n        const coverage = coverageList[i];\n        let glyphIndex = contextParams.current.activeState.value;\n        glyphIndex = Array.isArray(glyphIndex) ? glyphIndex[0] : glyphIndex;\n        const lookupIndex = coverage.lookup(glyphIndex);\n        if (lookupIndex !== -1) {\n            lookupList.push(lookupIndex);\n        }\n    }\n    if (lookupList.length !== coverageList.length) return -1;\n    return lookupList;\n}\n\n/**\n * Handle chaining context substitution - format 3\n * @param {any} contextParams context params to lookup\n */\nfunction chainingSubstitutionFormat3(contextParams) {\n    const lookupsCount = (\n        this.inputCoverage.length +\n        this.lookaheadCoverage.length +\n        this.backtrackCoverage.length\n    );\n    if (contextParams.context.length < lookupsCount) return [];\n    // INPUT LOOKUP //\n    let inputLookups = lookupCoverageList(\n        this.inputCoverage, contextParams\n    );\n    if (inputLookups === -1) return [];\n    // LOOKAHEAD LOOKUP //\n    const lookaheadOffset = this.inputCoverage.length - 1;\n    if (contextParams.lookahead.length < this.lookaheadCoverage.length) return [];\n    let lookaheadContext = contextParams.lookahead.slice(lookaheadOffset);\n    while (lookaheadContext.length && Object(_char__WEBPACK_IMPORTED_MODULE_1__[\"isTashkeelArabicChar\"])(lookaheadContext[0].char)) {\n        lookaheadContext.shift();\n    }\n    const lookaheadParams = new _tokenizer__WEBPACK_IMPORTED_MODULE_0__[\"ContextParams\"](lookaheadContext, 0);\n    let lookaheadLookups = lookupCoverageList(\n        this.lookaheadCoverage, lookaheadParams\n    );\n    // BACKTRACK LOOKUP //\n    let backtrackContext = [].concat(contextParams.backtrack);\n    backtrackContext.reverse();\n    while (backtrackContext.length && Object(_char__WEBPACK_IMPORTED_MODULE_1__[\"isTashkeelArabicChar\"])(backtrackContext[0].char)) {\n        backtrackContext.shift();\n    }\n    if (backtrackContext.length < this.backtrackCoverage.length) return [];\n    const backtrackParams = new _tokenizer__WEBPACK_IMPORTED_MODULE_0__[\"ContextParams\"](backtrackContext, 0);\n    let backtrackLookups = lookupCoverageList(\n        this.backtrackCoverage, backtrackParams\n    );\n    const contextRulesMatch = (\n        inputLookups.length === this.inputCoverage.length &&\n        lookaheadLookups.length === this.lookaheadCoverage.length &&\n        backtrackLookups.length === this.backtrackCoverage.length\n    );\n    let substitutions = [];\n    if (contextRulesMatch) {\n        let lookupRecords = this.subtable.lookupRecords;\n        for (let i = 0; i < lookupRecords.length; i++) {\n            const lookupRecord = lookupRecords[i];\n            for (let j = 0; j < inputLookups.length; j++) {\n                const inputContext = new _tokenizer__WEBPACK_IMPORTED_MODULE_0__[\"ContextParams\"]([contextParams.get(j)], 0);\n                let lookupIndex = lookupRecord.lookupListIndex;\n                const lookupTable = new LookupTable(lookupIndex, this.lookups);\n                let lookup = lookupTable.lookup(inputContext);\n                substitutions = substitutions.concat(lookup);\n            }\n        }\n    }\n    return substitutions;\n}\n\n/**\n * Handle ligature substitution - format 1\n * @param {any} contextParams context params to lookup\n */\nfunction ligatureSubstitutionFormat1(contextParams) {\n    // COVERAGE LOOKUP //\n    let glyphIndex = contextParams.current.activeState.value;\n    let ligSetIndex = this.coverage.lookup(glyphIndex);\n    if (ligSetIndex === -1) return [];\n    // COMPONENTS LOOKUP * note that components is logically ordered\n    let ligGlyphs = this.ligatureSets.lookup(contextParams, ligSetIndex);\n    return ligGlyphs ? [ligGlyphs] : [];\n}\n\n/**\n * [ LOOKUP TYPES ]\n * -------------------------------\n * Single                        1;\n * Multiple                      2;\n * Alternate                     3;\n * Ligature                      4;\n * Context                       5;\n * ChainingContext               6;\n * ExtensionSubstitution         7;\n * ReverseChainingContext        8;\n * -------------------------------\n * @param {any} contextParams context params to lookup\n */\nSubstitution.prototype.lookup = function (contextParams) {\n    const substitutions = [];\n    const lookupType = this.lookupTable.lookupType;\n    const substFormat = this.subtable.substFormat;\n    if (lookupType === 1 && substFormat === 2) {\n        let substitution = singleSubstitutionFormat2.call(this, contextParams);\n        if (substitution.length > 0) {\n            substitutions.push({ id: 12, substitution });\n        }\n    }\n    if (lookupType === 6 && substFormat === 3) {\n        const substitution = chainingSubstitutionFormat3.call(this, contextParams);\n        if (substitution.length > 0) {\n            substitutions.push({ id: 63, substitution });\n        }\n    }\n    if (lookupType === 4 && substFormat === 1) {\n        const substitution = ligatureSubstitutionFormat1.call(this, contextParams);\n        if (substitution.length > 0) {\n            substitutions.push({ id: 41, substitution });\n        }\n    }\n    return substitutions;\n};\n\n/**\n * Lookup a coverage table\n * @param {number} glyphIndex to lookup\n */\nCoverage.prototype.lookup = function (glyphIndex) {\n    if (!glyphIndex) return -1;\n    switch (this.table.format) {\n        case 1:\n            return this.table.glyphs.indexOf(glyphIndex);\n\n        case 2:\n            let ranges = this.table.ranges;\n            for (let i = 0; i < ranges.length; i++) {\n                const range = ranges[i];\n                if (glyphIndex >= range.start && glyphIndex <= range.end) {\n                    let offset = glyphIndex - range.start;\n                    return range.index + offset;\n                }\n            }\n            break;\n        default:\n            return -1; // not found\n    }\n    return -1;\n};\n\n/**\n * Lookup a feature for a substitution or more\n * @param {any} contextParams context params to lookup\n */\nFeature.prototype.lookup = function(contextParams) {\n    let lookups = [];\n    for (let i = 0; i < this.lookups.length; i++) {\n        const lookupTable = this.lookups[i];\n        let lookup = lookupTable.lookup(contextParams);\n        if (lookup !== null || lookup.length) {\n            lookups = lookups.concat(lookup);\n        }\n    }\n    return lookups;\n};\n\n/**\n * Get feature indexes of a specific script\n * @param {string} scriptTag script tag\n */\nFeatureQuery.prototype.getScriptFeaturesIndexes = function(scriptTag) {\n    if (!scriptTag) return [];\n    const tables = this.font.tables;\n    if (!tables.gsub) return [];\n    const scripts = this.font.tables.gsub.scripts;\n    for (let i = 0; i < scripts.length; i++) {\n        const script = scripts[i];\n        if (script.tag === scriptTag) {\n            let defaultLangSys = script.script.defaultLangSys;\n            return defaultLangSys.featureIndexes;\n        } else {\n            let langSysRecords = script.langSysRecords;\n            if (!!langSysRecords) {\n                for (let j = 0; j < langSysRecords.length; j++) {\n                    const langSysRecord = langSysRecords[j];\n                    if (langSysRecord.tag === scriptTag) {\n                        let langSys = langSysRecord.langSys;\n                        return langSys.featureIndexes;\n                    }\n                }\n            }\n        }\n    }\n    return [];\n};\n\n/**\n * Map a feature tag to a gsub feature\n * @param {any} features gsub features\n * @param {*} scriptTag script tag\n */\nFeatureQuery.prototype.mapTagsToFeatures = function (features, scriptTag) {\n    let tags = {};\n    for (let i = 0; i < features.length; i++) {\n        const feature = features[i].feature;\n        const tag = features[i].tag;\n        const lookups = this.font.tables.gsub.lookups;\n        const featureLookups = new FeatureLookups(lookups, feature.lookupListIndexes);\n        tags[tag] = new Feature(tag, feature, featureLookups, scriptTag);\n    }\n    this.features[scriptTag].tags = tags;\n};\n\n/**\n * Get features of a specific script\n * @param {string} scriptTag script tag\n */\nFeatureQuery.prototype.getScriptFeatures = function (scriptTag) {\n    let features = this.features[scriptTag];\n    if (this.features.hasOwnProperty(scriptTag)) return features;\n    const featuresIndexes = this.getScriptFeaturesIndexes(scriptTag);\n    if (!featuresIndexes) return null;\n    const gsub = this.font.tables.gsub;\n    features = featuresIndexes.map(index => gsub.features[index]);\n    this.features[scriptTag] = features;\n    this.mapTagsToFeatures(features, scriptTag);\n    return features;\n};\n\n/**\n * Query a feature by it's properties\n * @param {any} query an object that describes the properties of a query\n */\nFeatureQuery.prototype.getFeature = function (query) {\n    if (!this.font) return { FAIL: `No font was found`};\n    if (!this.features.hasOwnProperty(query.script)) {\n        this.getScriptFeatures(query.script);\n    }\n    return this.features[query.script].tags[query.tag] || null;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (FeatureQuery);\n\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/features/featureQuery.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/font.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/font.js ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./path */ \"../../node_modules/opentype.js/src/path.js\");\n/* harmony import */ var _tables_sfnt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables/sfnt */ \"../../node_modules/opentype.js/src/tables/sfnt.js\");\n/* harmony import */ var _encoding__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./encoding */ \"../../node_modules/opentype.js/src/encoding.js\");\n/* harmony import */ var _glyphset__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glyphset */ \"../../node_modules/opentype.js/src/glyphset.js\");\n/* harmony import */ var _position__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./position */ \"../../node_modules/opentype.js/src/position.js\");\n/* harmony import */ var _substitution__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./substitution */ \"../../node_modules/opentype.js/src/substitution.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util */ \"../../node_modules/opentype.js/src/util.js\");\n/* harmony import */ var _hintingtt__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./hintingtt */ \"../../node_modules/opentype.js/src/hintingtt.js\");\n/* harmony import */ var _bidi__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./bidi */ \"../../node_modules/opentype.js/src/bidi.js\");\n/* harmony import */ var _features_featureQuery__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./features/featureQuery */ \"../../node_modules/opentype.js/src/features/featureQuery.js\");\n// The Font object\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @typedef FontOptions\n * @type Object\n * @property {Boolean} empty - whether to create a new empty font\n * @property {string} familyName\n * @property {string} styleName\n * @property {string=} fullName\n * @property {string=} postScriptName\n * @property {string=} designer\n * @property {string=} designerURL\n * @property {string=} manufacturer\n * @property {string=} manufacturerURL\n * @property {string=} license\n * @property {string=} licenseURL\n * @property {string=} version\n * @property {string=} description\n * @property {string=} copyright\n * @property {string=} trademark\n * @property {Number} unitsPerEm\n * @property {Number} ascender\n * @property {Number} descender\n * @property {Number} createdTimestamp\n * @property {string=} weightClass\n * @property {string=} widthClass\n * @property {string=} fsSelection\n */\n\n/**\n * A Font represents a loaded OpenType font file.\n * It contains a set of glyphs and methods to draw text on a drawing context,\n * or to get a path representing the text.\n * @exports opentype.Font\n * @class\n * @param {FontOptions}\n * @constructor\n */\nfunction Font(options) {\n    options = options || {};\n\n    if (!options.empty) {\n        // Check that we've provided the minimum set of names.\n        Object(_util__WEBPACK_IMPORTED_MODULE_6__[\"checkArgument\"])(options.familyName, 'When creating a new Font object, familyName is required.');\n        Object(_util__WEBPACK_IMPORTED_MODULE_6__[\"checkArgument\"])(options.styleName, 'When creating a new Font object, styleName is required.');\n        Object(_util__WEBPACK_IMPORTED_MODULE_6__[\"checkArgument\"])(options.unitsPerEm, 'When creating a new Font object, unitsPerEm is required.');\n        Object(_util__WEBPACK_IMPORTED_MODULE_6__[\"checkArgument\"])(options.ascender, 'When creating a new Font object, ascender is required.');\n        Object(_util__WEBPACK_IMPORTED_MODULE_6__[\"checkArgument\"])(options.descender, 'When creating a new Font object, descender is required.');\n        Object(_util__WEBPACK_IMPORTED_MODULE_6__[\"checkArgument\"])(options.descender < 0, 'Descender should be negative (e.g. -512).');\n\n        // OS X will complain if the names are empty, so we put a single space everywhere by default.\n        this.names = {\n            fontFamily: {en: options.familyName || ' '},\n            fontSubfamily: {en: options.styleName || ' '},\n            fullName: {en: options.fullName || options.familyName + ' ' + options.styleName},\n            // postScriptName may not contain any whitespace\n            postScriptName: {en: options.postScriptName || (options.familyName + options.styleName).replace(/\\s/g, '')},\n            designer: {en: options.designer || ' '},\n            designerURL: {en: options.designerURL || ' '},\n            manufacturer: {en: options.manufacturer || ' '},\n            manufacturerURL: {en: options.manufacturerURL || ' '},\n            license: {en: options.license || ' '},\n            licenseURL: {en: options.licenseURL || ' '},\n            version: {en: options.version || 'Version 0.1'},\n            description: {en: options.description || ' '},\n            copyright: {en: options.copyright || ' '},\n            trademark: {en: options.trademark || ' '}\n        };\n        this.unitsPerEm = options.unitsPerEm || 1000;\n        this.ascender = options.ascender;\n        this.descender = options.descender;\n        this.createdTimestamp = options.createdTimestamp;\n        this.tables = { os2: {\n            usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,\n            usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,\n            fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR\n        } };\n    }\n\n    this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.\n    this.glyphs = new _glyphset__WEBPACK_IMPORTED_MODULE_3__[\"default\"].GlyphSet(this, options.glyphs || []);\n    this.encoding = new _encoding__WEBPACK_IMPORTED_MODULE_2__[\"DefaultEncoding\"](this);\n    this.position = new _position__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this);\n    this.substitution = new _substitution__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this);\n    this.tables = this.tables || {};\n\n    Object.defineProperty(this, 'hinting', {\n        get: function() {\n            if (this._hinting) return this._hinting;\n            if (this.outlinesFormat === 'truetype') {\n                return (this._hinting = new _hintingtt__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this));\n            }\n        }\n    });\n}\n\n/**\n * Check if the font has a glyph for the given character.\n * @param  {string}\n * @return {Boolean}\n */\nFont.prototype.hasChar = function(c) {\n    return this.encoding.charToGlyphIndex(c) !== null;\n};\n\n/**\n * Convert the given character to a single glyph index.\n * Note that this function assumes that there is a one-to-one mapping between\n * the given character and a glyph; for complex scripts this might not be the case.\n * @param  {string}\n * @return {Number}\n */\nFont.prototype.charToGlyphIndex = function(s) {\n    return this.encoding.charToGlyphIndex(s);\n};\n\n/**\n * Convert the given character to a single Glyph object.\n * Note that this function assumes that there is a one-to-one mapping between\n * the given character and a glyph; for complex scripts this might not be the case.\n * @param  {string}\n * @return {opentype.Glyph}\n */\nFont.prototype.charToGlyph = function(c) {\n    const glyphIndex = this.charToGlyphIndex(c);\n    let glyph = this.glyphs.get(glyphIndex);\n    if (!glyph) {\n        // .notdef\n        glyph = this.glyphs.get(0);\n    }\n\n    return glyph;\n};\n\n/**\n * Convert the given text to a list of Glyph objects.\n * Note that there is no strict one-to-one mapping between characters and\n * glyphs, so the list of returned glyphs can be larger or smaller than the\n * length of the given string.\n * @param  {string}\n * @param  {GlyphRenderOptions} [options]\n * @return {opentype.Glyph[]}\n */\nFont.prototype.stringToGlyphs = function(s, options) {\n    options = options || this.defaultRenderOptions;\n\n    const bidi = new _bidi__WEBPACK_IMPORTED_MODULE_8__[\"default\"]();\n\n    // Create and register 'glyphIndex' state modifier\n    const charToGlyphIndexMod = token => this.charToGlyphIndex(token.char);\n    bidi.registerModifier('glyphIndex', null, charToGlyphIndexMod);\n\n    const arabFeatureQuery = new _features_featureQuery__WEBPACK_IMPORTED_MODULE_9__[\"default\"](this);\n    const arabFeatures = ['init', 'medi', 'fina', 'rlig'];\n    bidi.applyFeatures(\n        arabFeatures.map(tag => {\n            let query = { tag, script: 'arab' };\n            let feature = arabFeatureQuery.getFeature(query);\n            if (!!feature) return feature;\n        })\n    );\n    const indexes = bidi.getTextGlyphs(s);\n\n    let length = indexes.length;\n\n    // Apply substitutions on glyph indexes\n    if (options.features) {\n        const script = options.script || this.substitution.getDefaultScriptName();\n        let manyToOne = [];\n        if (options.features.liga) manyToOne = manyToOne.concat(this.substitution.getFeature('liga', script, options.language));\n        if (options.features.rlig) manyToOne = manyToOne.concat(this.substitution.getFeature('rlig', script, options.language));\n        for (let i = 0; i < length; i += 1) {\n            for (let j = 0; j < manyToOne.length; j++) {\n                const ligature = manyToOne[j];\n                const components = ligature.sub;\n                const compCount = components.length;\n                let k = 0;\n                while (k < compCount && components[k] === indexes[i + k]) k++;\n                if (k === compCount) {\n                    indexes.splice(i, compCount, ligature.by);\n                    length = length - compCount + 1;\n                }\n            }\n        }\n    }\n\n    // convert glyph indexes to glyph objects\n    const glyphs = new Array(length);\n    const notdef = this.glyphs.get(0);\n    for (let i = 0; i < length; i += 1) {\n        glyphs[i] = this.glyphs.get(indexes[i]) || notdef;\n    }\n    return glyphs;\n};\n\n/**\n * @param  {string}\n * @return {Number}\n */\nFont.prototype.nameToGlyphIndex = function(name) {\n    return this.glyphNames.nameToGlyphIndex(name);\n};\n\n/**\n * @param  {string}\n * @return {opentype.Glyph}\n */\nFont.prototype.nameToGlyph = function(name) {\n    const glyphIndex = this.nameToGlyphIndex(name);\n    let glyph = this.glyphs.get(glyphIndex);\n    if (!glyph) {\n        // .notdef\n        glyph = this.glyphs.get(0);\n    }\n\n    return glyph;\n};\n\n/**\n * @param  {Number}\n * @return {String}\n */\nFont.prototype.glyphIndexToName = function(gid) {\n    if (!this.glyphNames.glyphIndexToName) {\n        return '';\n    }\n\n    return this.glyphNames.glyphIndexToName(gid);\n};\n\n/**\n * Retrieve the value of the kerning pair between the left glyph (or its index)\n * and the right glyph (or its index). If no kerning pair is found, return 0.\n * The kerning value gets added to the advance width when calculating the spacing\n * between glyphs.\n * For GPOS kerning, this method uses the default script and language, which covers\n * most use cases. To have greater control, use font.position.getKerningValue .\n * @param  {opentype.Glyph} leftGlyph\n * @param  {opentype.Glyph} rightGlyph\n * @return {Number}\n */\nFont.prototype.getKerningValue = function(leftGlyph, rightGlyph) {\n    leftGlyph = leftGlyph.index || leftGlyph;\n    rightGlyph = rightGlyph.index || rightGlyph;\n    const gposKerning = this.position.defaultKerningTables;\n    if (gposKerning) {\n        return this.position.getKerningValue(gposKerning, leftGlyph, rightGlyph);\n    }\n    // \"kern\" table\n    return this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0;\n};\n\n/**\n * @typedef GlyphRenderOptions\n * @type Object\n * @property {string} [script] - script used to determine which features to apply. By default, 'DFLT' or 'latn' is used.\n *                               See https://www.microsoft.com/typography/otspec/scripttags.htm\n * @property {string} [language='dflt'] - language system used to determine which features to apply.\n *                                        See https://www.microsoft.com/typography/developers/opentype/languagetags.aspx\n * @property {boolean} [kerning=true] - whether to include kerning values\n * @property {object} [features] - OpenType Layout feature tags. Used to enable or disable the features of the given script/language system.\n *                                 See https://www.microsoft.com/typography/otspec/featuretags.htm\n */\nFont.prototype.defaultRenderOptions = {\n    kerning: true,\n    features: {\n        liga: true,\n        rlig: true\n    }\n};\n\n/**\n * Helper function that invokes the given callback for each glyph in the given text.\n * The callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text\n * @param {string} text - The text to apply.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @param  {Function} callback\n */\nFont.prototype.forEachGlyph = function(text, x, y, fontSize, options, callback) {\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 72;\n    options = options || this.defaultRenderOptions;\n    const fontScale = 1 / this.unitsPerEm * fontSize;\n    const glyphs = this.stringToGlyphs(text, options);\n    let kerningLookups;\n    if (options.kerning) {\n        const script = options.script || this.position.getDefaultScriptName();\n        kerningLookups = this.position.getKerningTables(script, options.language);\n    }\n    for (let i = 0; i < glyphs.length; i += 1) {\n        const glyph = glyphs[i];\n        callback.call(this, glyph, x, y, fontSize, options);\n        if (glyph.advanceWidth) {\n            x += glyph.advanceWidth * fontScale;\n        }\n\n        if (options.kerning && i < glyphs.length - 1) {\n            // We should apply position adjustment lookups in a more generic way.\n            // Here we only use the xAdvance value.\n            const kerningValue = kerningLookups ?\n                  this.position.getKerningValue(kerningLookups, glyph.index, glyphs[i + 1].index) :\n                  this.getKerningValue(glyph, glyphs[i + 1]);\n            x += kerningValue * fontScale;\n        }\n\n        if (options.letterSpacing) {\n            x += options.letterSpacing * fontSize;\n        } else if (options.tracking) {\n            x += (options.tracking / 1000) * fontSize;\n        }\n    }\n    return x;\n};\n\n/**\n * Create a Path object that represents the given text.\n * @param  {string} text - The text to create.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @return {opentype.Path}\n */\nFont.prototype.getPath = function(text, x, y, fontSize, options) {\n    const fullPath = new _path__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        const glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n        fullPath.extend(glyphPath);\n    });\n    return fullPath;\n};\n\n/**\n * Create an array of Path objects that represent the glyphs of a given text.\n * @param  {string} text - The text to create.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @return {opentype.Path[]}\n */\nFont.prototype.getPaths = function(text, x, y, fontSize, options) {\n    const glyphPaths = [];\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        const glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n        glyphPaths.push(glyphPath);\n    });\n\n    return glyphPaths;\n};\n\n/**\n * Returns the advance width of a text.\n *\n * This is something different than Path.getBoundingBox() as for example a\n * suffixed whitespace increases the advanceWidth but not the bounding box\n * or an overhanging letter like a calligraphic 'f' might have a quite larger\n * bounding box than its advance width.\n *\n * This corresponds to canvas2dContext.measureText(text).width\n *\n * @param  {string} text - The text to create.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @return advance width\n */\nFont.prototype.getAdvanceWidth = function(text, fontSize, options) {\n    return this.forEachGlyph(text, 0, 0, fontSize, options, function() {});\n};\n\n/**\n * Draw the text on the given drawing context.\n * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param  {string} text - The text to create.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n */\nFont.prototype.draw = function(ctx, text, x, y, fontSize, options) {\n    this.getPath(text, x, y, fontSize, options).draw(ctx);\n};\n\n/**\n * Draw the points of all glyphs in the text.\n * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param {string} text - The text to create.\n * @param {number} [x=0] - Horizontal position of the beginning of the text.\n * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param {GlyphRenderOptions=} options\n */\nFont.prototype.drawPoints = function(ctx, text, x, y, fontSize, options) {\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        glyph.drawPoints(ctx, gX, gY, gFontSize);\n    });\n};\n\n/**\n * Draw lines indicating important font measurements for all glyphs in the text.\n * Black lines indicate the origin of the coordinate system (point 0,0).\n * Blue lines indicate the glyph bounding box.\n * Green line indicates the advance width of the glyph.\n * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param {string} text - The text to create.\n * @param {number} [x=0] - Horizontal position of the beginning of the text.\n * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param {GlyphRenderOptions=} options\n */\nFont.prototype.drawMetrics = function(ctx, text, x, y, fontSize, options) {\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        glyph.drawMetrics(ctx, gX, gY, gFontSize);\n    });\n};\n\n/**\n * @param  {string}\n * @return {string}\n */\nFont.prototype.getEnglishName = function(name) {\n    const translations = this.names[name];\n    if (translations) {\n        return translations.en;\n    }\n};\n\n/**\n * Validate\n */\nFont.prototype.validate = function() {\n    const warnings = [];\n    const _this = this;\n\n    function assert(predicate, message) {\n        if (!predicate) {\n            warnings.push(message);\n        }\n    }\n\n    function assertNamePresent(name) {\n        const englishName = _this.getEnglishName(name);\n        assert(englishName && englishName.trim().length > 0,\n               'No English ' + name + ' specified.');\n    }\n\n    // Identification information\n    assertNamePresent('fontFamily');\n    assertNamePresent('weightName');\n    assertNamePresent('manufacturer');\n    assertNamePresent('copyright');\n    assertNamePresent('version');\n\n    // Dimension information\n    assert(this.unitsPerEm > 0, 'No unitsPerEm specified.');\n};\n\n/**\n * Convert the font object to a SFNT data structure.\n * This structure contains all the necessary tables and metadata to create a binary OTF file.\n * @return {opentype.Table}\n */\nFont.prototype.toTables = function() {\n    return _tables_sfnt__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fontToTable(this);\n};\n/**\n * @deprecated Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.\n */\nFont.prototype.toBuffer = function() {\n    console.warn('Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.');\n    return this.toArrayBuffer();\n};\n/**\n * Converts a `opentype.Font` into an `ArrayBuffer`\n * @return {ArrayBuffer}\n */\nFont.prototype.toArrayBuffer = function() {\n    const sfntTable = this.toTables();\n    const bytes = sfntTable.encode();\n    const buffer = new ArrayBuffer(bytes.length);\n    const intArray = new Uint8Array(buffer);\n    for (let i = 0; i < bytes.length; i++) {\n        intArray[i] = bytes[i];\n    }\n\n    return buffer;\n};\n\n/**\n * Initiate a download of the OpenType font.\n */\nFont.prototype.download = function(fileName) {\n    const familyName = this.getEnglishName('fontFamily');\n    const styleName = this.getEnglishName('fontSubfamily');\n    fileName = fileName || familyName.replace(/\\s/g, '') + '-' + styleName + '.otf';\n    const arrayBuffer = this.toArrayBuffer();\n\n    if (Object(_util__WEBPACK_IMPORTED_MODULE_6__[\"isBrowser\"])()) {\n        window.URL = window.URL || window.webkitURL;\n\n        if (window.URL) {\n            const dataView = new DataView(arrayBuffer);\n            const blob = new Blob([dataView], {type: 'font/opentype'});\n\n            let link = document.createElement('a');\n            link.href = window.URL.createObjectURL(blob);\n            link.download = fileName;\n\n            let event = document.createEvent('MouseEvents');\n            event.initEvent('click', true, false);\n            link.dispatchEvent(event);\n        } else {\n            console.warn('Font file could not be downloaded. Try using a different browser.');\n        }\n    } else {\n        const fs = __webpack_require__(/*! fs */ 0);\n        const buffer = Object(_util__WEBPACK_IMPORTED_MODULE_6__[\"arrayBufferToNodeBuffer\"])(arrayBuffer);\n        fs.writeFileSync(fileName, buffer);\n    }\n};\n/**\n * @private\n */\nFont.prototype.fsSelectionValues = {\n    ITALIC:              0x001, //1\n    UNDERSCORE:          0x002, //2\n    NEGATIVE:            0x004, //4\n    OUTLINED:            0x008, //8\n    STRIKEOUT:           0x010, //16\n    BOLD:                0x020, //32\n    REGULAR:             0x040, //64\n    USER_TYPO_METRICS:   0x080, //128\n    WWS:                 0x100, //256\n    OBLIQUE:             0x200  //512\n};\n\n/**\n * @private\n */\nFont.prototype.usWidthClasses = {\n    ULTRA_CONDENSED: 1,\n    EXTRA_CONDENSED: 2,\n    CONDENSED: 3,\n    SEMI_CONDENSED: 4,\n    MEDIUM: 5,\n    SEMI_EXPANDED: 6,\n    EXPANDED: 7,\n    EXTRA_EXPANDED: 8,\n    ULTRA_EXPANDED: 9\n};\n\n/**\n * @private\n */\nFont.prototype.usWeightClasses = {\n    THIN: 100,\n    EXTRA_LIGHT: 200,\n    LIGHT: 300,\n    NORMAL: 400,\n    MEDIUM: 500,\n    SEMI_BOLD: 600,\n    BOLD: 700,\n    EXTRA_BOLD: 800,\n    BLACK:    900\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Font);\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/font.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/glyph.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/glyph.js ***!
  \**********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _draw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./draw */ \"../../node_modules/opentype.js/src/draw.js\");\n/* harmony import */ var _path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./path */ \"../../node_modules/opentype.js/src/path.js\");\n// The Glyph object\n\n\n\n\n// import glyf from './tables/glyf' Can't be imported here, because it's a circular dependency\n\nfunction getPathDefinition(glyph, path) {\n    let _path = path || new _path__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n    return {\n        configurable: true,\n\n        get: function() {\n            if (typeof _path === 'function') {\n                _path = _path();\n            }\n\n            return _path;\n        },\n\n        set: function(p) {\n            _path = p;\n        }\n    };\n}\n/**\n * @typedef GlyphOptions\n * @type Object\n * @property {string} [name] - The glyph name\n * @property {number} [unicode]\n * @property {Array} [unicodes]\n * @property {number} [xMin]\n * @property {number} [yMin]\n * @property {number} [xMax]\n * @property {number} [yMax]\n * @property {number} [advanceWidth]\n */\n\n// A Glyph is an individual mark that often corresponds to a character.\n// Some glyphs, such as ligatures, are a combination of many characters.\n// Glyphs are the basic building blocks of a font.\n//\n// The `Glyph` class contains utility methods for drawing the path and its points.\n/**\n * @exports opentype.Glyph\n * @class\n * @param {GlyphOptions}\n * @constructor\n */\nfunction Glyph(options) {\n    // By putting all the code on a prototype function (which is only declared once)\n    // we reduce the memory requirements for larger fonts by some 2%\n    this.bindConstructorValues(options);\n}\n\n/**\n * @param  {GlyphOptions}\n */\nGlyph.prototype.bindConstructorValues = function(options) {\n    this.index = options.index || 0;\n\n    // These three values cannot be deferred for memory optimization:\n    this.name = options.name || null;\n    this.unicode = options.unicode || undefined;\n    this.unicodes = options.unicodes || options.unicode !== undefined ? [options.unicode] : [];\n\n    // But by binding these values only when necessary, we reduce can\n    // the memory requirements by almost 3% for larger fonts.\n    if (options.xMin) {\n        this.xMin = options.xMin;\n    }\n\n    if (options.yMin) {\n        this.yMin = options.yMin;\n    }\n\n    if (options.xMax) {\n        this.xMax = options.xMax;\n    }\n\n    if (options.yMax) {\n        this.yMax = options.yMax;\n    }\n\n    if (options.advanceWidth) {\n        this.advanceWidth = options.advanceWidth;\n    }\n\n    // The path for a glyph is the most memory intensive, and is bound as a value\n    // with a getter/setter to ensure we actually do path parsing only once the\n    // path is actually needed by anything.\n    Object.defineProperty(this, 'path', getPathDefinition(this, options.path));\n};\n\n/**\n * @param {number}\n */\nGlyph.prototype.addUnicode = function(unicode) {\n    if (this.unicodes.length === 0) {\n        this.unicode = unicode;\n    }\n\n    this.unicodes.push(unicode);\n};\n\n/**\n * Calculate the minimum bounding box for this glyph.\n * @return {opentype.BoundingBox}\n */\nGlyph.prototype.getBoundingBox = function() {\n    return this.path.getBoundingBox();\n};\n\n/**\n * Convert the glyph to a Path we can draw on a drawing context.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {Object=} options - xScale, yScale to stretch the glyph.\n * @param  {opentype.Font} if hinting is to be used, the font\n * @return {opentype.Path}\n */\nGlyph.prototype.getPath = function(x, y, fontSize, options, font) {\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 72;\n    let commands;\n    let hPoints;\n    if (!options) options = { };\n    let xScale = options.xScale;\n    let yScale = options.yScale;\n\n    if (options.hinting && font && font.hinting) {\n        // in case of hinting, the hinting engine takes care\n        // of scaling the points (not the path) before hinting.\n        hPoints = this.path && font.hinting.exec(this, fontSize);\n        // in case the hinting engine failed hPoints is undefined\n        // and thus reverts to plain rending\n    }\n\n    if (hPoints) {\n        // Call font.hinting.getCommands instead of `glyf.getPath(hPoints).commands` to avoid a circular dependency\n        commands = font.hinting.getCommands(hPoints);\n        x = Math.round(x);\n        y = Math.round(y);\n        // TODO in case of hinting xyScaling is not yet supported\n        xScale = yScale = 1;\n    } else {\n        commands = this.path.commands;\n        const scale = 1 / this.path.unitsPerEm * fontSize;\n        if (xScale === undefined) xScale = scale;\n        if (yScale === undefined) yScale = scale;\n    }\n\n    const p = new _path__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n    for (let i = 0; i < commands.length; i += 1) {\n        const cmd = commands[i];\n        if (cmd.type === 'M') {\n            p.moveTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));\n        } else if (cmd.type === 'L') {\n            p.lineTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));\n        } else if (cmd.type === 'Q') {\n            p.quadraticCurveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),\n                               x + (cmd.x * xScale), y + (-cmd.y * yScale));\n        } else if (cmd.type === 'C') {\n            p.curveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),\n                      x + (cmd.x2 * xScale), y + (-cmd.y2 * yScale),\n                      x + (cmd.x * xScale), y + (-cmd.y * yScale));\n        } else if (cmd.type === 'Z') {\n            p.closePath();\n        }\n    }\n\n    return p;\n};\n\n/**\n * Split the glyph into contours.\n * This function is here for backwards compatibility, and to\n * provide raw access to the TrueType glyph outlines.\n * @return {Array}\n */\nGlyph.prototype.getContours = function() {\n    if (this.points === undefined) {\n        return [];\n    }\n\n    const contours = [];\n    let currentContour = [];\n    for (let i = 0; i < this.points.length; i += 1) {\n        const pt = this.points[i];\n        currentContour.push(pt);\n        if (pt.lastPointOfContour) {\n            contours.push(currentContour);\n            currentContour = [];\n        }\n    }\n\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(currentContour.length === 0, 'There are still points left in the current contour.');\n    return contours;\n};\n\n/**\n * Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.\n * @return {Object}\n */\nGlyph.prototype.getMetrics = function() {\n    const commands = this.path.commands;\n    const xCoords = [];\n    const yCoords = [];\n    for (let i = 0; i < commands.length; i += 1) {\n        const cmd = commands[i];\n        if (cmd.type !== 'Z') {\n            xCoords.push(cmd.x);\n            yCoords.push(cmd.y);\n        }\n\n        if (cmd.type === 'Q' || cmd.type === 'C') {\n            xCoords.push(cmd.x1);\n            yCoords.push(cmd.y1);\n        }\n\n        if (cmd.type === 'C') {\n            xCoords.push(cmd.x2);\n            yCoords.push(cmd.y2);\n        }\n    }\n\n    const metrics = {\n        xMin: Math.min.apply(null, xCoords),\n        yMin: Math.min.apply(null, yCoords),\n        xMax: Math.max.apply(null, xCoords),\n        yMax: Math.max.apply(null, yCoords),\n        leftSideBearing: this.leftSideBearing\n    };\n\n    if (!isFinite(metrics.xMin)) {\n        metrics.xMin = 0;\n    }\n\n    if (!isFinite(metrics.xMax)) {\n        metrics.xMax = this.advanceWidth;\n    }\n\n    if (!isFinite(metrics.yMin)) {\n        metrics.yMin = 0;\n    }\n\n    if (!isFinite(metrics.yMax)) {\n        metrics.yMax = 0;\n    }\n\n    metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);\n    return metrics;\n};\n\n/**\n * Draw the glyph on the given context.\n * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {Object=} options - xScale, yScale to stretch the glyph.\n */\nGlyph.prototype.draw = function(ctx, x, y, fontSize, options) {\n    this.getPath(x, y, fontSize, options).draw(ctx);\n};\n\n/**\n * Draw the points of the glyph.\n * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n */\nGlyph.prototype.drawPoints = function(ctx, x, y, fontSize) {\n    function drawCircles(l, x, y, scale) {\n        const PI_SQ = Math.PI * 2;\n        ctx.beginPath();\n        for (let j = 0; j < l.length; j += 1) {\n            ctx.moveTo(x + (l[j].x * scale), y + (l[j].y * scale));\n            ctx.arc(x + (l[j].x * scale), y + (l[j].y * scale), 2, 0, PI_SQ, false);\n        }\n\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 24;\n    const scale = 1 / this.path.unitsPerEm * fontSize;\n\n    const blueCircles = [];\n    const redCircles = [];\n    const path = this.path;\n    for (let i = 0; i < path.commands.length; i += 1) {\n        const cmd = path.commands[i];\n        if (cmd.x !== undefined) {\n            blueCircles.push({x: cmd.x, y: -cmd.y});\n        }\n\n        if (cmd.x1 !== undefined) {\n            redCircles.push({x: cmd.x1, y: -cmd.y1});\n        }\n\n        if (cmd.x2 !== undefined) {\n            redCircles.push({x: cmd.x2, y: -cmd.y2});\n        }\n    }\n\n    ctx.fillStyle = 'blue';\n    drawCircles(blueCircles, x, y, scale);\n    ctx.fillStyle = 'red';\n    drawCircles(redCircles, x, y, scale);\n};\n\n/**\n * Draw lines indicating important font measurements.\n * Black lines indicate the origin of the coordinate system (point 0,0).\n * Blue lines indicate the glyph bounding box.\n * Green line indicates the advance width of the glyph.\n * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n */\nGlyph.prototype.drawMetrics = function(ctx, x, y, fontSize) {\n    let scale;\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 24;\n    scale = 1 / this.path.unitsPerEm * fontSize;\n    ctx.lineWidth = 1;\n\n    // Draw the origin\n    ctx.strokeStyle = 'black';\n    _draw__WEBPACK_IMPORTED_MODULE_1__[\"default\"].line(ctx, x, -10000, x, 10000);\n    _draw__WEBPACK_IMPORTED_MODULE_1__[\"default\"].line(ctx, -10000, y, 10000, y);\n\n    // This code is here due to memory optimization: by not using\n    // defaults in the constructor, we save a notable amount of memory.\n    const xMin = this.xMin || 0;\n    let yMin = this.yMin || 0;\n    const xMax = this.xMax || 0;\n    let yMax = this.yMax || 0;\n    const advanceWidth = this.advanceWidth || 0;\n\n    // Draw the glyph box\n    ctx.strokeStyle = 'blue';\n    _draw__WEBPACK_IMPORTED_MODULE_1__[\"default\"].line(ctx, x + (xMin * scale), -10000, x + (xMin * scale), 10000);\n    _draw__WEBPACK_IMPORTED_MODULE_1__[\"default\"].line(ctx, x + (xMax * scale), -10000, x + (xMax * scale), 10000);\n    _draw__WEBPACK_IMPORTED_MODULE_1__[\"default\"].line(ctx, -10000, y + (-yMin * scale), 10000, y + (-yMin * scale));\n    _draw__WEBPACK_IMPORTED_MODULE_1__[\"default\"].line(ctx, -10000, y + (-yMax * scale), 10000, y + (-yMax * scale));\n\n    // Draw the advance width\n    ctx.strokeStyle = 'green';\n    _draw__WEBPACK_IMPORTED_MODULE_1__[\"default\"].line(ctx, x + (advanceWidth * scale), -10000, x + (advanceWidth * scale), 10000);\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Glyph);\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/glyph.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/glyphset.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/glyphset.js ***!
  \*************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glyph */ \"../../node_modules/opentype.js/src/glyph.js\");\n// The GlyphSet object\n\n\n\n// Define a property on the glyph that depends on the path being loaded.\nfunction defineDependentProperty(glyph, externalName, internalName) {\n    Object.defineProperty(glyph, externalName, {\n        get: function() {\n            // Request the path property to make sure the path is loaded.\n            glyph.path; // jshint ignore:line\n            return glyph[internalName];\n        },\n        set: function(newValue) {\n            glyph[internalName] = newValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n}\n\n/**\n * A GlyphSet represents all glyphs available in the font, but modelled using\n * a deferred glyph loader, for retrieving glyphs only once they are absolutely\n * necessary, to keep the memory footprint down.\n * @exports opentype.GlyphSet\n * @class\n * @param {opentype.Font}\n * @param {Array}\n */\nfunction GlyphSet(font, glyphs) {\n    this.font = font;\n    this.glyphs = {};\n    if (Array.isArray(glyphs)) {\n        for (let i = 0; i < glyphs.length; i++) {\n            this.glyphs[i] = glyphs[i];\n        }\n    }\n\n    this.length = (glyphs && glyphs.length) || 0;\n}\n\n/**\n * @param  {number} index\n * @return {opentype.Glyph}\n */\nGlyphSet.prototype.get = function(index) {\n    if (typeof this.glyphs[index] === 'function') {\n        this.glyphs[index] = this.glyphs[index]();\n    }\n\n    return this.glyphs[index];\n};\n\n/**\n * @param  {number} index\n * @param  {Object}\n */\nGlyphSet.prototype.push = function(index, loader) {\n    this.glyphs[index] = loader;\n    this.length++;\n};\n\n/**\n * @alias opentype.glyphLoader\n * @param  {opentype.Font} font\n * @param  {number} index\n * @return {opentype.Glyph}\n */\nfunction glyphLoader(font, index) {\n    return new _glyph__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({index: index, font: font});\n}\n\n/**\n * Generate a stub glyph that can be filled with all metadata *except*\n * the \"points\" and \"path\" properties, which must be loaded only once\n * the glyph's path is actually requested for text shaping.\n * @alias opentype.ttfGlyphLoader\n * @param  {opentype.Font} font\n * @param  {number} index\n * @param  {Function} parseGlyph\n * @param  {Object} data\n * @param  {number} position\n * @param  {Function} buildPath\n * @return {opentype.Glyph}\n */\nfunction ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {\n    return function() {\n        const glyph = new _glyph__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({index: index, font: font});\n\n        glyph.path = function() {\n            parseGlyph(glyph, data, position);\n            const path = buildPath(font.glyphs, glyph);\n            path.unitsPerEm = font.unitsPerEm;\n            return path;\n        };\n\n        defineDependentProperty(glyph, 'xMin', '_xMin');\n        defineDependentProperty(glyph, 'xMax', '_xMax');\n        defineDependentProperty(glyph, 'yMin', '_yMin');\n        defineDependentProperty(glyph, 'yMax', '_yMax');\n\n        return glyph;\n    };\n}\n/**\n * @alias opentype.cffGlyphLoader\n * @param  {opentype.Font} font\n * @param  {number} index\n * @param  {Function} parseCFFCharstring\n * @param  {string} charstring\n * @return {opentype.Glyph}\n */\nfunction cffGlyphLoader(font, index, parseCFFCharstring, charstring) {\n    return function() {\n        const glyph = new _glyph__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({index: index, font: font});\n\n        glyph.path = function() {\n            const path = parseCFFCharstring(font, glyph, charstring);\n            path.unitsPerEm = font.unitsPerEm;\n            return path;\n        };\n\n        return glyph;\n    };\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ GlyphSet, glyphLoader, ttfGlyphLoader, cffGlyphLoader });\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/glyphset.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/hintingtt.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/hintingtt.js ***!
  \**************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tables_glyf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tables/glyf */ \"../../node_modules/opentype.js/src/tables/glyf.js\");\n/* A TrueType font hinting interpreter.\n*\n* (c) 2017 Axel Kittenberger\n*\n* This interpreter has been implemented according to this documentation:\n* https://developer.apple.com/fonts/TrueType-Reference-Manual/RM05/Chap5.html\n*\n* According to the documentation F24DOT6 values are used for pixels.\n* That means calculation is 1/64 pixel accurate and uses integer operations.\n* However, Javascript has floating point operations by default and only\n* those are available. One could make a case to simulate the 1/64 accuracy\n* exactly by truncating after every division operation\n* (for example with << 0) to get pixel exactly results as other TrueType\n* implementations. It may make sense since some fonts are pixel optimized\n* by hand using DELTAP instructions. The current implementation doesn't\n* and rather uses full floating point precision.\n*\n* xScale, yScale and rotation is currently ignored.\n*\n* A few non-trivial instructions are missing as I didn't encounter yet\n* a font that used them to test a possible implementation.\n*\n* Some fonts seem to use undocumented features regarding the twilight zone.\n* Only some of them are implemented as they were encountered.\n*\n* The exports.DEBUG statements are removed on the minified distribution file.\n*/\n\n\n\n\nlet instructionTable;\nlet exec;\nlet execGlyph;\nlet execComponent;\n\n/*\n* Creates a hinting object.\n*\n* There ought to be exactly one\n* for each truetype font that is used for hinting.\n*/\nfunction Hinting(font) {\n    // the font this hinting object is for\n    this.font = font;\n\n    this.getCommands = function (hPoints) {\n        return _tables_glyf__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getPath(hPoints).commands;\n    };\n\n    // cached states\n    this._fpgmState  =\n    this._prepState  =\n        undefined;\n\n    // errorState\n    // 0 ... all okay\n    // 1 ... had an error in a glyf,\n    //       continue working but stop spamming\n    //       the console\n    // 2 ... error at prep, stop hinting at this ppem\n    // 3 ... error at fpeg, stop hinting for this font at all\n    this._errorState = 0;\n}\n\n/*\n* Not rounding.\n*/\nfunction roundOff(v) {\n    return v;\n}\n\n/*\n* Rounding to grid.\n*/\nfunction roundToGrid(v) {\n    //Rounding in TT is supposed to \"symmetrical around zero\"\n    return Math.sign(v) * Math.round(Math.abs(v));\n}\n\n/*\n* Rounding to double grid.\n*/\nfunction roundToDoubleGrid(v) {\n    return Math.sign(v) * Math.round(Math.abs(v * 2)) / 2;\n}\n\n/*\n* Rounding to half grid.\n*/\nfunction roundToHalfGrid(v) {\n    return Math.sign(v) * (Math.round(Math.abs(v) + 0.5) - 0.5);\n}\n\n/*\n* Rounding to up to grid.\n*/\nfunction roundUpToGrid(v) {\n    return Math.sign(v) * Math.ceil(Math.abs(v));\n}\n\n/*\n* Rounding to down to grid.\n*/\nfunction roundDownToGrid(v) {\n    return Math.sign(v) * Math.floor(Math.abs(v));\n}\n\n/*\n* Super rounding.\n*/\nconst roundSuper = function (v) {\n    const period = this.srPeriod;\n    let phase = this.srPhase;\n    const threshold = this.srThreshold;\n    let sign = 1;\n\n    if (v < 0) {\n        v = -v;\n        sign = -1;\n    }\n\n    v += threshold - phase;\n\n    v = Math.trunc(v / period) * period;\n\n    v += phase;\n\n    // according to http://xgridfit.sourceforge.net/round.html\n    if (v < 0) return phase * sign;\n\n    return v * sign;\n};\n\n/*\n* Unit vector of x-axis.\n*/\nconst xUnitVector = {\n    x: 1,\n\n    y: 0,\n\n    axis: 'x',\n\n    // Gets the projected distance between two points.\n    // o1/o2 ... if true, respective original position is used.\n    distance: function (p1, p2, o1, o2) {\n        return (o1 ? p1.xo : p1.x) - (o2 ? p2.xo : p2.x);\n    },\n\n    // Moves point p so the moved position has the same relative\n    // position to the moved positions of rp1 and rp2 than the\n    // original positions had.\n    //\n    // See APPENDIX on INTERPOLATE at the bottom of this file.\n    interpolate: function (p, rp1, rp2, pv) {\n        let do1;\n        let do2;\n        let doa1;\n        let doa2;\n        let dm1;\n        let dm2;\n        let dt;\n\n        if (!pv || pv === this) {\n            do1 = p.xo - rp1.xo;\n            do2 = p.xo - rp2.xo;\n            dm1 = rp1.x - rp1.xo;\n            dm2 = rp2.x - rp2.xo;\n            doa1 = Math.abs(do1);\n            doa2 = Math.abs(do2);\n            dt = doa1 + doa2;\n\n            if (dt === 0) {\n                p.x = p.xo + (dm1 + dm2) / 2;\n                return;\n            }\n\n            p.x = p.xo + (dm1 * doa2 + dm2 * doa1) / dt;\n            return;\n        }\n\n        do1 = pv.distance(p, rp1, true, true);\n        do2 = pv.distance(p, rp2, true, true);\n        dm1 = pv.distance(rp1, rp1, false, true);\n        dm2 = pv.distance(rp2, rp2, false, true);\n        doa1 = Math.abs(do1);\n        doa2 = Math.abs(do2);\n        dt = doa1 + doa2;\n\n        if (dt === 0) {\n            xUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n            return;\n        }\n\n        xUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n    },\n\n    // Slope of line normal to this\n    normalSlope: Number.NEGATIVE_INFINITY,\n\n    // Sets the point 'p' relative to point 'rp'\n    // by the distance 'd'.\n    //\n    // See APPENDIX on SETRELATIVE at the bottom of this file.\n    //\n    // p   ... point to set\n    // rp  ... reference point\n    // d   ... distance on projection vector\n    // pv  ... projection vector (undefined = this)\n    // org ... if true, uses the original position of rp as reference.\n    setRelative: function (p, rp, d, pv, org) {\n        if (!pv || pv === this) {\n            p.x = (org ? rp.xo : rp.x) + d;\n            return;\n        }\n\n        const rpx = org ? rp.xo : rp.x;\n        const rpy = org ? rp.yo : rp.y;\n        const rpdx = rpx + d * pv.x;\n        const rpdy = rpy + d * pv.y;\n\n        p.x = rpdx + (p.y - rpdy) / pv.normalSlope;\n    },\n\n    // Slope of vector line.\n    slope: 0,\n\n    // Touches the point p.\n    touch: function (p) {\n        p.xTouched = true;\n    },\n\n    // Tests if a point p is touched.\n    touched: function (p) {\n        return p.xTouched;\n    },\n\n    // Untouches the point p.\n    untouch: function (p) {\n        p.xTouched = false;\n    }\n};\n\n/*\n* Unit vector of y-axis.\n*/\nconst yUnitVector = {\n    x: 0,\n\n    y: 1,\n\n    axis: 'y',\n\n    // Gets the projected distance between two points.\n    // o1/o2 ... if true, respective original position is used.\n    distance: function (p1, p2, o1, o2) {\n        return (o1 ? p1.yo : p1.y) - (o2 ? p2.yo : p2.y);\n    },\n\n    // Moves point p so the moved position has the same relative\n    // position to the moved positions of rp1 and rp2 than the\n    // original positions had.\n    //\n    // See APPENDIX on INTERPOLATE at the bottom of this file.\n    interpolate: function (p, rp1, rp2, pv) {\n        let do1;\n        let do2;\n        let doa1;\n        let doa2;\n        let dm1;\n        let dm2;\n        let dt;\n\n        if (!pv || pv === this) {\n            do1 = p.yo - rp1.yo;\n            do2 = p.yo - rp2.yo;\n            dm1 = rp1.y - rp1.yo;\n            dm2 = rp2.y - rp2.yo;\n            doa1 = Math.abs(do1);\n            doa2 = Math.abs(do2);\n            dt = doa1 + doa2;\n\n            if (dt === 0) {\n                p.y = p.yo + (dm1 + dm2) / 2;\n                return;\n            }\n\n            p.y = p.yo + (dm1 * doa2 + dm2 * doa1) / dt;\n            return;\n        }\n\n        do1 = pv.distance(p, rp1, true, true);\n        do2 = pv.distance(p, rp2, true, true);\n        dm1 = pv.distance(rp1, rp1, false, true);\n        dm2 = pv.distance(rp2, rp2, false, true);\n        doa1 = Math.abs(do1);\n        doa2 = Math.abs(do2);\n        dt = doa1 + doa2;\n\n        if (dt === 0) {\n            yUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n            return;\n        }\n\n        yUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n    },\n\n    // Slope of line normal to this.\n    normalSlope: 0,\n\n    // Sets the point 'p' relative to point 'rp'\n    // by the distance 'd'\n    //\n    // See APPENDIX on SETRELATIVE at the bottom of this file.\n    //\n    // p   ... point to set\n    // rp  ... reference point\n    // d   ... distance on projection vector\n    // pv  ... projection vector (undefined = this)\n    // org ... if true, uses the original position of rp as reference.\n    setRelative: function (p, rp, d, pv, org) {\n        if (!pv || pv === this) {\n            p.y = (org ? rp.yo : rp.y) + d;\n            return;\n        }\n\n        const rpx = org ? rp.xo : rp.x;\n        const rpy = org ? rp.yo : rp.y;\n        const rpdx = rpx + d * pv.x;\n        const rpdy = rpy + d * pv.y;\n\n        p.y = rpdy + pv.normalSlope * (p.x - rpdx);\n    },\n\n    // Slope of vector line.\n    slope: Number.POSITIVE_INFINITY,\n\n    // Touches the point p.\n    touch: function (p) {\n        p.yTouched = true;\n    },\n\n    // Tests if a point p is touched.\n    touched: function (p) {\n        return p.yTouched;\n    },\n\n    // Untouches the point p.\n    untouch: function (p) {\n        p.yTouched = false;\n    }\n};\n\nObject.freeze(xUnitVector);\nObject.freeze(yUnitVector);\n\n/*\n* Creates a unit vector that is not x- or y-axis.\n*/\nfunction UnitVector(x, y) {\n    this.x = x;\n    this.y = y;\n    this.axis = undefined;\n    this.slope = y / x;\n    this.normalSlope = -x / y;\n    Object.freeze(this);\n}\n\n/*\n* Gets the projected distance between two points.\n* o1/o2 ... if true, respective original position is used.\n*/\nUnitVector.prototype.distance = function(p1, p2, o1, o2) {\n    return (\n        this.x * xUnitVector.distance(p1, p2, o1, o2) +\n        this.y * yUnitVector.distance(p1, p2, o1, o2)\n    );\n};\n\n/*\n* Moves point p so the moved position has the same relative\n* position to the moved positions of rp1 and rp2 than the\n* original positions had.\n*\n* See APPENDIX on INTERPOLATE at the bottom of this file.\n*/\nUnitVector.prototype.interpolate = function(p, rp1, rp2, pv) {\n    let dm1;\n    let dm2;\n    let do1;\n    let do2;\n    let doa1;\n    let doa2;\n    let dt;\n\n    do1 = pv.distance(p, rp1, true, true);\n    do2 = pv.distance(p, rp2, true, true);\n    dm1 = pv.distance(rp1, rp1, false, true);\n    dm2 = pv.distance(rp2, rp2, false, true);\n    doa1 = Math.abs(do1);\n    doa2 = Math.abs(do2);\n    dt = doa1 + doa2;\n\n    if (dt === 0) {\n        this.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n        return;\n    }\n\n    this.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n};\n\n/*\n* Sets the point 'p' relative to point 'rp'\n* by the distance 'd'\n*\n* See APPENDIX on SETRELATIVE at the bottom of this file.\n*\n* p   ...  point to set\n* rp  ... reference point\n* d   ... distance on projection vector\n* pv  ... projection vector (undefined = this)\n* org ... if true, uses the original position of rp as reference.\n*/\nUnitVector.prototype.setRelative = function(p, rp, d, pv, org) {\n    pv = pv || this;\n\n    const rpx = org ? rp.xo : rp.x;\n    const rpy = org ? rp.yo : rp.y;\n    const rpdx = rpx + d * pv.x;\n    const rpdy = rpy + d * pv.y;\n\n    const pvns = pv.normalSlope;\n    const fvs = this.slope;\n\n    const px = p.x;\n    const py = p.y;\n\n    p.x = (fvs * px - pvns * rpdx + rpdy - py) / (fvs - pvns);\n    p.y = fvs * (p.x - px) + py;\n};\n\n/*\n* Touches the point p.\n*/\nUnitVector.prototype.touch = function(p) {\n    p.xTouched = true;\n    p.yTouched = true;\n};\n\n/*\n* Returns a unit vector with x/y coordinates.\n*/\nfunction getUnitVector(x, y) {\n    const d = Math.sqrt(x * x + y * y);\n\n    x /= d;\n    y /= d;\n\n    if (x === 1 && y === 0) return xUnitVector;\n    else if (x === 0 && y === 1) return yUnitVector;\n    else return new UnitVector(x, y);\n}\n\n/*\n* Creates a point in the hinting engine.\n*/\nfunction HPoint(\n    x,\n    y,\n    lastPointOfContour,\n    onCurve\n) {\n    this.x = this.xo = Math.round(x * 64) / 64; // hinted x value and original x-value\n    this.y = this.yo = Math.round(y * 64) / 64; // hinted y value and original y-value\n\n    this.lastPointOfContour = lastPointOfContour;\n    this.onCurve = onCurve;\n    this.prevPointOnContour = undefined;\n    this.nextPointOnContour = undefined;\n    this.xTouched = false;\n    this.yTouched = false;\n\n    Object.preventExtensions(this);\n}\n\n/*\n* Returns the next touched point on the contour.\n*\n* v  ... unit vector to test touch axis.\n*/\nHPoint.prototype.nextTouched = function(v) {\n    let p = this.nextPointOnContour;\n\n    while (!v.touched(p) && p !== this) p = p.nextPointOnContour;\n\n    return p;\n};\n\n/*\n* Returns the previous touched point on the contour\n*\n* v  ... unit vector to test touch axis.\n*/\nHPoint.prototype.prevTouched = function(v) {\n    let p = this.prevPointOnContour;\n\n    while (!v.touched(p) && p !== this) p = p.prevPointOnContour;\n\n    return p;\n};\n\n/*\n* The zero point.\n*/\nconst HPZero = Object.freeze(new HPoint(0, 0));\n\n/*\n* The default state of the interpreter.\n*\n* Note: Freezing the defaultState and then deriving from it\n* makes the V8 Javascript engine going awkward,\n* so this is avoided, albeit the defaultState shouldn't\n* ever change.\n*/\nconst defaultState = {\n    cvCutIn: 17 / 16,    // control value cut in\n    deltaBase: 9,\n    deltaShift: 0.125,\n    loop: 1,             // loops some instructions\n    minDis: 1,           // minimum distance\n    autoFlip: true\n};\n\n/*\n* The current state of the interpreter.\n*\n* env  ... 'fpgm' or 'prep' or 'glyf'\n* prog ... the program\n*/\nfunction State(env, prog) {\n    this.env = env;\n    this.stack = [];\n    this.prog = prog;\n\n    switch (env) {\n        case 'glyf' :\n            this.zp0 = this.zp1 = this.zp2 = 1;\n            this.rp0 = this.rp1 = this.rp2 = 0;\n            /* fall through */\n        case 'prep' :\n            this.fv = this.pv = this.dpv = xUnitVector;\n            this.round = roundToGrid;\n    }\n}\n\n/*\n* Executes a glyph program.\n*\n* This does the hinting for each glyph.\n*\n* Returns an array of moved points.\n*\n* glyph: the glyph to hint\n* ppem: the size the glyph is rendered for\n*/\nHinting.prototype.exec = function(glyph, ppem) {\n    if (typeof ppem !== 'number') {\n        throw new Error('Point size is not a number!');\n    }\n\n    // Received a fatal error, don't do any hinting anymore.\n    if (this._errorState > 2) return;\n\n    const font = this.font;\n    let prepState = this._prepState;\n\n    if (!prepState || prepState.ppem !== ppem) {\n        let fpgmState = this._fpgmState;\n\n        if (!fpgmState) {\n            // Executes the fpgm state.\n            // This is used by fonts to define functions.\n            State.prototype = defaultState;\n\n            fpgmState =\n            this._fpgmState =\n                new State('fpgm', font.tables.fpgm);\n\n            fpgmState.funcs = [ ];\n            fpgmState.font = font;\n\n            if (exports.DEBUG) {\n                console.log('---EXEC FPGM---');\n                fpgmState.step = -1;\n            }\n\n            try {\n                exec(fpgmState);\n            } catch (e) {\n                console.log('Hinting error in FPGM:' + e);\n                this._errorState = 3;\n                return;\n            }\n        }\n\n        // Executes the prep program for this ppem setting.\n        // This is used by fonts to set cvt values\n        // depending on to be rendered font size.\n\n        State.prototype = fpgmState;\n        prepState =\n        this._prepState =\n            new State('prep', font.tables.prep);\n\n        prepState.ppem = ppem;\n\n        // Creates a copy of the cvt table\n        // and scales it to the current ppem setting.\n        const oCvt = font.tables.cvt;\n        if (oCvt) {\n            const cvt = prepState.cvt = new Array(oCvt.length);\n            const scale = ppem / font.unitsPerEm;\n            for (let c = 0; c < oCvt.length; c++) {\n                cvt[c] = oCvt[c] * scale;\n            }\n        } else {\n            prepState.cvt = [];\n        }\n\n        if (exports.DEBUG) {\n            console.log('---EXEC PREP---');\n            prepState.step = -1;\n        }\n\n        try {\n            exec(prepState);\n        } catch (e) {\n            if (this._errorState < 2) {\n                console.log('Hinting error in PREP:' + e);\n            }\n            this._errorState = 2;\n        }\n    }\n\n    if (this._errorState > 1) return;\n\n    try {\n        return execGlyph(glyph, prepState);\n    } catch (e) {\n        if (this._errorState < 1) {\n            console.log('Hinting error:' + e);\n            console.log('Note: further hinting errors are silenced');\n        }\n        this._errorState = 1;\n        return undefined;\n    }\n};\n\n/*\n* Executes the hinting program for a glyph.\n*/\nexecGlyph = function(glyph, prepState) {\n    // original point positions\n    const xScale = prepState.ppem / prepState.font.unitsPerEm;\n    const yScale = xScale;\n    let components = glyph.components;\n    let contours;\n    let gZone;\n    let state;\n\n    State.prototype = prepState;\n    if (!components) {\n        state = new State('glyf', glyph.instructions);\n        if (exports.DEBUG) {\n            console.log('---EXEC GLYPH---');\n            state.step = -1;\n        }\n        execComponent(glyph, state, xScale, yScale);\n        gZone = state.gZone;\n    } else {\n        const font = prepState.font;\n        gZone = [];\n        contours = [];\n        for (let i = 0; i < components.length; i++) {\n            const c = components[i];\n            const cg = font.glyphs.get(c.glyphIndex);\n\n            state = new State('glyf', cg.instructions);\n\n            if (exports.DEBUG) {\n                console.log('---EXEC COMP ' + i + '---');\n                state.step = -1;\n            }\n\n            execComponent(cg, state, xScale, yScale);\n            // appends the computed points to the result array\n            // post processes the component points\n            const dx = Math.round(c.dx * xScale);\n            const dy = Math.round(c.dy * yScale);\n            const gz = state.gZone;\n            const cc = state.contours;\n            for (let pi = 0; pi < gz.length; pi++) {\n                const p = gz[pi];\n                p.xTouched = p.yTouched = false;\n                p.xo = p.x = p.x + dx;\n                p.yo = p.y = p.y + dy;\n            }\n\n            const gLen = gZone.length;\n            gZone.push.apply(gZone, gz);\n            for (let j = 0; j < cc.length; j++) {\n                contours.push(cc[j] + gLen);\n            }\n        }\n\n        if (glyph.instructions && !state.inhibitGridFit) {\n            // the composite has instructions on its own\n            state = new State('glyf', glyph.instructions);\n\n            state.gZone = state.z0 = state.z1 = state.z2 = gZone;\n\n            state.contours = contours;\n\n            // note: HPZero cannot be used here, since\n            //       the point might be modified\n            gZone.push(\n                new HPoint(0, 0),\n                new HPoint(Math.round(glyph.advanceWidth * xScale), 0)\n            );\n\n            if (exports.DEBUG) {\n                console.log('---EXEC COMPOSITE---');\n                state.step = -1;\n            }\n\n            exec(state);\n\n            gZone.length -= 2;\n        }\n    }\n\n    return gZone;\n};\n\n/*\n* Executes the hinting program for a component of a multi-component glyph\n* or of the glyph itself for a non-component glyph.\n*/\nexecComponent = function(glyph, state, xScale, yScale)\n{\n    const points = glyph.points || [];\n    const pLen = points.length;\n    const gZone = state.gZone = state.z0 = state.z1 = state.z2 = [];\n    const contours = state.contours = [];\n\n    // Scales the original points and\n    // makes copies for the hinted points.\n    let cp; // current point\n    for (let i = 0; i < pLen; i++) {\n        cp = points[i];\n\n        gZone[i] = new HPoint(\n            cp.x * xScale,\n            cp.y * yScale,\n            cp.lastPointOfContour,\n            cp.onCurve\n        );\n    }\n\n    // Chain links the contours.\n    let sp; // start point\n    let np; // next point\n\n    for (let i = 0; i < pLen; i++) {\n        cp = gZone[i];\n\n        if (!sp) {\n            sp = cp;\n            contours.push(i);\n        }\n\n        if (cp.lastPointOfContour) {\n            cp.nextPointOnContour = sp;\n            sp.prevPointOnContour = cp;\n            sp = undefined;\n        } else {\n            np = gZone[i + 1];\n            cp.nextPointOnContour = np;\n            np.prevPointOnContour = cp;\n        }\n    }\n\n    if (state.inhibitGridFit) return;\n\n    if (exports.DEBUG) {\n        console.log('PROCESSING GLYPH', state.stack);\n        for (let i = 0; i < pLen; i++) {\n            console.log(i, gZone[i].x, gZone[i].y);\n        }\n    }\n\n    gZone.push(\n        new HPoint(0, 0),\n        new HPoint(Math.round(glyph.advanceWidth * xScale), 0)\n    );\n\n    exec(state);\n\n    // Removes the extra points.\n    gZone.length -= 2;\n\n    if (exports.DEBUG) {\n        console.log('FINISHED GLYPH', state.stack);\n        for (let i = 0; i < pLen; i++) {\n            console.log(i, gZone[i].x, gZone[i].y);\n        }\n    }\n};\n\n/*\n* Executes the program loaded in state.\n*/\nexec = function(state) {\n    let prog = state.prog;\n\n    if (!prog) return;\n\n    const pLen = prog.length;\n    let ins;\n\n    for (state.ip = 0; state.ip < pLen; state.ip++) {\n        if (exports.DEBUG) state.step++;\n        ins = instructionTable[prog[state.ip]];\n\n        if (!ins) {\n            throw new Error(\n                'unknown instruction: 0x' +\n                Number(prog[state.ip]).toString(16)\n            );\n        }\n\n        ins(state);\n\n        // very extensive debugging for each step\n        /*\n        if (exports.DEBUG) {\n            var da;\n            if (state.gZone) {\n                da = [];\n                for (let i = 0; i < state.gZone.length; i++)\n                {\n                    da.push(i + ' ' +\n                        state.gZone[i].x * 64 + ' ' +\n                        state.gZone[i].y * 64 + ' ' +\n                        (state.gZone[i].xTouched ? 'x' : '') +\n                        (state.gZone[i].yTouched ? 'y' : '')\n                    );\n                }\n                console.log('GZ', da);\n            }\n\n            if (state.tZone) {\n                da = [];\n                for (let i = 0; i < state.tZone.length; i++) {\n                    da.push(i + ' ' +\n                        state.tZone[i].x * 64 + ' ' +\n                        state.tZone[i].y * 64 + ' ' +\n                        (state.tZone[i].xTouched ? 'x' : '') +\n                        (state.tZone[i].yTouched ? 'y' : '')\n                    );\n                }\n                console.log('TZ', da);\n            }\n\n            if (state.stack.length > 10) {\n                console.log(\n                    state.stack.length,\n                    '...', state.stack.slice(state.stack.length - 10)\n                );\n            } else {\n                console.log(state.stack.length, state.stack);\n            }\n        }\n        */\n    }\n};\n\n/*\n* Initializes the twilight zone.\n*\n* This is only done if a SZPx instruction\n* refers to the twilight zone.\n*/\nfunction initTZone(state)\n{\n    const tZone = state.tZone = new Array(state.gZone.length);\n\n    // no idea if this is actually correct...\n    for (let i = 0; i < tZone.length; i++)\n    {\n        tZone[i] = new HPoint(0, 0);\n    }\n}\n\n/*\n* Skips the instruction pointer ahead over an IF/ELSE block.\n* handleElse .. if true breaks on matching ELSE\n*/\nfunction skip(state, handleElse)\n{\n    const prog = state.prog;\n    let ip = state.ip;\n    let nesting = 1;\n    let ins;\n\n    do {\n        ins = prog[++ip];\n        if (ins === 0x58) // IF\n            nesting++;\n        else if (ins === 0x59) // EIF\n            nesting--;\n        else if (ins === 0x40) // NPUSHB\n            ip += prog[ip + 1] + 1;\n        else if (ins === 0x41) // NPUSHW\n            ip += 2 * prog[ip + 1] + 1;\n        else if (ins >= 0xB0 && ins <= 0xB7) // PUSHB\n            ip += ins - 0xB0 + 1;\n        else if (ins >= 0xB8 && ins <= 0xBF) // PUSHW\n            ip += (ins - 0xB8 + 1) * 2;\n        else if (handleElse && nesting === 1 && ins === 0x1B) // ELSE\n            break;\n    } while (nesting > 0);\n\n    state.ip = ip;\n}\n\n/*----------------------------------------------------------*\n*          And then a lot of instructions...                *\n*----------------------------------------------------------*/\n\n// SVTCA[a] Set freedom and projection Vectors To Coordinate Axis\n// 0x00-0x01\nfunction SVTCA(v, state) {\n    if (exports.DEBUG) console.log(state.step, 'SVTCA[' + v.axis + ']');\n\n    state.fv = state.pv = state.dpv = v;\n}\n\n// SPVTCA[a] Set Projection Vector to Coordinate Axis\n// 0x02-0x03\nfunction SPVTCA(v, state) {\n    if (exports.DEBUG) console.log(state.step, 'SPVTCA[' + v.axis + ']');\n\n    state.pv = state.dpv = v;\n}\n\n// SFVTCA[a] Set Freedom Vector to Coordinate Axis\n// 0x04-0x05\nfunction SFVTCA(v, state) {\n    if (exports.DEBUG) console.log(state.step, 'SFVTCA[' + v.axis + ']');\n\n    state.fv = v;\n}\n\n// SPVTL[a] Set Projection Vector To Line\n// 0x06-0x07\nfunction SPVTL(a, state) {\n    const stack = state.stack;\n    const p2i = stack.pop();\n    const p1i = stack.pop();\n    const p2 = state.z2[p2i];\n    const p1 = state.z1[p1i];\n\n    if (exports.DEBUG) console.log('SPVTL[' + a + ']', p2i, p1i);\n\n    let dx;\n    let dy;\n\n    if (!a) {\n        dx = p1.x - p2.x;\n        dy = p1.y - p2.y;\n    } else {\n        dx = p2.y - p1.y;\n        dy = p1.x - p2.x;\n    }\n\n    state.pv = state.dpv = getUnitVector(dx, dy);\n}\n\n// SFVTL[a] Set Freedom Vector To Line\n// 0x08-0x09\nfunction SFVTL(a, state) {\n    const stack = state.stack;\n    const p2i = stack.pop();\n    const p1i = stack.pop();\n    const p2 = state.z2[p2i];\n    const p1 = state.z1[p1i];\n\n    if (exports.DEBUG) console.log('SFVTL[' + a + ']', p2i, p1i);\n\n    let dx;\n    let dy;\n\n    if (!a) {\n        dx = p1.x - p2.x;\n        dy = p1.y - p2.y;\n    } else {\n        dx = p2.y - p1.y;\n        dy = p1.x - p2.x;\n    }\n\n    state.fv = getUnitVector(dx, dy);\n}\n\n// SPVFS[] Set Projection Vector From Stack\n// 0x0A\nfunction SPVFS(state) {\n    const stack = state.stack;\n    const y = stack.pop();\n    const x = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SPVFS[]', y, x);\n\n    state.pv = state.dpv = getUnitVector(x, y);\n}\n\n// SFVFS[] Set Freedom Vector From Stack\n// 0x0B\nfunction SFVFS(state) {\n    const stack = state.stack;\n    const y = stack.pop();\n    const x = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SPVFS[]', y, x);\n\n    state.fv = getUnitVector(x, y);\n}\n\n// GPV[] Get Projection Vector\n// 0x0C\nfunction GPV(state) {\n    const stack = state.stack;\n    const pv = state.pv;\n\n    if (exports.DEBUG) console.log(state.step, 'GPV[]');\n\n    stack.push(pv.x * 0x4000);\n    stack.push(pv.y * 0x4000);\n}\n\n// GFV[] Get Freedom Vector\n// 0x0C\nfunction GFV(state) {\n    const stack = state.stack;\n    const fv = state.fv;\n\n    if (exports.DEBUG) console.log(state.step, 'GFV[]');\n\n    stack.push(fv.x * 0x4000);\n    stack.push(fv.y * 0x4000);\n}\n\n// SFVTPV[] Set Freedom Vector To Projection Vector\n// 0x0E\nfunction SFVTPV(state) {\n    state.fv = state.pv;\n\n    if (exports.DEBUG) console.log(state.step, 'SFVTPV[]');\n}\n\n// ISECT[] moves point p to the InterSECTion of two lines\n// 0x0F\nfunction ISECT(state)\n{\n    const stack = state.stack;\n    const pa0i = stack.pop();\n    const pa1i = stack.pop();\n    const pb0i = stack.pop();\n    const pb1i = stack.pop();\n    const pi = stack.pop();\n    const z0 = state.z0;\n    const z1 = state.z1;\n    const pa0 = z0[pa0i];\n    const pa1 = z0[pa1i];\n    const pb0 = z1[pb0i];\n    const pb1 = z1[pb1i];\n    const p = state.z2[pi];\n\n    if (exports.DEBUG) console.log('ISECT[], ', pa0i, pa1i, pb0i, pb1i, pi);\n\n    // math from\n    // en.wikipedia.org/wiki/Line%E2%80%93line_intersection#Given_two_points_on_each_line\n\n    const x1 = pa0.x;\n    const y1 = pa0.y;\n    const x2 = pa1.x;\n    const y2 = pa1.y;\n    const x3 = pb0.x;\n    const y3 = pb0.y;\n    const x4 = pb1.x;\n    const y4 = pb1.y;\n\n    const div = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    const f1 = x1 * y2 - y1 * x2;\n    const f2 = x3 * y4 - y3 * x4;\n\n    p.x = (f1 * (x3 - x4) - f2 * (x1 - x2)) / div;\n    p.y = (f1 * (y3 - y4) - f2 * (y1 - y2)) / div;\n}\n\n// SRP0[] Set Reference Point 0\n// 0x10\nfunction SRP0(state) {\n    state.rp0 = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SRP0[]', state.rp0);\n}\n\n// SRP1[] Set Reference Point 1\n// 0x11\nfunction SRP1(state) {\n    state.rp1 = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SRP1[]', state.rp1);\n}\n\n// SRP1[] Set Reference Point 2\n// 0x12\nfunction SRP2(state) {\n    state.rp2 = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SRP2[]', state.rp2);\n}\n\n// SZP0[] Set Zone Pointer 0\n// 0x13\nfunction SZP0(state) {\n    const n = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SZP0[]', n);\n\n    state.zp0 = n;\n\n    switch (n) {\n        case 0:\n            if (!state.tZone) initTZone(state);\n            state.z0 = state.tZone;\n            break;\n        case 1 :\n            state.z0 = state.gZone;\n            break;\n        default :\n            throw new Error('Invalid zone pointer');\n    }\n}\n\n// SZP1[] Set Zone Pointer 1\n// 0x14\nfunction SZP1(state) {\n    const n = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SZP1[]', n);\n\n    state.zp1 = n;\n\n    switch (n) {\n        case 0:\n            if (!state.tZone) initTZone(state);\n            state.z1 = state.tZone;\n            break;\n        case 1 :\n            state.z1 = state.gZone;\n            break;\n        default :\n            throw new Error('Invalid zone pointer');\n    }\n}\n\n// SZP2[] Set Zone Pointer 2\n// 0x15\nfunction SZP2(state) {\n    const n = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SZP2[]', n);\n\n    state.zp2 = n;\n\n    switch (n) {\n        case 0:\n            if (!state.tZone) initTZone(state);\n            state.z2 = state.tZone;\n            break;\n        case 1 :\n            state.z2 = state.gZone;\n            break;\n        default :\n            throw new Error('Invalid zone pointer');\n    }\n}\n\n// SZPS[] Set Zone PointerS\n// 0x16\nfunction SZPS(state) {\n    const n = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SZPS[]', n);\n\n    state.zp0 = state.zp1 = state.zp2 = n;\n\n    switch (n) {\n        case 0:\n            if (!state.tZone) initTZone(state);\n            state.z0 = state.z1 = state.z2 = state.tZone;\n            break;\n        case 1 :\n            state.z0 = state.z1 = state.z2 = state.gZone;\n            break;\n        default :\n            throw new Error('Invalid zone pointer');\n    }\n}\n\n// SLOOP[] Set LOOP variable\n// 0x17\nfunction SLOOP(state) {\n    state.loop = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SLOOP[]', state.loop);\n}\n\n// RTG[] Round To Grid\n// 0x18\nfunction RTG(state) {\n    if (exports.DEBUG) console.log(state.step, 'RTG[]');\n\n    state.round = roundToGrid;\n}\n\n// RTHG[] Round To Half Grid\n// 0x19\nfunction RTHG(state) {\n    if (exports.DEBUG) console.log(state.step, 'RTHG[]');\n\n    state.round = roundToHalfGrid;\n}\n\n// SMD[] Set Minimum Distance\n// 0x1A\nfunction SMD(state) {\n    const d = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SMD[]', d);\n\n    state.minDis = d / 0x40;\n}\n\n// ELSE[] ELSE clause\n// 0x1B\nfunction ELSE(state) {\n    // This instruction has been reached by executing a then branch\n    // so it just skips ahead until matching EIF.\n    //\n    // In case the IF was negative the IF[] instruction already\n    // skipped forward over the ELSE[]\n\n    if (exports.DEBUG) console.log(state.step, 'ELSE[]');\n\n    skip(state, false);\n}\n\n// JMPR[] JuMP Relative\n// 0x1C\nfunction JMPR(state) {\n    const o = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'JMPR[]', o);\n\n    // A jump by 1 would do nothing.\n    state.ip += o - 1;\n}\n\n// SCVTCI[] Set Control Value Table Cut-In\n// 0x1D\nfunction SCVTCI(state) {\n    const n = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SCVTCI[]', n);\n\n    state.cvCutIn = n / 0x40;\n}\n\n// DUP[] DUPlicate top stack element\n// 0x20\nfunction DUP(state) {\n    const stack = state.stack;\n\n    if (exports.DEBUG) console.log(state.step, 'DUP[]');\n\n    stack.push(stack[stack.length - 1]);\n}\n\n// POP[] POP top stack element\n// 0x21\nfunction POP(state) {\n    if (exports.DEBUG) console.log(state.step, 'POP[]');\n\n    state.stack.pop();\n}\n\n// CLEAR[] CLEAR the stack\n// 0x22\nfunction CLEAR(state) {\n    if (exports.DEBUG) console.log(state.step, 'CLEAR[]');\n\n    state.stack.length = 0;\n}\n\n// SWAP[] SWAP the top two elements on the stack\n// 0x23\nfunction SWAP(state) {\n    const stack = state.stack;\n\n    const a = stack.pop();\n    const b = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SWAP[]');\n\n    stack.push(a);\n    stack.push(b);\n}\n\n// DEPTH[] DEPTH of the stack\n// 0x24\nfunction DEPTH(state) {\n    const stack = state.stack;\n\n    if (exports.DEBUG) console.log(state.step, 'DEPTH[]');\n\n    stack.push(stack.length);\n}\n\n// LOOPCALL[] LOOPCALL function\n// 0x2A\nfunction LOOPCALL(state) {\n    const stack = state.stack;\n    const fn = stack.pop();\n    const c = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'LOOPCALL[]', fn, c);\n\n    // saves callers program\n    const cip = state.ip;\n    const cprog = state.prog;\n\n    state.prog = state.funcs[fn];\n\n    // executes the function\n    for (let i = 0; i < c; i++) {\n        exec(state);\n\n        if (exports.DEBUG) console.log(\n            ++state.step,\n            i + 1 < c ? 'next loopcall' : 'done loopcall',\n            i\n        );\n    }\n\n    // restores the callers program\n    state.ip = cip;\n    state.prog = cprog;\n}\n\n// CALL[] CALL function\n// 0x2B\nfunction CALL(state) {\n    const fn = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'CALL[]', fn);\n\n    // saves callers program\n    const cip = state.ip;\n    const cprog = state.prog;\n\n    state.prog = state.funcs[fn];\n\n    // executes the function\n    exec(state);\n\n    // restores the callers program\n    state.ip = cip;\n    state.prog = cprog;\n\n    if (exports.DEBUG) console.log(++state.step, 'returning from', fn);\n}\n\n// CINDEX[] Copy the INDEXed element to the top of the stack\n// 0x25\nfunction CINDEX(state) {\n    const stack = state.stack;\n    const k = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'CINDEX[]', k);\n\n    // In case of k == 1, it copies the last element after popping\n    // thus stack.length - k.\n    stack.push(stack[stack.length - k]);\n}\n\n// MINDEX[] Move the INDEXed element to the top of the stack\n// 0x26\nfunction MINDEX(state) {\n    const stack = state.stack;\n    const k = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'MINDEX[]', k);\n\n    stack.push(stack.splice(stack.length - k, 1)[0]);\n}\n\n// FDEF[] Function DEFinition\n// 0x2C\nfunction FDEF(state) {\n    if (state.env !== 'fpgm') throw new Error('FDEF not allowed here');\n    const stack = state.stack;\n    const prog = state.prog;\n    let ip = state.ip;\n\n    const fn = stack.pop();\n    const ipBegin = ip;\n\n    if (exports.DEBUG) console.log(state.step, 'FDEF[]', fn);\n\n    while (prog[++ip] !== 0x2D);\n\n    state.ip = ip;\n    state.funcs[fn] = prog.slice(ipBegin + 1, ip);\n}\n\n// MDAP[a] Move Direct Absolute Point\n// 0x2E-0x2F\nfunction MDAP(round, state) {\n    const pi = state.stack.pop();\n    const p = state.z0[pi];\n    const fv = state.fv;\n    const pv = state.pv;\n\n    if (exports.DEBUG) console.log(state.step, 'MDAP[' + round + ']', pi);\n\n    let d = pv.distance(p, HPZero);\n\n    if (round) d = state.round(d);\n\n    fv.setRelative(p, HPZero, d, pv);\n    fv.touch(p);\n\n    state.rp0 = state.rp1 = pi;\n}\n\n// IUP[a] Interpolate Untouched Points through the outline\n// 0x30\nfunction IUP(v, state) {\n    const z2 = state.z2;\n    const pLen = z2.length - 2;\n    let cp;\n    let pp;\n    let np;\n\n    if (exports.DEBUG) console.log(state.step, 'IUP[' + v.axis + ']');\n\n    for (let i = 0; i < pLen; i++) {\n        cp = z2[i]; // current point\n\n        // if this point has been touched go on\n        if (v.touched(cp)) continue;\n\n        pp = cp.prevTouched(v);\n\n        // no point on the contour has been touched?\n        if (pp === cp) continue;\n\n        np = cp.nextTouched(v);\n\n        if (pp === np) {\n            // only one point on the contour has been touched\n            // so simply moves the point like that\n\n            v.setRelative(cp, cp, v.distance(pp, pp, false, true), v, true);\n        }\n\n        v.interpolate(cp, pp, np, v);\n    }\n}\n\n// SHP[] SHift Point using reference point\n// 0x32-0x33\nfunction SHP(a, state) {\n    const stack = state.stack;\n    const rpi = a ? state.rp1 : state.rp2;\n    const rp = (a ? state.z0 : state.z1)[rpi];\n    const fv = state.fv;\n    const pv = state.pv;\n    let loop = state.loop;\n    const z2 = state.z2;\n\n    while (loop--)\n    {\n        const pi = stack.pop();\n        const p = z2[pi];\n\n        const d = pv.distance(rp, rp, false, true);\n        fv.setRelative(p, p, d, pv);\n        fv.touch(p);\n\n        if (exports.DEBUG) {\n            console.log(\n                state.step,\n                (state.loop > 1 ?\n                   'loop ' + (state.loop - loop) + ': ' :\n                   ''\n                ) +\n                'SHP[' + (a ? 'rp1' : 'rp2') + ']', pi\n            );\n        }\n    }\n\n    state.loop = 1;\n}\n\n// SHC[] SHift Contour using reference point\n// 0x36-0x37\nfunction SHC(a, state) {\n    const stack = state.stack;\n    const rpi = a ? state.rp1 : state.rp2;\n    const rp = (a ? state.z0 : state.z1)[rpi];\n    const fv = state.fv;\n    const pv = state.pv;\n    const ci = stack.pop();\n    const sp = state.z2[state.contours[ci]];\n    let p = sp;\n\n    if (exports.DEBUG) console.log(state.step, 'SHC[' + a + ']', ci);\n\n    const d = pv.distance(rp, rp, false, true);\n\n    do {\n        if (p !== rp) fv.setRelative(p, p, d, pv);\n        p = p.nextPointOnContour;\n    } while (p !== sp);\n}\n\n// SHZ[] SHift Zone using reference point\n// 0x36-0x37\nfunction SHZ(a, state) {\n    const stack = state.stack;\n    const rpi = a ? state.rp1 : state.rp2;\n    const rp = (a ? state.z0 : state.z1)[rpi];\n    const fv = state.fv;\n    const pv = state.pv;\n\n    const e = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SHZ[' + a + ']', e);\n\n    let z;\n    switch (e) {\n        case 0 : z = state.tZone; break;\n        case 1 : z = state.gZone; break;\n        default : throw new Error('Invalid zone');\n    }\n\n    let p;\n    const d = pv.distance(rp, rp, false, true);\n    const pLen = z.length - 2;\n    for (let i = 0; i < pLen; i++)\n    {\n        p = z[i];\n        fv.setRelative(p, p, d, pv);\n        //if (p !== rp) fv.setRelative(p, p, d, pv);\n    }\n}\n\n// SHPIX[] SHift point by a PIXel amount\n// 0x38\nfunction SHPIX(state) {\n    const stack = state.stack;\n    let loop = state.loop;\n    const fv = state.fv;\n    const d = stack.pop() / 0x40;\n    const z2 = state.z2;\n\n    while (loop--) {\n        const pi = stack.pop();\n        const p = z2[pi];\n\n        if (exports.DEBUG) {\n            console.log(\n                state.step,\n                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n                'SHPIX[]', pi, d\n            );\n        }\n\n        fv.setRelative(p, p, d);\n        fv.touch(p);\n    }\n\n    state.loop = 1;\n}\n\n// IP[] Interpolate Point\n// 0x39\nfunction IP(state) {\n    const stack = state.stack;\n    const rp1i = state.rp1;\n    const rp2i = state.rp2;\n    let loop = state.loop;\n    const rp1 = state.z0[rp1i];\n    const rp2 = state.z1[rp2i];\n    const fv = state.fv;\n    const pv = state.dpv;\n    const z2 = state.z2;\n\n    while (loop--) {\n        const pi = stack.pop();\n        const p = z2[pi];\n\n        if (exports.DEBUG) {\n            console.log(\n                state.step,\n                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n                'IP[]', pi, rp1i, '<->', rp2i\n            );\n        }\n\n        fv.interpolate(p, rp1, rp2, pv);\n\n        fv.touch(p);\n    }\n\n    state.loop = 1;\n}\n\n// MSIRP[a] Move Stack Indirect Relative Point\n// 0x3A-0x3B\nfunction MSIRP(a, state) {\n    const stack = state.stack;\n    const d = stack.pop() / 64;\n    const pi = stack.pop();\n    const p = state.z1[pi];\n    const rp0 = state.z0[state.rp0];\n    const fv = state.fv;\n    const pv = state.pv;\n\n    fv.setRelative(p, rp0, d, pv);\n    fv.touch(p);\n\n    if (exports.DEBUG) console.log(state.step, 'MSIRP[' + a + ']', d, pi);\n\n    state.rp1 = state.rp0;\n    state.rp2 = pi;\n    if (a) state.rp0 = pi;\n}\n\n// ALIGNRP[] Align to reference point.\n// 0x3C\nfunction ALIGNRP(state) {\n    const stack = state.stack;\n    const rp0i = state.rp0;\n    const rp0 = state.z0[rp0i];\n    let loop = state.loop;\n    const fv = state.fv;\n    const pv = state.pv;\n    const z1 = state.z1;\n\n    while (loop--) {\n        const pi = stack.pop();\n        const p = z1[pi];\n\n        if (exports.DEBUG) {\n            console.log(\n                state.step,\n                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n                'ALIGNRP[]', pi\n            );\n        }\n\n        fv.setRelative(p, rp0, 0, pv);\n        fv.touch(p);\n    }\n\n    state.loop = 1;\n}\n\n// RTG[] Round To Double Grid\n// 0x3D\nfunction RTDG(state) {\n    if (exports.DEBUG) console.log(state.step, 'RTDG[]');\n\n    state.round = roundToDoubleGrid;\n}\n\n// MIAP[a] Move Indirect Absolute Point\n// 0x3E-0x3F\nfunction MIAP(round, state) {\n    const stack = state.stack;\n    const n = stack.pop();\n    const pi = stack.pop();\n    const p = state.z0[pi];\n    const fv = state.fv;\n    const pv = state.pv;\n    let cv = state.cvt[n];\n\n    if (exports.DEBUG) {\n        console.log(\n            state.step,\n            'MIAP[' + round + ']',\n            n, '(', cv, ')', pi\n        );\n    }\n\n    let d = pv.distance(p, HPZero);\n\n    if (round) {\n        if (Math.abs(d - cv) < state.cvCutIn) d = cv;\n\n        d = state.round(d);\n    }\n\n    fv.setRelative(p, HPZero, d, pv);\n\n    if (state.zp0 === 0) {\n        p.xo = p.x;\n        p.yo = p.y;\n    }\n\n    fv.touch(p);\n\n    state.rp0 = state.rp1 = pi;\n}\n\n// NPUSB[] PUSH N Bytes\n// 0x40\nfunction NPUSHB(state) {\n    const prog = state.prog;\n    let ip = state.ip;\n    const stack = state.stack;\n\n    const n = prog[++ip];\n\n    if (exports.DEBUG) console.log(state.step, 'NPUSHB[]', n);\n\n    for (let i = 0; i < n; i++) stack.push(prog[++ip]);\n\n    state.ip = ip;\n}\n\n// NPUSHW[] PUSH N Words\n// 0x41\nfunction NPUSHW(state) {\n    let ip = state.ip;\n    const prog = state.prog;\n    const stack = state.stack;\n    const n = prog[++ip];\n\n    if (exports.DEBUG) console.log(state.step, 'NPUSHW[]', n);\n\n    for (let i = 0; i < n; i++) {\n        let w = (prog[++ip] << 8) | prog[++ip];\n        if (w & 0x8000) w = -((w ^ 0xffff) + 1);\n        stack.push(w);\n    }\n\n    state.ip = ip;\n}\n\n// WS[] Write Store\n// 0x42\nfunction WS(state) {\n    const stack = state.stack;\n    let store = state.store;\n\n    if (!store) store = state.store = [];\n\n    const v = stack.pop();\n    const l = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'WS', v, l);\n\n    store[l] = v;\n}\n\n// RS[] Read Store\n// 0x43\nfunction RS(state) {\n    const stack = state.stack;\n    const store = state.store;\n\n    const l = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'RS', l);\n\n    const v = (store && store[l]) || 0;\n\n    stack.push(v);\n}\n\n// WCVTP[] Write Control Value Table in Pixel units\n// 0x44\nfunction WCVTP(state) {\n    const stack = state.stack;\n\n    const v = stack.pop();\n    const l = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'WCVTP', v, l);\n\n    state.cvt[l] = v / 0x40;\n}\n\n// RCVT[] Read Control Value Table entry\n// 0x45\nfunction RCVT(state) {\n    const stack = state.stack;\n    const cvte = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'RCVT', cvte);\n\n    stack.push(state.cvt[cvte] * 0x40);\n}\n\n// GC[] Get Coordinate projected onto the projection vector\n// 0x46-0x47\nfunction GC(a, state) {\n    const stack = state.stack;\n    const pi = stack.pop();\n    const p = state.z2[pi];\n\n    if (exports.DEBUG) console.log(state.step, 'GC[' + a + ']', pi);\n\n    stack.push(state.dpv.distance(p, HPZero, a, false) * 0x40);\n}\n\n// MD[a] Measure Distance\n// 0x49-0x4A\nfunction MD(a, state) {\n    const stack = state.stack;\n    const pi2 = stack.pop();\n    const pi1 = stack.pop();\n    const p2 = state.z1[pi2];\n    const p1 = state.z0[pi1];\n    const d = state.dpv.distance(p1, p2, a, a);\n\n    if (exports.DEBUG) console.log(state.step, 'MD[' + a + ']', pi2, pi1, '->', d);\n\n    state.stack.push(Math.round(d * 64));\n}\n\n// MPPEM[] Measure Pixels Per EM\n// 0x4B\nfunction MPPEM(state) {\n    if (exports.DEBUG) console.log(state.step, 'MPPEM[]');\n    state.stack.push(state.ppem);\n}\n\n// FLIPON[] set the auto FLIP Boolean to ON\n// 0x4D\nfunction FLIPON(state) {\n    if (exports.DEBUG) console.log(state.step, 'FLIPON[]');\n    state.autoFlip = true;\n}\n\n// LT[] Less Than\n// 0x50\nfunction LT(state) {\n    const stack = state.stack;\n    const e2 = stack.pop();\n    const e1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'LT[]', e2, e1);\n\n    stack.push(e1 < e2 ? 1 : 0);\n}\n\n// LTEQ[] Less Than or EQual\n// 0x53\nfunction LTEQ(state) {\n    const stack = state.stack;\n    const e2 = stack.pop();\n    const e1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'LTEQ[]', e2, e1);\n\n    stack.push(e1 <= e2 ? 1 : 0);\n}\n\n// GTEQ[] Greater Than\n// 0x52\nfunction GT(state) {\n    const stack = state.stack;\n    const e2 = stack.pop();\n    const e1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'GT[]', e2, e1);\n\n    stack.push(e1 > e2 ? 1 : 0);\n}\n\n// GTEQ[] Greater Than or EQual\n// 0x53\nfunction GTEQ(state) {\n    const stack = state.stack;\n    const e2 = stack.pop();\n    const e1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'GTEQ[]', e2, e1);\n\n    stack.push(e1 >= e2 ? 1 : 0);\n}\n\n// EQ[] EQual\n// 0x54\nfunction EQ(state) {\n    const stack = state.stack;\n    const e2 = stack.pop();\n    const e1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'EQ[]', e2, e1);\n\n    stack.push(e2 === e1 ? 1 : 0);\n}\n\n// NEQ[] Not EQual\n// 0x55\nfunction NEQ(state) {\n    const stack = state.stack;\n    const e2 = stack.pop();\n    const e1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'NEQ[]', e2, e1);\n\n    stack.push(e2 !== e1 ? 1 : 0);\n}\n\n// ODD[] ODD\n// 0x56\nfunction ODD(state) {\n    const stack = state.stack;\n    const n = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'ODD[]', n);\n\n    stack.push(Math.trunc(n) % 2 ? 1 : 0);\n}\n\n// EVEN[] EVEN\n// 0x57\nfunction EVEN(state) {\n    const stack = state.stack;\n    const n = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'EVEN[]', n);\n\n    stack.push(Math.trunc(n) % 2 ? 0 : 1);\n}\n\n// IF[] IF test\n// 0x58\nfunction IF(state) {\n    let test = state.stack.pop();\n    let ins;\n\n    if (exports.DEBUG) console.log(state.step, 'IF[]', test);\n\n    // if test is true it just continues\n    // if not the ip is skipped until matching ELSE or EIF\n    if (!test) {\n        skip(state, true);\n\n        if (exports.DEBUG) console.log(state.step, ins === 0x1B ? 'ELSE[]' : 'EIF[]');\n    }\n}\n\n// EIF[] End IF\n// 0x59\nfunction EIF(state) {\n    // this can be reached normally when\n    // executing an else branch.\n    // -> just ignore it\n\n    if (exports.DEBUG) console.log(state.step, 'EIF[]');\n}\n\n// AND[] logical AND\n// 0x5A\nfunction AND(state) {\n    const stack = state.stack;\n    const e2 = stack.pop();\n    const e1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'AND[]', e2, e1);\n\n    stack.push(e2 && e1 ? 1 : 0);\n}\n\n// OR[] logical OR\n// 0x5B\nfunction OR(state) {\n    const stack = state.stack;\n    const e2 = stack.pop();\n    const e1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'OR[]', e2, e1);\n\n    stack.push(e2 || e1 ? 1 : 0);\n}\n\n// NOT[] logical NOT\n// 0x5C\nfunction NOT(state) {\n    const stack = state.stack;\n    const e = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'NOT[]', e);\n\n    stack.push(e ? 0 : 1);\n}\n\n// DELTAP1[] DELTA exception P1\n// DELTAP2[] DELTA exception P2\n// DELTAP3[] DELTA exception P3\n// 0x5D, 0x71, 0x72\nfunction DELTAP123(b, state) {\n    const stack = state.stack;\n    const n = stack.pop();\n    const fv = state.fv;\n    const pv = state.pv;\n    const ppem = state.ppem;\n    const base = state.deltaBase + (b - 1) * 16;\n    const ds = state.deltaShift;\n    const z0 = state.z0;\n\n    if (exports.DEBUG) console.log(state.step, 'DELTAP[' + b + ']', n, stack);\n\n    for (let i = 0; i < n; i++) {\n        const pi = stack.pop();\n        const arg = stack.pop();\n        const appem = base + ((arg & 0xF0) >> 4);\n        if (appem !== ppem) continue;\n\n        let mag = (arg & 0x0F) - 8;\n        if (mag >= 0) mag++;\n        if (exports.DEBUG) console.log(state.step, 'DELTAPFIX', pi, 'by', mag * ds);\n\n        const p = z0[pi];\n        fv.setRelative(p, p, mag * ds, pv);\n    }\n}\n\n// SDB[] Set Delta Base in the graphics state\n// 0x5E\nfunction SDB(state) {\n    const stack = state.stack;\n    const n = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SDB[]', n);\n\n    state.deltaBase = n;\n}\n\n// SDS[] Set Delta Shift in the graphics state\n// 0x5F\nfunction SDS(state) {\n    const stack = state.stack;\n    const n = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SDS[]', n);\n\n    state.deltaShift = Math.pow(0.5, n);\n}\n\n// ADD[] ADD\n// 0x60\nfunction ADD(state) {\n    const stack = state.stack;\n    const n2 = stack.pop();\n    const n1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'ADD[]', n2, n1);\n\n    stack.push(n1 + n2);\n}\n\n// SUB[] SUB\n// 0x61\nfunction SUB(state) {\n    const stack = state.stack;\n    const n2 = stack.pop();\n    const n1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SUB[]', n2, n1);\n\n    stack.push(n1 - n2);\n}\n\n// DIV[] DIV\n// 0x62\nfunction DIV(state) {\n    const stack = state.stack;\n    const n2 = stack.pop();\n    const n1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'DIV[]', n2, n1);\n\n    stack.push(n1 * 64 / n2);\n}\n\n// MUL[] MUL\n// 0x63\nfunction MUL(state) {\n    const stack = state.stack;\n    const n2 = stack.pop();\n    const n1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'MUL[]', n2, n1);\n\n    stack.push(n1 * n2 / 64);\n}\n\n// ABS[] ABSolute value\n// 0x64\nfunction ABS(state) {\n    const stack = state.stack;\n    const n = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'ABS[]', n);\n\n    stack.push(Math.abs(n));\n}\n\n// NEG[] NEGate\n// 0x65\nfunction NEG(state) {\n    const stack = state.stack;\n    let n = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'NEG[]', n);\n\n    stack.push(-n);\n}\n\n// FLOOR[] FLOOR\n// 0x66\nfunction FLOOR(state) {\n    const stack = state.stack;\n    const n = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'FLOOR[]', n);\n\n    stack.push(Math.floor(n / 0x40) * 0x40);\n}\n\n// CEILING[] CEILING\n// 0x67\nfunction CEILING(state) {\n    const stack = state.stack;\n    const n = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'CEILING[]', n);\n\n    stack.push(Math.ceil(n / 0x40) * 0x40);\n}\n\n// ROUND[ab] ROUND value\n// 0x68-0x6B\nfunction ROUND(dt, state) {\n    const stack = state.stack;\n    const n = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'ROUND[]');\n\n    stack.push(state.round(n / 0x40) * 0x40);\n}\n\n// WCVTF[] Write Control Value Table in Funits\n// 0x70\nfunction WCVTF(state) {\n    const stack = state.stack;\n    const v = stack.pop();\n    const l = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'WCVTF[]', v, l);\n\n    state.cvt[l] = v * state.ppem / state.font.unitsPerEm;\n}\n\n// DELTAC1[] DELTA exception C1\n// DELTAC2[] DELTA exception C2\n// DELTAC3[] DELTA exception C3\n// 0x73, 0x74, 0x75\nfunction DELTAC123(b, state) {\n    const stack = state.stack;\n    const n = stack.pop();\n    const ppem = state.ppem;\n    const base = state.deltaBase + (b - 1) * 16;\n    const ds = state.deltaShift;\n\n    if (exports.DEBUG) console.log(state.step, 'DELTAC[' + b + ']', n, stack);\n\n    for (let i = 0; i < n; i++) {\n        const c = stack.pop();\n        const arg = stack.pop();\n        const appem = base + ((arg & 0xF0) >> 4);\n        if (appem !== ppem) continue;\n\n        let mag = (arg & 0x0F) - 8;\n        if (mag >= 0) mag++;\n\n        const delta = mag * ds;\n\n        if (exports.DEBUG) console.log(state.step, 'DELTACFIX', c, 'by', delta);\n\n        state.cvt[c] += delta;\n    }\n}\n\n// SROUND[] Super ROUND\n// 0x76\nfunction SROUND(state) {\n    let n = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'SROUND[]', n);\n\n    state.round = roundSuper;\n\n    let period;\n\n    switch (n & 0xC0) {\n        case 0x00:\n            period = 0.5;\n            break;\n        case 0x40:\n            period = 1;\n            break;\n        case 0x80:\n            period = 2;\n            break;\n        default:\n            throw new Error('invalid SROUND value');\n    }\n\n    state.srPeriod = period;\n\n    switch (n & 0x30) {\n        case 0x00:\n            state.srPhase = 0;\n            break;\n        case 0x10:\n            state.srPhase = 0.25 * period;\n            break;\n        case 0x20:\n            state.srPhase = 0.5  * period;\n            break;\n        case 0x30:\n            state.srPhase = 0.75 * period;\n            break;\n        default: throw new Error('invalid SROUND value');\n    }\n\n    n &= 0x0F;\n\n    if (n === 0) state.srThreshold = 0;\n    else state.srThreshold = (n / 8 - 0.5) * period;\n}\n\n// S45ROUND[] Super ROUND 45 degrees\n// 0x77\nfunction S45ROUND(state) {\n    let n = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'S45ROUND[]', n);\n\n    state.round = roundSuper;\n\n    let period;\n\n    switch (n & 0xC0) {\n        case 0x00:\n            period = Math.sqrt(2) / 2;\n            break;\n        case 0x40:\n            period = Math.sqrt(2);\n            break;\n        case 0x80:\n            period = 2 * Math.sqrt(2);\n            break;\n        default:\n            throw new Error('invalid S45ROUND value');\n    }\n\n    state.srPeriod = period;\n\n    switch (n & 0x30) {\n        case 0x00:\n            state.srPhase = 0;\n            break;\n        case 0x10:\n            state.srPhase = 0.25 * period;\n            break;\n        case 0x20:\n            state.srPhase = 0.5  * period;\n            break;\n        case 0x30:\n            state.srPhase = 0.75 * period;\n            break;\n        default:\n            throw new Error('invalid S45ROUND value');\n    }\n\n    n &= 0x0F;\n\n    if (n === 0) state.srThreshold = 0;\n    else state.srThreshold = (n / 8 - 0.5) * period;\n}\n\n// ROFF[] Round Off\n// 0x7A\nfunction ROFF(state) {\n    if (exports.DEBUG) console.log(state.step, 'ROFF[]');\n\n    state.round = roundOff;\n}\n\n// RUTG[] Round Up To Grid\n// 0x7C\nfunction RUTG(state) {\n    if (exports.DEBUG) console.log(state.step, 'RUTG[]');\n\n    state.round = roundUpToGrid;\n}\n\n// RDTG[] Round Down To Grid\n// 0x7D\nfunction RDTG(state) {\n    if (exports.DEBUG) console.log(state.step, 'RDTG[]');\n\n    state.round = roundDownToGrid;\n}\n\n// SCANCTRL[] SCAN conversion ConTRoL\n// 0x85\nfunction SCANCTRL(state) {\n    const n = state.stack.pop();\n\n    // ignored by opentype.js\n\n    if (exports.DEBUG) console.log(state.step, 'SCANCTRL[]', n);\n}\n\n// SDPVTL[a] Set Dual Projection Vector To Line\n// 0x86-0x87\nfunction SDPVTL(a, state) {\n    const stack = state.stack;\n    const p2i = stack.pop();\n    const p1i = stack.pop();\n    const p2 = state.z2[p2i];\n    const p1 = state.z1[p1i];\n\n    if (exports.DEBUG) console.log(state.step, 'SDPVTL[' + a + ']', p2i, p1i);\n\n    let dx;\n    let dy;\n\n    if (!a) {\n        dx = p1.x - p2.x;\n        dy = p1.y - p2.y;\n    } else {\n        dx = p2.y - p1.y;\n        dy = p1.x - p2.x;\n    }\n\n    state.dpv = getUnitVector(dx, dy);\n}\n\n// GETINFO[] GET INFOrmation\n// 0x88\nfunction GETINFO(state) {\n    const stack = state.stack;\n    const sel = stack.pop();\n    let r = 0;\n\n    if (exports.DEBUG) console.log(state.step, 'GETINFO[]', sel);\n\n    // v35 as in no subpixel hinting\n    if (sel & 0x01) r = 35;\n\n    // TODO rotation and stretch currently not supported\n    // and thus those GETINFO are always 0.\n\n    // opentype.js is always gray scaling\n    if (sel & 0x20) r |= 0x1000;\n\n    stack.push(r);\n}\n\n// ROLL[] ROLL the top three stack elements\n// 0x8A\nfunction ROLL(state) {\n    const stack = state.stack;\n    const a = stack.pop();\n    const b = stack.pop();\n    const c = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'ROLL[]');\n\n    stack.push(b);\n    stack.push(a);\n    stack.push(c);\n}\n\n// MAX[] MAXimum of top two stack elements\n// 0x8B\nfunction MAX(state) {\n    const stack = state.stack;\n    const e2 = stack.pop();\n    const e1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'MAX[]', e2, e1);\n\n    stack.push(Math.max(e1, e2));\n}\n\n// MIN[] MINimum of top two stack elements\n// 0x8C\nfunction MIN(state) {\n    const stack = state.stack;\n    const e2 = stack.pop();\n    const e1 = stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'MIN[]', e2, e1);\n\n    stack.push(Math.min(e1, e2));\n}\n\n// SCANTYPE[] SCANTYPE\n// 0x8D\nfunction SCANTYPE(state) {\n    const n = state.stack.pop();\n    // ignored by opentype.js\n    if (exports.DEBUG) console.log(state.step, 'SCANTYPE[]', n);\n}\n\n// INSTCTRL[] INSTCTRL\n// 0x8D\nfunction INSTCTRL(state) {\n    const s = state.stack.pop();\n    let v = state.stack.pop();\n\n    if (exports.DEBUG) console.log(state.step, 'INSTCTRL[]', s, v);\n\n    switch (s) {\n        case 1 : state.inhibitGridFit = !!v; return;\n        case 2 : state.ignoreCvt = !!v; return;\n        default: throw new Error('invalid INSTCTRL[] selector');\n    }\n}\n\n// PUSHB[abc] PUSH Bytes\n// 0xB0-0xB7\nfunction PUSHB(n, state) {\n    const stack = state.stack;\n    const prog = state.prog;\n    let ip = state.ip;\n\n    if (exports.DEBUG) console.log(state.step, 'PUSHB[' + n + ']');\n\n    for (let i = 0; i < n; i++) stack.push(prog[++ip]);\n\n    state.ip = ip;\n}\n\n// PUSHW[abc] PUSH Words\n// 0xB8-0xBF\nfunction PUSHW(n, state) {\n    let ip = state.ip;\n    const prog = state.prog;\n    const stack = state.stack;\n\n    if (exports.DEBUG) console.log(state.ip, 'PUSHW[' + n + ']');\n\n    for (let i = 0; i < n; i++) {\n        let w = (prog[++ip] << 8) | prog[++ip];\n        if (w & 0x8000) w = -((w ^ 0xffff) + 1);\n        stack.push(w);\n    }\n\n    state.ip = ip;\n}\n\n// MDRP[abcde] Move Direct Relative Point\n// 0xD0-0xEF\n// (if indirect is 0)\n//\n// and\n//\n// MIRP[abcde] Move Indirect Relative Point\n// 0xE0-0xFF\n// (if indirect is 1)\n\nfunction MDRP_MIRP(indirect, setRp0, keepD, ro, dt, state) {\n    const stack = state.stack;\n    const cvte = indirect && stack.pop();\n    const pi = stack.pop();\n    const rp0i = state.rp0;\n    const rp = state.z0[rp0i];\n    const p = state.z1[pi];\n\n    const md = state.minDis;\n    const fv = state.fv;\n    const pv = state.dpv;\n    let od; // original distance\n    let d; // moving distance\n    let sign; // sign of distance\n    let cv;\n\n    d = od = pv.distance(p, rp, true, true);\n    sign = d >= 0 ? 1 : -1; // Math.sign would be 0 in case of 0\n\n    // TODO consider autoFlip\n    d = Math.abs(d);\n\n    if (indirect) {\n        cv = state.cvt[cvte];\n\n        if (ro && Math.abs(d - cv) < state.cvCutIn) d = cv;\n    }\n\n    if (keepD && d < md) d = md;\n\n    if (ro) d = state.round(d);\n\n    fv.setRelative(p, rp, sign * d, pv);\n    fv.touch(p);\n\n    if (exports.DEBUG) {\n        console.log(\n            state.step,\n            (indirect ? 'MIRP[' : 'MDRP[') +\n            (setRp0 ? 'M' : 'm') +\n            (keepD ? '>' : '_') +\n            (ro ? 'R' : '_') +\n            (dt === 0 ? 'Gr' : (dt === 1 ? 'Bl' : (dt === 2 ? 'Wh' : ''))) +\n            ']',\n            indirect ?\n                cvte + '(' + state.cvt[cvte] + ',' +  cv + ')' :\n                '',\n            pi,\n            '(d =', od, '->', sign * d, ')'\n        );\n    }\n\n    state.rp1 = state.rp0;\n    state.rp2 = pi;\n    if (setRp0) state.rp0 = pi;\n}\n\n/*\n* The instruction table.\n*/\ninstructionTable = [\n    /* 0x00 */ SVTCA.bind(undefined, yUnitVector),\n    /* 0x01 */ SVTCA.bind(undefined, xUnitVector),\n    /* 0x02 */ SPVTCA.bind(undefined, yUnitVector),\n    /* 0x03 */ SPVTCA.bind(undefined, xUnitVector),\n    /* 0x04 */ SFVTCA.bind(undefined, yUnitVector),\n    /* 0x05 */ SFVTCA.bind(undefined, xUnitVector),\n    /* 0x06 */ SPVTL.bind(undefined, 0),\n    /* 0x07 */ SPVTL.bind(undefined, 1),\n    /* 0x08 */ SFVTL.bind(undefined, 0),\n    /* 0x09 */ SFVTL.bind(undefined, 1),\n    /* 0x0A */ SPVFS,\n    /* 0x0B */ SFVFS,\n    /* 0x0C */ GPV,\n    /* 0x0D */ GFV,\n    /* 0x0E */ SFVTPV,\n    /* 0x0F */ ISECT,\n    /* 0x10 */ SRP0,\n    /* 0x11 */ SRP1,\n    /* 0x12 */ SRP2,\n    /* 0x13 */ SZP0,\n    /* 0x14 */ SZP1,\n    /* 0x15 */ SZP2,\n    /* 0x16 */ SZPS,\n    /* 0x17 */ SLOOP,\n    /* 0x18 */ RTG,\n    /* 0x19 */ RTHG,\n    /* 0x1A */ SMD,\n    /* 0x1B */ ELSE,\n    /* 0x1C */ JMPR,\n    /* 0x1D */ SCVTCI,\n    /* 0x1E */ undefined,   // TODO SSWCI\n    /* 0x1F */ undefined,   // TODO SSW\n    /* 0x20 */ DUP,\n    /* 0x21 */ POP,\n    /* 0x22 */ CLEAR,\n    /* 0x23 */ SWAP,\n    /* 0x24 */ DEPTH,\n    /* 0x25 */ CINDEX,\n    /* 0x26 */ MINDEX,\n    /* 0x27 */ undefined,   // TODO ALIGNPTS\n    /* 0x28 */ undefined,\n    /* 0x29 */ undefined,   // TODO UTP\n    /* 0x2A */ LOOPCALL,\n    /* 0x2B */ CALL,\n    /* 0x2C */ FDEF,\n    /* 0x2D */ undefined,   // ENDF (eaten by FDEF)\n    /* 0x2E */ MDAP.bind(undefined, 0),\n    /* 0x2F */ MDAP.bind(undefined, 1),\n    /* 0x30 */ IUP.bind(undefined, yUnitVector),\n    /* 0x31 */ IUP.bind(undefined, xUnitVector),\n    /* 0x32 */ SHP.bind(undefined, 0),\n    /* 0x33 */ SHP.bind(undefined, 1),\n    /* 0x34 */ SHC.bind(undefined, 0),\n    /* 0x35 */ SHC.bind(undefined, 1),\n    /* 0x36 */ SHZ.bind(undefined, 0),\n    /* 0x37 */ SHZ.bind(undefined, 1),\n    /* 0x38 */ SHPIX,\n    /* 0x39 */ IP,\n    /* 0x3A */ MSIRP.bind(undefined, 0),\n    /* 0x3B */ MSIRP.bind(undefined, 1),\n    /* 0x3C */ ALIGNRP,\n    /* 0x3D */ RTDG,\n    /* 0x3E */ MIAP.bind(undefined, 0),\n    /* 0x3F */ MIAP.bind(undefined, 1),\n    /* 0x40 */ NPUSHB,\n    /* 0x41 */ NPUSHW,\n    /* 0x42 */ WS,\n    /* 0x43 */ RS,\n    /* 0x44 */ WCVTP,\n    /* 0x45 */ RCVT,\n    /* 0x46 */ GC.bind(undefined, 0),\n    /* 0x47 */ GC.bind(undefined, 1),\n    /* 0x48 */ undefined,   // TODO SCFS\n    /* 0x49 */ MD.bind(undefined, 0),\n    /* 0x4A */ MD.bind(undefined, 1),\n    /* 0x4B */ MPPEM,\n    /* 0x4C */ undefined,   // TODO MPS\n    /* 0x4D */ FLIPON,\n    /* 0x4E */ undefined,   // TODO FLIPOFF\n    /* 0x4F */ undefined,   // TODO DEBUG\n    /* 0x50 */ LT,\n    /* 0x51 */ LTEQ,\n    /* 0x52 */ GT,\n    /* 0x53 */ GTEQ,\n    /* 0x54 */ EQ,\n    /* 0x55 */ NEQ,\n    /* 0x56 */ ODD,\n    /* 0x57 */ EVEN,\n    /* 0x58 */ IF,\n    /* 0x59 */ EIF,\n    /* 0x5A */ AND,\n    /* 0x5B */ OR,\n    /* 0x5C */ NOT,\n    /* 0x5D */ DELTAP123.bind(undefined, 1),\n    /* 0x5E */ SDB,\n    /* 0x5F */ SDS,\n    /* 0x60 */ ADD,\n    /* 0x61 */ SUB,\n    /* 0x62 */ DIV,\n    /* 0x63 */ MUL,\n    /* 0x64 */ ABS,\n    /* 0x65 */ NEG,\n    /* 0x66 */ FLOOR,\n    /* 0x67 */ CEILING,\n    /* 0x68 */ ROUND.bind(undefined, 0),\n    /* 0x69 */ ROUND.bind(undefined, 1),\n    /* 0x6A */ ROUND.bind(undefined, 2),\n    /* 0x6B */ ROUND.bind(undefined, 3),\n    /* 0x6C */ undefined,   // TODO NROUND[ab]\n    /* 0x6D */ undefined,   // TODO NROUND[ab]\n    /* 0x6E */ undefined,   // TODO NROUND[ab]\n    /* 0x6F */ undefined,   // TODO NROUND[ab]\n    /* 0x70 */ WCVTF,\n    /* 0x71 */ DELTAP123.bind(undefined, 2),\n    /* 0x72 */ DELTAP123.bind(undefined, 3),\n    /* 0x73 */ DELTAC123.bind(undefined, 1),\n    /* 0x74 */ DELTAC123.bind(undefined, 2),\n    /* 0x75 */ DELTAC123.bind(undefined, 3),\n    /* 0x76 */ SROUND,\n    /* 0x77 */ S45ROUND,\n    /* 0x78 */ undefined,   // TODO JROT[]\n    /* 0x79 */ undefined,   // TODO JROF[]\n    /* 0x7A */ ROFF,\n    /* 0x7B */ undefined,\n    /* 0x7C */ RUTG,\n    /* 0x7D */ RDTG,\n    /* 0x7E */ POP, // actually SANGW, supposed to do only a pop though\n    /* 0x7F */ POP, // actually AA, supposed to do only a pop though\n    /* 0x80 */ undefined,   // TODO FLIPPT\n    /* 0x81 */ undefined,   // TODO FLIPRGON\n    /* 0x82 */ undefined,   // TODO FLIPRGOFF\n    /* 0x83 */ undefined,\n    /* 0x84 */ undefined,\n    /* 0x85 */ SCANCTRL,\n    /* 0x86 */ SDPVTL.bind(undefined, 0),\n    /* 0x87 */ SDPVTL.bind(undefined, 1),\n    /* 0x88 */ GETINFO,\n    /* 0x89 */ undefined,   // TODO IDEF\n    /* 0x8A */ ROLL,\n    /* 0x8B */ MAX,\n    /* 0x8C */ MIN,\n    /* 0x8D */ SCANTYPE,\n    /* 0x8E */ INSTCTRL,\n    /* 0x8F */ undefined,\n    /* 0x90 */ undefined,\n    /* 0x91 */ undefined,\n    /* 0x92 */ undefined,\n    /* 0x93 */ undefined,\n    /* 0x94 */ undefined,\n    /* 0x95 */ undefined,\n    /* 0x96 */ undefined,\n    /* 0x97 */ undefined,\n    /* 0x98 */ undefined,\n    /* 0x99 */ undefined,\n    /* 0x9A */ undefined,\n    /* 0x9B */ undefined,\n    /* 0x9C */ undefined,\n    /* 0x9D */ undefined,\n    /* 0x9E */ undefined,\n    /* 0x9F */ undefined,\n    /* 0xA0 */ undefined,\n    /* 0xA1 */ undefined,\n    /* 0xA2 */ undefined,\n    /* 0xA3 */ undefined,\n    /* 0xA4 */ undefined,\n    /* 0xA5 */ undefined,\n    /* 0xA6 */ undefined,\n    /* 0xA7 */ undefined,\n    /* 0xA8 */ undefined,\n    /* 0xA9 */ undefined,\n    /* 0xAA */ undefined,\n    /* 0xAB */ undefined,\n    /* 0xAC */ undefined,\n    /* 0xAD */ undefined,\n    /* 0xAE */ undefined,\n    /* 0xAF */ undefined,\n    /* 0xB0 */ PUSHB.bind(undefined, 1),\n    /* 0xB1 */ PUSHB.bind(undefined, 2),\n    /* 0xB2 */ PUSHB.bind(undefined, 3),\n    /* 0xB3 */ PUSHB.bind(undefined, 4),\n    /* 0xB4 */ PUSHB.bind(undefined, 5),\n    /* 0xB5 */ PUSHB.bind(undefined, 6),\n    /* 0xB6 */ PUSHB.bind(undefined, 7),\n    /* 0xB7 */ PUSHB.bind(undefined, 8),\n    /* 0xB8 */ PUSHW.bind(undefined, 1),\n    /* 0xB9 */ PUSHW.bind(undefined, 2),\n    /* 0xBA */ PUSHW.bind(undefined, 3),\n    /* 0xBB */ PUSHW.bind(undefined, 4),\n    /* 0xBC */ PUSHW.bind(undefined, 5),\n    /* 0xBD */ PUSHW.bind(undefined, 6),\n    /* 0xBE */ PUSHW.bind(undefined, 7),\n    /* 0xBF */ PUSHW.bind(undefined, 8),\n    /* 0xC0 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 0),\n    /* 0xC1 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 1),\n    /* 0xC2 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 2),\n    /* 0xC3 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 3),\n    /* 0xC4 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 0),\n    /* 0xC5 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 1),\n    /* 0xC6 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 2),\n    /* 0xC7 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 3),\n    /* 0xC8 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 0),\n    /* 0xC9 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 1),\n    /* 0xCA */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 2),\n    /* 0xCB */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 3),\n    /* 0xCC */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 0),\n    /* 0xCD */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 1),\n    /* 0xCE */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 2),\n    /* 0xCF */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 3),\n    /* 0xD0 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 0),\n    /* 0xD1 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 1),\n    /* 0xD2 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 2),\n    /* 0xD3 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 3),\n    /* 0xD4 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 0),\n    /* 0xD5 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 1),\n    /* 0xD6 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 2),\n    /* 0xD7 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 3),\n    /* 0xD8 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 0),\n    /* 0xD9 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 1),\n    /* 0xDA */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 2),\n    /* 0xDB */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 3),\n    /* 0xDC */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 0),\n    /* 0xDD */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 1),\n    /* 0xDE */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 2),\n    /* 0xDF */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 3),\n    /* 0xE0 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 0),\n    /* 0xE1 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 1),\n    /* 0xE2 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 2),\n    /* 0xE3 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 3),\n    /* 0xE4 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 0),\n    /* 0xE5 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 1),\n    /* 0xE6 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 2),\n    /* 0xE7 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 3),\n    /* 0xE8 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 0),\n    /* 0xE9 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 1),\n    /* 0xEA */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 2),\n    /* 0xEB */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 3),\n    /* 0xEC */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 0),\n    /* 0xED */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 1),\n    /* 0xEE */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 2),\n    /* 0xEF */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 3),\n    /* 0xF0 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 0),\n    /* 0xF1 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 1),\n    /* 0xF2 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 2),\n    /* 0xF3 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 3),\n    /* 0xF4 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 0),\n    /* 0xF5 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 1),\n    /* 0xF6 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 2),\n    /* 0xF7 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 3),\n    /* 0xF8 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 0),\n    /* 0xF9 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 1),\n    /* 0xFA */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 2),\n    /* 0xFB */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 3),\n    /* 0xFC */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 0),\n    /* 0xFD */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 1),\n    /* 0xFE */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 2),\n    /* 0xFF */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 3)\n];\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Hinting);\n\n/*****************************\n  Mathematical Considerations\n******************************\n\nfv ... refers to freedom vector\npv ... refers to projection vector\nrp ... refers to reference point\np  ... refers to to point being operated on\nd  ... refers to distance\n\nSETRELATIVE:\n============\n\ncase freedom vector == x-axis:\n------------------------------\n\n                        (pv)\n                     .-'\n              rpd .-'\n               .-*\n          d .-'90°'\n         .-'       '\n      .-'           '\n   *-'               ' b\n  rp                  '\n                       '\n                        '\n            p *----------*-------------- (fv)\n                          pm\n\n  rpdx = rpx + d * pv.x\n  rpdy = rpy + d * pv.y\n\n  equation of line b\n\n   y - rpdy = pvns * (x- rpdx)\n\n   y = p.y\n\n   x = rpdx + ( p.y - rpdy ) / pvns\n\n\ncase freedom vector == y-axis:\n------------------------------\n\n    * pm\n    |\\\n    | \\\n    |  \\\n    |   \\\n    |    \\\n    |     \\\n    |      \\\n    |       \\\n    |        \\\n    |         \\ b\n    |          \\\n    |           \\\n    |            \\    .-' (pv)\n    |         90° \\.-'\n    |           .-'* rpd\n    |        .-'\n    *     *-'  d\n    p     rp\n\n  rpdx = rpx + d * pv.x\n  rpdy = rpy + d * pv.y\n\n  equation of line b:\n           pvns ... normal slope to pv\n\n   y - rpdy = pvns * (x - rpdx)\n\n   x = p.x\n\n   y = rpdy +  pvns * (p.x - rpdx)\n\n\n\ngeneric case:\n-------------\n\n\n                              .'(fv)\n                            .'\n                          .* pm\n                        .' !\n                      .'    .\n                    .'      !\n                  .'         . b\n                .'           !\n               *              .\n              p               !\n                         90°   .    ... (pv)\n                           ...-*-'''\n                  ...---'''    rpd\n         ...---'''   d\n   *--'''\n  rp\n\n    rpdx = rpx + d * pv.x\n    rpdy = rpy + d * pv.y\n\n equation of line b:\n    pvns... normal slope to pv\n\n    y - rpdy = pvns * (x - rpdx)\n\n equation of freedom vector line:\n    fvs ... slope of freedom vector (=fy/fx)\n\n    y - py = fvs * (x - px)\n\n\n  on pm both equations are true for same x/y\n\n    y - rpdy = pvns * (x - rpdx)\n\n    y - py = fvs * (x - px)\n\n  form to y and set equal:\n\n    pvns * (x - rpdx) + rpdy = fvs * (x - px) + py\n\n  expand:\n\n    pvns * x - pvns * rpdx + rpdy = fvs * x - fvs * px + py\n\n  switch:\n\n    fvs * x - fvs * px + py = pvns * x - pvns * rpdx + rpdy\n\n  solve for x:\n\n    fvs * x - pvns * x = fvs * px - pvns * rpdx - py + rpdy\n\n\n\n          fvs * px - pvns * rpdx + rpdy - py\n    x =  -----------------------------------\n                 fvs - pvns\n\n  and:\n\n    y = fvs * (x - px) + py\n\n\n\nINTERPOLATE:\n============\n\nExamples of point interpolation.\n\nThe weight of the movement of the reference point gets bigger\nthe further the other reference point is away, thus the safest\noption (that is avoiding 0/0 divisions) is to weight the\noriginal distance of the other point by the sum of both distances.\n\nIf the sum of both distances is 0, then move the point by the\narithmetic average of the movement of both reference points.\n\n\n\n\n           (+6)\n    rp1o *---->*rp1\n         .     .                          (+12)\n         .     .                  rp2o *---------->* rp2\n         .     .                       .           .\n         .     .                       .           .\n         .    10          20           .           .\n         |.........|...................|           .\n               .   .                               .\n               .   . (+8)                          .\n                po *------>*p                      .\n               .           .                       .\n               .    12     .          24           .\n               |...........|.......................|\n                                  36\n\n\n-------\n\n\n\n           (+10)\n    rp1o *-------->*rp1\n         .         .                      (-10)\n         .         .              rp2 *<---------* rpo2\n         .         .                   .         .\n         .         .                   .         .\n         .    10   .          30       .         .\n         |.........|.............................|\n                   .                   .\n                   . (+5)              .\n                po *--->* p            .\n                   .    .              .\n                   .    .   20         .\n                   |....|..............|\n                     5        15\n\n\n-------\n\n\n           (+10)\n    rp1o *-------->*rp1\n         .         .\n         .         .\n    rp2o *-------->*rp2\n\n\n                               (+10)\n                          po *-------->* p\n\n-------\n\n\n           (+10)\n    rp1o *-------->*rp1\n         .         .\n         .         .(+30)\n    rp2o *---------------------------->*rp2\n\n\n                                        (+25)\n                          po *----------------------->* p\n\n\n\nvim: set ts=4 sw=4 expandtab:\n*****/\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/hintingtt.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/layout.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/layout.js ***!
  \***********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./check */ \"../../node_modules/opentype.js/src/check.js\");\n// The Layout object is the prototype of Substitution objects, and provides\n// utility methods to manipulate common layout tables (GPOS, GSUB, GDEF...)\n\n\n\nfunction searchTag(arr, tag) {\n    /* jshint bitwise: false */\n    let imin = 0;\n    let imax = arr.length - 1;\n    while (imin <= imax) {\n        const imid = (imin + imax) >>> 1;\n        const val = arr[imid].tag;\n        if (val === tag) {\n            return imid;\n        } else if (val < tag) {\n            imin = imid + 1;\n        } else { imax = imid - 1; }\n    }\n    // Not found: return -1-insertion point\n    return -imin - 1;\n}\n\nfunction binSearch(arr, value) {\n    /* jshint bitwise: false */\n    let imin = 0;\n    let imax = arr.length - 1;\n    while (imin <= imax) {\n        const imid = (imin + imax) >>> 1;\n        const val = arr[imid];\n        if (val === value) {\n            return imid;\n        } else if (val < value) {\n            imin = imid + 1;\n        } else { imax = imid - 1; }\n    }\n    // Not found: return -1-insertion point\n    return -imin - 1;\n}\n\n// binary search in a list of ranges (coverage, class definition)\nfunction searchRange(ranges, value) {\n    // jshint bitwise: false\n    let range;\n    let imin = 0;\n    let imax = ranges.length - 1;\n    while (imin <= imax) {\n        const imid = (imin + imax) >>> 1;\n        range = ranges[imid];\n        const start = range.start;\n        if (start === value) {\n            return range;\n        } else if (start < value) {\n            imin = imid + 1;\n        } else { imax = imid - 1; }\n    }\n    if (imin > 0) {\n        range = ranges[imin - 1];\n        if (value > range.end) return 0;\n        return range;\n    }\n}\n\n/**\n * @exports opentype.Layout\n * @class\n */\nfunction Layout(font, tableName) {\n    this.font = font;\n    this.tableName = tableName;\n}\n\nLayout.prototype = {\n\n    /**\n     * Binary search an object by \"tag\" property\n     * @instance\n     * @function searchTag\n     * @memberof opentype.Layout\n     * @param  {Array} arr\n     * @param  {string} tag\n     * @return {number}\n     */\n    searchTag: searchTag,\n\n    /**\n     * Binary search in a list of numbers\n     * @instance\n     * @function binSearch\n     * @memberof opentype.Layout\n     * @param  {Array} arr\n     * @param  {number} value\n     * @return {number}\n     */\n    binSearch: binSearch,\n\n    /**\n     * Get or create the Layout table (GSUB, GPOS etc).\n     * @param  {boolean} create - Whether to create a new one.\n     * @return {Object} The GSUB or GPOS table.\n     */\n    getTable: function(create) {\n        let layout = this.font.tables[this.tableName];\n        if (!layout && create) {\n            layout = this.font.tables[this.tableName] = this.createDefaultTable();\n        }\n        return layout;\n    },\n\n    /**\n     * Returns all scripts in the substitution table.\n     * @instance\n     * @return {Array}\n     */\n    getScriptNames: function() {\n        let layout = this.getTable();\n        if (!layout) { return []; }\n        return layout.scripts.map(function(script) {\n            return script.tag;\n        });\n    },\n\n    /**\n     * Returns the best bet for a script name.\n     * Returns 'DFLT' if it exists.\n     * If not, returns 'latn' if it exists.\n     * If neither exist, returns undefined.\n     */\n    getDefaultScriptName: function() {\n        let layout = this.getTable();\n        if (!layout) { return; }\n        let hasLatn = false;\n        for (let i = 0; i < layout.scripts.length; i++) {\n            const name = layout.scripts[i].tag;\n            if (name === 'DFLT') return name;\n            if (name === 'latn') hasLatn = true;\n        }\n        if (hasLatn) return 'latn';\n    },\n\n    /**\n     * Returns all LangSysRecords in the given script.\n     * @instance\n     * @param {string} [script='DFLT']\n     * @param {boolean} create - forces the creation of this script table if it doesn't exist.\n     * @return {Object} An object with tag and script properties.\n     */\n    getScriptTable: function(script, create) {\n        const layout = this.getTable(create);\n        if (layout) {\n            script = script || 'DFLT';\n            const scripts = layout.scripts;\n            const pos = searchTag(layout.scripts, script);\n            if (pos >= 0) {\n                return scripts[pos].script;\n            } else if (create) {\n                const scr = {\n                    tag: script,\n                    script: {\n                        defaultLangSys: {reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: []},\n                        langSysRecords: []\n                    }\n                };\n                scripts.splice(-1 - pos, 0, scr);\n                return scr.script;\n            }\n        }\n    },\n\n    /**\n     * Returns a language system table\n     * @instance\n     * @param {string} [script='DFLT']\n     * @param {string} [language='dlft']\n     * @param {boolean} create - forces the creation of this langSysTable if it doesn't exist.\n     * @return {Object}\n     */\n    getLangSysTable: function(script, language, create) {\n        const scriptTable = this.getScriptTable(script, create);\n        if (scriptTable) {\n            if (!language || language === 'dflt' || language === 'DFLT') {\n                return scriptTable.defaultLangSys;\n            }\n            const pos = searchTag(scriptTable.langSysRecords, language);\n            if (pos >= 0) {\n                return scriptTable.langSysRecords[pos].langSys;\n            } else if (create) {\n                const langSysRecord = {\n                    tag: language,\n                    langSys: {reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: []}\n                };\n                scriptTable.langSysRecords.splice(-1 - pos, 0, langSysRecord);\n                return langSysRecord.langSys;\n            }\n        }\n    },\n\n    /**\n     * Get a specific feature table.\n     * @instance\n     * @param {string} [script='DFLT']\n     * @param {string} [language='dlft']\n     * @param {string} feature - One of the codes listed at https://www.microsoft.com/typography/OTSPEC/featurelist.htm\n     * @param {boolean} create - forces the creation of the feature table if it doesn't exist.\n     * @return {Object}\n     */\n    getFeatureTable: function(script, language, feature, create) {\n        const langSysTable = this.getLangSysTable(script, language, create);\n        if (langSysTable) {\n            let featureRecord;\n            const featIndexes = langSysTable.featureIndexes;\n            const allFeatures = this.font.tables[this.tableName].features;\n            // The FeatureIndex array of indices is in arbitrary order,\n            // even if allFeatures is sorted alphabetically by feature tag.\n            for (let i = 0; i < featIndexes.length; i++) {\n                featureRecord = allFeatures[featIndexes[i]];\n                if (featureRecord.tag === feature) {\n                    return featureRecord.feature;\n                }\n            }\n            if (create) {\n                const index = allFeatures.length;\n                // Automatic ordering of features would require to shift feature indexes in the script list.\n                _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(index === 0 || feature >= allFeatures[index - 1].tag, 'Features must be added in alphabetical order.');\n                featureRecord = {\n                    tag: feature,\n                    feature: { params: 0, lookupListIndexes: [] }\n                };\n                allFeatures.push(featureRecord);\n                featIndexes.push(index);\n                return featureRecord.feature;\n            }\n        }\n    },\n\n    /**\n     * Get the lookup tables of a given type for a script/language/feature.\n     * @instance\n     * @param {string} [script='DFLT']\n     * @param {string} [language='dlft']\n     * @param {string} feature - 4-letter feature code\n     * @param {number} lookupType - 1 to 9\n     * @param {boolean} create - forces the creation of the lookup table if it doesn't exist, with no subtables.\n     * @return {Object[]}\n     */\n    getLookupTables: function(script, language, feature, lookupType, create) {\n        const featureTable = this.getFeatureTable(script, language, feature, create);\n        const tables = [];\n        if (featureTable) {\n            let lookupTable;\n            const lookupListIndexes = featureTable.lookupListIndexes;\n            const allLookups = this.font.tables[this.tableName].lookups;\n            // lookupListIndexes are in no particular order, so use naive search.\n            for (let i = 0; i < lookupListIndexes.length; i++) {\n                lookupTable = allLookups[lookupListIndexes[i]];\n                if (lookupTable.lookupType === lookupType) {\n                    tables.push(lookupTable);\n                }\n            }\n            if (tables.length === 0 && create) {\n                lookupTable = {\n                    lookupType: lookupType,\n                    lookupFlag: 0,\n                    subtables: [],\n                    markFilteringSet: undefined\n                };\n                const index = allLookups.length;\n                allLookups.push(lookupTable);\n                lookupListIndexes.push(index);\n                return [lookupTable];\n            }\n        }\n        return tables;\n    },\n\n    /**\n     * Find a glyph in a class definition table\n     * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#class-definition-table\n     * @param {object} classDefTable - an OpenType Layout class definition table\n     * @param {number} glyphIndex - the index of the glyph to find\n     * @returns {number} -1 if not found\n     */\n    getGlyphClass: function(classDefTable, glyphIndex) {\n        switch (classDefTable.format) {\n            case 1:\n                if (classDefTable.startGlyph <= glyphIndex && glyphIndex < classDefTable.startGlyph + classDefTable.classes.length) {\n                    return classDefTable.classes[glyphIndex - classDefTable.startGlyph];\n                }\n                return 0;\n            case 2:\n                const range = searchRange(classDefTable.ranges, glyphIndex);\n                return range ? range.classId : 0;\n        }\n    },\n\n    /**\n     * Find a glyph in a coverage table\n     * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-table\n     * @param {object} coverageTable - an OpenType Layout coverage table\n     * @param {number} glyphIndex - the index of the glyph to find\n     * @returns {number} -1 if not found\n     */\n    getCoverageIndex: function(coverageTable, glyphIndex) {\n        switch (coverageTable.format) {\n            case 1:\n                const index = binSearch(coverageTable.glyphs, glyphIndex);\n                return index >= 0 ? index : -1;\n            case 2:\n                const range = searchRange(coverageTable.ranges, glyphIndex);\n                return range ? range.index + glyphIndex - range.start : -1;\n        }\n    },\n\n    /**\n     * Returns the list of glyph indexes of a coverage table.\n     * Format 1: the list is stored raw\n     * Format 2: compact list as range records.\n     * @instance\n     * @param  {Object} coverageTable\n     * @return {Array}\n     */\n    expandCoverage: function(coverageTable) {\n        if (coverageTable.format === 1) {\n            return coverageTable.glyphs;\n        } else {\n            const glyphs = [];\n            const ranges = coverageTable.ranges;\n            for (let i = 0; i < ranges.length; i++) {\n                const range = ranges[i];\n                const start = range.start;\n                const end = range.end;\n                for (let j = start; j <= end; j++) {\n                    glyphs.push(j);\n                }\n            }\n            return glyphs;\n        }\n    }\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Layout);\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/layout.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/opentype.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/opentype.js ***!
  \*************************************************************************************/
/*! exports provided: Font, Glyph, Path, BoundingBox, _parse, parse, load, loadSync */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parse\", function() { return parseBuffer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"load\", function() { return load; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loadSync\", function() { return loadSync; });\n/* harmony import */ var string_prototype_codepointat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! string.prototype.codepointat */ \"../../node_modules/string.prototype.codepointat/codepointat.js\");\n/* harmony import */ var string_prototype_codepointat__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(string_prototype_codepointat__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var tiny_inflate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tiny-inflate */ \"../../node_modules/tiny-inflate/index.js\");\n/* harmony import */ var tiny_inflate__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(tiny_inflate__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _font__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./font */ \"../../node_modules/opentype.js/src/font.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Font\", function() { return _font__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; });\n\n/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glyph */ \"../../node_modules/opentype.js/src/glyph.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Glyph\", function() { return _glyph__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; });\n\n/* harmony import */ var _encoding__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./encoding */ \"../../node_modules/opentype.js/src/encoding.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"_parse\", function() { return _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"]; });\n\n/* harmony import */ var _bbox__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./bbox */ \"../../node_modules/opentype.js/src/bbox.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"BoundingBox\", function() { return _bbox__WEBPACK_IMPORTED_MODULE_6__[\"default\"]; });\n\n/* harmony import */ var _path__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./path */ \"../../node_modules/opentype.js/src/path.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Path\", function() { return _path__WEBPACK_IMPORTED_MODULE_7__[\"default\"]; });\n\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./util */ \"../../node_modules/opentype.js/src/util.js\");\n/* harmony import */ var _tables_cmap__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./tables/cmap */ \"../../node_modules/opentype.js/src/tables/cmap.js\");\n/* harmony import */ var _tables_cff__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./tables/cff */ \"../../node_modules/opentype.js/src/tables/cff.js\");\n/* harmony import */ var _tables_fvar__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./tables/fvar */ \"../../node_modules/opentype.js/src/tables/fvar.js\");\n/* harmony import */ var _tables_glyf__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./tables/glyf */ \"../../node_modules/opentype.js/src/tables/glyf.js\");\n/* harmony import */ var _tables_gpos__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./tables/gpos */ \"../../node_modules/opentype.js/src/tables/gpos.js\");\n/* harmony import */ var _tables_gsub__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./tables/gsub */ \"../../node_modules/opentype.js/src/tables/gsub.js\");\n/* harmony import */ var _tables_head__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./tables/head */ \"../../node_modules/opentype.js/src/tables/head.js\");\n/* harmony import */ var _tables_hhea__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./tables/hhea */ \"../../node_modules/opentype.js/src/tables/hhea.js\");\n/* harmony import */ var _tables_hmtx__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./tables/hmtx */ \"../../node_modules/opentype.js/src/tables/hmtx.js\");\n/* harmony import */ var _tables_kern__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./tables/kern */ \"../../node_modules/opentype.js/src/tables/kern.js\");\n/* harmony import */ var _tables_ltag__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./tables/ltag */ \"../../node_modules/opentype.js/src/tables/ltag.js\");\n/* harmony import */ var _tables_loca__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./tables/loca */ \"../../node_modules/opentype.js/src/tables/loca.js\");\n/* harmony import */ var _tables_maxp__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./tables/maxp */ \"../../node_modules/opentype.js/src/tables/maxp.js\");\n/* harmony import */ var _tables_name__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./tables/name */ \"../../node_modules/opentype.js/src/tables/name.js\");\n/* harmony import */ var _tables_os2__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./tables/os2 */ \"../../node_modules/opentype.js/src/tables/os2.js\");\n/* harmony import */ var _tables_post__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./tables/post */ \"../../node_modules/opentype.js/src/tables/post.js\");\n/* harmony import */ var _tables_meta__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./tables/meta */ \"../../node_modules/opentype.js/src/tables/meta.js\");\n// opentype.js\n// https://github.com/opentypejs/opentype.js\n// (c) 2015 Frederik De Bleser\n// opentype.js may be freely distributed under the MIT license.\n\n/* global DataView, Uint8Array, XMLHttpRequest  */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The opentype library.\n * @namespace opentype\n */\n\n// File loaders /////////////////////////////////////////////////////////\n/**\n * Loads a font from a file. The callback throws an error message as the first parameter if it fails\n * and the font as an ArrayBuffer in the second parameter if it succeeds.\n * @param  {string} path - The path of the file\n * @param  {Function} callback - The function to call when the font load completes\n */\nfunction loadFromFile(path, callback) {\n    const fs = __webpack_require__(/*! fs */ 0);\n    fs.readFile(path, function(err, buffer) {\n        if (err) {\n            return callback(err.message);\n        }\n\n        callback(null, Object(_util__WEBPACK_IMPORTED_MODULE_8__[\"nodeBufferToArrayBuffer\"])(buffer));\n    });\n}\n/**\n * Loads a font from a URL. The callback throws an error message as the first parameter if it fails\n * and the font as an ArrayBuffer in the second parameter if it succeeds.\n * @param  {string} url - The URL of the font file.\n * @param  {Function} callback - The function to call when the font load completes\n */\nfunction loadFromUrl(url, callback) {\n    const request = new XMLHttpRequest();\n    request.open('get', url, true);\n    request.responseType = 'arraybuffer';\n    request.onload = function() {\n        if (request.response) {\n            return callback(null, request.response);\n        } else {\n            return callback('Font could not be loaded: ' + request.statusText);\n        }\n    };\n\n    request.onerror = function () {\n        callback('Font could not be loaded');\n    };\n\n    request.send();\n}\n\n// Table Directory Entries //////////////////////////////////////////////\n/**\n * Parses OpenType table entries.\n * @param  {DataView}\n * @param  {Number}\n * @return {Object[]}\n */\nfunction parseOpenTypeTableEntries(data, numTables) {\n    const tableEntries = [];\n    let p = 12;\n    for (let i = 0; i < numTables; i += 1) {\n        const tag = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getTag(data, p);\n        const checksum = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getULong(data, p + 4);\n        const offset = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getULong(data, p + 8);\n        const length = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getULong(data, p + 12);\n        tableEntries.push({tag: tag, checksum: checksum, offset: offset, length: length, compression: false});\n        p += 16;\n    }\n\n    return tableEntries;\n}\n\n/**\n * Parses WOFF table entries.\n * @param  {DataView}\n * @param  {Number}\n * @return {Object[]}\n */\nfunction parseWOFFTableEntries(data, numTables) {\n    const tableEntries = [];\n    let p = 44; // offset to the first table directory entry.\n    for (let i = 0; i < numTables; i += 1) {\n        const tag = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getTag(data, p);\n        const offset = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getULong(data, p + 4);\n        const compLength = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getULong(data, p + 8);\n        const origLength = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getULong(data, p + 12);\n        let compression;\n        if (compLength < origLength) {\n            compression = 'WOFF';\n        } else {\n            compression = false;\n        }\n\n        tableEntries.push({tag: tag, offset: offset, compression: compression,\n            compressedLength: compLength, length: origLength});\n        p += 20;\n    }\n\n    return tableEntries;\n}\n\n/**\n * @typedef TableData\n * @type Object\n * @property {DataView} data - The DataView\n * @property {number} offset - The data offset.\n */\n\n/**\n * @param  {DataView}\n * @param  {Object}\n * @return {TableData}\n */\nfunction uncompressTable(data, tableEntry) {\n    if (tableEntry.compression === 'WOFF') {\n        const inBuffer = new Uint8Array(data.buffer, tableEntry.offset + 2, tableEntry.compressedLength - 2);\n        const outBuffer = new Uint8Array(tableEntry.length);\n        tiny_inflate__WEBPACK_IMPORTED_MODULE_1___default()(inBuffer, outBuffer);\n        if (outBuffer.byteLength !== tableEntry.length) {\n            throw new Error('Decompression error: ' + tableEntry.tag + ' decompressed length doesn\\'t match recorded length');\n        }\n\n        const view = new DataView(outBuffer.buffer, 0);\n        return {data: view, offset: 0};\n    } else {\n        return {data: data, offset: tableEntry.offset};\n    }\n}\n\n// Public API ///////////////////////////////////////////////////////////\n\n/**\n * Parse the OpenType file data (as an ArrayBuffer) and return a Font object.\n * Throws an error if the font could not be parsed.\n * @param  {ArrayBuffer}\n * @return {opentype.Font}\n */\nfunction parseBuffer(buffer) {\n    let indexToLocFormat;\n    let ltagTable;\n\n    // Since the constructor can also be called to create new fonts from scratch, we indicate this\n    // should be an empty font that we'll fill with our own data.\n    const font = new _font__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({empty: true});\n\n    // OpenType fonts use big endian byte ordering.\n    // We can't rely on typed array view types, because they operate with the endianness of the host computer.\n    // Instead we use DataViews where we can specify endianness.\n    const data = new DataView(buffer, 0);\n    let numTables;\n    let tableEntries = [];\n    const signature = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getTag(data, 0);\n    if (signature === String.fromCharCode(0, 1, 0, 0) || signature === 'true' || signature === 'typ1') {\n        font.outlinesFormat = 'truetype';\n        numTables = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getUShort(data, 4);\n        tableEntries = parseOpenTypeTableEntries(data, numTables);\n    } else if (signature === 'OTTO') {\n        font.outlinesFormat = 'cff';\n        numTables = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getUShort(data, 4);\n        tableEntries = parseOpenTypeTableEntries(data, numTables);\n    } else if (signature === 'wOFF') {\n        const flavor = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getTag(data, 4);\n        if (flavor === String.fromCharCode(0, 1, 0, 0)) {\n            font.outlinesFormat = 'truetype';\n        } else if (flavor === 'OTTO') {\n            font.outlinesFormat = 'cff';\n        } else {\n            throw new Error('Unsupported OpenType flavor ' + signature);\n        }\n\n        numTables = _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getUShort(data, 12);\n        tableEntries = parseWOFFTableEntries(data, numTables);\n    } else {\n        throw new Error('Unsupported OpenType signature ' + signature);\n    }\n\n    let cffTableEntry;\n    let fvarTableEntry;\n    let glyfTableEntry;\n    let gposTableEntry;\n    let gsubTableEntry;\n    let hmtxTableEntry;\n    let kernTableEntry;\n    let locaTableEntry;\n    let nameTableEntry;\n    let metaTableEntry;\n    let p;\n\n    for (let i = 0; i < numTables; i += 1) {\n        const tableEntry = tableEntries[i];\n        let table;\n        switch (tableEntry.tag) {\n            case 'cmap':\n                table = uncompressTable(data, tableEntry);\n                font.tables.cmap = _tables_cmap__WEBPACK_IMPORTED_MODULE_9__[\"default\"].parse(table.data, table.offset);\n                font.encoding = new _encoding__WEBPACK_IMPORTED_MODULE_4__[\"CmapEncoding\"](font.tables.cmap);\n                break;\n            case 'cvt ' :\n                table = uncompressTable(data, tableEntry);\n                p = new _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].Parser(table.data, table.offset);\n                font.tables.cvt = p.parseShortList(tableEntry.length / 2);\n                break;\n            case 'fvar':\n                fvarTableEntry = tableEntry;\n                break;\n            case 'fpgm' :\n                table = uncompressTable(data, tableEntry);\n                p = new _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].Parser(table.data, table.offset);\n                font.tables.fpgm = p.parseByteList(tableEntry.length);\n                break;\n            case 'head':\n                table = uncompressTable(data, tableEntry);\n                font.tables.head = _tables_head__WEBPACK_IMPORTED_MODULE_15__[\"default\"].parse(table.data, table.offset);\n                font.unitsPerEm = font.tables.head.unitsPerEm;\n                indexToLocFormat = font.tables.head.indexToLocFormat;\n                break;\n            case 'hhea':\n                table = uncompressTable(data, tableEntry);\n                font.tables.hhea = _tables_hhea__WEBPACK_IMPORTED_MODULE_16__[\"default\"].parse(table.data, table.offset);\n                font.ascender = font.tables.hhea.ascender;\n                font.descender = font.tables.hhea.descender;\n                font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;\n                break;\n            case 'hmtx':\n                hmtxTableEntry = tableEntry;\n                break;\n            case 'ltag':\n                table = uncompressTable(data, tableEntry);\n                ltagTable = _tables_ltag__WEBPACK_IMPORTED_MODULE_19__[\"default\"].parse(table.data, table.offset);\n                break;\n            case 'maxp':\n                table = uncompressTable(data, tableEntry);\n                font.tables.maxp = _tables_maxp__WEBPACK_IMPORTED_MODULE_21__[\"default\"].parse(table.data, table.offset);\n                font.numGlyphs = font.tables.maxp.numGlyphs;\n                break;\n            case 'name':\n                nameTableEntry = tableEntry;\n                break;\n            case 'OS/2':\n                table = uncompressTable(data, tableEntry);\n                font.tables.os2 = _tables_os2__WEBPACK_IMPORTED_MODULE_23__[\"default\"].parse(table.data, table.offset);\n                break;\n            case 'post':\n                table = uncompressTable(data, tableEntry);\n                font.tables.post = _tables_post__WEBPACK_IMPORTED_MODULE_24__[\"default\"].parse(table.data, table.offset);\n                font.glyphNames = new _encoding__WEBPACK_IMPORTED_MODULE_4__[\"GlyphNames\"](font.tables.post);\n                break;\n            case 'prep' :\n                table = uncompressTable(data, tableEntry);\n                p = new _parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"].Parser(table.data, table.offset);\n                font.tables.prep = p.parseByteList(tableEntry.length);\n                break;\n            case 'glyf':\n                glyfTableEntry = tableEntry;\n                break;\n            case 'loca':\n                locaTableEntry = tableEntry;\n                break;\n            case 'CFF ':\n                cffTableEntry = tableEntry;\n                break;\n            case 'kern':\n                kernTableEntry = tableEntry;\n                break;\n            case 'GPOS':\n                gposTableEntry = tableEntry;\n                break;\n            case 'GSUB':\n                gsubTableEntry = tableEntry;\n                break;\n            case 'meta':\n                metaTableEntry = tableEntry;\n                break;\n        }\n    }\n\n    const nameTable = uncompressTable(data, nameTableEntry);\n    font.tables.name = _tables_name__WEBPACK_IMPORTED_MODULE_22__[\"default\"].parse(nameTable.data, nameTable.offset, ltagTable);\n    font.names = font.tables.name;\n\n    if (glyfTableEntry && locaTableEntry) {\n        const shortVersion = indexToLocFormat === 0;\n        const locaTable = uncompressTable(data, locaTableEntry);\n        const locaOffsets = _tables_loca__WEBPACK_IMPORTED_MODULE_20__[\"default\"].parse(locaTable.data, locaTable.offset, font.numGlyphs, shortVersion);\n        const glyfTable = uncompressTable(data, glyfTableEntry);\n        font.glyphs = _tables_glyf__WEBPACK_IMPORTED_MODULE_12__[\"default\"].parse(glyfTable.data, glyfTable.offset, locaOffsets, font);\n    } else if (cffTableEntry) {\n        const cffTable = uncompressTable(data, cffTableEntry);\n        _tables_cff__WEBPACK_IMPORTED_MODULE_10__[\"default\"].parse(cffTable.data, cffTable.offset, font);\n    } else {\n        throw new Error('Font doesn\\'t contain TrueType or CFF outlines.');\n    }\n\n    const hmtxTable = uncompressTable(data, hmtxTableEntry);\n    _tables_hmtx__WEBPACK_IMPORTED_MODULE_17__[\"default\"].parse(hmtxTable.data, hmtxTable.offset, font.numberOfHMetrics, font.numGlyphs, font.glyphs);\n    Object(_encoding__WEBPACK_IMPORTED_MODULE_4__[\"addGlyphNames\"])(font);\n\n    if (kernTableEntry) {\n        const kernTable = uncompressTable(data, kernTableEntry);\n        font.kerningPairs = _tables_kern__WEBPACK_IMPORTED_MODULE_18__[\"default\"].parse(kernTable.data, kernTable.offset);\n    } else {\n        font.kerningPairs = {};\n    }\n\n    if (gposTableEntry) {\n        const gposTable = uncompressTable(data, gposTableEntry);\n        font.tables.gpos = _tables_gpos__WEBPACK_IMPORTED_MODULE_13__[\"default\"].parse(gposTable.data, gposTable.offset);\n        font.position.init();\n    }\n\n    if (gsubTableEntry) {\n        const gsubTable = uncompressTable(data, gsubTableEntry);\n        font.tables.gsub = _tables_gsub__WEBPACK_IMPORTED_MODULE_14__[\"default\"].parse(gsubTable.data, gsubTable.offset);\n    }\n\n    if (fvarTableEntry) {\n        const fvarTable = uncompressTable(data, fvarTableEntry);\n        font.tables.fvar = _tables_fvar__WEBPACK_IMPORTED_MODULE_11__[\"default\"].parse(fvarTable.data, fvarTable.offset, font.names);\n    }\n\n    if (metaTableEntry) {\n        const metaTable = uncompressTable(data, metaTableEntry);\n        font.tables.meta = _tables_meta__WEBPACK_IMPORTED_MODULE_25__[\"default\"].parse(metaTable.data, metaTable.offset);\n        font.metas = font.tables.meta;\n    }\n\n    return font;\n}\n\n/**\n * Asynchronously load the font from a URL or a filesystem. When done, call the callback\n * with two arguments `(err, font)`. The `err` will be null on success,\n * the `font` is a Font object.\n * We use the node.js callback convention so that\n * opentype.js can integrate with frameworks like async.js.\n * @alias opentype.load\n * @param  {string} url - The URL of the font to load.\n * @param  {Function} callback - The callback.\n */\nfunction load(url, callback) {\n    const isNode = typeof window === 'undefined';\n    const loadFn = isNode ? loadFromFile : loadFromUrl;\n    loadFn(url, function(err, arrayBuffer) {\n        if (err) {\n            return callback(err);\n        }\n        let font;\n        try {\n            font = parseBuffer(arrayBuffer);\n        } catch (e) {\n            return callback(e, null);\n        }\n        return callback(null, font);\n    });\n}\n\n/**\n * Synchronously load the font from a URL or file.\n * When done, returns the font object or throws an error.\n * @alias opentype.loadSync\n * @param  {string} url - The URL of the font to load.\n * @return {opentype.Font}\n */\nfunction loadSync(url) {\n    const fs = __webpack_require__(/*! fs */ 0);\n    const buffer = fs.readFileSync(url);\n    return parseBuffer(Object(_util__WEBPACK_IMPORTED_MODULE_8__[\"nodeBufferToArrayBuffer\"])(buffer));\n}\n\n\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/opentype.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/parse.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/parse.js ***!
  \**********************************************************************************/
/*! exports provided: default, Parser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Parser\", function() { return Parser; });\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./check */ \"../../node_modules/opentype.js/src/check.js\");\n// Parsing utility functions\n\n\n\n// Retrieve an unsigned byte from the DataView.\nfunction getByte(dataView, offset) {\n    return dataView.getUint8(offset);\n}\n\n// Retrieve an unsigned 16-bit short from the DataView.\n// The value is stored in big endian.\nfunction getUShort(dataView, offset) {\n    return dataView.getUint16(offset, false);\n}\n\n// Retrieve a signed 16-bit short from the DataView.\n// The value is stored in big endian.\nfunction getShort(dataView, offset) {\n    return dataView.getInt16(offset, false);\n}\n\n// Retrieve an unsigned 32-bit long from the DataView.\n// The value is stored in big endian.\nfunction getULong(dataView, offset) {\n    return dataView.getUint32(offset, false);\n}\n\n// Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.\n// The value is stored in big endian.\nfunction getFixed(dataView, offset) {\n    const decimal = dataView.getInt16(offset, false);\n    const fraction = dataView.getUint16(offset + 2, false);\n    return decimal + fraction / 65535;\n}\n\n// Retrieve a 4-character tag from the DataView.\n// Tags are used to identify tables.\nfunction getTag(dataView, offset) {\n    let tag = '';\n    for (let i = offset; i < offset + 4; i += 1) {\n        tag += String.fromCharCode(dataView.getInt8(i));\n    }\n\n    return tag;\n}\n\n// Retrieve an offset from the DataView.\n// Offsets are 1 to 4 bytes in length, depending on the offSize argument.\nfunction getOffset(dataView, offset, offSize) {\n    let v = 0;\n    for (let i = 0; i < offSize; i += 1) {\n        v <<= 8;\n        v += dataView.getUint8(offset + i);\n    }\n\n    return v;\n}\n\n// Retrieve a number of bytes from start offset to the end offset from the DataView.\nfunction getBytes(dataView, startOffset, endOffset) {\n    const bytes = [];\n    for (let i = startOffset; i < endOffset; i += 1) {\n        bytes.push(dataView.getUint8(i));\n    }\n\n    return bytes;\n}\n\n// Convert the list of bytes to a string.\nfunction bytesToString(bytes) {\n    let s = '';\n    for (let i = 0; i < bytes.length; i += 1) {\n        s += String.fromCharCode(bytes[i]);\n    }\n\n    return s;\n}\n\nconst typeOffsets = {\n    byte: 1,\n    uShort: 2,\n    short: 2,\n    uLong: 4,\n    fixed: 4,\n    longDateTime: 8,\n    tag: 4\n};\n\n// A stateful parser that changes the offset whenever a value is retrieved.\n// The data is a DataView.\nfunction Parser(data, offset) {\n    this.data = data;\n    this.offset = offset;\n    this.relativeOffset = 0;\n}\n\nParser.prototype.parseByte = function() {\n    const v = this.data.getUint8(this.offset + this.relativeOffset);\n    this.relativeOffset += 1;\n    return v;\n};\n\nParser.prototype.parseChar = function() {\n    const v = this.data.getInt8(this.offset + this.relativeOffset);\n    this.relativeOffset += 1;\n    return v;\n};\n\nParser.prototype.parseCard8 = Parser.prototype.parseByte;\n\nParser.prototype.parseUShort = function() {\n    const v = this.data.getUint16(this.offset + this.relativeOffset);\n    this.relativeOffset += 2;\n    return v;\n};\n\nParser.prototype.parseCard16 = Parser.prototype.parseUShort;\nParser.prototype.parseSID = Parser.prototype.parseUShort;\nParser.prototype.parseOffset16 = Parser.prototype.parseUShort;\n\nParser.prototype.parseShort = function() {\n    const v = this.data.getInt16(this.offset + this.relativeOffset);\n    this.relativeOffset += 2;\n    return v;\n};\n\nParser.prototype.parseF2Dot14 = function() {\n    const v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;\n    this.relativeOffset += 2;\n    return v;\n};\n\nParser.prototype.parseULong = function() {\n    const v = getULong(this.data, this.offset + this.relativeOffset);\n    this.relativeOffset += 4;\n    return v;\n};\n\nParser.prototype.parseOffset32 = Parser.prototype.parseULong;\n\nParser.prototype.parseFixed = function() {\n    const v = getFixed(this.data, this.offset + this.relativeOffset);\n    this.relativeOffset += 4;\n    return v;\n};\n\nParser.prototype.parseString = function(length) {\n    const dataView = this.data;\n    const offset = this.offset + this.relativeOffset;\n    let string = '';\n    this.relativeOffset += length;\n    for (let i = 0; i < length; i++) {\n        string += String.fromCharCode(dataView.getUint8(offset + i));\n    }\n\n    return string;\n};\n\nParser.prototype.parseTag = function() {\n    return this.parseString(4);\n};\n\n// LONGDATETIME is a 64-bit integer.\n// JavaScript and unix timestamps traditionally use 32 bits, so we\n// only take the last 32 bits.\n// + Since until 2038 those bits will be filled by zeros we can ignore them.\nParser.prototype.parseLongDateTime = function() {\n    let v = getULong(this.data, this.offset + this.relativeOffset + 4);\n    // Subtract seconds between 01/01/1904 and 01/01/1970\n    // to convert Apple Mac timestamp to Standard Unix timestamp\n    v -= 2082844800;\n    this.relativeOffset += 8;\n    return v;\n};\n\nParser.prototype.parseVersion = function(minorBase) {\n    const major = getUShort(this.data, this.offset + this.relativeOffset);\n\n    // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1\n    // Default returns the correct number if minor = 0xN000 where N is 0-9\n    // Set minorBase to 1 for tables that use minor = N where N is 0-9\n    const minor = getUShort(this.data, this.offset + this.relativeOffset + 2);\n    this.relativeOffset += 4;\n    if (minorBase === undefined) minorBase = 0x1000;\n    return major + minor / minorBase / 10;\n};\n\nParser.prototype.skip = function(type, amount) {\n    if (amount === undefined) {\n        amount = 1;\n    }\n\n    this.relativeOffset += typeOffsets[type] * amount;\n};\n\n///// Parsing lists and records ///////////////////////////////\n\n// Parse a list of 32 bit unsigned integers.\nParser.prototype.parseULongList = function(count) {\n    if (count === undefined) { count = this.parseULong(); }\n    const offsets = new Array(count);\n    const dataView = this.data;\n    let offset = this.offset + this.relativeOffset;\n    for (let i = 0; i < count; i++) {\n        offsets[i] = dataView.getUint32(offset);\n        offset += 4;\n    }\n\n    this.relativeOffset += count * 4;\n    return offsets;\n};\n\n// Parse a list of 16 bit unsigned integers. The length of the list can be read on the stream\n// or provided as an argument.\nParser.prototype.parseOffset16List =\nParser.prototype.parseUShortList = function(count) {\n    if (count === undefined) { count = this.parseUShort(); }\n    const offsets = new Array(count);\n    const dataView = this.data;\n    let offset = this.offset + this.relativeOffset;\n    for (let i = 0; i < count; i++) {\n        offsets[i] = dataView.getUint16(offset);\n        offset += 2;\n    }\n\n    this.relativeOffset += count * 2;\n    return offsets;\n};\n\n// Parses a list of 16 bit signed integers.\nParser.prototype.parseShortList = function(count) {\n    const list = new Array(count);\n    const dataView = this.data;\n    let offset = this.offset + this.relativeOffset;\n    for (let i = 0; i < count; i++) {\n        list[i] = dataView.getInt16(offset);\n        offset += 2;\n    }\n\n    this.relativeOffset += count * 2;\n    return list;\n};\n\n// Parses a list of bytes.\nParser.prototype.parseByteList = function(count) {\n    const list = new Array(count);\n    const dataView = this.data;\n    let offset = this.offset + this.relativeOffset;\n    for (let i = 0; i < count; i++) {\n        list[i] = dataView.getUint8(offset++);\n    }\n\n    this.relativeOffset += count;\n    return list;\n};\n\n/**\n * Parse a list of items.\n * Record count is optional, if omitted it is read from the stream.\n * itemCallback is one of the Parser methods.\n */\nParser.prototype.parseList = function(count, itemCallback) {\n    if (!itemCallback) {\n        itemCallback = count;\n        count = this.parseUShort();\n    }\n    const list = new Array(count);\n    for (let i = 0; i < count; i++) {\n        list[i] = itemCallback.call(this);\n    }\n    return list;\n};\n\nParser.prototype.parseList32 = function(count, itemCallback) {\n    if (!itemCallback) {\n        itemCallback = count;\n        count = this.parseULong();\n    }\n    const list = new Array(count);\n    for (let i = 0; i < count; i++) {\n        list[i] = itemCallback.call(this);\n    }\n    return list;\n};\n\n/**\n * Parse a list of records.\n * Record count is optional, if omitted it is read from the stream.\n * Example of recordDescription: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }\n */\nParser.prototype.parseRecordList = function(count, recordDescription) {\n    // If the count argument is absent, read it in the stream.\n    if (!recordDescription) {\n        recordDescription = count;\n        count = this.parseUShort();\n    }\n    const records = new Array(count);\n    const fields = Object.keys(recordDescription);\n    for (let i = 0; i < count; i++) {\n        const rec = {};\n        for (let j = 0; j < fields.length; j++) {\n            const fieldName = fields[j];\n            const fieldType = recordDescription[fieldName];\n            rec[fieldName] = fieldType.call(this);\n        }\n        records[i] = rec;\n    }\n    return records;\n};\n\nParser.prototype.parseRecordList32 = function(count, recordDescription) {\n    // If the count argument is absent, read it in the stream.\n    if (!recordDescription) {\n        recordDescription = count;\n        count = this.parseULong();\n    }\n    const records = new Array(count);\n    const fields = Object.keys(recordDescription);\n    for (let i = 0; i < count; i++) {\n        const rec = {};\n        for (let j = 0; j < fields.length; j++) {\n            const fieldName = fields[j];\n            const fieldType = recordDescription[fieldName];\n            rec[fieldName] = fieldType.call(this);\n        }\n        records[i] = rec;\n    }\n    return records;\n};\n\n// Parse a data structure into an object\n// Example of description: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }\nParser.prototype.parseStruct = function(description) {\n    if (typeof description === 'function') {\n        return description.call(this);\n    } else {\n        const fields = Object.keys(description);\n        const struct = {};\n        for (let j = 0; j < fields.length; j++) {\n            const fieldName = fields[j];\n            const fieldType = description[fieldName];\n            struct[fieldName] = fieldType.call(this);\n        }\n        return struct;\n    }\n};\n\n/**\n * Parse a GPOS valueRecord\n * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record\n * valueFormat is optional, if omitted it is read from the stream.\n */\nParser.prototype.parseValueRecord = function(valueFormat) {\n    if (valueFormat === undefined) {\n        valueFormat = this.parseUShort();\n    }\n    if (valueFormat === 0) {\n        // valueFormat2 in kerning pairs is most often 0\n        // in this case return undefined instead of an empty object, to save space\n        return;\n    }\n    const valueRecord = {};\n\n    if (valueFormat & 0x0001) { valueRecord.xPlacement = this.parseShort(); }\n    if (valueFormat & 0x0002) { valueRecord.yPlacement = this.parseShort(); }\n    if (valueFormat & 0x0004) { valueRecord.xAdvance = this.parseShort(); }\n    if (valueFormat & 0x0008) { valueRecord.yAdvance = this.parseShort(); }\n\n    // Device table (non-variable font) / VariationIndex table (variable font) not supported\n    // https://docs.microsoft.com/fr-fr/typography/opentype/spec/chapter2#devVarIdxTbls\n    if (valueFormat & 0x0010) { valueRecord.xPlaDevice = undefined; this.parseShort(); }\n    if (valueFormat & 0x0020) { valueRecord.yPlaDevice = undefined; this.parseShort(); }\n    if (valueFormat & 0x0040) { valueRecord.xAdvDevice = undefined; this.parseShort(); }\n    if (valueFormat & 0x0080) { valueRecord.yAdvDevice = undefined; this.parseShort(); }\n\n    return valueRecord;\n};\n\n/**\n * Parse a list of GPOS valueRecords\n * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record\n * valueFormat and valueCount are read from the stream.\n */\nParser.prototype.parseValueRecordList = function() {\n    const valueFormat = this.parseUShort();\n    const valueCount = this.parseUShort();\n    const values = new Array(valueCount);\n    for (let i = 0; i < valueCount; i++) {\n        values[i] = this.parseValueRecord(valueFormat);\n    }\n    return values;\n};\n\nParser.prototype.parsePointer = function(description) {\n    const structOffset = this.parseOffset16();\n    if (structOffset > 0) {\n        // NULL offset => return undefined\n        return new Parser(this.data, this.offset + structOffset).parseStruct(description);\n    }\n    return undefined;\n};\n\nParser.prototype.parsePointer32 = function(description) {\n    const structOffset = this.parseOffset32();\n    if (structOffset > 0) {\n        // NULL offset => return undefined\n        return new Parser(this.data, this.offset + structOffset).parseStruct(description);\n    }\n    return undefined;\n};\n\n/**\n * Parse a list of offsets to lists of 16-bit integers,\n * or a list of offsets to lists of offsets to any kind of items.\n * If itemCallback is not provided, a list of list of UShort is assumed.\n * If provided, itemCallback is called on each item and must parse the item.\n * See examples in tables/gsub.js\n */\nParser.prototype.parseListOfLists = function(itemCallback) {\n    const offsets = this.parseOffset16List();\n    const count = offsets.length;\n    const relativeOffset = this.relativeOffset;\n    const list = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const start = offsets[i];\n        if (start === 0) {\n            // NULL offset\n            // Add i as owned property to list. Convenient with assert.\n            list[i] = undefined;\n            continue;\n        }\n        this.relativeOffset = start;\n        if (itemCallback) {\n            const subOffsets = this.parseOffset16List();\n            const subList = new Array(subOffsets.length);\n            for (let j = 0; j < subOffsets.length; j++) {\n                this.relativeOffset = start + subOffsets[j];\n                subList[j] = itemCallback.call(this);\n            }\n            list[i] = subList;\n        } else {\n            list[i] = this.parseUShortList();\n        }\n    }\n    this.relativeOffset = relativeOffset;\n    return list;\n};\n\n///// Complex tables parsing //////////////////////////////////\n\n// Parse a coverage table in a GSUB, GPOS or GDEF table.\n// https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n// parser.offset must point to the start of the table containing the coverage.\nParser.prototype.parseCoverage = function() {\n    const startOffset = this.offset + this.relativeOffset;\n    const format = this.parseUShort();\n    const count = this.parseUShort();\n    if (format === 1) {\n        return {\n            format: 1,\n            glyphs: this.parseUShortList(count)\n        };\n    } else if (format === 2) {\n        const ranges = new Array(count);\n        for (let i = 0; i < count; i++) {\n            ranges[i] = {\n                start: this.parseUShort(),\n                end: this.parseUShort(),\n                index: this.parseUShort()\n            };\n        }\n        return {\n            format: 2,\n            ranges: ranges\n        };\n    }\n    throw new Error('0x' + startOffset.toString(16) + ': Coverage format must be 1 or 2.');\n};\n\n// Parse a Class Definition Table in a GSUB, GPOS or GDEF table.\n// https://www.microsoft.com/typography/OTSPEC/chapter2.htm\nParser.prototype.parseClassDef = function() {\n    const startOffset = this.offset + this.relativeOffset;\n    const format = this.parseUShort();\n    if (format === 1) {\n        return {\n            format: 1,\n            startGlyph: this.parseUShort(),\n            classes: this.parseUShortList()\n        };\n    } else if (format === 2) {\n        return {\n            format: 2,\n            ranges: this.parseRecordList({\n                start: Parser.uShort,\n                end: Parser.uShort,\n                classId: Parser.uShort\n            })\n        };\n    }\n    throw new Error('0x' + startOffset.toString(16) + ': ClassDef format must be 1 or 2.');\n};\n\n///// Static methods ///////////////////////////////////\n// These convenience methods can be used as callbacks and should be called with \"this\" context set to a Parser instance.\n\nParser.list = function(count, itemCallback) {\n    return function() {\n        return this.parseList(count, itemCallback);\n    };\n};\n\nParser.list32 = function(count, itemCallback) {\n    return function() {\n        return this.parseList32(count, itemCallback);\n    };\n};\n\nParser.recordList = function(count, recordDescription) {\n    return function() {\n        return this.parseRecordList(count, recordDescription);\n    };\n};\n\nParser.recordList32 = function(count, recordDescription) {\n    return function() {\n        return this.parseRecordList32(count, recordDescription);\n    };\n};\n\nParser.pointer = function(description) {\n    return function() {\n        return this.parsePointer(description);\n    };\n};\n\nParser.pointer32 = function(description) {\n    return function() {\n        return this.parsePointer32(description);\n    };\n};\n\nParser.tag = Parser.prototype.parseTag;\nParser.byte = Parser.prototype.parseByte;\nParser.uShort = Parser.offset16 = Parser.prototype.parseUShort;\nParser.uShortList = Parser.prototype.parseUShortList;\nParser.uLong = Parser.offset32 = Parser.prototype.parseULong;\nParser.uLongList = Parser.prototype.parseULongList;\nParser.struct = Parser.prototype.parseStruct;\nParser.coverage = Parser.prototype.parseCoverage;\nParser.classDef = Parser.prototype.parseClassDef;\n\n///// Script, Feature, Lookup lists ///////////////////////////////////////////////\n// https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n\nconst langSysTable = {\n    reserved: Parser.uShort,\n    reqFeatureIndex: Parser.uShort,\n    featureIndexes: Parser.uShortList\n};\n\nParser.prototype.parseScriptList = function() {\n    return this.parsePointer(Parser.recordList({\n        tag: Parser.tag,\n        script: Parser.pointer({\n            defaultLangSys: Parser.pointer(langSysTable),\n            langSysRecords: Parser.recordList({\n                tag: Parser.tag,\n                langSys: Parser.pointer(langSysTable)\n            })\n        })\n    })) || [];\n};\n\nParser.prototype.parseFeatureList = function() {\n    return this.parsePointer(Parser.recordList({\n        tag: Parser.tag,\n        feature: Parser.pointer({\n            featureParams: Parser.offset16,\n            lookupListIndexes: Parser.uShortList\n        })\n    })) || [];\n};\n\nParser.prototype.parseLookupList = function(lookupTableParsers) {\n    return this.parsePointer(Parser.list(Parser.pointer(function() {\n        const lookupType = this.parseUShort();\n        _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(1 <= lookupType && lookupType <= 9, 'GPOS/GSUB lookup type ' + lookupType + ' unknown.');\n        const lookupFlag = this.parseUShort();\n        const useMarkFilteringSet = lookupFlag & 0x10;\n        return {\n            lookupType: lookupType,\n            lookupFlag: lookupFlag,\n            subtables: this.parseList(Parser.pointer(lookupTableParsers[lookupType])),\n            markFilteringSet: useMarkFilteringSet ? this.parseUShort() : undefined\n        };\n    }))) || [];\n};\n\nParser.prototype.parseFeatureVariationsList = function() {\n    return this.parsePointer32(function() {\n        const majorVersion = this.parseUShort();\n        const minorVersion = this.parseUShort();\n        _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(majorVersion === 1 && minorVersion < 1, 'GPOS/GSUB feature variations table unknown.');\n        const featureVariations = this.parseRecordList32({\n            conditionSetOffset: Parser.offset32,\n            featureTableSubstitutionOffset: Parser.offset32\n        });\n        return featureVariations;\n    }) || [];\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    getByte,\n    getCard8: getByte,\n    getUShort,\n    getCard16: getUShort,\n    getShort,\n    getULong,\n    getFixed,\n    getTag,\n    getOffset,\n    getBytes,\n    bytesToString,\n    Parser,\n});\n\n\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/parse.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/path.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/path.js ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _bbox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bbox */ \"../../node_modules/opentype.js/src/bbox.js\");\n// Geometric objects\n\n\n\n/**\n * A bézier path containing a set of path commands similar to a SVG path.\n * Paths can be drawn on a context using `draw`.\n * @exports opentype.Path\n * @class\n * @constructor\n */\nfunction Path() {\n    this.commands = [];\n    this.fill = 'black';\n    this.stroke = null;\n    this.strokeWidth = 1;\n}\n\n/**\n * @param  {number} x\n * @param  {number} y\n */\nPath.prototype.moveTo = function(x, y) {\n    this.commands.push({\n        type: 'M',\n        x: x,\n        y: y\n    });\n};\n\n/**\n * @param  {number} x\n * @param  {number} y\n */\nPath.prototype.lineTo = function(x, y) {\n    this.commands.push({\n        type: 'L',\n        x: x,\n        y: y\n    });\n};\n\n/**\n * Draws cubic curve\n * @function\n * curveTo\n * @memberof opentype.Path.prototype\n * @param  {number} x1 - x of control 1\n * @param  {number} y1 - y of control 1\n * @param  {number} x2 - x of control 2\n * @param  {number} y2 - y of control 2\n * @param  {number} x - x of path point\n * @param  {number} y - y of path point\n */\n\n/**\n * Draws cubic curve\n * @function\n * bezierCurveTo\n * @memberof opentype.Path.prototype\n * @param  {number} x1 - x of control 1\n * @param  {number} y1 - y of control 1\n * @param  {number} x2 - x of control 2\n * @param  {number} y2 - y of control 2\n * @param  {number} x - x of path point\n * @param  {number} y - y of path point\n * @see curveTo\n */\nPath.prototype.curveTo = Path.prototype.bezierCurveTo = function(x1, y1, x2, y2, x, y) {\n    this.commands.push({\n        type: 'C',\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2,\n        x: x,\n        y: y\n    });\n};\n\n/**\n * Draws quadratic curve\n * @function\n * quadraticCurveTo\n * @memberof opentype.Path.prototype\n * @param  {number} x1 - x of control\n * @param  {number} y1 - y of control\n * @param  {number} x - x of path point\n * @param  {number} y - y of path point\n */\n\n/**\n * Draws quadratic curve\n * @function\n * quadTo\n * @memberof opentype.Path.prototype\n * @param  {number} x1 - x of control\n * @param  {number} y1 - y of control\n * @param  {number} x - x of path point\n * @param  {number} y - y of path point\n */\nPath.prototype.quadTo = Path.prototype.quadraticCurveTo = function(x1, y1, x, y) {\n    this.commands.push({\n        type: 'Q',\n        x1: x1,\n        y1: y1,\n        x: x,\n        y: y\n    });\n};\n\n/**\n * Closes the path\n * @function closePath\n * @memberof opentype.Path.prototype\n */\n\n/**\n * Close the path\n * @function close\n * @memberof opentype.Path.prototype\n */\nPath.prototype.close = Path.prototype.closePath = function() {\n    this.commands.push({\n        type: 'Z'\n    });\n};\n\n/**\n * Add the given path or list of commands to the commands of this path.\n * @param  {Array} pathOrCommands - another opentype.Path, an opentype.BoundingBox, or an array of commands.\n */\nPath.prototype.extend = function(pathOrCommands) {\n    if (pathOrCommands.commands) {\n        pathOrCommands = pathOrCommands.commands;\n    } else if (pathOrCommands instanceof _bbox__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n        const box = pathOrCommands;\n        this.moveTo(box.x1, box.y1);\n        this.lineTo(box.x2, box.y1);\n        this.lineTo(box.x2, box.y2);\n        this.lineTo(box.x1, box.y2);\n        this.close();\n        return;\n    }\n\n    Array.prototype.push.apply(this.commands, pathOrCommands);\n};\n\n/**\n * Calculate the bounding box of the path.\n * @returns {opentype.BoundingBox}\n */\nPath.prototype.getBoundingBox = function() {\n    const box = new _bbox__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\n    let startX = 0;\n    let startY = 0;\n    let prevX = 0;\n    let prevY = 0;\n    for (let i = 0; i < this.commands.length; i++) {\n        const cmd = this.commands[i];\n        switch (cmd.type) {\n            case 'M':\n                box.addPoint(cmd.x, cmd.y);\n                startX = prevX = cmd.x;\n                startY = prevY = cmd.y;\n                break;\n            case 'L':\n                box.addPoint(cmd.x, cmd.y);\n                prevX = cmd.x;\n                prevY = cmd.y;\n                break;\n            case 'Q':\n                box.addQuad(prevX, prevY, cmd.x1, cmd.y1, cmd.x, cmd.y);\n                prevX = cmd.x;\n                prevY = cmd.y;\n                break;\n            case 'C':\n                box.addBezier(prevX, prevY, cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n                prevX = cmd.x;\n                prevY = cmd.y;\n                break;\n            case 'Z':\n                prevX = startX;\n                prevY = startY;\n                break;\n            default:\n                throw new Error('Unexpected path command ' + cmd.type);\n        }\n    }\n    if (box.isEmpty()) {\n        box.addPoint(0, 0);\n    }\n    return box;\n};\n\n/**\n * Draw the path to a 2D context.\n * @param {CanvasRenderingContext2D} ctx - A 2D drawing context.\n */\nPath.prototype.draw = function(ctx) {\n    ctx.beginPath();\n    for (let i = 0; i < this.commands.length; i += 1) {\n        const cmd = this.commands[i];\n        if (cmd.type === 'M') {\n            ctx.moveTo(cmd.x, cmd.y);\n        } else if (cmd.type === 'L') {\n            ctx.lineTo(cmd.x, cmd.y);\n        } else if (cmd.type === 'C') {\n            ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n        } else if (cmd.type === 'Q') {\n            ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);\n        } else if (cmd.type === 'Z') {\n            ctx.closePath();\n        }\n    }\n\n    if (this.fill) {\n        ctx.fillStyle = this.fill;\n        ctx.fill();\n    }\n\n    if (this.stroke) {\n        ctx.strokeStyle = this.stroke;\n        ctx.lineWidth = this.strokeWidth;\n        ctx.stroke();\n    }\n};\n\n/**\n * Convert the Path to a string of path data instructions\n * See http://www.w3.org/TR/SVG/paths.html#PathData\n * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n * @return {string}\n */\nPath.prototype.toPathData = function(decimalPlaces) {\n    decimalPlaces = decimalPlaces !== undefined ? decimalPlaces : 2;\n\n    function floatToString(v) {\n        if (Math.round(v) === v) {\n            return '' + Math.round(v);\n        } else {\n            return v.toFixed(decimalPlaces);\n        }\n    }\n\n    function packValues() {\n        let s = '';\n        for (let i = 0; i < arguments.length; i += 1) {\n            const v = arguments[i];\n            if (v >= 0 && i > 0) {\n                s += ' ';\n            }\n\n            s += floatToString(v);\n        }\n\n        return s;\n    }\n\n    let d = '';\n    for (let i = 0; i < this.commands.length; i += 1) {\n        const cmd = this.commands[i];\n        if (cmd.type === 'M') {\n            d += 'M' + packValues(cmd.x, cmd.y);\n        } else if (cmd.type === 'L') {\n            d += 'L' + packValues(cmd.x, cmd.y);\n        } else if (cmd.type === 'C') {\n            d += 'C' + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n        } else if (cmd.type === 'Q') {\n            d += 'Q' + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);\n        } else if (cmd.type === 'Z') {\n            d += 'Z';\n        }\n    }\n\n    return d;\n};\n\n/**\n * Convert the path to an SVG <path> element, as a string.\n * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n * @return {string}\n */\nPath.prototype.toSVG = function(decimalPlaces) {\n    let svg = '<path d=\"';\n    svg += this.toPathData(decimalPlaces);\n    svg += '\"';\n    if (this.fill && this.fill !== 'black') {\n        if (this.fill === null) {\n            svg += ' fill=\"none\"';\n        } else {\n            svg += ' fill=\"' + this.fill + '\"';\n        }\n    }\n\n    if (this.stroke) {\n        svg += ' stroke=\"' + this.stroke + '\" stroke-width=\"' + this.strokeWidth + '\"';\n    }\n\n    svg += '/>';\n    return svg;\n};\n\n/**\n * Convert the path to a DOM element.\n * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n * @return {SVGPathElement}\n */\nPath.prototype.toDOMElement = function(decimalPlaces) {\n    const temporaryPath = this.toPathData(decimalPlaces);\n    const newPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n\n    newPath.setAttribute('d', temporaryPath);\n\n    return newPath;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Path);\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/path.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/position.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/position.js ***!
  \*************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./layout */ \"../../node_modules/opentype.js/src/layout.js\");\n// The Position object provides utility methods to manipulate\n// the GPOS position table.\n\n\n\n/**\n * @exports opentype.Position\n * @class\n * @extends opentype.Layout\n * @param {opentype.Font}\n * @constructor\n */\nfunction Position(font) {\n    _layout__WEBPACK_IMPORTED_MODULE_0__[\"default\"].call(this, font, 'gpos');\n}\n\nPosition.prototype = _layout__WEBPACK_IMPORTED_MODULE_0__[\"default\"].prototype;\n\n/**\n * Init some data for faster and easier access later.\n */\nPosition.prototype.init = function() {\n    const script = this.getDefaultScriptName();\n    this.defaultKerningTables = this.getKerningTables(script);\n};\n\n/**\n * Find a glyph pair in a list of lookup tables of type 2 and retrieve the xAdvance kerning value.\n *\n * @param {integer} leftIndex - left glyph index\n * @param {integer} rightIndex - right glyph index\n * @returns {integer}\n */\nPosition.prototype.getKerningValue = function(kerningLookups, leftIndex, rightIndex) {\n    for (let i = 0; i < kerningLookups.length; i++) {\n        const subtables = kerningLookups[i].subtables;\n        for (let j = 0; j < subtables.length; j++) {\n            const subtable = subtables[j];\n            const covIndex = this.getCoverageIndex(subtable.coverage, leftIndex);\n            if (covIndex < 0) continue;\n            switch (subtable.posFormat) {\n                case 1:\n                    // Search Pair Adjustment Positioning Format 1\n                    let pairSet = subtable.pairSets[covIndex];\n                    for (let k = 0; k < pairSet.length; k++) {\n                        let pair = pairSet[k];\n                        if (pair.secondGlyph === rightIndex) {\n                            return pair.value1 && pair.value1.xAdvance || 0;\n                        }\n                    }\n                    break;      // left glyph found, not right glyph - try next subtable\n                case 2:\n                    // Search Pair Adjustment Positioning Format 2\n                    const class1 = this.getGlyphClass(subtable.classDef1, leftIndex);\n                    const class2 = this.getGlyphClass(subtable.classDef2, rightIndex);\n                    const pair = subtable.classRecords[class1][class2];\n                    return pair.value1 && pair.value1.xAdvance || 0;\n            }\n        }\n    }\n    return 0;\n};\n\n/**\n * List all kerning lookup tables.\n *\n * @param {string} [script='DFLT'] - use font.position.getDefaultScriptName() for a better default value\n * @param {string} [language='dflt']\n * @return {object[]} The list of kerning lookup tables (may be empty), or undefined if there is no GPOS table (and we should use the kern table)\n */\nPosition.prototype.getKerningTables = function(script, language) {\n    if (this.font.tables.gpos) {\n        return this.getLookupTables(script, language, 'kern', 2);\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Position);\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/position.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/substitution.js":
/*!*****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/substitution.js ***!
  \*****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./layout */ \"../../node_modules/opentype.js/src/layout.js\");\n// The Substitution object provides utility methods to manipulate\n// the GSUB substitution table.\n\n\n\n\n/**\n * @exports opentype.Substitution\n * @class\n * @extends opentype.Layout\n * @param {opentype.Font}\n * @constructor\n */\nfunction Substitution(font) {\n    _layout__WEBPACK_IMPORTED_MODULE_1__[\"default\"].call(this, font, 'gsub');\n}\n\n// Check if 2 arrays of primitives are equal.\nfunction arraysEqual(ar1, ar2) {\n    const n = ar1.length;\n    if (n !== ar2.length) { return false; }\n    for (let i = 0; i < n; i++) {\n        if (ar1[i] !== ar2[i]) { return false; }\n    }\n    return true;\n}\n\n// Find the first subtable of a lookup table in a particular format.\nfunction getSubstFormat(lookupTable, format, defaultSubtable) {\n    const subtables = lookupTable.subtables;\n    for (let i = 0; i < subtables.length; i++) {\n        const subtable = subtables[i];\n        if (subtable.substFormat === format) {\n            return subtable;\n        }\n    }\n    if (defaultSubtable) {\n        subtables.push(defaultSubtable);\n        return defaultSubtable;\n    }\n    return undefined;\n}\n\nSubstitution.prototype = _layout__WEBPACK_IMPORTED_MODULE_1__[\"default\"].prototype;\n\n/**\n * Create a default GSUB table.\n * @return {Object} gsub - The GSUB table.\n */\nSubstitution.prototype.createDefaultTable = function() {\n    // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.\n    return {\n        version: 1,\n        scripts: [{\n            tag: 'DFLT',\n            script: {\n                defaultLangSys: { reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: [] },\n                langSysRecords: []\n            }\n        }],\n        features: [],\n        lookups: []\n    };\n};\n\n/**\n * List all single substitutions (lookup type 1) for a given script, language, and feature.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)\n * @return {Array} substitutions - The list of substitutions.\n */\nSubstitution.prototype.getSingle = function(feature, script, language) {\n    const substitutions = [];\n    const lookupTables = this.getLookupTables(script, language, feature, 1);\n    for (let idx = 0; idx < lookupTables.length; idx++) {\n        const subtables = lookupTables[idx].subtables;\n        for (let i = 0; i < subtables.length; i++) {\n            const subtable = subtables[i];\n            const glyphs = this.expandCoverage(subtable.coverage);\n            let j;\n            if (subtable.substFormat === 1) {\n                const delta = subtable.deltaGlyphId;\n                for (j = 0; j < glyphs.length; j++) {\n                    const glyph = glyphs[j];\n                    substitutions.push({ sub: glyph, by: glyph + delta });\n                }\n            } else {\n                const substitute = subtable.substitute;\n                for (j = 0; j < glyphs.length; j++) {\n                    substitutions.push({ sub: glyphs[j], by: substitute[j] });\n                }\n            }\n        }\n    }\n    return substitutions;\n};\n\n/**\n * List all alternates (lookup type 3) for a given script, language, and feature.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @param {string} feature - 4-character feature name ('aalt', 'salt'...)\n * @return {Array} alternates - The list of alternates\n */\nSubstitution.prototype.getAlternates = function(feature, script, language) {\n    const alternates = [];\n    const lookupTables = this.getLookupTables(script, language, feature, 3);\n    for (let idx = 0; idx < lookupTables.length; idx++) {\n        const subtables = lookupTables[idx].subtables;\n        for (let i = 0; i < subtables.length; i++) {\n            const subtable = subtables[i];\n            const glyphs = this.expandCoverage(subtable.coverage);\n            const alternateSets = subtable.alternateSets;\n            for (let j = 0; j < glyphs.length; j++) {\n                alternates.push({ sub: glyphs[j], by: alternateSets[j] });\n            }\n        }\n    }\n    return alternates;\n};\n\n/**\n * List all ligatures (lookup type 4) for a given script, language, and feature.\n * The result is an array of ligature objects like { sub: [ids], by: id }\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @return {Array} ligatures - The list of ligatures.\n */\nSubstitution.prototype.getLigatures = function(feature, script, language) {\n    const ligatures = [];\n    const lookupTables = this.getLookupTables(script, language, feature, 4);\n    for (let idx = 0; idx < lookupTables.length; idx++) {\n        const subtables = lookupTables[idx].subtables;\n        for (let i = 0; i < subtables.length; i++) {\n            const subtable = subtables[i];\n            const glyphs = this.expandCoverage(subtable.coverage);\n            const ligatureSets = subtable.ligatureSets;\n            for (let j = 0; j < glyphs.length; j++) {\n                const startGlyph = glyphs[j];\n                const ligSet = ligatureSets[j];\n                for (let k = 0; k < ligSet.length; k++) {\n                    const lig = ligSet[k];\n                    ligatures.push({\n                        sub: [startGlyph].concat(lig.components),\n                        by: lig.ligGlyph\n                    });\n                }\n            }\n        }\n    }\n    return ligatures;\n};\n\n/**\n * Add or modify a single substitution (lookup type 1)\n * Format 2, more flexible, is always used.\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} substitution - { sub: id, delta: number } for format 1 or { sub: id, by: id } for format 2.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addSingle = function(feature, substitution, script, language) {\n    const lookupTable = this.getLookupTables(script, language, feature, 1, true)[0];\n    const subtable = getSubstFormat(lookupTable, 2, {                // lookup type 1 subtable, format 2, coverage format 1\n        substFormat: 2,\n        coverage: {format: 1, glyphs: []},\n        substitute: []\n    });\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n    const coverageGlyph = substitution.sub;\n    let pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos < 0) {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.substitute.splice(pos, 0, 0);\n    }\n    subtable.substitute[pos] = substitution.by;\n};\n\n/**\n * Add or modify an alternate substitution (lookup type 1)\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} substitution - { sub: id, by: [ids] }\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addAlternate = function(feature, substitution, script, language) {\n    const lookupTable = this.getLookupTables(script, language, feature, 3, true)[0];\n    const subtable = getSubstFormat(lookupTable, 1, {                // lookup type 3 subtable, format 1, coverage format 1\n        substFormat: 1,\n        coverage: {format: 1, glyphs: []},\n        alternateSets: []\n    });\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n    const coverageGlyph = substitution.sub;\n    let pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos < 0) {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.alternateSets.splice(pos, 0, 0);\n    }\n    subtable.alternateSets[pos] = substitution.by;\n};\n\n/**\n * Add a ligature (lookup type 4)\n * Ligatures with more components must be stored ahead of those with fewer components in order to be found\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} ligature - { sub: [ids], by: id }\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addLigature = function(feature, ligature, script, language) {\n    const lookupTable = this.getLookupTables(script, language, feature, 4, true)[0];\n    let subtable = lookupTable.subtables[0];\n    if (!subtable) {\n        subtable = {                // lookup type 4 subtable, format 1, coverage format 1\n            substFormat: 1,\n            coverage: { format: 1, glyphs: [] },\n            ligatureSets: []\n        };\n        lookupTable.subtables[0] = subtable;\n    }\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n    const coverageGlyph = ligature.sub[0];\n    const ligComponents = ligature.sub.slice(1);\n    const ligatureTable = {\n        ligGlyph: ligature.by,\n        components: ligComponents\n    };\n    let pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos >= 0) {\n        // ligatureSet already exists\n        const ligatureSet = subtable.ligatureSets[pos];\n        for (let i = 0; i < ligatureSet.length; i++) {\n            // If ligature already exists, return.\n            if (arraysEqual(ligatureSet[i].components, ligComponents)) {\n                return;\n            }\n        }\n        // ligature does not exist: add it.\n        ligatureSet.push(ligatureTable);\n    } else {\n        // Create a new ligatureSet and add coverage for the first glyph.\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.ligatureSets.splice(pos, 0, [ligatureTable]);\n    }\n};\n\n/**\n * List all feature data for a given script and language.\n * @param {string} feature - 4-letter feature name\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @return {Array} substitutions - The list of substitutions.\n */\nSubstitution.prototype.getFeature = function(feature, script, language) {\n    if (/ss\\d\\d/.test(feature)) {\n        // ss01 - ss20\n        return this.getSingle(feature, script, language);\n    }\n    switch (feature) {\n        case 'aalt':\n        case 'salt':\n            return this.getSingle(feature, script, language)\n                    .concat(this.getAlternates(feature, script, language));\n        case 'dlig':\n        case 'liga':\n        case 'rlig': return this.getLigatures(feature, script, language);\n    }\n    return undefined;\n};\n\n/**\n * Add a substitution to a feature for a given script and language.\n * @param {string} feature - 4-letter feature name\n * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.add = function(feature, sub, script, language) {\n    if (/ss\\d\\d/.test(feature)) {\n        // ss01 - ss20\n        return this.addSingle(feature, sub, script, language);\n    }\n    switch (feature) {\n        case 'aalt':\n        case 'salt':\n            if (typeof sub.by === 'number') {\n                return this.addSingle(feature, sub, script, language);\n            }\n            return this.addAlternate(feature, sub, script, language);\n        case 'dlig':\n        case 'liga':\n        case 'rlig':\n            return this.addLigature(feature, sub, script, language);\n    }\n    return undefined;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Substitution);\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/substitution.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/table.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/table.js ***!
  \**********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ \"../../node_modules/opentype.js/src/types.js\");\n// Table metadata\n\n\n\n\n/**\n * @exports opentype.Table\n * @class\n * @param {string} tableName\n * @param {Array} fields\n * @param {Object} options\n * @constructor\n */\nfunction Table(tableName, fields, options) {\n    for (let i = 0; i < fields.length; i += 1) {\n        const field = fields[i];\n        this[field.name] = field.value;\n    }\n\n    this.tableName = tableName;\n    this.fields = fields;\n    if (options) {\n        const optionKeys = Object.keys(options);\n        for (let i = 0; i < optionKeys.length; i += 1) {\n            const k = optionKeys[i];\n            const v = options[k];\n            if (this[k] !== undefined) {\n                this[k] = v;\n            }\n        }\n    }\n}\n\n/**\n * Encodes the table and returns an array of bytes\n * @return {Array}\n */\nTable.prototype.encode = function() {\n    return _types__WEBPACK_IMPORTED_MODULE_1__[\"encode\"].TABLE(this);\n};\n\n/**\n * Get the size of the table.\n * @return {number}\n */\nTable.prototype.sizeOf = function() {\n    return _types__WEBPACK_IMPORTED_MODULE_1__[\"sizeOf\"].TABLE(this);\n};\n\n/**\n * @private\n */\nfunction ushortList(itemName, list, count) {\n    if (count === undefined) {\n        count = list.length;\n    }\n    const fields = new Array(list.length + 1);\n    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};\n    for (let i = 0; i < list.length; i++) {\n        fields[i + 1] = {name: itemName + i, type: 'USHORT', value: list[i]};\n    }\n    return fields;\n}\n\n/**\n * @private\n */\nfunction tableList(itemName, records, itemCallback) {\n    const count = records.length;\n    const fields = new Array(count + 1);\n    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};\n    for (let i = 0; i < count; i++) {\n        fields[i + 1] = {name: itemName + i, type: 'TABLE', value: itemCallback(records[i], i)};\n    }\n    return fields;\n}\n\n/**\n * @private\n */\nfunction recordList(itemName, records, itemCallback) {\n    const count = records.length;\n    let fields = [];\n    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};\n    for (let i = 0; i < count; i++) {\n        fields = fields.concat(itemCallback(records[i], i));\n    }\n    return fields;\n}\n\n// Common Layout Tables\n\n/**\n * @exports opentype.Coverage\n * @class\n * @param {opentype.Table}\n * @constructor\n * @extends opentype.Table\n */\nfunction Coverage(coverageTable) {\n    if (coverageTable.format === 1) {\n        Table.call(this, 'coverageTable',\n            [{name: 'coverageFormat', type: 'USHORT', value: 1}]\n            .concat(ushortList('glyph', coverageTable.glyphs))\n        );\n    } else {\n        _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(false, 'Can\\'t create coverage table format 2 yet.');\n    }\n}\nCoverage.prototype = Object.create(Table.prototype);\nCoverage.prototype.constructor = Coverage;\n\nfunction ScriptList(scriptListTable) {\n    Table.call(this, 'scriptListTable',\n        recordList('scriptRecord', scriptListTable, function(scriptRecord, i) {\n            const script = scriptRecord.script;\n            let defaultLangSys = script.defaultLangSys;\n            _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(!!defaultLangSys, 'Unable to write GSUB: script ' + scriptRecord.tag + ' has no default language system.');\n            return [\n                {name: 'scriptTag' + i, type: 'TAG', value: scriptRecord.tag},\n                {name: 'script' + i, type: 'TABLE', value: new Table('scriptTable', [\n                    {name: 'defaultLangSys', type: 'TABLE', value: new Table('defaultLangSys', [\n                        {name: 'lookupOrder', type: 'USHORT', value: 0},\n                        {name: 'reqFeatureIndex', type: 'USHORT', value: defaultLangSys.reqFeatureIndex}]\n                        .concat(ushortList('featureIndex', defaultLangSys.featureIndexes)))}\n                    ].concat(recordList('langSys', script.langSysRecords, function(langSysRecord, i) {\n                        const langSys = langSysRecord.langSys;\n                        return [\n                            {name: 'langSysTag' + i, type: 'TAG', value: langSysRecord.tag},\n                            {name: 'langSys' + i, type: 'TABLE', value: new Table('langSys', [\n                                {name: 'lookupOrder', type: 'USHORT', value: 0},\n                                {name: 'reqFeatureIndex', type: 'USHORT', value: langSys.reqFeatureIndex}\n                                ].concat(ushortList('featureIndex', langSys.featureIndexes)))}\n                        ];\n                    })))}\n            ];\n        })\n    );\n}\nScriptList.prototype = Object.create(Table.prototype);\nScriptList.prototype.constructor = ScriptList;\n\n/**\n * @exports opentype.FeatureList\n * @class\n * @param {opentype.Table}\n * @constructor\n * @extends opentype.Table\n */\nfunction FeatureList(featureListTable) {\n    Table.call(this, 'featureListTable',\n        recordList('featureRecord', featureListTable, function(featureRecord, i) {\n            const feature = featureRecord.feature;\n            return [\n                {name: 'featureTag' + i, type: 'TAG', value: featureRecord.tag},\n                {name: 'feature' + i, type: 'TABLE', value: new Table('featureTable', [\n                    {name: 'featureParams', type: 'USHORT', value: feature.featureParams},\n                    ].concat(ushortList('lookupListIndex', feature.lookupListIndexes)))}\n            ];\n        })\n    );\n}\nFeatureList.prototype = Object.create(Table.prototype);\nFeatureList.prototype.constructor = FeatureList;\n\n/**\n * @exports opentype.LookupList\n * @class\n * @param {opentype.Table}\n * @param {Object}\n * @constructor\n * @extends opentype.Table\n */\nfunction LookupList(lookupListTable, subtableMakers) {\n    Table.call(this, 'lookupListTable', tableList('lookup', lookupListTable, function(lookupTable) {\n        let subtableCallback = subtableMakers[lookupTable.lookupType];\n        _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(!!subtableCallback, 'Unable to write GSUB lookup type ' + lookupTable.lookupType + ' tables.');\n        return new Table('lookupTable', [\n            {name: 'lookupType', type: 'USHORT', value: lookupTable.lookupType},\n            {name: 'lookupFlag', type: 'USHORT', value: lookupTable.lookupFlag}\n        ].concat(tableList('subtable', lookupTable.subtables, subtableCallback)));\n    }));\n}\nLookupList.prototype = Object.create(Table.prototype);\nLookupList.prototype.constructor = LookupList;\n\n// Record = same as Table, but inlined (a Table has an offset and its data is further in the stream)\n// Don't use offsets inside Records (probable bug), only in Tables.\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    Table,\n    Record: Table,\n    Coverage,\n    ScriptList,\n    FeatureList,\n    LookupList,\n    ushortList,\n    tableList,\n    recordList,\n});\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/table.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/cff.js":
/*!***************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/cff.js ***!
  \***************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../encoding */ \"../../node_modules/opentype.js/src/encoding.js\");\n/* harmony import */ var _glyphset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../glyphset */ \"../../node_modules/opentype.js/src/glyphset.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../path */ \"../../node_modules/opentype.js/src/path.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `CFF` table contains the glyph outlines in PostScript format.\n// https://www.microsoft.com/typography/OTSPEC/cff.htm\n// http://download.microsoft.com/download/8/0/1/801a191c-029d-4af3-9642-555f6fe514ee/cff.pdf\n// http://download.microsoft.com/download/8/0/1/801a191c-029d-4af3-9642-555f6fe514ee/type2.pdf\n\n\n\n\n\n\n\n// Custom equals function that can also check lists.\nfunction equals(a, b) {\n    if (a === b) {\n        return true;\n    } else if (Array.isArray(a) && Array.isArray(b)) {\n        if (a.length !== b.length) {\n            return false;\n        }\n\n        for (let i = 0; i < a.length; i += 1) {\n            if (!equals(a[i], b[i])) {\n                return false;\n            }\n        }\n\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Subroutines are encoded using the negative half of the number space.\n// See type 2 chapter 4.7 \"Subroutine operators\".\nfunction calcCFFSubroutineBias(subrs) {\n    let bias;\n    if (subrs.length < 1240) {\n        bias = 107;\n    } else if (subrs.length < 33900) {\n        bias = 1131;\n    } else {\n        bias = 32768;\n    }\n\n    return bias;\n}\n\n// Parse a `CFF` INDEX array.\n// An index array consists of a list of offsets, then a list of objects at those offsets.\nfunction parseCFFIndex(data, start, conversionFn) {\n    const offsets = [];\n    const objects = [];\n    const count = _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getCard16(data, start);\n    let objectOffset;\n    let endOffset;\n    if (count !== 0) {\n        const offsetSize = _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getByte(data, start + 2);\n        objectOffset = start + ((count + 1) * offsetSize) + 2;\n        let pos = start + 3;\n        for (let i = 0; i < count + 1; i += 1) {\n            offsets.push(_parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getOffset(data, pos, offsetSize));\n            pos += offsetSize;\n        }\n\n        // The total size of the index array is 4 header bytes + the value of the last offset.\n        endOffset = objectOffset + offsets[count];\n    } else {\n        endOffset = start + 2;\n    }\n\n    for (let i = 0; i < offsets.length - 1; i += 1) {\n        let value = _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getBytes(data, objectOffset + offsets[i], objectOffset + offsets[i + 1]);\n        if (conversionFn) {\n            value = conversionFn(value);\n        }\n\n        objects.push(value);\n    }\n\n    return {objects: objects, startOffset: start, endOffset: endOffset};\n}\n\n// Parse a `CFF` DICT real value.\nfunction parseFloatOperand(parser) {\n    let s = '';\n    const eof = 15;\n    const lookup = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];\n    while (true) {\n        const b = parser.parseByte();\n        const n1 = b >> 4;\n        const n2 = b & 15;\n\n        if (n1 === eof) {\n            break;\n        }\n\n        s += lookup[n1];\n\n        if (n2 === eof) {\n            break;\n        }\n\n        s += lookup[n2];\n    }\n\n    return parseFloat(s);\n}\n\n// Parse a `CFF` DICT operand.\nfunction parseOperand(parser, b0) {\n    let b1;\n    let b2;\n    let b3;\n    let b4;\n    if (b0 === 28) {\n        b1 = parser.parseByte();\n        b2 = parser.parseByte();\n        return b1 << 8 | b2;\n    }\n\n    if (b0 === 29) {\n        b1 = parser.parseByte();\n        b2 = parser.parseByte();\n        b3 = parser.parseByte();\n        b4 = parser.parseByte();\n        return b1 << 24 | b2 << 16 | b3 << 8 | b4;\n    }\n\n    if (b0 === 30) {\n        return parseFloatOperand(parser);\n    }\n\n    if (b0 >= 32 && b0 <= 246) {\n        return b0 - 139;\n    }\n\n    if (b0 >= 247 && b0 <= 250) {\n        b1 = parser.parseByte();\n        return (b0 - 247) * 256 + b1 + 108;\n    }\n\n    if (b0 >= 251 && b0 <= 254) {\n        b1 = parser.parseByte();\n        return -(b0 - 251) * 256 - b1 - 108;\n    }\n\n    throw new Error('Invalid b0 ' + b0);\n}\n\n// Convert the entries returned by `parseDict` to a proper dictionary.\n// If a value is a list of one, it is unpacked.\nfunction entriesToObject(entries) {\n    const o = {};\n    for (let i = 0; i < entries.length; i += 1) {\n        const key = entries[i][0];\n        const values = entries[i][1];\n        let value;\n        if (values.length === 1) {\n            value = values[0];\n        } else {\n            value = values;\n        }\n\n        if (o.hasOwnProperty(key) && !isNaN(o[key])) {\n            throw new Error('Object ' + o + ' already has key ' + key);\n        }\n\n        o[key] = value;\n    }\n\n    return o;\n}\n\n// Parse a `CFF` DICT object.\n// A dictionary contains key-value pairs in a compact tokenized format.\nfunction parseCFFDict(data, start, size) {\n    start = start !== undefined ? start : 0;\n    const parser = new _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Parser(data, start);\n    const entries = [];\n    let operands = [];\n    size = size !== undefined ? size : data.length;\n\n    while (parser.relativeOffset < size) {\n        let op = parser.parseByte();\n\n        // The first byte for each dict item distinguishes between operator (key) and operand (value).\n        // Values <= 21 are operators.\n        if (op <= 21) {\n            // Two-byte operators have an initial escape byte of 12.\n            if (op === 12) {\n                op = 1200 + parser.parseByte();\n            }\n\n            entries.push([op, operands]);\n            operands = [];\n        } else {\n            // Since the operands (values) come before the operators (keys), we store all operands in a list\n            // until we encounter an operator.\n            operands.push(parseOperand(parser, op));\n        }\n    }\n\n    return entriesToObject(entries);\n}\n\n// Given a String Index (SID), return the value of the string.\n// Strings below index 392 are standard CFF strings and are not encoded in the font.\nfunction getCFFString(strings, index) {\n    if (index <= 390) {\n        index = _encoding__WEBPACK_IMPORTED_MODULE_0__[\"cffStandardStrings\"][index];\n    } else {\n        index = strings[index - 391];\n    }\n\n    return index;\n}\n\n// Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.\n// This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.\nfunction interpretDict(dict, meta, strings) {\n    const newDict = {};\n    let value;\n\n    // Because we also want to include missing values, we start out from the meta list\n    // and lookup values in the dict.\n    for (let i = 0; i < meta.length; i += 1) {\n        const m = meta[i];\n\n        if (Array.isArray(m.type)) {\n            const values = [];\n            values.length = m.type.length;\n            for (let j = 0; j < m.type.length; j++) {\n                value = dict[m.op] !== undefined ? dict[m.op][j] : undefined;\n                if (value === undefined) {\n                    value = m.value !== undefined && m.value[j] !== undefined ? m.value[j] : null;\n                }\n                if (m.type[j] === 'SID') {\n                    value = getCFFString(strings, value);\n                }\n                values[j] = value;\n            }\n            newDict[m.name] = values;\n        } else {\n            value = dict[m.op];\n            if (value === undefined) {\n                value = m.value !== undefined ? m.value : null;\n            }\n\n            if (m.type === 'SID') {\n                value = getCFFString(strings, value);\n            }\n            newDict[m.name] = value;\n        }\n    }\n\n    return newDict;\n}\n\n// Parse the CFF header.\nfunction parseCFFHeader(data, start) {\n    const header = {};\n    header.formatMajor = _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getCard8(data, start);\n    header.formatMinor = _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getCard8(data, start + 1);\n    header.size = _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getCard8(data, start + 2);\n    header.offsetSize = _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getCard8(data, start + 3);\n    header.startOffset = start;\n    header.endOffset = start + 4;\n    return header;\n}\n\nconst TOP_DICT_META = [\n    {name: 'version', op: 0, type: 'SID'},\n    {name: 'notice', op: 1, type: 'SID'},\n    {name: 'copyright', op: 1200, type: 'SID'},\n    {name: 'fullName', op: 2, type: 'SID'},\n    {name: 'familyName', op: 3, type: 'SID'},\n    {name: 'weight', op: 4, type: 'SID'},\n    {name: 'isFixedPitch', op: 1201, type: 'number', value: 0},\n    {name: 'italicAngle', op: 1202, type: 'number', value: 0},\n    {name: 'underlinePosition', op: 1203, type: 'number', value: -100},\n    {name: 'underlineThickness', op: 1204, type: 'number', value: 50},\n    {name: 'paintType', op: 1205, type: 'number', value: 0},\n    {name: 'charstringType', op: 1206, type: 'number', value: 2},\n    {\n        name: 'fontMatrix',\n        op: 1207,\n        type: ['real', 'real', 'real', 'real', 'real', 'real'],\n        value: [0.001, 0, 0, 0.001, 0, 0]\n    },\n    {name: 'uniqueId', op: 13, type: 'number'},\n    {name: 'fontBBox', op: 5, type: ['number', 'number', 'number', 'number'], value: [0, 0, 0, 0]},\n    {name: 'strokeWidth', op: 1208, type: 'number', value: 0},\n    {name: 'xuid', op: 14, type: [], value: null},\n    {name: 'charset', op: 15, type: 'offset', value: 0},\n    {name: 'encoding', op: 16, type: 'offset', value: 0},\n    {name: 'charStrings', op: 17, type: 'offset', value: 0},\n    {name: 'private', op: 18, type: ['number', 'offset'], value: [0, 0]},\n    {name: 'ros', op: 1230, type: ['SID', 'SID', 'number']},\n    {name: 'cidFontVersion', op: 1231, type: 'number', value: 0},\n    {name: 'cidFontRevision', op: 1232, type: 'number', value: 0},\n    {name: 'cidFontType', op: 1233, type: 'number', value: 0},\n    {name: 'cidCount', op: 1234, type: 'number', value: 8720},\n    {name: 'uidBase', op: 1235, type: 'number'},\n    {name: 'fdArray', op: 1236, type: 'offset'},\n    {name: 'fdSelect', op: 1237, type: 'offset'},\n    {name: 'fontName', op: 1238, type: 'SID'}\n];\n\nconst PRIVATE_DICT_META = [\n    {name: 'subrs', op: 19, type: 'offset', value: 0},\n    {name: 'defaultWidthX', op: 20, type: 'number', value: 0},\n    {name: 'nominalWidthX', op: 21, type: 'number', value: 0}\n];\n\n// Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.\n// The top dictionary contains the essential metadata for the font, together with the private dictionary.\nfunction parseCFFTopDict(data, strings) {\n    const dict = parseCFFDict(data, 0, data.byteLength);\n    return interpretDict(dict, TOP_DICT_META, strings);\n}\n\n// Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.\nfunction parseCFFPrivateDict(data, start, size, strings) {\n    const dict = parseCFFDict(data, start, size);\n    return interpretDict(dict, PRIVATE_DICT_META, strings);\n}\n\n// Returns a list of \"Top DICT\"s found using an INDEX list.\n// Used to read both the usual high-level Top DICTs and also the FDArray\n// discovered inside CID-keyed fonts.  When a Top DICT has a reference to\n// a Private DICT that is read and saved into the Top DICT.\n//\n// In addition to the expected/optional values as outlined in TOP_DICT_META\n// the following values might be saved into the Top DICT.\n//\n//    _subrs []        array of local CFF subroutines from Private DICT\n//    _subrsBias       bias value computed from number of subroutines\n//                      (see calcCFFSubroutineBias() and parseCFFCharstring())\n//    _defaultWidthX   default widths for CFF characters\n//    _nominalWidthX   bias added to width embedded within glyph description\n//\n//    _privateDict     saved copy of parsed Private DICT from Top DICT\nfunction gatherCFFTopDicts(data, start, cffIndex, strings) {\n    const topDictArray = [];\n    for (let iTopDict = 0; iTopDict < cffIndex.length; iTopDict += 1) {\n        const topDictData = new DataView(new Uint8Array(cffIndex[iTopDict]).buffer);\n        const topDict = parseCFFTopDict(topDictData, strings);\n        topDict._subrs = [];\n        topDict._subrsBias = 0;\n        const privateSize = topDict.private[0];\n        const privateOffset = topDict.private[1];\n        if (privateSize !== 0 && privateOffset !== 0) {\n            const privateDict = parseCFFPrivateDict(data, privateOffset + start, privateSize, strings);\n            topDict._defaultWidthX = privateDict.defaultWidthX;\n            topDict._nominalWidthX = privateDict.nominalWidthX;\n            if (privateDict.subrs !== 0) {\n                const subrOffset = privateOffset + privateDict.subrs;\n                const subrIndex = parseCFFIndex(data, subrOffset + start);\n                topDict._subrs = subrIndex.objects;\n                topDict._subrsBias = calcCFFSubroutineBias(topDict._subrs);\n            }\n            topDict._privateDict = privateDict;\n        }\n        topDictArray.push(topDict);\n    }\n    return topDictArray;\n}\n\n// Parse the CFF charset table, which contains internal names for all the glyphs.\n// This function will return a list of glyph names.\n// See Adobe TN #5176 chapter 13, \"Charsets\".\nfunction parseCFFCharset(data, start, nGlyphs, strings) {\n    let sid;\n    let count;\n    const parser = new _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Parser(data, start);\n\n    // The .notdef glyph is not included, so subtract 1.\n    nGlyphs -= 1;\n    const charset = ['.notdef'];\n\n    const format = parser.parseCard8();\n    if (format === 0) {\n        for (let i = 0; i < nGlyphs; i += 1) {\n            sid = parser.parseSID();\n            charset.push(getCFFString(strings, sid));\n        }\n    } else if (format === 1) {\n        while (charset.length <= nGlyphs) {\n            sid = parser.parseSID();\n            count = parser.parseCard8();\n            for (let i = 0; i <= count; i += 1) {\n                charset.push(getCFFString(strings, sid));\n                sid += 1;\n            }\n        }\n    } else if (format === 2) {\n        while (charset.length <= nGlyphs) {\n            sid = parser.parseSID();\n            count = parser.parseCard16();\n            for (let i = 0; i <= count; i += 1) {\n                charset.push(getCFFString(strings, sid));\n                sid += 1;\n            }\n        }\n    } else {\n        throw new Error('Unknown charset format ' + format);\n    }\n\n    return charset;\n}\n\n// Parse the CFF encoding data. Only one encoding can be specified per font.\n// See Adobe TN #5176 chapter 12, \"Encodings\".\nfunction parseCFFEncoding(data, start, charset) {\n    let code;\n    const enc = {};\n    const parser = new _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Parser(data, start);\n    const format = parser.parseCard8();\n    if (format === 0) {\n        const nCodes = parser.parseCard8();\n        for (let i = 0; i < nCodes; i += 1) {\n            code = parser.parseCard8();\n            enc[code] = i;\n        }\n    } else if (format === 1) {\n        const nRanges = parser.parseCard8();\n        code = 1;\n        for (let i = 0; i < nRanges; i += 1) {\n            const first = parser.parseCard8();\n            const nLeft = parser.parseCard8();\n            for (let j = first; j <= first + nLeft; j += 1) {\n                enc[j] = code;\n                code += 1;\n            }\n        }\n    } else {\n        throw new Error('Unknown encoding format ' + format);\n    }\n\n    return new _encoding__WEBPACK_IMPORTED_MODULE_0__[\"CffEncoding\"](enc, charset);\n}\n\n// Take in charstring code and return a Glyph object.\n// The encoding is described in the Type 2 Charstring Format\n// https://www.microsoft.com/typography/OTSPEC/charstr2.htm\nfunction parseCFFCharstring(font, glyph, code) {\n    let c1x;\n    let c1y;\n    let c2x;\n    let c2y;\n    const p = new _path__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n    const stack = [];\n    let nStems = 0;\n    let haveWidth = false;\n    let open = false;\n    let x = 0;\n    let y = 0;\n    let subrs;\n    let subrsBias;\n    let defaultWidthX;\n    let nominalWidthX;\n    if (font.isCIDFont) {\n        const fdIndex = font.tables.cff.topDict._fdSelect[glyph.index];\n        const fdDict = font.tables.cff.topDict._fdArray[fdIndex];\n        subrs = fdDict._subrs;\n        subrsBias = fdDict._subrsBias;\n        defaultWidthX = fdDict._defaultWidthX;\n        nominalWidthX = fdDict._nominalWidthX;\n    } else {\n        subrs = font.tables.cff.topDict._subrs;\n        subrsBias = font.tables.cff.topDict._subrsBias;\n        defaultWidthX = font.tables.cff.topDict._defaultWidthX;\n        nominalWidthX = font.tables.cff.topDict._nominalWidthX;\n    }\n    let width = defaultWidthX;\n\n    function newContour(x, y) {\n        if (open) {\n            p.closePath();\n        }\n\n        p.moveTo(x, y);\n        open = true;\n    }\n\n    function parseStems() {\n        let hasWidthArg;\n\n        // The number of stem operators on the stack is always even.\n        // If the value is uneven, that means a width is specified.\n        hasWidthArg = stack.length % 2 !== 0;\n        if (hasWidthArg && !haveWidth) {\n            width = stack.shift() + nominalWidthX;\n        }\n\n        nStems += stack.length >> 1;\n        stack.length = 0;\n        haveWidth = true;\n    }\n\n    function parse(code) {\n        let b1;\n        let b2;\n        let b3;\n        let b4;\n        let codeIndex;\n        let subrCode;\n        let jpx;\n        let jpy;\n        let c3x;\n        let c3y;\n        let c4x;\n        let c4y;\n\n        let i = 0;\n        while (i < code.length) {\n            let v = code[i];\n            i += 1;\n            switch (v) {\n                case 1: // hstem\n                    parseStems();\n                    break;\n                case 3: // vstem\n                    parseStems();\n                    break;\n                case 4: // vmoveto\n                    if (stack.length > 1 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n\n                    y += stack.pop();\n                    newContour(x, y);\n                    break;\n                case 5: // rlineto\n                    while (stack.length > 0) {\n                        x += stack.shift();\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                    }\n\n                    break;\n                case 6: // hlineto\n                    while (stack.length > 0) {\n                        x += stack.shift();\n                        p.lineTo(x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                    }\n\n                    break;\n                case 7: // vlineto\n                    while (stack.length > 0) {\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n\n                        x += stack.shift();\n                        p.lineTo(x, y);\n                    }\n\n                    break;\n                case 8: // rrcurveto\n                    while (stack.length > 0) {\n                        c1x = x + stack.shift();\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + stack.shift();\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    break;\n                case 10: // callsubr\n                    codeIndex = stack.pop() + subrsBias;\n                    subrCode = subrs[codeIndex];\n                    if (subrCode) {\n                        parse(subrCode);\n                    }\n\n                    break;\n                case 11: // return\n                    return;\n                case 12: // flex operators\n                    v = code[i];\n                    i += 1;\n                    switch (v) {\n                        case 35: // flex\n                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 dx6 dy6 fd flex (12 35) |-\n                            c1x = x   + stack.shift();    // dx1\n                            c1y = y   + stack.shift();    // dy1\n                            c2x = c1x + stack.shift();    // dx2\n                            c2y = c1y + stack.shift();    // dy2\n                            jpx = c2x + stack.shift();    // dx3\n                            jpy = c2y + stack.shift();    // dy3\n                            c3x = jpx + stack.shift();    // dx4\n                            c3y = jpy + stack.shift();    // dy4\n                            c4x = c3x + stack.shift();    // dx5\n                            c4y = c3y + stack.shift();    // dy5\n                            x = c4x   + stack.shift();    // dx6\n                            y = c4y   + stack.shift();    // dy6\n                            stack.shift();                // flex depth\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        case 34: // hflex\n                            // |- dx1 dx2 dy2 dx3 dx4 dx5 dx6 hflex (12 34) |-\n                            c1x = x   + stack.shift();    // dx1\n                            c1y = y;                      // dy1\n                            c2x = c1x + stack.shift();    // dx2\n                            c2y = c1y + stack.shift();    // dy2\n                            jpx = c2x + stack.shift();    // dx3\n                            jpy = c2y;                    // dy3\n                            c3x = jpx + stack.shift();    // dx4\n                            c3y = c2y;                    // dy4\n                            c4x = c3x + stack.shift();    // dx5\n                            c4y = y;                      // dy5\n                            x = c4x + stack.shift();      // dx6\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        case 36: // hflex1\n                            // |- dx1 dy1 dx2 dy2 dx3 dx4 dx5 dy5 dx6 hflex1 (12 36) |-\n                            c1x = x   + stack.shift();    // dx1\n                            c1y = y   + stack.shift();    // dy1\n                            c2x = c1x + stack.shift();    // dx2\n                            c2y = c1y + stack.shift();    // dy2\n                            jpx = c2x + stack.shift();    // dx3\n                            jpy = c2y;                    // dy3\n                            c3x = jpx + stack.shift();    // dx4\n                            c3y = c2y;                    // dy4\n                            c4x = c3x + stack.shift();    // dx5\n                            c4y = c3y + stack.shift();    // dy5\n                            x = c4x + stack.shift();      // dx6\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        case 37: // flex1\n                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 d6 flex1 (12 37) |-\n                            c1x = x   + stack.shift();    // dx1\n                            c1y = y   + stack.shift();    // dy1\n                            c2x = c1x + stack.shift();    // dx2\n                            c2y = c1y + stack.shift();    // dy2\n                            jpx = c2x + stack.shift();    // dx3\n                            jpy = c2y + stack.shift();    // dy3\n                            c3x = jpx + stack.shift();    // dx4\n                            c3y = jpy + stack.shift();    // dy4\n                            c4x = c3x + stack.shift();    // dx5\n                            c4y = c3y + stack.shift();    // dy5\n                            if (Math.abs(c4x - x) > Math.abs(c4y - y)) {\n                                x = c4x + stack.shift();\n                            } else {\n                                y = c4y + stack.shift();\n                            }\n\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        default:\n                            console.log('Glyph ' + glyph.index + ': unknown operator ' + 1200 + v);\n                            stack.length = 0;\n                    }\n                    break;\n                case 14: // endchar\n                    if (stack.length > 0 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n\n                    if (open) {\n                        p.closePath();\n                        open = false;\n                    }\n\n                    break;\n                case 18: // hstemhm\n                    parseStems();\n                    break;\n                case 19: // hintmask\n                case 20: // cntrmask\n                    parseStems();\n                    i += (nStems + 7) >> 3;\n                    break;\n                case 21: // rmoveto\n                    if (stack.length > 2 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n\n                    y += stack.pop();\n                    x += stack.pop();\n                    newContour(x, y);\n                    break;\n                case 22: // hmoveto\n                    if (stack.length > 1 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n\n                    x += stack.pop();\n                    newContour(x, y);\n                    break;\n                case 23: // vstemhm\n                    parseStems();\n                    break;\n                case 24: // rcurveline\n                    while (stack.length > 2) {\n                        c1x = x + stack.shift();\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + stack.shift();\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    x += stack.shift();\n                    y += stack.shift();\n                    p.lineTo(x, y);\n                    break;\n                case 25: // rlinecurve\n                    while (stack.length > 6) {\n                        x += stack.shift();\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                    }\n\n                    c1x = x + stack.shift();\n                    c1y = y + stack.shift();\n                    c2x = c1x + stack.shift();\n                    c2y = c1y + stack.shift();\n                    x = c2x + stack.shift();\n                    y = c2y + stack.shift();\n                    p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    break;\n                case 26: // vvcurveto\n                    if (stack.length % 2) {\n                        x += stack.shift();\n                    }\n\n                    while (stack.length > 0) {\n                        c1x = x;\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x;\n                        y = c2y + stack.shift();\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    break;\n                case 27: // hhcurveto\n                    if (stack.length % 2) {\n                        y += stack.shift();\n                    }\n\n                    while (stack.length > 0) {\n                        c1x = x + stack.shift();\n                        c1y = y;\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y;\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    break;\n                case 28: // shortint\n                    b1 = code[i];\n                    b2 = code[i + 1];\n                    stack.push(((b1 << 24) | (b2 << 16)) >> 16);\n                    i += 2;\n                    break;\n                case 29: // callgsubr\n                    codeIndex = stack.pop() + font.gsubrsBias;\n                    subrCode = font.gsubrs[codeIndex];\n                    if (subrCode) {\n                        parse(subrCode);\n                    }\n\n                    break;\n                case 30: // vhcurveto\n                    while (stack.length > 0) {\n                        c1x = x;\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n\n                        c1x = x + stack.shift();\n                        c1y = y;\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        y = c2y + stack.shift();\n                        x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    break;\n                case 31: // hvcurveto\n                    while (stack.length > 0) {\n                        c1x = x + stack.shift();\n                        c1y = y;\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        y = c2y + stack.shift();\n                        x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n\n                        c1x = x;\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    break;\n                default:\n                    if (v < 32) {\n                        console.log('Glyph ' + glyph.index + ': unknown operator ' + v);\n                    } else if (v < 247) {\n                        stack.push(v - 139);\n                    } else if (v < 251) {\n                        b1 = code[i];\n                        i += 1;\n                        stack.push((v - 247) * 256 + b1 + 108);\n                    } else if (v < 255) {\n                        b1 = code[i];\n                        i += 1;\n                        stack.push(-(v - 251) * 256 - b1 - 108);\n                    } else {\n                        b1 = code[i];\n                        b2 = code[i + 1];\n                        b3 = code[i + 2];\n                        b4 = code[i + 3];\n                        i += 4;\n                        stack.push(((b1 << 24) | (b2 << 16) | (b3 << 8) | b4) / 65536);\n                    }\n            }\n        }\n    }\n\n    parse(code);\n\n    glyph.advanceWidth = width;\n    return p;\n}\n\nfunction parseCFFFDSelect(data, start, nGlyphs, fdArrayCount) {\n    const fdSelect = [];\n    let fdIndex;\n    const parser = new _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Parser(data, start);\n    const format = parser.parseCard8();\n    if (format === 0) {\n        // Simple list of nGlyphs elements\n        for (let iGid = 0; iGid < nGlyphs; iGid++) {\n            fdIndex = parser.parseCard8();\n            if (fdIndex >= fdArrayCount) {\n                throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');\n            }\n            fdSelect.push(fdIndex);\n        }\n    } else if (format === 3) {\n        // Ranges\n        const nRanges = parser.parseCard16();\n        let first = parser.parseCard16();\n        if (first !== 0) {\n            throw new Error('CFF Table CID Font FDSelect format 3 range has bad initial GID ' + first);\n        }\n        let next;\n        for (let iRange = 0; iRange < nRanges; iRange++) {\n            fdIndex = parser.parseCard8();\n            next = parser.parseCard16();\n            if (fdIndex >= fdArrayCount) {\n                throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');\n            }\n            if (next > nGlyphs) {\n                throw new Error('CFF Table CID Font FDSelect format 3 range has bad GID ' + next);\n            }\n            for (; first < next; first++) {\n                fdSelect.push(fdIndex);\n            }\n            first = next;\n        }\n        if (next !== nGlyphs) {\n            throw new Error('CFF Table CID Font FDSelect format 3 range has bad final GID ' + next);\n        }\n    } else {\n        throw new Error('CFF Table CID Font FDSelect table has unsupported format ' + format);\n    }\n    return fdSelect;\n}\n\n// Parse the `CFF` table, which contains the glyph outlines in PostScript format.\nfunction parseCFFTable(data, start, font) {\n    font.tables.cff = {};\n    const header = parseCFFHeader(data, start);\n    const nameIndex = parseCFFIndex(data, header.endOffset, _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bytesToString);\n    const topDictIndex = parseCFFIndex(data, nameIndex.endOffset);\n    const stringIndex = parseCFFIndex(data, topDictIndex.endOffset, _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bytesToString);\n    const globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);\n    font.gsubrs = globalSubrIndex.objects;\n    font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);\n\n    const topDictArray = gatherCFFTopDicts(data, start, topDictIndex.objects, stringIndex.objects);\n    if (topDictArray.length !== 1) {\n        throw new Error('CFF table has too many fonts in \\'FontSet\\' - count of fonts NameIndex.length = ' + topDictArray.length);\n    }\n\n    const topDict = topDictArray[0];\n    font.tables.cff.topDict = topDict;\n\n    if (topDict._privateDict) {\n        font.defaultWidthX = topDict._privateDict.defaultWidthX;\n        font.nominalWidthX = topDict._privateDict.nominalWidthX;\n    }\n\n    if (topDict.ros[0] !== undefined && topDict.ros[1] !== undefined) {\n        font.isCIDFont = true;\n    }\n\n    if (font.isCIDFont) {\n        let fdArrayOffset = topDict.fdArray;\n        let fdSelectOffset = topDict.fdSelect;\n        if (fdArrayOffset === 0 || fdSelectOffset === 0) {\n            throw new Error('Font is marked as a CID font, but FDArray and/or FDSelect information is missing');\n        }\n        fdArrayOffset += start;\n        const fdArrayIndex = parseCFFIndex(data, fdArrayOffset);\n        const fdArray = gatherCFFTopDicts(data, start, fdArrayIndex.objects, stringIndex.objects);\n        topDict._fdArray = fdArray;\n        fdSelectOffset += start;\n        topDict._fdSelect = parseCFFFDSelect(data, fdSelectOffset, font.numGlyphs, fdArray.length);\n    }\n\n    const privateDictOffset = start + topDict.private[1];\n    const privateDict = parseCFFPrivateDict(data, privateDictOffset, topDict.private[0], stringIndex.objects);\n    font.defaultWidthX = privateDict.defaultWidthX;\n    font.nominalWidthX = privateDict.nominalWidthX;\n\n    if (privateDict.subrs !== 0) {\n        const subrOffset = privateDictOffset + privateDict.subrs;\n        const subrIndex = parseCFFIndex(data, subrOffset);\n        font.subrs = subrIndex.objects;\n        font.subrsBias = calcCFFSubroutineBias(font.subrs);\n    } else {\n        font.subrs = [];\n        font.subrsBias = 0;\n    }\n\n    // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.\n    const charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);\n    font.nGlyphs = charStringsIndex.objects.length;\n\n    const charset = parseCFFCharset(data, start + topDict.charset, font.nGlyphs, stringIndex.objects);\n    if (topDict.encoding === 0) {\n        // Standard encoding\n        font.cffEncoding = new _encoding__WEBPACK_IMPORTED_MODULE_0__[\"CffEncoding\"](_encoding__WEBPACK_IMPORTED_MODULE_0__[\"cffStandardEncoding\"], charset);\n    } else if (topDict.encoding === 1) {\n        // Expert encoding\n        font.cffEncoding = new _encoding__WEBPACK_IMPORTED_MODULE_0__[\"CffEncoding\"](_encoding__WEBPACK_IMPORTED_MODULE_0__[\"cffExpertEncoding\"], charset);\n    } else {\n        font.cffEncoding = parseCFFEncoding(data, start + topDict.encoding, charset);\n    }\n\n    // Prefer the CMAP encoding to the CFF encoding.\n    font.encoding = font.encoding || font.cffEncoding;\n\n    font.glyphs = new _glyphset__WEBPACK_IMPORTED_MODULE_1__[\"default\"].GlyphSet(font);\n    for (let i = 0; i < font.nGlyphs; i += 1) {\n        const charString = charStringsIndex.objects[i];\n        font.glyphs.push(i, _glyphset__WEBPACK_IMPORTED_MODULE_1__[\"default\"].cffGlyphLoader(font, i, parseCFFCharstring, charString));\n    }\n}\n\n// Convert a string to a String ID (SID).\n// The list of strings is modified in place.\nfunction encodeString(s, strings) {\n    let sid;\n\n    // Is the string in the CFF standard strings?\n    let i = _encoding__WEBPACK_IMPORTED_MODULE_0__[\"cffStandardStrings\"].indexOf(s);\n    if (i >= 0) {\n        sid = i;\n    }\n\n    // Is the string already in the string index?\n    i = strings.indexOf(s);\n    if (i >= 0) {\n        sid = i + _encoding__WEBPACK_IMPORTED_MODULE_0__[\"cffStandardStrings\"].length;\n    } else {\n        sid = _encoding__WEBPACK_IMPORTED_MODULE_0__[\"cffStandardStrings\"].length + strings.length;\n        strings.push(s);\n    }\n\n    return sid;\n}\n\nfunction makeHeader() {\n    return new _table__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Record('Header', [\n        {name: 'major', type: 'Card8', value: 1},\n        {name: 'minor', type: 'Card8', value: 0},\n        {name: 'hdrSize', type: 'Card8', value: 4},\n        {name: 'major', type: 'Card8', value: 1}\n    ]);\n}\n\nfunction makeNameIndex(fontNames) {\n    const t = new _table__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Record('Name INDEX', [\n        {name: 'names', type: 'INDEX', value: []}\n    ]);\n    t.names = [];\n    for (let i = 0; i < fontNames.length; i += 1) {\n        t.names.push({name: 'name_' + i, type: 'NAME', value: fontNames[i]});\n    }\n\n    return t;\n}\n\n// Given a dictionary's metadata, create a DICT structure.\nfunction makeDict(meta, attrs, strings) {\n    const m = {};\n    for (let i = 0; i < meta.length; i += 1) {\n        const entry = meta[i];\n        let value = attrs[entry.name];\n        if (value !== undefined && !equals(value, entry.value)) {\n            if (entry.type === 'SID') {\n                value = encodeString(value, strings);\n            }\n\n            m[entry.op] = {name: entry.name, type: entry.type, value: value};\n        }\n    }\n\n    return m;\n}\n\n// The Top DICT houses the global font attributes.\nfunction makeTopDict(attrs, strings) {\n    const t = new _table__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Record('Top DICT', [\n        {name: 'dict', type: 'DICT', value: {}}\n    ]);\n    t.dict = makeDict(TOP_DICT_META, attrs, strings);\n    return t;\n}\n\nfunction makeTopDictIndex(topDict) {\n    const t = new _table__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Record('Top DICT INDEX', [\n        {name: 'topDicts', type: 'INDEX', value: []}\n    ]);\n    t.topDicts = [{name: 'topDict_0', type: 'TABLE', value: topDict}];\n    return t;\n}\n\nfunction makeStringIndex(strings) {\n    const t = new _table__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Record('String INDEX', [\n        {name: 'strings', type: 'INDEX', value: []}\n    ]);\n    t.strings = [];\n    for (let i = 0; i < strings.length; i += 1) {\n        t.strings.push({name: 'string_' + i, type: 'STRING', value: strings[i]});\n    }\n\n    return t;\n}\n\nfunction makeGlobalSubrIndex() {\n    // Currently we don't use subroutines.\n    return new _table__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Record('Global Subr INDEX', [\n        {name: 'subrs', type: 'INDEX', value: []}\n    ]);\n}\n\nfunction makeCharsets(glyphNames, strings) {\n    const t = new _table__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Record('Charsets', [\n        {name: 'format', type: 'Card8', value: 0}\n    ]);\n    for (let i = 0; i < glyphNames.length; i += 1) {\n        const glyphName = glyphNames[i];\n        const glyphSID = encodeString(glyphName, strings);\n        t.fields.push({name: 'glyph_' + i, type: 'SID', value: glyphSID});\n    }\n\n    return t;\n}\n\nfunction glyphToOps(glyph) {\n    const ops = [];\n    const path = glyph.path;\n    ops.push({name: 'width', type: 'NUMBER', value: glyph.advanceWidth});\n    let x = 0;\n    let y = 0;\n    for (let i = 0; i < path.commands.length; i += 1) {\n        let dx;\n        let dy;\n        let cmd = path.commands[i];\n        if (cmd.type === 'Q') {\n            // CFF only supports bézier curves, so convert the quad to a bézier.\n            const _13 = 1 / 3;\n            const _23 = 2 / 3;\n\n            // We're going to create a new command so we don't change the original path.\n            cmd = {\n                type: 'C',\n                x: cmd.x,\n                y: cmd.y,\n                x1: _13 * x + _23 * cmd.x1,\n                y1: _13 * y + _23 * cmd.y1,\n                x2: _13 * cmd.x + _23 * cmd.x1,\n                y2: _13 * cmd.y + _23 * cmd.y1\n            };\n        }\n\n        if (cmd.type === 'M') {\n            dx = Math.round(cmd.x - x);\n            dy = Math.round(cmd.y - y);\n            ops.push({name: 'dx', type: 'NUMBER', value: dx});\n            ops.push({name: 'dy', type: 'NUMBER', value: dy});\n            ops.push({name: 'rmoveto', type: 'OP', value: 21});\n            x = Math.round(cmd.x);\n            y = Math.round(cmd.y);\n        } else if (cmd.type === 'L') {\n            dx = Math.round(cmd.x - x);\n            dy = Math.round(cmd.y - y);\n            ops.push({name: 'dx', type: 'NUMBER', value: dx});\n            ops.push({name: 'dy', type: 'NUMBER', value: dy});\n            ops.push({name: 'rlineto', type: 'OP', value: 5});\n            x = Math.round(cmd.x);\n            y = Math.round(cmd.y);\n        } else if (cmd.type === 'C') {\n            const dx1 = Math.round(cmd.x1 - x);\n            const dy1 = Math.round(cmd.y1 - y);\n            const dx2 = Math.round(cmd.x2 - cmd.x1);\n            const dy2 = Math.round(cmd.y2 - cmd.y1);\n            dx = Math.round(cmd.x - cmd.x2);\n            dy = Math.round(cmd.y - cmd.y2);\n            ops.push({name: 'dx1', type: 'NUMBER', value: dx1});\n            ops.push({name: 'dy1', type: 'NUMBER', value: dy1});\n            ops.push({name: 'dx2', type: 'NUMBER', value: dx2});\n            ops.push({name: 'dy2', type: 'NUMBER', value: dy2});\n            ops.push({name: 'dx', type: 'NUMBER', value: dx});\n            ops.push({name: 'dy', type: 'NUMBER', value: dy});\n            ops.push({name: 'rrcurveto', type: 'OP', value: 8});\n            x = Math.round(cmd.x);\n            y = Math.round(cmd.y);\n        }\n\n        // Contours are closed automatically.\n    }\n\n    ops.push({name: 'endchar', type: 'OP', value: 14});\n    return ops;\n}\n\nfunction makeCharStringsIndex(glyphs) {\n    const t = new _table__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Record('CharStrings INDEX', [\n        {name: 'charStrings', type: 'INDEX', value: []}\n    ]);\n\n    for (let i = 0; i < glyphs.length; i += 1) {\n        const glyph = glyphs.get(i);\n        const ops = glyphToOps(glyph);\n        t.charStrings.push({name: glyph.name, type: 'CHARSTRING', value: ops});\n    }\n\n    return t;\n}\n\nfunction makePrivateDict(attrs, strings) {\n    const t = new _table__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Record('Private DICT', [\n        {name: 'dict', type: 'DICT', value: {}}\n    ]);\n    t.dict = makeDict(PRIVATE_DICT_META, attrs, strings);\n    return t;\n}\n\nfunction makeCFFTable(glyphs, options) {\n    const t = new _table__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Table('CFF ', [\n        {name: 'header', type: 'RECORD'},\n        {name: 'nameIndex', type: 'RECORD'},\n        {name: 'topDictIndex', type: 'RECORD'},\n        {name: 'stringIndex', type: 'RECORD'},\n        {name: 'globalSubrIndex', type: 'RECORD'},\n        {name: 'charsets', type: 'RECORD'},\n        {name: 'charStringsIndex', type: 'RECORD'},\n        {name: 'privateDict', type: 'RECORD'}\n    ]);\n\n    const fontScale = 1 / options.unitsPerEm;\n    // We use non-zero values for the offsets so that the DICT encodes them.\n    // This is important because the size of the Top DICT plays a role in offset calculation,\n    // and the size shouldn't change after we've written correct offsets.\n    const attrs = {\n        version: options.version,\n        fullName: options.fullName,\n        familyName: options.familyName,\n        weight: options.weightName,\n        fontBBox: options.fontBBox || [0, 0, 0, 0],\n        fontMatrix: [fontScale, 0, 0, fontScale, 0, 0],\n        charset: 999,\n        encoding: 0,\n        charStrings: 999,\n        private: [0, 999]\n    };\n\n    const privateAttrs = {};\n\n    const glyphNames = [];\n    let glyph;\n\n    // Skip first glyph (.notdef)\n    for (let i = 1; i < glyphs.length; i += 1) {\n        glyph = glyphs.get(i);\n        glyphNames.push(glyph.name);\n    }\n\n    const strings = [];\n\n    t.header = makeHeader();\n    t.nameIndex = makeNameIndex([options.postScriptName]);\n    let topDict = makeTopDict(attrs, strings);\n    t.topDictIndex = makeTopDictIndex(topDict);\n    t.globalSubrIndex = makeGlobalSubrIndex();\n    t.charsets = makeCharsets(glyphNames, strings);\n    t.charStringsIndex = makeCharStringsIndex(glyphs);\n    t.privateDict = makePrivateDict(privateAttrs, strings);\n\n    // Needs to come at the end, to encode all custom strings used in the font.\n    t.stringIndex = makeStringIndex(strings);\n\n    const startOffset = t.header.sizeOf() +\n        t.nameIndex.sizeOf() +\n        t.topDictIndex.sizeOf() +\n        t.stringIndex.sizeOf() +\n        t.globalSubrIndex.sizeOf();\n    attrs.charset = startOffset;\n\n    // We use the CFF standard encoding; proper encoding will be handled in cmap.\n    attrs.encoding = 0;\n    attrs.charStrings = attrs.charset + t.charsets.sizeOf();\n    attrs.private[1] = attrs.charStrings + t.charStringsIndex.sizeOf();\n\n    // Recreate the Top DICT INDEX with the correct offsets.\n    topDict = makeTopDict(attrs, strings);\n    t.topDictIndex = makeTopDictIndex(topDict);\n\n    return t;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseCFFTable, make: makeCFFTable });\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/cff.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/cmap.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/cmap.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `cmap` table stores the mappings from characters to glyphs.\n// https://www.microsoft.com/typography/OTSPEC/cmap.htm\n\n\n\n\n\nfunction parseCmapTableFormat12(cmap, p) {\n    //Skip reserved.\n    p.parseUShort();\n\n    // Length in bytes of the sub-tables.\n    cmap.length = p.parseULong();\n    cmap.language = p.parseULong();\n\n    let groupCount;\n    cmap.groupCount = groupCount = p.parseULong();\n    cmap.glyphIndexMap = {};\n\n    for (let i = 0; i < groupCount; i += 1) {\n        const startCharCode = p.parseULong();\n        const endCharCode = p.parseULong();\n        let startGlyphId = p.parseULong();\n\n        for (let c = startCharCode; c <= endCharCode; c += 1) {\n            cmap.glyphIndexMap[c] = startGlyphId;\n            startGlyphId++;\n        }\n    }\n}\n\nfunction parseCmapTableFormat4(cmap, p, data, start, offset) {\n    // Length in bytes of the sub-tables.\n    cmap.length = p.parseUShort();\n    cmap.language = p.parseUShort();\n\n    // segCount is stored x 2.\n    let segCount;\n    cmap.segCount = segCount = p.parseUShort() >> 1;\n\n    // Skip searchRange, entrySelector, rangeShift.\n    p.skip('uShort', 3);\n\n    // The \"unrolled\" mapping from character codes to glyph indices.\n    cmap.glyphIndexMap = {};\n    const endCountParser = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start + offset + 14);\n    const startCountParser = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start + offset + 16 + segCount * 2);\n    const idDeltaParser = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start + offset + 16 + segCount * 4);\n    const idRangeOffsetParser = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start + offset + 16 + segCount * 6);\n    let glyphIndexOffset = start + offset + 16 + segCount * 8;\n    for (let i = 0; i < segCount - 1; i += 1) {\n        let glyphIndex;\n        const endCount = endCountParser.parseUShort();\n        const startCount = startCountParser.parseUShort();\n        const idDelta = idDeltaParser.parseShort();\n        const idRangeOffset = idRangeOffsetParser.parseUShort();\n        for (let c = startCount; c <= endCount; c += 1) {\n            if (idRangeOffset !== 0) {\n                // The idRangeOffset is relative to the current position in the idRangeOffset array.\n                // Take the current offset in the idRangeOffset array.\n                glyphIndexOffset = (idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2);\n\n                // Add the value of the idRangeOffset, which will move us into the glyphIndex array.\n                glyphIndexOffset += idRangeOffset;\n\n                // Then add the character index of the current segment, multiplied by 2 for USHORTs.\n                glyphIndexOffset += (c - startCount) * 2;\n                glyphIndex = _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getUShort(data, glyphIndexOffset);\n                if (glyphIndex !== 0) {\n                    glyphIndex = (glyphIndex + idDelta) & 0xFFFF;\n                }\n            } else {\n                glyphIndex = (c + idDelta) & 0xFFFF;\n            }\n\n            cmap.glyphIndexMap[c] = glyphIndex;\n        }\n    }\n}\n\n// Parse the `cmap` table. This table stores the mappings from characters to glyphs.\n// There are many available formats, but we only support the Windows format 4 and 12.\n// This function returns a `CmapEncoding` object or null if no supported format could be found.\nfunction parseCmapTable(data, start) {\n    const cmap = {};\n    cmap.version = _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getUShort(data, start);\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(cmap.version === 0, 'cmap table version should be 0.');\n\n    // The cmap table can contain many sub-tables, each with their own format.\n    // We're only interested in a \"platform 0\" (Unicode format) and \"platform 3\" (Windows format) table.\n    cmap.numTables = _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getUShort(data, start + 2);\n    let offset = -1;\n    for (let i = cmap.numTables - 1; i >= 0; i -= 1) {\n        const platformId = _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getUShort(data, start + 4 + (i * 8));\n        const encodingId = _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getUShort(data, start + 4 + (i * 8) + 2);\n        if ((platformId === 3 && (encodingId === 0 || encodingId === 1 || encodingId === 10)) ||\n            (platformId === 0 && (encodingId === 0 || encodingId === 1 || encodingId === 2 || encodingId === 3 || encodingId === 4))) {\n            offset = _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getULong(data, start + 4 + (i * 8) + 4);\n            break;\n        }\n    }\n\n    if (offset === -1) {\n        // There is no cmap table in the font that we support.\n        throw new Error('No valid cmap sub-tables found.');\n    }\n\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start + offset);\n    cmap.format = p.parseUShort();\n\n    if (cmap.format === 12) {\n        parseCmapTableFormat12(cmap, p);\n    } else if (cmap.format === 4) {\n        parseCmapTableFormat4(cmap, p, data, start, offset);\n    } else {\n        throw new Error('Only format 4 and 12 cmap tables are supported (found format ' + cmap.format + ').');\n    }\n\n    return cmap;\n}\n\nfunction addSegment(t, code, glyphIndex) {\n    t.segments.push({\n        end: code,\n        start: code,\n        delta: -(code - glyphIndex),\n        offset: 0,\n        glyphIndex: glyphIndex\n    });\n}\n\nfunction addTerminatorSegment(t) {\n    t.segments.push({\n        end: 0xFFFF,\n        start: 0xFFFF,\n        delta: 1,\n        offset: 0\n    });\n}\n\n// Make cmap table, format 4 by default, 12 if needed only\nfunction makeCmapTable(glyphs) {\n    // Plan 0 is the base Unicode Plan but emojis, for example are on another plan, and needs cmap 12 format (with 32bit)\n    let isPlan0Only = true;\n    let i;\n\n    // Check if we need to add cmap format 12 or if format 4 only is fine\n    for (i = glyphs.length - 1; i > 0; i -= 1) {\n        const g = glyphs.get(i);\n        if (g.unicode > 65535) {\n            console.log('Adding CMAP format 12 (needed!)');\n            isPlan0Only = false;\n            break;\n        }\n    }\n\n    let cmapTable = [\n        {name: 'version', type: 'USHORT', value: 0},\n        {name: 'numTables', type: 'USHORT', value: isPlan0Only ? 1 : 2},\n\n        // CMAP 4 header\n        {name: 'platformID', type: 'USHORT', value: 3},\n        {name: 'encodingID', type: 'USHORT', value: 1},\n        {name: 'offset', type: 'ULONG', value: isPlan0Only ? 12 : (12 + 8)}\n    ];\n\n    if (!isPlan0Only)\n        cmapTable = cmapTable.concat([\n            // CMAP 12 header\n            {name: 'cmap12PlatformID', type: 'USHORT', value: 3}, // We encode only for PlatformID = 3 (Windows) because it is supported everywhere\n            {name: 'cmap12EncodingID', type: 'USHORT', value: 10},\n            {name: 'cmap12Offset', type: 'ULONG', value: 0}\n        ]);\n\n    cmapTable = cmapTable.concat([\n        // CMAP 4 Subtable\n        {name: 'format', type: 'USHORT', value: 4},\n        {name: 'cmap4Length', type: 'USHORT', value: 0},\n        {name: 'language', type: 'USHORT', value: 0},\n        {name: 'segCountX2', type: 'USHORT', value: 0},\n        {name: 'searchRange', type: 'USHORT', value: 0},\n        {name: 'entrySelector', type: 'USHORT', value: 0},\n        {name: 'rangeShift', type: 'USHORT', value: 0}\n    ]);\n\n    const t = new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('cmap', cmapTable);\n\n    t.segments = [];\n    for (i = 0; i < glyphs.length; i += 1) {\n        const glyph = glyphs.get(i);\n        for (let j = 0; j < glyph.unicodes.length; j += 1) {\n            addSegment(t, glyph.unicodes[j], i);\n        }\n\n        t.segments = t.segments.sort(function (a, b) {\n            return a.start - b.start;\n        });\n    }\n\n    addTerminatorSegment(t);\n\n    const segCount = t.segments.length;\n    let segCountToRemove = 0;\n\n    // CMAP 4\n    // Set up parallel segment arrays.\n    let endCounts = [];\n    let startCounts = [];\n    let idDeltas = [];\n    let idRangeOffsets = [];\n    let glyphIds = [];\n\n    // CMAP 12\n    let cmap12Groups = [];\n\n    // Reminder this loop is not following the specification at 100%\n    // The specification -> find suites of characters and make a group\n    // Here we're doing one group for each letter\n    // Doing as the spec can save 8 times (or more) space\n    for (i = 0; i < segCount; i += 1) {\n        const segment = t.segments[i];\n\n        // CMAP 4\n        if (segment.end <= 65535 && segment.start <= 65535) {\n            endCounts = endCounts.concat({name: 'end_' + i, type: 'USHORT', value: segment.end});\n            startCounts = startCounts.concat({name: 'start_' + i, type: 'USHORT', value: segment.start});\n            idDeltas = idDeltas.concat({name: 'idDelta_' + i, type: 'SHORT', value: segment.delta});\n            idRangeOffsets = idRangeOffsets.concat({name: 'idRangeOffset_' + i, type: 'USHORT', value: segment.offset});\n            if (segment.glyphId !== undefined) {\n                glyphIds = glyphIds.concat({name: 'glyph_' + i, type: 'USHORT', value: segment.glyphId});\n            }\n        } else {\n            // Skip Unicode > 65535 (16bit unsigned max) for CMAP 4, will be added in CMAP 12\n            segCountToRemove += 1;\n        }\n\n        // CMAP 12\n        // Skip Terminator Segment\n        if (!isPlan0Only && segment.glyphIndex !== undefined) {\n            cmap12Groups = cmap12Groups.concat({name: 'cmap12Start_' + i, type: 'ULONG', value: segment.start});\n            cmap12Groups = cmap12Groups.concat({name: 'cmap12End_' + i, type: 'ULONG', value: segment.end});\n            cmap12Groups = cmap12Groups.concat({name: 'cmap12Glyph_' + i, type: 'ULONG', value: segment.glyphIndex});\n        }\n    }\n\n    // CMAP 4 Subtable\n    t.segCountX2 = (segCount - segCountToRemove) * 2;\n    t.searchRange = Math.pow(2, Math.floor(Math.log((segCount - segCountToRemove)) / Math.log(2))) * 2;\n    t.entrySelector = Math.log(t.searchRange / 2) / Math.log(2);\n    t.rangeShift = t.segCountX2 - t.searchRange;\n\n    t.fields = t.fields.concat(endCounts);\n    t.fields.push({name: 'reservedPad', type: 'USHORT', value: 0});\n    t.fields = t.fields.concat(startCounts);\n    t.fields = t.fields.concat(idDeltas);\n    t.fields = t.fields.concat(idRangeOffsets);\n    t.fields = t.fields.concat(glyphIds);\n\n    t.cmap4Length = 14 + // Subtable header\n        endCounts.length * 2 +\n        2 + // reservedPad\n        startCounts.length * 2 +\n        idDeltas.length * 2 +\n        idRangeOffsets.length * 2 +\n        glyphIds.length * 2;\n\n    if (!isPlan0Only) {\n        // CMAP 12 Subtable\n        const cmap12Length = 16 + // Subtable header\n            cmap12Groups.length * 4;\n\n        t.cmap12Offset = 12 + (2 * 2) + 4 + t.cmap4Length;\n        t.fields = t.fields.concat([\n            {name: 'cmap12Format', type: 'USHORT', value: 12},\n            {name: 'cmap12Reserved', type: 'USHORT', value: 0},\n            {name: 'cmap12Length', type: 'ULONG', value: cmap12Length},\n            {name: 'cmap12Language', type: 'ULONG', value: 0},\n            {name: 'cmap12nGroups', type: 'ULONG', value: cmap12Groups.length / 3}\n        ]);\n\n        t.fields = t.fields.concat(cmap12Groups);\n    }\n\n    return t;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseCmapTable, make: makeCmapTable });\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/cmap.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/fvar.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/fvar.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `fvar` table stores font variation axes and instances.\n// https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6fvar.html\n\n\n\n\n\nfunction addName(name, names) {\n    const nameString = JSON.stringify(name);\n    let nameID = 256;\n    for (let nameKey in names) {\n        let n = parseInt(nameKey);\n        if (!n || n < 256) {\n            continue;\n        }\n\n        if (JSON.stringify(names[nameKey]) === nameString) {\n            return n;\n        }\n\n        if (nameID <= n) {\n            nameID = n + 1;\n        }\n    }\n\n    names[nameID] = name;\n    return nameID;\n}\n\nfunction makeFvarAxis(n, axis, names) {\n    const nameID = addName(axis.name, names);\n    return [\n        {name: 'tag_' + n, type: 'TAG', value: axis.tag},\n        {name: 'minValue_' + n, type: 'FIXED', value: axis.minValue << 16},\n        {name: 'defaultValue_' + n, type: 'FIXED', value: axis.defaultValue << 16},\n        {name: 'maxValue_' + n, type: 'FIXED', value: axis.maxValue << 16},\n        {name: 'flags_' + n, type: 'USHORT', value: 0},\n        {name: 'nameID_' + n, type: 'USHORT', value: nameID}\n    ];\n}\n\nfunction parseFvarAxis(data, start, names) {\n    const axis = {};\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start);\n    axis.tag = p.parseTag();\n    axis.minValue = p.parseFixed();\n    axis.defaultValue = p.parseFixed();\n    axis.maxValue = p.parseFixed();\n    p.skip('uShort', 1);  // reserved for flags; no values defined\n    axis.name = names[p.parseUShort()] || {};\n    return axis;\n}\n\nfunction makeFvarInstance(n, inst, axes, names) {\n    const nameID = addName(inst.name, names);\n    const fields = [\n        {name: 'nameID_' + n, type: 'USHORT', value: nameID},\n        {name: 'flags_' + n, type: 'USHORT', value: 0}\n    ];\n\n    for (let i = 0; i < axes.length; ++i) {\n        const axisTag = axes[i].tag;\n        fields.push({\n            name: 'axis_' + n + ' ' + axisTag,\n            type: 'FIXED',\n            value: inst.coordinates[axisTag] << 16\n        });\n    }\n\n    return fields;\n}\n\nfunction parseFvarInstance(data, start, axes, names) {\n    const inst = {};\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start);\n    inst.name = names[p.parseUShort()] || {};\n    p.skip('uShort', 1);  // reserved for flags; no values defined\n\n    inst.coordinates = {};\n    for (let i = 0; i < axes.length; ++i) {\n        inst.coordinates[axes[i].tag] = p.parseFixed();\n    }\n\n    return inst;\n}\n\nfunction makeFvarTable(fvar, names) {\n    const result = new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('fvar', [\n        {name: 'version', type: 'ULONG', value: 0x10000},\n        {name: 'offsetToData', type: 'USHORT', value: 0},\n        {name: 'countSizePairs', type: 'USHORT', value: 2},\n        {name: 'axisCount', type: 'USHORT', value: fvar.axes.length},\n        {name: 'axisSize', type: 'USHORT', value: 20},\n        {name: 'instanceCount', type: 'USHORT', value: fvar.instances.length},\n        {name: 'instanceSize', type: 'USHORT', value: 4 + fvar.axes.length * 4}\n    ]);\n    result.offsetToData = result.sizeOf();\n\n    for (let i = 0; i < fvar.axes.length; i++) {\n        result.fields = result.fields.concat(makeFvarAxis(i, fvar.axes[i], names));\n    }\n\n    for (let j = 0; j < fvar.instances.length; j++) {\n        result.fields = result.fields.concat(makeFvarInstance(j, fvar.instances[j], fvar.axes, names));\n    }\n\n    return result;\n}\n\nfunction parseFvarTable(data, start, names) {\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start);\n    const tableVersion = p.parseULong();\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(tableVersion === 0x00010000, 'Unsupported fvar table version.');\n    const offsetToData = p.parseOffset16();\n    // Skip countSizePairs.\n    p.skip('uShort', 1);\n    const axisCount = p.parseUShort();\n    const axisSize = p.parseUShort();\n    const instanceCount = p.parseUShort();\n    const instanceSize = p.parseUShort();\n\n    const axes = [];\n    for (let i = 0; i < axisCount; i++) {\n        axes.push(parseFvarAxis(data, start + offsetToData + i * axisSize, names));\n    }\n\n    const instances = [];\n    const instanceStart = start + offsetToData + axisCount * axisSize;\n    for (let j = 0; j < instanceCount; j++) {\n        instances.push(parseFvarInstance(data, instanceStart + j * instanceSize, axes, names));\n    }\n\n    return {axes: axes, instances: instances};\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ make: makeFvarTable, parse: parseFvarTable });\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/fvar.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/glyf.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/glyf.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _glyphset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../glyphset */ \"../../node_modules/opentype.js/src/glyphset.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../path */ \"../../node_modules/opentype.js/src/path.js\");\n// The `glyf` table describes the glyphs in TrueType outline format.\n// http://www.microsoft.com/typography/otspec/glyf.htm\n\n\n\n\n\n\n// Parse the coordinate data for a glyph.\nfunction parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {\n    let v;\n    if ((flag & shortVectorBitMask) > 0) {\n        // The coordinate is 1 byte long.\n        v = p.parseByte();\n        // The `same` bit is re-used for short values to signify the sign of the value.\n        if ((flag & sameBitMask) === 0) {\n            v = -v;\n        }\n\n        v = previousValue + v;\n    } else {\n        //  The coordinate is 2 bytes long.\n        // If the `same` bit is set, the coordinate is the same as the previous coordinate.\n        if ((flag & sameBitMask) > 0) {\n            v = previousValue;\n        } else {\n            // Parse the coordinate as a signed 16-bit delta value.\n            v = previousValue + p.parseShort();\n        }\n    }\n\n    return v;\n}\n\n// Parse a TrueType glyph.\nfunction parseGlyph(glyph, data, start) {\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Parser(data, start);\n    glyph.numberOfContours = p.parseShort();\n    glyph._xMin = p.parseShort();\n    glyph._yMin = p.parseShort();\n    glyph._xMax = p.parseShort();\n    glyph._yMax = p.parseShort();\n    let flags;\n    let flag;\n\n    if (glyph.numberOfContours > 0) {\n        // This glyph is not a composite.\n        const endPointIndices = glyph.endPointIndices = [];\n        for (let i = 0; i < glyph.numberOfContours; i += 1) {\n            endPointIndices.push(p.parseUShort());\n        }\n\n        glyph.instructionLength = p.parseUShort();\n        glyph.instructions = [];\n        for (let i = 0; i < glyph.instructionLength; i += 1) {\n            glyph.instructions.push(p.parseByte());\n        }\n\n        const numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;\n        flags = [];\n        for (let i = 0; i < numberOfCoordinates; i += 1) {\n            flag = p.parseByte();\n            flags.push(flag);\n            // If bit 3 is set, we repeat this flag n times, where n is the next byte.\n            if ((flag & 8) > 0) {\n                const repeatCount = p.parseByte();\n                for (let j = 0; j < repeatCount; j += 1) {\n                    flags.push(flag);\n                    i += 1;\n                }\n            }\n        }\n\n        _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(flags.length === numberOfCoordinates, 'Bad flags.');\n\n        if (endPointIndices.length > 0) {\n            const points = [];\n            let point;\n            // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.\n            if (numberOfCoordinates > 0) {\n                for (let i = 0; i < numberOfCoordinates; i += 1) {\n                    flag = flags[i];\n                    point = {};\n                    point.onCurve = !!(flag & 1);\n                    point.lastPointOfContour = endPointIndices.indexOf(i) >= 0;\n                    points.push(point);\n                }\n\n                let px = 0;\n                for (let i = 0; i < numberOfCoordinates; i += 1) {\n                    flag = flags[i];\n                    point = points[i];\n                    point.x = parseGlyphCoordinate(p, flag, px, 2, 16);\n                    px = point.x;\n                }\n\n                let py = 0;\n                for (let i = 0; i < numberOfCoordinates; i += 1) {\n                    flag = flags[i];\n                    point = points[i];\n                    point.y = parseGlyphCoordinate(p, flag, py, 4, 32);\n                    py = point.y;\n                }\n            }\n\n            glyph.points = points;\n        } else {\n            glyph.points = [];\n        }\n    } else if (glyph.numberOfContours === 0) {\n        glyph.points = [];\n    } else {\n        glyph.isComposite = true;\n        glyph.points = [];\n        glyph.components = [];\n        let moreComponents = true;\n        while (moreComponents) {\n            flags = p.parseUShort();\n            const component = {\n                glyphIndex: p.parseUShort(),\n                xScale: 1,\n                scale01: 0,\n                scale10: 0,\n                yScale: 1,\n                dx: 0,\n                dy: 0\n            };\n            if ((flags & 1) > 0) {\n                // The arguments are words\n                if ((flags & 2) > 0) {\n                    // values are offset\n                    component.dx = p.parseShort();\n                    component.dy = p.parseShort();\n                } else {\n                    // values are matched points\n                    component.matchedPoints = [p.parseUShort(), p.parseUShort()];\n                }\n\n            } else {\n                // The arguments are bytes\n                if ((flags & 2) > 0) {\n                    // values are offset\n                    component.dx = p.parseChar();\n                    component.dy = p.parseChar();\n                } else {\n                    // values are matched points\n                    component.matchedPoints = [p.parseByte(), p.parseByte()];\n                }\n            }\n\n            if ((flags & 8) > 0) {\n                // We have a scale\n                component.xScale = component.yScale = p.parseF2Dot14();\n            } else if ((flags & 64) > 0) {\n                // We have an X / Y scale\n                component.xScale = p.parseF2Dot14();\n                component.yScale = p.parseF2Dot14();\n            } else if ((flags & 128) > 0) {\n                // We have a 2x2 transformation\n                component.xScale = p.parseF2Dot14();\n                component.scale01 = p.parseF2Dot14();\n                component.scale10 = p.parseF2Dot14();\n                component.yScale = p.parseF2Dot14();\n            }\n\n            glyph.components.push(component);\n            moreComponents = !!(flags & 32);\n        }\n        if (flags & 0x100) {\n            // We have instructions\n            glyph.instructionLength = p.parseUShort();\n            glyph.instructions = [];\n            for (let i = 0; i < glyph.instructionLength; i += 1) {\n                glyph.instructions.push(p.parseByte());\n            }\n        }\n    }\n}\n\n// Transform an array of points and return a new array.\nfunction transformPoints(points, transform) {\n    const newPoints = [];\n    for (let i = 0; i < points.length; i += 1) {\n        const pt = points[i];\n        const newPt = {\n            x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,\n            y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,\n            onCurve: pt.onCurve,\n            lastPointOfContour: pt.lastPointOfContour\n        };\n        newPoints.push(newPt);\n    }\n\n    return newPoints;\n}\n\nfunction getContours(points) {\n    const contours = [];\n    let currentContour = [];\n    for (let i = 0; i < points.length; i += 1) {\n        const pt = points[i];\n        currentContour.push(pt);\n        if (pt.lastPointOfContour) {\n            contours.push(currentContour);\n            currentContour = [];\n        }\n    }\n\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(currentContour.length === 0, 'There are still points left in the current contour.');\n    return contours;\n}\n\n// Convert the TrueType glyph outline to a Path.\nfunction getPath(points) {\n    const p = new _path__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n    if (!points) {\n        return p;\n    }\n\n    const contours = getContours(points);\n\n    for (let contourIndex = 0; contourIndex < contours.length; ++contourIndex) {\n        const contour = contours[contourIndex];\n\n        let prev = null;\n        let curr = contour[contour.length - 1];\n        let next = contour[0];\n\n        if (curr.onCurve) {\n            p.moveTo(curr.x, curr.y);\n        } else {\n            if (next.onCurve) {\n                p.moveTo(next.x, next.y);\n            } else {\n                // If both first and last points are off-curve, start at their middle.\n                const start = {x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5};\n                p.moveTo(start.x, start.y);\n            }\n        }\n\n        for (let i = 0; i < contour.length; ++i) {\n            prev = curr;\n            curr = next;\n            next = contour[(i + 1) % contour.length];\n\n            if (curr.onCurve) {\n                // This is a straight line.\n                p.lineTo(curr.x, curr.y);\n            } else {\n                let prev2 = prev;\n                let next2 = next;\n\n                if (!prev.onCurve) {\n                    prev2 = { x: (curr.x + prev.x) * 0.5, y: (curr.y + prev.y) * 0.5 };\n                }\n\n                if (!next.onCurve) {\n                    next2 = { x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5 };\n                }\n\n                p.quadraticCurveTo(curr.x, curr.y, next2.x, next2.y);\n            }\n        }\n\n        p.closePath();\n    }\n    return p;\n}\n\nfunction buildPath(glyphs, glyph) {\n    if (glyph.isComposite) {\n        for (let j = 0; j < glyph.components.length; j += 1) {\n            const component = glyph.components[j];\n            const componentGlyph = glyphs.get(component.glyphIndex);\n            // Force the ttfGlyphLoader to parse the glyph.\n            componentGlyph.getPath();\n            if (componentGlyph.points) {\n                let transformedPoints;\n                if (component.matchedPoints === undefined) {\n                    // component positioned by offset\n                    transformedPoints = transformPoints(componentGlyph.points, component);\n                } else {\n                    // component positioned by matched points\n                    if ((component.matchedPoints[0] > glyph.points.length - 1) ||\n                        (component.matchedPoints[1] > componentGlyph.points.length - 1)) {\n                        throw Error('Matched points out of range in ' + glyph.name);\n                    }\n                    const firstPt = glyph.points[component.matchedPoints[0]];\n                    let secondPt = componentGlyph.points[component.matchedPoints[1]];\n                    const transform = {\n                        xScale: component.xScale, scale01: component.scale01,\n                        scale10: component.scale10, yScale: component.yScale,\n                        dx: 0, dy: 0\n                    };\n                    secondPt = transformPoints([secondPt], transform)[0];\n                    transform.dx = firstPt.x - secondPt.x;\n                    transform.dy = firstPt.y - secondPt.y;\n                    transformedPoints = transformPoints(componentGlyph.points, transform);\n                }\n                glyph.points = glyph.points.concat(transformedPoints);\n            }\n        }\n    }\n\n    return getPath(glyph.points);\n}\n\n// Parse all the glyphs according to the offsets from the `loca` table.\nfunction parseGlyfTable(data, start, loca, font) {\n    const glyphs = new _glyphset__WEBPACK_IMPORTED_MODULE_1__[\"default\"].GlyphSet(font);\n\n    // The last element of the loca table is invalid.\n    for (let i = 0; i < loca.length - 1; i += 1) {\n        const offset = loca[i];\n        const nextOffset = loca[i + 1];\n        if (offset !== nextOffset) {\n            glyphs.push(i, _glyphset__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));\n        } else {\n            glyphs.push(i, _glyphset__WEBPACK_IMPORTED_MODULE_1__[\"default\"].glyphLoader(font, i));\n        }\n    }\n\n    return glyphs;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ getPath, parse: parseGlyfTable });\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/glyf.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/gpos.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/gpos.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `GPOS` table contains kerning pairs, among other things.\n// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos\n\n\n\n\n\nconst subtableParsers = new Array(10);         // subtableParsers[0] is unused\n\n// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-1-single-adjustment-positioning-subtable\n// this = Parser instance\nsubtableParsers[1] = function parseLookup1() {\n    const start = this.offset + this.relativeOffset;\n    const posformat = this.parseUShort();\n    if (posformat === 1) {\n        return {\n            posFormat: 1,\n            coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n            value: this.parseValueRecord()\n        };\n    } else if (posformat === 2) {\n        return {\n            posFormat: 2,\n            coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n            values: this.parseValueRecordList()\n        };\n    }\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(false, '0x' + start.toString(16) + ': GPOS lookup type 1 format must be 1 or 2.');\n};\n\n// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-2-pair-adjustment-positioning-subtable\nsubtableParsers[2] = function parseLookup2() {\n    const start = this.offset + this.relativeOffset;\n    const posFormat = this.parseUShort();\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(posFormat === 1 || posFormat === 2, '0x' + start.toString(16) + ': GPOS lookup type 2 format must be 1 or 2.');\n    const coverage = this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage);\n    const valueFormat1 = this.parseUShort();\n    const valueFormat2 = this.parseUShort();\n    if (posFormat === 1) {\n        // Adjustments for Glyph Pairs\n        return {\n            posFormat: posFormat,\n            coverage: coverage,\n            valueFormat1: valueFormat1,\n            valueFormat2: valueFormat2,\n            pairSets: this.parseList(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].pointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].list(function() {\n                return {        // pairValueRecord\n                    secondGlyph: this.parseUShort(),\n                    value1: this.parseValueRecord(valueFormat1),\n                    value2: this.parseValueRecord(valueFormat2)\n                };\n            })))\n        };\n    } else if (posFormat === 2) {\n        const classDef1 = this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].classDef);\n        const classDef2 = this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].classDef);\n        const class1Count = this.parseUShort();\n        const class2Count = this.parseUShort();\n        return {\n            // Class Pair Adjustment\n            posFormat: posFormat,\n            coverage: coverage,\n            valueFormat1: valueFormat1,\n            valueFormat2: valueFormat2,\n            classDef1: classDef1,\n            classDef2: classDef2,\n            class1Count: class1Count,\n            class2Count: class2Count,\n            classRecords: this.parseList(class1Count, _parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].list(class2Count, function() {\n                return {\n                    value1: this.parseValueRecord(valueFormat1),\n                    value2: this.parseValueRecord(valueFormat2)\n                };\n            }))\n        };\n    }\n};\n\nsubtableParsers[3] = function parseLookup3() { return { error: 'GPOS Lookup 3 not supported' }; };\nsubtableParsers[4] = function parseLookup4() { return { error: 'GPOS Lookup 4 not supported' }; };\nsubtableParsers[5] = function parseLookup5() { return { error: 'GPOS Lookup 5 not supported' }; };\nsubtableParsers[6] = function parseLookup6() { return { error: 'GPOS Lookup 6 not supported' }; };\nsubtableParsers[7] = function parseLookup7() { return { error: 'GPOS Lookup 7 not supported' }; };\nsubtableParsers[8] = function parseLookup8() { return { error: 'GPOS Lookup 8 not supported' }; };\nsubtableParsers[9] = function parseLookup9() { return { error: 'GPOS Lookup 9 not supported' }; };\n\n// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos\nfunction parseGposTable(data, start) {\n    start = start || 0;\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"](data, start);\n    const tableVersion = p.parseVersion(1);\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(tableVersion === 1 || tableVersion === 1.1, 'Unsupported GPOS table version ' + tableVersion);\n\n    if (tableVersion === 1) {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers)\n        };\n    } else {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers),\n            variations: p.parseFeatureVariationsList()\n        };\n    }\n\n}\n\n// GPOS Writing //////////////////////////////////////////////\n// NOT SUPPORTED\nconst subtableMakers = new Array(10);\n\nfunction makeGposTable(gpos) {\n    return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('GPOS', [\n        {name: 'version', type: 'ULONG', value: 0x10000},\n        {name: 'scripts', type: 'TABLE', value: new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].ScriptList(gpos.scripts)},\n        {name: 'features', type: 'TABLE', value: new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].FeatureList(gpos.features)},\n        {name: 'lookups', type: 'TABLE', value: new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].LookupList(gpos.lookups, subtableMakers)}\n    ]);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseGposTable, make: makeGposTable });\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/gpos.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/gsub.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/gsub.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `GSUB` table contains ligatures, among other things.\n// https://www.microsoft.com/typography/OTSPEC/gsub.htm\n\n\n\n\n\nconst subtableParsers = new Array(9);         // subtableParsers[0] is unused\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#SS\nsubtableParsers[1] = function parseLookup1() {\n    const start = this.offset + this.relativeOffset;\n    const substFormat = this.parseUShort();\n    if (substFormat === 1) {\n        return {\n            substFormat: 1,\n            coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n            deltaGlyphId: this.parseUShort()\n        };\n    } else if (substFormat === 2) {\n        return {\n            substFormat: 2,\n            coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n            substitute: this.parseOffset16List()\n        };\n    }\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(false, '0x' + start.toString(16) + ': lookup type 1 format must be 1 or 2.');\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#MS\nsubtableParsers[2] = function parseLookup2() {\n    const substFormat = this.parseUShort();\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(substFormat === 1, 'GSUB Multiple Substitution Subtable identifier-format must be 1');\n    return {\n        substFormat: substFormat,\n        coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n        sequences: this.parseListOfLists()\n    };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#AS\nsubtableParsers[3] = function parseLookup3() {\n    const substFormat = this.parseUShort();\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(substFormat === 1, 'GSUB Alternate Substitution Subtable identifier-format must be 1');\n    return {\n        substFormat: substFormat,\n        coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n        alternateSets: this.parseListOfLists()\n    };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#LS\nsubtableParsers[4] = function parseLookup4() {\n    const substFormat = this.parseUShort();\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(substFormat === 1, 'GSUB ligature table identifier-format must be 1');\n    return {\n        substFormat: substFormat,\n        coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n        ligatureSets: this.parseListOfLists(function() {\n            return {\n                ligGlyph: this.parseUShort(),\n                components: this.parseUShortList(this.parseUShort() - 1)\n            };\n        })\n    };\n};\n\nconst lookupRecordDesc = {\n    sequenceIndex: _parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].uShort,\n    lookupListIndex: _parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].uShort\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CSF\nsubtableParsers[5] = function parseLookup5() {\n    const start = this.offset + this.relativeOffset;\n    const substFormat = this.parseUShort();\n\n    if (substFormat === 1) {\n        return {\n            substFormat: substFormat,\n            coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n            ruleSets: this.parseListOfLists(function() {\n                const glyphCount = this.parseUShort();\n                const substCount = this.parseUShort();\n                return {\n                    input: this.parseUShortList(glyphCount - 1),\n                    lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 2) {\n        return {\n            substFormat: substFormat,\n            coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n            classDef: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].classDef),\n            classSets: this.parseListOfLists(function() {\n                const glyphCount = this.parseUShort();\n                const substCount = this.parseUShort();\n                return {\n                    classes: this.parseUShortList(glyphCount - 1),\n                    lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 3) {\n        const glyphCount = this.parseUShort();\n        const substCount = this.parseUShort();\n        return {\n            substFormat: substFormat,\n            coverages: this.parseList(glyphCount, _parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].pointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage)),\n            lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n        };\n    }\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(false, '0x' + start.toString(16) + ': lookup type 5 format must be 1, 2 or 3.');\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CC\nsubtableParsers[6] = function parseLookup6() {\n    const start = this.offset + this.relativeOffset;\n    const substFormat = this.parseUShort();\n    if (substFormat === 1) {\n        return {\n            substFormat: 1,\n            coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n            chainRuleSets: this.parseListOfLists(function() {\n                return {\n                    backtrack: this.parseUShortList(),\n                    input: this.parseUShortList(this.parseShort() - 1),\n                    lookahead: this.parseUShortList(),\n                    lookupRecords: this.parseRecordList(lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 2) {\n        return {\n            substFormat: 2,\n            coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n            backtrackClassDef: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].classDef),\n            inputClassDef: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].classDef),\n            lookaheadClassDef: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].classDef),\n            chainClassSet: this.parseListOfLists(function() {\n                return {\n                    backtrack: this.parseUShortList(),\n                    input: this.parseUShortList(this.parseShort() - 1),\n                    lookahead: this.parseUShortList(),\n                    lookupRecords: this.parseRecordList(lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 3) {\n        return {\n            substFormat: 3,\n            backtrackCoverage: this.parseList(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].pointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage)),\n            inputCoverage: this.parseList(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].pointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage)),\n            lookaheadCoverage: this.parseList(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].pointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage)),\n            lookupRecords: this.parseRecordList(lookupRecordDesc)\n        };\n    }\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(false, '0x' + start.toString(16) + ': lookup type 6 format must be 1, 2 or 3.');\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#ES\nsubtableParsers[7] = function parseLookup7() {\n    // Extension Substitution subtable\n    const substFormat = this.parseUShort();\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(substFormat === 1, 'GSUB Extension Substitution subtable identifier-format must be 1');\n    const extensionLookupType = this.parseUShort();\n    const extensionParser = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"](this.data, this.offset + this.parseULong());\n    return {\n        substFormat: 1,\n        lookupType: extensionLookupType,\n        extension: subtableParsers[extensionLookupType].call(extensionParser)\n    };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#RCCS\nsubtableParsers[8] = function parseLookup8() {\n    const substFormat = this.parseUShort();\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(substFormat === 1, 'GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1');\n    return {\n        substFormat: substFormat,\n        coverage: this.parsePointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage),\n        backtrackCoverage: this.parseList(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].pointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage)),\n        lookaheadCoverage: this.parseList(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].pointer(_parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"].coverage)),\n        substitutes: this.parseUShortList()\n    };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/gsub.htm\nfunction parseGsubTable(data, start) {\n    start = start || 0;\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"](data, start);\n    const tableVersion = p.parseVersion(1);\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(tableVersion === 1 || tableVersion === 1.1, 'Unsupported GSUB table version.');\n    if (tableVersion === 1) {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers)\n        };\n    } else {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers),\n            variations: p.parseFeatureVariationsList()\n        };\n    }\n\n}\n\n// GSUB Writing //////////////////////////////////////////////\nconst subtableMakers = new Array(9);\n\nsubtableMakers[1] = function makeLookup1(subtable) {\n    if (subtable.substFormat === 1) {\n        return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('substitutionTable', [\n            {name: 'substFormat', type: 'USHORT', value: 1},\n            {name: 'coverage', type: 'TABLE', value: new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Coverage(subtable.coverage)},\n            {name: 'deltaGlyphID', type: 'USHORT', value: subtable.deltaGlyphId}\n        ]);\n    } else {\n        return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('substitutionTable', [\n            {name: 'substFormat', type: 'USHORT', value: 2},\n            {name: 'coverage', type: 'TABLE', value: new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Coverage(subtable.coverage)}\n        ].concat(_table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].ushortList('substitute', subtable.substitute)));\n    }\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fail('Lookup type 1 substFormat must be 1 or 2.');\n};\n\nsubtableMakers[3] = function makeLookup3(subtable) {\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(subtable.substFormat === 1, 'Lookup type 3 substFormat must be 1.');\n    return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('substitutionTable', [\n        {name: 'substFormat', type: 'USHORT', value: 1},\n        {name: 'coverage', type: 'TABLE', value: new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Coverage(subtable.coverage)}\n    ].concat(_table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].tableList('altSet', subtable.alternateSets, function(alternateSet) {\n        return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('alternateSetTable', _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].ushortList('alternate', alternateSet));\n    })));\n};\n\nsubtableMakers[4] = function makeLookup4(subtable) {\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assert(subtable.substFormat === 1, 'Lookup type 4 substFormat must be 1.');\n    return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('substitutionTable', [\n        {name: 'substFormat', type: 'USHORT', value: 1},\n        {name: 'coverage', type: 'TABLE', value: new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Coverage(subtable.coverage)}\n    ].concat(_table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].tableList('ligSet', subtable.ligatureSets, function(ligatureSet) {\n        return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('ligatureSetTable', _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].tableList('ligature', ligatureSet, function(ligature) {\n            return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('ligatureTable',\n                [{name: 'ligGlyph', type: 'USHORT', value: ligature.ligGlyph}]\n                .concat(_table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].ushortList('component', ligature.components, ligature.components.length + 1))\n            );\n        }));\n    })));\n};\n\nfunction makeGsubTable(gsub) {\n    return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('GSUB', [\n        {name: 'version', type: 'ULONG', value: 0x10000},\n        {name: 'scripts', type: 'TABLE', value: new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].ScriptList(gsub.scripts)},\n        {name: 'features', type: 'TABLE', value: new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].FeatureList(gsub.features)},\n        {name: 'lookups', type: 'TABLE', value: new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].LookupList(gsub.lookups, subtableMakers)}\n    ]);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseGsubTable, make: makeGsubTable });\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/gsub.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/head.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/head.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `head` table contains global information about the font.\n// https://www.microsoft.com/typography/OTSPEC/head.htm\n\n\n\n\n\n// Parse the header `head` table\nfunction parseHeadTable(data, start) {\n    const head = {};\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start);\n    head.version = p.parseVersion();\n    head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;\n    head.checkSumAdjustment = p.parseULong();\n    head.magicNumber = p.parseULong();\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(head.magicNumber === 0x5F0F3CF5, 'Font header has wrong magic number.');\n    head.flags = p.parseUShort();\n    head.unitsPerEm = p.parseUShort();\n    head.created = p.parseLongDateTime();\n    head.modified = p.parseLongDateTime();\n    head.xMin = p.parseShort();\n    head.yMin = p.parseShort();\n    head.xMax = p.parseShort();\n    head.yMax = p.parseShort();\n    head.macStyle = p.parseUShort();\n    head.lowestRecPPEM = p.parseUShort();\n    head.fontDirectionHint = p.parseShort();\n    head.indexToLocFormat = p.parseShort();\n    head.glyphDataFormat = p.parseShort();\n    return head;\n}\n\nfunction makeHeadTable(options) {\n    // Apple Mac timestamp epoch is 01/01/1904 not 01/01/1970\n    const timestamp = Math.round(new Date().getTime() / 1000) + 2082844800;\n    let createdTimestamp = timestamp;\n\n    if (options.createdTimestamp) {\n        createdTimestamp = options.createdTimestamp + 2082844800;\n    }\n\n    return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('head', [\n        {name: 'version', type: 'FIXED', value: 0x00010000},\n        {name: 'fontRevision', type: 'FIXED', value: 0x00010000},\n        {name: 'checkSumAdjustment', type: 'ULONG', value: 0},\n        {name: 'magicNumber', type: 'ULONG', value: 0x5F0F3CF5},\n        {name: 'flags', type: 'USHORT', value: 0},\n        {name: 'unitsPerEm', type: 'USHORT', value: 1000},\n        {name: 'created', type: 'LONGDATETIME', value: createdTimestamp},\n        {name: 'modified', type: 'LONGDATETIME', value: timestamp},\n        {name: 'xMin', type: 'SHORT', value: 0},\n        {name: 'yMin', type: 'SHORT', value: 0},\n        {name: 'xMax', type: 'SHORT', value: 0},\n        {name: 'yMax', type: 'SHORT', value: 0},\n        {name: 'macStyle', type: 'USHORT', value: 0},\n        {name: 'lowestRecPPEM', type: 'USHORT', value: 0},\n        {name: 'fontDirectionHint', type: 'SHORT', value: 2},\n        {name: 'indexToLocFormat', type: 'SHORT', value: 0},\n        {name: 'glyphDataFormat', type: 'SHORT', value: 0}\n    ], options);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseHeadTable, make: makeHeadTable });\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/head.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/hhea.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/hhea.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `hhea` table contains information for horizontal layout.\n// https://www.microsoft.com/typography/OTSPEC/hhea.htm\n\n\n\n\n// Parse the horizontal header `hhea` table\nfunction parseHheaTable(data, start) {\n    const hhea = {};\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Parser(data, start);\n    hhea.version = p.parseVersion();\n    hhea.ascender = p.parseShort();\n    hhea.descender = p.parseShort();\n    hhea.lineGap = p.parseShort();\n    hhea.advanceWidthMax = p.parseUShort();\n    hhea.minLeftSideBearing = p.parseShort();\n    hhea.minRightSideBearing = p.parseShort();\n    hhea.xMaxExtent = p.parseShort();\n    hhea.caretSlopeRise = p.parseShort();\n    hhea.caretSlopeRun = p.parseShort();\n    hhea.caretOffset = p.parseShort();\n    p.relativeOffset += 8;\n    hhea.metricDataFormat = p.parseShort();\n    hhea.numberOfHMetrics = p.parseUShort();\n    return hhea;\n}\n\nfunction makeHheaTable(options) {\n    return new _table__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Table('hhea', [\n        {name: 'version', type: 'FIXED', value: 0x00010000},\n        {name: 'ascender', type: 'FWORD', value: 0},\n        {name: 'descender', type: 'FWORD', value: 0},\n        {name: 'lineGap', type: 'FWORD', value: 0},\n        {name: 'advanceWidthMax', type: 'UFWORD', value: 0},\n        {name: 'minLeftSideBearing', type: 'FWORD', value: 0},\n        {name: 'minRightSideBearing', type: 'FWORD', value: 0},\n        {name: 'xMaxExtent', type: 'FWORD', value: 0},\n        {name: 'caretSlopeRise', type: 'SHORT', value: 1},\n        {name: 'caretSlopeRun', type: 'SHORT', value: 0},\n        {name: 'caretOffset', type: 'SHORT', value: 0},\n        {name: 'reserved1', type: 'SHORT', value: 0},\n        {name: 'reserved2', type: 'SHORT', value: 0},\n        {name: 'reserved3', type: 'SHORT', value: 0},\n        {name: 'reserved4', type: 'SHORT', value: 0},\n        {name: 'metricDataFormat', type: 'SHORT', value: 0},\n        {name: 'numberOfHMetrics', type: 'USHORT', value: 0}\n    ], options);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseHheaTable, make: makeHheaTable });\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/hhea.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/hmtx.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/hmtx.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `hmtx` table contains the horizontal metrics for all glyphs.\n// https://www.microsoft.com/typography/OTSPEC/hmtx.htm\n\n\n\n\n// Parse the `hmtx` table, which contains the horizontal metrics for all glyphs.\n// This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.\nfunction parseHmtxTable(data, start, numMetrics, numGlyphs, glyphs) {\n    let advanceWidth;\n    let leftSideBearing;\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Parser(data, start);\n    for (let i = 0; i < numGlyphs; i += 1) {\n        // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.\n        if (i < numMetrics) {\n            advanceWidth = p.parseUShort();\n            leftSideBearing = p.parseShort();\n        }\n\n        const glyph = glyphs.get(i);\n        glyph.advanceWidth = advanceWidth;\n        glyph.leftSideBearing = leftSideBearing;\n    }\n}\n\nfunction makeHmtxTable(glyphs) {\n    const t = new _table__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Table('hmtx', []);\n    for (let i = 0; i < glyphs.length; i += 1) {\n        const glyph = glyphs.get(i);\n        const advanceWidth = glyph.advanceWidth || 0;\n        const leftSideBearing = glyph.leftSideBearing || 0;\n        t.fields.push({name: 'advanceWidth_' + i, type: 'USHORT', value: advanceWidth});\n        t.fields.push({name: 'leftSideBearing_' + i, type: 'SHORT', value: leftSideBearing});\n    }\n\n    return t;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseHmtxTable, make: makeHmtxTable });\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/hmtx.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/kern.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/kern.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n// The `kern` table contains kerning pairs.\n// Note that some fonts use the GPOS OpenType layout table to specify kerning.\n// https://www.microsoft.com/typography/OTSPEC/kern.htm\n\n\n\n\nfunction parseWindowsKernTable(p) {\n    const pairs = {};\n    // Skip nTables.\n    p.skip('uShort');\n    const subtableVersion = p.parseUShort();\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(subtableVersion === 0, 'Unsupported kern sub-table version.');\n    // Skip subtableLength, subtableCoverage\n    p.skip('uShort', 2);\n    const nPairs = p.parseUShort();\n    // Skip searchRange, entrySelector, rangeShift.\n    p.skip('uShort', 3);\n    for (let i = 0; i < nPairs; i += 1) {\n        const leftIndex = p.parseUShort();\n        const rightIndex = p.parseUShort();\n        const value = p.parseShort();\n        pairs[leftIndex + ',' + rightIndex] = value;\n    }\n    return pairs;\n}\n\nfunction parseMacKernTable(p) {\n    const pairs = {};\n    // The Mac kern table stores the version as a fixed (32 bits) but we only loaded the first 16 bits.\n    // Skip the rest.\n    p.skip('uShort');\n    const nTables = p.parseULong();\n    //check.argument(nTables === 1, 'Only 1 subtable is supported (got ' + nTables + ').');\n    if (nTables > 1) {\n        console.warn('Only the first kern subtable is supported.');\n    }\n    p.skip('uLong');\n    const coverage = p.parseUShort();\n    const subtableVersion = coverage & 0xFF;\n    p.skip('uShort');\n    if (subtableVersion === 0) {\n        const nPairs = p.parseUShort();\n        // Skip searchRange, entrySelector, rangeShift.\n        p.skip('uShort', 3);\n        for (let i = 0; i < nPairs; i += 1) {\n            const leftIndex = p.parseUShort();\n            const rightIndex = p.parseUShort();\n            const value = p.parseShort();\n            pairs[leftIndex + ',' + rightIndex] = value;\n        }\n    }\n    return pairs;\n}\n\n// Parse the `kern` table which contains kerning pairs.\nfunction parseKernTable(data, start) {\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start);\n    const tableVersion = p.parseUShort();\n    if (tableVersion === 0) {\n        return parseWindowsKernTable(p);\n    } else if (tableVersion === 1) {\n        return parseMacKernTable(p);\n    } else {\n        throw new Error('Unsupported kern table version (' + tableVersion + ').');\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseKernTable });\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/kern.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/loca.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/loca.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n// The `loca` table stores the offsets to the locations of the glyphs in the font.\n// https://www.microsoft.com/typography/OTSPEC/loca.htm\n\n\n\n// Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,\n// relative to the beginning of the glyphData table.\n// The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)\n// The loca table has two versions: a short version where offsets are stored as uShorts, and a long\n// version where offsets are stored as uLongs. The `head` table specifies which version to use\n// (under indexToLocFormat).\nfunction parseLocaTable(data, start, numGlyphs, shortVersion) {\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Parser(data, start);\n    const parseFn = shortVersion ? p.parseUShort : p.parseULong;\n    // There is an extra entry after the last index element to compute the length of the last glyph.\n    // That's why we use numGlyphs + 1.\n    const glyphOffsets = [];\n    for (let i = 0; i < numGlyphs + 1; i += 1) {\n        let glyphOffset = parseFn.call(p);\n        if (shortVersion) {\n            // The short table version stores the actual offset divided by 2.\n            glyphOffset *= 2;\n        }\n\n        glyphOffsets.push(glyphOffset);\n    }\n\n    return glyphOffsets;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseLocaTable });\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/loca.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/ltag.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/ltag.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `ltag` table stores IETF BCP-47 language tags. It allows supporting\n// languages for which TrueType does not assign a numeric code.\n// https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6ltag.html\n// http://www.w3.org/International/articles/language-tags/\n// http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\n\n\n\n\n\nfunction makeLtagTable(tags) {\n    const result = new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('ltag', [\n        {name: 'version', type: 'ULONG', value: 1},\n        {name: 'flags', type: 'ULONG', value: 0},\n        {name: 'numTags', type: 'ULONG', value: tags.length}\n    ]);\n\n    let stringPool = '';\n    const stringPoolOffset = 12 + tags.length * 4;\n    for (let i = 0; i < tags.length; ++i) {\n        let pos = stringPool.indexOf(tags[i]);\n        if (pos < 0) {\n            pos = stringPool.length;\n            stringPool += tags[i];\n        }\n\n        result.fields.push({name: 'offset ' + i, type: 'USHORT', value: stringPoolOffset + pos});\n        result.fields.push({name: 'length ' + i, type: 'USHORT', value: tags[i].length});\n    }\n\n    result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});\n    return result;\n}\n\nfunction parseLtagTable(data, start) {\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start);\n    const tableVersion = p.parseULong();\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(tableVersion === 1, 'Unsupported ltag table version.');\n    // The 'ltag' specification does not define any flags; skip the field.\n    p.skip('uLong', 1);\n    const numTags = p.parseULong();\n\n    const tags = [];\n    for (let i = 0; i < numTags; i++) {\n        let tag = '';\n        const offset = start + p.parseUShort();\n        const length = p.parseUShort();\n        for (let j = offset; j < offset + length; ++j) {\n            tag += String.fromCharCode(data.getInt8(j));\n        }\n\n        tags.push(tag);\n    }\n\n    return tags;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ make: makeLtagTable, parse: parseLtagTable });\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/ltag.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/maxp.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/maxp.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `maxp` table establishes the memory requirements for the font.\n// We need it just to get the number of glyphs in the font.\n// https://www.microsoft.com/typography/OTSPEC/maxp.htm\n\n\n\n\n// Parse the maximum profile `maxp` table.\nfunction parseMaxpTable(data, start) {\n    const maxp = {};\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Parser(data, start);\n    maxp.version = p.parseVersion();\n    maxp.numGlyphs = p.parseUShort();\n    if (maxp.version === 1.0) {\n        maxp.maxPoints = p.parseUShort();\n        maxp.maxContours = p.parseUShort();\n        maxp.maxCompositePoints = p.parseUShort();\n        maxp.maxCompositeContours = p.parseUShort();\n        maxp.maxZones = p.parseUShort();\n        maxp.maxTwilightPoints = p.parseUShort();\n        maxp.maxStorage = p.parseUShort();\n        maxp.maxFunctionDefs = p.parseUShort();\n        maxp.maxInstructionDefs = p.parseUShort();\n        maxp.maxStackElements = p.parseUShort();\n        maxp.maxSizeOfInstructions = p.parseUShort();\n        maxp.maxComponentElements = p.parseUShort();\n        maxp.maxComponentDepth = p.parseUShort();\n    }\n\n    return maxp;\n}\n\nfunction makeMaxpTable(numGlyphs) {\n    return new _table__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Table('maxp', [\n        {name: 'version', type: 'FIXED', value: 0x00005000},\n        {name: 'numGlyphs', type: 'USHORT', value: numGlyphs}\n    ]);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseMaxpTable, make: makeMaxpTable });\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/maxp.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/meta.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/meta.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types */ \"../../node_modules/opentype.js/src/types.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `GPOS` table contains kerning pairs, among other things.\n// https://www.microsoft.com/typography/OTSPEC/gpos.htm\n\n\n\n\n\n\n// Parse the metadata `meta` table.\n// https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6meta.html\nfunction parseMetaTable(data, start) {\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Parser(data, start);\n    const tableVersion = p.parseULong();\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(tableVersion === 1, 'Unsupported META table version.');\n    p.parseULong(); // flags - currently unused and set to 0\n    p.parseULong(); // tableOffset\n    const numDataMaps = p.parseULong();\n\n    const tags = {};\n    for (let i = 0; i < numDataMaps; i++) {\n        const tag = p.parseTag();\n        const dataOffset = p.parseULong();\n        const dataLength = p.parseULong();\n        const text = _types__WEBPACK_IMPORTED_MODULE_1__[\"decode\"].UTF8(data, start + dataOffset, dataLength);\n\n        tags[tag] = text;\n    }\n    return tags;\n}\n\nfunction makeMetaTable(tags) {\n    const numTags = Object.keys(tags).length;\n    let stringPool = '';\n    const stringPoolOffset = 16 + numTags * 12;\n\n    const result = new _table__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Table('meta', [\n        {name: 'version', type: 'ULONG', value: 1},\n        {name: 'flags', type: 'ULONG', value: 0},\n        {name: 'offset', type: 'ULONG', value: stringPoolOffset},\n        {name: 'numTags', type: 'ULONG', value: numTags}\n    ]);\n\n    for (let tag in tags) {\n        const pos = stringPool.length;\n        stringPool += tags[tag];\n\n        result.fields.push({name: 'tag ' + tag, type: 'TAG', value: tag});\n        result.fields.push({name: 'offset ' + tag, type: 'ULONG', value: stringPoolOffset + pos});\n        result.fields.push({name: 'length ' + tag, type: 'ULONG', value: tags[tag].length});\n    }\n\n    result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});\n\n    return result;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseMetaTable, make: makeMetaTable });\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/meta.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/name.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/name.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"../../node_modules/opentype.js/src/types.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `name` naming table.\n// https://www.microsoft.com/typography/OTSPEC/name.htm\n\n\n\n\n\n// NameIDs for the name table.\nconst nameTableNames = [\n    'copyright',              // 0\n    'fontFamily',             // 1\n    'fontSubfamily',          // 2\n    'uniqueID',               // 3\n    'fullName',               // 4\n    'version',                // 5\n    'postScriptName',         // 6\n    'trademark',              // 7\n    'manufacturer',           // 8\n    'designer',               // 9\n    'description',            // 10\n    'manufacturerURL',        // 11\n    'designerURL',            // 12\n    'license',                // 13\n    'licenseURL',             // 14\n    'reserved',               // 15\n    'preferredFamily',        // 16\n    'preferredSubfamily',     // 17\n    'compatibleFullName',     // 18\n    'sampleText',             // 19\n    'postScriptFindFontName', // 20\n    'wwsFamily',              // 21\n    'wwsSubfamily'            // 22\n];\n\nconst macLanguages = {\n    0: 'en',\n    1: 'fr',\n    2: 'de',\n    3: 'it',\n    4: 'nl',\n    5: 'sv',\n    6: 'es',\n    7: 'da',\n    8: 'pt',\n    9: 'no',\n    10: 'he',\n    11: 'ja',\n    12: 'ar',\n    13: 'fi',\n    14: 'el',\n    15: 'is',\n    16: 'mt',\n    17: 'tr',\n    18: 'hr',\n    19: 'zh-Hant',\n    20: 'ur',\n    21: 'hi',\n    22: 'th',\n    23: 'ko',\n    24: 'lt',\n    25: 'pl',\n    26: 'hu',\n    27: 'es',\n    28: 'lv',\n    29: 'se',\n    30: 'fo',\n    31: 'fa',\n    32: 'ru',\n    33: 'zh',\n    34: 'nl-BE',\n    35: 'ga',\n    36: 'sq',\n    37: 'ro',\n    38: 'cz',\n    39: 'sk',\n    40: 'si',\n    41: 'yi',\n    42: 'sr',\n    43: 'mk',\n    44: 'bg',\n    45: 'uk',\n    46: 'be',\n    47: 'uz',\n    48: 'kk',\n    49: 'az-Cyrl',\n    50: 'az-Arab',\n    51: 'hy',\n    52: 'ka',\n    53: 'mo',\n    54: 'ky',\n    55: 'tg',\n    56: 'tk',\n    57: 'mn-CN',\n    58: 'mn',\n    59: 'ps',\n    60: 'ks',\n    61: 'ku',\n    62: 'sd',\n    63: 'bo',\n    64: 'ne',\n    65: 'sa',\n    66: 'mr',\n    67: 'bn',\n    68: 'as',\n    69: 'gu',\n    70: 'pa',\n    71: 'or',\n    72: 'ml',\n    73: 'kn',\n    74: 'ta',\n    75: 'te',\n    76: 'si',\n    77: 'my',\n    78: 'km',\n    79: 'lo',\n    80: 'vi',\n    81: 'id',\n    82: 'tl',\n    83: 'ms',\n    84: 'ms-Arab',\n    85: 'am',\n    86: 'ti',\n    87: 'om',\n    88: 'so',\n    89: 'sw',\n    90: 'rw',\n    91: 'rn',\n    92: 'ny',\n    93: 'mg',\n    94: 'eo',\n    128: 'cy',\n    129: 'eu',\n    130: 'ca',\n    131: 'la',\n    132: 'qu',\n    133: 'gn',\n    134: 'ay',\n    135: 'tt',\n    136: 'ug',\n    137: 'dz',\n    138: 'jv',\n    139: 'su',\n    140: 'gl',\n    141: 'af',\n    142: 'br',\n    143: 'iu',\n    144: 'gd',\n    145: 'gv',\n    146: 'ga',\n    147: 'to',\n    148: 'el-polyton',\n    149: 'kl',\n    150: 'az',\n    151: 'nn'\n};\n\n// MacOS language ID → MacOS script ID\n//\n// Note that the script ID is not sufficient to determine what encoding\n// to use in TrueType files. For some languages, MacOS used a modification\n// of a mainstream script. For example, an Icelandic name would be stored\n// with smRoman in the TrueType naming table, but the actual encoding\n// is a special Icelandic version of the normal Macintosh Roman encoding.\n// As another example, Inuktitut uses an 8-bit encoding for Canadian Aboriginal\n// Syllables but MacOS had run out of available script codes, so this was\n// done as a (pretty radical) \"modification\" of Ethiopic.\n//\n// http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\nconst macLanguageToScript = {\n    0: 0,  // langEnglish → smRoman\n    1: 0,  // langFrench → smRoman\n    2: 0,  // langGerman → smRoman\n    3: 0,  // langItalian → smRoman\n    4: 0,  // langDutch → smRoman\n    5: 0,  // langSwedish → smRoman\n    6: 0,  // langSpanish → smRoman\n    7: 0,  // langDanish → smRoman\n    8: 0,  // langPortuguese → smRoman\n    9: 0,  // langNorwegian → smRoman\n    10: 5,  // langHebrew → smHebrew\n    11: 1,  // langJapanese → smJapanese\n    12: 4,  // langArabic → smArabic\n    13: 0,  // langFinnish → smRoman\n    14: 6,  // langGreek → smGreek\n    15: 0,  // langIcelandic → smRoman (modified)\n    16: 0,  // langMaltese → smRoman\n    17: 0,  // langTurkish → smRoman (modified)\n    18: 0,  // langCroatian → smRoman (modified)\n    19: 2,  // langTradChinese → smTradChinese\n    20: 4,  // langUrdu → smArabic\n    21: 9,  // langHindi → smDevanagari\n    22: 21,  // langThai → smThai\n    23: 3,  // langKorean → smKorean\n    24: 29,  // langLithuanian → smCentralEuroRoman\n    25: 29,  // langPolish → smCentralEuroRoman\n    26: 29,  // langHungarian → smCentralEuroRoman\n    27: 29,  // langEstonian → smCentralEuroRoman\n    28: 29,  // langLatvian → smCentralEuroRoman\n    29: 0,  // langSami → smRoman\n    30: 0,  // langFaroese → smRoman (modified)\n    31: 4,  // langFarsi → smArabic (modified)\n    32: 7,  // langRussian → smCyrillic\n    33: 25,  // langSimpChinese → smSimpChinese\n    34: 0,  // langFlemish → smRoman\n    35: 0,  // langIrishGaelic → smRoman (modified)\n    36: 0,  // langAlbanian → smRoman\n    37: 0,  // langRomanian → smRoman (modified)\n    38: 29,  // langCzech → smCentralEuroRoman\n    39: 29,  // langSlovak → smCentralEuroRoman\n    40: 0,  // langSlovenian → smRoman (modified)\n    41: 5,  // langYiddish → smHebrew\n    42: 7,  // langSerbian → smCyrillic\n    43: 7,  // langMacedonian → smCyrillic\n    44: 7,  // langBulgarian → smCyrillic\n    45: 7,  // langUkrainian → smCyrillic (modified)\n    46: 7,  // langByelorussian → smCyrillic\n    47: 7,  // langUzbek → smCyrillic\n    48: 7,  // langKazakh → smCyrillic\n    49: 7,  // langAzerbaijani → smCyrillic\n    50: 4,  // langAzerbaijanAr → smArabic\n    51: 24,  // langArmenian → smArmenian\n    52: 23,  // langGeorgian → smGeorgian\n    53: 7,  // langMoldavian → smCyrillic\n    54: 7,  // langKirghiz → smCyrillic\n    55: 7,  // langTajiki → smCyrillic\n    56: 7,  // langTurkmen → smCyrillic\n    57: 27,  // langMongolian → smMongolian\n    58: 7,  // langMongolianCyr → smCyrillic\n    59: 4,  // langPashto → smArabic\n    60: 4,  // langKurdish → smArabic\n    61: 4,  // langKashmiri → smArabic\n    62: 4,  // langSindhi → smArabic\n    63: 26,  // langTibetan → smTibetan\n    64: 9,  // langNepali → smDevanagari\n    65: 9,  // langSanskrit → smDevanagari\n    66: 9,  // langMarathi → smDevanagari\n    67: 13,  // langBengali → smBengali\n    68: 13,  // langAssamese → smBengali\n    69: 11,  // langGujarati → smGujarati\n    70: 10,  // langPunjabi → smGurmukhi\n    71: 12,  // langOriya → smOriya\n    72: 17,  // langMalayalam → smMalayalam\n    73: 16,  // langKannada → smKannada\n    74: 14,  // langTamil → smTamil\n    75: 15,  // langTelugu → smTelugu\n    76: 18,  // langSinhalese → smSinhalese\n    77: 19,  // langBurmese → smBurmese\n    78: 20,  // langKhmer → smKhmer\n    79: 22,  // langLao → smLao\n    80: 30,  // langVietnamese → smVietnamese\n    81: 0,  // langIndonesian → smRoman\n    82: 0,  // langTagalog → smRoman\n    83: 0,  // langMalayRoman → smRoman\n    84: 4,  // langMalayArabic → smArabic\n    85: 28,  // langAmharic → smEthiopic\n    86: 28,  // langTigrinya → smEthiopic\n    87: 28,  // langOromo → smEthiopic\n    88: 0,  // langSomali → smRoman\n    89: 0,  // langSwahili → smRoman\n    90: 0,  // langKinyarwanda → smRoman\n    91: 0,  // langRundi → smRoman\n    92: 0,  // langNyanja → smRoman\n    93: 0,  // langMalagasy → smRoman\n    94: 0,  // langEsperanto → smRoman\n    128: 0,  // langWelsh → smRoman (modified)\n    129: 0,  // langBasque → smRoman\n    130: 0,  // langCatalan → smRoman\n    131: 0,  // langLatin → smRoman\n    132: 0,  // langQuechua → smRoman\n    133: 0,  // langGuarani → smRoman\n    134: 0,  // langAymara → smRoman\n    135: 7,  // langTatar → smCyrillic\n    136: 4,  // langUighur → smArabic\n    137: 26,  // langDzongkha → smTibetan\n    138: 0,  // langJavaneseRom → smRoman\n    139: 0,  // langSundaneseRom → smRoman\n    140: 0,  // langGalician → smRoman\n    141: 0,  // langAfrikaans → smRoman\n    142: 0,  // langBreton → smRoman (modified)\n    143: 28,  // langInuktitut → smEthiopic (modified)\n    144: 0,  // langScottishGaelic → smRoman (modified)\n    145: 0,  // langManxGaelic → smRoman (modified)\n    146: 0,  // langIrishGaelicScript → smRoman (modified)\n    147: 0,  // langTongan → smRoman\n    148: 6,  // langGreekAncient → smRoman\n    149: 0,  // langGreenlandic → smRoman\n    150: 0,  // langAzerbaijanRoman → smRoman\n    151: 0   // langNynorsk → smRoman\n};\n\n// While Microsoft indicates a region/country for all its language\n// IDs, we omit the region code if it's equal to the \"most likely\n// region subtag\" according to Unicode CLDR. For scripts, we omit\n// the subtag if it is equal to the Suppress-Script entry in the\n// IANA language subtag registry for IETF BCP 47.\n//\n// For example, Microsoft states that its language code 0x041A is\n// Croatian in Croatia. We transform this to the BCP 47 language code 'hr'\n// and not 'hr-HR' because Croatia is the default country for Croatian,\n// according to Unicode CLDR. As another example, Microsoft states\n// that 0x101A is Croatian (Latin) in Bosnia-Herzegovina. We transform\n// this to 'hr-BA' and not 'hr-Latn-BA' because Latin is the default script\n// for the Croatian language, according to IANA.\n//\n// http://www.unicode.org/cldr/charts/latest/supplemental/likely_subtags.html\n// http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\nconst windowsLanguages = {\n    0x0436: 'af',\n    0x041C: 'sq',\n    0x0484: 'gsw',\n    0x045E: 'am',\n    0x1401: 'ar-DZ',\n    0x3C01: 'ar-BH',\n    0x0C01: 'ar',\n    0x0801: 'ar-IQ',\n    0x2C01: 'ar-JO',\n    0x3401: 'ar-KW',\n    0x3001: 'ar-LB',\n    0x1001: 'ar-LY',\n    0x1801: 'ary',\n    0x2001: 'ar-OM',\n    0x4001: 'ar-QA',\n    0x0401: 'ar-SA',\n    0x2801: 'ar-SY',\n    0x1C01: 'aeb',\n    0x3801: 'ar-AE',\n    0x2401: 'ar-YE',\n    0x042B: 'hy',\n    0x044D: 'as',\n    0x082C: 'az-Cyrl',\n    0x042C: 'az',\n    0x046D: 'ba',\n    0x042D: 'eu',\n    0x0423: 'be',\n    0x0845: 'bn',\n    0x0445: 'bn-IN',\n    0x201A: 'bs-Cyrl',\n    0x141A: 'bs',\n    0x047E: 'br',\n    0x0402: 'bg',\n    0x0403: 'ca',\n    0x0C04: 'zh-HK',\n    0x1404: 'zh-MO',\n    0x0804: 'zh',\n    0x1004: 'zh-SG',\n    0x0404: 'zh-TW',\n    0x0483: 'co',\n    0x041A: 'hr',\n    0x101A: 'hr-BA',\n    0x0405: 'cs',\n    0x0406: 'da',\n    0x048C: 'prs',\n    0x0465: 'dv',\n    0x0813: 'nl-BE',\n    0x0413: 'nl',\n    0x0C09: 'en-AU',\n    0x2809: 'en-BZ',\n    0x1009: 'en-CA',\n    0x2409: 'en-029',\n    0x4009: 'en-IN',\n    0x1809: 'en-IE',\n    0x2009: 'en-JM',\n    0x4409: 'en-MY',\n    0x1409: 'en-NZ',\n    0x3409: 'en-PH',\n    0x4809: 'en-SG',\n    0x1C09: 'en-ZA',\n    0x2C09: 'en-TT',\n    0x0809: 'en-GB',\n    0x0409: 'en',\n    0x3009: 'en-ZW',\n    0x0425: 'et',\n    0x0438: 'fo',\n    0x0464: 'fil',\n    0x040B: 'fi',\n    0x080C: 'fr-BE',\n    0x0C0C: 'fr-CA',\n    0x040C: 'fr',\n    0x140C: 'fr-LU',\n    0x180C: 'fr-MC',\n    0x100C: 'fr-CH',\n    0x0462: 'fy',\n    0x0456: 'gl',\n    0x0437: 'ka',\n    0x0C07: 'de-AT',\n    0x0407: 'de',\n    0x1407: 'de-LI',\n    0x1007: 'de-LU',\n    0x0807: 'de-CH',\n    0x0408: 'el',\n    0x046F: 'kl',\n    0x0447: 'gu',\n    0x0468: 'ha',\n    0x040D: 'he',\n    0x0439: 'hi',\n    0x040E: 'hu',\n    0x040F: 'is',\n    0x0470: 'ig',\n    0x0421: 'id',\n    0x045D: 'iu',\n    0x085D: 'iu-Latn',\n    0x083C: 'ga',\n    0x0434: 'xh',\n    0x0435: 'zu',\n    0x0410: 'it',\n    0x0810: 'it-CH',\n    0x0411: 'ja',\n    0x044B: 'kn',\n    0x043F: 'kk',\n    0x0453: 'km',\n    0x0486: 'quc',\n    0x0487: 'rw',\n    0x0441: 'sw',\n    0x0457: 'kok',\n    0x0412: 'ko',\n    0x0440: 'ky',\n    0x0454: 'lo',\n    0x0426: 'lv',\n    0x0427: 'lt',\n    0x082E: 'dsb',\n    0x046E: 'lb',\n    0x042F: 'mk',\n    0x083E: 'ms-BN',\n    0x043E: 'ms',\n    0x044C: 'ml',\n    0x043A: 'mt',\n    0x0481: 'mi',\n    0x047A: 'arn',\n    0x044E: 'mr',\n    0x047C: 'moh',\n    0x0450: 'mn',\n    0x0850: 'mn-CN',\n    0x0461: 'ne',\n    0x0414: 'nb',\n    0x0814: 'nn',\n    0x0482: 'oc',\n    0x0448: 'or',\n    0x0463: 'ps',\n    0x0415: 'pl',\n    0x0416: 'pt',\n    0x0816: 'pt-PT',\n    0x0446: 'pa',\n    0x046B: 'qu-BO',\n    0x086B: 'qu-EC',\n    0x0C6B: 'qu',\n    0x0418: 'ro',\n    0x0417: 'rm',\n    0x0419: 'ru',\n    0x243B: 'smn',\n    0x103B: 'smj-NO',\n    0x143B: 'smj',\n    0x0C3B: 'se-FI',\n    0x043B: 'se',\n    0x083B: 'se-SE',\n    0x203B: 'sms',\n    0x183B: 'sma-NO',\n    0x1C3B: 'sms',\n    0x044F: 'sa',\n    0x1C1A: 'sr-Cyrl-BA',\n    0x0C1A: 'sr',\n    0x181A: 'sr-Latn-BA',\n    0x081A: 'sr-Latn',\n    0x046C: 'nso',\n    0x0432: 'tn',\n    0x045B: 'si',\n    0x041B: 'sk',\n    0x0424: 'sl',\n    0x2C0A: 'es-AR',\n    0x400A: 'es-BO',\n    0x340A: 'es-CL',\n    0x240A: 'es-CO',\n    0x140A: 'es-CR',\n    0x1C0A: 'es-DO',\n    0x300A: 'es-EC',\n    0x440A: 'es-SV',\n    0x100A: 'es-GT',\n    0x480A: 'es-HN',\n    0x080A: 'es-MX',\n    0x4C0A: 'es-NI',\n    0x180A: 'es-PA',\n    0x3C0A: 'es-PY',\n    0x280A: 'es-PE',\n    0x500A: 'es-PR',\n\n    // Microsoft has defined two different language codes for\n    // “Spanish with modern sorting” and “Spanish with traditional\n    // sorting”. This makes sense for collation APIs, and it would be\n    // possible to express this in BCP 47 language tags via Unicode\n    // extensions (eg., es-u-co-trad is Spanish with traditional\n    // sorting). However, for storing names in fonts, the distinction\n    // does not make sense, so we give “es” in both cases.\n    0x0C0A: 'es',\n    0x040A: 'es',\n\n    0x540A: 'es-US',\n    0x380A: 'es-UY',\n    0x200A: 'es-VE',\n    0x081D: 'sv-FI',\n    0x041D: 'sv',\n    0x045A: 'syr',\n    0x0428: 'tg',\n    0x085F: 'tzm',\n    0x0449: 'ta',\n    0x0444: 'tt',\n    0x044A: 'te',\n    0x041E: 'th',\n    0x0451: 'bo',\n    0x041F: 'tr',\n    0x0442: 'tk',\n    0x0480: 'ug',\n    0x0422: 'uk',\n    0x042E: 'hsb',\n    0x0420: 'ur',\n    0x0843: 'uz-Cyrl',\n    0x0443: 'uz',\n    0x042A: 'vi',\n    0x0452: 'cy',\n    0x0488: 'wo',\n    0x0485: 'sah',\n    0x0478: 'ii',\n    0x046A: 'yo'\n};\n\n// Returns a IETF BCP 47 language code, for example 'zh-Hant'\n// for 'Chinese in the traditional script'.\nfunction getLanguageCode(platformID, languageID, ltag) {\n    switch (platformID) {\n        case 0:  // Unicode\n            if (languageID === 0xFFFF) {\n                return 'und';\n            } else if (ltag) {\n                return ltag[languageID];\n            }\n\n            break;\n\n        case 1:  // Macintosh\n            return macLanguages[languageID];\n\n        case 3:  // Windows\n            return windowsLanguages[languageID];\n    }\n\n    return undefined;\n}\n\nconst utf16 = 'utf-16';\n\n// MacOS script ID → encoding. This table stores the default case,\n// which can be overridden by macLanguageEncodings.\nconst macScriptEncodings = {\n    0: 'macintosh',           // smRoman\n    1: 'x-mac-japanese',      // smJapanese\n    2: 'x-mac-chinesetrad',   // smTradChinese\n    3: 'x-mac-korean',        // smKorean\n    6: 'x-mac-greek',         // smGreek\n    7: 'x-mac-cyrillic',      // smCyrillic\n    9: 'x-mac-devanagai',     // smDevanagari\n    10: 'x-mac-gurmukhi',     // smGurmukhi\n    11: 'x-mac-gujarati',     // smGujarati\n    12: 'x-mac-oriya',        // smOriya\n    13: 'x-mac-bengali',      // smBengali\n    14: 'x-mac-tamil',        // smTamil\n    15: 'x-mac-telugu',       // smTelugu\n    16: 'x-mac-kannada',      // smKannada\n    17: 'x-mac-malayalam',    // smMalayalam\n    18: 'x-mac-sinhalese',    // smSinhalese\n    19: 'x-mac-burmese',      // smBurmese\n    20: 'x-mac-khmer',        // smKhmer\n    21: 'x-mac-thai',         // smThai\n    22: 'x-mac-lao',          // smLao\n    23: 'x-mac-georgian',     // smGeorgian\n    24: 'x-mac-armenian',     // smArmenian\n    25: 'x-mac-chinesesimp',  // smSimpChinese\n    26: 'x-mac-tibetan',      // smTibetan\n    27: 'x-mac-mongolian',    // smMongolian\n    28: 'x-mac-ethiopic',     // smEthiopic\n    29: 'x-mac-ce',           // smCentralEuroRoman\n    30: 'x-mac-vietnamese',   // smVietnamese\n    31: 'x-mac-extarabic'     // smExtArabic\n};\n\n// MacOS language ID → encoding. This table stores the exceptional\n// cases, which override macScriptEncodings. For writing MacOS naming\n// tables, we need to emit a MacOS script ID. Therefore, we cannot\n// merge macScriptEncodings into macLanguageEncodings.\n//\n// http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\nconst macLanguageEncodings = {\n    15: 'x-mac-icelandic',    // langIcelandic\n    17: 'x-mac-turkish',      // langTurkish\n    18: 'x-mac-croatian',     // langCroatian\n    24: 'x-mac-ce',           // langLithuanian\n    25: 'x-mac-ce',           // langPolish\n    26: 'x-mac-ce',           // langHungarian\n    27: 'x-mac-ce',           // langEstonian\n    28: 'x-mac-ce',           // langLatvian\n    30: 'x-mac-icelandic',    // langFaroese\n    37: 'x-mac-romanian',     // langRomanian\n    38: 'x-mac-ce',           // langCzech\n    39: 'x-mac-ce',           // langSlovak\n    40: 'x-mac-ce',           // langSlovenian\n    143: 'x-mac-inuit',       // langInuktitut\n    146: 'x-mac-gaelic'       // langIrishGaelicScript\n};\n\nfunction getEncoding(platformID, encodingID, languageID) {\n    switch (platformID) {\n        case 0:  // Unicode\n            return utf16;\n\n        case 1:  // Apple Macintosh\n            return macLanguageEncodings[languageID] || macScriptEncodings[encodingID];\n\n        case 3:  // Microsoft Windows\n            if (encodingID === 1 || encodingID === 10) {\n                return utf16;\n            }\n\n            break;\n    }\n\n    return undefined;\n}\n\n// Parse the naming `name` table.\n// FIXME: Format 1 additional fields are not supported yet.\n// ltag is the content of the `ltag' table, such as ['en', 'zh-Hans', 'de-CH-1904'].\nfunction parseNameTable(data, start, ltag) {\n    const name = {};\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start);\n    const format = p.parseUShort();\n    const count = p.parseUShort();\n    const stringOffset = p.offset + p.parseUShort();\n    for (let i = 0; i < count; i++) {\n        const platformID = p.parseUShort();\n        const encodingID = p.parseUShort();\n        const languageID = p.parseUShort();\n        const nameID = p.parseUShort();\n        const property = nameTableNames[nameID] || nameID;\n        const byteLength = p.parseUShort();\n        const offset = p.parseUShort();\n        const language = getLanguageCode(platformID, languageID, ltag);\n        const encoding = getEncoding(platformID, encodingID, languageID);\n        if (encoding !== undefined && language !== undefined) {\n            let text;\n            if (encoding === utf16) {\n                text = _types__WEBPACK_IMPORTED_MODULE_0__[\"decode\"].UTF16(data, stringOffset + offset, byteLength);\n            } else {\n                text = _types__WEBPACK_IMPORTED_MODULE_0__[\"decode\"].MACSTRING(data, stringOffset + offset, byteLength, encoding);\n            }\n\n            if (text) {\n                let translations = name[property];\n                if (translations === undefined) {\n                    translations = name[property] = {};\n                }\n\n                translations[language] = text;\n            }\n        }\n    }\n\n    let langTagCount = 0;\n    if (format === 1) {\n        // FIXME: Also handle Microsoft's 'name' table 1.\n        langTagCount = p.parseUShort();\n    }\n\n    return name;\n}\n\n// {23: 'foo'} → {'foo': 23}\n// ['bar', 'baz'] → {'bar': 0, 'baz': 1}\nfunction reverseDict(dict) {\n    const result = {};\n    for (let key in dict) {\n        result[dict[key]] = parseInt(key);\n    }\n\n    return result;\n}\n\nfunction makeNameRecord(platformID, encodingID, languageID, nameID, length, offset) {\n    return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Record('NameRecord', [\n        {name: 'platformID', type: 'USHORT', value: platformID},\n        {name: 'encodingID', type: 'USHORT', value: encodingID},\n        {name: 'languageID', type: 'USHORT', value: languageID},\n        {name: 'nameID', type: 'USHORT', value: nameID},\n        {name: 'length', type: 'USHORT', value: length},\n        {name: 'offset', type: 'USHORT', value: offset}\n    ]);\n}\n\n// Finds the position of needle in haystack, or -1 if not there.\n// Like String.indexOf(), but for arrays.\nfunction findSubArray(needle, haystack) {\n    const needleLength = needle.length;\n    const limit = haystack.length - needleLength + 1;\n\n    loop:\n    for (let pos = 0; pos < limit; pos++) {\n        for (; pos < limit; pos++) {\n            for (let k = 0; k < needleLength; k++) {\n                if (haystack[pos + k] !== needle[k]) {\n                    continue loop;\n                }\n            }\n\n            return pos;\n        }\n    }\n\n    return -1;\n}\n\nfunction addStringToPool(s, pool) {\n    let offset = findSubArray(s, pool);\n    if (offset < 0) {\n        offset = pool.length;\n        let i = 0;\n        const len = s.length;\n        for (; i < len; ++i) {\n            pool.push(s[i]);\n        }\n\n    }\n\n    return offset;\n}\n\nfunction makeNameTable(names, ltag) {\n    let nameID;\n    const nameIDs = [];\n\n    const namesWithNumericKeys = {};\n    const nameTableIds = reverseDict(nameTableNames);\n    for (let key in names) {\n        let id = nameTableIds[key];\n        if (id === undefined) {\n            id = key;\n        }\n\n        nameID = parseInt(id);\n\n        if (isNaN(nameID)) {\n            throw new Error('Name table entry \"' + key + '\" does not exist, see nameTableNames for complete list.');\n        }\n\n        namesWithNumericKeys[nameID] = names[key];\n        nameIDs.push(nameID);\n    }\n\n    const macLanguageIds = reverseDict(macLanguages);\n    const windowsLanguageIds = reverseDict(windowsLanguages);\n\n    const nameRecords = [];\n    const stringPool = [];\n\n    for (let i = 0; i < nameIDs.length; i++) {\n        nameID = nameIDs[i];\n        const translations = namesWithNumericKeys[nameID];\n        for (let lang in translations) {\n            const text = translations[lang];\n\n            // For MacOS, we try to emit the name in the form that was introduced\n            // in the initial version of the TrueType spec (in the late 1980s).\n            // However, this can fail for various reasons: the requested BCP 47\n            // language code might not have an old-style Mac equivalent;\n            // we might not have a codec for the needed character encoding;\n            // or the name might contain characters that cannot be expressed\n            // in the old-style Macintosh encoding. In case of failure, we emit\n            // the name in a more modern fashion (Unicode encoding with BCP 47\n            // language tags) that is recognized by MacOS 10.5, released in 2009.\n            // If fonts were only read by operating systems, we could simply\n            // emit all names in the modern form; this would be much easier.\n            // However, there are many applications and libraries that read\n            // 'name' tables directly, and these will usually only recognize\n            // the ancient form (silently skipping the unrecognized names).\n            let macPlatform = 1;  // Macintosh\n            let macLanguage = macLanguageIds[lang];\n            let macScript = macLanguageToScript[macLanguage];\n            const macEncoding = getEncoding(macPlatform, macScript, macLanguage);\n            let macName = _types__WEBPACK_IMPORTED_MODULE_0__[\"encode\"].MACSTRING(text, macEncoding);\n            if (macName === undefined) {\n                macPlatform = 0;  // Unicode\n                macLanguage = ltag.indexOf(lang);\n                if (macLanguage < 0) {\n                    macLanguage = ltag.length;\n                    ltag.push(lang);\n                }\n\n                macScript = 4;  // Unicode 2.0 and later\n                macName = _types__WEBPACK_IMPORTED_MODULE_0__[\"encode\"].UTF16(text);\n            }\n\n            const macNameOffset = addStringToPool(macName, stringPool);\n            nameRecords.push(makeNameRecord(macPlatform, macScript, macLanguage,\n                                            nameID, macName.length, macNameOffset));\n\n            const winLanguage = windowsLanguageIds[lang];\n            if (winLanguage !== undefined) {\n                const winName = _types__WEBPACK_IMPORTED_MODULE_0__[\"encode\"].UTF16(text);\n                const winNameOffset = addStringToPool(winName, stringPool);\n                nameRecords.push(makeNameRecord(3, 1, winLanguage,\n                                                nameID, winName.length, winNameOffset));\n            }\n        }\n    }\n\n    nameRecords.sort(function(a, b) {\n        return ((a.platformID - b.platformID) ||\n                (a.encodingID - b.encodingID) ||\n                (a.languageID - b.languageID) ||\n                (a.nameID - b.nameID));\n    });\n\n    const t = new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('name', [\n        {name: 'format', type: 'USHORT', value: 0},\n        {name: 'count', type: 'USHORT', value: nameRecords.length},\n        {name: 'stringOffset', type: 'USHORT', value: 6 + nameRecords.length * 12}\n    ]);\n\n    for (let r = 0; r < nameRecords.length; r++) {\n        t.fields.push({name: 'record_' + r, type: 'RECORD', value: nameRecords[r]});\n    }\n\n    t.fields.push({name: 'strings', type: 'LITERAL', value: stringPool});\n    return t;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseNameTable, make: makeNameTable });\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/name.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/os2.js":
/*!***************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/os2.js ***!
  \***************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `OS/2` table contains metrics required in OpenType fonts.\n// https://www.microsoft.com/typography/OTSPEC/os2.htm\n\n\n\n\nconst unicodeRanges = [\n    {begin: 0x0000, end: 0x007F}, // Basic Latin\n    {begin: 0x0080, end: 0x00FF}, // Latin-1 Supplement\n    {begin: 0x0100, end: 0x017F}, // Latin Extended-A\n    {begin: 0x0180, end: 0x024F}, // Latin Extended-B\n    {begin: 0x0250, end: 0x02AF}, // IPA Extensions\n    {begin: 0x02B0, end: 0x02FF}, // Spacing Modifier Letters\n    {begin: 0x0300, end: 0x036F}, // Combining Diacritical Marks\n    {begin: 0x0370, end: 0x03FF}, // Greek and Coptic\n    {begin: 0x2C80, end: 0x2CFF}, // Coptic\n    {begin: 0x0400, end: 0x04FF}, // Cyrillic\n    {begin: 0x0530, end: 0x058F}, // Armenian\n    {begin: 0x0590, end: 0x05FF}, // Hebrew\n    {begin: 0xA500, end: 0xA63F}, // Vai\n    {begin: 0x0600, end: 0x06FF}, // Arabic\n    {begin: 0x07C0, end: 0x07FF}, // NKo\n    {begin: 0x0900, end: 0x097F}, // Devanagari\n    {begin: 0x0980, end: 0x09FF}, // Bengali\n    {begin: 0x0A00, end: 0x0A7F}, // Gurmukhi\n    {begin: 0x0A80, end: 0x0AFF}, // Gujarati\n    {begin: 0x0B00, end: 0x0B7F}, // Oriya\n    {begin: 0x0B80, end: 0x0BFF}, // Tamil\n    {begin: 0x0C00, end: 0x0C7F}, // Telugu\n    {begin: 0x0C80, end: 0x0CFF}, // Kannada\n    {begin: 0x0D00, end: 0x0D7F}, // Malayalam\n    {begin: 0x0E00, end: 0x0E7F}, // Thai\n    {begin: 0x0E80, end: 0x0EFF}, // Lao\n    {begin: 0x10A0, end: 0x10FF}, // Georgian\n    {begin: 0x1B00, end: 0x1B7F}, // Balinese\n    {begin: 0x1100, end: 0x11FF}, // Hangul Jamo\n    {begin: 0x1E00, end: 0x1EFF}, // Latin Extended Additional\n    {begin: 0x1F00, end: 0x1FFF}, // Greek Extended\n    {begin: 0x2000, end: 0x206F}, // General Punctuation\n    {begin: 0x2070, end: 0x209F}, // Superscripts And Subscripts\n    {begin: 0x20A0, end: 0x20CF}, // Currency Symbol\n    {begin: 0x20D0, end: 0x20FF}, // Combining Diacritical Marks For Symbols\n    {begin: 0x2100, end: 0x214F}, // Letterlike Symbols\n    {begin: 0x2150, end: 0x218F}, // Number Forms\n    {begin: 0x2190, end: 0x21FF}, // Arrows\n    {begin: 0x2200, end: 0x22FF}, // Mathematical Operators\n    {begin: 0x2300, end: 0x23FF}, // Miscellaneous Technical\n    {begin: 0x2400, end: 0x243F}, // Control Pictures\n    {begin: 0x2440, end: 0x245F}, // Optical Character Recognition\n    {begin: 0x2460, end: 0x24FF}, // Enclosed Alphanumerics\n    {begin: 0x2500, end: 0x257F}, // Box Drawing\n    {begin: 0x2580, end: 0x259F}, // Block Elements\n    {begin: 0x25A0, end: 0x25FF}, // Geometric Shapes\n    {begin: 0x2600, end: 0x26FF}, // Miscellaneous Symbols\n    {begin: 0x2700, end: 0x27BF}, // Dingbats\n    {begin: 0x3000, end: 0x303F}, // CJK Symbols And Punctuation\n    {begin: 0x3040, end: 0x309F}, // Hiragana\n    {begin: 0x30A0, end: 0x30FF}, // Katakana\n    {begin: 0x3100, end: 0x312F}, // Bopomofo\n    {begin: 0x3130, end: 0x318F}, // Hangul Compatibility Jamo\n    {begin: 0xA840, end: 0xA87F}, // Phags-pa\n    {begin: 0x3200, end: 0x32FF}, // Enclosed CJK Letters And Months\n    {begin: 0x3300, end: 0x33FF}, // CJK Compatibility\n    {begin: 0xAC00, end: 0xD7AF}, // Hangul Syllables\n    {begin: 0xD800, end: 0xDFFF}, // Non-Plane 0 *\n    {begin: 0x10900, end: 0x1091F}, // Phoenicia\n    {begin: 0x4E00, end: 0x9FFF}, // CJK Unified Ideographs\n    {begin: 0xE000, end: 0xF8FF}, // Private Use Area (plane 0)\n    {begin: 0x31C0, end: 0x31EF}, // CJK Strokes\n    {begin: 0xFB00, end: 0xFB4F}, // Alphabetic Presentation Forms\n    {begin: 0xFB50, end: 0xFDFF}, // Arabic Presentation Forms-A\n    {begin: 0xFE20, end: 0xFE2F}, // Combining Half Marks\n    {begin: 0xFE10, end: 0xFE1F}, // Vertical Forms\n    {begin: 0xFE50, end: 0xFE6F}, // Small Form Variants\n    {begin: 0xFE70, end: 0xFEFF}, // Arabic Presentation Forms-B\n    {begin: 0xFF00, end: 0xFFEF}, // Halfwidth And Fullwidth Forms\n    {begin: 0xFFF0, end: 0xFFFF}, // Specials\n    {begin: 0x0F00, end: 0x0FFF}, // Tibetan\n    {begin: 0x0700, end: 0x074F}, // Syriac\n    {begin: 0x0780, end: 0x07BF}, // Thaana\n    {begin: 0x0D80, end: 0x0DFF}, // Sinhala\n    {begin: 0x1000, end: 0x109F}, // Myanmar\n    {begin: 0x1200, end: 0x137F}, // Ethiopic\n    {begin: 0x13A0, end: 0x13FF}, // Cherokee\n    {begin: 0x1400, end: 0x167F}, // Unified Canadian Aboriginal Syllabics\n    {begin: 0x1680, end: 0x169F}, // Ogham\n    {begin: 0x16A0, end: 0x16FF}, // Runic\n    {begin: 0x1780, end: 0x17FF}, // Khmer\n    {begin: 0x1800, end: 0x18AF}, // Mongolian\n    {begin: 0x2800, end: 0x28FF}, // Braille Patterns\n    {begin: 0xA000, end: 0xA48F}, // Yi Syllables\n    {begin: 0x1700, end: 0x171F}, // Tagalog\n    {begin: 0x10300, end: 0x1032F}, // Old Italic\n    {begin: 0x10330, end: 0x1034F}, // Gothic\n    {begin: 0x10400, end: 0x1044F}, // Deseret\n    {begin: 0x1D000, end: 0x1D0FF}, // Byzantine Musical Symbols\n    {begin: 0x1D400, end: 0x1D7FF}, // Mathematical Alphanumeric Symbols\n    {begin: 0xFF000, end: 0xFFFFD}, // Private Use (plane 15)\n    {begin: 0xFE00, end: 0xFE0F}, // Variation Selectors\n    {begin: 0xE0000, end: 0xE007F}, // Tags\n    {begin: 0x1900, end: 0x194F}, // Limbu\n    {begin: 0x1950, end: 0x197F}, // Tai Le\n    {begin: 0x1980, end: 0x19DF}, // New Tai Lue\n    {begin: 0x1A00, end: 0x1A1F}, // Buginese\n    {begin: 0x2C00, end: 0x2C5F}, // Glagolitic\n    {begin: 0x2D30, end: 0x2D7F}, // Tifinagh\n    {begin: 0x4DC0, end: 0x4DFF}, // Yijing Hexagram Symbols\n    {begin: 0xA800, end: 0xA82F}, // Syloti Nagri\n    {begin: 0x10000, end: 0x1007F}, // Linear B Syllabary\n    {begin: 0x10140, end: 0x1018F}, // Ancient Greek Numbers\n    {begin: 0x10380, end: 0x1039F}, // Ugaritic\n    {begin: 0x103A0, end: 0x103DF}, // Old Persian\n    {begin: 0x10450, end: 0x1047F}, // Shavian\n    {begin: 0x10480, end: 0x104AF}, // Osmanya\n    {begin: 0x10800, end: 0x1083F}, // Cypriot Syllabary\n    {begin: 0x10A00, end: 0x10A5F}, // Kharoshthi\n    {begin: 0x1D300, end: 0x1D35F}, // Tai Xuan Jing Symbols\n    {begin: 0x12000, end: 0x123FF}, // Cuneiform\n    {begin: 0x1D360, end: 0x1D37F}, // Counting Rod Numerals\n    {begin: 0x1B80, end: 0x1BBF}, // Sundanese\n    {begin: 0x1C00, end: 0x1C4F}, // Lepcha\n    {begin: 0x1C50, end: 0x1C7F}, // Ol Chiki\n    {begin: 0xA880, end: 0xA8DF}, // Saurashtra\n    {begin: 0xA900, end: 0xA92F}, // Kayah Li\n    {begin: 0xA930, end: 0xA95F}, // Rejang\n    {begin: 0xAA00, end: 0xAA5F}, // Cham\n    {begin: 0x10190, end: 0x101CF}, // Ancient Symbols\n    {begin: 0x101D0, end: 0x101FF}, // Phaistos Disc\n    {begin: 0x102A0, end: 0x102DF}, // Carian\n    {begin: 0x1F030, end: 0x1F09F}  // Domino Tiles\n];\n\nfunction getUnicodeRange(unicode) {\n    for (let i = 0; i < unicodeRanges.length; i += 1) {\n        const range = unicodeRanges[i];\n        if (unicode >= range.begin && unicode < range.end) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\n// Parse the OS/2 and Windows metrics `OS/2` table\nfunction parseOS2Table(data, start) {\n    const os2 = {};\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Parser(data, start);\n    os2.version = p.parseUShort();\n    os2.xAvgCharWidth = p.parseShort();\n    os2.usWeightClass = p.parseUShort();\n    os2.usWidthClass = p.parseUShort();\n    os2.fsType = p.parseUShort();\n    os2.ySubscriptXSize = p.parseShort();\n    os2.ySubscriptYSize = p.parseShort();\n    os2.ySubscriptXOffset = p.parseShort();\n    os2.ySubscriptYOffset = p.parseShort();\n    os2.ySuperscriptXSize = p.parseShort();\n    os2.ySuperscriptYSize = p.parseShort();\n    os2.ySuperscriptXOffset = p.parseShort();\n    os2.ySuperscriptYOffset = p.parseShort();\n    os2.yStrikeoutSize = p.parseShort();\n    os2.yStrikeoutPosition = p.parseShort();\n    os2.sFamilyClass = p.parseShort();\n    os2.panose = [];\n    for (let i = 0; i < 10; i++) {\n        os2.panose[i] = p.parseByte();\n    }\n\n    os2.ulUnicodeRange1 = p.parseULong();\n    os2.ulUnicodeRange2 = p.parseULong();\n    os2.ulUnicodeRange3 = p.parseULong();\n    os2.ulUnicodeRange4 = p.parseULong();\n    os2.achVendID = String.fromCharCode(p.parseByte(), p.parseByte(), p.parseByte(), p.parseByte());\n    os2.fsSelection = p.parseUShort();\n    os2.usFirstCharIndex = p.parseUShort();\n    os2.usLastCharIndex = p.parseUShort();\n    os2.sTypoAscender = p.parseShort();\n    os2.sTypoDescender = p.parseShort();\n    os2.sTypoLineGap = p.parseShort();\n    os2.usWinAscent = p.parseUShort();\n    os2.usWinDescent = p.parseUShort();\n    if (os2.version >= 1) {\n        os2.ulCodePageRange1 = p.parseULong();\n        os2.ulCodePageRange2 = p.parseULong();\n    }\n\n    if (os2.version >= 2) {\n        os2.sxHeight = p.parseShort();\n        os2.sCapHeight = p.parseShort();\n        os2.usDefaultChar = p.parseUShort();\n        os2.usBreakChar = p.parseUShort();\n        os2.usMaxContent = p.parseUShort();\n    }\n\n    return os2;\n}\n\nfunction makeOS2Table(options) {\n    return new _table__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Table('OS/2', [\n        {name: 'version', type: 'USHORT', value: 0x0003},\n        {name: 'xAvgCharWidth', type: 'SHORT', value: 0},\n        {name: 'usWeightClass', type: 'USHORT', value: 0},\n        {name: 'usWidthClass', type: 'USHORT', value: 0},\n        {name: 'fsType', type: 'USHORT', value: 0},\n        {name: 'ySubscriptXSize', type: 'SHORT', value: 650},\n        {name: 'ySubscriptYSize', type: 'SHORT', value: 699},\n        {name: 'ySubscriptXOffset', type: 'SHORT', value: 0},\n        {name: 'ySubscriptYOffset', type: 'SHORT', value: 140},\n        {name: 'ySuperscriptXSize', type: 'SHORT', value: 650},\n        {name: 'ySuperscriptYSize', type: 'SHORT', value: 699},\n        {name: 'ySuperscriptXOffset', type: 'SHORT', value: 0},\n        {name: 'ySuperscriptYOffset', type: 'SHORT', value: 479},\n        {name: 'yStrikeoutSize', type: 'SHORT', value: 49},\n        {name: 'yStrikeoutPosition', type: 'SHORT', value: 258},\n        {name: 'sFamilyClass', type: 'SHORT', value: 0},\n        {name: 'bFamilyType', type: 'BYTE', value: 0},\n        {name: 'bSerifStyle', type: 'BYTE', value: 0},\n        {name: 'bWeight', type: 'BYTE', value: 0},\n        {name: 'bProportion', type: 'BYTE', value: 0},\n        {name: 'bContrast', type: 'BYTE', value: 0},\n        {name: 'bStrokeVariation', type: 'BYTE', value: 0},\n        {name: 'bArmStyle', type: 'BYTE', value: 0},\n        {name: 'bLetterform', type: 'BYTE', value: 0},\n        {name: 'bMidline', type: 'BYTE', value: 0},\n        {name: 'bXHeight', type: 'BYTE', value: 0},\n        {name: 'ulUnicodeRange1', type: 'ULONG', value: 0},\n        {name: 'ulUnicodeRange2', type: 'ULONG', value: 0},\n        {name: 'ulUnicodeRange3', type: 'ULONG', value: 0},\n        {name: 'ulUnicodeRange4', type: 'ULONG', value: 0},\n        {name: 'achVendID', type: 'CHARARRAY', value: 'XXXX'},\n        {name: 'fsSelection', type: 'USHORT', value: 0},\n        {name: 'usFirstCharIndex', type: 'USHORT', value: 0},\n        {name: 'usLastCharIndex', type: 'USHORT', value: 0},\n        {name: 'sTypoAscender', type: 'SHORT', value: 0},\n        {name: 'sTypoDescender', type: 'SHORT', value: 0},\n        {name: 'sTypoLineGap', type: 'SHORT', value: 0},\n        {name: 'usWinAscent', type: 'USHORT', value: 0},\n        {name: 'usWinDescent', type: 'USHORT', value: 0},\n        {name: 'ulCodePageRange1', type: 'ULONG', value: 0},\n        {name: 'ulCodePageRange2', type: 'ULONG', value: 0},\n        {name: 'sxHeight', type: 'SHORT', value: 0},\n        {name: 'sCapHeight', type: 'SHORT', value: 0},\n        {name: 'usDefaultChar', type: 'USHORT', value: 0},\n        {name: 'usBreakChar', type: 'USHORT', value: 0},\n        {name: 'usMaxContext', type: 'USHORT', value: 0}\n    ], options);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parseOS2Table, make: makeOS2Table, unicodeRanges, getUnicodeRange });\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/os2.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/post.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/post.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../encoding */ \"../../node_modules/opentype.js/src/encoding.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parse */ \"../../node_modules/opentype.js/src/parse.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n// The `post` table stores additional PostScript information, such as glyph names.\n// https://www.microsoft.com/typography/OTSPEC/post.htm\n\n\n\n\n\n// Parse the PostScript `post` table\nfunction parsePostTable(data, start) {\n    const post = {};\n    const p = new _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Parser(data, start);\n    post.version = p.parseVersion();\n    post.italicAngle = p.parseFixed();\n    post.underlinePosition = p.parseShort();\n    post.underlineThickness = p.parseShort();\n    post.isFixedPitch = p.parseULong();\n    post.minMemType42 = p.parseULong();\n    post.maxMemType42 = p.parseULong();\n    post.minMemType1 = p.parseULong();\n    post.maxMemType1 = p.parseULong();\n    switch (post.version) {\n        case 1:\n            post.names = _encoding__WEBPACK_IMPORTED_MODULE_0__[\"standardNames\"].slice();\n            break;\n        case 2:\n            post.numberOfGlyphs = p.parseUShort();\n            post.glyphNameIndex = new Array(post.numberOfGlyphs);\n            for (let i = 0; i < post.numberOfGlyphs; i++) {\n                post.glyphNameIndex[i] = p.parseUShort();\n            }\n\n            post.names = [];\n            for (let i = 0; i < post.numberOfGlyphs; i++) {\n                if (post.glyphNameIndex[i] >= _encoding__WEBPACK_IMPORTED_MODULE_0__[\"standardNames\"].length) {\n                    const nameLength = p.parseChar();\n                    post.names.push(p.parseString(nameLength));\n                }\n            }\n\n            break;\n        case 2.5:\n            post.numberOfGlyphs = p.parseUShort();\n            post.offset = new Array(post.numberOfGlyphs);\n            for (let i = 0; i < post.numberOfGlyphs; i++) {\n                post.offset[i] = p.parseChar();\n            }\n\n            break;\n    }\n    return post;\n}\n\nfunction makePostTable() {\n    return new _table__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Table('post', [\n        {name: 'version', type: 'FIXED', value: 0x00030000},\n        {name: 'italicAngle', type: 'FIXED', value: 0},\n        {name: 'underlinePosition', type: 'FWORD', value: 0},\n        {name: 'underlineThickness', type: 'FWORD', value: 0},\n        {name: 'isFixedPitch', type: 'ULONG', value: 0},\n        {name: 'minMemType42', type: 'ULONG', value: 0},\n        {name: 'maxMemType42', type: 'ULONG', value: 0},\n        {name: 'minMemType1', type: 'ULONG', value: 0},\n        {name: 'maxMemType1', type: 'ULONG', value: 0}\n    ]);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ parse: parsePostTable, make: makePostTable });\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/post.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tables/sfnt.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/sfnt.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../check */ \"../../node_modules/opentype.js/src/check.js\");\n/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../table */ \"../../node_modules/opentype.js/src/table.js\");\n/* harmony import */ var _cmap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cmap */ \"../../node_modules/opentype.js/src/tables/cmap.js\");\n/* harmony import */ var _cff__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cff */ \"../../node_modules/opentype.js/src/tables/cff.js\");\n/* harmony import */ var _head__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./head */ \"../../node_modules/opentype.js/src/tables/head.js\");\n/* harmony import */ var _hhea__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hhea */ \"../../node_modules/opentype.js/src/tables/hhea.js\");\n/* harmony import */ var _hmtx__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hmtx */ \"../../node_modules/opentype.js/src/tables/hmtx.js\");\n/* harmony import */ var _ltag__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ltag */ \"../../node_modules/opentype.js/src/tables/ltag.js\");\n/* harmony import */ var _maxp__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./maxp */ \"../../node_modules/opentype.js/src/tables/maxp.js\");\n/* harmony import */ var _name__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./name */ \"../../node_modules/opentype.js/src/tables/name.js\");\n/* harmony import */ var _os2__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./os2 */ \"../../node_modules/opentype.js/src/tables/os2.js\");\n/* harmony import */ var _post__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./post */ \"../../node_modules/opentype.js/src/tables/post.js\");\n/* harmony import */ var _gsub__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./gsub */ \"../../node_modules/opentype.js/src/tables/gsub.js\");\n/* harmony import */ var _meta__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./meta */ \"../../node_modules/opentype.js/src/tables/meta.js\");\n// The `sfnt` wrapper provides organization for the tables in the font.\n// It is the top-level data structure in a font.\n// https://www.microsoft.com/typography/OTSPEC/otff.htm\n// Recommendations for creating OpenType Fonts:\n// http://www.microsoft.com/typography/otspec140/recom.htm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction log2(v) {\n    return Math.log(v) / Math.log(2) | 0;\n}\n\nfunction computeCheckSum(bytes) {\n    while (bytes.length % 4 !== 0) {\n        bytes.push(0);\n    }\n\n    let sum = 0;\n    for (let i = 0; i < bytes.length; i += 4) {\n        sum += (bytes[i] << 24) +\n            (bytes[i + 1] << 16) +\n            (bytes[i + 2] << 8) +\n            (bytes[i + 3]);\n    }\n\n    sum %= Math.pow(2, 32);\n    return sum;\n}\n\nfunction makeTableRecord(tag, checkSum, offset, length) {\n    return new _table__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Record('Table Record', [\n        {name: 'tag', type: 'TAG', value: tag !== undefined ? tag : ''},\n        {name: 'checkSum', type: 'ULONG', value: checkSum !== undefined ? checkSum : 0},\n        {name: 'offset', type: 'ULONG', value: offset !== undefined ? offset : 0},\n        {name: 'length', type: 'ULONG', value: length !== undefined ? length : 0}\n    ]);\n}\n\nfunction makeSfntTable(tables) {\n    const sfnt = new _table__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Table('sfnt', [\n        {name: 'version', type: 'TAG', value: 'OTTO'},\n        {name: 'numTables', type: 'USHORT', value: 0},\n        {name: 'searchRange', type: 'USHORT', value: 0},\n        {name: 'entrySelector', type: 'USHORT', value: 0},\n        {name: 'rangeShift', type: 'USHORT', value: 0}\n    ]);\n    sfnt.tables = tables;\n    sfnt.numTables = tables.length;\n    const highestPowerOf2 = Math.pow(2, log2(sfnt.numTables));\n    sfnt.searchRange = 16 * highestPowerOf2;\n    sfnt.entrySelector = log2(highestPowerOf2);\n    sfnt.rangeShift = sfnt.numTables * 16 - sfnt.searchRange;\n\n    const recordFields = [];\n    const tableFields = [];\n\n    let offset = sfnt.sizeOf() + (makeTableRecord().sizeOf() * sfnt.numTables);\n    while (offset % 4 !== 0) {\n        offset += 1;\n        tableFields.push({name: 'padding', type: 'BYTE', value: 0});\n    }\n\n    for (let i = 0; i < tables.length; i += 1) {\n        const t = tables[i];\n        _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(t.tableName.length === 4, 'Table name' + t.tableName + ' is invalid.');\n        const tableLength = t.sizeOf();\n        const tableRecord = makeTableRecord(t.tableName, computeCheckSum(t.encode()), offset, tableLength);\n        recordFields.push({name: tableRecord.tag + ' Table Record', type: 'RECORD', value: tableRecord});\n        tableFields.push({name: t.tableName + ' table', type: 'RECORD', value: t});\n        offset += tableLength;\n        _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(!isNaN(offset), 'Something went wrong calculating the offset.');\n        while (offset % 4 !== 0) {\n            offset += 1;\n            tableFields.push({name: 'padding', type: 'BYTE', value: 0});\n        }\n    }\n\n    // Table records need to be sorted alphabetically.\n    recordFields.sort(function(r1, r2) {\n        if (r1.value.tag > r2.value.tag) {\n            return 1;\n        } else {\n            return -1;\n        }\n    });\n\n    sfnt.fields = sfnt.fields.concat(recordFields);\n    sfnt.fields = sfnt.fields.concat(tableFields);\n    return sfnt;\n}\n\n// Get the metrics for a character. If the string has more than one character\n// this function returns metrics for the first available character.\n// You can provide optional fallback metrics if no characters are available.\nfunction metricsForChar(font, chars, notFoundMetrics) {\n    for (let i = 0; i < chars.length; i += 1) {\n        const glyphIndex = font.charToGlyphIndex(chars[i]);\n        if (glyphIndex > 0) {\n            const glyph = font.glyphs.get(glyphIndex);\n            return glyph.getMetrics();\n        }\n    }\n\n    return notFoundMetrics;\n}\n\nfunction average(vs) {\n    let sum = 0;\n    for (let i = 0; i < vs.length; i += 1) {\n        sum += vs[i];\n    }\n\n    return sum / vs.length;\n}\n\n// Convert the font object to a SFNT data structure.\n// This structure contains all the necessary tables and metadata to create a binary OTF file.\nfunction fontToSfntTable(font) {\n    const xMins = [];\n    const yMins = [];\n    const xMaxs = [];\n    const yMaxs = [];\n    const advanceWidths = [];\n    const leftSideBearings = [];\n    const rightSideBearings = [];\n    let firstCharIndex;\n    let lastCharIndex = 0;\n    let ulUnicodeRange1 = 0;\n    let ulUnicodeRange2 = 0;\n    let ulUnicodeRange3 = 0;\n    let ulUnicodeRange4 = 0;\n\n    for (let i = 0; i < font.glyphs.length; i += 1) {\n        const glyph = font.glyphs.get(i);\n        const unicode = glyph.unicode | 0;\n\n        if (isNaN(glyph.advanceWidth)) {\n            throw new Error('Glyph ' + glyph.name + ' (' + i + '): advanceWidth is not a number.');\n        }\n\n        if (firstCharIndex > unicode || firstCharIndex === undefined) {\n            // ignore .notdef char\n            if (unicode > 0) {\n                firstCharIndex = unicode;\n            }\n        }\n\n        if (lastCharIndex < unicode) {\n            lastCharIndex = unicode;\n        }\n\n        const position = _os2__WEBPACK_IMPORTED_MODULE_10__[\"default\"].getUnicodeRange(unicode);\n        if (position < 32) {\n            ulUnicodeRange1 |= 1 << position;\n        } else if (position < 64) {\n            ulUnicodeRange2 |= 1 << position - 32;\n        } else if (position < 96) {\n            ulUnicodeRange3 |= 1 << position - 64;\n        } else if (position < 123) {\n            ulUnicodeRange4 |= 1 << position - 96;\n        } else {\n            throw new Error('Unicode ranges bits > 123 are reserved for internal usage');\n        }\n        // Skip non-important characters.\n        if (glyph.name === '.notdef') continue;\n        const metrics = glyph.getMetrics();\n        xMins.push(metrics.xMin);\n        yMins.push(metrics.yMin);\n        xMaxs.push(metrics.xMax);\n        yMaxs.push(metrics.yMax);\n        leftSideBearings.push(metrics.leftSideBearing);\n        rightSideBearings.push(metrics.rightSideBearing);\n        advanceWidths.push(glyph.advanceWidth);\n    }\n\n    const globals = {\n        xMin: Math.min.apply(null, xMins),\n        yMin: Math.min.apply(null, yMins),\n        xMax: Math.max.apply(null, xMaxs),\n        yMax: Math.max.apply(null, yMaxs),\n        advanceWidthMax: Math.max.apply(null, advanceWidths),\n        advanceWidthAvg: average(advanceWidths),\n        minLeftSideBearing: Math.min.apply(null, leftSideBearings),\n        maxLeftSideBearing: Math.max.apply(null, leftSideBearings),\n        minRightSideBearing: Math.min.apply(null, rightSideBearings)\n    };\n    globals.ascender = font.ascender;\n    globals.descender = font.descender;\n\n    const headTable = _head__WEBPACK_IMPORTED_MODULE_4__[\"default\"].make({\n        flags: 3, // 00000011 (baseline for font at y=0; left sidebearing point at x=0)\n        unitsPerEm: font.unitsPerEm,\n        xMin: globals.xMin,\n        yMin: globals.yMin,\n        xMax: globals.xMax,\n        yMax: globals.yMax,\n        lowestRecPPEM: 3,\n        createdTimestamp: font.createdTimestamp\n    });\n\n    const hheaTable = _hhea__WEBPACK_IMPORTED_MODULE_5__[\"default\"].make({\n        ascender: globals.ascender,\n        descender: globals.descender,\n        advanceWidthMax: globals.advanceWidthMax,\n        minLeftSideBearing: globals.minLeftSideBearing,\n        minRightSideBearing: globals.minRightSideBearing,\n        xMaxExtent: globals.maxLeftSideBearing + (globals.xMax - globals.xMin),\n        numberOfHMetrics: font.glyphs.length\n    });\n\n    const maxpTable = _maxp__WEBPACK_IMPORTED_MODULE_8__[\"default\"].make(font.glyphs.length);\n\n    const os2Table = _os2__WEBPACK_IMPORTED_MODULE_10__[\"default\"].make({\n        xAvgCharWidth: Math.round(globals.advanceWidthAvg),\n        usWeightClass: font.tables.os2.usWeightClass,\n        usWidthClass: font.tables.os2.usWidthClass,\n        usFirstCharIndex: firstCharIndex,\n        usLastCharIndex: lastCharIndex,\n        ulUnicodeRange1: ulUnicodeRange1,\n        ulUnicodeRange2: ulUnicodeRange2,\n        ulUnicodeRange3: ulUnicodeRange3,\n        ulUnicodeRange4: ulUnicodeRange4,\n        fsSelection: font.tables.os2.fsSelection, // REGULAR\n        // See http://typophile.com/node/13081 for more info on vertical metrics.\n        // We get metrics for typical characters (such as \"x\" for xHeight).\n        // We provide some fallback characters if characters are unavailable: their\n        // ordering was chosen experimentally.\n        sTypoAscender: globals.ascender,\n        sTypoDescender: globals.descender,\n        sTypoLineGap: 0,\n        usWinAscent: globals.yMax,\n        usWinDescent: Math.abs(globals.yMin),\n        ulCodePageRange1: 1, // FIXME: hard-code Latin 1 support for now\n        sxHeight: metricsForChar(font, 'xyvw', {yMax: Math.round(globals.ascender / 2)}).yMax,\n        sCapHeight: metricsForChar(font, 'HIKLEFJMNTZBDPRAGOQSUVWXY', globals).yMax,\n        usDefaultChar: font.hasChar(' ') ? 32 : 0, // Use space as the default character, if available.\n        usBreakChar: font.hasChar(' ') ? 32 : 0 // Use space as the break character, if available.\n    });\n\n    const hmtxTable = _hmtx__WEBPACK_IMPORTED_MODULE_6__[\"default\"].make(font.glyphs);\n    const cmapTable = _cmap__WEBPACK_IMPORTED_MODULE_2__[\"default\"].make(font.glyphs);\n\n    const englishFamilyName = font.getEnglishName('fontFamily');\n    const englishStyleName = font.getEnglishName('fontSubfamily');\n    const englishFullName = englishFamilyName + ' ' + englishStyleName;\n    let postScriptName = font.getEnglishName('postScriptName');\n    if (!postScriptName) {\n        postScriptName = englishFamilyName.replace(/\\s/g, '') + '-' + englishStyleName;\n    }\n\n    const names = {};\n    for (let n in font.names) {\n        names[n] = font.names[n];\n    }\n\n    if (!names.uniqueID) {\n        names.uniqueID = {en: font.getEnglishName('manufacturer') + ':' + englishFullName};\n    }\n\n    if (!names.postScriptName) {\n        names.postScriptName = {en: postScriptName};\n    }\n\n    if (!names.preferredFamily) {\n        names.preferredFamily = font.names.fontFamily;\n    }\n\n    if (!names.preferredSubfamily) {\n        names.preferredSubfamily = font.names.fontSubfamily;\n    }\n\n    const languageTags = [];\n    const nameTable = _name__WEBPACK_IMPORTED_MODULE_9__[\"default\"].make(names, languageTags);\n    const ltagTable = (languageTags.length > 0 ? _ltag__WEBPACK_IMPORTED_MODULE_7__[\"default\"].make(languageTags) : undefined);\n\n    const postTable = _post__WEBPACK_IMPORTED_MODULE_11__[\"default\"].make();\n    const cffTable = _cff__WEBPACK_IMPORTED_MODULE_3__[\"default\"].make(font.glyphs, {\n        version: font.getEnglishName('version'),\n        fullName: englishFullName,\n        familyName: englishFamilyName,\n        weightName: englishStyleName,\n        postScriptName: postScriptName,\n        unitsPerEm: font.unitsPerEm,\n        fontBBox: [0, globals.yMin, globals.ascender, globals.advanceWidthMax]\n    });\n\n    const metaTable = (font.metas && Object.keys(font.metas).length > 0) ? _meta__WEBPACK_IMPORTED_MODULE_13__[\"default\"].make(font.metas) : undefined;\n\n    // The order does not matter because makeSfntTable() will sort them.\n    const tables = [headTable, hheaTable, maxpTable, os2Table, nameTable, cmapTable, postTable, cffTable, hmtxTable];\n    if (ltagTable) {\n        tables.push(ltagTable);\n    }\n    // Optional tables\n    if (font.tables.gsub) {\n        tables.push(_gsub__WEBPACK_IMPORTED_MODULE_12__[\"default\"].make(font.tables.gsub));\n    }\n    if (metaTable) {\n        tables.push(metaTable);\n    }\n\n    const sfntTable = makeSfntTable(tables);\n\n    // Compute the font's checkSum and store it in head.checkSumAdjustment.\n    const bytes = sfntTable.encode();\n    const checkSum = computeCheckSum(bytes);\n    const tableFields = sfntTable.fields;\n    let checkSumAdjusted = false;\n    for (let i = 0; i < tableFields.length; i += 1) {\n        if (tableFields[i].name === 'head table') {\n            tableFields[i].value.checkSumAdjustment = 0xB1B0AFBA - checkSum;\n            checkSumAdjusted = true;\n            break;\n        }\n    }\n\n    if (!checkSumAdjusted) {\n        throw new Error('Could not find head table with checkSum to adjust.');\n    }\n\n    return sfntTable;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ make: makeSfntTable, fontToTable: fontToSfntTable, computeCheckSum });\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tables/sfnt.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/tokenizer.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tokenizer.js ***!
  \**************************************************************************************/
/*! exports provided: default, Token, Event, ContextRange, ContextParams */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Token\", function() { return Token; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Event\", function() { return Event; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ContextRange\", function() { return ContextRange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ContextParams\", function() { return ContextParams; });\n/**\n * Converts a string into a list of tokens.\n */\n\n/**\n * Create a new token\n * @param {string} char a single char\n */\nfunction Token(char) {\n    this.char = char;\n    this.state = {};\n    this.activeState = null;\n}\n\n/**\n * Create a new context range\n * @param {number} startIndex range start index\n * @param {number} endOffset range end index offset\n * @param {string} contextName owner context name\n */\nfunction ContextRange(startIndex, endOffset, contextName) {\n    this.contextName = contextName;\n    this.startIndex = startIndex;\n    this.endOffset = endOffset;\n}\n\n/**\n * Check context start and end\n * @param {string} contextName a unique context name\n * @param {function} checkStart a predicate function the indicates a context's start\n * @param {function} checkEnd a predicate function the indicates a context's end\n */\nfunction ContextChecker(contextName, checkStart, checkEnd) {\n    this.contextName = contextName;\n    this.openRange = null;\n    this.ranges = [];\n    this.checkStart = checkStart;\n    this.checkEnd = checkEnd;\n}\n\n/**\n * Create a context params\n * @param {array} context a list of items\n * @param {number} currentIndex current item index\n */\nfunction ContextParams(context, currentIndex) {\n    this.context = context;\n    this.index = currentIndex;\n    this.length = context.length;\n    this.current = context[currentIndex];\n    this.backtrack = context.slice(0, currentIndex);\n    this.lookahead = context.slice(currentIndex + 1);\n}\n\n/**\n * Create an event instance\n * @param {string} eventId event unique id\n */\nfunction Event(eventId) {\n    this.eventId = eventId;\n    this.subscribers = [];\n}\n\n/**\n * Initialize a core events and auto subscribe required event handlers\n * @param {any} events an object that enlists core events handlers\n */\nfunction initializeCoreEvents(events) {\n    const coreEvents = [\n        'start', 'end', 'next', 'newToken', 'contextStart',\n        'contextEnd', 'insertToken', 'removeToken', 'removeRange',\n        'replaceToken', 'replaceRange', 'composeRUD', 'updateContextsRanges'\n    ];\n\n    coreEvents.forEach(eventId => {\n        Object.defineProperty(this.events, eventId, {\n            value: new Event(eventId)\n        });\n    });\n\n    if (!!events) {\n        coreEvents.forEach(eventId => {\n            const event = events[eventId];\n            if (typeof event === 'function') {\n                this.events[eventId].subscribe(event);\n            }\n        });\n    }\n    const requiresContextUpdate = [\n        'insertToken', 'removeToken', 'removeRange',\n        'replaceToken', 'replaceRange', 'composeRUD'\n    ];\n    requiresContextUpdate.forEach(eventId => {\n        this.events[eventId].subscribe(\n            this.updateContextsRanges\n        );\n    });\n}\n\n/**\n * Converts a string into a list of tokens\n * @param {any} events tokenizer core events\n */\nfunction Tokenizer(events) {\n    this.tokens = [];\n    this.registeredContexts = {};\n    this.contextCheckers = [];\n    this.events = {};\n    this.registeredModifiers = [];\n\n    initializeCoreEvents.call(this, events);\n}\n\n/**\n * Sets the state of a token, usually called by a state modifier.\n * @param {string} key state item key\n * @param {any} value state item value\n */\nToken.prototype.setState = function(key, value) {\n    this.state[key] = value;\n    this.activeState = { key, value: this.state[key] };\n    return this.activeState;\n};\n\nToken.prototype.getState = function (stateId) {\n    return this.state[stateId] || null;\n};\n\n/**\n * Checks if an index exists in the tokens list.\n * @param {number} index token index\n */\nTokenizer.prototype.inboundIndex = function(index) {\n    return index >= 0 && index < this.tokens.length;\n};\n\n/**\n * Compose and apply a list of operations (replace, update, delete)\n * @param {array} RUDs replace, update and delete operations\n * TODO: Perf. Optimization (lengthBefore === lengthAfter ? dispatch once)\n */\nTokenizer.prototype.composeRUD = function (RUDs) {\n    const silent = true;\n    const state = RUDs.map(RUD => (\n        this[RUD[0]].apply(this, RUD.slice(1).concat(silent))\n    ));\n    const hasFAILObject = obj => (\n        typeof obj === 'object' &&\n        obj.hasOwnProperty('FAIL')\n    );\n    if (state.every(hasFAILObject)) {\n        return {\n            FAIL: `composeRUD: one or more operations hasn't completed successfully`,\n            report: state.filter(hasFAILObject)\n        };\n    }\n    this.dispatch('composeRUD', [state.filter(op => !hasFAILObject(op))]);\n};\n\n/**\n * Replace a range of tokens with a list of tokens\n * @param {number} startIndex range start index\n * @param {number} offset range offset\n * @param {token} tokens a list of tokens to replace\n * @param {boolean} silent dispatch events and update context ranges\n */\nTokenizer.prototype.replaceRange = function (startIndex, offset, tokens, silent) {\n    offset = offset !== null ? offset : this.tokens.length;\n    const isTokenType = tokens.every(token => token instanceof Token);\n    if (!isNaN(startIndex) && this.inboundIndex(startIndex) && isTokenType) {\n        const replaced = this.tokens.splice.apply(\n            this.tokens, [startIndex, offset].concat(tokens)\n        );\n        if (!silent) this.dispatch('replaceToken', [startIndex, offset, tokens]);\n        return [replaced, tokens];\n    } else {\n        return { FAIL: 'replaceRange: invalid tokens or startIndex.' };\n    }\n};\n\n/**\n * Replace a token with another token\n * @param {number} index token index\n * @param {token} token a token to replace\n * @param {boolean} silent dispatch events and update context ranges\n */\nTokenizer.prototype.replaceToken = function (index, token, silent) {\n    if (!isNaN(index) && this.inboundIndex(index) && token instanceof Token) {\n        const replaced = this.tokens.splice(index, 1, token);\n        if (!silent) this.dispatch('replaceToken', [index, token]);\n        return [replaced[0], token];\n    } else {\n        return { FAIL: 'replaceToken: invalid token or index.' };\n    }\n};\n\n/**\n * Removes a range of tokens\n * @param {number} startIndex range start index\n * @param {number} offset range offset\n * @param {boolean} silent dispatch events and update context ranges\n */\nTokenizer.prototype.removeRange = function(startIndex, offset, silent) {\n    offset = !isNaN(offset) ? offset : this.tokens.length;\n    const tokens = this.tokens.splice(startIndex, offset);\n    if (!silent) this.dispatch('removeRange', [tokens, startIndex, offset]);\n    return tokens;\n};\n\n/**\n * Remove a token at a certain index\n * @param {number} index token index\n * @param {boolean} silent dispatch events and update context ranges\n */\nTokenizer.prototype.removeToken = function(index, silent) {\n    if (!isNaN(index) && this.inboundIndex(index)) {\n        const token = this.tokens.splice(index, 1);\n        if (!silent) this.dispatch('removeToken', [token, index]);\n        return token;\n    } else {\n        return { FAIL: 'removeToken: invalid token index.' };\n    }\n};\n\n/**\n * Insert a list of tokens at a certain index\n * @param {array} tokens a list of tokens to insert\n * @param {number} index insert the list of tokens at index\n * @param {boolean} silent dispatch events and update context ranges\n */\nTokenizer.prototype.insertToken = function (tokens, index, silent) {\n    const tokenType = tokens.every(\n        token => token instanceof Token\n    );\n    if (tokenType) {\n        this.tokens.splice.apply(\n            this.tokens, [index, 0].concat(tokens)\n        );\n        if (!silent) this.dispatch('insertToken', [tokens, index]);\n        return tokens;\n    } else {\n        return { FAIL: 'insertToken: invalid token(s).' };\n    }\n};\n\n/**\n * A state modifier that is called on 'newToken' event\n * @param {string} modifierId state modifier id\n * @param {function} condition a predicate function that returns true or false\n * @param {function} modifier a function to update token state\n */\nTokenizer.prototype.registerModifier = function(modifierId, condition, modifier) {\n    this.events.newToken.subscribe(function(token, contextParams) {\n        const conditionParams = [token, contextParams];\n        const canApplyModifier = (\n            condition === null ||\n            condition.apply(this, conditionParams) === true\n        );\n        const modifierParams = [token, contextParams];\n        if (canApplyModifier) {\n            let newStateValue = modifier.apply(this, modifierParams);\n            token.setState(modifierId, newStateValue);\n        }\n    });\n    this.registeredModifiers.push(modifierId);\n};\n\n/**\n * Subscribe a handler to an event\n * @param {function} eventHandler an event handler function\n */\nEvent.prototype.subscribe = function (eventHandler) {\n    if (typeof eventHandler === 'function') {\n        return ((this.subscribers.push(eventHandler)) - 1);\n    } else {\n        return { FAIL: `invalid '${this.eventId}' event handler`};\n    }\n};\n\n/**\n * Unsubscribe an event handler\n * @param {string} subsId subscription id\n */\nEvent.prototype.unsubscribe = function (subsId) {\n    this.subscribers.splice(subsId, 1);\n};\n\n/**\n * Sets context params current value index\n * @param {number} index context params current value index\n */\nContextParams.prototype.setCurrentIndex = function(index) {\n    this.index = index;\n    this.current = this.context[index];\n    this.backtrack = this.context.slice(0, index);\n    this.lookahead = this.context.slice(index + 1);\n};\n\n/**\n * Get an item at an offset from the current value\n * example (current value is 3):\n *  1    2   [3]   4    5   |   items values\n * -2   -1    0    1    2   |   offset values\n * @param {number} offset an offset from current value index\n */\nContextParams.prototype.get = function (offset) {\n    switch (true) {\n        case (offset === 0):\n            return this.current;\n        case (offset < 0 && Math.abs(offset) <= this.backtrack.length):\n            return this.backtrack.slice(offset)[0];\n        case (offset > 0 && offset <= this.lookahead.length):\n            return this.lookahead[offset - 1];\n        default:\n            return null;\n    }\n};\n\n/**\n * Converts a context range into a string value\n * @param {contextRange} range a context range\n */\nTokenizer.prototype.rangeToText = function (range) {\n    if (range instanceof ContextRange) {\n        return (\n            this.getRangeTokens(range)\n                .map(token => token.char).join('')\n        );\n    }\n};\n\n/**\n * Converts all tokens into a string\n */\nTokenizer.prototype.getText = function () {\n    return this.tokens.map(token => token.char).join('');\n};\n\n/**\n * Get a context by name\n * @param {string} contextName context name to get\n */\nTokenizer.prototype.getContext = function (contextName) {\n    let context = this.registeredContexts[contextName];\n    return !!context ? context : null;\n};\n\n/**\n * Subscribes a new event handler to an event\n * @param {string} eventName event name to subscribe to\n * @param {function} eventHandler a function to be invoked on event\n */\nTokenizer.prototype.on = function(eventName, eventHandler) {\n    const event = this.events[eventName];\n    if (!!event) {\n        return event.subscribe(eventHandler);\n    } else {\n        return null;\n    }\n};\n\n/**\n * Dispatches an event\n * @param {string} eventName event name\n * @param {any} args event handler arguments\n */\nTokenizer.prototype.dispatch = function(eventName, args) {\n    const event = this.events[eventName];\n    if (event instanceof Event) {\n        event.subscribers.forEach(subscriber => {\n            subscriber.apply(this, args || []);\n        });\n    }\n};\n\n/**\n * Register a new context checker\n * @param {string} contextName a unique context name\n * @param {function} contextStartCheck a predicate function that returns true on context start\n * @param {function} contextEndCheck  a predicate function that returns true on context end\n * TODO: call tokenize on registration to update context ranges with the new context.\n */\nTokenizer.prototype.registerContextChecker = function(contextName, contextStartCheck, contextEndCheck) {\n    if (!!this.getContext(contextName)) return {\n        FAIL:\n        `context name '${contextName}' is already registered.`\n    };\n    if (typeof contextStartCheck !== 'function') return {\n        FAIL:\n        `missing context start check.`\n    };\n    if (typeof contextEndCheck !== 'function') return {\n        FAIL:\n        `missing context end check.`\n    };\n    const contextCheckers = new ContextChecker(\n        contextName, contextStartCheck, contextEndCheck\n    );\n    this.registeredContexts[contextName] = contextCheckers;\n    this.contextCheckers.push(contextCheckers);\n    return contextCheckers;\n};\n\n/**\n * Gets a context range tokens\n * @param {contextRange} range a context range\n */\nTokenizer.prototype.getRangeTokens = function(range) {\n    const endIndex = range.startIndex + range.endOffset;\n    return [].concat(\n        this.tokens\n            .slice(range.startIndex, endIndex)\n    );\n};\n\n/**\n * Gets the ranges of a context\n * @param {string} contextName context name\n */\nTokenizer.prototype.getContextRanges = function(contextName) {\n    const context = this.getContext(contextName);\n    if (!!context) {\n        return context.ranges;\n    } else {\n        return { FAIL: `context checker '${contextName}' is not registered.` };\n    }\n};\n\n/**\n * Resets context ranges to run context update\n */\nTokenizer.prototype.resetContextsRanges = function () {\n    const registeredContexts = this.registeredContexts;\n    for (const contextName in registeredContexts) {\n        if (registeredContexts.hasOwnProperty(contextName)) {\n            const context = registeredContexts[contextName];\n            context.ranges = [];\n        }\n    }\n};\n\n/**\n * Updates context ranges\n */\nTokenizer.prototype.updateContextsRanges = function () {\n    this.resetContextsRanges();\n    const chars = this.tokens.map(token => token.char);\n    for (let i = 0; i < chars.length; i++) {\n        const contextParams = new ContextParams(chars, i);\n        this.runContextCheck(contextParams);\n    }\n    this.dispatch('updateContextsRanges', [this.registeredContexts]);\n};\n\n/**\n * Sets the end offset of an open range\n * @param {number} offset range end offset\n * @param {string} contextName context name\n */\nTokenizer.prototype.setEndOffset = function (offset, contextName) {\n    const startIndex = this.getContext(contextName).openRange.startIndex;\n    let range = new ContextRange(startIndex, offset, contextName);\n    const ranges = this.getContext(contextName).ranges;\n    range.rangeId = `${contextName}.${ranges.length}`;\n    ranges.push(range);\n    this.getContext(contextName).openRange = null;\n    return range;\n};\n\n/**\n * Runs a context check on the current context\n * @param {contextParams} contextParams current context params\n */\nTokenizer.prototype.runContextCheck = function(contextParams) {\n    const index = contextParams.index;\n    this.contextCheckers.forEach(contextChecker => {\n        let contextName = contextChecker.contextName;\n        let openRange = this.getContext(contextName).openRange;\n        if (!openRange && contextChecker.checkStart(contextParams)) {\n            openRange = new ContextRange(index, null, contextName);\n            this.getContext(contextName).openRange = openRange;\n            this.dispatch('contextStart', [contextName, index]);\n        }\n        if (!!openRange && contextChecker.checkEnd(contextParams)) {\n            const offset = (index - openRange.startIndex) + 1;\n            const range = this.setEndOffset(offset, contextName);\n            this.dispatch('contextEnd', [contextName, range]);\n        }\n    });\n};\n\n/**\n * Converts a text into a list of tokens\n * @param {string} text a text to tokenize\n */\nTokenizer.prototype.tokenize = function (text) {\n    this.tokens = [];\n    this.resetContextsRanges();\n    let chars = Array.from(text);\n    this.dispatch('start');\n    for (let i = 0; i < chars.length; i++) {\n        const char = chars[i];\n        const contextParams = new ContextParams(chars, i);\n        this.dispatch('next', [contextParams]);\n        this.runContextCheck(contextParams);\n        let token = new Token(char);\n        this.tokens.push(token);\n        this.dispatch('newToken', [token, contextParams]);\n    }\n    this.dispatch('end', [this.tokens]);\n    return this.tokens;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Tokenizer);\n\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/tokenizer.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/types.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/types.js ***!
  \**********************************************************************************/
/*! exports provided: decode, encode, sizeOf */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"decode\", function() { return decode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"encode\", function() { return encode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sizeOf\", function() { return sizeOf; });\n/* harmony import */ var _check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./check */ \"../../node_modules/opentype.js/src/check.js\");\n// Data types used in the OpenType font file.\n// All OpenType fonts use Motorola-style byte ordering (Big Endian)\n\n\n\nconst LIMIT16 = 32768; // The limit at which a 16-bit number switches signs == 2^15\nconst LIMIT32 = 2147483648; // The limit at which a 32-bit number switches signs == 2 ^ 31\n\n/**\n * @exports opentype.decode\n * @class\n */\nconst decode = {};\n/**\n * @exports opentype.encode\n * @class\n */\nconst encode = {};\n/**\n * @exports opentype.sizeOf\n * @class\n */\nconst sizeOf = {};\n\n// Return a function that always returns the same value.\nfunction constant(v) {\n    return function() {\n        return v;\n    };\n}\n\n// OpenType data types //////////////////////////////////////////////////////\n\n/**\n * Convert an 8-bit unsigned integer to a list of 1 byte.\n * @param {number}\n * @returns {Array}\n */\nencode.BYTE = function(v) {\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(v >= 0 && v <= 255, 'Byte value should be between 0 and 255.');\n    return [v];\n};\n/**\n * @constant\n * @type {number}\n */\nsizeOf.BYTE = constant(1);\n\n/**\n * Convert a 8-bit signed integer to a list of 1 byte.\n * @param {string}\n * @returns {Array}\n */\nencode.CHAR = function(v) {\n    return [v.charCodeAt(0)];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.CHAR = constant(1);\n\n/**\n * Convert an ASCII string to a list of bytes.\n * @param {string}\n * @returns {Array}\n */\nencode.CHARARRAY = function(v) {\n    const b = [];\n    for (let i = 0; i < v.length; i += 1) {\n        b[i] = v.charCodeAt(i);\n    }\n\n    return b;\n};\n\n/**\n * @param {Array}\n * @returns {number}\n */\nsizeOf.CHARARRAY = function(v) {\n    return v.length;\n};\n\n/**\n * Convert a 16-bit unsigned integer to a list of 2 bytes.\n * @param {number}\n * @returns {Array}\n */\nencode.USHORT = function(v) {\n    return [(v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.USHORT = constant(2);\n\n/**\n * Convert a 16-bit signed integer to a list of 2 bytes.\n * @param {number}\n * @returns {Array}\n */\nencode.SHORT = function(v) {\n    // Two's complement\n    if (v >= LIMIT16) {\n        v = -(2 * LIMIT16 - v);\n    }\n\n    return [(v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.SHORT = constant(2);\n\n/**\n * Convert a 24-bit unsigned integer to a list of 3 bytes.\n * @param {number}\n * @returns {Array}\n */\nencode.UINT24 = function(v) {\n    return [(v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.UINT24 = constant(3);\n\n/**\n * Convert a 32-bit unsigned integer to a list of 4 bytes.\n * @param {number}\n * @returns {Array}\n */\nencode.ULONG = function(v) {\n    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.ULONG = constant(4);\n\n/**\n * Convert a 32-bit unsigned integer to a list of 4 bytes.\n * @param {number}\n * @returns {Array}\n */\nencode.LONG = function(v) {\n    // Two's complement\n    if (v >= LIMIT32) {\n        v = -(2 * LIMIT32 - v);\n    }\n\n    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.LONG = constant(4);\n\nencode.FIXED = encode.ULONG;\nsizeOf.FIXED = sizeOf.ULONG;\n\nencode.FWORD = encode.SHORT;\nsizeOf.FWORD = sizeOf.SHORT;\n\nencode.UFWORD = encode.USHORT;\nsizeOf.UFWORD = sizeOf.USHORT;\n\n/**\n * Convert a 32-bit Apple Mac timestamp integer to a list of 8 bytes, 64-bit timestamp.\n * @param {number}\n * @returns {Array}\n */\nencode.LONGDATETIME = function(v) {\n    return [0, 0, 0, 0, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.LONGDATETIME = constant(8);\n\n/**\n * Convert a 4-char tag to a list of 4 bytes.\n * @param {string}\n * @returns {Array}\n */\nencode.TAG = function(v) {\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(v.length === 4, 'Tag should be exactly 4 ASCII characters.');\n    return [v.charCodeAt(0),\n            v.charCodeAt(1),\n            v.charCodeAt(2),\n            v.charCodeAt(3)];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.TAG = constant(4);\n\n// CFF data types ///////////////////////////////////////////////////////////\n\nencode.Card8 = encode.BYTE;\nsizeOf.Card8 = sizeOf.BYTE;\n\nencode.Card16 = encode.USHORT;\nsizeOf.Card16 = sizeOf.USHORT;\n\nencode.OffSize = encode.BYTE;\nsizeOf.OffSize = sizeOf.BYTE;\n\nencode.SID = encode.USHORT;\nsizeOf.SID = sizeOf.USHORT;\n\n// Convert a numeric operand or charstring number to a variable-size list of bytes.\n/**\n * Convert a numeric operand or charstring number to a variable-size list of bytes.\n * @param {number}\n * @returns {Array}\n */\nencode.NUMBER = function(v) {\n    if (v >= -107 && v <= 107) {\n        return [v + 139];\n    } else if (v >= 108 && v <= 1131) {\n        v = v - 108;\n        return [(v >> 8) + 247, v & 0xFF];\n    } else if (v >= -1131 && v <= -108) {\n        v = -v - 108;\n        return [(v >> 8) + 251, v & 0xFF];\n    } else if (v >= -32768 && v <= 32767) {\n        return encode.NUMBER16(v);\n    } else {\n        return encode.NUMBER32(v);\n    }\n};\n\n/**\n * @param {number}\n * @returns {number}\n */\nsizeOf.NUMBER = function(v) {\n    return encode.NUMBER(v).length;\n};\n\n/**\n * Convert a signed number between -32768 and +32767 to a three-byte value.\n * This ensures we always use three bytes, but is not the most compact format.\n * @param {number}\n * @returns {Array}\n */\nencode.NUMBER16 = function(v) {\n    return [28, (v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.NUMBER16 = constant(3);\n\n/**\n * Convert a signed number between -(2^31) and +(2^31-1) to a five-byte value.\n * This is useful if you want to be sure you always use four bytes,\n * at the expense of wasting a few bytes for smaller numbers.\n * @param {number}\n * @returns {Array}\n */\nencode.NUMBER32 = function(v) {\n    return [29, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n};\n\n/**\n * @constant\n * @type {number}\n */\nsizeOf.NUMBER32 = constant(5);\n\n/**\n * @param {number}\n * @returns {Array}\n */\nencode.REAL = function(v) {\n    let value = v.toString();\n\n    // Some numbers use an epsilon to encode the value. (e.g. JavaScript will store 0.0000001 as 1e-7)\n    // This code converts it back to a number without the epsilon.\n    const m = /\\.(\\d*?)(?:9{5,20}|0{5,20})\\d{0,2}(?:e(.+)|$)/.exec(value);\n    if (m) {\n        const epsilon = parseFloat('1e' + ((m[2] ? +m[2] : 0) + m[1].length));\n        value = (Math.round(v * epsilon) / epsilon).toString();\n    }\n\n    let nibbles = '';\n    for (let i = 0, ii = value.length; i < ii; i += 1) {\n        const c = value[i];\n        if (c === 'e') {\n            nibbles += value[++i] === '-' ? 'c' : 'b';\n        } else if (c === '.') {\n            nibbles += 'a';\n        } else if (c === '-') {\n            nibbles += 'e';\n        } else {\n            nibbles += c;\n        }\n    }\n\n    nibbles += (nibbles.length & 1) ? 'f' : 'ff';\n    const out = [30];\n    for (let i = 0, ii = nibbles.length; i < ii; i += 2) {\n        out.push(parseInt(nibbles.substr(i, 2), 16));\n    }\n\n    return out;\n};\n\n/**\n * @param {number}\n * @returns {number}\n */\nsizeOf.REAL = function(v) {\n    return encode.REAL(v).length;\n};\n\nencode.NAME = encode.CHARARRAY;\nsizeOf.NAME = sizeOf.CHARARRAY;\n\nencode.STRING = encode.CHARARRAY;\nsizeOf.STRING = sizeOf.CHARARRAY;\n\n/**\n * @param {DataView} data\n * @param {number} offset\n * @param {number} numBytes\n * @returns {string}\n */\ndecode.UTF8 = function(data, offset, numBytes) {\n    const codePoints = [];\n    const numChars = numBytes;\n    for (let j = 0; j < numChars; j++, offset += 1) {\n        codePoints[j] = data.getUint8(offset);\n    }\n\n    return String.fromCharCode.apply(null, codePoints);\n};\n\n/**\n * @param {DataView} data\n * @param {number} offset\n * @param {number} numBytes\n * @returns {string}\n */\ndecode.UTF16 = function(data, offset, numBytes) {\n    const codePoints = [];\n    const numChars = numBytes / 2;\n    for (let j = 0; j < numChars; j++, offset += 2) {\n        codePoints[j] = data.getUint16(offset);\n    }\n\n    return String.fromCharCode.apply(null, codePoints);\n};\n\n/**\n * Convert a JavaScript string to UTF16-BE.\n * @param {string}\n * @returns {Array}\n */\nencode.UTF16 = function(v) {\n    const b = [];\n    for (let i = 0; i < v.length; i += 1) {\n        const codepoint = v.charCodeAt(i);\n        b[b.length] = (codepoint >> 8) & 0xFF;\n        b[b.length] = codepoint & 0xFF;\n    }\n\n    return b;\n};\n\n/**\n * @param {string}\n * @returns {number}\n */\nsizeOf.UTF16 = function(v) {\n    return v.length * 2;\n};\n\n// Data for converting old eight-bit Macintosh encodings to Unicode.\n// This representation is optimized for decoding; encoding is slower\n// and needs more memory. The assumption is that all opentype.js users\n// want to open fonts, but saving a font will be comparatively rare\n// so it can be more expensive. Keyed by IANA character set name.\n//\n// Python script for generating these strings:\n//\n//     s = u''.join([chr(c).decode('mac_greek') for c in range(128, 256)])\n//     print(s.encode('utf-8'))\n/**\n * @private\n */\nconst eightBitMacEncodings = {\n    'x-mac-croatian':  // Python: 'mac_croatian'\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø' +\n    '¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ',\n    'x-mac-cyrillic':  // Python: 'mac_cyrillic'\n    'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњ' +\n    'јЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю',\n    'x-mac-gaelic': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/GAELIC.TXT\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæø' +\n    'ṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ',\n    'x-mac-greek':  // Python: 'mac_greek'\n    'Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩ' +\n    'άΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\\u00AD',\n    'x-mac-icelandic':  // Python: 'mac_iceland'\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n    'x-mac-inuit': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/INUIT.TXT\n    'ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗ' +\n    'ᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł',\n    'x-mac-ce':  // Python: 'mac_latin2'\n    'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅ' +\n    'ņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ',\n    macintosh:  // Python: 'mac_roman'\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n    'x-mac-romanian':  // Python: 'mac_romanian'\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș' +\n    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n    'x-mac-turkish':  // Python: 'mac_turkish'\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ'\n};\n\n/**\n * Decodes an old-style Macintosh string. Returns either a Unicode JavaScript\n * string, or 'undefined' if the encoding is unsupported. For example, we do\n * not support Chinese, Japanese or Korean because these would need large\n * mapping tables.\n * @param {DataView} dataView\n * @param {number} offset\n * @param {number} dataLength\n * @param {string} encoding\n * @returns {string}\n */\ndecode.MACSTRING = function(dataView, offset, dataLength, encoding) {\n    const table = eightBitMacEncodings[encoding];\n    if (table === undefined) {\n        return undefined;\n    }\n\n    let result = '';\n    for (let i = 0; i < dataLength; i++) {\n        const c = dataView.getUint8(offset + i);\n        // In all eight-bit Mac encodings, the characters 0x00..0x7F are\n        // mapped to U+0000..U+007F; we only need to look up the others.\n        if (c <= 0x7F) {\n            result += String.fromCharCode(c);\n        } else {\n            result += table[c & 0x7F];\n        }\n    }\n\n    return result;\n};\n\n// Helper function for encode.MACSTRING. Returns a dictionary for mapping\n// Unicode character codes to their 8-bit MacOS equivalent. This table\n// is not exactly a super cheap data structure, but we do not care because\n// encoding Macintosh strings is only rarely needed in typical applications.\nconst macEncodingTableCache = typeof WeakMap === 'function' && new WeakMap();\nlet macEncodingCacheKeys;\nconst getMacEncodingTable = function (encoding) {\n    // Since we use encoding as a cache key for WeakMap, it has to be\n    // a String object and not a literal. And at least on NodeJS 2.10.1,\n    // WeakMap requires that the same String instance is passed for cache hits.\n    if (!macEncodingCacheKeys) {\n        macEncodingCacheKeys = {};\n        for (let e in eightBitMacEncodings) {\n            /*jshint -W053 */  // Suppress \"Do not use String as a constructor.\"\n            macEncodingCacheKeys[e] = new String(e);\n        }\n    }\n\n    const cacheKey = macEncodingCacheKeys[encoding];\n    if (cacheKey === undefined) {\n        return undefined;\n    }\n\n    // We can't do \"if (cache.has(key)) {return cache.get(key)}\" here:\n    // since garbage collection may run at any time, it could also kick in\n    // between the calls to cache.has() and cache.get(). In that case,\n    // we would return 'undefined' even though we do support the encoding.\n    if (macEncodingTableCache) {\n        const cachedTable = macEncodingTableCache.get(cacheKey);\n        if (cachedTable !== undefined) {\n            return cachedTable;\n        }\n    }\n\n    const decodingTable = eightBitMacEncodings[encoding];\n    if (decodingTable === undefined) {\n        return undefined;\n    }\n\n    const encodingTable = {};\n    for (let i = 0; i < decodingTable.length; i++) {\n        encodingTable[decodingTable.charCodeAt(i)] = i + 0x80;\n    }\n\n    if (macEncodingTableCache) {\n        macEncodingTableCache.set(cacheKey, encodingTable);\n    }\n\n    return encodingTable;\n};\n\n/**\n * Encodes an old-style Macintosh string. Returns a byte array upon success.\n * If the requested encoding is unsupported, or if the input string contains\n * a character that cannot be expressed in the encoding, the function returns\n * 'undefined'.\n * @param {string} str\n * @param {string} encoding\n * @returns {Array}\n */\nencode.MACSTRING = function(str, encoding) {\n    const table = getMacEncodingTable(encoding);\n    if (table === undefined) {\n        return undefined;\n    }\n\n    const result = [];\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charCodeAt(i);\n\n        // In all eight-bit Mac encodings, the characters 0x00..0x7F are\n        // mapped to U+0000..U+007F; we only need to look up the others.\n        if (c >= 0x80) {\n            c = table[c];\n            if (c === undefined) {\n                // str contains a Unicode character that cannot be encoded\n                // in the requested encoding.\n                return undefined;\n            }\n        }\n        result[i] = c;\n        // result.push(c);\n    }\n\n    return result;\n};\n\n/**\n * @param {string} str\n * @param {string} encoding\n * @returns {number}\n */\nsizeOf.MACSTRING = function(str, encoding) {\n    const b = encode.MACSTRING(str, encoding);\n    if (b !== undefined) {\n        return b.length;\n    } else {\n        return 0;\n    }\n};\n\n// Helper for encode.VARDELTAS\nfunction isByteEncodable(value) {\n    return value >= -128 && value <= 127;\n}\n\n// Helper for encode.VARDELTAS\nfunction encodeVarDeltaRunAsZeroes(deltas, pos, result) {\n    let runLength = 0;\n    const numDeltas = deltas.length;\n    while (pos < numDeltas && runLength < 64 && deltas[pos] === 0) {\n        ++pos;\n        ++runLength;\n    }\n    result.push(0x80 | (runLength - 1));\n    return pos;\n}\n\n// Helper for encode.VARDELTAS\nfunction encodeVarDeltaRunAsBytes(deltas, offset, result) {\n    let runLength = 0;\n    const numDeltas = deltas.length;\n    let pos = offset;\n    while (pos < numDeltas && runLength < 64) {\n        const value = deltas[pos];\n        if (!isByteEncodable(value)) {\n            break;\n        }\n\n        // Within a byte-encoded run of deltas, a single zero is best\n        // stored literally as 0x00 value. However, if we have two or\n        // more zeroes in a sequence, it is better to start a new run.\n        // Fore example, the sequence of deltas [15, 15, 0, 15, 15]\n        // becomes 6 bytes (04 0F 0F 00 0F 0F) when storing the zero\n        // within the current run, but 7 bytes (01 0F 0F 80 01 0F 0F)\n        // when starting a new run.\n        if (value === 0 && pos + 1 < numDeltas && deltas[pos + 1] === 0) {\n            break;\n        }\n\n        ++pos;\n        ++runLength;\n    }\n    result.push(runLength - 1);\n    for (let i = offset; i < pos; ++i) {\n        result.push((deltas[i] + 256) & 0xff);\n    }\n    return pos;\n}\n\n// Helper for encode.VARDELTAS\nfunction encodeVarDeltaRunAsWords(deltas, offset, result) {\n    let runLength = 0;\n    const numDeltas = deltas.length;\n    let pos = offset;\n    while (pos < numDeltas && runLength < 64) {\n        const value = deltas[pos];\n\n        // Within a word-encoded run of deltas, it is easiest to start\n        // a new run (with a different encoding) whenever we encounter\n        // a zero value. For example, the sequence [0x6666, 0, 0x7777]\n        // needs 7 bytes when storing the zero inside the current run\n        // (42 66 66 00 00 77 77), and equally 7 bytes when starting a\n        // new run (40 66 66 80 40 77 77).\n        if (value === 0) {\n            break;\n        }\n\n        // Within a word-encoded run of deltas, a single value in the\n        // range (-128..127) should be encoded within the current run\n        // because it is more compact. For example, the sequence\n        // [0x6666, 2, 0x7777] becomes 7 bytes when storing the value\n        // literally (42 66 66 00 02 77 77), but 8 bytes when starting\n        // a new run (40 66 66 00 02 40 77 77).\n        if (isByteEncodable(value) && pos + 1 < numDeltas && isByteEncodable(deltas[pos + 1])) {\n            break;\n        }\n\n        ++pos;\n        ++runLength;\n    }\n    result.push(0x40 | (runLength - 1));\n    for (let i = offset; i < pos; ++i) {\n        const val = deltas[i];\n        result.push(((val + 0x10000) >> 8) & 0xff, (val + 0x100) & 0xff);\n    }\n    return pos;\n}\n\n/**\n * Encode a list of variation adjustment deltas.\n *\n * Variation adjustment deltas are used in ‘gvar’ and ‘cvar’ tables.\n * They indicate how points (in ‘gvar’) or values (in ‘cvar’) get adjusted\n * when generating instances of variation fonts.\n *\n * @see https://www.microsoft.com/typography/otspec/gvar.htm\n * @see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6gvar.html\n * @param {Array}\n * @return {Array}\n */\nencode.VARDELTAS = function(deltas) {\n    let pos = 0;\n    const result = [];\n    while (pos < deltas.length) {\n        const value = deltas[pos];\n        if (value === 0) {\n            pos = encodeVarDeltaRunAsZeroes(deltas, pos, result);\n        } else if (value >= -128 && value <= 127) {\n            pos = encodeVarDeltaRunAsBytes(deltas, pos, result);\n        } else {\n            pos = encodeVarDeltaRunAsWords(deltas, pos, result);\n        }\n    }\n    return result;\n};\n\n// Convert a list of values to a CFF INDEX structure.\n// The values should be objects containing name / type / value.\n/**\n * @param {Array} l\n * @returns {Array}\n */\nencode.INDEX = function(l) {\n    //var offset, offsets, offsetEncoder, encodedOffsets, encodedOffset, data,\n    //    i, v;\n    // Because we have to know which data type to use to encode the offsets,\n    // we have to go through the values twice: once to encode the data and\n    // calculate the offsets, then again to encode the offsets using the fitting data type.\n    let offset = 1; // First offset is always 1.\n    const offsets = [offset];\n    const data = [];\n    for (let i = 0; i < l.length; i += 1) {\n        const v = encode.OBJECT(l[i]);\n        Array.prototype.push.apply(data, v);\n        offset += v.length;\n        offsets.push(offset);\n    }\n\n    if (data.length === 0) {\n        return [0, 0];\n    }\n\n    const encodedOffsets = [];\n    const offSize = (1 + Math.floor(Math.log(offset) / Math.log(2)) / 8) | 0;\n    const offsetEncoder = [undefined, encode.BYTE, encode.USHORT, encode.UINT24, encode.ULONG][offSize];\n    for (let i = 0; i < offsets.length; i += 1) {\n        const encodedOffset = offsetEncoder(offsets[i]);\n        Array.prototype.push.apply(encodedOffsets, encodedOffset);\n    }\n\n    return Array.prototype.concat(encode.Card16(l.length),\n                           encode.OffSize(offSize),\n                           encodedOffsets,\n                           data);\n};\n\n/**\n * @param {Array}\n * @returns {number}\n */\nsizeOf.INDEX = function(v) {\n    return encode.INDEX(v).length;\n};\n\n/**\n * Convert an object to a CFF DICT structure.\n * The keys should be numeric.\n * The values should be objects containing name / type / value.\n * @param {Object} m\n * @returns {Array}\n */\nencode.DICT = function(m) {\n    let d = [];\n    const keys = Object.keys(m);\n    const length = keys.length;\n\n    for (let i = 0; i < length; i += 1) {\n        // Object.keys() return string keys, but our keys are always numeric.\n        const k = parseInt(keys[i], 0);\n        const v = m[k];\n        // Value comes before the key.\n        d = d.concat(encode.OPERAND(v.value, v.type));\n        d = d.concat(encode.OPERATOR(k));\n    }\n\n    return d;\n};\n\n/**\n * @param {Object}\n * @returns {number}\n */\nsizeOf.DICT = function(m) {\n    return encode.DICT(m).length;\n};\n\n/**\n * @param {number}\n * @returns {Array}\n */\nencode.OPERATOR = function(v) {\n    if (v < 1200) {\n        return [v];\n    } else {\n        return [12, v - 1200];\n    }\n};\n\n/**\n * @param {Array} v\n * @param {string}\n * @returns {Array}\n */\nencode.OPERAND = function(v, type) {\n    let d = [];\n    if (Array.isArray(type)) {\n        for (let i = 0; i < type.length; i += 1) {\n            _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(v.length === type.length, 'Not enough arguments given for type' + type);\n            d = d.concat(encode.OPERAND(v[i], type[i]));\n        }\n    } else {\n        if (type === 'SID') {\n            d = d.concat(encode.NUMBER(v));\n        } else if (type === 'offset') {\n            // We make it easy for ourselves and always encode offsets as\n            // 4 bytes. This makes offset calculation for the top dict easier.\n            d = d.concat(encode.NUMBER32(v));\n        } else if (type === 'number') {\n            d = d.concat(encode.NUMBER(v));\n        } else if (type === 'real') {\n            d = d.concat(encode.REAL(v));\n        } else {\n            throw new Error('Unknown operand type ' + type);\n            // FIXME Add support for booleans\n        }\n    }\n\n    return d;\n};\n\nencode.OP = encode.BYTE;\nsizeOf.OP = sizeOf.BYTE;\n\n// memoize charstring encoding using WeakMap if available\nconst wmm = typeof WeakMap === 'function' && new WeakMap();\n\n/**\n * Convert a list of CharString operations to bytes.\n * @param {Array}\n * @returns {Array}\n */\nencode.CHARSTRING = function(ops) {\n    // See encode.MACSTRING for why we don't do \"if (wmm && wmm.has(ops))\".\n    if (wmm) {\n        const cachedValue = wmm.get(ops);\n        if (cachedValue !== undefined) {\n            return cachedValue;\n        }\n    }\n\n    let d = [];\n    const length = ops.length;\n\n    for (let i = 0; i < length; i += 1) {\n        const op = ops[i];\n        d = d.concat(encode[op.type](op.value));\n    }\n\n    if (wmm) {\n        wmm.set(ops, d);\n    }\n\n    return d;\n};\n\n/**\n * @param {Array}\n * @returns {number}\n */\nsizeOf.CHARSTRING = function(ops) {\n    return encode.CHARSTRING(ops).length;\n};\n\n// Utility functions ////////////////////////////////////////////////////////\n\n/**\n * Convert an object containing name / type / value to bytes.\n * @param {Object}\n * @returns {Array}\n */\nencode.OBJECT = function(v) {\n    const encodingFunction = encode[v.type];\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(encodingFunction !== undefined, 'No encoding function for type ' + v.type);\n    return encodingFunction(v.value);\n};\n\n/**\n * @param {Object}\n * @returns {number}\n */\nsizeOf.OBJECT = function(v) {\n    const sizeOfFunction = sizeOf[v.type];\n    _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(sizeOfFunction !== undefined, 'No sizeOf function for type ' + v.type);\n    return sizeOfFunction(v.value);\n};\n\n/**\n * Convert a table object to bytes.\n * A table contains a list of fields containing the metadata (name, type and default value).\n * The table itself has the field values set as attributes.\n * @param {opentype.Table}\n * @returns {Array}\n */\nencode.TABLE = function(table) {\n    let d = [];\n    const length = table.fields.length;\n    const subtables = [];\n    const subtableOffsets = [];\n\n    for (let i = 0; i < length; i += 1) {\n        const field = table.fields[i];\n        const encodingFunction = encode[field.type];\n        _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(encodingFunction !== undefined, 'No encoding function for field type ' + field.type + ' (' + field.name + ')');\n        let value = table[field.name];\n        if (value === undefined) {\n            value = field.value;\n        }\n\n        const bytes = encodingFunction(value);\n\n        if (field.type === 'TABLE') {\n            subtableOffsets.push(d.length);\n            d = d.concat([0, 0]);\n            subtables.push(bytes);\n        } else {\n            d = d.concat(bytes);\n        }\n    }\n\n    for (let i = 0; i < subtables.length; i += 1) {\n        const o = subtableOffsets[i];\n        const offset = d.length;\n        _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(offset < 65536, 'Table ' + table.tableName + ' too big.');\n        d[o] = offset >> 8;\n        d[o + 1] = offset & 0xff;\n        d = d.concat(subtables[i]);\n    }\n\n    return d;\n};\n\n/**\n * @param {opentype.Table}\n * @returns {number}\n */\nsizeOf.TABLE = function(table) {\n    let numBytes = 0;\n    const length = table.fields.length;\n\n    for (let i = 0; i < length; i += 1) {\n        const field = table.fields[i];\n        const sizeOfFunction = sizeOf[field.type];\n        _check__WEBPACK_IMPORTED_MODULE_0__[\"default\"].argument(sizeOfFunction !== undefined, 'No sizeOf function for field type ' + field.type + ' (' + field.name + ')');\n        let value = table[field.name];\n        if (value === undefined) {\n            value = field.value;\n        }\n\n        numBytes += sizeOfFunction(value);\n\n        // Subtables take 2 more bytes for offsets.\n        if (field.type === 'TABLE') {\n            numBytes += 2;\n        }\n    }\n\n    return numBytes;\n};\n\nencode.RECORD = encode.TABLE;\nsizeOf.RECORD = sizeOf.TABLE;\n\n// Merge in a list of bytes.\nencode.LITERAL = function(v) {\n    return v;\n};\n\nsizeOf.LITERAL = function(v) {\n    return v.length;\n};\n\n\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/types.js?");

/***/ }),

/***/ "../../node_modules/opentype.js/src/util.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/util.js ***!
  \*********************************************************************************/
/*! exports provided: isBrowser, isNode, nodeBufferToArrayBuffer, arrayBufferToNodeBuffer, checkArgument */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isBrowser\", function() { return isBrowser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isNode\", function() { return isNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"nodeBufferToArrayBuffer\", function() { return nodeBufferToArrayBuffer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arrayBufferToNodeBuffer\", function() { return arrayBufferToNodeBuffer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"checkArgument\", function() { return checkArgument; });\nfunction isBrowser() {\n    return typeof window !== 'undefined';\n}\n\nfunction isNode() {\n    return typeof window === 'undefined';\n}\n\nfunction nodeBufferToArrayBuffer(buffer) {\n    const ab = new ArrayBuffer(buffer.length);\n    const view = new Uint8Array(ab);\n    for (let i = 0; i < buffer.length; ++i) {\n        view[i] = buffer[i];\n    }\n\n    return ab;\n}\n\nfunction arrayBufferToNodeBuffer(ab) {\n    const buffer = new Buffer(ab.byteLength);\n    const view = new Uint8Array(ab);\n    for (let i = 0; i < buffer.length; ++i) {\n        buffer[i] = view[i];\n    }\n\n    return buffer;\n}\n\nfunction checkArgument(expression, message) {\n    if (!expression) {\n        throw message;\n    }\n}\n\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ \"../../node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/opentype.js/src/util.js?");

/***/ }),

/***/ "../../node_modules/os-browserify/browser.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/os-browserify/browser.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n\nexports.homedir = function () {\n\treturn '/'\n};\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/os-browserify/browser.js?");

/***/ }),

/***/ "../../node_modules/parse-svg-path/index.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/parse-svg-path/index.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\nmodule.exports = parse\n\n/**\n * expected argument lengths\n * @type {Object}\n */\n\nvar length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0}\n\n/**\n * segment pattern\n * @type {RegExp}\n */\n\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig\n\n/**\n * parse an svg path data string. Generates an Array\n * of commands where each command is an Array of the\n * form `[command, arg1, arg2, ...]`\n *\n * @param {String} path\n * @return {Array}\n */\n\nfunction parse(path) {\n\tvar data = []\n\tpath.replace(segment, function(_, command, args){\n\t\tvar type = command.toLowerCase()\n\t\targs = parseValues(args)\n\n\t\t// overloaded moveTo\n\t\tif (type == 'm' && args.length > 2) {\n\t\t\tdata.push([command].concat(args.splice(0, 2)))\n\t\t\ttype = 'l'\n\t\t\tcommand = command == 'm' ? 'l' : 'L'\n\t\t}\n\n\t\twhile (true) {\n\t\t\tif (args.length == length[type]) {\n\t\t\t\targs.unshift(command)\n\t\t\t\treturn data.push(args)\n\t\t\t}\n\t\t\tif (args.length < length[type]) throw new Error('malformed path data')\n\t\t\tdata.push([command].concat(args.splice(0, length[type])))\n\t\t}\n\t})\n\treturn data\n}\n\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig\n\nfunction parseValues(args) {\n\tvar numbers = args.match(number)\n\treturn numbers ? numbers.map(Number) : []\n}\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/parse-svg-path/index.js?");

/***/ }),

/***/ "../../node_modules/point-line-distance/index.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/point-line-distance/index.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * point-line-distance\n *\n * Copyright (c) 2015 Mauricio Poppe\n * Licensed under the MIT license.\n */\n\n\n\nvar distanceSquared = __webpack_require__(/*! ./squared */ \"../../node_modules/point-line-distance/squared.js\")\n\nmodule.exports = function (point, a, b) {\n  return Math.sqrt(distanceSquared(point, a, b))\n}\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/point-line-distance/index.js?");

/***/ }),

/***/ "../../node_modules/point-line-distance/squared.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/point-line-distance/squared.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var subtract = __webpack_require__(/*! gl-vec3/subtract */ \"../../node_modules/gl-vec3/subtract.js\")\nvar cross = __webpack_require__(/*! gl-vec3/cross */ \"../../node_modules/gl-vec3/cross.js\")\nvar squaredLength = __webpack_require__(/*! gl-vec3/squaredLength */ \"../../node_modules/gl-vec3/squaredLength.js\")\nvar ab = []\nvar ap = []\nvar cr = []\n\nmodule.exports = function (p, a, b) {\n  // // == vector solution\n  // var normalize = require('gl-vec3/normalize')\n  // var scaleAndAdd = require('gl-vec3/scaleAndAdd')\n  // var dot = require('gl-vec3/dot')\n  // var squaredDistance = require('gl-vec3/squaredDistance')\n  // // n = vector `ab` normalized\n  // var n = []\n  // // projection = projection of `point` on `n`\n  // var projection = []\n  // normalize(n, subtract(n, a, b))\n  // scaleAndAdd(projection, a, n, dot(n, p))\n  // return squaredDistance(projection, p)\n\n  // == parallelogram solution\n  //\n  //            s\n  //      __a________b__\n  //       /   |    /\n  //      /   h|   /\n  //     /_____|__/\n  //    p\n  //\n  //  s = b - a\n  //  area = s * h\n  //  |ap x s| = s * h\n  //  h = |ap x s| / s\n  //\n  subtract(ab, b, a)\n  subtract(ap, p, a)\n  var area = squaredLength(cross(cr, ap, ab))\n  var s = squaredLength(ab)\n  if (s === 0) {\n    throw Error('a and b are the same point')\n  }\n  return area / s\n}\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/point-line-distance/squared.js?");

/***/ }),

/***/ "../../node_modules/polygon-clipping/dist/polygon-clipping.umd.js":
/*!*******************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/polygon-clipping/dist/polygon-clipping.umd.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function (global, factory) {\n   true ? module.exports = factory() :\n  undefined;\n}(this, function () { 'use strict';\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  /* follows \"An implementation of top-down splaying\"\n   * by D. Sleator <sleator@cs.cmu.edu> March 1992\n   */\n\n  /**\n   * @typedef {*} Key\n   */\n\n  /**\n   * @typedef {*} Value\n   */\n\n  /**\n   * @typedef {function(node:Node):void} Visitor\n   */\n\n  /**\n   * @typedef {function(a:Key, b:Key):number} Comparator\n   */\n\n  /**\n   * @param {function(node:Node):string} NodePrinter\n   */\n\n  /**\n   * @typedef {Object}  Node\n   * @property {Key}    Key\n   * @property {Value=} data\n   * @property {Node}   left\n   * @property {Node}   right\n   */\n  var Node = function Node(key, data) {\n    _classCallCheck(this, Node);\n\n    this.key = key;\n    this.data = data;\n    this.left = null;\n    this.right = null;\n  };\n\n  function DEFAULT_COMPARE(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n  }\n  /**\n   * Simple top down splay, not requiring i to be in the tree t.\n   * @param {Key} i\n   * @param {Node?} t\n   * @param {Comparator} comparator\n   */\n\n\n  function splay(i, t, comparator) {\n    if (t === null) return t;\n    var l, r, y;\n    var N = new Node();\n    l = r = N;\n\n    while (true) {\n      var cmp = comparator(i, t.key); //if (i < t.key) {\n\n      if (cmp < 0) {\n        if (t.left === null) break; //if (i < t.left.key) {\n\n        if (comparator(i, t.left.key) < 0) {\n          y = t.left;\n          /* rotate right */\n\n          t.left = y.right;\n          y.right = t;\n          t = y;\n          if (t.left === null) break;\n        }\n\n        r.left = t;\n        /* link right */\n\n        r = t;\n        t = t.left; //} else if (i > t.key) {\n      } else if (cmp > 0) {\n        if (t.right === null) break; //if (i > t.right.key) {\n\n        if (comparator(i, t.right.key) > 0) {\n          y = t.right;\n          /* rotate left */\n\n          t.right = y.left;\n          y.left = t;\n          t = y;\n          if (t.right === null) break;\n        }\n\n        l.right = t;\n        /* link left */\n\n        l = t;\n        t = t.right;\n      } else {\n        break;\n      }\n    }\n    /* assemble */\n\n\n    l.right = t.left;\n    r.left = t.right;\n    t.left = N.right;\n    t.right = N.left;\n    return t;\n  }\n  /**\n   * @param  {Key}        i\n   * @param  {Value}      data\n   * @param  {Comparator} comparator\n   * @param  {Tree}       tree\n   * @return {Node}      root\n   */\n\n\n  function _insert(i, data, t, comparator, tree) {\n    var node = new Node(i, data);\n    tree._size++;\n\n    if (t === null) {\n      node.left = node.right = null;\n      return node;\n    }\n\n    t = splay(i, t, comparator);\n    var cmp = comparator(i, t.key);\n\n    if (cmp < 0) {\n      node.left = t.left;\n      node.right = t;\n      t.left = null;\n    } else if (cmp >= 0) {\n      node.right = t.right;\n      node.left = t;\n      t.right = null;\n    }\n\n    return node;\n  }\n  /**\n   * Insert i into the tree t, unless it's already there.\n   * @param  {Key}        i\n   * @param  {Value}      data\n   * @param  {Comparator} comparator\n   * @param  {Tree}       tree\n   * @return {Node}       root\n   */\n\n\n  function _add(i, data, t, comparator, tree) {\n    var node = new Node(i, data);\n\n    if (t === null) {\n      node.left = node.right = null;\n      tree._size++;\n      return node;\n    }\n\n    t = splay(i, t, comparator);\n    var cmp = comparator(i, t.key);\n    if (cmp === 0) return t;else {\n      if (cmp < 0) {\n        node.left = t.left;\n        node.right = t;\n        t.left = null;\n      } else if (cmp > 0) {\n        node.right = t.right;\n        node.left = t;\n        t.right = null;\n      }\n\n      tree._size++;\n      return node;\n    }\n  }\n  /**\n   * Deletes i from the tree if it's there\n   * @param {Key}        i\n   * @param {Tree}       tree\n   * @param {Comparator} comparator\n   * @param {Tree}       tree\n   * @return {Node}      new root\n   */\n\n\n  function _remove(i, t, comparator, tree) {\n    var x;\n    if (t === null) return null;\n    t = splay(i, t, comparator);\n    var cmp = comparator(i, t.key);\n\n    if (cmp === 0) {\n      /* found it */\n      if (t.left === null) {\n        x = t.right;\n      } else {\n        x = splay(i, t.left, comparator);\n        x.right = t.right;\n      }\n\n      tree._size--;\n      return x;\n    }\n\n    return t;\n    /* It wasn't there */\n  }\n\n  function _split(key, v, comparator) {\n    var left, right;\n\n    if (v === null) {\n      left = right = null;\n    } else {\n      v = splay(key, v, comparator);\n      var cmp = comparator(v.key, key);\n\n      if (cmp === 0) {\n        left = v.left;\n        right = v.right;\n      } else if (cmp < 0) {\n        right = v.right;\n        v.right = null;\n        left = v;\n      } else {\n        left = v.left;\n        v.left = null;\n        right = v;\n      }\n    }\n\n    return {\n      left: left,\n      right: right\n    };\n  }\n\n  function merge(left, right, comparator) {\n    if (right === null) return left;\n    if (left === null) return right;\n    right = splay(left.key, right, comparator);\n    right.left = left;\n    return right;\n  }\n  /**\n   * Prints level of the tree\n   * @param  {Node}                        root\n   * @param  {String}                      prefix\n   * @param  {Boolean}                     isTail\n   * @param  {Array<string>}               out\n   * @param  {Function(node:Node):String}  printNode\n   */\n\n\n  function printRow(root, prefix, isTail, out, printNode) {\n    if (root) {\n      out(\"\".concat(prefix).concat(isTail ? '└── ' : '├── ').concat(printNode(root), \"\\n\"));\n      var indent = prefix + (isTail ? '    ' : '│   ');\n      if (root.left) printRow(root.left, indent, false, out, printNode);\n      if (root.right) printRow(root.right, indent, true, out, printNode);\n    }\n  }\n\n  var Tree =\n  /*#__PURE__*/\n  function () {\n    function Tree() {\n      var comparator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_COMPARE;\n\n      _classCallCheck(this, Tree);\n\n      this._comparator = comparator;\n      this._root = null;\n      this._size = 0;\n    }\n    /**\n     * Inserts a key, allows duplicates\n     * @param  {Key}    key\n     * @param  {Value=} data\n     * @return {Node|null}\n     */\n\n\n    _createClass(Tree, [{\n      key: \"insert\",\n      value: function insert(key, data) {\n        return this._root = _insert(key, data, this._root, this._comparator, this);\n      }\n      /**\n       * Adds a key, if it is not present in the tree\n       * @param  {Key}    key\n       * @param  {Value=} data\n       * @return {Node|null}\n       */\n\n    }, {\n      key: \"add\",\n      value: function add(key, data) {\n        return this._root = _add(key, data, this._root, this._comparator, this);\n      }\n      /**\n       * @param  {Key} key\n       * @return {Node|null}\n       */\n\n    }, {\n      key: \"remove\",\n      value: function remove(key) {\n        this._root = _remove(key, this._root, this._comparator, this);\n      }\n      /**\n       * Removes and returns the node with smallest key\n       * @return {?Node}\n       */\n\n    }, {\n      key: \"pop\",\n      value: function pop() {\n        var node = this._root;\n\n        if (node) {\n          while (node.left) {\n            node = node.left;\n          }\n\n          this._root = splay(node.key, this._root, this._comparator);\n          this._root = _remove(node.key, this._root, this._comparator, this);\n          return {\n            key: node.key,\n            data: node.data\n          };\n        }\n\n        return null;\n      }\n      /**\n       * @param  {Key} key\n       * @return {Node|null}\n       */\n\n    }, {\n      key: \"findStatic\",\n      value: function findStatic(key) {\n        var current = this._root;\n        var compare = this._comparator;\n\n        while (current) {\n          var cmp = compare(key, current.key);\n          if (cmp === 0) return current;else if (cmp < 0) current = current.left;else current = current.right;\n        }\n\n        return null;\n      }\n      /**\n       * @param  {Key} key\n       * @return {Node|null}\n       */\n\n    }, {\n      key: \"find\",\n      value: function find(key) {\n        if (this._root) {\n          this._root = splay(key, this._root, this._comparator);\n          if (this._comparator(key, this._root.key) !== 0) return null;\n        }\n\n        return this._root;\n      }\n      /**\n       * @param  {Key} key\n       * @return {Boolean}\n       */\n\n    }, {\n      key: \"contains\",\n      value: function contains(key) {\n        var current = this._root;\n        var compare = this._comparator;\n\n        while (current) {\n          var cmp = compare(key, current.key);\n          if (cmp === 0) return true;else if (cmp < 0) current = current.left;else current = current.right;\n        }\n\n        return false;\n      }\n      /**\n       * @param  {Visitor} visitor\n       * @param  {*=}      ctx\n       * @return {SplayTree}\n       */\n\n    }, {\n      key: \"forEach\",\n      value: function forEach(visitor, ctx) {\n        var current = this._root;\n        var Q = [];\n        /* Initialize stack s */\n\n        var done = false;\n\n        while (!done) {\n          if (current !== null) {\n            Q.push(current);\n            current = current.left;\n          } else {\n            if (Q.length !== 0) {\n              current = Q.pop();\n              visitor.call(ctx, current);\n              current = current.right;\n            } else done = true;\n          }\n        }\n\n        return this;\n      }\n      /**\n       * Walk key range from `low` to `high`. Stops if `fn` returns a value.\n       * @param  {Key}      low\n       * @param  {Key}      high\n       * @param  {Function} fn\n       * @param  {*?}       ctx\n       * @return {SplayTree}\n       */\n\n    }, {\n      key: \"range\",\n      value: function range(low, high, fn, ctx) {\n        var Q = [];\n        var compare = this._comparator;\n        var node = this._root,\n            cmp;\n\n        while (Q.length !== 0 || node) {\n          if (node) {\n            Q.push(node);\n            node = node.left;\n          } else {\n            node = Q.pop();\n            cmp = compare(node.key, high);\n\n            if (cmp > 0) {\n              break;\n            } else if (compare(node.key, low) >= 0) {\n              if (fn.call(ctx, node)) return this; // stop if smth is returned\n            }\n\n            node = node.right;\n          }\n        }\n\n        return this;\n      }\n      /**\n       * Returns array of keys\n       * @return {Array<Key>}\n       */\n\n    }, {\n      key: \"keys\",\n      value: function keys() {\n        var keys = [];\n        this.forEach(function (_ref) {\n          var key = _ref.key;\n          return keys.push(key);\n        });\n        return keys;\n      }\n      /**\n       * Returns array of all the data in the nodes\n       * @return {Array<Value>}\n       */\n\n    }, {\n      key: \"values\",\n      value: function values() {\n        var values = [];\n        this.forEach(function (_ref2) {\n          var data = _ref2.data;\n          return values.push(data);\n        });\n        return values;\n      }\n      /**\n       * @return {Key|null}\n       */\n\n    }, {\n      key: \"min\",\n      value: function min() {\n        if (this._root) return this.minNode(this._root).key;\n        return null;\n      }\n      /**\n       * @return {Key|null}\n       */\n\n    }, {\n      key: \"max\",\n      value: function max() {\n        if (this._root) return this.maxNode(this._root).key;\n        return null;\n      }\n      /**\n       * @return {Node|null}\n       */\n\n    }, {\n      key: \"minNode\",\n      value: function minNode() {\n        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._root;\n        if (t) while (t.left) {\n          t = t.left;\n        }\n        return t;\n      }\n      /**\n       * @return {Node|null}\n       */\n\n    }, {\n      key: \"maxNode\",\n      value: function maxNode() {\n        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._root;\n        if (t) while (t.right) {\n          t = t.right;\n        }\n        return t;\n      }\n      /**\n       * Returns node at given index\n       * @param  {number} index\n       * @return {?Node}\n       */\n\n    }, {\n      key: \"at\",\n      value: function at(index) {\n        var current = this._root,\n            done = false,\n            i = 0;\n        var Q = [];\n\n        while (!done) {\n          if (current) {\n            Q.push(current);\n            current = current.left;\n          } else {\n            if (Q.length > 0) {\n              current = Q.pop();\n              if (i === index) return current;\n              i++;\n              current = current.right;\n            } else done = true;\n          }\n        }\n\n        return null;\n      }\n      /**\n       * @param  {Node}   d\n       * @return {Node|null}\n       */\n\n    }, {\n      key: \"next\",\n      value: function next(d) {\n        var root = this._root;\n        var successor = null;\n\n        if (d.right) {\n          successor = d.right;\n\n          while (successor.left) {\n            successor = successor.left;\n          }\n\n          return successor;\n        }\n\n        var comparator = this._comparator;\n\n        while (root) {\n          var cmp = comparator(d.key, root.key);\n          if (cmp === 0) break;else if (cmp < 0) {\n            successor = root;\n            root = root.left;\n          } else root = root.right;\n        }\n\n        return successor;\n      }\n      /**\n       * @param  {Node} d\n       * @return {Node|null}\n       */\n\n    }, {\n      key: \"prev\",\n      value: function prev(d) {\n        var root = this._root;\n        var predecessor = null;\n\n        if (d.left !== null) {\n          predecessor = d.left;\n\n          while (predecessor.right) {\n            predecessor = predecessor.right;\n          }\n\n          return predecessor;\n        }\n\n        var comparator = this._comparator;\n\n        while (root) {\n          var cmp = comparator(d.key, root.key);\n          if (cmp === 0) break;else if (cmp < 0) root = root.left;else {\n            predecessor = root;\n            root = root.right;\n          }\n        }\n\n        return predecessor;\n      }\n      /**\n       * @return {SplayTree}\n       */\n\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        this._root = null;\n        this._size = 0;\n        return this;\n      }\n      /**\n       * @return {NodeList}\n       */\n\n    }, {\n      key: \"toList\",\n      value: function toList() {\n        return _toList(this._root);\n      }\n      /**\n       * Bulk-load items. Both array have to be same size\n       * @param  {Array<Key>}    keys\n       * @param  {Array<Value>}  [values]\n       * @param  {Boolean}       [presort=false] Pre-sort keys and values, using\n       *                                         tree's comparator. Sorting is done\n       *                                         in-place\n       * @return {AVLTree}\n       */\n\n    }, {\n      key: \"load\",\n      value: function load() {\n        var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n        var presort = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        var size = keys.length;\n        var comparator = this._comparator; // sort if needed\n\n        if (presort) sort(keys, values, 0, size - 1, comparator);\n\n        if (this._root === null) {\n          // empty tree\n          this._root = loadRecursive(this._root, keys, values, 0, size);\n          this._size = size;\n        } else {\n          // that re-builds the whole tree from two in-order traversals\n          var mergedList = mergeLists(this.toList(), createList(keys, values), comparator);\n          size = this._size + size;\n          this._root = sortedListToBST({\n            head: mergedList\n          }, 0, size);\n        }\n\n        return this;\n      }\n      /**\n       * @return {Boolean}\n       */\n\n    }, {\n      key: \"isEmpty\",\n      value: function isEmpty() {\n        return this._root === null;\n      }\n    }, {\n      key: \"toString\",\n\n      /**\n       * @param  {NodePrinter=} printNode\n       * @return {String}\n       */\n      value: function toString() {\n        var printNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (n) {\n          return n.key;\n        };\n        var out = [];\n        printRow(this._root, '', true, function (v) {\n          return out.push(v);\n        }, printNode);\n        return out.join('');\n      }\n    }, {\n      key: \"update\",\n      value: function update(key, newKey, newData) {\n        var comparator = this._comparator;\n\n        var _split2 = _split(key, this._root, comparator),\n            left = _split2.left,\n            right = _split2.right;\n\n        this._size--;\n\n        if (comparator(key, newKey) < 0) {\n          right = _insert(newKey, newData, right, comparator, this);\n        } else {\n          left = _insert(newKey, newData, left, comparator, this);\n        }\n\n        this._root = merge(left, right, comparator);\n      }\n    }, {\n      key: \"split\",\n      value: function split(key) {\n        return _split(key, this._root, this._comparator);\n      }\n    }, {\n      key: \"size\",\n      get: function get() {\n        return this._size;\n      }\n    }]);\n\n    return Tree;\n  }();\n\n  function loadRecursive(parent, keys, values, start, end) {\n    var size = end - start;\n\n    if (size > 0) {\n      var middle = start + Math.floor(size / 2);\n      var key = keys[middle];\n      var data = values[middle];\n      var node = {\n        key: key,\n        data: data,\n        parent: parent\n      };\n      node.left = loadRecursive(node, keys, values, start, middle);\n      node.right = loadRecursive(node, keys, values, middle + 1, end);\n      return node;\n    }\n\n    return null;\n  }\n\n  function createList(keys, values) {\n    var head = {\n      next: null\n    };\n    var p = head;\n\n    for (var i = 0; i < keys.length; i++) {\n      p = p.next = {\n        key: keys[i],\n        data: values[i]\n      };\n    }\n\n    p.next = null;\n    return head.next;\n  }\n\n  function _toList(root) {\n    var current = root;\n    var Q = [],\n        done = false;\n    var head = {\n      next: null\n    };\n    var p = head;\n\n    while (!done) {\n      if (current) {\n        Q.push(current);\n        current = current.left;\n      } else {\n        if (Q.length > 0) {\n          current = p = p.next = Q.pop();\n          current = current.right;\n        } else done = true;\n      }\n    }\n\n    p.next = null; // that'll work even if the tree was empty\n\n    return head.next;\n  }\n\n  function sortedListToBST(list, start, end) {\n    var size = end - start;\n\n    if (size > 0) {\n      var middle = start + Math.floor(size / 2);\n      var left = sortedListToBST(list, start, middle);\n      var root = list.head;\n      root.left = left;\n      list.head = list.head.next;\n      root.right = sortedListToBST(list, middle + 1, end);\n      return root;\n    }\n\n    return null;\n  }\n\n  function mergeLists(l1, l2) {\n    var compare = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (a, b) {\n      return a - b;\n    };\n    var head = {}; // dummy\n\n    var p = head;\n    var p1 = l1;\n    var p2 = l2;\n\n    while (p1 !== null && p2 !== null) {\n      if (compare(p1.key, p2.key) < 0) {\n        p.next = p1;\n        p1 = p1.next;\n      } else {\n        p.next = p2;\n        p2 = p2.next;\n      }\n\n      p = p.next;\n    }\n\n    if (p1 !== null) p.next = p1;else if (p2 !== null) p.next = p2;\n    return head.next;\n  }\n\n  function sort(keys, values, left, right, compare) {\n    if (left >= right) return;\n    var pivot = keys[left + right >> 1];\n    var i = left - 1;\n    var j = right + 1;\n\n    while (true) {\n      do {\n        i++;\n      } while (compare(keys[i], pivot) < 0);\n\n      do {\n        j--;\n      } while (compare(keys[j], pivot) > 0);\n\n      if (i >= j) break;\n      var tmp = keys[i];\n      keys[i] = keys[j];\n      keys[j] = tmp;\n      tmp = values[i];\n      values[i] = values[j];\n      values[j] = tmp;\n    }\n\n    sort(keys, values, left, j, compare);\n    sort(keys, values, j + 1, right, compare);\n  }\n\n  /* Javascript doesn't do integer math. Everything is\n   * floating point with percision Number.EPSILON.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\n   */\n  var epsilon = Number.EPSILON; // IE Polyfill\n\n  if (epsilon === undefined) epsilon = Math.pow(2, -52);\n  var EPSILON_SQ = epsilon * epsilon;\n  /* FLP comparator */\n\n  var cmp = function cmp(a, b) {\n    // check if they're both 0\n    if (-epsilon < a && a < epsilon) {\n      if (-epsilon < b && b < epsilon) {\n        return 0;\n      }\n    } // check if they're flp equal\n\n\n    if ((a - b) * (a - b) < EPSILON_SQ * a * b) {\n      return 0;\n    } // normal comparison\n\n\n    return a < b ? -1 : 1;\n  };\n  /* Greedy comparison. Two numbers are defined to touch\n   * if their midpoint is indistinguishable from either. */\n\n  var touch = function touch(a, b) {\n    var m = (a + b) / 2;\n    return cmp(m, a) === 0 || cmp(m, b) === 0;\n  };\n  /* Greedy comparison. Two points are defined to touch\n   * if their midpoint is indistinguishable from either. */\n\n  var touchPoints = function touchPoints(aPt, bPt) {\n    // call directly to (skip touch()) cmp() for performance boost\n    var mx = (aPt.x + bPt.x) / 2;\n    var aXMiss = cmp(mx, aPt.x) !== 0;\n    if (aXMiss && cmp(mx, bPt.x) !== 0) return false;\n    var my = (aPt.y + bPt.y) / 2;\n    var aYMiss = cmp(my, aPt.y) !== 0;\n    if (aYMiss && cmp(my, bPt.y) !== 0) return false; // we have touching on both x & y, we have to make sure it's\n    // not just on opposite points thou\n\n    if (aYMiss && aYMiss) return true;\n    if (!aYMiss && !aYMiss) return true;\n    return false;\n  };\n\n  /* Cross Product of two vectors with first point at origin */\n\n  var crossProduct = function crossProduct(a, b) {\n    return a.x * b.y - a.y * b.x;\n  };\n  /* Dot Product of two vectors with first point at origin */\n\n  var dotProduct = function dotProduct(a, b) {\n    return a.x * b.x + a.y * b.y;\n  };\n  /* Comparator for two vectors with same starting point */\n\n  var compareVectorAngles = function compareVectorAngles(basePt, endPt1, endPt2) {\n    var v1 = {\n      x: endPt1.x - basePt.x,\n      y: endPt1.y - basePt.y\n    };\n    var v2 = {\n      x: endPt2.x - basePt.x,\n      y: endPt2.y - basePt.y\n    };\n    var kross = crossProduct(v1, v2);\n    return cmp(kross, 0);\n  };\n  var length = function length(v) {\n    return Math.sqrt(dotProduct(v, v));\n  };\n  /* Get the sine of the angle from pShared -> pAngle to pShaed -> pBase */\n\n  var sineOfAngle = function sineOfAngle(pShared, pBase, pAngle) {\n    var vBase = {\n      x: pBase.x - pShared.x,\n      y: pBase.y - pShared.y\n    };\n    var vAngle = {\n      x: pAngle.x - pShared.x,\n      y: pAngle.y - pShared.y\n    };\n    return crossProduct(vAngle, vBase) / length(vAngle) / length(vBase);\n  };\n  /* Get the cosine of the angle from pShared -> pAngle to pShaed -> pBase */\n\n  var cosineOfAngle = function cosineOfAngle(pShared, pBase, pAngle) {\n    var vBase = {\n      x: pBase.x - pShared.x,\n      y: pBase.y - pShared.y\n    };\n    var vAngle = {\n      x: pAngle.x - pShared.x,\n      y: pAngle.y - pShared.y\n    };\n    return dotProduct(vAngle, vBase) / length(vAngle) / length(vBase);\n  };\n  /* Get the closest point on an line (defined by two points)\n   * to another point. */\n\n  var closestPoint = function closestPoint(ptA1, ptA2, ptB) {\n    if (ptA1.x === ptA2.x) return {\n      x: ptA1.x,\n      y: ptB.y // vertical vector\n\n    };\n    if (ptA1.y === ptA2.y) return {\n      x: ptB.x,\n      y: ptA1.y // horizontal vector\n      // determinne which point is further away\n\n    };\n    var v1 = {\n      x: ptA1.x - ptB.x,\n      y: ptA1.y - ptB.y\n    };\n    var v2 = {\n      x: ptA2.x - ptB.x,\n      y: ptA2.y - ptB.y\n    };\n    var nearPt = ptA1;\n    var farPt = ptA2;\n\n    if (dotProduct(v1, v1) > dotProduct(v2, v2)) {\n      farPt = ptA1;\n      nearPt = ptA2;\n    } // use the further point as our base in the calculation, so that the\n    // vectors are more parallel, providing more accurate dot product\n\n\n    var vA = {\n      x: nearPt.x - farPt.x,\n      y: nearPt.y - farPt.y\n    };\n    var vB = {\n      x: ptB.x - farPt.x,\n      y: ptB.y - farPt.y\n    };\n    var dist = dotProduct(vA, vB) / dotProduct(vA, vA);\n    return {\n      x: farPt.x + dist * vA.x,\n      y: farPt.y + dist * vA.y\n    };\n  };\n  /* Get the x coordinate where the given line (defined by a point and vector)\n   * crosses the horizontal line with the given y coordiante.\n   * In the case of parrallel lines (including overlapping ones) returns null. */\n\n  var horizontalIntersection = function horizontalIntersection(pt, v, y) {\n    if (v.y === 0) return null;\n    return {\n      x: pt.x + v.x / v.y * (y - pt.y),\n      y: y\n    };\n  };\n  /* Get the y coordinate where the given line (defined by a point and vector)\n   * crosses the vertical line with the given x coordiante.\n   * In the case of parrallel lines (including overlapping ones) returns null. */\n\n  var verticalIntersection = function verticalIntersection(pt, v, x) {\n    if (v.x === 0) return null;\n    return {\n      x: x,\n      y: pt.y + v.y / v.x * (x - pt.x)\n    };\n  };\n  /* Get the intersection of two lines, each defined by a base point and a vector.\n   * In the case of parrallel lines (including overlapping ones) returns null. */\n\n  var intersection = function intersection(pt1, v1, pt2, v2) {\n    // take some shortcuts for vertical and horizontal lines\n    // this also ensures we don't calculate an intersection and then discover\n    // it's actually outside the bounding box of the line\n    if (v1.x === 0) return verticalIntersection(pt2, v2, pt1.x);\n    if (v2.x === 0) return verticalIntersection(pt1, v1, pt2.x);\n    if (v1.y === 0) return horizontalIntersection(pt2, v2, pt1.y);\n    if (v2.y === 0) return horizontalIntersection(pt1, v1, pt2.y); // General case for non-overlapping segments.\n    // This algorithm is based on Schneider and Eberly.\n    // http://www.cimec.org.ar/~ncalvo/Schneider_Eberly.pdf - pg 244\n\n    var kross = crossProduct(v1, v2);\n    if (kross == 0) return null;\n    var ve = {\n      x: pt2.x - pt1.x,\n      y: pt2.y - pt1.y\n    };\n    var d1 = crossProduct(ve, v1) / kross;\n    var d2 = crossProduct(ve, v2) / kross; // take the average of the two calculations to minimize rounding error\n\n    var x1 = pt1.x + d2 * v1.x,\n        x2 = pt2.x + d1 * v2.x;\n    var y1 = pt1.y + d2 * v1.y,\n        y2 = pt2.y + d1 * v2.y;\n    var x = (x1 + x2) / 2;\n    var y = (y1 + y2) / 2;\n    return {\n      x: x,\n      y: y\n    };\n  };\n\n  /**\n   * This class rounds incoming values sufficiently so that\n   * floating points problems are, for the most part, avoided.\n   *\n   * Incoming points are have their x & y values tested against\n   * all previously seen x & y values. If either is 'too close'\n   * to a previously seen value, it's value is 'snapped' to the\n   * previously seen value.\n   *\n   * All points should be rounded by this class before being\n   * stored in any data structures in the rest of this algorithm.\n   */\n\n  var PtRounder =\n  /*#__PURE__*/\n  function () {\n    function PtRounder() {\n      _classCallCheck(this, PtRounder);\n\n      this.reset();\n    }\n\n    _createClass(PtRounder, [{\n      key: \"reset\",\n      value: function reset() {\n        this.xRounder = new CoordRounder();\n        this.yRounder = new CoordRounder();\n      }\n    }, {\n      key: \"round\",\n      value: function round(x, y) {\n        return {\n          x: this.xRounder.round(x),\n          y: this.yRounder.round(y)\n        };\n      }\n    }]);\n\n    return PtRounder;\n  }();\n\n  var CoordRounder =\n  /*#__PURE__*/\n  function () {\n    function CoordRounder() {\n      _classCallCheck(this, CoordRounder);\n\n      this.tree = new Tree(); // preseed with 0 so we don't end up with values < Number.EPSILON\n\n      this.round(0);\n    } // Note: this can rounds input values backwards or forwards.\n    //       You might ask, why not restrict this to just rounding\n    //       forwards? Wouldn't that allow left endpoints to always\n    //       remain left endpoints during splitting (never change to\n    //       right). No - it wouldn't, because we snap intersections\n    //       to endpoints (to establish independence from the segment\n    //       angle for t-intersections).\n\n\n    _createClass(CoordRounder, [{\n      key: \"round\",\n      value: function round(coord) {\n        var node = this.tree.add(coord);\n        var prevNode = this.tree.prev(node);\n\n        if (prevNode !== null && cmp(node.key, prevNode.key) === 0) {\n          this.tree.remove(coord);\n          return prevNode.key;\n        }\n\n        var nextNode = this.tree.next(node);\n\n        if (nextNode !== null && cmp(node.key, nextNode.key) === 0) {\n          this.tree.remove(coord);\n          return nextNode.key;\n        }\n\n        return coord;\n      }\n    }]);\n\n    return CoordRounder;\n  }(); // singleton available by import\n\n\n  var rounder = new PtRounder();\n\n  /* Given input geometry as a standard array-of-arrays geojson-style\n   * geometry, return one that uses objects as points, for better perf */\n\n  var pointsAsObjects = function pointsAsObjects(geom) {\n    // we can handle well-formed multipolys and polys\n    var output = [];\n\n    if (!Array.isArray(geom)) {\n      throw new Error('Input is not a Polygon or MultiPolygon');\n    }\n\n    for (var i = 0, iMax = geom.length; i < iMax; i++) {\n      if (!Array.isArray(geom[i]) || geom[i].length == 0) {\n        throw new Error('Input is not a Polygon or MultiPolygon');\n      }\n\n      output.push([]);\n\n      for (var j = 0, jMax = geom[i].length; j < jMax; j++) {\n        if (!Array.isArray(geom[i][j]) || geom[i][j].length == 0) {\n          throw new Error('Input is not a Polygon or MultiPolygon');\n        }\n\n        if (Array.isArray(geom[i][j][0])) {\n          // multipolygon\n          output[i].push([]);\n\n          for (var k = 0, kMax = geom[i][j].length; k < kMax; k++) {\n            if (!Array.isArray(geom[i][j][k]) || geom[i][j][k].length < 2) {\n              throw new Error('Input is not a Polygon or MultiPolygon');\n            }\n\n            if (geom[i][j][k].length > 2) {\n              throw new Error('Input has more than two coordinates. ' + 'Only 2-dimensional polygons supported.');\n            }\n\n            output[i][j].push(rounder.round(geom[i][j][k][0], geom[i][j][k][1]));\n          }\n        } else {\n          // polygon\n          if (geom[i][j].length < 2) {\n            throw new Error('Input is not a Polygon or MultiPolygon');\n          }\n\n          if (geom[i][j].length > 2) {\n            throw new Error('Input has more than two coordinates. ' + 'Only 2-dimensional polygons supported.');\n          }\n\n          output[i].push(rounder.round(geom[i][j][0], geom[i][j][1]));\n        }\n      }\n    }\n\n    return output;\n  };\n  /* WARN: input modified directly */\n\n  var forceMultiPoly = function forceMultiPoly(geom) {\n    if (Array.isArray(geom)) {\n      if (geom.length === 0) return; // allow empty multipolys\n\n      if (Array.isArray(geom[0])) {\n        if (Array.isArray(geom[0][0])) {\n          if (typeof geom[0][0][0].x === 'number' && typeof geom[0][0][0].y === 'number') {\n            // multipolygon\n            return;\n          }\n        }\n\n        if (typeof geom[0][0].x === 'number' && typeof geom[0][0].y === 'number') {\n          // polygon\n          geom.unshift(geom.splice(0));\n          return;\n        }\n      }\n    }\n\n    throw new Error('Unrecognized input - not a polygon nor multipolygon');\n  };\n  /* WARN: input modified directly */\n\n  var cleanMultiPoly = function cleanMultiPoly(multipoly) {\n    var i = 0;\n\n    while (i < multipoly.length) {\n      var poly = multipoly[i];\n\n      if (poly.length === 0) {\n        multipoly.splice(i, 1);\n        continue;\n      }\n\n      var exteriorRing = poly[0];\n      cleanRing(exteriorRing); // poly is dropped if exteriorRing is degenerate\n\n      if (exteriorRing.length === 0) {\n        multipoly.splice(i, 1);\n        continue;\n      }\n\n      var j = 1;\n\n      while (j < poly.length) {\n        var interiorRing = poly[j];\n        cleanRing(interiorRing);\n        if (interiorRing.length === 0) poly.splice(j, 1);else j++;\n      }\n\n      i++;\n    }\n  };\n  /* Clean ring:\n   *  - remove duplicate points\n   *  - remove colinear points\n   *  - remove rings with no area (less than 3 distinct points)\n   *  - un-close rings (last point should not repeat first)\n   *\n   * WARN: input modified directly */\n\n  var cleanRing = function cleanRing(ring) {\n    if (ring.length === 0) return;\n    var firstPt = ring[0];\n    var lastPt = ring[ring.length - 1];\n    if (firstPt.x === lastPt.x && firstPt.y === lastPt.y) ring.pop();\n\n    var isPointUncessary = function isPointUncessary(prevPt, pt, nextPt) {\n      return prevPt.x === pt.x && prevPt.y === pt.y || nextPt.x === pt.x && nextPt.y === pt.y || compareVectorAngles(pt, prevPt, nextPt) === 0;\n    };\n\n    var i = 0;\n    var prevPt, nextPt;\n\n    while (i < ring.length) {\n      prevPt = i === 0 ? ring[ring.length - 1] : ring[i - 1];\n      nextPt = i === ring.length - 1 ? ring[0] : ring[i + 1];\n      if (isPointUncessary(prevPt, ring[i], nextPt)) ring.splice(i, 1);else i++;\n    } // if our ring has less than 3 distinct points now (so is degenerate)\n    // shrink it down to the empty array to communicate to our caller to\n    // drop it\n\n\n    while (ring.length < 3 && ring.length > 0) {\n      ring.pop();\n    }\n  };\n\n  var SweepEvent =\n  /*#__PURE__*/\n  function () {\n    _createClass(SweepEvent, null, [{\n      key: \"compare\",\n      // for ordering sweep events in the sweep event queue\n      value: function compare(a, b) {\n        // favor event with a point that the sweep line hits first\n        var ptCmp = SweepEvent.comparePoints(a.point, b.point);\n        if (ptCmp !== 0) return ptCmp; // the points are the same, so link them if needed\n\n        if (a.point !== b.point) a.link(b); // favor right events over left\n\n        if (a.isLeft !== b.isLeft) return a.isLeft ? 1 : -1; // we have two matching left or right endpoints\n        // ordering of this case is the same as for their segments\n\n        return Segment.compare(a.segment, b.segment);\n      } // for ordering points in sweep line order\n\n    }, {\n      key: \"comparePoints\",\n      value: function comparePoints(aPt, bPt) {\n        if (aPt.x < bPt.x) return -1;\n        if (aPt.x > bPt.x) return 1;\n        if (aPt.y < bPt.y) return -1;\n        if (aPt.y > bPt.y) return 1;\n        return 0;\n      } // Warning: 'point' input will be modified and re-used (for performance)\n\n    }]);\n\n    function SweepEvent(point, isLeft) {\n      _classCallCheck(this, SweepEvent);\n\n      if (point.events === undefined) point.events = [this];else point.events.push(this);\n      this.point = point;\n      this.isLeft = isLeft; // this.segment, this.otherSE set by factory\n    }\n\n    _createClass(SweepEvent, [{\n      key: \"link\",\n      value: function link(other) {\n        if (other.point === this.point) {\n          throw new Error('Tried to link already linked events');\n        }\n\n        var otherEvents = other.point.events;\n\n        for (var i = 0, iMax = otherEvents.length; i < iMax; i++) {\n          var evt = otherEvents[i];\n          this.point.events.push(evt);\n          evt.point = this.point;\n        }\n\n        this.checkForConsuming();\n      }\n      /* Do a pass over our linked events and check to see if any pair\n       * of segments match, and should be consumed. */\n\n    }, {\n      key: \"checkForConsuming\",\n      value: function checkForConsuming() {\n        // FIXME: The loops in this method run O(n^2) => no good.\n        //        Maintain little ordered sweep event trees?\n        //        Can we maintaining an ordering that avoids the need\n        //        for the re-sorting with getLeftmostComparator in geom-out?\n        // Compare each pair of events to see if other events also match\n        var numEvents = this.point.events.length;\n\n        for (var i = 0; i < numEvents; i++) {\n          var evt1 = this.point.events[i];\n          if (evt1.segment.consumedBy !== undefined) continue;\n\n          for (var j = i + 1; j < numEvents; j++) {\n            var evt2 = this.point.events[j];\n            if (evt2.consumedBy !== undefined) continue;\n            if (evt1.otherSE.point.events !== evt2.otherSE.point.events) continue;\n            evt1.segment.consume(evt2.segment);\n          }\n        }\n      }\n    }, {\n      key: \"getAvailableLinkedEvents\",\n      value: function getAvailableLinkedEvents() {\n        // point.events is always of length 2 or greater\n        var events = [];\n\n        for (var i = 0, iMax = this.point.events.length; i < iMax; i++) {\n          var evt = this.point.events[i];\n\n          if (evt !== this && !evt.segment.ringOut && evt.segment.isInResult()) {\n            events.push(evt);\n          }\n        }\n\n        return events;\n      }\n      /**\n       * Returns a comparator function for sorting linked events that will\n       * favor the event that will give us the smallest left-side angle.\n       * All ring construction starts as low as possible heading to the right,\n       * so by always turning left as sharp as possible we'll get polygons\n       * without uncessary loops & holes.\n       *\n       * The comparator function has a compute cache such that it avoids\n       * re-computing already-computed values.\n       */\n\n    }, {\n      key: \"getLeftmostComparator\",\n      value: function getLeftmostComparator(baseEvent) {\n        var _this = this;\n\n        var cache = new Map();\n\n        var fillCache = function fillCache(linkedEvent) {\n          var nextEvent = linkedEvent.otherSE;\n          cache.set(linkedEvent, {\n            sine: sineOfAngle(_this.point, baseEvent.point, nextEvent.point),\n            cosine: cosineOfAngle(_this.point, baseEvent.point, nextEvent.point)\n          });\n        };\n\n        return function (a, b) {\n          if (!cache.has(a)) fillCache(a);\n          if (!cache.has(b)) fillCache(b);\n\n          var _cache$get = cache.get(a),\n              asine = _cache$get.sine,\n              acosine = _cache$get.cosine;\n\n          var _cache$get2 = cache.get(b),\n              bsine = _cache$get2.sine,\n              bcosine = _cache$get2.cosine; // both on or above x-axis\n\n\n          if (asine >= 0 && bsine >= 0) {\n            if (acosine < bcosine) return 1;\n            if (acosine > bcosine) return -1;\n            return 0;\n          } // both below x-axis\n\n\n          if (asine < 0 && bsine < 0) {\n            if (acosine < bcosine) return -1;\n            if (acosine > bcosine) return 1;\n            return 0;\n          } // one above x-axis, one below\n\n\n          if (bsine < asine) return -1;\n          if (bsine > asine) return 1;\n          return 0;\n        };\n      }\n    }]);\n\n    return SweepEvent;\n  }();\n\n  /**\n   * A bounding box has the format:\n   *\n   *  { ll: { x: xmin, y: ymin }, ur: { x: xmax, y: ymax } }\n   *\n   */\n\n  var isInBbox = function isInBbox(bbox, point) {\n    return bbox.ll.x <= point.x && point.x <= bbox.ur.x && bbox.ll.y <= point.y && point.y <= bbox.ur.y;\n  };\n  /* Greedy comparison with a bbox. A point is defined to 'touch'\n   * a bbox if:\n   *  - it is inside the bbox\n   *  - it 'touches' one of the sides (another greedy comparison) */\n\n  var touchesBbox = function touchesBbox(bbox, point) {\n    return (bbox.ll.x <= point.x || touch(bbox.ll.x, point.x)) && (point.x <= bbox.ur.x || touch(point.x, bbox.ur.x)) && (bbox.ll.y <= point.y || touch(bbox.ll.y, point.y)) && (point.y <= bbox.ur.y || touch(point.y, bbox.ur.y));\n  };\n  /* Returns either null, or a bbox (aka an ordered pair of points)\n   * If there is only one point of overlap, a bbox with identical points\n   * will be returned */\n\n  var getBboxOverlap = function getBboxOverlap(b1, b2) {\n    // check if the bboxes overlap at all\n    if (b2.ur.x < b1.ll.x || b1.ur.x < b2.ll.x || b2.ur.y < b1.ll.y || b1.ur.y < b2.ll.y) return null; // find the middle two X values\n\n    var lowerX = b1.ll.x < b2.ll.x ? b2.ll.x : b1.ll.x;\n    var upperX = b1.ur.x < b2.ur.x ? b1.ur.x : b2.ur.x; // find the middle two Y values\n\n    var lowerY = b1.ll.y < b2.ll.y ? b2.ll.y : b1.ll.y;\n    var upperY = b1.ur.y < b2.ur.y ? b1.ur.y : b2.ur.y; // put those middle values together to get the overlap\n\n    return {\n      ll: {\n        x: lowerX,\n        y: lowerY\n      },\n      ur: {\n        x: upperX,\n        y: upperY\n      }\n    };\n  };\n\n  // segments and sweep events when all else is identical\n\n  var segmentId = 0;\n\n  var Segment =\n  /*#__PURE__*/\n  function () {\n    _createClass(Segment, null, [{\n      key: \"compare\",\n\n      /* This compare() function is for ordering segments in the sweep\n       * line tree, and does so according to the following criteria:\n       *\n       * Consider the vertical line that lies an infinestimal step to the\n       * right of the right-more of the two left endpoints of the input\n       * segments. Imagine slowly moving a point up from negative infinity\n       * in the increasing y direction. Which of the two segments will that\n       * point intersect first? That segment comes 'before' the other one.\n       *\n       * If neither segment would be intersected by such a line, (if one\n       * or more of the segments are vertical) then the line to be considered\n       * is directly on the right-more of the two left inputs.\n       */\n      value: function compare(a, b) {\n        var alx = a.leftSE.point.x;\n        var blx = b.leftSE.point.x;\n        var arx = a.rightSE.point.x;\n        var brx = b.rightSE.point.x; // check if they're even in the same vertical plane\n\n        if (brx < alx) return 1;\n        if (arx < blx) return -1;\n        var aly = a.leftSE.point.y;\n        var bly = b.leftSE.point.y;\n        var ary = a.rightSE.point.y;\n        var bry = b.rightSE.point.y; // is left endpoint of segment B the right-more?\n\n        if (alx < blx) {\n          // are the two segments in the same horizontal plane?\n          if (bly < aly && bly < ary) return 1;\n          if (bly > aly && bly > ary) return -1; // is the B left endpoint colinear to segment A?\n\n          var aCmpBLeft = a.comparePoint(b.leftSE.point);\n          if (aCmpBLeft < 0) return 1;\n          if (aCmpBLeft > 0) return -1; // is the A right endpoint colinear to segment B ?\n\n          var bCmpARight = b.comparePoint(a.rightSE.point);\n          if (bCmpARight !== 0) return bCmpARight; // colinear segments, consider the one with left-more\n          // left endpoint to be first (arbitrary?)\n\n          return -1;\n        } // is left endpoint of segment A the right-more?\n\n\n        if (alx > blx) {\n          if (aly < bly && aly < bry) return -1;\n          if (aly > bly && aly > bry) return 1; // is the A left endpoint colinear to segment B?\n\n          var bCmpALeft = b.comparePoint(a.leftSE.point);\n          if (bCmpALeft !== 0) return bCmpALeft; // is the B right endpoint colinear to segment A?\n\n          var aCmpBRight = a.comparePoint(b.rightSE.point);\n          if (aCmpBRight < 0) return 1;\n          if (aCmpBRight > 0) return -1; // colinear segments, consider the one with left-more\n          // left endpoint to be first (arbitrary?)\n\n          return 1;\n        } // if we get here, the two left endpoints are in the same\n        // vertical plane, ie alx === blx\n        // consider the lower left-endpoint to come first\n\n\n        if (aly < bly) return -1;\n        if (aly > bly) return 1; // left endpoints are identical\n        // check for colinearity by using the left-more right endpoint\n        // is the A right endpoint more left-more?\n\n        if (arx < brx) {\n          var _bCmpARight = b.comparePoint(a.rightSE.point);\n\n          if (_bCmpARight !== 0) return _bCmpARight; // colinear segments with matching left endpoints,\n          // consider the one with more left-more right endpoint to be first\n\n          return -1;\n        } // is the B right endpoint more left-more?\n\n\n        if (arx > brx) {\n          var _aCmpBRight = a.comparePoint(b.rightSE.point);\n\n          if (_aCmpBRight < 0) return 1;\n          if (_aCmpBRight > 0) return -1; // colinear segments with matching left endpoints,\n          // consider the one with more left-more right endpoint to be first\n\n          return 1;\n        } // if we get here, two two right endpoints are in the same\n        // vertical plane, ie arx === brx\n        // consider the lower right-endpoint to come first\n\n\n        if (ary < bry) return -1;\n        if (ary > bry) return 1; // right endpoints identical as well, so the segments are idential\n        // fall back on creation order as consistent tie-breaker\n\n        if (a.id < b.id) return -1;\n        if (a.id > b.id) return 1; // identical segment, ie a === b\n\n        return 0;\n      }\n      /* Warning: a reference to ringsIn input will be stored,\n       *  and possibly will be later modified */\n\n    }]);\n\n    function Segment(leftSE, rightSE, ringsIn) {\n      _classCallCheck(this, Segment);\n\n      this.id = ++segmentId;\n      this.leftSE = leftSE;\n      leftSE.segment = this;\n      leftSE.otherSE = rightSE;\n      this.rightSE = rightSE;\n      rightSE.segment = this;\n      rightSE.otherSE = leftSE;\n      this.ringsIn = ringsIn;\n      this._cache = {}; // left unset for performance, set later in algorithm\n      // this.ringOut, this.consumedBy, this.prev\n    }\n\n    _createClass(Segment, [{\n      key: \"replaceRightSE\",\n\n      /* When a segment is split, the rightSE is replaced with a new sweep event */\n      value: function replaceRightSE(newRightSE) {\n        this.rightSE = newRightSE;\n        this.rightSE.segment = this;\n        this.rightSE.otherSE = this.leftSE;\n        this.leftSE.otherSE = this.rightSE;\n      }\n    }, {\n      key: \"bbox\",\n      value: function bbox() {\n        var y1 = this.leftSE.point.y;\n        var y2 = this.rightSE.point.y;\n        return {\n          ll: {\n            x: this.leftSE.point.x,\n            y: y1 < y2 ? y1 : y2\n          },\n          ur: {\n            x: this.rightSE.point.x,\n            y: y1 > y2 ? y1 : y2\n          }\n        };\n      }\n      /* A vector from the left point to the right */\n\n    }, {\n      key: \"vector\",\n      value: function vector() {\n        return {\n          x: this.rightSE.point.x - this.leftSE.point.x,\n          y: this.rightSE.point.y - this.leftSE.point.y\n        };\n      }\n    }, {\n      key: \"isAnEndpoint\",\n      value: function isAnEndpoint(pt) {\n        return pt.x === this.leftSE.point.x && pt.y === this.leftSE.point.y || pt.x === this.rightSE.point.x && pt.y === this.rightSE.point.y;\n      }\n      /* Compare this segment with a point. Return value indicates:\n       *     1: point lies above or to the left of segment\n       *     0: point is colinear to segment\n       *    -1: point is below or to the right of segment */\n\n    }, {\n      key: \"comparePoint\",\n      value: function comparePoint(point) {\n        if (this.isAnEndpoint(point)) return 0;\n        var interPt = closestPoint(this.leftSE.point, this.rightSE.point, point);\n        if (point.y < interPt.y) return -1;\n        if (point.y > interPt.y) return 1; // depending on if our segment angles up or down,\n        // the x coord comparison means oppposite things\n\n        if (point.x < interPt.x) {\n          if (this.leftSE.point.y < this.rightSE.point.y) return 1;\n          if (this.leftSE.point.y > this.rightSE.point.y) return -1;\n        }\n\n        if (point.x > interPt.x) {\n          if (this.leftSE.point.y < this.rightSE.point.y) return -1;\n          if (this.leftSE.point.y > this.rightSE.point.y) return 1;\n        } // on the line\n\n\n        return 0;\n      }\n      /* Does the point in question touch the given segment?\n       * Greedy - essentially a 2 * Number.EPSILON comparison.\n       * If it's not possible to add an independent point between the\n       * point and the segment, we say the point 'touches' the segment. */\n\n    }, {\n      key: \"touches\",\n      value: function touches(point) {\n        if (!touchesBbox(this.bbox(), point)) return false; // if the points have been linked already, performance boost use that\n\n        if (point === this.leftSE.point || point === this.rightSE.point) return true; // avoid doing vector math on tiny vectors\n\n        if (touchPoints(this.leftSE.point, point)) return true;\n        if (touchPoints(this.rightSE.point, point)) return true;\n        var cPt1 = closestPoint(this.leftSE.point, this.rightSE.point, point);\n        var avgPt1 = {\n          x: (cPt1.x + point.x) / 2,\n          y: (cPt1.y + point.y) / 2\n        };\n        return touchPoints(avgPt1, cPt1) || touchPoints(avgPt1, point);\n      }\n      /**\n       * Given another segment, returns the first non-trivial intersection\n       * between the two segments (in terms of sweep line ordering), if it exists.\n       *\n       * A 'non-trivial' intersection is one that will cause one or both of the\n       * segments to be split(). As such, 'trivial' vs. 'non-trivial' intersection:\n       *\n       *   * endpoint of segA with endpoint of segB --> trivial\n       *   * endpoint of segA with point along segB --> non-trivial\n       *   * endpoint of segB with point along segA --> non-trivial\n       *   * point along segA with point along segB --> non-trivial\n       *\n       * If no non-trivial intersection exists, return null\n       * Else, return null.\n       */\n\n    }, {\n      key: \"getIntersection\",\n      value: function getIntersection(other) {\n        // If bboxes don't overlap, there can't be any intersections\n        var bboxOverlap = getBboxOverlap(this.bbox(), other.bbox());\n        if (bboxOverlap === null) return null; // We first check to see if the endpoints can be considered intersections.\n        // This will 'snap' intersections to endpoints if possible, and will\n        // handle cases of colinearity.\n        // does each endpoint touch the other segment?\n\n        var touchesOtherLSE = this.touches(other.leftSE.point);\n        var touchesThisLSE = other.touches(this.leftSE.point);\n        var touchesOtherRSE = this.touches(other.rightSE.point);\n        var touchesThisRSE = other.touches(this.rightSE.point); // do left endpoints match?\n\n        if (touchesThisLSE && touchesOtherLSE) {\n          // these two cases are for colinear segments with matching left\n          // endpoints, and one segment being longer than the other\n          if (touchesThisRSE && !touchesOtherRSE) return this.rightSE.point;\n          if (!touchesThisRSE && touchesOtherRSE) return other.rightSE.point; // either the two segments match exactly (two trival intersections)\n          // or just on their left endpoint (one trivial intersection\n\n          return null;\n        } // does this left endpoint matches (other doesn't)\n\n\n        if (touchesThisLSE) {\n          // check for segments that just intersect on opposing endpoints\n          if (touchesOtherRSE && touchPoints(this.leftSE.point, other.rightSE.point)) return null; // t-intersection on left endpoint\n\n          return this.leftSE.point;\n        } // does other left endpoint matches (this doesn't)\n\n\n        if (touchesOtherLSE) {\n          // check for segments that just intersect on opposing endpoints\n          if (touchesThisRSE && touchPoints(this.rightSE.point, other.leftSE.point)) return null; // t-intersection on left endpoint\n\n          return other.leftSE.point;\n        } // trivial intersection on right endpoints\n\n\n        if (touchesThisRSE && touchesOtherRSE) return null; // t-intersections on just one right endpoint\n\n        if (touchesThisRSE) return this.rightSE.point;\n        if (touchesOtherRSE) return other.rightSE.point; // None of our endpoints intersect. Look for a general intersection between\n        // infinite lines laid over the segments\n\n        var pt = intersection(this.leftSE.point, this.vector(), other.leftSE.point, other.vector()); // are the segments parrallel? Note that if they were colinear with overlap,\n        // they would have an endpoint intersection and that case was already handled above\n\n        if (pt === null) return null; // is the intersection found between the lines not on the segments?\n\n        if (!isInBbox(bboxOverlap, pt)) return null; // round the the computed point if needed\n\n        return rounder.round(pt.x, pt.y);\n      }\n      /**\n       * Split the given segment into multiple segments on the given points.\n       *  * Each existing segment will retain its leftSE and a new rightSE will be\n       *    generated for it.\n       *  * A new segment will be generated which will adopt the original segment's\n       *    rightSE, and a new leftSE will be generated for it.\n       *  * If there are more than two points given to split on, new segments\n       *    in the middle will be generated with new leftSE and rightSE's.\n       *  * An array of the newly generated SweepEvents will be returned.\n       *\n       * Warning: input array of points is modified\n       */\n\n    }, {\n      key: \"split\",\n      value: function split(point) {\n        var newEvents = [];\n        var alreadyLinked = point.events !== undefined;\n        var newLeftSE = new SweepEvent(point, true);\n        var newRightSE = new SweepEvent(point, false);\n        var oldRightSE = this.rightSE;\n        this.replaceRightSE(newRightSE);\n        newEvents.push(newRightSE);\n        newEvents.push(newLeftSE);\n        new Segment(newLeftSE, oldRightSE, this.ringsIn.slice()); // in the point we just used to create new sweep events with was already\n        // linked to other events, we need to check if either of the affected\n        // segments should be consumed\n\n        if (alreadyLinked) {\n          newLeftSE.checkForConsuming();\n          newRightSE.checkForConsuming();\n        }\n\n        return newEvents;\n      }\n      /* Consume another segment. We take their ringsIn under our wing\n       * and mark them as consumed. Use for perfectly overlapping segments */\n\n    }, {\n      key: \"consume\",\n      value: function consume(other) {\n        var consumer = this;\n        var consumee = other;\n\n        while (consumer.consumedBy) {\n          consumer = consumer.consumedBy;\n        }\n\n        while (consumee.consumedBy) {\n          consumee = consumee.consumedBy;\n        }\n\n        var cmp$$1 = Segment.compare(consumer, consumee);\n        if (cmp$$1 === 0) return; // already consumed\n        // the winner of the consumption is the earlier segment\n        // according to sweep line ordering\n\n        if (cmp$$1 > 0) {\n          var tmp = consumer;\n          consumer = consumee;\n          consumee = tmp;\n        } // make sure a segment doesn't consume it's prev\n\n\n        if (consumer.prev === consumee) {\n          var _tmp = consumer;\n          consumer = consumee;\n          consumee = _tmp;\n        }\n\n        for (var i = 0, iMax = consumee.ringsIn.length; i < iMax; i++) {\n          consumer.ringsIn.push(consumee.ringsIn[i]);\n        }\n\n        consumee.ringsIn = null;\n        consumee.consumedBy = consumer; // mark sweep events consumed as to maintain ordering in sweep event queue\n\n        consumee.leftSE.consumedBy = consumer.leftSE;\n        consumee.rightSE.consumedBy = consumer.rightSE;\n      }\n      /* The first segment previous segment chain that is in the result */\n\n    }, {\n      key: \"prevInResult\",\n      value: function prevInResult() {\n        var key = 'prevInResult';\n        if (this._cache[key] === undefined) this._cache[key] = this[\"_\".concat(key)]();\n        return this._cache[key];\n      }\n    }, {\n      key: \"_prevInResult\",\n      value: function _prevInResult() {\n        if (!this.prev) return null;\n        if (this.prev.isInResult()) return this.prev;\n        return this.prev.prevInResult();\n      }\n    }, {\n      key: \"ringsBefore\",\n      value: function ringsBefore() {\n        var key = 'ringsBefore';\n        if (this._cache[key] === undefined) this._cache[key] = this[\"_\".concat(key)]();\n        return this._cache[key];\n      }\n    }, {\n      key: \"_ringsBefore\",\n      value: function _ringsBefore() {\n        if (!this.prev) return [];\n        return (this.prev.consumedBy || this.prev).ringsAfter();\n      }\n    }, {\n      key: \"ringsAfter\",\n      value: function ringsAfter() {\n        var key = 'ringsAfter';\n        if (this._cache[key] === undefined) this._cache[key] = this[\"_\".concat(key)]();\n        return this._cache[key];\n      }\n    }, {\n      key: \"_ringsAfter\",\n      value: function _ringsAfter() {\n        var rings = this.ringsBefore().slice(0);\n\n        for (var i = 0, iMax = this.ringsIn.length; i < iMax; i++) {\n          var ring = this.ringsIn[i];\n          var index = rings.indexOf(ring);\n          if (index === -1) rings.push(ring);else rings.splice(index, 1);\n        }\n\n        return rings;\n      }\n    }, {\n      key: \"multiPolysBefore\",\n      value: function multiPolysBefore() {\n        var key = 'multiPolysBefore';\n        if (this._cache[key] === undefined) this._cache[key] = this[\"_\".concat(key)]();\n        return this._cache[key];\n      }\n    }, {\n      key: \"_multiPolysBefore\",\n      value: function _multiPolysBefore() {\n        if (!this.prev) return [];\n        return (this.prev.consumedBy || this.prev).multiPolysAfter();\n      }\n    }, {\n      key: \"multiPolysAfter\",\n      value: function multiPolysAfter() {\n        var key = 'multiPolysAfter';\n        if (this._cache[key] === undefined) this._cache[key] = this[\"_\".concat(key)]();\n        return this._cache[key];\n      }\n    }, {\n      key: \"_multiPolysAfter\",\n      value: function _multiPolysAfter() {\n        // first calcualte our polysAfter\n        var polysAfter = [];\n        var polysExclude = [];\n        var ringsAfter = this.ringsAfter();\n\n        for (var i = 0, iMax = ringsAfter.length; i < iMax; i++) {\n          var ring = ringsAfter[i];\n          var poly = ring.poly;\n          if (polysExclude.indexOf(poly) !== -1) continue;\n          if (ring.isExterior) polysAfter.push(poly);else {\n            if (polysExclude.indexOf(poly) === -1) polysExclude.push(poly);\n            var index = polysAfter.indexOf(ring.poly);\n            if (index !== -1) polysAfter.splice(index, 1);\n          }\n        } // now calculate our multiPolysAfter\n\n\n        var mps = [];\n\n        for (var _i = 0, _iMax = polysAfter.length; _i < _iMax; _i++) {\n          var mp = polysAfter[_i].multiPoly;\n          if (mps.indexOf(mp) === -1) mps.push(mp);\n        }\n\n        return mps;\n      }\n      /* Is this segment part of the final result? */\n\n    }, {\n      key: \"isInResult\",\n      value: function isInResult() {\n        var key = 'isInResult';\n        if (this._cache[key] === undefined) this._cache[key] = this[\"_\".concat(key)]();\n        return this._cache[key];\n      }\n    }, {\n      key: \"_isInResult\",\n      value: function _isInResult() {\n        // if we've been consumed, we're not in the result\n        if (this.consumedBy) return false;\n        var mpsBefore = this.multiPolysBefore();\n        var mpsAfter = this.multiPolysAfter();\n\n        switch (operation.type) {\n          case 'union':\n            {\n              // UNION - included iff:\n              //  * On one side of us there is 0 poly interiors AND\n              //  * On the other side there is 1 or more.\n              var noBefores = mpsBefore.length === 0;\n              var noAfters = mpsAfter.length === 0;\n              return noBefores !== noAfters;\n            }\n\n          case 'intersection':\n            {\n              // INTERSECTION - included iff:\n              //  * on one side of us all multipolys are rep. with poly interiors AND\n              //  * on the other side of us, not all multipolys are repsented\n              //    with poly interiors\n              var least;\n              var most;\n\n              if (mpsBefore.length < mpsAfter.length) {\n                least = mpsBefore.length;\n                most = mpsAfter.length;\n              } else {\n                least = mpsAfter.length;\n                most = mpsBefore.length;\n              }\n\n              return most === operation.numMultiPolys && least < most;\n            }\n\n          case 'xor':\n            {\n              // XOR - included iff:\n              //  * the difference between the number of multipolys represented\n              //    with poly interiors on our two sides is an odd number\n              var diff = Math.abs(mpsBefore.length - mpsAfter.length);\n              return diff % 2 === 1;\n            }\n\n          case 'difference':\n            {\n              // DIFFERENCE included iff:\n              //  * on exactly one side, we have just the subject\n              var isJustSubject = function isJustSubject(mps) {\n                return mps.length === 1 && mps[0].isSubject;\n              };\n\n              return isJustSubject(mpsBefore) !== isJustSubject(mpsAfter);\n            }\n\n          default:\n            throw new Error(\"Unrecognized operation type found \".concat(operation.type));\n        }\n      }\n    }], [{\n      key: \"fromRing\",\n      value: function fromRing(pt1, pt2, ring) {\n        var leftPt, rightPt; // ordering the two points according to sweep line ordering\n\n        var cmpPts = SweepEvent.comparePoints(pt1, pt2);\n\n        if (cmpPts < 0) {\n          leftPt = pt1;\n          rightPt = pt2;\n        } else if (cmpPts > 0) {\n          leftPt = pt2;\n          rightPt = pt1;\n        } else throw new Error(\"Tried to create degenerate segment at [\".concat(pt1.x, \", \").concat(pt1.y, \"]\"));\n\n        var leftSE = new SweepEvent(leftPt, true);\n        var rightSE = new SweepEvent(rightPt, false);\n        return new Segment(leftSE, rightSE, [ring]);\n      }\n    }]);\n\n    return Segment;\n  }();\n\n  var RingIn =\n  /*#__PURE__*/\n  function () {\n    function RingIn(geomRing, poly, isExterior) {\n      _classCallCheck(this, RingIn);\n\n      this.poly = poly;\n      this.isExterior = isExterior;\n      this.segments = [];\n      var prevPoint = geomRing[0];\n\n      for (var i = 1, iMax = geomRing.length; i < iMax; i++) {\n        var point = geomRing[i];\n        this.segments.push(Segment.fromRing(prevPoint, point, this));\n        prevPoint = point;\n      }\n\n      this.segments.push(Segment.fromRing(prevPoint, geomRing[0], this));\n    }\n\n    _createClass(RingIn, [{\n      key: \"getSweepEvents\",\n      value: function getSweepEvents() {\n        var sweepEvents = [];\n\n        for (var i = 0, iMax = this.segments.length; i < iMax; i++) {\n          var segment = this.segments[i];\n          sweepEvents.push(segment.leftSE);\n          sweepEvents.push(segment.rightSE);\n        }\n\n        return sweepEvents;\n      }\n    }]);\n\n    return RingIn;\n  }();\n  var PolyIn =\n  /*#__PURE__*/\n  function () {\n    function PolyIn(geomPoly, multiPoly) {\n      _classCallCheck(this, PolyIn);\n\n      this.exteriorRing = new RingIn(geomPoly[0], this, true);\n      this.interiorRings = [];\n\n      for (var i = 1, iMax = geomPoly.length; i < iMax; i++) {\n        this.interiorRings.push(new RingIn(geomPoly[i], this, false));\n      }\n\n      this.multiPoly = multiPoly;\n    }\n\n    _createClass(PolyIn, [{\n      key: \"getSweepEvents\",\n      value: function getSweepEvents() {\n        var sweepEvents = this.exteriorRing.getSweepEvents();\n\n        for (var i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n          var ringSweepEvents = this.interiorRings[i].getSweepEvents();\n\n          for (var j = 0, jMax = ringSweepEvents.length; j < jMax; j++) {\n            sweepEvents.push(ringSweepEvents[j]);\n          }\n        }\n\n        return sweepEvents;\n      }\n    }]);\n\n    return PolyIn;\n  }();\n  var MultiPolyIn =\n  /*#__PURE__*/\n  function () {\n    function MultiPolyIn(geomMultiPoly) {\n      _classCallCheck(this, MultiPolyIn);\n\n      this.polys = [];\n\n      for (var i = 0, iMax = geomMultiPoly.length; i < iMax; i++) {\n        this.polys.push(new PolyIn(geomMultiPoly[i], this));\n      }\n\n      this.isSubject = false;\n    }\n\n    _createClass(MultiPolyIn, [{\n      key: \"markAsSubject\",\n      value: function markAsSubject() {\n        this.isSubject = true;\n      }\n    }, {\n      key: \"getSweepEvents\",\n      value: function getSweepEvents() {\n        var sweepEvents = [];\n\n        for (var i = 0, iMax = this.polys.length; i < iMax; i++) {\n          var polySweepEvents = this.polys[i].getSweepEvents();\n\n          for (var j = 0, jMax = polySweepEvents.length; j < jMax; j++) {\n            sweepEvents.push(polySweepEvents[j]);\n          }\n        }\n\n        return sweepEvents;\n      }\n    }]);\n\n    return MultiPolyIn;\n  }();\n\n  var RingOut =\n  /*#__PURE__*/\n  function () {\n    _createClass(RingOut, null, [{\n      key: \"factory\",\n\n      /* Given the segments from the sweep line pass, compute & return a series\n       * of closed rings from all the segments marked to be part of the result */\n      value: function factory(allSegments) {\n        var ringsOut = [];\n\n        for (var i = 0, iMax = allSegments.length; i < iMax; i++) {\n          var segment = allSegments[i];\n          if (!segment.isInResult() || segment.ringOut) continue;\n          var prevEvent = null;\n          var event = segment.leftSE;\n          var nextEvent = segment.rightSE;\n          var events = [event];\n          var startingPoint = event.point;\n          var intersectionLEs = [];\n          /* Walk the chain of linked events to form a closed ring */\n\n          while (true) {\n            prevEvent = event;\n            event = nextEvent;\n            events.push(event);\n            /* Is the ring complete? */\n\n            if (event.point === startingPoint) break;\n\n            while (true) {\n              var availableLEs = event.getAvailableLinkedEvents();\n              /* Did we hit a dead end? This shouldn't happen. Indicates some earlier\n               * part of the algorithm malfunctioned... please file a bug report. */\n\n              if (availableLEs.length === 0) {\n                var firstPt = events[0].point;\n                var lastPt = events[events.length - 1].point;\n                throw new Error(\"Unable to complete output ring starting at [\".concat(firstPt.x, \",\") + \" \".concat(firstPt.y, \"]. Last matching segment found ends at\") + \" [\".concat(lastPt.x, \", \").concat(lastPt.y, \"].\"));\n              }\n              /* Only one way to go, so cotinue on the path */\n\n\n              if (availableLEs.length === 1) {\n                nextEvent = availableLEs[0].otherSE;\n                break;\n              }\n              /* We must have an intersection. Check for a completed loop */\n\n\n              var indexLE = null;\n\n              for (var j = 0, jMax = intersectionLEs.length; j < jMax; j++) {\n                if (intersectionLEs[j].point === event.point) {\n                  indexLE = j;\n                  break;\n                }\n              }\n              /* Found a completed loop. Cut that off and make a ring */\n\n\n              if (indexLE !== null) {\n                var intersectionLE = intersectionLEs.splice(indexLE)[0];\n                var ringEvents = events.splice(intersectionLE.index);\n                ringEvents.unshift(ringEvents[0].otherSE);\n                ringsOut.push(new RingOut(ringEvents.reverse()));\n                continue;\n              }\n              /* register the intersection */\n\n\n              intersectionLEs.push({\n                index: events.length,\n                point: event.point\n              });\n              /* Choose the left-most option to continue the walk */\n\n              var comparator = event.getLeftmostComparator(prevEvent);\n              nextEvent = availableLEs.sort(comparator)[0].otherSE;\n              break;\n            }\n          }\n\n          ringsOut.push(new RingOut(events));\n        }\n\n        return ringsOut;\n      }\n    }]);\n\n    function RingOut(events) {\n      _classCallCheck(this, RingOut);\n\n      this.events = events;\n\n      for (var i = 0, iMax = events.length; i < iMax; i++) {\n        events[i].segment.ringOut = this;\n      }\n\n      this.poly = null;\n    }\n\n    _createClass(RingOut, [{\n      key: \"getGeom\",\n      value: function getGeom() {\n        // Remove superfluous points (ie extra points along a straight line),\n        var prevPt = this.events[0].point;\n        var points = [prevPt];\n\n        for (var i = 1, iMax = this.events.length - 1; i < iMax; i++) {\n          var _pt = this.events[i].point;\n          var _nextPt = this.events[i + 1].point;\n          if (compareVectorAngles(_pt, prevPt, _nextPt) === 0) continue;\n          points.push(_pt);\n          prevPt = _pt;\n        } // ring was all (within rounding error of angle calc) colinear points\n\n\n        if (points.length === 1) return null; // check if the starting point is necessary\n\n        var pt = points[0];\n        var nextPt = points[1];\n        if (compareVectorAngles(pt, prevPt, nextPt) === 0) points.shift();\n        points.push(points[0]);\n        var step = this.isExteriorRing() ? 1 : -1;\n        var iStart = this.isExteriorRing() ? 0 : points.length - 1;\n        var iEnd = this.isExteriorRing() ? points.length : -1;\n        var orderedPoints = [];\n\n        for (var _i = iStart; _i != iEnd; _i += step) {\n          orderedPoints.push([points[_i].x, points[_i].y]);\n        }\n\n        return orderedPoints;\n      }\n    }, {\n      key: \"isExteriorRing\",\n      value: function isExteriorRing() {\n        if (this._isExteriorRing === undefined) {\n          var enclosing = this.enclosingRing();\n          this._isExteriorRing = enclosing ? !enclosing.isExteriorRing() : true;\n        }\n\n        return this._isExteriorRing;\n      }\n    }, {\n      key: \"enclosingRing\",\n      value: function enclosingRing() {\n        if (this._enclosingRing === undefined) {\n          this._enclosingRing = this._calcEnclosingRing();\n        }\n\n        return this._enclosingRing;\n      }\n      /* Returns the ring that encloses this one, if any */\n\n    }, {\n      key: \"_calcEnclosingRing\",\n      value: function _calcEnclosingRing() {\n        // start with the ealier sweep line event so that the prevSeg\n        // chain doesn't lead us inside of a loop of ours\n        var leftMostEvt = this.events[0];\n\n        for (var i = 1, iMax = this.events.length; i < iMax; i++) {\n          var evt = this.events[i];\n          if (SweepEvent.compare(leftMostEvt, evt) > 0) leftMostEvt = evt;\n        }\n\n        var prevSeg = leftMostEvt.segment.prevInResult();\n        var prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null;\n\n        while (true) {\n          // no segment found, thus no ring can enclose us\n          if (!prevSeg) return null; // no segments below prev segment found, thus the ring of the prev\n          // segment must loop back around and enclose us\n\n          if (!prevPrevSeg) return prevSeg.ringOut; // if the two segments are of different rings, the ring of the prev\n          // segment must either loop around us or the ring of the prev prev\n          // seg, which would make us and the ring of the prev peers\n\n          if (prevPrevSeg.ringOut !== prevSeg.ringOut) {\n            if (prevPrevSeg.ringOut.enclosingRing() !== prevSeg.ringOut) {\n              return prevSeg.ringOut;\n            } else return prevSeg.ringOut.enclosingRing();\n          } // two segments are from the same ring, so this was a penisula\n          // of that ring. iterate downward, keep searching\n\n\n          prevSeg = prevPrevSeg.prevInResult();\n          prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null;\n        }\n      }\n    }]);\n\n    return RingOut;\n  }();\n  var PolyOut =\n  /*#__PURE__*/\n  function () {\n    function PolyOut(exteriorRing) {\n      _classCallCheck(this, PolyOut);\n\n      this.exteriorRing = exteriorRing;\n      exteriorRing.poly = this;\n      this.interiorRings = [];\n    }\n\n    _createClass(PolyOut, [{\n      key: \"addInterior\",\n      value: function addInterior(ring) {\n        this.interiorRings.push(ring);\n        ring.poly = this;\n      }\n    }, {\n      key: \"getGeom\",\n      value: function getGeom() {\n        var geom = [this.exteriorRing.getGeom()]; // exterior ring was all (within rounding error of angle calc) colinear points\n\n        if (geom[0] === null) return null;\n\n        for (var i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n          var ringGeom = this.interiorRings[i].getGeom(); // interior ring was all (within rounding error of angle calc) colinear points\n\n          if (ringGeom === null) continue;\n          geom.push(ringGeom);\n        }\n\n        return geom;\n      }\n    }]);\n\n    return PolyOut;\n  }();\n  var MultiPolyOut =\n  /*#__PURE__*/\n  function () {\n    function MultiPolyOut(rings) {\n      _classCallCheck(this, MultiPolyOut);\n\n      this.rings = rings;\n      this.polys = this._composePolys(rings);\n    }\n\n    _createClass(MultiPolyOut, [{\n      key: \"getGeom\",\n      value: function getGeom() {\n        var geom = [];\n\n        for (var i = 0, iMax = this.polys.length; i < iMax; i++) {\n          var polyGeom = this.polys[i].getGeom(); // exterior ring was all (within rounding error of angle calc) colinear points\n\n          if (polyGeom === null) continue;\n          geom.push(polyGeom);\n        }\n\n        return geom;\n      }\n    }, {\n      key: \"_composePolys\",\n      value: function _composePolys(rings) {\n        var polys = [];\n\n        for (var i = 0, iMax = rings.length; i < iMax; i++) {\n          var ring = rings[i];\n          if (ring.poly) continue;\n          if (ring.isExteriorRing()) polys.push(new PolyOut(ring));else {\n            var enclosingRing = ring.enclosingRing();\n            if (!enclosingRing.poly) polys.push(new PolyOut(enclosingRing));\n            enclosingRing.poly.addInterior(ring);\n          }\n        }\n\n        return polys;\n      }\n    }]);\n\n    return MultiPolyOut;\n  }();\n\n  /**\n   * NOTE:  We must be careful not to change any segments while\n   *        they are in the SplayTree. AFAIK, there's no way to tell\n   *        the tree to rebalance itself - thus before splitting\n   *        a segment that's in the tree, we remove it from the tree,\n   *        do the split, then re-insert it. (Even though splitting a\n   *        segment *shouldn't* change its correct position in the\n   *        sweep line tree, the reality is because of rounding errors,\n   *        it sometimes does.)\n   */\n\n  var SweepLine =\n  /*#__PURE__*/\n  function () {\n    function SweepLine(queue) {\n      var comparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Segment.compare;\n\n      _classCallCheck(this, SweepLine);\n\n      this.queue = queue;\n      this.tree = new Tree(comparator);\n      this.segments = [];\n    }\n\n    _createClass(SweepLine, [{\n      key: \"process\",\n      value: function process(event) {\n        var segment = event.segment;\n        var newEvents = []; // if we've already been consumed by another segment,\n        // clean up our body parts and get out\n\n        if (event.consumedBy) {\n          if (event.isLeft) this.queue.remove(event.otherSE);else this.tree.remove(segment);\n          return newEvents;\n        }\n\n        var node = event.isLeft ? this.tree.insert(segment) : this.tree.find(segment);\n        if (!node) throw new Error(\"Unable to find segment #\".concat(segment.id, \" \") + \"[\".concat(segment.leftSE.point.x, \", \").concat(segment.leftSE.point.y, \"] -> \") + \"[\".concat(segment.rightSE.point.x, \", \").concat(segment.rightSE.point.y, \"] \") + 'in SweepLine tree. Please submit a bug report.');\n        var prevNode = node;\n        var nextNode = node;\n        var prevSeg = undefined;\n        var nextSeg = undefined; // skip consumed segments still in tree\n\n        while (prevSeg === undefined) {\n          prevNode = this.tree.prev(prevNode);\n          if (prevNode === null) prevSeg = null;else if (prevNode.key.consumedBy === undefined) prevSeg = prevNode.key;\n        } // skip consumed segments still in tree\n\n\n        while (nextSeg === undefined) {\n          nextNode = this.tree.next(nextNode);\n          if (nextNode === null) nextSeg = null;else if (nextNode.key.consumedBy === undefined) nextSeg = nextNode.key;\n        }\n\n        if (event.isLeft) {\n          // Check for intersections against the previous segment in the sweep line\n          var prevMySplitter = null;\n\n          if (prevSeg) {\n            var prevInter = prevSeg.getIntersection(segment);\n\n            if (prevInter !== null) {\n              if (!segment.isAnEndpoint(prevInter)) prevMySplitter = prevInter;\n\n              if (!prevSeg.isAnEndpoint(prevInter)) {\n                var newEventsFromSplit = this._splitSafely(prevSeg, prevInter);\n\n                for (var i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n                  newEvents.push(newEventsFromSplit[i]);\n                }\n              }\n            }\n          } // Check for intersections against the next segment in the sweep line\n\n\n          var nextMySplitter = null;\n\n          if (nextSeg) {\n            var nextInter = nextSeg.getIntersection(segment);\n\n            if (nextInter !== null) {\n              if (!segment.isAnEndpoint(nextInter)) nextMySplitter = nextInter;\n\n              if (!nextSeg.isAnEndpoint(nextInter)) {\n                var _newEventsFromSplit = this._splitSafely(nextSeg, nextInter);\n\n                for (var _i = 0, _iMax = _newEventsFromSplit.length; _i < _iMax; _i++) {\n                  newEvents.push(_newEventsFromSplit[_i]);\n                }\n              }\n            }\n          } // For simplicity, even if we find more than one intersection we only\n          // spilt on the 'earliest' (sweep-line style) of the intersections.\n          // The other intersection will be handled in a future process().\n\n\n          if (prevMySplitter !== null || nextMySplitter !== null) {\n            var mySplitter = null;\n            if (prevMySplitter === null) mySplitter = nextMySplitter;else if (nextMySplitter === null) mySplitter = prevMySplitter;else {\n              var cmpSplitters = SweepEvent.comparePoints(prevMySplitter, nextMySplitter);\n              if (cmpSplitters < 0) mySplitter = prevMySplitter;\n              if (cmpSplitters > 0) mySplitter = nextMySplitter; // the two splitters are the exact same point\n\n              mySplitter = prevMySplitter;\n            } // Rounding errors can cause changes in ordering,\n            // so remove afected segments and right sweep events before splitting\n\n            this.queue.remove(segment.rightSE);\n            newEvents.push(segment.rightSE);\n\n            var _newEventsFromSplit2 = segment.split(mySplitter);\n\n            for (var _i2 = 0, _iMax2 = _newEventsFromSplit2.length; _i2 < _iMax2; _i2++) {\n              newEvents.push(_newEventsFromSplit2[_i2]);\n            }\n          }\n\n          if (newEvents.length > 0) {\n            // We found some intersections, so re-do the current event to\n            // make sure sweep line ordering is totally consistent for later\n            // use with the segment 'prev' pointers\n            this.tree.remove(segment);\n            newEvents.push(event);\n          } else {\n            // done with left event\n            this.segments.push(segment);\n            segment.prev = prevSeg;\n          }\n        } else {\n          // event.isRight\n          // since we're about to be removed from the sweep line, check for\n          // intersections between our previous and next segments\n          if (prevSeg && nextSeg) {\n            var inter = prevSeg.getIntersection(nextSeg);\n\n            if (inter !== null) {\n              if (!prevSeg.isAnEndpoint(inter)) {\n                var _newEventsFromSplit3 = this._splitSafely(prevSeg, inter);\n\n                for (var _i3 = 0, _iMax3 = _newEventsFromSplit3.length; _i3 < _iMax3; _i3++) {\n                  newEvents.push(_newEventsFromSplit3[_i3]);\n                }\n              }\n\n              if (!nextSeg.isAnEndpoint(inter)) {\n                var _newEventsFromSplit4 = this._splitSafely(nextSeg, inter);\n\n                for (var _i4 = 0, _iMax4 = _newEventsFromSplit4.length; _i4 < _iMax4; _i4++) {\n                  newEvents.push(_newEventsFromSplit4[_i4]);\n                }\n              }\n            }\n          }\n\n          this.tree.remove(segment);\n        }\n\n        return newEvents;\n      }\n      /* Safely split a segment that is currently in the datastructures\n       * IE - a segment other than the one that is currently being processed. */\n\n    }, {\n      key: \"_splitSafely\",\n      value: function _splitSafely(seg, pt) {\n        // Rounding errors can cause changes in ordering,\n        // so remove afected segments and right sweep events before splitting\n        // removeNode() doesn't work, so have re-find the seg\n        // https://github.com/w8r/splay-tree/pull/5\n        this.tree.remove(seg);\n        var rightSE = seg.rightSE;\n        this.queue.remove(rightSE);\n        var newEvents = seg.split(pt);\n        newEvents.push(rightSE); // splitting can trigger consumption\n\n        if (seg.consumedBy === undefined) this.tree.insert(seg);\n        return newEvents;\n      }\n    }]);\n\n    return SweepLine;\n  }();\n\n  var Operation =\n  /*#__PURE__*/\n  function () {\n    function Operation() {\n      _classCallCheck(this, Operation);\n    }\n\n    _createClass(Operation, [{\n      key: \"run\",\n      value: function run(type, geom, moreGeoms) {\n        operation.type = type;\n        rounder.reset();\n        /* Make a copy of the input geometry with rounded points as objects */\n\n        var geoms = [pointsAsObjects(geom)];\n\n        for (var i = 0, iMax = moreGeoms.length; i < iMax; i++) {\n          geoms.push(pointsAsObjects(moreGeoms[i]));\n        }\n        /* Clean inputs */\n\n\n        for (var _i = 0, _iMax = geoms.length; _i < _iMax; _i++) {\n          forceMultiPoly(geoms[_i]);\n          cleanMultiPoly(geoms[_i]);\n        }\n        /* Convert inputs to MultiPoly objects, mark subject */\n\n\n        var multipolys = [];\n\n        for (var _i2 = 0, _iMax2 = geoms.length; _i2 < _iMax2; _i2++) {\n          multipolys.push(new MultiPolyIn(geoms[_i2]));\n        }\n\n        multipolys[0].markAsSubject();\n        operation.numMultiPolys = multipolys.length;\n        /* Put segment endpoints in a priority queue */\n\n        var queue = new Tree(SweepEvent.compare);\n\n        for (var _i3 = 0, _iMax3 = multipolys.length; _i3 < _iMax3; _i3++) {\n          var sweepEvents = multipolys[_i3].getSweepEvents();\n\n          for (var j = 0, jMax = sweepEvents.length; j < jMax; j++) {\n            queue.insert(sweepEvents[j]);\n          }\n        }\n        /* Pass the sweep line over those endpoints */\n\n\n        var sweepLine = new SweepLine(queue);\n        var prevQueueSize = queue.size;\n        var node = queue.pop();\n\n        while (node) {\n          var evt = node.key;\n\n          if (queue.size === prevQueueSize) {\n            // prevents an infinite loop, an otherwise common manifestation of bugs\n            throw new Error(\"Unable to pop() SweepEvent [\".concat(evt.point.x, \", \").concat(evt.point.y, \"] from \") + \"segment #\".concat(evt.segment.id, \" from queue. Please file a bug report.\"));\n          }\n\n          var newEvents = sweepLine.process(evt);\n\n          for (var _i4 = 0, _iMax4 = newEvents.length; _i4 < _iMax4; _i4++) {\n            var _evt = newEvents[_i4];\n            if (_evt.consumedBy === undefined) queue.insert(_evt);\n          }\n\n          prevQueueSize = queue.size;\n          node = queue.pop();\n        } // free some memory we don't need anymore\n\n\n        rounder.reset();\n        /* Collect and compile segments we're keeping into a multipolygon */\n\n        var ringsOut = RingOut.factory(sweepLine.segments);\n        var result = new MultiPolyOut(ringsOut);\n        return result.getGeom();\n      }\n    }]);\n\n    return Operation;\n  }(); // singleton available by import\n\n  var operation = new Operation();\n\n  var union = function union(geom) {\n    for (var _len = arguments.length, moreGeoms = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      moreGeoms[_key - 1] = arguments[_key];\n    }\n\n    return operation.run('union', geom, moreGeoms);\n  };\n\n  var intersection$1 = function intersection(geom) {\n    for (var _len2 = arguments.length, moreGeoms = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      moreGeoms[_key2 - 1] = arguments[_key2];\n    }\n\n    return operation.run('intersection', geom, moreGeoms);\n  };\n\n  var xor = function xor(geom) {\n    for (var _len3 = arguments.length, moreGeoms = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      moreGeoms[_key3 - 1] = arguments[_key3];\n    }\n\n    return operation.run('xor', geom, moreGeoms);\n  };\n\n  var difference = function difference(subjectGeom) {\n    for (var _len4 = arguments.length, clippingGeoms = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      clippingGeoms[_key4 - 1] = arguments[_key4];\n    }\n\n    return operation.run('difference', subjectGeom, clippingGeoms);\n  };\n\n  var index = {\n    union: union,\n    intersection: intersection$1,\n    xor: xor,\n    difference: difference\n  };\n\n  return index;\n\n}));\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/polygon-clipping/dist/polygon-clipping.umd.js?");

/***/ }),

/***/ "../../node_modules/private/private.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/private/private.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar originalObject = Object;\nvar originalDefProp = Object.defineProperty;\nvar originalCreate = Object.create;\n\nfunction defProp(obj, name, value) {\n  if (originalDefProp) try {\n    originalDefProp.call(originalObject, obj, name, { value: value });\n  } catch (definePropertyIsBrokenInIE8) {\n    obj[name] = value;\n  } else {\n    obj[name] = value;\n  }\n}\n\n// For functions that will be invoked using .call or .apply, we need to\n// define those methods on the function objects themselves, rather than\n// inheriting them from Function.prototype, so that a malicious or clumsy\n// third party cannot interfere with the functionality of this module by\n// redefining Function.prototype.call or .apply.\nfunction makeSafeToCall(fun) {\n  if (fun) {\n    defProp(fun, \"call\", fun.call);\n    defProp(fun, \"apply\", fun.apply);\n  }\n  return fun;\n}\n\nmakeSafeToCall(originalDefProp);\nmakeSafeToCall(originalCreate);\n\nvar hasOwn = makeSafeToCall(Object.prototype.hasOwnProperty);\nvar numToStr = makeSafeToCall(Number.prototype.toString);\nvar strSlice = makeSafeToCall(String.prototype.slice);\n\nvar cloner = function(){};\nfunction create(prototype) {\n  if (originalCreate) {\n    return originalCreate.call(originalObject, prototype);\n  }\n  cloner.prototype = prototype || null;\n  return new cloner;\n}\n\nvar rand = Math.random;\nvar uniqueKeys = create(null);\n\nfunction makeUniqueKey() {\n  // Collisions are highly unlikely, but this module is in the business of\n  // making guarantees rather than safe bets.\n  do var uniqueKey = internString(strSlice.call(numToStr.call(rand(), 36), 2));\n  while (hasOwn.call(uniqueKeys, uniqueKey));\n  return uniqueKeys[uniqueKey] = uniqueKey;\n}\n\nfunction internString(str) {\n  var obj = {};\n  obj[str] = true;\n  return Object.keys(obj)[0];\n}\n\n// External users might find this function useful, but it is not necessary\n// for the typical use of this module.\nexports.makeUniqueKey = makeUniqueKey;\n\n// Object.getOwnPropertyNames is the only way to enumerate non-enumerable\n// properties, so if we wrap it to ignore our secret keys, there should be\n// no way (except guessing) to access those properties.\nvar originalGetOPNs = Object.getOwnPropertyNames;\nObject.getOwnPropertyNames = function getOwnPropertyNames(object) {\n  for (var names = originalGetOPNs(object),\n           src = 0,\n           dst = 0,\n           len = names.length;\n       src < len;\n       ++src) {\n    if (!hasOwn.call(uniqueKeys, names[src])) {\n      if (src > dst) {\n        names[dst] = names[src];\n      }\n      ++dst;\n    }\n  }\n  names.length = dst;\n  return names;\n};\n\nfunction defaultCreatorFn(object) {\n  return create(null);\n}\n\nfunction makeAccessor(secretCreatorFn) {\n  var brand = makeUniqueKey();\n  var passkey = create(null);\n\n  secretCreatorFn = secretCreatorFn || defaultCreatorFn;\n\n  function register(object) {\n    var secret; // Created lazily.\n\n    function vault(key, forget) {\n      // Only code that has access to the passkey can retrieve (or forget)\n      // the secret object.\n      if (key === passkey) {\n        return forget\n          ? secret = null\n          : secret || (secret = secretCreatorFn(object));\n      }\n    }\n\n    defProp(object, brand, vault);\n  }\n\n  function accessor(object) {\n    if (!hasOwn.call(object, brand))\n      register(object);\n    return object[brand](passkey);\n  }\n\n  accessor.forget = function(object) {\n    if (hasOwn.call(object, brand))\n      object[brand](passkey, true);\n  };\n\n  return accessor;\n}\n\nexports.makeAccessor = makeAccessor;\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/private/private.js?");

/***/ }),

/***/ "../../node_modules/process/browser.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/process/browser.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/process/browser.js?");

/***/ }),

/***/ "../../node_modules/quickhull3d/dist/Face.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/quickhull3d/dist/Face.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DELETED = exports.NON_CONVEX = exports.VISIBLE = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _dot = __webpack_require__(/*! gl-vec3/dot */ \"../../node_modules/gl-vec3/dot.js\");\n\nvar _dot2 = _interopRequireDefault(_dot);\n\nvar _add = __webpack_require__(/*! gl-vec3/add */ \"../../node_modules/gl-vec3/add.js\");\n\nvar _add2 = _interopRequireDefault(_add);\n\nvar _subtract = __webpack_require__(/*! gl-vec3/subtract */ \"../../node_modules/gl-vec3/subtract.js\");\n\nvar _subtract2 = _interopRequireDefault(_subtract);\n\nvar _cross = __webpack_require__(/*! gl-vec3/cross */ \"../../node_modules/gl-vec3/cross.js\");\n\nvar _cross2 = _interopRequireDefault(_cross);\n\nvar _copy = __webpack_require__(/*! gl-vec3/copy */ \"../../node_modules/gl-vec3/copy.js\");\n\nvar _copy2 = _interopRequireDefault(_copy);\n\nvar _length = __webpack_require__(/*! gl-vec3/length */ \"../../node_modules/gl-vec3/length.js\");\n\nvar _length2 = _interopRequireDefault(_length);\n\nvar _scale = __webpack_require__(/*! gl-vec3/scale */ \"../../node_modules/gl-vec3/scale.js\");\n\nvar _scale2 = _interopRequireDefault(_scale);\n\nvar _scaleAndAdd = __webpack_require__(/*! gl-vec3/scaleAndAdd */ \"../../node_modules/gl-vec3/scaleAndAdd.js\");\n\nvar _scaleAndAdd2 = _interopRequireDefault(_scaleAndAdd);\n\nvar _normalize = __webpack_require__(/*! gl-vec3/normalize */ \"../../node_modules/gl-vec3/normalize.js\");\n\nvar _normalize2 = _interopRequireDefault(_normalize);\n\nvar _HalfEdge = __webpack_require__(/*! ./HalfEdge */ \"../../node_modules/quickhull3d/dist/HalfEdge.js\");\n\nvar _HalfEdge2 = _interopRequireDefault(_HalfEdge);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar debug = __webpack_require__(/*! debug */ \"../../node_modules/debug/src/browser.js\")('face');\n\nvar VISIBLE = exports.VISIBLE = 0;\nvar NON_CONVEX = exports.NON_CONVEX = 1;\nvar DELETED = exports.DELETED = 2;\n\nvar Face = function () {\n  function Face() {\n    _classCallCheck(this, Face);\n\n    this.normal = [];\n    this.centroid = [];\n    // signed distance from face to the origin\n    this.offset = 0;\n    // pointer to the a vertex in a double linked list this face can see\n    this.outside = null;\n    this.mark = VISIBLE;\n    this.edge = null;\n    this.nVertices = 0;\n  }\n\n  _createClass(Face, [{\n    key: 'getEdge',\n    value: function getEdge(i) {\n      if (typeof i !== 'number') {\n        throw Error('requires a number');\n      }\n      var it = this.edge;\n      while (i > 0) {\n        it = it.next;\n        i -= 1;\n      }\n      while (i < 0) {\n        it = it.prev;\n        i += 1;\n      }\n      return it;\n    }\n  }, {\n    key: 'computeNormal',\n    value: function computeNormal() {\n      var e0 = this.edge;\n      var e1 = e0.next;\n      var e2 = e1.next;\n      var v2 = (0, _subtract2.default)([], e1.head().point, e0.head().point);\n      var t = [];\n      var v1 = [];\n\n      this.nVertices = 2;\n      this.normal = [0, 0, 0];\n      while (e2 !== e0) {\n        (0, _copy2.default)(v1, v2);\n        (0, _subtract2.default)(v2, e2.head().point, e0.head().point);\n        (0, _add2.default)(this.normal, this.normal, (0, _cross2.default)(t, v1, v2));\n        e2 = e2.next;\n        this.nVertices += 1;\n      }\n      this.area = (0, _length2.default)(this.normal);\n      // normalize the vector, since we've already calculated the area\n      // it's cheaper to scale the vector using this quantity instead of\n      // doing the same operation again\n      this.normal = (0, _scale2.default)(this.normal, this.normal, 1 / this.area);\n    }\n  }, {\n    key: 'computeNormalMinArea',\n    value: function computeNormalMinArea(minArea) {\n      this.computeNormal();\n      if (this.area < minArea) {\n        // compute the normal without the longest edge\n        var maxEdge = void 0;\n        var maxSquaredLength = 0;\n        var edge = this.edge;\n\n        // find the longest edge (in length) in the chain of edges\n        do {\n          var lengthSquared = edge.lengthSquared();\n          if (lengthSquared > maxSquaredLength) {\n            maxEdge = edge;\n            maxSquaredLength = lengthSquared;\n          }\n          edge = edge.next;\n        } while (edge !== this.edge);\n\n        var p1 = maxEdge.tail().point;\n        var p2 = maxEdge.head().point;\n        var maxVector = (0, _subtract2.default)([], p2, p1);\n        var maxLength = Math.sqrt(maxSquaredLength);\n        // maxVector is normalized after this operation\n        (0, _scale2.default)(maxVector, maxVector, 1 / maxLength);\n        // compute the projection of maxVector over this face normal\n        var maxProjection = (0, _dot2.default)(this.normal, maxVector);\n        // subtract the quantity maxEdge adds on the normal\n        (0, _scaleAndAdd2.default)(this.normal, this.normal, maxVector, -maxProjection);\n        // renormalize `this.normal`\n        (0, _normalize2.default)(this.normal, this.normal);\n      }\n    }\n  }, {\n    key: 'computeCentroid',\n    value: function computeCentroid() {\n      this.centroid = [0, 0, 0];\n      var edge = this.edge;\n      do {\n        (0, _add2.default)(this.centroid, this.centroid, edge.head().point);\n        edge = edge.next;\n      } while (edge !== this.edge);\n      (0, _scale2.default)(this.centroid, this.centroid, 1 / this.nVertices);\n    }\n  }, {\n    key: 'computeNormalAndCentroid',\n    value: function computeNormalAndCentroid(minArea) {\n      if (typeof minArea !== 'undefined') {\n        this.computeNormalMinArea(minArea);\n      } else {\n        this.computeNormal();\n      }\n      this.computeCentroid();\n      this.offset = (0, _dot2.default)(this.normal, this.centroid);\n    }\n  }, {\n    key: 'distanceToPlane',\n    value: function distanceToPlane(point) {\n      return (0, _dot2.default)(this.normal, point) - this.offset;\n    }\n\n    /**\n     * @private\n     *\n     * Connects two edges assuming that prev.head().point === next.tail().point\n     *\n     * @param {HalfEdge} prev\n     * @param {HalfEdge} next\n     */\n\n  }, {\n    key: 'connectHalfEdges',\n    value: function connectHalfEdges(prev, next) {\n      var discardedFace = void 0;\n      if (prev.opposite.face === next.opposite.face) {\n        // `prev` is remove a redundant edge\n        var oppositeFace = next.opposite.face;\n        var oppositeEdge = void 0;\n        if (prev === this.edge) {\n          this.edge = next;\n        }\n        if (oppositeFace.nVertices === 3) {\n          // case:\n          // remove the face on the right\n          //\n          //       /|\\\n          //      / | \\ the face on the right\n          //     /  |  \\ --> opposite edge\n          //    / a |   \\\n          //   *----*----*\n          //  /     b  |  \\\n          //           ▾\n          //      redundant edge\n          //\n          // Note: the opposite edge is actually in the face to the right\n          // of the face to be destroyed\n          oppositeEdge = next.opposite.prev.opposite;\n          oppositeFace.mark = DELETED;\n          discardedFace = oppositeFace;\n        } else {\n          // case:\n          //          t\n          //        *----\n          //       /| <- right face's redundant edge\n          //      / | opposite edge\n          //     /  |  ▴   /\n          //    / a |  |  /\n          //   *----*----*\n          //  /     b  |  \\\n          //           ▾\n          //      redundant edge\n          oppositeEdge = next.opposite.next;\n          // make sure that the link `oppositeFace.edge` points correctly even\n          // after the right face redundant edge is removed\n          if (oppositeFace.edge === oppositeEdge.prev) {\n            oppositeFace.edge = oppositeEdge;\n          }\n\n          //       /|   /\n          //      / | t/opposite edge\n          //     /  | / ▴  /\n          //    / a |/  | /\n          //   *----*----*\n          //  /     b     \\\n          oppositeEdge.prev = oppositeEdge.prev.prev;\n          oppositeEdge.prev.next = oppositeEdge;\n        }\n        //       /|\n        //      / |\n        //     /  |\n        //    / a |\n        //   *----*----*\n        //  /     b  ▴  \\\n        //           |\n        //     redundant edge\n        next.prev = prev.prev;\n        next.prev.next = next;\n\n        //       / \\  \\\n        //      /   \\->\\\n        //     /     \\<-\\ opposite edge\n        //    / a     \\  \\\n        //   *----*----*\n        //  /     b  ^  \\\n        next.setOpposite(oppositeEdge);\n\n        oppositeFace.computeNormalAndCentroid();\n      } else {\n        // trivial case\n        //        *\n        //       /|\\\n        //      / | \\\n        //     /  |--> next\n        //    / a |   \\\n        //   *----*----*\n        //    \\ b |   /\n        //     \\  |--> prev\n        //      \\ | /\n        //       \\|/\n        //        *\n        prev.next = next;\n        next.prev = prev;\n      }\n      return discardedFace;\n    }\n  }, {\n    key: 'mergeAdjacentFaces',\n    value: function mergeAdjacentFaces(adjacentEdge, discardedFaces) {\n      var oppositeEdge = adjacentEdge.opposite;\n      var oppositeFace = oppositeEdge.face;\n\n      discardedFaces.push(oppositeFace);\n      oppositeFace.mark = DELETED;\n\n      // find the chain of edges whose opposite face is `oppositeFace`\n      //\n      //                ===>\n      //      \\         face         /\n      //       * ---- * ---- * ---- *\n      //      /     opposite face    \\\n      //                <===\n      //\n      var adjacentEdgePrev = adjacentEdge.prev;\n      var adjacentEdgeNext = adjacentEdge.next;\n      var oppositeEdgePrev = oppositeEdge.prev;\n      var oppositeEdgeNext = oppositeEdge.next;\n\n      // left edge\n      while (adjacentEdgePrev.opposite.face === oppositeFace) {\n        adjacentEdgePrev = adjacentEdgePrev.prev;\n        oppositeEdgeNext = oppositeEdgeNext.next;\n      }\n      // right edge\n      while (adjacentEdgeNext.opposite.face === oppositeFace) {\n        adjacentEdgeNext = adjacentEdgeNext.next;\n        oppositeEdgePrev = oppositeEdgePrev.prev;\n      }\n      // adjacentEdgePrev  \\         face         / adjacentEdgeNext\n      //                    * ---- * ---- * ---- *\n      // oppositeEdgeNext  /     opposite face    \\ oppositeEdgePrev\n\n      // fix the face reference of all the opposite edges that are not part of\n      // the edges whose opposite face is not `face` i.e. all the edges that\n      // `face` and `oppositeFace` do not have in common\n      var edge = void 0;\n      for (edge = oppositeEdgeNext; edge !== oppositeEdgePrev.next; edge = edge.next) {\n        edge.face = this;\n      }\n\n      // make sure that `face.edge` is not one of the edges to be destroyed\n      // Note: it's important for it to be a `next` edge since `prev` edges\n      // might be destroyed on `connectHalfEdges`\n      this.edge = adjacentEdgeNext;\n\n      // connect the extremes\n      // Note: it might be possible that after connecting the edges a triangular\n      // face might be redundant\n      var discardedFace = void 0;\n      discardedFace = this.connectHalfEdges(oppositeEdgePrev, adjacentEdgeNext);\n      if (discardedFace) {\n        discardedFaces.push(discardedFace);\n      }\n      discardedFace = this.connectHalfEdges(adjacentEdgePrev, oppositeEdgeNext);\n      if (discardedFace) {\n        discardedFaces.push(discardedFace);\n      }\n\n      this.computeNormalAndCentroid();\n      // TODO: additional consistency checks\n      return discardedFaces;\n    }\n  }, {\n    key: 'collectIndices',\n    value: function collectIndices() {\n      var indices = [];\n      var edge = this.edge;\n      do {\n        indices.push(edge.head().index);\n        edge = edge.next;\n      } while (edge !== this.edge);\n      return indices;\n    }\n  }], [{\n    key: 'createTriangle',\n    value: function createTriangle(v0, v1, v2) {\n      var minArea = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n      var face = new Face();\n      var e0 = new _HalfEdge2.default(v0, face);\n      var e1 = new _HalfEdge2.default(v1, face);\n      var e2 = new _HalfEdge2.default(v2, face);\n\n      // join edges\n      e0.next = e2.prev = e1;\n      e1.next = e0.prev = e2;\n      e2.next = e1.prev = e0;\n\n      // main half edge reference\n      face.edge = e0;\n      face.computeNormalAndCentroid(minArea);\n      if (debug.enabled) {\n        debug('face created %j', face.collectIndices());\n      }\n      return face;\n    }\n  }]);\n\n  return Face;\n}();\n\nexports.default = Face;\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/quickhull3d/dist/Face.js?");

/***/ }),

/***/ "../../node_modules/quickhull3d/dist/HalfEdge.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/quickhull3d/dist/HalfEdge.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _distance = __webpack_require__(/*! gl-vec3/distance */ \"../../node_modules/gl-vec3/distance.js\");\n\nvar _distance2 = _interopRequireDefault(_distance);\n\nvar _squaredDistance = __webpack_require__(/*! gl-vec3/squaredDistance */ \"../../node_modules/gl-vec3/squaredDistance.js\");\n\nvar _squaredDistance2 = _interopRequireDefault(_squaredDistance);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar debug = __webpack_require__(/*! debug */ \"../../node_modules/debug/src/browser.js\")('halfedge');\n\nvar HalfEdge = function () {\n  function HalfEdge(vertex, face) {\n    _classCallCheck(this, HalfEdge);\n\n    this.vertex = vertex;\n    this.face = face;\n    this.next = null;\n    this.prev = null;\n    this.opposite = null;\n  }\n\n  _createClass(HalfEdge, [{\n    key: 'head',\n    value: function head() {\n      return this.vertex;\n    }\n  }, {\n    key: 'tail',\n    value: function tail() {\n      return this.prev ? this.prev.vertex : null;\n    }\n  }, {\n    key: 'length',\n    value: function length() {\n      if (this.tail()) {\n        return (0, _distance2.default)(this.tail().point, this.head().point);\n      }\n      return -1;\n    }\n  }, {\n    key: 'lengthSquared',\n    value: function lengthSquared() {\n      if (this.tail()) {\n        return (0, _squaredDistance2.default)(this.tail().point, this.head().point);\n      }\n      return -1;\n    }\n  }, {\n    key: 'setOpposite',\n    value: function setOpposite(edge) {\n      var me = this;\n      if (debug.enabled) {\n        debug('opposite ' + me.tail().index + ' <--> ' + me.head().index + ' between ' + me.face.collectIndices() + ', ' + edge.face.collectIndices());\n      }\n      this.opposite = edge;\n      edge.opposite = this;\n    }\n  }]);\n\n  return HalfEdge;\n}();\n\nexports.default = HalfEdge;\nmodule.exports = exports['default'];\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/quickhull3d/dist/HalfEdge.js?");

/***/ }),

/***/ "../../node_modules/quickhull3d/dist/QuickHull.js":
/*!***************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/quickhull3d/dist/QuickHull.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _pointLineDistance = __webpack_require__(/*! point-line-distance */ \"../../node_modules/point-line-distance/index.js\");\n\nvar _pointLineDistance2 = _interopRequireDefault(_pointLineDistance);\n\nvar _getPlaneNormal = __webpack_require__(/*! get-plane-normal */ \"../../node_modules/get-plane-normal/index.js\");\n\nvar _getPlaneNormal2 = _interopRequireDefault(_getPlaneNormal);\n\nvar _dot = __webpack_require__(/*! gl-vec3/dot */ \"../../node_modules/gl-vec3/dot.js\");\n\nvar _dot2 = _interopRequireDefault(_dot);\n\nvar _VertexList = __webpack_require__(/*! ./VertexList */ \"../../node_modules/quickhull3d/dist/VertexList.js\");\n\nvar _VertexList2 = _interopRequireDefault(_VertexList);\n\nvar _Vertex = __webpack_require__(/*! ./Vertex */ \"../../node_modules/quickhull3d/dist/Vertex.js\");\n\nvar _Vertex2 = _interopRequireDefault(_Vertex);\n\nvar _Face = __webpack_require__(/*! ./Face */ \"../../node_modules/quickhull3d/dist/Face.js\");\n\nvar _Face2 = _interopRequireDefault(_Face);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar debug = __webpack_require__(/*! debug */ \"../../node_modules/debug/src/browser.js\")('quickhull');\n\n// merge types\n// non convex with respect to the large face\nvar MERGE_NON_CONVEX_WRT_LARGER_FACE = 1;\nvar MERGE_NON_CONVEX = 2;\n\nvar QuickHull = function () {\n  function QuickHull(points) {\n    _classCallCheck(this, QuickHull);\n\n    if (!Array.isArray(points)) {\n      throw TypeError('input is not a valid array');\n    }\n    if (points.length < 4) {\n      throw Error('cannot build a simplex out of <4 points');\n    }\n\n    this.tolerance = -1;\n\n    // buffers\n    this.nFaces = 0;\n    this.nPoints = points.length;\n\n    this.faces = [];\n    this.newFaces = [];\n    // helpers\n    //\n    // let `a`, `b` be `Face` instances\n    // let `v` be points wrapped as instance of `Vertex`\n    //\n    //     [v, v, ..., v, v, v, ...]\n    //      ^             ^\n    //      |             |\n    //  a.outside     b.outside\n    //\n    this.claimed = new _VertexList2.default();\n    this.unclaimed = new _VertexList2.default();\n\n    // vertices of the hull(internal representation of points)\n    this.vertices = [];\n    for (var i = 0; i < points.length; i += 1) {\n      this.vertices.push(new _Vertex2.default(points[i], i));\n    }\n    this.discardedFaces = [];\n    this.vertexPointIndices = [];\n  }\n\n  _createClass(QuickHull, [{\n    key: 'addVertexToFace',\n    value: function addVertexToFace(vertex, face) {\n      vertex.face = face;\n      if (!face.outside) {\n        this.claimed.add(vertex);\n      } else {\n        this.claimed.insertBefore(face.outside, vertex);\n      }\n      face.outside = vertex;\n    }\n\n    /**\n     * Removes `vertex` for the `claimed` list of vertices, it also makes sure\n     * that the link from `face` to the first vertex it sees in `claimed` is\n     * linked correctly after the removal\n     *\n     * @param {Vertex} vertex\n     * @param {Face} face\n     */\n\n  }, {\n    key: 'removeVertexFromFace',\n    value: function removeVertexFromFace(vertex, face) {\n      if (vertex === face.outside) {\n        // fix face.outside link\n        if (vertex.next && vertex.next.face === face) {\n          // face has at least 2 outside vertices, move the `outside` reference\n          face.outside = vertex.next;\n        } else {\n          // vertex was the only outside vertex that face had\n          face.outside = null;\n        }\n      }\n      this.claimed.remove(vertex);\n    }\n\n    /**\n     * Removes all the visible vertices that `face` is able to see which are\n     * stored in the `claimed` vertext list\n     *\n     * @param {Face} face\n     * @return {Vertex|undefined} If face had visible vertices returns\n     * `face.outside`, otherwise undefined\n     */\n\n  }, {\n    key: 'removeAllVerticesFromFace',\n    value: function removeAllVerticesFromFace(face) {\n      if (face.outside) {\n        // pointer to the last vertex of this face\n        // [..., outside, ..., end, outside, ...]\n        //          |           |      |\n        //          a           a      b\n        var end = face.outside;\n        while (end.next && end.next.face === face) {\n          end = end.next;\n        }\n        this.claimed.removeChain(face.outside, end);\n        //                            b\n        //                       [ outside, ...]\n        //                            |  removes this link\n        //     [ outside, ..., end ] -┘\n        //          |           |\n        //          a           a\n        end.next = null;\n        return face.outside;\n      }\n    }\n\n    /**\n     * Removes all the visible vertices that `face` is able to see, additionally\n     * checking the following:\n     *\n     * If `absorbingFace` doesn't exist then all the removed vertices will be\n     * added to the `unclaimed` vertex list\n     *\n     * If `absorbingFace` exists then this method will assign all the vertices of\n     * `face` that can see `absorbingFace`, if a vertex cannot see `absorbingFace`\n     * it's added to the `unclaimed` vertex list\n     *\n     * @param {Face} face\n     * @param {Face} [absorbingFace]\n     */\n\n  }, {\n    key: 'deleteFaceVertices',\n    value: function deleteFaceVertices(face, absorbingFace) {\n      var faceVertices = this.removeAllVerticesFromFace(face);\n      if (faceVertices) {\n        if (!absorbingFace) {\n          // mark the vertices to be reassigned to some other face\n          this.unclaimed.addAll(faceVertices);\n        } else {\n          // if there's an absorbing face try to assign as many vertices\n          // as possible to it\n\n          // the reference `vertex.next` might be destroyed on\n          // `this.addVertexToFace` (see VertexList#add), nextVertex is a\n          // reference to it\n          var nextVertex = void 0;\n          for (var vertex = faceVertices; vertex; vertex = nextVertex) {\n            nextVertex = vertex.next;\n            var distance = absorbingFace.distanceToPlane(vertex.point);\n\n            // check if `vertex` is able to see `absorbingFace`\n            if (distance > this.tolerance) {\n              this.addVertexToFace(vertex, absorbingFace);\n            } else {\n              this.unclaimed.add(vertex);\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * Reassigns as many vertices as possible from the unclaimed list to the new\n     * faces\n     *\n     * @param {Faces[]} newFaces\n     */\n\n  }, {\n    key: 'resolveUnclaimedPoints',\n    value: function resolveUnclaimedPoints(newFaces) {\n      // cache next vertex so that if `vertex.next` is destroyed it's still\n      // recoverable\n      var vertexNext = this.unclaimed.first();\n      for (var vertex = vertexNext; vertex; vertex = vertexNext) {\n        vertexNext = vertex.next;\n        var maxDistance = this.tolerance;\n        var maxFace = void 0;\n        for (var i = 0; i < newFaces.length; i += 1) {\n          var face = newFaces[i];\n          if (face.mark === _Face.VISIBLE) {\n            var dist = face.distanceToPlane(vertex.point);\n            if (dist > maxDistance) {\n              maxDistance = dist;\n              maxFace = face;\n            }\n            if (maxDistance > 1000 * this.tolerance) {\n              break;\n            }\n          }\n        }\n\n        if (maxFace) {\n          this.addVertexToFace(vertex, maxFace);\n        }\n      }\n    }\n\n    /**\n     * Computes the extremes of a tetrahedron which will be the initial hull\n     *\n     * @return {number[]} The min/max vertices in the x,y,z directions\n     */\n\n  }, {\n    key: 'computeExtremes',\n    value: function computeExtremes() {\n      var me = this;\n      var min = [];\n      var max = [];\n\n      // min vertex on the x,y,z directions\n      var minVertices = [];\n      // max vertex on the x,y,z directions\n      var maxVertices = [];\n\n      var i = void 0,\n          j = void 0;\n\n      // initially assume that the first vertex is the min/max\n      for (i = 0; i < 3; i += 1) {\n        minVertices[i] = maxVertices[i] = this.vertices[0];\n      }\n      // copy the coordinates of the first vertex to min/max\n      for (i = 0; i < 3; i += 1) {\n        min[i] = max[i] = this.vertices[0].point[i];\n      }\n\n      // compute the min/max vertex on all 6 directions\n      for (i = 1; i < this.vertices.length; i += 1) {\n        var vertex = this.vertices[i];\n        var point = vertex.point;\n        // update the min coordinates\n        for (j = 0; j < 3; j += 1) {\n          if (point[j] < min[j]) {\n            min[j] = point[j];\n            minVertices[j] = vertex;\n          }\n        }\n        // update the max coordinates\n        for (j = 0; j < 3; j += 1) {\n          if (point[j] > max[j]) {\n            max[j] = point[j];\n            maxVertices[j] = vertex;\n          }\n        }\n      }\n\n      // compute epsilon\n      this.tolerance = 3 * Number.EPSILON * (Math.max(Math.abs(min[0]), Math.abs(max[0])) + Math.max(Math.abs(min[1]), Math.abs(max[1])) + Math.max(Math.abs(min[2]), Math.abs(max[2])));\n      if (debug.enabled) {\n        debug('tolerance %d', me.tolerance);\n      }\n      return [minVertices, maxVertices];\n    }\n\n    /**\n     * Compues the initial tetrahedron assigning to its faces all the points that\n     * are candidates to form part of the hull\n     */\n\n  }, {\n    key: 'createInitialSimplex',\n    value: function createInitialSimplex() {\n      var vertices = this.vertices;\n\n      var _computeExtremes = this.computeExtremes(),\n          _computeExtremes2 = _slicedToArray(_computeExtremes, 2),\n          min = _computeExtremes2[0],\n          max = _computeExtremes2[1];\n\n      var v0 = void 0,\n          v1 = void 0,\n          v2 = void 0,\n          v3 = void 0;\n      var i = void 0,\n          j = void 0;\n\n      // Find the two vertices with the greatest 1d separation\n      // (max.x - min.x)\n      // (max.y - min.y)\n      // (max.z - min.z)\n      var maxDistance = 0;\n      var indexMax = 0;\n      for (i = 0; i < 3; i += 1) {\n        var distance = max[i].point[i] - min[i].point[i];\n        if (distance > maxDistance) {\n          maxDistance = distance;\n          indexMax = i;\n        }\n      }\n      v0 = min[indexMax];\n      v1 = max[indexMax];\n\n      // the next vertex is the one farthest to the line formed by `v0` and `v1`\n      maxDistance = 0;\n      for (i = 0; i < this.vertices.length; i += 1) {\n        var vertex = this.vertices[i];\n        if (vertex !== v0 && vertex !== v1) {\n          var _distance = (0, _pointLineDistance2.default)(vertex.point, v0.point, v1.point);\n          if (_distance > maxDistance) {\n            maxDistance = _distance;\n            v2 = vertex;\n          }\n        }\n      }\n\n      // the next vertes is the one farthest to the plane `v0`, `v1`, `v2`\n      // normalize((v2 - v1) x (v0 - v1))\n      var normal = (0, _getPlaneNormal2.default)([], v0.point, v1.point, v2.point);\n      // distance from the origin to the plane\n      var distPO = (0, _dot2.default)(v0.point, normal);\n      maxDistance = -1;\n      for (i = 0; i < this.vertices.length; i += 1) {\n        var _vertex = this.vertices[i];\n        if (_vertex !== v0 && _vertex !== v1 && _vertex !== v2) {\n          var _distance2 = Math.abs((0, _dot2.default)(normal, _vertex.point) - distPO);\n          if (_distance2 > maxDistance) {\n            maxDistance = _distance2;\n            v3 = _vertex;\n          }\n        }\n      }\n\n      // initial simplex\n      // Taken from http://everything2.com/title/How+to+paint+a+tetrahedron\n      //\n      //                              v2\n      //                             ,|,\n      //                           ,7``\\'VA,\n      //                         ,7`   |, `'VA,\n      //                       ,7`     `\\    `'VA,\n      //                     ,7`        |,      `'VA,\n      //                   ,7`          `\\         `'VA,\n      //                 ,7`             |,           `'VA,\n      //               ,7`               `\\       ,..ooOOTK` v3\n      //             ,7`                  |,.ooOOT''`    AV\n      //           ,7`            ,..ooOOT`\\`           /7\n      //         ,7`      ,..ooOOT''`      |,          AV\n      //        ,T,..ooOOT''`              `\\         /7\n      //     v0 `'TTs.,                     |,       AV\n      //            `'TTs.,                 `\\      /7\n      //                 `'TTs.,             |,    AV\n      //                      `'TTs.,        `\\   /7\n      //                           `'TTs.,    |, AV\n      //                                `'TTs.,\\/7\n      //                                     `'T`\n      //                                       v1\n      //\n      var faces = [];\n      if ((0, _dot2.default)(v3.point, normal) - distPO < 0) {\n        // the face is not able to see the point so `planeNormal`\n        // is pointing outside the tetrahedron\n        faces.push(_Face2.default.createTriangle(v0, v1, v2), _Face2.default.createTriangle(v3, v1, v0), _Face2.default.createTriangle(v3, v2, v1), _Face2.default.createTriangle(v3, v0, v2));\n\n        // set the opposite edge\n        for (i = 0; i < 3; i += 1) {\n          var _j = (i + 1) % 3;\n          // join face[i] i > 0, with the first face\n          faces[i + 1].getEdge(2).setOpposite(faces[0].getEdge(_j));\n          // join face[i] with face[i + 1], 1 <= i <= 3\n          faces[i + 1].getEdge(1).setOpposite(faces[_j + 1].getEdge(0));\n        }\n      } else {\n        // the face is able to see the point so `planeNormal`\n        // is pointing inside the tetrahedron\n        faces.push(_Face2.default.createTriangle(v0, v2, v1), _Face2.default.createTriangle(v3, v0, v1), _Face2.default.createTriangle(v3, v1, v2), _Face2.default.createTriangle(v3, v2, v0));\n\n        // set the opposite edge\n        for (i = 0; i < 3; i += 1) {\n          var _j2 = (i + 1) % 3;\n          // join face[i] i > 0, with the first face\n          faces[i + 1].getEdge(2).setOpposite(faces[0].getEdge((3 - i) % 3));\n          // join face[i] with face[i + 1]\n          faces[i + 1].getEdge(0).setOpposite(faces[_j2 + 1].getEdge(1));\n        }\n      }\n\n      // the initial hull is the tetrahedron\n      for (i = 0; i < 4; i += 1) {\n        this.faces.push(faces[i]);\n      }\n\n      // initial assignment of vertices to the faces of the tetrahedron\n      for (i = 0; i < vertices.length; i += 1) {\n        var _vertex2 = vertices[i];\n        if (_vertex2 !== v0 && _vertex2 !== v1 && _vertex2 !== v2 && _vertex2 !== v3) {\n          maxDistance = this.tolerance;\n          var maxFace = void 0;\n          for (j = 0; j < 4; j += 1) {\n            var _distance3 = faces[j].distanceToPlane(_vertex2.point);\n            if (_distance3 > maxDistance) {\n              maxDistance = _distance3;\n              maxFace = faces[j];\n            }\n          }\n\n          if (maxFace) {\n            this.addVertexToFace(_vertex2, maxFace);\n          }\n        }\n      }\n    }\n  }, {\n    key: 'reindexFaceAndVertices',\n    value: function reindexFaceAndVertices() {\n      // remove inactive faces\n      var activeFaces = [];\n      for (var i = 0; i < this.faces.length; i += 1) {\n        var face = this.faces[i];\n        if (face.mark === _Face.VISIBLE) {\n          activeFaces.push(face);\n        }\n      }\n      this.faces = activeFaces;\n    }\n  }, {\n    key: 'collectFaces',\n    value: function collectFaces(skipTriangulation) {\n      var faceIndices = [];\n      for (var i = 0; i < this.faces.length; i += 1) {\n        if (this.faces[i].mark !== _Face.VISIBLE) {\n          throw Error('attempt to include a destroyed face in the hull');\n        }\n        var indices = this.faces[i].collectIndices();\n        if (skipTriangulation) {\n          faceIndices.push(indices);\n        } else {\n          for (var j = 0; j < indices.length - 2; j += 1) {\n            faceIndices.push([indices[0], indices[j + 1], indices[j + 2]]);\n          }\n        }\n      }\n      return faceIndices;\n    }\n\n    /**\n     * Finds the next vertex to make faces with the current hull\n     *\n     * - let `face` be the first face existing in the `claimed` vertex list\n     *  - if `face` doesn't exist then return since there're no vertices left\n     *  - otherwise for each `vertex` that face sees find the one furthest away\n     *  from `face`\n     *\n     * @return {Vertex|undefined} Returns undefined when there're no more\n     * visible vertices\n     */\n\n  }, {\n    key: 'nextVertexToAdd',\n    value: function nextVertexToAdd() {\n      if (!this.claimed.isEmpty()) {\n        var eyeVertex = void 0,\n            vertex = void 0;\n        var maxDistance = 0;\n        var eyeFace = this.claimed.first().face;\n        for (vertex = eyeFace.outside; vertex && vertex.face === eyeFace; vertex = vertex.next) {\n          var distance = eyeFace.distanceToPlane(vertex.point);\n          if (distance > maxDistance) {\n            maxDistance = distance;\n            eyeVertex = vertex;\n          }\n        }\n        return eyeVertex;\n      }\n    }\n\n    /**\n     * Computes a chain of half edges in ccw order called the `horizon`, for an\n     * edge to be part of the horizon it must join a face that can see\n     * `eyePoint` and a face that cannot see `eyePoint`\n     *\n     * @param {number[]} eyePoint - The coordinates of a point\n     * @param {HalfEdge} crossEdge - The edge used to jump to the current `face`\n     * @param {Face} face - The current face being tested\n     * @param {HalfEdge[]} horizon - The edges that form part of the horizon in\n     * ccw order\n     */\n\n  }, {\n    key: 'computeHorizon',\n    value: function computeHorizon(eyePoint, crossEdge, face, horizon) {\n      // moves face's vertices to the `unclaimed` vertex list\n      this.deleteFaceVertices(face);\n\n      face.mark = _Face.DELETED;\n\n      var edge = void 0;\n      if (!crossEdge) {\n        edge = crossEdge = face.getEdge(0);\n      } else {\n        // start from the next edge since `crossEdge` was already analyzed\n        // (actually `crossEdge.opposite` was the face who called this method\n        // recursively)\n        edge = crossEdge.next;\n      }\n\n      // All the faces that are able to see `eyeVertex` are defined as follows\n      //\n      //       v    /\n      //           / <== visible face\n      //          /\n      //         |\n      //         | <== not visible face\n      //\n      //  dot(v, visible face normal) - visible face offset > this.tolerance\n      //\n      do {\n        var oppositeEdge = edge.opposite;\n        var oppositeFace = oppositeEdge.face;\n        if (oppositeFace.mark === _Face.VISIBLE) {\n          if (oppositeFace.distanceToPlane(eyePoint) > this.tolerance) {\n            this.computeHorizon(eyePoint, oppositeEdge, oppositeFace, horizon);\n          } else {\n            horizon.push(edge);\n          }\n        }\n        edge = edge.next;\n      } while (edge !== crossEdge);\n    }\n\n    /**\n     * Creates a face with the points `eyeVertex.point`, `horizonEdge.tail` and\n     * `horizonEdge.tail` in ccw order\n     *\n     * @param {Vertex} eyeVertex\n     * @param {HalfEdge} horizonEdge\n     * @return {HalfEdge} The half edge whose vertex is the eyeVertex\n     */\n\n  }, {\n    key: 'addAdjoiningFace',\n    value: function addAdjoiningFace(eyeVertex, horizonEdge) {\n      // all the half edges are created in ccw order thus the face is always\n      // pointing outside the hull\n      // edges:\n      //\n      //                  eyeVertex.point\n      //                       / \\\n      //                      /   \\\n      //                  1  /     \\  0\n      //                    /       \\\n      //                   /         \\\n      //                  /           \\\n      //          horizon.tail --- horizon.head\n      //                        2\n      //\n      var face = _Face2.default.createTriangle(eyeVertex, horizonEdge.tail(), horizonEdge.head());\n      this.faces.push(face);\n      // join face.getEdge(-1) with the horizon's opposite edge\n      // face.getEdge(-1) = face.getEdge(2)\n      face.getEdge(-1).setOpposite(horizonEdge.opposite);\n      return face.getEdge(0);\n    }\n\n    /**\n     * Adds horizon.length faces to the hull, each face will be 'linked' with the\n     * horizon opposite face and the face on the left/right\n     *\n     * @param {Vertex} eyeVertex\n     * @param {HalfEdge[]} horizon - A chain of half edges in ccw order\n     */\n\n  }, {\n    key: 'addNewFaces',\n    value: function addNewFaces(eyeVertex, horizon) {\n      this.newFaces = [];\n      var firstSideEdge = void 0,\n          previousSideEdge = void 0;\n      for (var i = 0; i < horizon.length; i += 1) {\n        var horizonEdge = horizon[i];\n        // returns the right side edge\n        var sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge);\n        if (!firstSideEdge) {\n          firstSideEdge = sideEdge;\n        } else {\n          // joins face.getEdge(1) with previousFace.getEdge(0)\n          sideEdge.next.setOpposite(previousSideEdge);\n        }\n        this.newFaces.push(sideEdge.face);\n        previousSideEdge = sideEdge;\n      }\n      firstSideEdge.next.setOpposite(previousSideEdge);\n    }\n\n    /**\n     * Computes the distance from `edge` opposite face's centroid to\n     * `edge.face`\n     *\n     * @param {HalfEdge} edge\n     * @return {number}\n     * - A positive number when the centroid of the opposite face is above the\n     *   face i.e. when the faces are concave\n     * - A negative number when the centroid of the opposite face is below the\n     *   face i.e. when the faces are convex\n     */\n\n  }, {\n    key: 'oppositeFaceDistance',\n    value: function oppositeFaceDistance(edge) {\n      return edge.face.distanceToPlane(edge.opposite.face.centroid);\n    }\n\n    /**\n     * Merges a face with none/any/all its neighbors according to the strategy\n     * used\n     *\n     * if `mergeType` is MERGE_NON_CONVEX_WRT_LARGER_FACE then the merge will be\n     * decided based on the face with the larger area, the centroid of the face\n     * with the smaller area will be checked against the one with the larger area\n     * to see if it's in the merge range [tolerance, -tolerance] i.e.\n     *\n     *    dot(centroid smaller face, larger face normal) - larger face offset > -tolerance\n     *\n     * Note that the first check (with +tolerance) was done on `computeHorizon`\n     *\n     * If the above is not true then the check is done with respect to the smaller\n     * face i.e.\n     *\n     *    dot(centroid larger face, smaller face normal) - smaller face offset > -tolerance\n     *\n     * If true then it means that two faces are non convex (concave), even if the\n     * dot(...) - offset value is > 0 (that's the point of doing the merge in the\n     * first place)\n     *\n     * If two faces are concave then the check must also be done on the other face\n     * but this is done in another merge pass, for this to happen the face is\n     * marked in a temporal NON_CONVEX state\n     *\n     * if `mergeType` is MERGE_NON_CONVEX then two faces will be merged only if\n     * they pass the following conditions\n     *\n     *    dot(centroid smaller face, larger face normal) - larger face offset > -tolerance\n     *    dot(centroid larger face, smaller face normal) - smaller face offset > -tolerance\n     *\n     * @param {Face} face\n     * @param {number} mergeType - Either MERGE_NON_CONVEX_WRT_LARGER_FACE or\n     * MERGE_NON_CONVEX\n     */\n\n  }, {\n    key: 'doAdjacentMerge',\n    value: function doAdjacentMerge(face, mergeType) {\n      var edge = face.edge;\n      var convex = true;\n      var it = 0;\n      do {\n        if (it >= face.nVertices) {\n          throw Error('merge recursion limit exceeded');\n        }\n        var oppositeFace = edge.opposite.face;\n        var merge = false;\n\n        // Important notes about the algorithm to merge faces\n        //\n        // - Given a vertex `eyeVertex` that will be added to the hull\n        //   all the faces that cannot see `eyeVertex` are defined as follows\n        //\n        //      dot(v, not visible face normal) - not visible offset < tolerance\n        //\n        // - Two faces can be merged when the centroid of one of these faces\n        // projected to the normal of the other face minus the other face offset\n        // is in the range [tolerance, -tolerance]\n        // - Since `face` (given in the input for this method) has passed the\n        // check above we only have to check the lower bound e.g.\n        //\n        //      dot(v, not visible face normal) - not visible offset > -tolerance\n        //\n        if (mergeType === MERGE_NON_CONVEX) {\n          if (this.oppositeFaceDistance(edge) > -this.tolerance || this.oppositeFaceDistance(edge.opposite) > -this.tolerance) {\n            merge = true;\n          }\n        } else {\n          if (face.area > oppositeFace.area) {\n            if (this.oppositeFaceDistance(edge) > -this.tolerance) {\n              merge = true;\n            } else if (this.oppositeFaceDistance(edge.opposite) > -this.tolerance) {\n              convex = false;\n            }\n          } else {\n            if (this.oppositeFaceDistance(edge.opposite) > -this.tolerance) {\n              merge = true;\n            } else if (this.oppositeFaceDistance(edge) > -this.tolerance) {\n              convex = false;\n            }\n          }\n        }\n\n        if (merge) {\n          debug('face merge');\n          // when two faces are merged it might be possible that redundant faces\n          // are destroyed, in that case move all the visible vertices from the\n          // destroyed faces to the `unclaimed` vertex list\n          var discardedFaces = face.mergeAdjacentFaces(edge, []);\n          for (var i = 0; i < discardedFaces.length; i += 1) {\n            this.deleteFaceVertices(discardedFaces[i], face);\n          }\n          return true;\n        }\n\n        edge = edge.next;\n        it += 1;\n      } while (edge !== face.edge);\n      if (!convex) {\n        face.mark = _Face.NON_CONVEX;\n      }\n      return false;\n    }\n\n    /**\n     * Adds a vertex to the hull with the following algorithm\n     *\n     * - Compute the `horizon` which is a chain of half edges, for an edge to\n     *   belong to this group it must be the edge connecting a face that can\n     *   see `eyeVertex` and a face which cannot see `eyeVertex`\n     * - All the faces that can see `eyeVertex` have its visible vertices removed\n     *   from the claimed VertexList\n     * - A new set of faces is created with each edge of the `horizon` and\n     *   `eyeVertex`, each face is connected with the opposite horizon face and\n     *   the face on the left/right\n     * - The new faces are merged if possible with the opposite horizon face first\n     *   and then the faces on the right/left\n     * - The vertices removed from all the visible faces are assigned to the new\n     *   faces if possible\n     *\n     * @param {Vertex} eyeVertex\n     */\n\n  }, {\n    key: 'addVertexToHull',\n    value: function addVertexToHull(eyeVertex) {\n      var horizon = [];\n\n      this.unclaimed.clear();\n\n      // remove `eyeVertex` from `eyeVertex.face` so that it can't be added to the\n      // `unclaimed` vertex list\n      this.removeVertexFromFace(eyeVertex, eyeVertex.face);\n      this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon);\n      if (debug.enabled) {\n        debug('horizon %j', horizon.map(function (edge) {\n          return edge.head().index;\n        }));\n      }\n      this.addNewFaces(eyeVertex, horizon);\n\n      debug('first merge');\n\n      // first merge pass\n      // Do the merge with respect to the larger face\n      for (var i = 0; i < this.newFaces.length; i += 1) {\n        var face = this.newFaces[i];\n        if (face.mark === _Face.VISIBLE) {\n          while (this.doAdjacentMerge(face, MERGE_NON_CONVEX_WRT_LARGER_FACE)) {}\n        }\n      }\n\n      debug('second merge');\n\n      // second merge pass\n      // Do the merge on non convex faces (a face is marked as non convex in the\n      // first pass)\n      for (var _i = 0; _i < this.newFaces.length; _i += 1) {\n        var _face = this.newFaces[_i];\n        if (_face.mark === _Face.NON_CONVEX) {\n          _face.mark = _Face.VISIBLE;\n          while (this.doAdjacentMerge(_face, MERGE_NON_CONVEX)) {}\n        }\n      }\n\n      debug('reassigning points to newFaces');\n      // reassign `unclaimed` vertices to the new faces\n      this.resolveUnclaimedPoints(this.newFaces);\n    }\n  }, {\n    key: 'build',\n    value: function build() {\n      var iterations = 0;\n      var eyeVertex = void 0;\n      this.createInitialSimplex();\n      while (eyeVertex = this.nextVertexToAdd()) {\n        iterations += 1;\n        debug('== iteration %j ==', iterations);\n        debug('next vertex to add = %d %j', eyeVertex.index, eyeVertex.point);\n        this.addVertexToHull(eyeVertex);\n        debug('end');\n      }\n      this.reindexFaceAndVertices();\n    }\n  }]);\n\n  return QuickHull;\n}();\n\nexports.default = QuickHull;\nmodule.exports = exports['default'];\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/quickhull3d/dist/QuickHull.js?");

/***/ }),

/***/ "../../node_modules/quickhull3d/dist/Vertex.js":
/*!************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/quickhull3d/dist/Vertex.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Vertex = function Vertex(point, index) {\n  _classCallCheck(this, Vertex);\n\n  this.point = point;\n  // index in the input array\n  this.index = index;\n  // vertex is a double linked list node\n  this.next = null;\n  this.prev = null;\n  // the face that is able to see this point\n  this.face = null;\n};\n\nexports.default = Vertex;\nmodule.exports = exports[\"default\"];\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/quickhull3d/dist/Vertex.js?");

/***/ }),

/***/ "../../node_modules/quickhull3d/dist/VertexList.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/quickhull3d/dist/VertexList.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar VertexList = function () {\n  function VertexList() {\n    _classCallCheck(this, VertexList);\n\n    this.head = null;\n    this.tail = null;\n  }\n\n  _createClass(VertexList, [{\n    key: \"clear\",\n    value: function clear() {\n      this.head = this.tail = null;\n    }\n\n    /**\n     * Inserts a `node` before `target`, it's assumed that\n     * `target` belongs to this doubly linked list\n     *\n     * @param {*} target\n     * @param {*} node\n     */\n\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(target, node) {\n      node.prev = target.prev;\n      node.next = target;\n      if (!node.prev) {\n        this.head = node;\n      } else {\n        node.prev.next = node;\n      }\n      target.prev = node;\n    }\n\n    /**\n     * Inserts a `node` after `target`, it's assumed that\n     * `target` belongs to this doubly linked list\n     *\n     * @param {Vertex} target\n     * @param {Vertex} node\n     */\n\n  }, {\n    key: \"insertAfter\",\n    value: function insertAfter(target, node) {\n      node.prev = target;\n      node.next = target.next;\n      if (!node.next) {\n        this.tail = node;\n      } else {\n        node.next.prev = node;\n      }\n      target.next = node;\n    }\n\n    /**\n     * Appends a `node` to the end of this doubly linked list\n     * Note: `node.next` will be unlinked from `node`\n     * Note: if `node` is part of another linked list call `addAll` instead\n     *\n     * @param {*} node\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(node) {\n      if (!this.head) {\n        this.head = node;\n      } else {\n        this.tail.next = node;\n      }\n      node.prev = this.tail;\n      // since node is the new end it doesn't have a next node\n      node.next = null;\n      this.tail = node;\n    }\n\n    /**\n     * Appends a chain of nodes where `node` is the head,\n     * the difference with `add` is that it correctly sets the position\n     * of the node list `tail` property\n     *\n     * @param {*} node\n     */\n\n  }, {\n    key: \"addAll\",\n    value: function addAll(node) {\n      if (!this.head) {\n        this.head = node;\n      } else {\n        this.tail.next = node;\n      }\n      node.prev = this.tail;\n\n      // find the end of the list\n      while (node.next) {\n        node = node.next;\n      }\n      this.tail = node;\n    }\n\n    /**\n     * Deletes a `node` from this linked list, it's assumed that `node` is a\n     * member of this linked list\n     *\n     * @param {*} node\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(node) {\n      if (!node.prev) {\n        this.head = node.next;\n      } else {\n        node.prev.next = node.next;\n      }\n\n      if (!node.next) {\n        this.tail = node.prev;\n      } else {\n        node.next.prev = node.prev;\n      }\n    }\n\n    /**\n     * Removes a chain of nodes whose head is `a` and whose tail is `b`,\n     * it's assumed that `a` and `b` belong to this list and also that `a`\n     * comes before `b` in the linked list\n     *\n     * @param {*} a\n     * @param {*} b\n     */\n\n  }, {\n    key: \"removeChain\",\n    value: function removeChain(a, b) {\n      if (!a.prev) {\n        this.head = b.next;\n      } else {\n        a.prev.next = b.next;\n      }\n\n      if (!b.next) {\n        this.tail = a.prev;\n      } else {\n        b.next.prev = a.prev;\n      }\n    }\n  }, {\n    key: \"first\",\n    value: function first() {\n      return this.head;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return !this.head;\n    }\n  }]);\n\n  return VertexList;\n}();\n\nexports.default = VertexList;\nmodule.exports = exports[\"default\"];\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/quickhull3d/dist/VertexList.js?");

/***/ }),

/***/ "../../node_modules/recast/lib/comments.js":
/*!********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/lib/comments.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar assert_1 = __importDefault(__webpack_require__(/*! assert */ \"../../node_modules/assert/assert.js\"));\nvar types_1 = __importDefault(__webpack_require__(/*! ./types */ \"../../node_modules/recast/lib/types.js\"));\nvar n = types_1.default.namedTypes;\nvar isArray = types_1.default.builtInTypes.array;\nvar isObject = types_1.default.builtInTypes.object;\nvar lines_1 = __webpack_require__(/*! ./lines */ \"../../node_modules/recast/lib/lines.js\");\nvar util_1 = __webpack_require__(/*! ./util */ \"../../node_modules/recast/lib/util.js\");\nvar private_1 = __webpack_require__(/*! private */ \"../../node_modules/private/private.js\");\nvar childNodesCacheKey = private_1.makeUniqueKey();\n// TODO Move a non-caching implementation of this function into ast-types,\n// and implement a caching wrapper function here.\nfunction getSortedChildNodes(node, lines, resultArray) {\n    if (!node) {\n        return;\n    }\n    // The .loc checks below are sensitive to some of the problems that\n    // are fixed by this utility function. Specifically, if it decides to\n    // set node.loc to null, indicating that the node's .loc information\n    // is unreliable, then we don't want to add node to the resultArray.\n    util_1.fixFaultyLocations(node, lines);\n    if (resultArray) {\n        if (n.Node.check(node) &&\n            n.SourceLocation.check(node.loc)) {\n            // This reverse insertion sort almost always takes constant\n            // time because we almost always (maybe always?) append the\n            // nodes in order anyway.\n            for (var i = resultArray.length - 1; i >= 0; --i) {\n                if (util_1.comparePos(resultArray[i].loc.end, node.loc.start) <= 0) {\n                    break;\n                }\n            }\n            resultArray.splice(i + 1, 0, node);\n            return;\n        }\n    }\n    else if (node[childNodesCacheKey]) {\n        return node[childNodesCacheKey];\n    }\n    var names;\n    if (isArray.check(node)) {\n        names = Object.keys(node);\n    }\n    else if (isObject.check(node)) {\n        names = types_1.default.getFieldNames(node);\n    }\n    else {\n        return;\n    }\n    if (!resultArray) {\n        Object.defineProperty(node, childNodesCacheKey, {\n            value: resultArray = [],\n            enumerable: false\n        });\n    }\n    for (var i = 0, nameCount = names.length; i < nameCount; ++i) {\n        getSortedChildNodes(node[names[i]], lines, resultArray);\n    }\n    return resultArray;\n}\n// As efficiently as possible, decorate the comment object with\n// .precedingNode, .enclosingNode, and/or .followingNode properties, at\n// least one of which is guaranteed to be defined.\nfunction decorateComment(node, comment, lines) {\n    var childNodes = getSortedChildNodes(node, lines);\n    // Time to dust off the old binary search robes and wizard hat.\n    var left = 0, right = childNodes.length;\n    while (left < right) {\n        var middle = (left + right) >> 1;\n        var child = childNodes[middle];\n        if (util_1.comparePos(child.loc.start, comment.loc.start) <= 0 &&\n            util_1.comparePos(comment.loc.end, child.loc.end) <= 0) {\n            // The comment is completely contained by this child node.\n            decorateComment(comment.enclosingNode = child, comment, lines);\n            return; // Abandon the binary search at this level.\n        }\n        if (util_1.comparePos(child.loc.end, comment.loc.start) <= 0) {\n            // This child node falls completely before the comment.\n            // Because we will never consider this node or any nodes\n            // before it again, this node must be the closest preceding\n            // node we have encountered so far.\n            var precedingNode = child;\n            left = middle + 1;\n            continue;\n        }\n        if (util_1.comparePos(comment.loc.end, child.loc.start) <= 0) {\n            // This child node falls completely after the comment.\n            // Because we will never consider this node or any nodes after\n            // it again, this node must be the closest following node we\n            // have encountered so far.\n            var followingNode = child;\n            right = middle;\n            continue;\n        }\n        throw new Error(\"Comment location overlaps with node location\");\n    }\n    if (precedingNode) {\n        comment.precedingNode = precedingNode;\n    }\n    if (followingNode) {\n        comment.followingNode = followingNode;\n    }\n}\nfunction attach(comments, ast, lines) {\n    if (!isArray.check(comments)) {\n        return;\n    }\n    var tiesToBreak = [];\n    comments.forEach(function (comment) {\n        comment.loc.lines = lines;\n        decorateComment(ast, comment, lines);\n        var pn = comment.precedingNode;\n        var en = comment.enclosingNode;\n        var fn = comment.followingNode;\n        if (pn && fn) {\n            var tieCount = tiesToBreak.length;\n            if (tieCount > 0) {\n                var lastTie = tiesToBreak[tieCount - 1];\n                assert_1.default.strictEqual(lastTie.precedingNode === comment.precedingNode, lastTie.followingNode === comment.followingNode);\n                if (lastTie.followingNode !== comment.followingNode) {\n                    breakTies(tiesToBreak, lines);\n                }\n            }\n            tiesToBreak.push(comment);\n        }\n        else if (pn) {\n            // No contest: we have a trailing comment.\n            breakTies(tiesToBreak, lines);\n            addTrailingComment(pn, comment);\n        }\n        else if (fn) {\n            // No contest: we have a leading comment.\n            breakTies(tiesToBreak, lines);\n            addLeadingComment(fn, comment);\n        }\n        else if (en) {\n            // The enclosing node has no child nodes at all, so what we\n            // have here is a dangling comment, e.g. [/* crickets */].\n            breakTies(tiesToBreak, lines);\n            addDanglingComment(en, comment);\n        }\n        else {\n            throw new Error(\"AST contains no nodes at all?\");\n        }\n    });\n    breakTies(tiesToBreak, lines);\n    comments.forEach(function (comment) {\n        // These node references were useful for breaking ties, but we\n        // don't need them anymore, and they create cycles in the AST that\n        // may lead to infinite recursion if we don't delete them here.\n        delete comment.precedingNode;\n        delete comment.enclosingNode;\n        delete comment.followingNode;\n    });\n}\nexports.attach = attach;\n;\nfunction breakTies(tiesToBreak, lines) {\n    var tieCount = tiesToBreak.length;\n    if (tieCount === 0) {\n        return;\n    }\n    var pn = tiesToBreak[0].precedingNode;\n    var fn = tiesToBreak[0].followingNode;\n    var gapEndPos = fn.loc.start;\n    // Iterate backwards through tiesToBreak, examining the gaps\n    // between the tied comments. In order to qualify as leading, a\n    // comment must be separated from fn by an unbroken series of\n    // whitespace-only gaps (or other comments).\n    for (var indexOfFirstLeadingComment = tieCount; indexOfFirstLeadingComment > 0; --indexOfFirstLeadingComment) {\n        var comment = tiesToBreak[indexOfFirstLeadingComment - 1];\n        assert_1.default.strictEqual(comment.precedingNode, pn);\n        assert_1.default.strictEqual(comment.followingNode, fn);\n        var gap = lines.sliceString(comment.loc.end, gapEndPos);\n        if (/\\S/.test(gap)) {\n            // The gap string contained something other than whitespace.\n            break;\n        }\n        gapEndPos = comment.loc.start;\n    }\n    while (indexOfFirstLeadingComment <= tieCount &&\n        (comment = tiesToBreak[indexOfFirstLeadingComment]) &&\n        // If the comment is a //-style comment and indented more\n        // deeply than the node itself, reconsider it as trailing.\n        (comment.type === \"Line\" || comment.type === \"CommentLine\") &&\n        comment.loc.start.column > fn.loc.start.column) {\n        ++indexOfFirstLeadingComment;\n    }\n    tiesToBreak.forEach(function (comment, i) {\n        if (i < indexOfFirstLeadingComment) {\n            addTrailingComment(pn, comment);\n        }\n        else {\n            addLeadingComment(fn, comment);\n        }\n    });\n    tiesToBreak.length = 0;\n}\nfunction addCommentHelper(node, comment) {\n    var comments = node.comments || (node.comments = []);\n    comments.push(comment);\n}\nfunction addLeadingComment(node, comment) {\n    comment.leading = true;\n    comment.trailing = false;\n    addCommentHelper(node, comment);\n}\nfunction addDanglingComment(node, comment) {\n    comment.leading = false;\n    comment.trailing = false;\n    addCommentHelper(node, comment);\n}\nfunction addTrailingComment(node, comment) {\n    comment.leading = false;\n    comment.trailing = true;\n    addCommentHelper(node, comment);\n}\nfunction printLeadingComment(commentPath, print) {\n    var comment = commentPath.getValue();\n    n.Comment.assert(comment);\n    var loc = comment.loc;\n    var lines = loc && loc.lines;\n    var parts = [print(commentPath)];\n    if (comment.trailing) {\n        // When we print trailing comments as leading comments, we don't\n        // want to bring any trailing spaces along.\n        parts.push(\"\\n\");\n    }\n    else if (lines instanceof lines_1.Lines) {\n        var trailingSpace = lines.slice(loc.end, lines.skipSpaces(loc.end) || lines.lastPos());\n        if (trailingSpace.length === 1) {\n            // If the trailing space contains no newlines, then we want to\n            // preserve it exactly as we found it.\n            parts.push(trailingSpace);\n        }\n        else {\n            // If the trailing space contains newlines, then replace it\n            // with just that many newlines, with all other spaces removed.\n            parts.push(new Array(trailingSpace.length).join(\"\\n\"));\n        }\n    }\n    else {\n        parts.push(\"\\n\");\n    }\n    return lines_1.concat(parts);\n}\nfunction printTrailingComment(commentPath, print) {\n    var comment = commentPath.getValue(commentPath);\n    n.Comment.assert(comment);\n    var loc = comment.loc;\n    var lines = loc && loc.lines;\n    var parts = [];\n    if (lines instanceof lines_1.Lines) {\n        var fromPos = lines.skipSpaces(loc.start, true) || lines.firstPos();\n        var leadingSpace = lines.slice(fromPos, loc.start);\n        if (leadingSpace.length === 1) {\n            // If the leading space contains no newlines, then we want to\n            // preserve it exactly as we found it.\n            parts.push(leadingSpace);\n        }\n        else {\n            // If the leading space contains newlines, then replace it\n            // with just that many newlines, sans all other spaces.\n            parts.push(new Array(leadingSpace.length).join(\"\\n\"));\n        }\n    }\n    parts.push(print(commentPath));\n    return lines_1.concat(parts);\n}\nfunction printComments(path, print) {\n    var value = path.getValue();\n    var innerLines = print(path);\n    var comments = n.Node.check(value) &&\n        types_1.default.getFieldValue(value, \"comments\");\n    if (!comments || comments.length === 0) {\n        return innerLines;\n    }\n    var leadingParts = [];\n    var trailingParts = [innerLines];\n    path.each(function (commentPath) {\n        var comment = commentPath.getValue();\n        var leading = types_1.default.getFieldValue(comment, \"leading\");\n        var trailing = types_1.default.getFieldValue(comment, \"trailing\");\n        if (leading || (trailing && !(n.Statement.check(value) ||\n            comment.type === \"Block\" ||\n            comment.type === \"CommentBlock\"))) {\n            leadingParts.push(printLeadingComment(commentPath, print));\n        }\n        else if (trailing) {\n            trailingParts.push(printTrailingComment(commentPath, print));\n        }\n    }, \"comments\");\n    leadingParts.push.apply(leadingParts, trailingParts);\n    return lines_1.concat(leadingParts);\n}\nexports.printComments = printComments;\n;\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/lib/comments.js?");

/***/ }),

/***/ "../../node_modules/recast/lib/fast-path.js":
/*!*********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/lib/fast-path.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar assert_1 = __importDefault(__webpack_require__(/*! assert */ \"../../node_modules/assert/assert.js\"));\nvar types_1 = __importDefault(__webpack_require__(/*! ./types */ \"../../node_modules/recast/lib/types.js\"));\nvar n = types_1.default.namedTypes;\nvar isArray = types_1.default.builtInTypes.array;\nvar isNumber = types_1.default.builtInTypes.number;\nvar util = __importStar(__webpack_require__(/*! ./util */ \"../../node_modules/recast/lib/util.js\"));\nvar FastPath = function FastPath(value) {\n    assert_1.default.ok(this instanceof FastPath);\n    this.stack = [value];\n};\nvar FPp = FastPath.prototype;\n// Static convenience function for coercing a value to a FastPath.\nFastPath.from = function (obj) {\n    if (obj instanceof FastPath) {\n        // Return a defensive copy of any existing FastPath instances.\n        return obj.copy();\n    }\n    if (obj instanceof types_1.default.NodePath) {\n        // For backwards compatibility, unroll NodePath instances into\n        // lightweight FastPath [..., name, value] stacks.\n        var copy = Object.create(FastPath.prototype);\n        var stack = [obj.value];\n        for (var pp; (pp = obj.parentPath); obj = pp)\n            stack.push(obj.name, pp.value);\n        copy.stack = stack.reverse();\n        return copy;\n    }\n    // Otherwise use obj as the value of the new FastPath instance.\n    return new FastPath(obj);\n};\nFPp.copy = function copy() {\n    var copy = Object.create(FastPath.prototype);\n    copy.stack = this.stack.slice(0);\n    return copy;\n};\n// The name of the current property is always the penultimate element of\n// this.stack, and always a String.\nFPp.getName = function getName() {\n    var s = this.stack;\n    var len = s.length;\n    if (len > 1) {\n        return s[len - 2];\n    }\n    // Since the name is always a string, null is a safe sentinel value to\n    // return if we do not know the name of the (root) value.\n    return null;\n};\n// The value of the current property is always the final element of\n// this.stack.\nFPp.getValue = function getValue() {\n    var s = this.stack;\n    return s[s.length - 1];\n};\nFPp.valueIsDuplicate = function () {\n    var s = this.stack;\n    var valueIndex = s.length - 1;\n    return s.lastIndexOf(s[valueIndex], valueIndex - 1) >= 0;\n};\nfunction getNodeHelper(path, count) {\n    var s = path.stack;\n    for (var i = s.length - 1; i >= 0; i -= 2) {\n        var value = s[i];\n        if (n.Node.check(value) && --count < 0) {\n            return value;\n        }\n    }\n    return null;\n}\nFPp.getNode = function getNode(count) {\n    if (count === void 0) { count = 0; }\n    return getNodeHelper(this, ~~count);\n};\nFPp.getParentNode = function getParentNode(count) {\n    if (count === void 0) { count = 0; }\n    return getNodeHelper(this, ~~count + 1);\n};\n// The length of the stack can be either even or odd, depending on whether\n// or not we have a name for the root value. The difference between the\n// index of the root value and the index of the final value is always\n// even, though, which allows us to return the root value in constant time\n// (i.e. without iterating backwards through the stack).\nFPp.getRootValue = function getRootValue() {\n    var s = this.stack;\n    if (s.length % 2 === 0) {\n        return s[1];\n    }\n    return s[0];\n};\n// Temporarily push properties named by string arguments given after the\n// callback function onto this.stack, then call the callback with a\n// reference to this (modified) FastPath object. Note that the stack will\n// be restored to its original state after the callback is finished, so it\n// is probably a mistake to retain a reference to the path.\nFPp.call = function call(callback /*, name1, name2, ... */) {\n    var s = this.stack;\n    var origLen = s.length;\n    var value = s[origLen - 1];\n    var argc = arguments.length;\n    for (var i = 1; i < argc; ++i) {\n        var name = arguments[i];\n        value = value[name];\n        s.push(name, value);\n    }\n    var result = callback(this);\n    s.length = origLen;\n    return result;\n};\n// Similar to FastPath.prototype.call, except that the value obtained by\n// accessing this.getValue()[name1][name2]... should be array-like. The\n// callback will be called with a reference to this path object for each\n// element of the array.\nFPp.each = function each(callback /*, name1, name2, ... */) {\n    var s = this.stack;\n    var origLen = s.length;\n    var value = s[origLen - 1];\n    var argc = arguments.length;\n    for (var i = 1; i < argc; ++i) {\n        var name = arguments[i];\n        value = value[name];\n        s.push(name, value);\n    }\n    for (var i = 0; i < value.length; ++i) {\n        if (i in value) {\n            s.push(i, value[i]);\n            // If the callback needs to know the value of i, call\n            // path.getName(), assuming path is the parameter name.\n            callback(this);\n            s.length -= 2;\n        }\n    }\n    s.length = origLen;\n};\n// Similar to FastPath.prototype.each, except that the results of the\n// callback function invocations are stored in an array and returned at\n// the end of the iteration.\nFPp.map = function map(callback /*, name1, name2, ... */) {\n    var s = this.stack;\n    var origLen = s.length;\n    var value = s[origLen - 1];\n    var argc = arguments.length;\n    for (var i = 1; i < argc; ++i) {\n        var name = arguments[i];\n        value = value[name];\n        s.push(name, value);\n    }\n    var result = new Array(value.length);\n    for (var i = 0; i < value.length; ++i) {\n        if (i in value) {\n            s.push(i, value[i]);\n            result[i] = callback(this, i);\n            s.length -= 2;\n        }\n    }\n    s.length = origLen;\n    return result;\n};\n// Returns true if the node at the tip of the path is wrapped with\n// parentheses, OR if the only reason the node needed parentheses was that\n// it couldn't be the first expression in the enclosing statement (see\n// FastPath#canBeFirstInStatement), and it has an opening `(` character.\n// For example, the FunctionExpression in `(function(){}())` appears to\n// need parentheses only because it's the first expression in the AST, but\n// since it happens to be preceded by a `(` (which is not apparent from\n// the AST but can be determined using FastPath#getPrevToken), there is no\n// ambiguity about how to parse it, so it counts as having parentheses,\n// even though it is not immediately followed by a `)`.\nFPp.hasParens = function () {\n    var node = this.getNode();\n    var prevToken = this.getPrevToken(node);\n    if (!prevToken) {\n        return false;\n    }\n    var nextToken = this.getNextToken(node);\n    if (!nextToken) {\n        return false;\n    }\n    if (prevToken.value === \"(\") {\n        if (nextToken.value === \")\") {\n            // If the node preceded by a `(` token and followed by a `)` token,\n            // then of course it has parentheses.\n            return true;\n        }\n        // If this is one of the few Expression types that can't come first in\n        // the enclosing statement because of parsing ambiguities (namely,\n        // FunctionExpression, ObjectExpression, and ClassExpression) and\n        // this.firstInStatement() returns true, and the node would not need\n        // parentheses in an expression context because this.needsParens(true)\n        // returns false, then it just needs an opening parenthesis to resolve\n        // the parsing ambiguity that made it appear to need parentheses.\n        var justNeedsOpeningParen = !this.canBeFirstInStatement() &&\n            this.firstInStatement() &&\n            !this.needsParens(true);\n        if (justNeedsOpeningParen) {\n            return true;\n        }\n    }\n    return false;\n};\nFPp.getPrevToken = function (node) {\n    node = node || this.getNode();\n    var loc = node && node.loc;\n    var tokens = loc && loc.tokens;\n    if (tokens && loc.start.token > 0) {\n        var token = tokens[loc.start.token - 1];\n        if (token) {\n            // Do not return tokens that fall outside the root subtree.\n            var rootLoc = this.getRootValue().loc;\n            if (util.comparePos(rootLoc.start, token.loc.start) <= 0) {\n                return token;\n            }\n        }\n    }\n    return null;\n};\nFPp.getNextToken = function (node) {\n    node = node || this.getNode();\n    var loc = node && node.loc;\n    var tokens = loc && loc.tokens;\n    if (tokens && loc.end.token < tokens.length) {\n        var token = tokens[loc.end.token];\n        if (token) {\n            // Do not return tokens that fall outside the root subtree.\n            var rootLoc = this.getRootValue().loc;\n            if (util.comparePos(token.loc.end, rootLoc.end) <= 0) {\n                return token;\n            }\n        }\n    }\n    return null;\n};\n// Inspired by require(\"ast-types\").NodePath.prototype.needsParens, but\n// more efficient because we're iterating backwards through a stack.\nFPp.needsParens = function (assumeExpressionContext) {\n    var node = this.getNode();\n    // This needs to come before `if (!parent) { return false }` because\n    // an object destructuring assignment requires parens for\n    // correctness even when it's the topmost expression.\n    if (node.type === \"AssignmentExpression\" && node.left.type === 'ObjectPattern') {\n        return true;\n    }\n    var parent = this.getParentNode();\n    if (!parent) {\n        return false;\n    }\n    var name = this.getName();\n    // If the value of this path is some child of a Node and not a Node\n    // itself, then it doesn't need parentheses. Only Node objects (in fact,\n    // only Expression nodes) need parentheses.\n    if (this.getValue() !== node) {\n        return false;\n    }\n    // Only statements don't need parentheses.\n    if (n.Statement.check(node)) {\n        return false;\n    }\n    // Identifiers never need parentheses.\n    if (node.type === \"Identifier\") {\n        return false;\n    }\n    if (parent.type === \"ParenthesizedExpression\") {\n        return false;\n    }\n    switch (node.type) {\n        case \"UnaryExpression\":\n        case \"SpreadElement\":\n        case \"SpreadProperty\":\n            return parent.type === \"MemberExpression\"\n                && name === \"object\"\n                && parent.object === node;\n        case \"BinaryExpression\":\n        case \"LogicalExpression\":\n            switch (parent.type) {\n                case \"CallExpression\":\n                    return name === \"callee\"\n                        && parent.callee === node;\n                case \"UnaryExpression\":\n                case \"SpreadElement\":\n                case \"SpreadProperty\":\n                    return true;\n                case \"MemberExpression\":\n                    return name === \"object\"\n                        && parent.object === node;\n                case \"BinaryExpression\":\n                case \"LogicalExpression\":\n                    var po = parent.operator;\n                    var pp = PRECEDENCE[po];\n                    var no = node.operator;\n                    var np = PRECEDENCE[no];\n                    if (pp > np) {\n                        return true;\n                    }\n                    if (pp === np && name === \"right\") {\n                        assert_1.default.strictEqual(parent.right, node);\n                        return true;\n                    }\n                default:\n                    return false;\n            }\n        case \"SequenceExpression\":\n            switch (parent.type) {\n                case \"ReturnStatement\":\n                    return false;\n                case \"ForStatement\":\n                    // Although parentheses wouldn't hurt around sequence expressions in\n                    // the head of for loops, traditional style dictates that e.g. i++,\n                    // j++ should not be wrapped with parentheses.\n                    return false;\n                case \"ExpressionStatement\":\n                    return name !== \"expression\";\n                default:\n                    // Otherwise err on the side of overparenthesization, adding\n                    // explicit exceptions above if this proves overzealous.\n                    return true;\n            }\n        case \"YieldExpression\":\n            switch (parent.type) {\n                case \"BinaryExpression\":\n                case \"LogicalExpression\":\n                case \"UnaryExpression\":\n                case \"SpreadElement\":\n                case \"SpreadProperty\":\n                case \"CallExpression\":\n                case \"MemberExpression\":\n                case \"NewExpression\":\n                case \"ConditionalExpression\":\n                case \"YieldExpression\":\n                    return true;\n                default:\n                    return false;\n            }\n        case \"IntersectionTypeAnnotation\":\n        case \"UnionTypeAnnotation\":\n            return parent.type === \"NullableTypeAnnotation\";\n        case \"Literal\":\n            return parent.type === \"MemberExpression\"\n                && isNumber.check(node.value)\n                && name === \"object\"\n                && parent.object === node;\n        // Babel 6 Literal split\n        case \"NumericLiteral\":\n            return parent.type === \"MemberExpression\"\n                && name === \"object\"\n                && parent.object === node;\n        case \"AssignmentExpression\":\n        case \"ConditionalExpression\":\n            switch (parent.type) {\n                case \"UnaryExpression\":\n                case \"SpreadElement\":\n                case \"SpreadProperty\":\n                case \"BinaryExpression\":\n                case \"LogicalExpression\":\n                    return true;\n                case \"CallExpression\":\n                case \"NewExpression\":\n                    return name === \"callee\"\n                        && parent.callee === node;\n                case \"ConditionalExpression\":\n                    return name === \"test\"\n                        && parent.test === node;\n                case \"MemberExpression\":\n                    return name === \"object\"\n                        && parent.object === node;\n                default:\n                    return false;\n            }\n        case \"ArrowFunctionExpression\":\n            if (n.CallExpression.check(parent) &&\n                name === 'callee') {\n                return true;\n            }\n            if (n.MemberExpression.check(parent) &&\n                name === 'object') {\n                return true;\n            }\n            return isBinary(parent);\n        case \"ObjectExpression\":\n            if (parent.type === \"ArrowFunctionExpression\" &&\n                name === \"body\") {\n                return true;\n            }\n            break;\n        case \"CallExpression\":\n            if (name === \"declaration\" &&\n                n.ExportDefaultDeclaration.check(parent) &&\n                n.FunctionExpression.check(node.callee)) {\n                return true;\n            }\n    }\n    if (parent.type === \"NewExpression\" &&\n        name === \"callee\" &&\n        parent.callee === node) {\n        return containsCallExpression(node);\n    }\n    if (assumeExpressionContext !== true &&\n        !this.canBeFirstInStatement() &&\n        this.firstInStatement()) {\n        return true;\n    }\n    return false;\n};\nfunction isBinary(node) {\n    return n.BinaryExpression.check(node)\n        || n.LogicalExpression.check(node);\n}\n// @ts-ignore 'isUnaryLike' is declared but its value is never read. [6133]\nfunction isUnaryLike(node) {\n    return n.UnaryExpression.check(node)\n        // I considered making SpreadElement and SpreadProperty subtypes of\n        // UnaryExpression, but they're not really Expression nodes.\n        || (n.SpreadElement && n.SpreadElement.check(node))\n        || (n.SpreadProperty && n.SpreadProperty.check(node));\n}\nvar PRECEDENCE = {};\n[[\"||\"],\n    [\"&&\"],\n    [\"|\"],\n    [\"^\"],\n    [\"&\"],\n    [\"==\", \"===\", \"!=\", \"!==\"],\n    [\"<\", \">\", \"<=\", \">=\", \"in\", \"instanceof\"],\n    [\">>\", \"<<\", \">>>\"],\n    [\"+\", \"-\"],\n    [\"*\", \"/\", \"%\", \"**\"]\n].forEach(function (tier, i) {\n    tier.forEach(function (op) {\n        PRECEDENCE[op] = i;\n    });\n});\nfunction containsCallExpression(node) {\n    if (n.CallExpression.check(node)) {\n        return true;\n    }\n    if (isArray.check(node)) {\n        return node.some(containsCallExpression);\n    }\n    if (n.Node.check(node)) {\n        return types_1.default.someField(node, function (_name, child) {\n            return containsCallExpression(child);\n        });\n    }\n    return false;\n}\nFPp.canBeFirstInStatement = function () {\n    var node = this.getNode();\n    if (n.FunctionExpression.check(node)) {\n        return false;\n    }\n    if (n.ObjectExpression.check(node)) {\n        return false;\n    }\n    if (n.ClassExpression.check(node)) {\n        return false;\n    }\n    return true;\n};\nFPp.firstInStatement = function () {\n    var s = this.stack;\n    var parentName, parent;\n    var childName, child;\n    for (var i = s.length - 1; i >= 0; i -= 2) {\n        if (n.Node.check(s[i])) {\n            childName = parentName;\n            child = parent;\n            parentName = s[i - 1];\n            parent = s[i];\n        }\n        if (!parent || !child) {\n            continue;\n        }\n        if (n.BlockStatement.check(parent) &&\n            parentName === \"body\" &&\n            childName === 0) {\n            assert_1.default.strictEqual(parent.body[0], child);\n            return true;\n        }\n        if (n.ExpressionStatement.check(parent) &&\n            childName === \"expression\") {\n            assert_1.default.strictEqual(parent.expression, child);\n            return true;\n        }\n        if (n.AssignmentExpression.check(parent) &&\n            childName === \"left\") {\n            assert_1.default.strictEqual(parent.left, child);\n            return true;\n        }\n        if (n.ArrowFunctionExpression.check(parent) &&\n            childName === \"body\") {\n            assert_1.default.strictEqual(parent.body, child);\n            return true;\n        }\n        if (n.SequenceExpression.check(parent) &&\n            parentName === \"expressions\" &&\n            childName === 0) {\n            assert_1.default.strictEqual(parent.expressions[0], child);\n            continue;\n        }\n        if (n.CallExpression.check(parent) &&\n            childName === \"callee\") {\n            assert_1.default.strictEqual(parent.callee, child);\n            continue;\n        }\n        if (n.MemberExpression.check(parent) &&\n            childName === \"object\") {\n            assert_1.default.strictEqual(parent.object, child);\n            continue;\n        }\n        if (n.ConditionalExpression.check(parent) &&\n            childName === \"test\") {\n            assert_1.default.strictEqual(parent.test, child);\n            continue;\n        }\n        if (isBinary(parent) &&\n            childName === \"left\") {\n            assert_1.default.strictEqual(parent.left, child);\n            continue;\n        }\n        if (n.UnaryExpression.check(parent) &&\n            !parent.prefix &&\n            childName === \"argument\") {\n            assert_1.default.strictEqual(parent.argument, child);\n            continue;\n        }\n        return false;\n    }\n    return true;\n};\nexports.default = FastPath;\nmodule.exports = exports[\"default\"];\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/lib/fast-path.js?");

/***/ }),

/***/ "../../node_modules/recast/lib/lines.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/lib/lines.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar assert_1 = __importDefault(__webpack_require__(/*! assert */ \"../../node_modules/assert/assert.js\"));\nvar source_map_1 = __importDefault(__webpack_require__(/*! source-map */ \"../../node_modules/recast/node_modules/source-map/source-map.js\"));\nvar options_1 = __webpack_require__(/*! ./options */ \"../../node_modules/recast/lib/options.js\");\nvar util_1 = __webpack_require__(/*! ./util */ \"../../node_modules/recast/lib/util.js\");\nvar mapping_1 = __importDefault(__webpack_require__(/*! ./mapping */ \"../../node_modules/recast/lib/mapping.js\"));\nvar Lines = /** @class */ (function () {\n    function Lines(infos, sourceFileName) {\n        if (sourceFileName === void 0) { sourceFileName = null; }\n        this.infos = infos;\n        this.mappings = [];\n        this.cachedSourceMap = null;\n        this.cachedTabWidth = void 0;\n        assert_1.default.ok(infos.length > 0);\n        this.length = infos.length;\n        this.name = sourceFileName || null;\n        if (this.name) {\n            this.mappings.push(new mapping_1.default(this, {\n                start: this.firstPos(),\n                end: this.lastPos(),\n            }));\n        }\n    }\n    Lines.prototype.toString = function (options) {\n        return this.sliceString(this.firstPos(), this.lastPos(), options);\n    };\n    Lines.prototype.getSourceMap = function (sourceMapName, sourceRoot) {\n        if (!sourceMapName) {\n            // Although we could make up a name or generate an anonymous\n            // source map, instead we assume that any consumer who does not\n            // provide a name does not actually want a source map.\n            return null;\n        }\n        var targetLines = this;\n        function updateJSON(json) {\n            json = json || {};\n            json.file = sourceMapName;\n            if (sourceRoot) {\n                json.sourceRoot = sourceRoot;\n            }\n            return json;\n        }\n        if (targetLines.cachedSourceMap) {\n            // Since Lines objects are immutable, we can reuse any source map\n            // that was previously generated. Nevertheless, we return a new\n            // JSON object here to protect the cached source map from outside\n            // modification.\n            return updateJSON(targetLines.cachedSourceMap.toJSON());\n        }\n        var smg = new source_map_1.default.SourceMapGenerator(updateJSON());\n        var sourcesToContents = {};\n        targetLines.mappings.forEach(function (mapping) {\n            var sourceCursor = mapping.sourceLines.skipSpaces(mapping.sourceLoc.start) || mapping.sourceLines.lastPos();\n            var targetCursor = targetLines.skipSpaces(mapping.targetLoc.start) || targetLines.lastPos();\n            while (util_1.comparePos(sourceCursor, mapping.sourceLoc.end) < 0 &&\n                util_1.comparePos(targetCursor, mapping.targetLoc.end) < 0) {\n                var sourceChar = mapping.sourceLines.charAt(sourceCursor);\n                var targetChar = targetLines.charAt(targetCursor);\n                assert_1.default.strictEqual(sourceChar, targetChar);\n                var sourceName = mapping.sourceLines.name;\n                // Add mappings one character at a time for maximum resolution.\n                smg.addMapping({\n                    source: sourceName,\n                    original: { line: sourceCursor.line,\n                        column: sourceCursor.column },\n                    generated: { line: targetCursor.line,\n                        column: targetCursor.column }\n                });\n                if (!hasOwn.call(sourcesToContents, sourceName)) {\n                    var sourceContent = mapping.sourceLines.toString();\n                    smg.setSourceContent(sourceName, sourceContent);\n                    sourcesToContents[sourceName] = sourceContent;\n                }\n                targetLines.nextPos(targetCursor, true);\n                mapping.sourceLines.nextPos(sourceCursor, true);\n            }\n        });\n        targetLines.cachedSourceMap = smg;\n        return smg.toJSON();\n    };\n    Lines.prototype.bootstrapCharAt = function (pos) {\n        assert_1.default.strictEqual(typeof pos, \"object\");\n        assert_1.default.strictEqual(typeof pos.line, \"number\");\n        assert_1.default.strictEqual(typeof pos.column, \"number\");\n        var line = pos.line, column = pos.column, strings = this.toString().split(lineTerminatorSeqExp), string = strings[line - 1];\n        if (typeof string === \"undefined\")\n            return \"\";\n        if (column === string.length &&\n            line < strings.length)\n            return \"\\n\";\n        if (column >= string.length)\n            return \"\";\n        return string.charAt(column);\n    };\n    Lines.prototype.charAt = function (pos) {\n        assert_1.default.strictEqual(typeof pos, \"object\");\n        assert_1.default.strictEqual(typeof pos.line, \"number\");\n        assert_1.default.strictEqual(typeof pos.column, \"number\");\n        var line = pos.line, column = pos.column, secret = this, infos = secret.infos, info = infos[line - 1], c = column;\n        if (typeof info === \"undefined\" || c < 0)\n            return \"\";\n        var indent = this.getIndentAt(line);\n        if (c < indent)\n            return \" \";\n        c += info.sliceStart - indent;\n        if (c === info.sliceEnd &&\n            line < this.length)\n            return \"\\n\";\n        if (c >= info.sliceEnd)\n            return \"\";\n        return info.line.charAt(c);\n    };\n    Lines.prototype.stripMargin = function (width, skipFirstLine) {\n        if (width === 0)\n            return this;\n        assert_1.default.ok(width > 0, \"negative margin: \" + width);\n        if (skipFirstLine && this.length === 1)\n            return this;\n        var lines = new Lines(this.infos.map(function (info, i) {\n            if (info.line && (i > 0 || !skipFirstLine)) {\n                info = __assign({}, info, { indent: Math.max(0, info.indent - width) });\n            }\n            return info;\n        }));\n        if (this.mappings.length > 0) {\n            var newMappings = lines.mappings;\n            assert_1.default.strictEqual(newMappings.length, 0);\n            this.mappings.forEach(function (mapping) {\n                newMappings.push(mapping.indent(width, skipFirstLine, true));\n            });\n        }\n        return lines;\n    };\n    Lines.prototype.indent = function (by) {\n        if (by === 0) {\n            return this;\n        }\n        var lines = new Lines(this.infos.map(function (info) {\n            if (info.line && !info.locked) {\n                info = __assign({}, info, { indent: info.indent + by });\n            }\n            return info;\n        }));\n        if (this.mappings.length > 0) {\n            var newMappings = lines.mappings;\n            assert_1.default.strictEqual(newMappings.length, 0);\n            this.mappings.forEach(function (mapping) {\n                newMappings.push(mapping.indent(by));\n            });\n        }\n        return lines;\n    };\n    Lines.prototype.indentTail = function (by) {\n        if (by === 0) {\n            return this;\n        }\n        if (this.length < 2) {\n            return this;\n        }\n        var lines = new Lines(this.infos.map(function (info, i) {\n            if (i > 0 && info.line && !info.locked) {\n                info = __assign({}, info, { indent: info.indent + by });\n            }\n            return info;\n        }));\n        if (this.mappings.length > 0) {\n            var newMappings = lines.mappings;\n            assert_1.default.strictEqual(newMappings.length, 0);\n            this.mappings.forEach(function (mapping) {\n                newMappings.push(mapping.indent(by, true));\n            });\n        }\n        return lines;\n    };\n    Lines.prototype.lockIndentTail = function () {\n        if (this.length < 2) {\n            return this;\n        }\n        return new Lines(this.infos.map(function (info, i) {\n            return __assign({}, info, { locked: i > 0 });\n        }));\n    };\n    Lines.prototype.getIndentAt = function (line) {\n        assert_1.default.ok(line >= 1, \"no line \" + line + \" (line numbers start from 1)\");\n        return Math.max(this.infos[line - 1].indent, 0);\n    };\n    Lines.prototype.guessTabWidth = function () {\n        if (typeof this.cachedTabWidth === \"number\") {\n            return this.cachedTabWidth;\n        }\n        var counts = []; // Sparse array.\n        var lastIndent = 0;\n        for (var line = 1, last = this.length; line <= last; ++line) {\n            var info = this.infos[line - 1];\n            var sliced = info.line.slice(info.sliceStart, info.sliceEnd);\n            // Whitespace-only lines don't tell us much about the likely tab\n            // width of this code.\n            if (isOnlyWhitespace(sliced)) {\n                continue;\n            }\n            var diff = Math.abs(info.indent - lastIndent);\n            counts[diff] = ~~counts[diff] + 1;\n            lastIndent = info.indent;\n        }\n        var maxCount = -1;\n        var result = 2;\n        for (var tabWidth = 1; tabWidth < counts.length; tabWidth += 1) {\n            if (hasOwn.call(counts, tabWidth) &&\n                counts[tabWidth] > maxCount) {\n                maxCount = counts[tabWidth];\n                result = tabWidth;\n            }\n        }\n        return this.cachedTabWidth = result;\n    };\n    // Determine if the list of lines has a first line that starts with a //\n    // or /* comment. If this is the case, the code may need to be wrapped in\n    // parens to avoid ASI issues.\n    Lines.prototype.startsWithComment = function () {\n        if (this.infos.length === 0) {\n            return false;\n        }\n        var firstLineInfo = this.infos[0], sliceStart = firstLineInfo.sliceStart, sliceEnd = firstLineInfo.sliceEnd, firstLine = firstLineInfo.line.slice(sliceStart, sliceEnd).trim();\n        return firstLine.length === 0 ||\n            firstLine.slice(0, 2) === \"//\" ||\n            firstLine.slice(0, 2) === \"/*\";\n    };\n    Lines.prototype.isOnlyWhitespace = function () {\n        return isOnlyWhitespace(this.toString());\n    };\n    Lines.prototype.isPrecededOnlyByWhitespace = function (pos) {\n        var info = this.infos[pos.line - 1];\n        var indent = Math.max(info.indent, 0);\n        var diff = pos.column - indent;\n        if (diff <= 0) {\n            // If pos.column does not exceed the indentation amount, then\n            // there must be only whitespace before it.\n            return true;\n        }\n        var start = info.sliceStart;\n        var end = Math.min(start + diff, info.sliceEnd);\n        var prefix = info.line.slice(start, end);\n        return isOnlyWhitespace(prefix);\n    };\n    Lines.prototype.getLineLength = function (line) {\n        var info = this.infos[line - 1];\n        return this.getIndentAt(line) + info.sliceEnd - info.sliceStart;\n    };\n    Lines.prototype.nextPos = function (pos, skipSpaces) {\n        if (skipSpaces === void 0) { skipSpaces = false; }\n        var l = Math.max(pos.line, 0), c = Math.max(pos.column, 0);\n        if (c < this.getLineLength(l)) {\n            pos.column += 1;\n            return skipSpaces\n                ? !!this.skipSpaces(pos, false, true)\n                : true;\n        }\n        if (l < this.length) {\n            pos.line += 1;\n            pos.column = 0;\n            return skipSpaces\n                ? !!this.skipSpaces(pos, false, true)\n                : true;\n        }\n        return false;\n    };\n    Lines.prototype.prevPos = function (pos, skipSpaces) {\n        if (skipSpaces === void 0) { skipSpaces = false; }\n        var l = pos.line, c = pos.column;\n        if (c < 1) {\n            l -= 1;\n            if (l < 1)\n                return false;\n            c = this.getLineLength(l);\n        }\n        else {\n            c = Math.min(c - 1, this.getLineLength(l));\n        }\n        pos.line = l;\n        pos.column = c;\n        return skipSpaces\n            ? !!this.skipSpaces(pos, true, true)\n            : true;\n    };\n    Lines.prototype.firstPos = function () {\n        // Trivial, but provided for completeness.\n        return { line: 1, column: 0 };\n    };\n    Lines.prototype.lastPos = function () {\n        return {\n            line: this.length,\n            column: this.getLineLength(this.length)\n        };\n    };\n    Lines.prototype.skipSpaces = function (pos, backward, modifyInPlace) {\n        if (backward === void 0) { backward = false; }\n        if (modifyInPlace === void 0) { modifyInPlace = false; }\n        if (pos) {\n            pos = modifyInPlace ? pos : {\n                line: pos.line,\n                column: pos.column\n            };\n        }\n        else if (backward) {\n            pos = this.lastPos();\n        }\n        else {\n            pos = this.firstPos();\n        }\n        if (backward) {\n            while (this.prevPos(pos)) {\n                if (!isOnlyWhitespace(this.charAt(pos)) &&\n                    this.nextPos(pos)) {\n                    return pos;\n                }\n            }\n            return null;\n        }\n        else {\n            while (isOnlyWhitespace(this.charAt(pos))) {\n                if (!this.nextPos(pos)) {\n                    return null;\n                }\n            }\n            return pos;\n        }\n    };\n    Lines.prototype.trimLeft = function () {\n        var pos = this.skipSpaces(this.firstPos(), false, true);\n        return pos ? this.slice(pos) : emptyLines;\n    };\n    Lines.prototype.trimRight = function () {\n        var pos = this.skipSpaces(this.lastPos(), true, true);\n        return pos ? this.slice(this.firstPos(), pos) : emptyLines;\n    };\n    Lines.prototype.trim = function () {\n        var start = this.skipSpaces(this.firstPos(), false, true);\n        if (start === null) {\n            return emptyLines;\n        }\n        var end = this.skipSpaces(this.lastPos(), true, true);\n        if (end === null) {\n            return emptyLines;\n        }\n        return this.slice(start, end);\n    };\n    Lines.prototype.eachPos = function (callback, startPos, skipSpaces) {\n        if (startPos === void 0) { startPos = this.firstPos(); }\n        if (skipSpaces === void 0) { skipSpaces = false; }\n        var pos = this.firstPos();\n        if (startPos) {\n            pos.line = startPos.line,\n                pos.column = startPos.column;\n        }\n        if (skipSpaces && !this.skipSpaces(pos, false, true)) {\n            return; // Encountered nothing but spaces.\n        }\n        do\n            callback.call(this, pos);\n        while (this.nextPos(pos, skipSpaces));\n    };\n    Lines.prototype.bootstrapSlice = function (start, end) {\n        var strings = this.toString().split(lineTerminatorSeqExp).slice(start.line - 1, end.line);\n        if (strings.length > 0) {\n            strings.push(strings.pop().slice(0, end.column));\n            strings[0] = strings[0].slice(start.column);\n        }\n        return fromString(strings.join(\"\\n\"));\n    };\n    Lines.prototype.slice = function (start, end) {\n        if (!end) {\n            if (!start) {\n                // The client seems to want a copy of this Lines object, but\n                // Lines objects are immutable, so it's perfectly adequate to\n                // return the same object.\n                return this;\n            }\n            // Slice to the end if no end position was provided.\n            end = this.lastPos();\n        }\n        if (!start) {\n            throw new Error(\"cannot slice with end but not start\");\n        }\n        var sliced = this.infos.slice(start.line - 1, end.line);\n        if (start.line === end.line) {\n            sliced[0] = sliceInfo(sliced[0], start.column, end.column);\n        }\n        else {\n            assert_1.default.ok(start.line < end.line);\n            sliced[0] = sliceInfo(sliced[0], start.column);\n            sliced.push(sliceInfo(sliced.pop(), 0, end.column));\n        }\n        var lines = new Lines(sliced);\n        if (this.mappings.length > 0) {\n            var newMappings = lines.mappings;\n            assert_1.default.strictEqual(newMappings.length, 0);\n            this.mappings.forEach(function (mapping) {\n                var sliced = mapping.slice(this, start, end);\n                if (sliced) {\n                    newMappings.push(sliced);\n                }\n            }, this);\n        }\n        return lines;\n    };\n    Lines.prototype.bootstrapSliceString = function (start, end, options) {\n        return this.slice(start, end).toString(options);\n    };\n    Lines.prototype.sliceString = function (start, end, options) {\n        if (start === void 0) { start = this.firstPos(); }\n        if (end === void 0) { end = this.lastPos(); }\n        options = options_1.normalize(options);\n        var parts = [];\n        var _a = options.tabWidth, tabWidth = _a === void 0 ? 2 : _a;\n        for (var line = start.line; line <= end.line; ++line) {\n            var info = this.infos[line - 1];\n            if (line === start.line) {\n                if (line === end.line) {\n                    info = sliceInfo(info, start.column, end.column);\n                }\n                else {\n                    info = sliceInfo(info, start.column);\n                }\n            }\n            else if (line === end.line) {\n                info = sliceInfo(info, 0, end.column);\n            }\n            var indent = Math.max(info.indent, 0);\n            var before = info.line.slice(0, info.sliceStart);\n            if (options.reuseWhitespace &&\n                isOnlyWhitespace(before) &&\n                countSpaces(before, options.tabWidth) === indent) {\n                // Reuse original spaces if the indentation is correct.\n                parts.push(info.line.slice(0, info.sliceEnd));\n                continue;\n            }\n            var tabs = 0;\n            var spaces = indent;\n            if (options.useTabs) {\n                tabs = Math.floor(indent / tabWidth);\n                spaces -= tabs * tabWidth;\n            }\n            var result = \"\";\n            if (tabs > 0) {\n                result += new Array(tabs + 1).join(\"\\t\");\n            }\n            if (spaces > 0) {\n                result += new Array(spaces + 1).join(\" \");\n            }\n            result += info.line.slice(info.sliceStart, info.sliceEnd);\n            parts.push(result);\n        }\n        return parts.join(options.lineTerminator);\n    };\n    Lines.prototype.isEmpty = function () {\n        return this.length < 2 && this.getLineLength(1) < 1;\n    };\n    Lines.prototype.join = function (elements) {\n        var separator = this;\n        var infos = [];\n        var mappings = [];\n        var prevInfo;\n        function appendLines(linesOrNull) {\n            if (linesOrNull === null) {\n                return;\n            }\n            if (prevInfo) {\n                var info = linesOrNull.infos[0];\n                var indent = new Array(info.indent + 1).join(\" \");\n                var prevLine = infos.length;\n                var prevColumn = Math.max(prevInfo.indent, 0) +\n                    prevInfo.sliceEnd - prevInfo.sliceStart;\n                prevInfo.line = prevInfo.line.slice(0, prevInfo.sliceEnd) + indent + info.line.slice(info.sliceStart, info.sliceEnd);\n                // If any part of a line is indentation-locked, the whole line\n                // will be indentation-locked.\n                prevInfo.locked = prevInfo.locked || info.locked;\n                prevInfo.sliceEnd = prevInfo.line.length;\n                if (linesOrNull.mappings.length > 0) {\n                    linesOrNull.mappings.forEach(function (mapping) {\n                        mappings.push(mapping.add(prevLine, prevColumn));\n                    });\n                }\n            }\n            else if (linesOrNull.mappings.length > 0) {\n                mappings.push.apply(mappings, linesOrNull.mappings);\n            }\n            linesOrNull.infos.forEach(function (info, i) {\n                if (!prevInfo || i > 0) {\n                    prevInfo = __assign({}, info);\n                    infos.push(prevInfo);\n                }\n            });\n        }\n        function appendWithSeparator(linesOrNull, i) {\n            if (i > 0)\n                appendLines(separator);\n            appendLines(linesOrNull);\n        }\n        elements.map(function (elem) {\n            var lines = fromString(elem);\n            if (lines.isEmpty())\n                return null;\n            return lines;\n        }).forEach(function (linesOrNull, i) {\n            if (separator.isEmpty()) {\n                appendLines(linesOrNull);\n            }\n            else {\n                appendWithSeparator(linesOrNull, i);\n            }\n        });\n        if (infos.length < 1)\n            return emptyLines;\n        var lines = new Lines(infos);\n        lines.mappings = mappings;\n        return lines;\n    };\n    Lines.prototype.concat = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var list = [this];\n        list.push.apply(list, args);\n        assert_1.default.strictEqual(list.length, args.length + 1);\n        return emptyLines.join(list);\n    };\n    return Lines;\n}());\nexports.Lines = Lines;\nvar fromStringCache = {};\nvar hasOwn = fromStringCache.hasOwnProperty;\nvar maxCacheKeyLen = 10;\nfunction countSpaces(spaces, tabWidth) {\n    var count = 0;\n    var len = spaces.length;\n    for (var i = 0; i < len; ++i) {\n        switch (spaces.charCodeAt(i)) {\n            case 9: // '\\t'\n                assert_1.default.strictEqual(typeof tabWidth, \"number\");\n                assert_1.default.ok(tabWidth > 0);\n                var next = Math.ceil(count / tabWidth) * tabWidth;\n                if (next === count) {\n                    count += tabWidth;\n                }\n                else {\n                    count = next;\n                }\n                break;\n            case 11: // '\\v'\n            case 12: // '\\f'\n            case 13: // '\\r'\n            case 0xfeff: // zero-width non-breaking space\n                // These characters contribute nothing to indentation.\n                break;\n            case 32: // ' '\n            default: // Treat all other whitespace like ' '.\n                count += 1;\n                break;\n        }\n    }\n    return count;\n}\nexports.countSpaces = countSpaces;\nvar leadingSpaceExp = /^\\s*/;\n// As specified here: http://www.ecma-international.org/ecma-262/6.0/#sec-line-terminators\nvar lineTerminatorSeqExp = /\\u000D\\u000A|\\u000D(?!\\u000A)|\\u000A|\\u2028|\\u2029/;\n/**\n * @param {Object} options - Options object that configures printing.\n */\nfunction fromString(string, options) {\n    if (string instanceof Lines)\n        return string;\n    string += \"\";\n    var tabWidth = options && options.tabWidth;\n    var tabless = string.indexOf(\"\\t\") < 0;\n    var cacheable = !options && tabless && (string.length <= maxCacheKeyLen);\n    assert_1.default.ok(tabWidth || tabless, \"No tab width specified but encountered tabs in string\\n\" + string);\n    if (cacheable && hasOwn.call(fromStringCache, string))\n        return fromStringCache[string];\n    var lines = new Lines(string.split(lineTerminatorSeqExp).map(function (line) {\n        // TODO: handle null exec result\n        var spaces = leadingSpaceExp.exec(line)[0];\n        return {\n            line: line,\n            indent: countSpaces(spaces, tabWidth),\n            // Boolean indicating whether this line can be reindented.\n            locked: false,\n            sliceStart: spaces.length,\n            sliceEnd: line.length\n        };\n    }), options_1.normalize(options).sourceFileName);\n    if (cacheable)\n        fromStringCache[string] = lines;\n    return lines;\n}\nexports.fromString = fromString;\nfunction isOnlyWhitespace(string) {\n    return !/\\S/.test(string);\n}\nfunction sliceInfo(info, startCol, endCol) {\n    var sliceStart = info.sliceStart;\n    var sliceEnd = info.sliceEnd;\n    var indent = Math.max(info.indent, 0);\n    var lineLength = indent + sliceEnd - sliceStart;\n    if (typeof endCol === \"undefined\") {\n        endCol = lineLength;\n    }\n    startCol = Math.max(startCol, 0);\n    endCol = Math.min(endCol, lineLength);\n    endCol = Math.max(endCol, startCol);\n    if (endCol < indent) {\n        indent = endCol;\n        sliceEnd = sliceStart;\n    }\n    else {\n        sliceEnd -= lineLength - endCol;\n    }\n    lineLength = endCol;\n    lineLength -= startCol;\n    if (startCol < indent) {\n        indent -= startCol;\n    }\n    else {\n        startCol -= indent;\n        indent = 0;\n        sliceStart += startCol;\n    }\n    assert_1.default.ok(indent >= 0);\n    assert_1.default.ok(sliceStart <= sliceEnd);\n    assert_1.default.strictEqual(lineLength, indent + sliceEnd - sliceStart);\n    if (info.indent === indent &&\n        info.sliceStart === sliceStart &&\n        info.sliceEnd === sliceEnd) {\n        return info;\n    }\n    return {\n        line: info.line,\n        indent: indent,\n        // A destructive slice always unlocks indentation.\n        locked: false,\n        sliceStart: sliceStart,\n        sliceEnd: sliceEnd\n    };\n}\nfunction concat(elements) {\n    return emptyLines.join(elements);\n}\nexports.concat = concat;\n;\n// The emptyLines object needs to be created all the way down here so that\n// Lines.prototype will be fully populated.\nvar emptyLines = fromString(\"\");\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/lib/lines.js?");

/***/ }),

/***/ "../../node_modules/recast/lib/mapping.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/lib/mapping.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar assert_1 = __importDefault(__webpack_require__(/*! assert */ \"../../node_modules/assert/assert.js\"));\nvar util_1 = __webpack_require__(/*! ./util */ \"../../node_modules/recast/lib/util.js\");\nvar Mapping = /** @class */ (function () {\n    function Mapping(sourceLines, sourceLoc, targetLoc) {\n        if (targetLoc === void 0) { targetLoc = sourceLoc; }\n        this.sourceLines = sourceLines;\n        this.sourceLoc = sourceLoc;\n        this.targetLoc = targetLoc;\n    }\n    Mapping.prototype.slice = function (lines, start, end) {\n        if (end === void 0) { end = lines.lastPos(); }\n        var sourceLines = this.sourceLines;\n        var sourceLoc = this.sourceLoc;\n        var targetLoc = this.targetLoc;\n        function skip(name) {\n            var sourceFromPos = sourceLoc[name];\n            var targetFromPos = targetLoc[name];\n            var targetToPos = start;\n            if (name === \"end\") {\n                targetToPos = end;\n            }\n            else {\n                assert_1.default.strictEqual(name, \"start\");\n            }\n            return skipChars(sourceLines, sourceFromPos, lines, targetFromPos, targetToPos);\n        }\n        if (util_1.comparePos(start, targetLoc.start) <= 0) {\n            if (util_1.comparePos(targetLoc.end, end) <= 0) {\n                targetLoc = {\n                    start: subtractPos(targetLoc.start, start.line, start.column),\n                    end: subtractPos(targetLoc.end, start.line, start.column)\n                };\n                // The sourceLoc can stay the same because the contents of the\n                // targetLoc have not changed.\n            }\n            else if (util_1.comparePos(end, targetLoc.start) <= 0) {\n                return null;\n            }\n            else {\n                sourceLoc = {\n                    start: sourceLoc.start,\n                    end: skip(\"end\")\n                };\n                targetLoc = {\n                    start: subtractPos(targetLoc.start, start.line, start.column),\n                    end: subtractPos(end, start.line, start.column)\n                };\n            }\n        }\n        else {\n            if (util_1.comparePos(targetLoc.end, start) <= 0) {\n                return null;\n            }\n            if (util_1.comparePos(targetLoc.end, end) <= 0) {\n                sourceLoc = {\n                    start: skip(\"start\"),\n                    end: sourceLoc.end\n                };\n                targetLoc = {\n                    // Same as subtractPos(start, start.line, start.column):\n                    start: { line: 1, column: 0 },\n                    end: subtractPos(targetLoc.end, start.line, start.column)\n                };\n            }\n            else {\n                sourceLoc = {\n                    start: skip(\"start\"),\n                    end: skip(\"end\")\n                };\n                targetLoc = {\n                    // Same as subtractPos(start, start.line, start.column):\n                    start: { line: 1, column: 0 },\n                    end: subtractPos(end, start.line, start.column)\n                };\n            }\n        }\n        return new Mapping(this.sourceLines, sourceLoc, targetLoc);\n    };\n    Mapping.prototype.add = function (line, column) {\n        return new Mapping(this.sourceLines, this.sourceLoc, {\n            start: addPos(this.targetLoc.start, line, column),\n            end: addPos(this.targetLoc.end, line, column)\n        });\n    };\n    Mapping.prototype.subtract = function (line, column) {\n        return new Mapping(this.sourceLines, this.sourceLoc, {\n            start: subtractPos(this.targetLoc.start, line, column),\n            end: subtractPos(this.targetLoc.end, line, column)\n        });\n    };\n    Mapping.prototype.indent = function (by, skipFirstLine, noNegativeColumns) {\n        if (skipFirstLine === void 0) { skipFirstLine = false; }\n        if (noNegativeColumns === void 0) { noNegativeColumns = false; }\n        if (by === 0) {\n            return this;\n        }\n        var targetLoc = this.targetLoc;\n        var startLine = targetLoc.start.line;\n        var endLine = targetLoc.end.line;\n        if (skipFirstLine && startLine === 1 && endLine === 1) {\n            return this;\n        }\n        targetLoc = {\n            start: targetLoc.start,\n            end: targetLoc.end\n        };\n        if (!skipFirstLine || startLine > 1) {\n            var startColumn = targetLoc.start.column + by;\n            targetLoc.start = {\n                line: startLine,\n                column: noNegativeColumns\n                    ? Math.max(0, startColumn)\n                    : startColumn\n            };\n        }\n        if (!skipFirstLine || endLine > 1) {\n            var endColumn = targetLoc.end.column + by;\n            targetLoc.end = {\n                line: endLine,\n                column: noNegativeColumns\n                    ? Math.max(0, endColumn)\n                    : endColumn\n            };\n        }\n        return new Mapping(this.sourceLines, this.sourceLoc, targetLoc);\n    };\n    return Mapping;\n}());\nexports.default = Mapping;\nfunction addPos(toPos, line, column) {\n    return {\n        line: toPos.line + line - 1,\n        column: (toPos.line === 1)\n            ? toPos.column + column\n            : toPos.column\n    };\n}\nfunction subtractPos(fromPos, line, column) {\n    return {\n        line: fromPos.line - line + 1,\n        column: (fromPos.line === line)\n            ? fromPos.column - column\n            : fromPos.column\n    };\n}\nfunction skipChars(sourceLines, sourceFromPos, targetLines, targetFromPos, targetToPos) {\n    var targetComparison = util_1.comparePos(targetFromPos, targetToPos);\n    if (targetComparison === 0) {\n        // Trivial case: no characters to skip.\n        return sourceFromPos;\n    }\n    if (targetComparison < 0) {\n        // Skipping forward.\n        var sourceCursor = sourceLines.skipSpaces(sourceFromPos) || sourceLines.lastPos();\n        var targetCursor = targetLines.skipSpaces(targetFromPos) || targetLines.lastPos();\n        var lineDiff = targetToPos.line - targetCursor.line;\n        sourceCursor.line += lineDiff;\n        targetCursor.line += lineDiff;\n        if (lineDiff > 0) {\n            // If jumping to later lines, reset columns to the beginnings\n            // of those lines.\n            sourceCursor.column = 0;\n            targetCursor.column = 0;\n        }\n        else {\n            assert_1.default.strictEqual(lineDiff, 0);\n        }\n        while (util_1.comparePos(targetCursor, targetToPos) < 0 &&\n            targetLines.nextPos(targetCursor, true)) {\n            assert_1.default.ok(sourceLines.nextPos(sourceCursor, true));\n            assert_1.default.strictEqual(sourceLines.charAt(sourceCursor), targetLines.charAt(targetCursor));\n        }\n    }\n    else {\n        // Skipping backward.\n        var sourceCursor = sourceLines.skipSpaces(sourceFromPos, true) || sourceLines.firstPos();\n        var targetCursor = targetLines.skipSpaces(targetFromPos, true) || targetLines.firstPos();\n        var lineDiff = targetToPos.line - targetCursor.line;\n        sourceCursor.line += lineDiff;\n        targetCursor.line += lineDiff;\n        if (lineDiff < 0) {\n            // If jumping to earlier lines, reset columns to the ends of\n            // those lines.\n            sourceCursor.column = sourceLines.getLineLength(sourceCursor.line);\n            targetCursor.column = targetLines.getLineLength(targetCursor.line);\n        }\n        else {\n            assert_1.default.strictEqual(lineDiff, 0);\n        }\n        while (util_1.comparePos(targetToPos, targetCursor) < 0 &&\n            targetLines.prevPos(targetCursor, true)) {\n            assert_1.default.ok(sourceLines.prevPos(sourceCursor, true));\n            assert_1.default.strictEqual(sourceLines.charAt(sourceCursor), targetLines.charAt(targetCursor));\n        }\n    }\n    return sourceCursor;\n}\nmodule.exports = exports[\"default\"];\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/lib/mapping.js?");

/***/ }),

/***/ "../../node_modules/recast/lib/options.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/lib/options.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar defaults = {\n    parser: __webpack_require__(/*! ../parsers/esprima */ \"../../node_modules/recast/parsers/esprima.js\"),\n    tabWidth: 4,\n    useTabs: false,\n    reuseWhitespace: true,\n    lineTerminator: __webpack_require__(/*! os */ \"../../node_modules/os-browserify/browser.js\").EOL || \"\\n\",\n    wrapColumn: 74,\n    sourceFileName: null,\n    sourceMapName: null,\n    sourceRoot: null,\n    inputSourceMap: null,\n    range: false,\n    tolerant: true,\n    quote: null,\n    trailingComma: false,\n    arrayBracketSpacing: false,\n    objectCurlySpacing: true,\n    arrowParensAlways: false,\n    flowObjectCommas: true,\n    tokens: true\n}, hasOwn = defaults.hasOwnProperty;\n// Copy options and fill in default values.\nfunction normalize(opts) {\n    var options = opts || defaults;\n    function get(key) {\n        return hasOwn.call(options, key)\n            ? options[key]\n            : defaults[key];\n    }\n    return {\n        tabWidth: +get(\"tabWidth\"),\n        useTabs: !!get(\"useTabs\"),\n        reuseWhitespace: !!get(\"reuseWhitespace\"),\n        lineTerminator: get(\"lineTerminator\"),\n        wrapColumn: Math.max(get(\"wrapColumn\"), 0),\n        sourceFileName: get(\"sourceFileName\"),\n        sourceMapName: get(\"sourceMapName\"),\n        sourceRoot: get(\"sourceRoot\"),\n        inputSourceMap: get(\"inputSourceMap\"),\n        parser: get(\"esprima\") || get(\"parser\"),\n        range: get(\"range\"),\n        tolerant: get(\"tolerant\"),\n        quote: get(\"quote\"),\n        trailingComma: get(\"trailingComma\"),\n        arrayBracketSpacing: get(\"arrayBracketSpacing\"),\n        objectCurlySpacing: get(\"objectCurlySpacing\"),\n        arrowParensAlways: get(\"arrowParensAlways\"),\n        flowObjectCommas: get(\"flowObjectCommas\"),\n        tokens: !!get(\"tokens\")\n    };\n}\nexports.normalize = normalize;\n;\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/lib/options.js?");

/***/ }),

/***/ "../../node_modules/recast/lib/parser.js":
/*!******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/lib/parser.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar assert_1 = __importDefault(__webpack_require__(/*! assert */ \"../../node_modules/assert/assert.js\"));\nvar types_1 = __importDefault(__webpack_require__(/*! ./types */ \"../../node_modules/recast/lib/types.js\"));\nvar b = types_1.default.builders;\nvar isObject = types_1.default.builtInTypes.object;\nvar isArray = types_1.default.builtInTypes.array;\nvar options_1 = __webpack_require__(/*! ./options */ \"../../node_modules/recast/lib/options.js\");\nvar lines_1 = __webpack_require__(/*! ./lines */ \"../../node_modules/recast/lib/lines.js\");\nvar comments_1 = __webpack_require__(/*! ./comments */ \"../../node_modules/recast/lib/comments.js\");\nvar util = __importStar(__webpack_require__(/*! ./util */ \"../../node_modules/recast/lib/util.js\"));\nfunction parse(source, options) {\n    options = options_1.normalize(options);\n    var lines = lines_1.fromString(source, options);\n    var sourceWithoutTabs = lines.toString({\n        tabWidth: options.tabWidth,\n        reuseWhitespace: false,\n        useTabs: false\n    });\n    var comments = [];\n    var ast = options.parser.parse(sourceWithoutTabs, {\n        jsx: true,\n        loc: true,\n        locations: true,\n        range: options.range,\n        comment: true,\n        onComment: comments,\n        tolerant: util.getOption(options, \"tolerant\", true),\n        ecmaVersion: 6,\n        sourceType: util.getOption(options, \"sourceType\", \"module\")\n    });\n    // Use ast.tokens if possible, and otherwise fall back to the Esprima\n    // tokenizer. All the preconfigured ../parsers/* expose ast.tokens\n    // automatically, but custom parsers might need additional configuration\n    // to avoid this fallback.\n    var tokens = Array.isArray(ast.tokens)\n        ? ast.tokens\n        : __webpack_require__(/*! esprima */ \"../../node_modules/esprima/dist/esprima.js\").tokenize(sourceWithoutTabs, {\n            loc: true\n        });\n    // We will reattach the tokens array to the file object below.\n    delete ast.tokens;\n    // Make sure every token has a token.value string.\n    tokens.forEach(function (token) {\n        if (typeof token.value !== \"string\") {\n            token.value = lines.sliceString(token.loc.start, token.loc.end);\n        }\n    });\n    if (Array.isArray(ast.comments)) {\n        comments = ast.comments;\n        delete ast.comments;\n    }\n    if (ast.loc) {\n        // If the source was empty, some parsers give loc.{start,end}.line\n        // values of 0, instead of the minimum of 1.\n        util.fixFaultyLocations(ast, lines);\n    }\n    else {\n        ast.loc = {\n            start: lines.firstPos(),\n            end: lines.lastPos()\n        };\n    }\n    ast.loc.lines = lines;\n    ast.loc.indent = 0;\n    var file;\n    var program;\n    if (ast.type === \"Program\") {\n        program = ast;\n        // In order to ensure we reprint leading and trailing program\n        // comments, wrap the original Program node with a File node. Only\n        // ESTree parsers (Acorn and Esprima) return a Program as the root AST\n        // node. Most other (Babylon-like) parsers return a File.\n        file = b.file(ast, options.sourceFileName || null);\n        file.loc = {\n            start: lines.firstPos(),\n            end: lines.lastPos(),\n            lines: lines,\n            indent: 0\n        };\n    }\n    else if (ast.type === \"File\") {\n        file = ast;\n        program = file.program;\n    }\n    // Expose file.tokens unless the caller passed false for options.tokens.\n    if (options.tokens) {\n        file.tokens = tokens;\n    }\n    // Expand the Program's .loc to include all comments (not just those\n    // attached to the Program node, as its children may have comments as\n    // well), since sometimes program.loc.{start,end} will coincide with the\n    // .loc.{start,end} of the first and last *statements*, mistakenly\n    // excluding comments that fall outside that region.\n    var trueProgramLoc = util.getTrueLoc({\n        type: program.type,\n        loc: program.loc,\n        body: [],\n        comments: comments\n    }, lines);\n    program.loc.start = trueProgramLoc.start;\n    program.loc.end = trueProgramLoc.end;\n    // Passing file.program here instead of just file means that initial\n    // comments will be attached to program.body[0] instead of program.\n    comments_1.attach(comments, program.body.length ? file.program : file, lines);\n    // Return a copy of the original AST so that any changes made may be\n    // compared to the original.\n    return new TreeCopier(lines, tokens).copy(file);\n}\nexports.parse = parse;\n;\nvar TreeCopier = function TreeCopier(lines, tokens) {\n    assert_1.default.ok(this instanceof TreeCopier);\n    this.lines = lines;\n    this.tokens = tokens;\n    this.startTokenIndex = 0;\n    this.endTokenIndex = tokens.length;\n    this.indent = 0;\n    this.seen = new Map;\n};\nvar TCp = TreeCopier.prototype;\nTCp.copy = function (node) {\n    if (this.seen.has(node)) {\n        return this.seen.get(node);\n    }\n    if (isArray.check(node)) {\n        var copy = new Array(node.length);\n        this.seen.set(node, copy);\n        node.forEach(function (item, i) {\n            copy[i] = this.copy(item);\n        }, this);\n        return copy;\n    }\n    if (!isObject.check(node)) {\n        return node;\n    }\n    util.fixFaultyLocations(node, this.lines);\n    var copy = Object.create(Object.getPrototypeOf(node), {\n        original: {\n            value: node,\n            configurable: false,\n            enumerable: false,\n            writable: true\n        }\n    });\n    this.seen.set(node, copy);\n    var loc = node.loc;\n    var oldIndent = this.indent;\n    var newIndent = oldIndent;\n    var oldStartTokenIndex = this.startTokenIndex;\n    var oldEndTokenIndex = this.endTokenIndex;\n    if (loc) {\n        // When node is a comment, we set node.loc.indent to\n        // node.loc.start.column so that, when/if we print the comment by\n        // itself, we can strip that much whitespace from the left margin of\n        // the comment. This only really matters for multiline Block comments,\n        // but it doesn't hurt for Line comments.\n        if (node.type === \"Block\" || node.type === \"Line\" ||\n            node.type === \"CommentBlock\" || node.type === \"CommentLine\" ||\n            this.lines.isPrecededOnlyByWhitespace(loc.start)) {\n            newIndent = this.indent = loc.start.column;\n        }\n        // Every node.loc has a reference to the original source lines as well\n        // as a complete list of source tokens.\n        loc.lines = this.lines;\n        loc.tokens = this.tokens;\n        loc.indent = newIndent;\n        // Set loc.start.token and loc.end.token such that\n        // loc.tokens.slice(loc.start.token, loc.end.token) returns a list of\n        // all the tokens that make up this node.\n        this.findTokenRange(loc);\n    }\n    var keys = Object.keys(node);\n    var keyCount = keys.length;\n    for (var i = 0; i < keyCount; ++i) {\n        var key = keys[i];\n        if (key === \"loc\") {\n            copy[key] = node[key];\n        }\n        else if (key === \"tokens\" &&\n            node.type === \"File\") {\n            // Preserve file.tokens (uncopied) in case client code cares about\n            // it, even though Recast ignores it when reprinting.\n            copy[key] = node[key];\n        }\n        else {\n            copy[key] = this.copy(node[key]);\n        }\n    }\n    this.indent = oldIndent;\n    this.startTokenIndex = oldStartTokenIndex;\n    this.endTokenIndex = oldEndTokenIndex;\n    return copy;\n};\n// If we didn't have any idea where in loc.tokens to look for tokens\n// contained by this loc, a binary search would be appropriate, but\n// because we maintain this.startTokenIndex and this.endTokenIndex as we\n// traverse the AST, we only need to make small (linear) adjustments to\n// those indexes with each recursive iteration.\nTCp.findTokenRange = function (loc) {\n    // In the unlikely event that loc.tokens[this.startTokenIndex] starts\n    // *after* loc.start, we need to rewind this.startTokenIndex first.\n    while (this.startTokenIndex > 0) {\n        var token = loc.tokens[this.startTokenIndex];\n        if (util.comparePos(loc.start, token.loc.start) < 0) {\n            --this.startTokenIndex;\n        }\n        else\n            break;\n    }\n    // In the unlikely event that loc.tokens[this.endTokenIndex - 1] ends\n    // *before* loc.end, we need to fast-forward this.endTokenIndex first.\n    while (this.endTokenIndex < loc.tokens.length) {\n        var token = loc.tokens[this.endTokenIndex];\n        if (util.comparePos(token.loc.end, loc.end) < 0) {\n            ++this.endTokenIndex;\n        }\n        else\n            break;\n    }\n    // Increment this.startTokenIndex until we've found the first token\n    // contained by this node.\n    while (this.startTokenIndex < this.endTokenIndex) {\n        var token = loc.tokens[this.startTokenIndex];\n        if (util.comparePos(token.loc.start, loc.start) < 0) {\n            ++this.startTokenIndex;\n        }\n        else\n            break;\n    }\n    // Index into loc.tokens of the first token within this node.\n    loc.start.token = this.startTokenIndex;\n    // Decrement this.endTokenIndex until we've found the first token after\n    // this node (not contained by the node).\n    while (this.endTokenIndex > this.startTokenIndex) {\n        var token = loc.tokens[this.endTokenIndex - 1];\n        if (util.comparePos(loc.end, token.loc.end) < 0) {\n            --this.endTokenIndex;\n        }\n        else\n            break;\n    }\n    // Index into loc.tokens of the first token *after* this node.\n    // If loc.start.token === loc.end.token, the node contains no tokens,\n    // and the index is that of the next token following this node.\n    loc.end.token = this.endTokenIndex;\n};\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/lib/parser.js?");

/***/ }),

/***/ "../../node_modules/recast/lib/patcher.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/lib/patcher.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar assert_1 = __importDefault(__webpack_require__(/*! assert */ \"../../node_modules/assert/assert.js\"));\nvar linesModule = __importStar(__webpack_require__(/*! ./lines */ \"../../node_modules/recast/lib/lines.js\"));\nvar types_1 = __importDefault(__webpack_require__(/*! ./types */ \"../../node_modules/recast/lib/types.js\"));\nvar Printable = types_1.default.namedTypes.Printable;\nvar Expression = types_1.default.namedTypes.Expression;\nvar ReturnStatement = types_1.default.namedTypes.ReturnStatement;\nvar SourceLocation = types_1.default.namedTypes.SourceLocation;\nvar util_1 = __webpack_require__(/*! ./util */ \"../../node_modules/recast/lib/util.js\");\nvar fast_path_1 = __importDefault(__webpack_require__(/*! ./fast-path */ \"../../node_modules/recast/lib/fast-path.js\"));\nvar isObject = types_1.default.builtInTypes.object;\nvar isArray = types_1.default.builtInTypes.array;\nvar isString = types_1.default.builtInTypes.string;\nvar riskyAdjoiningCharExp = /[0-9a-z_$]/i;\nvar Patcher = function Patcher(lines) {\n    assert_1.default.ok(this instanceof Patcher);\n    assert_1.default.ok(lines instanceof linesModule.Lines);\n    var self = this, replacements = [];\n    self.replace = function (loc, lines) {\n        if (isString.check(lines))\n            lines = linesModule.fromString(lines);\n        replacements.push({\n            lines: lines,\n            start: loc.start,\n            end: loc.end\n        });\n    };\n    self.get = function (loc) {\n        // If no location is provided, return the complete Lines object.\n        loc = loc || {\n            start: { line: 1, column: 0 },\n            end: { line: lines.length,\n                column: lines.getLineLength(lines.length) }\n        };\n        var sliceFrom = loc.start, toConcat = [];\n        function pushSlice(from, to) {\n            assert_1.default.ok(util_1.comparePos(from, to) <= 0);\n            toConcat.push(lines.slice(from, to));\n        }\n        replacements.sort(function (a, b) {\n            return util_1.comparePos(a.start, b.start);\n        }).forEach(function (rep) {\n            if (util_1.comparePos(sliceFrom, rep.start) > 0) {\n                // Ignore nested replacement ranges.\n            }\n            else {\n                pushSlice(sliceFrom, rep.start);\n                toConcat.push(rep.lines);\n                sliceFrom = rep.end;\n            }\n        });\n        pushSlice(sliceFrom, loc.end);\n        return linesModule.concat(toConcat);\n    };\n};\nexports.Patcher = Patcher;\nvar Pp = Patcher.prototype;\nPp.tryToReprintComments = function (newNode, oldNode, print) {\n    var patcher = this;\n    if (!newNode.comments &&\n        !oldNode.comments) {\n        // We were (vacuously) able to reprint all the comments!\n        return true;\n    }\n    var newPath = fast_path_1.default.from(newNode);\n    var oldPath = fast_path_1.default.from(oldNode);\n    newPath.stack.push(\"comments\", getSurroundingComments(newNode));\n    oldPath.stack.push(\"comments\", getSurroundingComments(oldNode));\n    var reprints = [];\n    var ableToReprintComments = findArrayReprints(newPath, oldPath, reprints);\n    // No need to pop anything from newPath.stack or oldPath.stack, since\n    // newPath and oldPath are fresh local variables.\n    if (ableToReprintComments && reprints.length > 0) {\n        reprints.forEach(function (reprint) {\n            var oldComment = reprint.oldPath.getValue();\n            assert_1.default.ok(oldComment.leading || oldComment.trailing);\n            patcher.replace(oldComment.loc, \n            // Comments can't have .comments, so it doesn't matter whether we\n            // print with comments or without.\n            print(reprint.newPath).indentTail(oldComment.loc.indent));\n        });\n    }\n    return ableToReprintComments;\n};\n// Get all comments that are either leading or trailing, ignoring any\n// comments that occur inside node.loc. Returns an empty array for nodes\n// with no leading or trailing comments.\nfunction getSurroundingComments(node) {\n    var result = [];\n    if (node.comments &&\n        node.comments.length > 0) {\n        node.comments.forEach(function (comment) {\n            if (comment.leading || comment.trailing) {\n                result.push(comment);\n            }\n        });\n    }\n    return result;\n}\nPp.deleteComments = function (node) {\n    if (!node.comments) {\n        return;\n    }\n    var patcher = this;\n    node.comments.forEach(function (comment) {\n        if (comment.leading) {\n            // Delete leading comments along with any trailing whitespace they\n            // might have.\n            patcher.replace({\n                start: comment.loc.start,\n                end: node.loc.lines.skipSpaces(comment.loc.end, false, false)\n            }, \"\");\n        }\n        else if (comment.trailing) {\n            // Delete trailing comments along with any leading whitespace they\n            // might have.\n            patcher.replace({\n                start: node.loc.lines.skipSpaces(comment.loc.start, true, false),\n                end: comment.loc.end\n            }, \"\");\n        }\n    });\n};\nfunction getReprinter(path) {\n    assert_1.default.ok(path instanceof fast_path_1.default);\n    // Make sure that this path refers specifically to a Node, rather than\n    // some non-Node subproperty of a Node.\n    var node = path.getValue();\n    if (!Printable.check(node))\n        return;\n    var orig = node.original;\n    var origLoc = orig && orig.loc;\n    var lines = origLoc && origLoc.lines;\n    var reprints = [];\n    if (!lines || !findReprints(path, reprints))\n        return;\n    return function (print) {\n        var patcher = new Patcher(lines);\n        reprints.forEach(function (reprint) {\n            var newNode = reprint.newPath.getValue();\n            var oldNode = reprint.oldPath.getValue();\n            SourceLocation.assert(oldNode.loc, true);\n            var needToPrintNewPathWithComments = !patcher.tryToReprintComments(newNode, oldNode, print);\n            if (needToPrintNewPathWithComments) {\n                // Since we were not able to preserve all leading/trailing\n                // comments, we delete oldNode's comments, print newPath with\n                // comments, and then patch the resulting lines where oldNode used\n                // to be.\n                patcher.deleteComments(oldNode);\n            }\n            var newLines = print(reprint.newPath, {\n                includeComments: needToPrintNewPathWithComments,\n                // If the oldNode we're replacing already had parentheses, we may\n                // not need to print the new node with any extra parentheses,\n                // because the existing parentheses will suffice. However, if the\n                // newNode has a different type than the oldNode, let the printer\n                // decide if reprint.newPath needs parentheses, as usual.\n                avoidRootParens: (oldNode.type === newNode.type &&\n                    reprint.oldPath.hasParens())\n            }).indentTail(oldNode.loc.indent);\n            var nls = needsLeadingSpace(lines, oldNode.loc, newLines);\n            var nts = needsTrailingSpace(lines, oldNode.loc, newLines);\n            // If we try to replace the argument of a ReturnStatement like\n            // return\"asdf\" with e.g. a literal null expression, we run the risk\n            // of ending up with returnnull, so we need to add an extra leading\n            // space in situations where that might happen. Likewise for\n            // \"asdf\"in obj. See #170.\n            if (nls || nts) {\n                var newParts = [];\n                nls && newParts.push(\" \");\n                newParts.push(newLines);\n                nts && newParts.push(\" \");\n                newLines = linesModule.concat(newParts);\n            }\n            patcher.replace(oldNode.loc, newLines);\n        });\n        // Recall that origLoc is the .loc of an ancestor node that is\n        // guaranteed to contain all the reprinted nodes and comments.\n        var patchedLines = patcher.get(origLoc).indentTail(-orig.loc.indent);\n        if (path.needsParens()) {\n            return linesModule.concat([\"(\", patchedLines, \")\"]);\n        }\n        return patchedLines;\n    };\n}\nexports.getReprinter = getReprinter;\n;\n// If the last character before oldLoc and the first character of newLines\n// are both identifier characters, they must be separated by a space,\n// otherwise they will most likely get fused together into a single token.\nfunction needsLeadingSpace(oldLines, oldLoc, newLines) {\n    var posBeforeOldLoc = util_1.copyPos(oldLoc.start);\n    // The character just before the location occupied by oldNode.\n    var charBeforeOldLoc = oldLines.prevPos(posBeforeOldLoc) &&\n        oldLines.charAt(posBeforeOldLoc);\n    // First character of the reprinted node.\n    var newFirstChar = newLines.charAt(newLines.firstPos());\n    return charBeforeOldLoc &&\n        riskyAdjoiningCharExp.test(charBeforeOldLoc) &&\n        newFirstChar &&\n        riskyAdjoiningCharExp.test(newFirstChar);\n}\n// If the last character of newLines and the first character after oldLoc\n// are both identifier characters, they must be separated by a space,\n// otherwise they will most likely get fused together into a single token.\nfunction needsTrailingSpace(oldLines, oldLoc, newLines) {\n    // The character just after the location occupied by oldNode.\n    var charAfterOldLoc = oldLines.charAt(oldLoc.end);\n    var newLastPos = newLines.lastPos();\n    // Last character of the reprinted node.\n    var newLastChar = newLines.prevPos(newLastPos) &&\n        newLines.charAt(newLastPos);\n    return newLastChar &&\n        riskyAdjoiningCharExp.test(newLastChar) &&\n        charAfterOldLoc &&\n        riskyAdjoiningCharExp.test(charAfterOldLoc);\n}\nfunction findReprints(newPath, reprints) {\n    var newNode = newPath.getValue();\n    Printable.assert(newNode);\n    var oldNode = newNode.original;\n    Printable.assert(oldNode);\n    assert_1.default.deepEqual(reprints, []);\n    if (newNode.type !== oldNode.type) {\n        return false;\n    }\n    var oldPath = new fast_path_1.default(oldNode);\n    var canReprint = findChildReprints(newPath, oldPath, reprints);\n    if (!canReprint) {\n        // Make absolutely sure the calling code does not attempt to reprint\n        // any nodes.\n        reprints.length = 0;\n    }\n    return canReprint;\n}\nfunction findAnyReprints(newPath, oldPath, reprints) {\n    var newNode = newPath.getValue();\n    var oldNode = oldPath.getValue();\n    if (newNode === oldNode)\n        return true;\n    if (isArray.check(newNode))\n        return findArrayReprints(newPath, oldPath, reprints);\n    if (isObject.check(newNode))\n        return findObjectReprints(newPath, oldPath, reprints);\n    return false;\n}\nfunction findArrayReprints(newPath, oldPath, reprints) {\n    var newNode = newPath.getValue();\n    var oldNode = oldPath.getValue();\n    if (newNode === oldNode ||\n        newPath.valueIsDuplicate() ||\n        oldPath.valueIsDuplicate()) {\n        return true;\n    }\n    isArray.assert(newNode);\n    var len = newNode.length;\n    if (!(isArray.check(oldNode) &&\n        oldNode.length === len))\n        return false;\n    for (var i = 0; i < len; ++i) {\n        newPath.stack.push(i, newNode[i]);\n        oldPath.stack.push(i, oldNode[i]);\n        var canReprint = findAnyReprints(newPath, oldPath, reprints);\n        newPath.stack.length -= 2;\n        oldPath.stack.length -= 2;\n        if (!canReprint) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction findObjectReprints(newPath, oldPath, reprints) {\n    var newNode = newPath.getValue();\n    isObject.assert(newNode);\n    if (newNode.original === null) {\n        // If newNode.original node was set to null, reprint the node.\n        return false;\n    }\n    var oldNode = oldPath.getValue();\n    if (!isObject.check(oldNode))\n        return false;\n    if (newNode === oldNode ||\n        newPath.valueIsDuplicate() ||\n        oldPath.valueIsDuplicate()) {\n        return true;\n    }\n    if (Printable.check(newNode)) {\n        if (!Printable.check(oldNode)) {\n            return false;\n        }\n        // Here we need to decide whether the reprinted code for newNode is\n        // appropriate for patching into the location of oldNode.\n        if (newNode.type === oldNode.type) {\n            var childReprints = [];\n            if (findChildReprints(newPath, oldPath, childReprints)) {\n                reprints.push.apply(reprints, childReprints);\n            }\n            else if (oldNode.loc) {\n                // If we have no .loc information for oldNode, then we won't be\n                // able to reprint it.\n                reprints.push({\n                    oldPath: oldPath.copy(),\n                    newPath: newPath.copy()\n                });\n            }\n            else {\n                return false;\n            }\n            return true;\n        }\n        if (Expression.check(newNode) &&\n            Expression.check(oldNode) &&\n            // If we have no .loc information for oldNode, then we won't be\n            // able to reprint it.\n            oldNode.loc) {\n            // If both nodes are subtypes of Expression, then we should be able\n            // to fill the location occupied by the old node with code printed\n            // for the new node with no ill consequences.\n            reprints.push({\n                oldPath: oldPath.copy(),\n                newPath: newPath.copy()\n            });\n            return true;\n        }\n        // The nodes have different types, and at least one of the types is\n        // not a subtype of the Expression type, so we cannot safely assume\n        // the nodes are syntactically interchangeable.\n        return false;\n    }\n    return findChildReprints(newPath, oldPath, reprints);\n}\nfunction findChildReprints(newPath, oldPath, reprints) {\n    var newNode = newPath.getValue();\n    var oldNode = oldPath.getValue();\n    isObject.assert(newNode);\n    isObject.assert(oldNode);\n    if (newNode.original === null) {\n        // If newNode.original node was set to null, reprint the node.\n        return false;\n    }\n    // If this node needs parentheses and will not be wrapped with\n    // parentheses when reprinted, then return false to skip reprinting and\n    // let it be printed generically.\n    if (newPath.needsParens() &&\n        !oldPath.hasParens()) {\n        return false;\n    }\n    var keys = util_1.getUnionOfKeys(oldNode, newNode);\n    if (oldNode.type === \"File\" ||\n        newNode.type === \"File\") {\n        // Don't bother traversing file.tokens, an often very large array\n        // returned by Babylon, and useless for our purposes.\n        delete keys.tokens;\n    }\n    // Don't bother traversing .loc objects looking for reprintable nodes.\n    delete keys.loc;\n    var originalReprintCount = reprints.length;\n    for (var k in keys) {\n        if (k.charAt(0) === \"_\") {\n            // Ignore \"private\" AST properties added by e.g. Babel plugins and\n            // parsers like Babylon.\n            continue;\n        }\n        newPath.stack.push(k, types_1.default.getFieldValue(newNode, k));\n        oldPath.stack.push(k, types_1.default.getFieldValue(oldNode, k));\n        var canReprint = findAnyReprints(newPath, oldPath, reprints);\n        newPath.stack.length -= 2;\n        oldPath.stack.length -= 2;\n        if (!canReprint) {\n            return false;\n        }\n    }\n    // Return statements might end up running into ASI issues due to\n    // comments inserted deep within the tree, so reprint them if anything\n    // changed within them.\n    if (ReturnStatement.check(newPath.getNode()) &&\n        reprints.length > originalReprintCount) {\n        return false;\n    }\n    return true;\n}\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/lib/patcher.js?");

/***/ }),

/***/ "../../node_modules/recast/lib/printer.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/lib/printer.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar assert_1 = __importDefault(__webpack_require__(/*! assert */ \"../../node_modules/assert/assert.js\"));\nvar comments_1 = __webpack_require__(/*! ./comments */ \"../../node_modules/recast/lib/comments.js\");\nvar lines_1 = __webpack_require__(/*! ./lines */ \"../../node_modules/recast/lib/lines.js\");\nvar options_1 = __webpack_require__(/*! ./options */ \"../../node_modules/recast/lib/options.js\");\nvar patcher_1 = __webpack_require__(/*! ./patcher */ \"../../node_modules/recast/lib/patcher.js\");\nvar types_1 = __importDefault(__webpack_require__(/*! ./types */ \"../../node_modules/recast/lib/types.js\"));\nvar namedTypes = types_1.default.namedTypes;\nvar isString = types_1.default.builtInTypes.string;\nvar isObject = types_1.default.builtInTypes.object;\nvar fast_path_1 = __importDefault(__webpack_require__(/*! ./fast-path */ \"../../node_modules/recast/lib/fast-path.js\"));\nvar util = __importStar(__webpack_require__(/*! ./util */ \"../../node_modules/recast/lib/util.js\"));\nvar PrintResult = function PrintResult(code, sourceMap) {\n    assert_1.default.ok(this instanceof PrintResult);\n    isString.assert(code);\n    this.code = code;\n    if (sourceMap) {\n        isObject.assert(sourceMap);\n        this.map = sourceMap;\n    }\n};\nvar PRp = PrintResult.prototype;\nvar warnedAboutToString = false;\nPRp.toString = function () {\n    if (!warnedAboutToString) {\n        console.warn(\"Deprecation warning: recast.print now returns an object with \" +\n            \"a .code property. You appear to be treating the object as a \" +\n            \"string, which might still work but is strongly discouraged.\");\n        warnedAboutToString = true;\n    }\n    return this.code;\n};\nvar emptyPrintResult = new PrintResult(\"\");\nvar Printer = function Printer(config) {\n    assert_1.default.ok(this instanceof Printer);\n    var explicitTabWidth = config && config.tabWidth;\n    config = options_1.normalize(config);\n    // It's common for client code to pass the same options into both\n    // recast.parse and recast.print, but the Printer doesn't need (and\n    // can be confused by) config.sourceFileName, so we null it out.\n    config.sourceFileName = null;\n    // Non-destructively modifies options with overrides, and returns a\n    // new print function that uses the modified options.\n    function makePrintFunctionWith(options, overrides) {\n        options = Object.assign({}, options, overrides);\n        return function (path) {\n            return print(path, options);\n        };\n    }\n    function print(path, options) {\n        assert_1.default.ok(path instanceof fast_path_1.default);\n        options = options || {};\n        if (options.includeComments) {\n            return comments_1.printComments(path, makePrintFunctionWith(options, {\n                includeComments: false\n            }));\n        }\n        var oldTabWidth = config.tabWidth;\n        if (!explicitTabWidth) {\n            var loc = path.getNode().loc;\n            if (loc && loc.lines && loc.lines.guessTabWidth) {\n                config.tabWidth = loc.lines.guessTabWidth();\n            }\n        }\n        var reprinter = patcher_1.getReprinter(path);\n        var lines = reprinter\n            // Since the print function that we pass to the reprinter will\n            // be used to print \"new\" nodes, it's tempting to think we\n            // should pass printRootGenerically instead of print, to avoid\n            // calling maybeReprint again, but that would be a mistake\n            // because the new nodes might not be entirely new, but merely\n            // moved from elsewhere in the AST. The print function is the\n            // right choice because it gives us the opportunity to reprint\n            // such nodes using their original source.\n            ? reprinter(print)\n            : genericPrint(path, config, options, makePrintFunctionWith(options, {\n                includeComments: true,\n                avoidRootParens: false\n            }));\n        config.tabWidth = oldTabWidth;\n        return lines;\n    }\n    this.print = function (ast) {\n        if (!ast) {\n            return emptyPrintResult;\n        }\n        var lines = print(fast_path_1.default.from(ast), {\n            includeComments: true,\n            avoidRootParens: false\n        });\n        return new PrintResult(lines.toString(config), util.composeSourceMaps(config.inputSourceMap, lines.getSourceMap(config.sourceMapName, config.sourceRoot)));\n    };\n    this.printGenerically = function (ast) {\n        if (!ast) {\n            return emptyPrintResult;\n        }\n        // Print the entire AST generically.\n        function printGenerically(path) {\n            return comments_1.printComments(path, function (path) {\n                return genericPrint(path, config, {\n                    includeComments: true,\n                    avoidRootParens: false\n                }, printGenerically);\n            });\n        }\n        var path = fast_path_1.default.from(ast);\n        var oldReuseWhitespace = config.reuseWhitespace;\n        // Do not reuse whitespace (or anything else, for that matter)\n        // when printing generically.\n        config.reuseWhitespace = false;\n        // TODO Allow printing of comments?\n        var pr = new PrintResult(printGenerically(path).toString(config));\n        config.reuseWhitespace = oldReuseWhitespace;\n        return pr;\n    };\n};\nexports.Printer = Printer;\nfunction genericPrint(path, config, options, printPath) {\n    assert_1.default.ok(path instanceof fast_path_1.default);\n    var node = path.getValue();\n    var parts = [];\n    var linesWithoutParens = genericPrintNoParens(path, config, printPath);\n    if (!node || linesWithoutParens.isEmpty()) {\n        return linesWithoutParens;\n    }\n    var shouldAddParens = false;\n    var decoratorsLines = printDecorators(path, printPath);\n    if (decoratorsLines.isEmpty()) {\n        // Nodes with decorators can't have parentheses, so we can avoid\n        // computing path.needsParens() except in this case.\n        if (!options.avoidRootParens) {\n            shouldAddParens = path.needsParens();\n        }\n    }\n    else {\n        parts.push(decoratorsLines);\n    }\n    if (shouldAddParens) {\n        parts.unshift(\"(\");\n    }\n    parts.push(linesWithoutParens);\n    if (shouldAddParens) {\n        parts.push(\")\");\n    }\n    return lines_1.concat(parts);\n}\n// Note that the `options` parameter of this function is what other\n// functions in this file call the `config` object (that is, the\n// configuration object originally passed into the Printer constructor).\n// Its properties are documented in lib/options.js.\nfunction genericPrintNoParens(path, options, print) {\n    var n = path.getValue();\n    if (!n) {\n        return lines_1.fromString(\"\");\n    }\n    if (typeof n === \"string\") {\n        return lines_1.fromString(n, options);\n    }\n    namedTypes.Printable.assert(n);\n    var parts = [];\n    switch (n.type) {\n        case \"File\":\n            return path.call(print, \"program\");\n        case \"Program\":\n            // Babel 6\n            if (n.directives) {\n                path.each(function (childPath) {\n                    parts.push(print(childPath), \";\\n\");\n                }, \"directives\");\n            }\n            if (n.interpreter) {\n                parts.push(path.call(print, \"interpreter\"));\n            }\n            parts.push(path.call(function (bodyPath) {\n                return printStatementSequence(bodyPath, options, print);\n            }, \"body\"));\n            return lines_1.concat(parts);\n        case \"Noop\": // Babel extension.\n        case \"EmptyStatement\":\n            return lines_1.fromString(\"\");\n        case \"ExpressionStatement\":\n            return lines_1.concat([path.call(print, \"expression\"), \";\"]);\n        case \"ParenthesizedExpression\": // Babel extension.\n            return lines_1.concat([\"(\", path.call(print, \"expression\"), \")\"]);\n        case \"BinaryExpression\":\n        case \"LogicalExpression\":\n        case \"AssignmentExpression\":\n            return lines_1.fromString(\" \").join([\n                path.call(print, \"left\"),\n                n.operator,\n                path.call(print, \"right\")\n            ]);\n        case \"AssignmentPattern\":\n            return lines_1.concat([\n                path.call(print, \"left\"),\n                \" = \",\n                path.call(print, \"right\")\n            ]);\n        case \"MemberExpression\":\n        case \"OptionalMemberExpression\":\n            parts.push(path.call(print, \"object\"));\n            var property = path.call(print, \"property\");\n            var optional = n.type === \"OptionalMemberExpression\";\n            if (n.computed) {\n                parts.push(optional ? \"?.[\" : \"[\", property, \"]\");\n            }\n            else {\n                parts.push(optional ? \"?.\" : \".\", property);\n            }\n            return lines_1.concat(parts);\n        case \"MetaProperty\":\n            return lines_1.concat([\n                path.call(print, \"meta\"),\n                \".\",\n                path.call(print, \"property\")\n            ]);\n        case \"BindExpression\":\n            if (n.object) {\n                parts.push(path.call(print, \"object\"));\n            }\n            parts.push(\"::\", path.call(print, \"callee\"));\n            return lines_1.concat(parts);\n        case \"Path\":\n            return lines_1.fromString(\".\").join(n.body);\n        case \"Identifier\":\n            return lines_1.concat([\n                lines_1.fromString(n.name, options),\n                n.optional ? \"?\" : \"\",\n                path.call(print, \"typeAnnotation\")\n            ]);\n        case \"SpreadElement\":\n        case \"SpreadElementPattern\":\n        case \"RestProperty\": // Babel 6 for ObjectPattern\n        case \"SpreadProperty\":\n        case \"SpreadPropertyPattern\":\n        case \"ObjectTypeSpreadProperty\":\n        case \"RestElement\":\n            return lines_1.concat([\n                \"...\",\n                path.call(print, \"argument\"),\n                path.call(print, \"typeAnnotation\")\n            ]);\n        case \"FunctionDeclaration\":\n        case \"FunctionExpression\":\n        case \"TSDeclareFunction\":\n            if (n.declare) {\n                parts.push(\"declare \");\n            }\n            if (n.async) {\n                parts.push(\"async \");\n            }\n            parts.push(\"function\");\n            if (n.generator)\n                parts.push(\"*\");\n            if (n.id) {\n                parts.push(\" \", path.call(print, \"id\"), path.call(print, \"typeParameters\"));\n            }\n            parts.push(\"(\", printFunctionParams(path, options, print), \")\", path.call(print, \"returnType\"));\n            if (n.body) {\n                parts.push(\" \", path.call(print, \"body\"));\n            }\n            return lines_1.concat(parts);\n        case \"ArrowFunctionExpression\":\n            if (n.async) {\n                parts.push(\"async \");\n            }\n            if (n.typeParameters) {\n                parts.push(path.call(print, \"typeParameters\"));\n            }\n            if (!options.arrowParensAlways &&\n                n.params.length === 1 &&\n                !n.rest &&\n                n.params[0].type === 'Identifier' &&\n                !n.params[0].typeAnnotation &&\n                !n.returnType) {\n                parts.push(path.call(print, \"params\", 0));\n            }\n            else {\n                parts.push(\"(\", printFunctionParams(path, options, print), \")\", path.call(print, \"returnType\"));\n            }\n            parts.push(\" => \", path.call(print, \"body\"));\n            return lines_1.concat(parts);\n        case \"MethodDefinition\":\n            return printMethod(path, options, print);\n        case \"YieldExpression\":\n            parts.push(\"yield\");\n            if (n.delegate)\n                parts.push(\"*\");\n            if (n.argument)\n                parts.push(\" \", path.call(print, \"argument\"));\n            return lines_1.concat(parts);\n        case \"AwaitExpression\":\n            parts.push(\"await\");\n            if (n.all)\n                parts.push(\"*\");\n            if (n.argument)\n                parts.push(\" \", path.call(print, \"argument\"));\n            return lines_1.concat(parts);\n        case \"ModuleDeclaration\":\n            parts.push(\"module\", path.call(print, \"id\"));\n            if (n.source) {\n                assert_1.default.ok(!n.body);\n                parts.push(\"from\", path.call(print, \"source\"));\n            }\n            else {\n                parts.push(path.call(print, \"body\"));\n            }\n            return lines_1.fromString(\" \").join(parts);\n        case \"ImportSpecifier\":\n            if (n.importKind && n.importKind !== \"value\") {\n                parts.push(n.importKind + \" \");\n            }\n            if (n.imported) {\n                parts.push(path.call(print, \"imported\"));\n                if (n.local &&\n                    n.local.name !== n.imported.name) {\n                    parts.push(\" as \", path.call(print, \"local\"));\n                }\n            }\n            else if (n.id) {\n                parts.push(path.call(print, \"id\"));\n                if (n.name) {\n                    parts.push(\" as \", path.call(print, \"name\"));\n                }\n            }\n            return lines_1.concat(parts);\n        case \"ExportSpecifier\":\n            if (n.local) {\n                parts.push(path.call(print, \"local\"));\n                if (n.exported &&\n                    n.exported.name !== n.local.name) {\n                    parts.push(\" as \", path.call(print, \"exported\"));\n                }\n            }\n            else if (n.id) {\n                parts.push(path.call(print, \"id\"));\n                if (n.name) {\n                    parts.push(\" as \", path.call(print, \"name\"));\n                }\n            }\n            return lines_1.concat(parts);\n        case \"ExportBatchSpecifier\":\n            return lines_1.fromString(\"*\");\n        case \"ImportNamespaceSpecifier\":\n            parts.push(\"* as \");\n            if (n.local) {\n                parts.push(path.call(print, \"local\"));\n            }\n            else if (n.id) {\n                parts.push(path.call(print, \"id\"));\n            }\n            return lines_1.concat(parts);\n        case \"ImportDefaultSpecifier\":\n            if (n.local) {\n                return path.call(print, \"local\");\n            }\n            return path.call(print, \"id\");\n        case \"TSExportAssignment\":\n            return lines_1.concat([\"export = \", path.call(print, \"expression\")]);\n        case \"ExportDeclaration\":\n        case \"ExportDefaultDeclaration\":\n        case \"ExportNamedDeclaration\":\n            return printExportDeclaration(path, options, print);\n        case \"ExportAllDeclaration\":\n            parts.push(\"export *\");\n            if (n.exported) {\n                parts.push(\" as \", path.call(print, \"exported\"));\n            }\n            parts.push(\" from \", path.call(print, \"source\"), \";\");\n            return lines_1.concat(parts);\n        case \"TSNamespaceExportDeclaration\":\n            parts.push(\"export as namespace \", path.call(print, \"id\"));\n            return maybeAddSemicolon(lines_1.concat(parts));\n        case \"ExportNamespaceSpecifier\":\n            return lines_1.concat([\"* as \", path.call(print, \"exported\")]);\n        case \"ExportDefaultSpecifier\":\n            return path.call(print, \"exported\");\n        case \"Import\":\n            return lines_1.fromString(\"import\", options);\n        case \"ImportDeclaration\": {\n            parts.push(\"import \");\n            if (n.importKind && n.importKind !== \"value\") {\n                parts.push(n.importKind + \" \");\n            }\n            if (n.specifiers &&\n                n.specifiers.length > 0) {\n                var unbracedSpecifiers_1 = [];\n                var bracedSpecifiers_1 = [];\n                path.each(function (specifierPath) {\n                    var spec = specifierPath.getValue();\n                    if (spec.type === \"ImportSpecifier\") {\n                        bracedSpecifiers_1.push(print(specifierPath));\n                    }\n                    else if (spec.type === \"ImportDefaultSpecifier\" ||\n                        spec.type === \"ImportNamespaceSpecifier\") {\n                        unbracedSpecifiers_1.push(print(specifierPath));\n                    }\n                }, \"specifiers\");\n                unbracedSpecifiers_1.forEach(function (lines, i) {\n                    if (i > 0) {\n                        parts.push(\", \");\n                    }\n                    parts.push(lines);\n                });\n                if (bracedSpecifiers_1.length > 0) {\n                    var lines_2 = lines_1.fromString(\", \").join(bracedSpecifiers_1);\n                    if (lines_2.getLineLength(1) > options.wrapColumn) {\n                        lines_2 = lines_1.concat([\n                            lines_1.fromString(\",\\n\").join(bracedSpecifiers_1).indent(options.tabWidth),\n                            \",\"\n                        ]);\n                    }\n                    if (unbracedSpecifiers_1.length > 0) {\n                        parts.push(\", \");\n                    }\n                    if (lines_2.length > 1) {\n                        parts.push(\"{\\n\", lines_2, \"\\n}\");\n                    }\n                    else if (options.objectCurlySpacing) {\n                        parts.push(\"{ \", lines_2, \" }\");\n                    }\n                    else {\n                        parts.push(\"{\", lines_2, \"}\");\n                    }\n                }\n                parts.push(\" from \");\n            }\n            parts.push(path.call(print, \"source\"), \";\");\n            return lines_1.concat(parts);\n        }\n        case \"BlockStatement\":\n            var naked = path.call(function (bodyPath) {\n                return printStatementSequence(bodyPath, options, print);\n            }, \"body\");\n            if (naked.isEmpty()) {\n                if (!n.directives || n.directives.length === 0) {\n                    return lines_1.fromString(\"{}\");\n                }\n            }\n            parts.push(\"{\\n\");\n            // Babel 6\n            if (n.directives) {\n                path.each(function (childPath) {\n                    parts.push(print(childPath).indent(options.tabWidth), \";\", n.directives.length > 1 || !naked.isEmpty() ? \"\\n\" : \"\");\n                }, \"directives\");\n            }\n            parts.push(naked.indent(options.tabWidth));\n            parts.push(\"\\n}\");\n            return lines_1.concat(parts);\n        case \"ReturnStatement\":\n            parts.push(\"return\");\n            if (n.argument) {\n                var argLines = path.call(print, \"argument\");\n                if (argLines.startsWithComment() ||\n                    (argLines.length > 1 &&\n                        namedTypes.JSXElement &&\n                        namedTypes.JSXElement.check(n.argument))) {\n                    parts.push(\" (\\n\", argLines.indent(options.tabWidth), \"\\n)\");\n                }\n                else {\n                    parts.push(\" \", argLines);\n                }\n            }\n            parts.push(\";\");\n            return lines_1.concat(parts);\n        case \"CallExpression\":\n        case \"OptionalCallExpression\":\n            parts.push(path.call(print, \"callee\"));\n            if (n.type === \"OptionalCallExpression\" &&\n                n.callee.type !== \"OptionalMemberExpression\") {\n                parts.push(\"?.\");\n            }\n            parts.push(printArgumentsList(path, options, print));\n            return lines_1.concat(parts);\n        case \"ObjectExpression\":\n        case \"ObjectPattern\":\n        case \"ObjectTypeAnnotation\":\n            var allowBreak = false;\n            var isTypeAnnotation = n.type === \"ObjectTypeAnnotation\";\n            var separator = options.flowObjectCommas ? \",\" : (isTypeAnnotation ? \";\" : \",\");\n            var fields = [];\n            if (isTypeAnnotation) {\n                fields.push(\"indexers\", \"callProperties\");\n                if (n.internalSlots != null) {\n                    fields.push(\"internalSlots\");\n                }\n            }\n            fields.push(\"properties\");\n            var len = 0;\n            fields.forEach(function (field) {\n                len += n[field].length;\n            });\n            var oneLine = (isTypeAnnotation && len === 1) || len === 0;\n            var leftBrace = n.exact ? \"{|\" : \"{\";\n            var rightBrace = n.exact ? \"|}\" : \"}\";\n            parts.push(oneLine ? leftBrace : leftBrace + \"\\n\");\n            var leftBraceIndex = parts.length - 1;\n            var i = 0;\n            fields.forEach(function (field) {\n                path.each(function (childPath) {\n                    var lines = print(childPath);\n                    if (!oneLine) {\n                        lines = lines.indent(options.tabWidth);\n                    }\n                    var multiLine = !isTypeAnnotation && lines.length > 1;\n                    if (multiLine && allowBreak) {\n                        // Similar to the logic for BlockStatement.\n                        parts.push(\"\\n\");\n                    }\n                    parts.push(lines);\n                    if (i < len - 1) {\n                        // Add an extra line break if the previous object property\n                        // had a multi-line value.\n                        parts.push(separator + (multiLine ? \"\\n\\n\" : \"\\n\"));\n                        allowBreak = !multiLine;\n                    }\n                    else if (len !== 1 && isTypeAnnotation) {\n                        parts.push(separator);\n                    }\n                    else if (!oneLine && util.isTrailingCommaEnabled(options, \"objects\")) {\n                        parts.push(separator);\n                    }\n                    i++;\n                }, field);\n            });\n            if (n.inexact) {\n                var line = lines_1.fromString(\"...\", options);\n                if (oneLine) {\n                    if (len > 0) {\n                        parts.push(separator, \" \");\n                    }\n                    parts.push(line);\n                }\n                else {\n                    // No trailing separator after ... to maintain parity with prettier.\n                    parts.push(\"\\n\", line.indent(options.tabWidth));\n                }\n            }\n            parts.push(oneLine ? rightBrace : \"\\n\" + rightBrace);\n            if (i !== 0 && oneLine && options.objectCurlySpacing) {\n                parts[leftBraceIndex] = leftBrace + \" \";\n                parts[parts.length - 1] = \" \" + rightBrace;\n            }\n            if (n.typeAnnotation) {\n                parts.push(path.call(print, \"typeAnnotation\"));\n            }\n            return lines_1.concat(parts);\n        case \"PropertyPattern\":\n            return lines_1.concat([\n                path.call(print, \"key\"),\n                \": \",\n                path.call(print, \"pattern\")\n            ]);\n        case \"ObjectProperty\": // Babel 6\n        case \"Property\": // Non-standard AST node type.\n            if (n.method || n.kind === \"get\" || n.kind === \"set\") {\n                return printMethod(path, options, print);\n            }\n            var key = path.call(print, \"key\");\n            if (n.computed) {\n                parts.push(\"[\", key, \"]\");\n            }\n            else {\n                parts.push(key);\n            }\n            if (!n.shorthand) {\n                parts.push(\": \", path.call(print, \"value\"));\n            }\n            return lines_1.concat(parts);\n        case \"ClassMethod\": // Babel 6\n        case \"ObjectMethod\": // Babel 6\n        case \"ClassPrivateMethod\":\n        case \"TSDeclareMethod\":\n            return printMethod(path, options, print);\n        case \"PrivateName\":\n            return lines_1.concat([\"#\", path.call(print, \"id\")]);\n        case \"Decorator\":\n            return lines_1.concat([\"@\", path.call(print, \"expression\")]);\n        case \"ArrayExpression\":\n        case \"ArrayPattern\":\n            var elems = n.elements, len = elems.length;\n            var printed = path.map(print, \"elements\");\n            var joined = lines_1.fromString(\", \").join(printed);\n            var oneLine = joined.getLineLength(1) <= options.wrapColumn;\n            if (oneLine) {\n                if (options.arrayBracketSpacing) {\n                    parts.push(\"[ \");\n                }\n                else {\n                    parts.push(\"[\");\n                }\n            }\n            else {\n                parts.push(\"[\\n\");\n            }\n            path.each(function (elemPath) {\n                var i = elemPath.getName();\n                var elem = elemPath.getValue();\n                if (!elem) {\n                    // If the array expression ends with a hole, that hole\n                    // will be ignored by the interpreter, but if it ends with\n                    // two (or more) holes, we need to write out two (or more)\n                    // commas so that the resulting code is interpreted with\n                    // both (all) of the holes.\n                    parts.push(\",\");\n                }\n                else {\n                    var lines = printed[i];\n                    if (oneLine) {\n                        if (i > 0)\n                            parts.push(\" \");\n                    }\n                    else {\n                        lines = lines.indent(options.tabWidth);\n                    }\n                    parts.push(lines);\n                    if (i < len - 1 || (!oneLine && util.isTrailingCommaEnabled(options, \"arrays\")))\n                        parts.push(\",\");\n                    if (!oneLine)\n                        parts.push(\"\\n\");\n                }\n            }, \"elements\");\n            if (oneLine && options.arrayBracketSpacing) {\n                parts.push(\" ]\");\n            }\n            else {\n                parts.push(\"]\");\n            }\n            return lines_1.concat(parts);\n        case \"SequenceExpression\":\n            return lines_1.fromString(\", \").join(path.map(print, \"expressions\"));\n        case \"ThisExpression\":\n            return lines_1.fromString(\"this\");\n        case \"Super\":\n            return lines_1.fromString(\"super\");\n        case \"NullLiteral\": // Babel 6 Literal split\n            return lines_1.fromString(\"null\");\n        case \"RegExpLiteral\": // Babel 6 Literal split\n            return lines_1.fromString(n.extra.raw);\n        case \"BigIntLiteral\": // Babel 7 Literal split\n            return lines_1.fromString(n.value + \"n\");\n        case \"NumericLiteral\": // Babel 6 Literal Split\n            // Keep original representation for numeric values not in base 10.\n            if (n.extra &&\n                typeof n.extra.raw === \"string\" &&\n                Number(n.extra.raw) === n.value) {\n                return lines_1.fromString(n.extra.raw, options);\n            }\n            return lines_1.fromString(n.value, options);\n        case \"BooleanLiteral\": // Babel 6 Literal split\n        case \"StringLiteral\": // Babel 6 Literal split\n        case \"Literal\":\n            // Numeric values may be in bases other than 10. Use their raw\n            // representation if equivalent.\n            if (typeof n.value === \"number\" &&\n                typeof n.raw === \"string\" &&\n                Number(n.raw) === n.value) {\n                return lines_1.fromString(n.raw, options);\n            }\n            if (typeof n.value !== \"string\") {\n                return lines_1.fromString(n.value, options);\n            }\n            return lines_1.fromString(nodeStr(n.value, options), options);\n        case \"Directive\": // Babel 6\n            return path.call(print, \"value\");\n        case \"DirectiveLiteral\": // Babel 6\n            return lines_1.fromString(nodeStr(n.value, options));\n        case \"InterpreterDirective\":\n            return lines_1.fromString(\"#!\" + n.value + \"\\n\", options);\n        case \"ModuleSpecifier\":\n            if (n.local) {\n                throw new Error(\"The ESTree ModuleSpecifier type should be abstract\");\n            }\n            // The Esprima ModuleSpecifier type is just a string-valued\n            // Literal identifying the imported-from module.\n            return lines_1.fromString(nodeStr(n.value, options), options);\n        case \"UnaryExpression\":\n            parts.push(n.operator);\n            if (/[a-z]$/.test(n.operator))\n                parts.push(\" \");\n            parts.push(path.call(print, \"argument\"));\n            return lines_1.concat(parts);\n        case \"UpdateExpression\":\n            parts.push(path.call(print, \"argument\"), n.operator);\n            if (n.prefix)\n                parts.reverse();\n            return lines_1.concat(parts);\n        case \"ConditionalExpression\":\n            return lines_1.concat([\n                path.call(print, \"test\"),\n                \" ? \", path.call(print, \"consequent\"),\n                \" : \", path.call(print, \"alternate\")\n            ]);\n        case \"NewExpression\":\n            parts.push(\"new \", path.call(print, \"callee\"));\n            var args = n.arguments;\n            if (args) {\n                parts.push(printArgumentsList(path, options, print));\n            }\n            return lines_1.concat(parts);\n        case \"VariableDeclaration\":\n            if (n.declare) {\n                parts.push(\"declare \");\n            }\n            parts.push(n.kind, \" \");\n            var maxLen = 0;\n            var printed = path.map(function (childPath) {\n                var lines = print(childPath);\n                maxLen = Math.max(lines.length, maxLen);\n                return lines;\n            }, \"declarations\");\n            if (maxLen === 1) {\n                parts.push(lines_1.fromString(\", \").join(printed));\n            }\n            else if (printed.length > 1) {\n                parts.push(lines_1.fromString(\",\\n\").join(printed)\n                    .indentTail(n.kind.length + 1));\n            }\n            else {\n                parts.push(printed[0]);\n            }\n            // We generally want to terminate all variable declarations with a\n            // semicolon, except when they are children of for loops.\n            var parentNode = path.getParentNode();\n            if (!namedTypes.ForStatement.check(parentNode) &&\n                !namedTypes.ForInStatement.check(parentNode) &&\n                !(namedTypes.ForOfStatement &&\n                    namedTypes.ForOfStatement.check(parentNode)) &&\n                !(namedTypes.ForAwaitStatement &&\n                    namedTypes.ForAwaitStatement.check(parentNode))) {\n                parts.push(\";\");\n            }\n            return lines_1.concat(parts);\n        case \"VariableDeclarator\":\n            return n.init ? lines_1.fromString(\" = \").join([\n                path.call(print, \"id\"),\n                path.call(print, \"init\")\n            ]) : path.call(print, \"id\");\n        case \"WithStatement\":\n            return lines_1.concat([\n                \"with (\",\n                path.call(print, \"object\"),\n                \") \",\n                path.call(print, \"body\")\n            ]);\n        case \"IfStatement\":\n            var con = adjustClause(path.call(print, \"consequent\"), options);\n            parts.push(\"if (\", path.call(print, \"test\"), \")\", con);\n            if (n.alternate)\n                parts.push(endsWithBrace(con) ? \" else\" : \"\\nelse\", adjustClause(path.call(print, \"alternate\"), options));\n            return lines_1.concat(parts);\n        case \"ForStatement\":\n            // TODO Get the for (;;) case right.\n            var init = path.call(print, \"init\"), sep = init.length > 1 ? \";\\n\" : \"; \", forParen = \"for (\", indented = lines_1.fromString(sep).join([\n                init,\n                path.call(print, \"test\"),\n                path.call(print, \"update\")\n            ]).indentTail(forParen.length), head = lines_1.concat([forParen, indented, \")\"]), clause = adjustClause(path.call(print, \"body\"), options);\n            parts.push(head);\n            if (head.length > 1) {\n                parts.push(\"\\n\");\n                clause = clause.trimLeft();\n            }\n            parts.push(clause);\n            return lines_1.concat(parts);\n        case \"WhileStatement\":\n            return lines_1.concat([\n                \"while (\",\n                path.call(print, \"test\"),\n                \")\",\n                adjustClause(path.call(print, \"body\"), options)\n            ]);\n        case \"ForInStatement\":\n            // Note: esprima can't actually parse \"for each (\".\n            return lines_1.concat([\n                n.each ? \"for each (\" : \"for (\",\n                path.call(print, \"left\"),\n                \" in \",\n                path.call(print, \"right\"),\n                \")\",\n                adjustClause(path.call(print, \"body\"), options)\n            ]);\n        case \"ForOfStatement\":\n        case \"ForAwaitStatement\":\n            parts.push(\"for \");\n            if (n.await || n.type === \"ForAwaitStatement\") {\n                parts.push(\"await \");\n            }\n            parts.push(\"(\", path.call(print, \"left\"), \" of \", path.call(print, \"right\"), \")\", adjustClause(path.call(print, \"body\"), options));\n            return lines_1.concat(parts);\n        case \"DoWhileStatement\":\n            var doBody = lines_1.concat([\n                \"do\",\n                adjustClause(path.call(print, \"body\"), options)\n            ]);\n            parts.push(doBody);\n            if (endsWithBrace(doBody))\n                parts.push(\" while\");\n            else\n                parts.push(\"\\nwhile\");\n            parts.push(\" (\", path.call(print, \"test\"), \");\");\n            return lines_1.concat(parts);\n        case \"DoExpression\":\n            var statements = path.call(function (bodyPath) {\n                return printStatementSequence(bodyPath, options, print);\n            }, \"body\");\n            return lines_1.concat([\n                \"do {\\n\",\n                statements.indent(options.tabWidth),\n                \"\\n}\"\n            ]);\n        case \"BreakStatement\":\n            parts.push(\"break\");\n            if (n.label)\n                parts.push(\" \", path.call(print, \"label\"));\n            parts.push(\";\");\n            return lines_1.concat(parts);\n        case \"ContinueStatement\":\n            parts.push(\"continue\");\n            if (n.label)\n                parts.push(\" \", path.call(print, \"label\"));\n            parts.push(\";\");\n            return lines_1.concat(parts);\n        case \"LabeledStatement\":\n            return lines_1.concat([\n                path.call(print, \"label\"),\n                \":\\n\",\n                path.call(print, \"body\")\n            ]);\n        case \"TryStatement\":\n            parts.push(\"try \", path.call(print, \"block\"));\n            if (n.handler) {\n                parts.push(\" \", path.call(print, \"handler\"));\n            }\n            else if (n.handlers) {\n                path.each(function (handlerPath) {\n                    parts.push(\" \", print(handlerPath));\n                }, \"handlers\");\n            }\n            if (n.finalizer) {\n                parts.push(\" finally \", path.call(print, \"finalizer\"));\n            }\n            return lines_1.concat(parts);\n        case \"CatchClause\":\n            parts.push(\"catch \");\n            if (n.param) {\n                parts.push(\"(\", path.call(print, \"param\"));\n            }\n            if (n.guard) {\n                // Note: esprima does not recognize conditional catch clauses.\n                parts.push(\" if \", path.call(print, \"guard\"));\n            }\n            if (n.param) {\n                parts.push(\") \");\n            }\n            parts.push(path.call(print, \"body\"));\n            return lines_1.concat(parts);\n        case \"ThrowStatement\":\n            return lines_1.concat([\"throw \", path.call(print, \"argument\"), \";\"]);\n        case \"SwitchStatement\":\n            return lines_1.concat([\n                \"switch (\",\n                path.call(print, \"discriminant\"),\n                \") {\\n\",\n                lines_1.fromString(\"\\n\").join(path.map(print, \"cases\")),\n                \"\\n}\"\n            ]);\n        // Note: ignoring n.lexical because it has no printing consequences.\n        case \"SwitchCase\":\n            if (n.test)\n                parts.push(\"case \", path.call(print, \"test\"), \":\");\n            else\n                parts.push(\"default:\");\n            if (n.consequent.length > 0) {\n                parts.push(\"\\n\", path.call(function (consequentPath) {\n                    return printStatementSequence(consequentPath, options, print);\n                }, \"consequent\").indent(options.tabWidth));\n            }\n            return lines_1.concat(parts);\n        case \"DebuggerStatement\":\n            return lines_1.fromString(\"debugger;\");\n        // JSX extensions below.\n        case \"JSXAttribute\":\n            parts.push(path.call(print, \"name\"));\n            if (n.value)\n                parts.push(\"=\", path.call(print, \"value\"));\n            return lines_1.concat(parts);\n        case \"JSXIdentifier\":\n            return lines_1.fromString(n.name, options);\n        case \"JSXNamespacedName\":\n            return lines_1.fromString(\":\").join([\n                path.call(print, \"namespace\"),\n                path.call(print, \"name\")\n            ]);\n        case \"JSXMemberExpression\":\n            return lines_1.fromString(\".\").join([\n                path.call(print, \"object\"),\n                path.call(print, \"property\")\n            ]);\n        case \"JSXSpreadAttribute\":\n            return lines_1.concat([\"{...\", path.call(print, \"argument\"), \"}\"]);\n        case \"JSXSpreadChild\":\n            return lines_1.concat([\"{...\", path.call(print, \"expression\"), \"}\"]);\n        case \"JSXExpressionContainer\":\n            return lines_1.concat([\"{\", path.call(print, \"expression\"), \"}\"]);\n        case \"JSXElement\":\n        case \"JSXFragment\":\n            var openingPropName = \"opening\" + (n.type === \"JSXElement\" ? \"Element\" : \"Fragment\");\n            var closingPropName = \"closing\" + (n.type === \"JSXElement\" ? \"Element\" : \"Fragment\");\n            var openingLines = path.call(print, openingPropName);\n            if (n[openingPropName].selfClosing) {\n                assert_1.default.ok(!n[closingPropName], \"unexpected \" + closingPropName + \" element in self-closing \" + n.type);\n                return openingLines;\n            }\n            var childLines = lines_1.concat(path.map(function (childPath) {\n                var child = childPath.getValue();\n                if (namedTypes.Literal.check(child) &&\n                    typeof child.value === \"string\") {\n                    if (/\\S/.test(child.value)) {\n                        return child.value.replace(/^\\s+|\\s+$/g, \"\");\n                    }\n                    else if (/\\n/.test(child.value)) {\n                        return \"\\n\";\n                    }\n                }\n                return print(childPath);\n            }, \"children\")).indentTail(options.tabWidth);\n            var closingLines = path.call(print, closingPropName);\n            return lines_1.concat([\n                openingLines,\n                childLines,\n                closingLines\n            ]);\n        case \"JSXOpeningElement\":\n            parts.push(\"<\", path.call(print, \"name\"));\n            var attrParts = [];\n            path.each(function (attrPath) {\n                attrParts.push(\" \", print(attrPath));\n            }, \"attributes\");\n            var attrLines = lines_1.concat(attrParts);\n            var needLineWrap = (attrLines.length > 1 ||\n                attrLines.getLineLength(1) > options.wrapColumn);\n            if (needLineWrap) {\n                attrParts.forEach(function (part, i) {\n                    if (part === \" \") {\n                        assert_1.default.strictEqual(i % 2, 0);\n                        attrParts[i] = \"\\n\";\n                    }\n                });\n                attrLines = lines_1.concat(attrParts).indentTail(options.tabWidth);\n            }\n            parts.push(attrLines, n.selfClosing ? \" />\" : \">\");\n            return lines_1.concat(parts);\n        case \"JSXClosingElement\":\n            return lines_1.concat([\"</\", path.call(print, \"name\"), \">\"]);\n        case \"JSXOpeningFragment\":\n            return lines_1.fromString(\"<>\");\n        case \"JSXClosingFragment\":\n            return lines_1.fromString(\"</>\");\n        case \"JSXText\":\n            return lines_1.fromString(n.value, options);\n        case \"JSXEmptyExpression\":\n            return lines_1.fromString(\"\");\n        case \"TypeAnnotatedIdentifier\":\n            return lines_1.concat([\n                path.call(print, \"annotation\"),\n                \" \",\n                path.call(print, \"identifier\")\n            ]);\n        case \"ClassBody\":\n            if (n.body.length === 0) {\n                return lines_1.fromString(\"{}\");\n            }\n            return lines_1.concat([\n                \"{\\n\",\n                path.call(function (bodyPath) {\n                    return printStatementSequence(bodyPath, options, print);\n                }, \"body\").indent(options.tabWidth),\n                \"\\n}\"\n            ]);\n        case \"ClassPropertyDefinition\":\n            parts.push(\"static \", path.call(print, \"definition\"));\n            if (!namedTypes.MethodDefinition.check(n.definition))\n                parts.push(\";\");\n            return lines_1.concat(parts);\n        case \"ClassProperty\":\n            var access = n.accessibility || n.access;\n            if (typeof access === \"string\") {\n                parts.push(access, \" \");\n            }\n            if (n.static) {\n                parts.push(\"static \");\n            }\n            if (n.abstract) {\n                parts.push(\"abstract \");\n            }\n            if (n.readonly) {\n                parts.push(\"readonly \");\n            }\n            var key = path.call(print, \"key\");\n            if (n.computed) {\n                key = lines_1.concat([\"[\", key, \"]\"]);\n            }\n            if (n.variance) {\n                key = lines_1.concat([printVariance(path, print), key]);\n            }\n            parts.push(key);\n            if (n.optional) {\n                parts.push(\"?\");\n            }\n            if (n.typeAnnotation) {\n                parts.push(path.call(print, \"typeAnnotation\"));\n            }\n            if (n.value) {\n                parts.push(\" = \", path.call(print, \"value\"));\n            }\n            parts.push(\";\");\n            return lines_1.concat(parts);\n        case \"ClassPrivateProperty\":\n            if (n.static) {\n                parts.push(\"static \");\n            }\n            parts.push(path.call(print, \"key\"));\n            if (n.typeAnnotation) {\n                parts.push(path.call(print, \"typeAnnotation\"));\n            }\n            if (n.value) {\n                parts.push(\" = \", path.call(print, \"value\"));\n            }\n            parts.push(\";\");\n            return lines_1.concat(parts);\n        case \"ClassDeclaration\":\n        case \"ClassExpression\":\n            if (n.declare) {\n                parts.push(\"declare \");\n            }\n            if (n.abstract) {\n                parts.push(\"abstract \");\n            }\n            parts.push(\"class\");\n            if (n.id) {\n                parts.push(\" \", path.call(print, \"id\"));\n            }\n            if (n.typeParameters) {\n                parts.push(path.call(print, \"typeParameters\"));\n            }\n            if (n.superClass) {\n                parts.push(\" extends \", path.call(print, \"superClass\"), path.call(print, \"superTypeParameters\"));\n            }\n            if (n[\"implements\"] && n['implements'].length > 0) {\n                parts.push(\" implements \", lines_1.fromString(\", \").join(path.map(print, \"implements\")));\n            }\n            parts.push(\" \", path.call(print, \"body\"));\n            return lines_1.concat(parts);\n        case \"TemplateElement\":\n            return lines_1.fromString(n.value.raw, options).lockIndentTail();\n        case \"TemplateLiteral\":\n            var expressions = path.map(print, \"expressions\");\n            parts.push(\"`\");\n            path.each(function (childPath) {\n                var i = childPath.getName();\n                parts.push(print(childPath));\n                if (i < expressions.length) {\n                    parts.push(\"${\", expressions[i], \"}\");\n                }\n            }, \"quasis\");\n            parts.push(\"`\");\n            return lines_1.concat(parts).lockIndentTail();\n        case \"TaggedTemplateExpression\":\n            return lines_1.concat([\n                path.call(print, \"tag\"),\n                path.call(print, \"quasi\")\n            ]);\n        // These types are unprintable because they serve as abstract\n        // supertypes for other (printable) types.\n        case \"Node\":\n        case \"Printable\":\n        case \"SourceLocation\":\n        case \"Position\":\n        case \"Statement\":\n        case \"Function\":\n        case \"Pattern\":\n        case \"Expression\":\n        case \"Declaration\":\n        case \"Specifier\":\n        case \"NamedSpecifier\":\n        case \"Comment\": // Supertype of Block and Line\n        case \"Flow\": // Supertype of all Flow AST node types\n        case \"FlowType\": // Supertype of all Flow types\n        case \"FlowPredicate\": // Supertype of InferredPredicate and DeclaredPredicate\n        case \"MemberTypeAnnotation\": // Flow\n        case \"Type\": // Flow\n        case \"TSHasOptionalTypeParameterInstantiation\":\n        case \"TSHasOptionalTypeParameters\":\n        case \"TSHasOptionalTypeAnnotation\":\n            throw new Error(\"unprintable type: \" + JSON.stringify(n.type));\n        case \"CommentBlock\": // Babel block comment.\n        case \"Block\": // Esprima block comment.\n            return lines_1.concat([\"/*\", lines_1.fromString(n.value, options), \"*/\"]);\n        case \"CommentLine\": // Babel line comment.\n        case \"Line\": // Esprima line comment.\n            return lines_1.concat([\"//\", lines_1.fromString(n.value, options)]);\n        // Type Annotations for Facebook Flow, typically stripped out or\n        // transformed away before printing.\n        case \"TypeAnnotation\":\n            if (n.typeAnnotation) {\n                if (n.typeAnnotation.type !== \"FunctionTypeAnnotation\") {\n                    parts.push(\": \");\n                }\n                parts.push(path.call(print, \"typeAnnotation\"));\n                return lines_1.concat(parts);\n            }\n            return lines_1.fromString(\"\");\n        case \"ExistentialTypeParam\":\n        case \"ExistsTypeAnnotation\":\n            return lines_1.fromString(\"*\", options);\n        case \"EmptyTypeAnnotation\":\n            return lines_1.fromString(\"empty\", options);\n        case \"AnyTypeAnnotation\":\n            return lines_1.fromString(\"any\", options);\n        case \"MixedTypeAnnotation\":\n            return lines_1.fromString(\"mixed\", options);\n        case \"ArrayTypeAnnotation\":\n            return lines_1.concat([\n                path.call(print, \"elementType\"),\n                \"[]\"\n            ]);\n        case \"TupleTypeAnnotation\":\n            var printed = path.map(print, \"types\");\n            var joined = lines_1.fromString(\", \").join(printed);\n            var oneLine = joined.getLineLength(1) <= options.wrapColumn;\n            if (oneLine) {\n                if (options.arrayBracketSpacing) {\n                    parts.push(\"[ \");\n                }\n                else {\n                    parts.push(\"[\");\n                }\n            }\n            else {\n                parts.push(\"[\\n\");\n            }\n            path.each(function (elemPath) {\n                var i = elemPath.getName();\n                var elem = elemPath.getValue();\n                if (!elem) {\n                    // If the array expression ends with a hole, that hole\n                    // will be ignored by the interpreter, but if it ends with\n                    // two (or more) holes, we need to write out two (or more)\n                    // commas so that the resulting code is interpreted with\n                    // both (all) of the holes.\n                    parts.push(\",\");\n                }\n                else {\n                    var lines = printed[i];\n                    if (oneLine) {\n                        if (i > 0)\n                            parts.push(\" \");\n                    }\n                    else {\n                        lines = lines.indent(options.tabWidth);\n                    }\n                    parts.push(lines);\n                    if (i < n.types.length - 1 || (!oneLine && util.isTrailingCommaEnabled(options, \"arrays\")))\n                        parts.push(\",\");\n                    if (!oneLine)\n                        parts.push(\"\\n\");\n                }\n            }, \"types\");\n            if (oneLine && options.arrayBracketSpacing) {\n                parts.push(\" ]\");\n            }\n            else {\n                parts.push(\"]\");\n            }\n            return lines_1.concat(parts);\n        case \"BooleanTypeAnnotation\":\n            return lines_1.fromString(\"boolean\", options);\n        case \"BooleanLiteralTypeAnnotation\":\n            assert_1.default.strictEqual(typeof n.value, \"boolean\");\n            return lines_1.fromString(\"\" + n.value, options);\n        case \"InterfaceTypeAnnotation\":\n            parts.push(\"interface\");\n            if (n.extends && n.extends.length > 0) {\n                parts.push(\" extends \", lines_1.fromString(\", \").join(path.map(print, \"extends\")));\n            }\n            parts.push(\" \", path.call(print, \"body\"));\n            return lines_1.concat(parts);\n        case \"DeclareClass\":\n            return printFlowDeclaration(path, [\n                \"class \",\n                path.call(print, \"id\"),\n                \" \",\n                path.call(print, \"body\"),\n            ]);\n        case \"DeclareFunction\":\n            return printFlowDeclaration(path, [\n                \"function \",\n                path.call(print, \"id\"),\n                \";\"\n            ]);\n        case \"DeclareModule\":\n            return printFlowDeclaration(path, [\n                \"module \",\n                path.call(print, \"id\"),\n                \" \",\n                path.call(print, \"body\"),\n            ]);\n        case \"DeclareModuleExports\":\n            return printFlowDeclaration(path, [\n                \"module.exports\",\n                path.call(print, \"typeAnnotation\"),\n            ]);\n        case \"DeclareVariable\":\n            return printFlowDeclaration(path, [\n                \"var \",\n                path.call(print, \"id\"),\n                \";\"\n            ]);\n        case \"DeclareExportDeclaration\":\n        case \"DeclareExportAllDeclaration\":\n            return lines_1.concat([\n                \"declare \",\n                printExportDeclaration(path, options, print)\n            ]);\n        case \"InferredPredicate\":\n            return lines_1.fromString(\"%checks\", options);\n        case \"DeclaredPredicate\":\n            return lines_1.concat([\n                \"%checks(\",\n                path.call(print, \"value\"),\n                \")\"\n            ]);\n        case \"FunctionTypeAnnotation\":\n            // FunctionTypeAnnotation is ambiguous:\n            // declare function(a: B): void; OR\n            // var A: (a: B) => void;\n            var parent = path.getParentNode(0);\n            var isArrowFunctionTypeAnnotation = !(namedTypes.ObjectTypeCallProperty.check(parent) ||\n                (namedTypes.ObjectTypeInternalSlot.check(parent) && parent.method) ||\n                namedTypes.DeclareFunction.check(path.getParentNode(2)));\n            var needsColon = isArrowFunctionTypeAnnotation &&\n                !namedTypes.FunctionTypeParam.check(parent);\n            if (needsColon) {\n                parts.push(\": \");\n            }\n            parts.push(\"(\", printFunctionParams(path, options, print), \")\");\n            // The returnType is not wrapped in a TypeAnnotation, so the colon\n            // needs to be added separately.\n            if (n.returnType) {\n                parts.push(isArrowFunctionTypeAnnotation ? \" => \" : \": \", path.call(print, \"returnType\"));\n            }\n            return lines_1.concat(parts);\n        case \"FunctionTypeParam\":\n            return lines_1.concat([\n                path.call(print, \"name\"),\n                n.optional ? '?' : '',\n                \": \",\n                path.call(print, \"typeAnnotation\"),\n            ]);\n        case \"GenericTypeAnnotation\":\n            return lines_1.concat([\n                path.call(print, \"id\"),\n                path.call(print, \"typeParameters\")\n            ]);\n        case \"DeclareInterface\":\n            parts.push(\"declare \");\n        // Fall through to InterfaceDeclaration...\n        case \"InterfaceDeclaration\":\n        case \"TSInterfaceDeclaration\":\n            if (n.declare) {\n                parts.push(\"declare \");\n            }\n            parts.push(\"interface \", path.call(print, \"id\"), path.call(print, \"typeParameters\"), \" \");\n            if (n[\"extends\"] && n[\"extends\"].length > 0) {\n                parts.push(\"extends \", lines_1.fromString(\", \").join(path.map(print, \"extends\")), \" \");\n            }\n            if (n.body) {\n                parts.push(path.call(print, \"body\"));\n            }\n            return lines_1.concat(parts);\n        case \"ClassImplements\":\n        case \"InterfaceExtends\":\n            return lines_1.concat([\n                path.call(print, \"id\"),\n                path.call(print, \"typeParameters\")\n            ]);\n        case \"IntersectionTypeAnnotation\":\n            return lines_1.fromString(\" & \").join(path.map(print, \"types\"));\n        case \"NullableTypeAnnotation\":\n            return lines_1.concat([\n                \"?\",\n                path.call(print, \"typeAnnotation\")\n            ]);\n        case \"NullLiteralTypeAnnotation\":\n            return lines_1.fromString(\"null\", options);\n        case \"ThisTypeAnnotation\":\n            return lines_1.fromString(\"this\", options);\n        case \"NumberTypeAnnotation\":\n            return lines_1.fromString(\"number\", options);\n        case \"ObjectTypeCallProperty\":\n            return path.call(print, \"value\");\n        case \"ObjectTypeIndexer\":\n            return lines_1.concat([\n                printVariance(path, print),\n                \"[\",\n                path.call(print, \"id\"),\n                \": \",\n                path.call(print, \"key\"),\n                \"]: \",\n                path.call(print, \"value\")\n            ]);\n        case \"ObjectTypeProperty\":\n            return lines_1.concat([\n                printVariance(path, print),\n                path.call(print, \"key\"),\n                n.optional ? \"?\" : \"\",\n                \": \",\n                path.call(print, \"value\")\n            ]);\n        case \"ObjectTypeInternalSlot\":\n            return lines_1.concat([\n                n.static ? \"static \" : \"\",\n                \"[[\",\n                path.call(print, \"id\"),\n                \"]]\",\n                n.optional ? \"?\" : \"\",\n                n.value.type !== \"FunctionTypeAnnotation\" ? \": \" : \"\",\n                path.call(print, \"value\")\n            ]);\n        case \"QualifiedTypeIdentifier\":\n            return lines_1.concat([\n                path.call(print, \"qualification\"),\n                \".\",\n                path.call(print, \"id\")\n            ]);\n        case \"StringLiteralTypeAnnotation\":\n            return lines_1.fromString(nodeStr(n.value, options), options);\n        case \"NumberLiteralTypeAnnotation\":\n        case \"NumericLiteralTypeAnnotation\":\n            assert_1.default.strictEqual(typeof n.value, \"number\");\n            return lines_1.fromString(JSON.stringify(n.value), options);\n        case \"StringTypeAnnotation\":\n            return lines_1.fromString(\"string\", options);\n        case \"DeclareTypeAlias\":\n            parts.push(\"declare \");\n        // Fall through to TypeAlias...\n        case \"TypeAlias\":\n            return lines_1.concat([\n                \"type \",\n                path.call(print, \"id\"),\n                path.call(print, \"typeParameters\"),\n                \" = \",\n                path.call(print, \"right\"),\n                \";\"\n            ]);\n        case \"DeclareOpaqueType\":\n            parts.push(\"declare \");\n        // Fall through to OpaqueType...\n        case \"OpaqueType\":\n            parts.push(\"opaque type \", path.call(print, \"id\"), path.call(print, \"typeParameters\"));\n            if (n[\"supertype\"]) {\n                parts.push(\": \", path.call(print, \"supertype\"));\n            }\n            if (n[\"impltype\"]) {\n                parts.push(\" = \", path.call(print, \"impltype\"));\n            }\n            parts.push(\";\");\n            return lines_1.concat(parts);\n        case \"TypeCastExpression\":\n            return lines_1.concat([\n                \"(\",\n                path.call(print, \"expression\"),\n                path.call(print, \"typeAnnotation\"),\n                \")\"\n            ]);\n        case \"TypeParameterDeclaration\":\n        case \"TypeParameterInstantiation\":\n            return lines_1.concat([\n                \"<\",\n                lines_1.fromString(\", \").join(path.map(print, \"params\")),\n                \">\"\n            ]);\n        case \"Variance\":\n            if (n.kind === \"plus\") {\n                return lines_1.fromString(\"+\");\n            }\n            if (n.kind === \"minus\") {\n                return lines_1.fromString(\"-\");\n            }\n            return lines_1.fromString(\"\");\n        case \"TypeParameter\":\n            if (n.variance) {\n                parts.push(printVariance(path, print));\n            }\n            parts.push(path.call(print, 'name'));\n            if (n.bound) {\n                parts.push(path.call(print, 'bound'));\n            }\n            if (n['default']) {\n                parts.push('=', path.call(print, 'default'));\n            }\n            return lines_1.concat(parts);\n        case \"TypeofTypeAnnotation\":\n            return lines_1.concat([\n                lines_1.fromString(\"typeof \", options),\n                path.call(print, \"argument\")\n            ]);\n        case \"UnionTypeAnnotation\":\n            return lines_1.fromString(\" | \").join(path.map(print, \"types\"));\n        case \"VoidTypeAnnotation\":\n            return lines_1.fromString(\"void\", options);\n        case \"NullTypeAnnotation\":\n            return lines_1.fromString(\"null\", options);\n        // Type Annotations for TypeScript (when using Babylon as parser)\n        case \"TSType\":\n            throw new Error(\"unprintable type: \" + JSON.stringify(n.type));\n        case \"TSNumberKeyword\":\n            return lines_1.fromString(\"number\", options);\n        case \"TSBigIntKeyword\":\n            return lines_1.fromString(\"bigint\", options);\n        case \"TSObjectKeyword\":\n            return lines_1.fromString(\"object\", options);\n        case \"TSBooleanKeyword\":\n            return lines_1.fromString(\"boolean\", options);\n        case \"TSStringKeyword\":\n            return lines_1.fromString(\"string\", options);\n        case \"TSSymbolKeyword\":\n            return lines_1.fromString(\"symbol\", options);\n        case \"TSAnyKeyword\":\n            return lines_1.fromString(\"any\", options);\n        case \"TSVoidKeyword\":\n            return lines_1.fromString(\"void\", options);\n        case \"TSThisType\":\n            return lines_1.fromString(\"this\", options);\n        case \"TSNullKeyword\":\n            return lines_1.fromString(\"null\", options);\n        case \"TSUndefinedKeyword\":\n            return lines_1.fromString(\"undefined\", options);\n        case \"TSUnknownKeyword\":\n            return lines_1.fromString(\"unknown\", options);\n        case \"TSNeverKeyword\":\n            return lines_1.fromString(\"never\", options);\n        case \"TSArrayType\":\n            return lines_1.concat([\n                path.call(print, \"elementType\"),\n                \"[]\"\n            ]);\n        case \"TSLiteralType\":\n            return path.call(print, \"literal\");\n        case \"TSUnionType\":\n            return lines_1.fromString(\" | \").join(path.map(print, \"types\"));\n        case \"TSIntersectionType\":\n            return lines_1.fromString(\" & \").join(path.map(print, \"types\"));\n        case \"TSConditionalType\":\n            parts.push(path.call(print, \"checkType\"), \" extends \", path.call(print, \"extendsType\"), \" ? \", path.call(print, \"trueType\"), \" : \", path.call(print, \"falseType\"));\n            return lines_1.concat(parts);\n        case \"TSInferType\":\n            parts.push(\"infer \", path.call(print, \"typeParameter\"));\n            return lines_1.concat(parts);\n        case \"TSParenthesizedType\":\n            return lines_1.concat([\n                \"(\",\n                path.call(print, \"typeAnnotation\"),\n                \")\"\n            ]);\n        case \"TSFunctionType\":\n        case \"TSConstructorType\":\n            return lines_1.concat([\n                path.call(print, \"typeParameters\"),\n                \"(\",\n                printFunctionParams(path, options, print),\n                \")\",\n                path.call(print, \"typeAnnotation\")\n            ]);\n        case \"TSMappedType\": {\n            parts.push(n.readonly ? \"readonly \" : \"\", \"[\", path.call(print, \"typeParameter\"), \"]\", n.optional ? \"?\" : \"\");\n            if (n.typeAnnotation) {\n                parts.push(\": \", path.call(print, \"typeAnnotation\"), \";\");\n            }\n            return lines_1.concat([\n                \"{\\n\",\n                lines_1.concat(parts).indent(options.tabWidth),\n                \"\\n}\",\n            ]);\n        }\n        case \"TSTupleType\":\n            return lines_1.concat([\n                \"[\",\n                lines_1.fromString(\", \").join(path.map(print, \"elementTypes\")),\n                \"]\"\n            ]);\n        case \"TSRestType\":\n            return lines_1.concat([\n                \"...\",\n                path.call(print, \"typeAnnotation\"),\n                \"[]\"\n            ]);\n        case \"TSOptionalType\":\n            return lines_1.concat([\n                path.call(print, \"typeAnnotation\"),\n                \"?\"\n            ]);\n        case \"TSIndexedAccessType\":\n            return lines_1.concat([\n                path.call(print, \"objectType\"),\n                \"[\",\n                path.call(print, \"indexType\"),\n                \"]\"\n            ]);\n        case \"TSTypeOperator\":\n            return lines_1.concat([\n                path.call(print, \"operator\"),\n                \" \",\n                path.call(print, \"typeAnnotation\")\n            ]);\n        case \"TSTypeLiteral\": {\n            var memberLines_1 = lines_1.fromString(\",\\n\").join(path.map(print, \"members\"));\n            if (memberLines_1.isEmpty()) {\n                return lines_1.fromString(\"{}\", options);\n            }\n            parts.push(\"{\\n\", memberLines_1.indent(options.tabWidth), \"\\n}\");\n            return lines_1.concat(parts);\n        }\n        case \"TSEnumMember\":\n            parts.push(path.call(print, \"id\"));\n            if (n.initializer) {\n                parts.push(\" = \", path.call(print, \"initializer\"));\n            }\n            return lines_1.concat(parts);\n        case \"TSTypeQuery\":\n            return lines_1.concat([\n                \"typeof \",\n                path.call(print, \"exprName\"),\n            ]);\n        case \"TSParameterProperty\":\n            if (n.accessibility) {\n                parts.push(n.accessibility, \" \");\n            }\n            if (n.export) {\n                parts.push(\"export \");\n            }\n            if (n.static) {\n                parts.push(\"static \");\n            }\n            if (n.readonly) {\n                parts.push(\"readonly \");\n            }\n            parts.push(path.call(print, \"parameter\"));\n            return lines_1.concat(parts);\n        case \"TSTypeReference\":\n            return lines_1.concat([\n                path.call(print, \"typeName\"),\n                path.call(print, \"typeParameters\")\n            ]);\n        case \"TSQualifiedName\":\n            return lines_1.concat([\n                path.call(print, \"left\"),\n                \".\",\n                path.call(print, \"right\")\n            ]);\n        case \"TSAsExpression\": {\n            var withParens = n.extra && n.extra.parenthesized === true;\n            if (withParens)\n                parts.push(\"(\");\n            parts.push(path.call(print, \"expression\"), lines_1.fromString(\" as \"), path.call(print, \"typeAnnotation\"));\n            if (withParens)\n                parts.push(\")\");\n            return lines_1.concat(parts);\n        }\n        case \"TSNonNullExpression\":\n            return lines_1.concat([\n                path.call(print, \"expression\"),\n                \"!\"\n            ]);\n        case \"TSTypeAnnotation\": {\n            // similar to flow's FunctionTypeAnnotation, this can be\n            // ambiguous: it can be prefixed by => or :\n            // in a type predicate, it takes the for u is U\n            var parent = path.getParentNode(0);\n            var prefix = \": \";\n            if (namedTypes.TSFunctionType.check(parent)) {\n                prefix = \" => \";\n            }\n            if (namedTypes.TSTypePredicate.check(parent)) {\n                prefix = \" is \";\n            }\n            return lines_1.concat([\n                prefix,\n                path.call(print, \"typeAnnotation\")\n            ]);\n        }\n        case \"TSIndexSignature\":\n            return lines_1.concat([\n                n.readonly ? \"readonly \" : \"\",\n                \"[\",\n                path.map(print, \"parameters\"),\n                \"]\",\n                path.call(print, \"typeAnnotation\")\n            ]);\n        case \"TSPropertySignature\":\n            parts.push(printVariance(path, print), n.readonly ? \"readonly \" : \"\");\n            if (n.computed) {\n                parts.push(\"[\", path.call(print, \"key\"), \"]\");\n            }\n            else {\n                parts.push(path.call(print, \"key\"));\n            }\n            parts.push(n.optional ? \"?\" : \"\", path.call(print, \"typeAnnotation\"));\n            return lines_1.concat(parts);\n        case \"TSMethodSignature\":\n            if (n.computed) {\n                parts.push(\"[\", path.call(print, \"key\"), \"]\");\n            }\n            else {\n                parts.push(path.call(print, \"key\"));\n            }\n            if (n.optional) {\n                parts.push(\"?\");\n            }\n            parts.push(path.call(print, \"typeParameters\"), \"(\", printFunctionParams(path, options, print), \")\", path.call(print, \"typeAnnotation\"));\n            return lines_1.concat(parts);\n        case \"TSTypePredicate\":\n            return lines_1.concat([\n                path.call(print, \"parameterName\"),\n                path.call(print, \"typeAnnotation\")\n            ]);\n        case \"TSCallSignatureDeclaration\":\n            return lines_1.concat([\n                path.call(print, \"typeParameters\"),\n                \"(\",\n                printFunctionParams(path, options, print),\n                \")\",\n                path.call(print, \"typeAnnotation\")\n            ]);\n        case \"TSConstructSignatureDeclaration\":\n            if (n.typeParameters) {\n                parts.push(\"new\", path.call(print, \"typeParameters\"));\n            }\n            else {\n                parts.push(\"new \");\n            }\n            parts.push(\"(\", printFunctionParams(path, options, print), \")\", path.call(print, \"typeAnnotation\"));\n            return lines_1.concat(parts);\n        case \"TSTypeAliasDeclaration\":\n            return lines_1.concat([\n                n.declare ? \"declare \" : \"\",\n                \"type \",\n                path.call(print, \"id\"),\n                path.call(print, \"typeParameters\"),\n                \" = \",\n                path.call(print, \"typeAnnotation\"),\n                \";\"\n            ]);\n        case \"TSTypeParameter\":\n            parts.push(path.call(print, \"name\"));\n            // ambiguous because of TSMappedType\n            var parent = path.getParentNode(0);\n            var isInMappedType = namedTypes.TSMappedType.check(parent);\n            if (n.constraint) {\n                parts.push(isInMappedType ? \" in \" : \" extends \", path.call(print, \"constraint\"));\n            }\n            if (n[\"default\"]) {\n                parts.push(\" = \", path.call(print, \"default\"));\n            }\n            return lines_1.concat(parts);\n        case \"TSTypeAssertion\":\n            var withParens = n.extra && n.extra.parenthesized === true;\n            if (withParens) {\n                parts.push(\"(\");\n            }\n            parts.push(\"<\", path.call(print, \"typeAnnotation\"), \"> \", path.call(print, \"expression\"));\n            if (withParens) {\n                parts.push(\")\");\n            }\n            return lines_1.concat(parts);\n        case \"TSTypeParameterDeclaration\":\n        case \"TSTypeParameterInstantiation\":\n            return lines_1.concat([\n                \"<\",\n                lines_1.fromString(\", \").join(path.map(print, \"params\")),\n                \">\"\n            ]);\n        case \"TSEnumDeclaration\":\n            parts.push(n.declare ? \"declare \" : \"\", n.const ? \"const \" : \"\", \"enum \", path.call(print, \"id\"));\n            var memberLines = lines_1.fromString(\",\\n\").join(path.map(print, \"members\"));\n            if (memberLines.isEmpty()) {\n                parts.push(\" {}\");\n            }\n            else {\n                parts.push(\" {\\n\", memberLines.indent(options.tabWidth), \"\\n}\");\n            }\n            return lines_1.concat(parts);\n        case \"TSExpressionWithTypeArguments\":\n            return lines_1.concat([\n                path.call(print, \"expression\"),\n                path.call(print, \"typeParameters\")\n            ]);\n        case \"TSInterfaceBody\":\n            var lines = lines_1.fromString(\";\\n\").join(path.map(print, \"body\"));\n            if (lines.isEmpty()) {\n                return lines_1.fromString(\"{}\", options);\n            }\n            return lines_1.concat([\n                \"{\\n\",\n                lines.indent(options.tabWidth), \";\",\n                \"\\n}\",\n            ]);\n        case \"TSImportType\":\n            parts.push(\"import(\", path.call(print, \"argument\"), \")\");\n            if (n.qualifier) {\n                parts.push(\".\", path.call(print, \"qualifier\"));\n            }\n            if (n.typeParameters) {\n                parts.push(path.call(print, \"typeParameters\"));\n            }\n            return lines_1.concat(parts);\n        case \"TSImportEqualsDeclaration\":\n            if (n.isExport) {\n                parts.push(\"export \");\n            }\n            parts.push(\"import \", path.call(print, \"id\"), \" = \", path.call(print, \"moduleReference\"));\n            return maybeAddSemicolon(lines_1.concat(parts));\n        case \"TSExternalModuleReference\":\n            return lines_1.concat([\"require(\", path.call(print, \"expression\"), \")\"]);\n        case \"TSModuleDeclaration\": {\n            var parent_1 = path.getParentNode();\n            if (parent_1.type === \"TSModuleDeclaration\") {\n                parts.push(\".\");\n            }\n            else {\n                if (n.declare) {\n                    parts.push(\"declare \");\n                }\n                if (!n.global) {\n                    var isExternal = n.id.type === \"StringLiteral\" ||\n                        (n.id.type === \"Literal\" &&\n                            typeof n.id.value === \"string\");\n                    if (isExternal) {\n                        parts.push(\"module \");\n                    }\n                    else if (n.loc &&\n                        n.loc.lines &&\n                        n.id.loc) {\n                        var prefix_1 = n.loc.lines.sliceString(n.loc.start, n.id.loc.start);\n                        // These keywords are fundamentally ambiguous in the\n                        // Babylon parser, and not reflected in the AST, so\n                        // the best we can do is to match the original code,\n                        // when possible.\n                        if (prefix_1.indexOf(\"module\") >= 0) {\n                            parts.push(\"module \");\n                        }\n                        else {\n                            parts.push(\"namespace \");\n                        }\n                    }\n                    else {\n                        parts.push(\"namespace \");\n                    }\n                }\n            }\n            parts.push(path.call(print, \"id\"));\n            if (n.body && n.body.type === \"TSModuleDeclaration\") {\n                parts.push(path.call(print, \"body\"));\n            }\n            else if (n.body) {\n                var bodyLines = path.call(print, \"body\");\n                if (bodyLines.isEmpty()) {\n                    parts.push(\" {}\");\n                }\n                else {\n                    parts.push(\" {\\n\", bodyLines.indent(options.tabWidth), \"\\n}\");\n                }\n            }\n            return lines_1.concat(parts);\n        }\n        case \"TSModuleBlock\":\n            return path.call(function (bodyPath) {\n                return printStatementSequence(bodyPath, options, print);\n            }, \"body\");\n        // Unhandled types below. If encountered, nodes of these types should\n        // be either left alone or desugared into AST types that are fully\n        // supported by the pretty-printer.\n        case \"ClassHeritage\": // TODO\n        case \"ComprehensionBlock\": // TODO\n        case \"ComprehensionExpression\": // TODO\n        case \"Glob\": // TODO\n        case \"GeneratorExpression\": // TODO\n        case \"LetStatement\": // TODO\n        case \"LetExpression\": // TODO\n        case \"GraphExpression\": // TODO\n        case \"GraphIndexExpression\": // TODO\n        // XML types that nobody cares about or needs to print.\n        case \"XMLDefaultDeclaration\":\n        case \"XMLAnyName\":\n        case \"XMLQualifiedIdentifier\":\n        case \"XMLFunctionQualifiedIdentifier\":\n        case \"XMLAttributeSelector\":\n        case \"XMLFilterExpression\":\n        case \"XML\":\n        case \"XMLElement\":\n        case \"XMLList\":\n        case \"XMLEscape\":\n        case \"XMLText\":\n        case \"XMLStartTag\":\n        case \"XMLEndTag\":\n        case \"XMLPointTag\":\n        case \"XMLName\":\n        case \"XMLAttribute\":\n        case \"XMLCdata\":\n        case \"XMLComment\":\n        case \"XMLProcessingInstruction\":\n        default:\n            debugger;\n            throw new Error(\"unknown type: \" + JSON.stringify(n.type));\n    }\n}\nfunction printDecorators(path, printPath) {\n    var parts = [];\n    var node = path.getValue();\n    if (node.decorators &&\n        node.decorators.length > 0 &&\n        // If the parent node is an export declaration, it will be\n        // responsible for printing node.decorators.\n        !util.getParentExportDeclaration(path)) {\n        path.each(function (decoratorPath) {\n            parts.push(printPath(decoratorPath), \"\\n\");\n        }, \"decorators\");\n    }\n    else if (util.isExportDeclaration(node) &&\n        node.declaration &&\n        node.declaration.decorators) {\n        // Export declarations are responsible for printing any decorators\n        // that logically apply to node.declaration.\n        path.each(function (decoratorPath) {\n            parts.push(printPath(decoratorPath), \"\\n\");\n        }, \"declaration\", \"decorators\");\n    }\n    return lines_1.concat(parts);\n}\nfunction printStatementSequence(path, options, print) {\n    var filtered = [];\n    var sawComment = false;\n    var sawStatement = false;\n    path.each(function (stmtPath) {\n        var stmt = stmtPath.getValue();\n        // Just in case the AST has been modified to contain falsy\n        // \"statements,\" it's safer simply to skip them.\n        if (!stmt) {\n            return;\n        }\n        // Skip printing EmptyStatement nodes to avoid leaving stray\n        // semicolons lying around.\n        if (stmt.type === \"EmptyStatement\" &&\n            !(stmt.comments && stmt.comments.length > 0)) {\n            return;\n        }\n        if (namedTypes.Comment.check(stmt)) {\n            // The pretty printer allows a dangling Comment node to act as\n            // a Statement when the Comment can't be attached to any other\n            // non-Comment node in the tree.\n            sawComment = true;\n        }\n        else if (namedTypes.Statement.check(stmt)) {\n            sawStatement = true;\n        }\n        else {\n            // When the pretty printer encounters a string instead of an\n            // AST node, it just prints the string. This behavior can be\n            // useful for fine-grained formatting decisions like inserting\n            // blank lines.\n            isString.assert(stmt);\n        }\n        // We can't hang onto stmtPath outside of this function, because\n        // it's just a reference to a mutable FastPath object, so we have\n        // to go ahead and print it here.\n        filtered.push({\n            node: stmt,\n            printed: print(stmtPath)\n        });\n    });\n    if (sawComment) {\n        assert_1.default.strictEqual(sawStatement, false, \"Comments may appear as statements in otherwise empty statement \" +\n            \"lists, but may not coexist with non-Comment nodes.\");\n    }\n    var prevTrailingSpace = null;\n    var len = filtered.length;\n    var parts = [];\n    filtered.forEach(function (info, i) {\n        var printed = info.printed;\n        var stmt = info.node;\n        var multiLine = printed.length > 1;\n        var notFirst = i > 0;\n        var notLast = i < len - 1;\n        var leadingSpace;\n        var trailingSpace;\n        var lines = stmt && stmt.loc && stmt.loc.lines;\n        var trueLoc = lines && options.reuseWhitespace &&\n            util.getTrueLoc(stmt, lines);\n        if (notFirst) {\n            if (trueLoc) {\n                var beforeStart = lines.skipSpaces(trueLoc.start, true);\n                var beforeStartLine = beforeStart ? beforeStart.line : 1;\n                var leadingGap = trueLoc.start.line - beforeStartLine;\n                leadingSpace = Array(leadingGap + 1).join(\"\\n\");\n            }\n            else {\n                leadingSpace = multiLine ? \"\\n\\n\" : \"\\n\";\n            }\n        }\n        else {\n            leadingSpace = \"\";\n        }\n        if (notLast) {\n            if (trueLoc) {\n                var afterEnd = lines.skipSpaces(trueLoc.end);\n                var afterEndLine = afterEnd ? afterEnd.line : lines.length;\n                var trailingGap = afterEndLine - trueLoc.end.line;\n                trailingSpace = Array(trailingGap + 1).join(\"\\n\");\n            }\n            else {\n                trailingSpace = multiLine ? \"\\n\\n\" : \"\\n\";\n            }\n        }\n        else {\n            trailingSpace = \"\";\n        }\n        parts.push(maxSpace(prevTrailingSpace, leadingSpace), printed);\n        if (notLast) {\n            prevTrailingSpace = trailingSpace;\n        }\n        else if (trailingSpace) {\n            parts.push(trailingSpace);\n        }\n    });\n    return lines_1.concat(parts);\n}\nfunction maxSpace(s1, s2) {\n    if (!s1 && !s2) {\n        return lines_1.fromString(\"\");\n    }\n    if (!s1) {\n        return lines_1.fromString(s2);\n    }\n    if (!s2) {\n        return lines_1.fromString(s1);\n    }\n    var spaceLines1 = lines_1.fromString(s1);\n    var spaceLines2 = lines_1.fromString(s2);\n    if (spaceLines2.length > spaceLines1.length) {\n        return spaceLines2;\n    }\n    return spaceLines1;\n}\nfunction printMethod(path, options, print) {\n    var node = path.getNode();\n    var kind = node.kind;\n    var parts = [];\n    var nodeValue = node.value;\n    if (!namedTypes.FunctionExpression.check(nodeValue)) {\n        nodeValue = node;\n    }\n    var access = node.accessibility || node.access;\n    if (typeof access === \"string\") {\n        parts.push(access, \" \");\n    }\n    if (node.static) {\n        parts.push(\"static \");\n    }\n    if (node.abstract) {\n        parts.push(\"abstract \");\n    }\n    if (node.readonly) {\n        parts.push(\"readonly \");\n    }\n    if (nodeValue.async) {\n        parts.push(\"async \");\n    }\n    if (nodeValue.generator) {\n        parts.push(\"*\");\n    }\n    if (kind === \"get\" || kind === \"set\") {\n        parts.push(kind, \" \");\n    }\n    var key = path.call(print, \"key\");\n    if (node.computed) {\n        key = lines_1.concat([\"[\", key, \"]\"]);\n    }\n    parts.push(key);\n    if (node.optional) {\n        parts.push(\"?\");\n    }\n    if (node === nodeValue) {\n        parts.push(path.call(print, \"typeParameters\"), \"(\", printFunctionParams(path, options, print), \")\", path.call(print, \"returnType\"));\n        if (node.body) {\n            parts.push(\" \", path.call(print, \"body\"));\n        }\n        else {\n            parts.push(\";\");\n        }\n    }\n    else {\n        parts.push(path.call(print, \"value\", \"typeParameters\"), \"(\", path.call(function (valuePath) {\n            return printFunctionParams(valuePath, options, print);\n        }, \"value\"), \")\", path.call(print, \"value\", \"returnType\"));\n        if (nodeValue.body) {\n            parts.push(\" \", path.call(print, \"value\", \"body\"));\n        }\n        else {\n            parts.push(\";\");\n        }\n    }\n    return lines_1.concat(parts);\n}\nfunction printArgumentsList(path, options, print) {\n    var printed = path.map(print, \"arguments\");\n    var trailingComma = util.isTrailingCommaEnabled(options, \"parameters\");\n    var joined = lines_1.fromString(\", \").join(printed);\n    if (joined.getLineLength(1) > options.wrapColumn) {\n        joined = lines_1.fromString(\",\\n\").join(printed);\n        return lines_1.concat([\n            \"(\\n\",\n            joined.indent(options.tabWidth),\n            trailingComma ? \",\\n)\" : \"\\n)\"\n        ]);\n    }\n    return lines_1.concat([\"(\", joined, \")\"]);\n}\nfunction printFunctionParams(path, options, print) {\n    var fun = path.getValue();\n    if (fun.params) {\n        var params = fun.params;\n        var printed = path.map(print, \"params\");\n    }\n    else if (fun.parameters) {\n        params = fun.parameters;\n        printed = path.map(print, \"parameters\");\n    }\n    if (fun.defaults) {\n        path.each(function (defExprPath) {\n            var i = defExprPath.getName();\n            var p = printed[i];\n            if (p && defExprPath.getValue()) {\n                printed[i] = lines_1.concat([p, \" = \", print(defExprPath)]);\n            }\n        }, \"defaults\");\n    }\n    if (fun.rest) {\n        printed.push(lines_1.concat([\"...\", path.call(print, \"rest\")]));\n    }\n    var joined = lines_1.fromString(\", \").join(printed);\n    if (joined.length > 1 ||\n        joined.getLineLength(1) > options.wrapColumn) {\n        joined = lines_1.fromString(\",\\n\").join(printed);\n        if (util.isTrailingCommaEnabled(options, \"parameters\") &&\n            !fun.rest &&\n            params[params.length - 1].type !== 'RestElement') {\n            joined = lines_1.concat([joined, \",\\n\"]);\n        }\n        else {\n            joined = lines_1.concat([joined, \"\\n\"]);\n        }\n        return lines_1.concat([\"\\n\", joined.indent(options.tabWidth)]);\n    }\n    return joined;\n}\nfunction printExportDeclaration(path, options, print) {\n    var decl = path.getValue();\n    var parts = [\"export \"];\n    if (decl.exportKind && decl.exportKind !== \"value\") {\n        parts.push(decl.exportKind + \" \");\n    }\n    var shouldPrintSpaces = options.objectCurlySpacing;\n    namedTypes.Declaration.assert(decl);\n    if (decl[\"default\"] ||\n        decl.type === \"ExportDefaultDeclaration\") {\n        parts.push(\"default \");\n    }\n    if (decl.declaration) {\n        parts.push(path.call(print, \"declaration\"));\n    }\n    else if (decl.specifiers) {\n        if (decl.specifiers.length === 1 &&\n            decl.specifiers[0].type === \"ExportBatchSpecifier\") {\n            parts.push(\"*\");\n        }\n        else if (decl.specifiers.length === 0) {\n            parts.push(\"{}\");\n        }\n        else if (decl.specifiers[0].type === 'ExportDefaultSpecifier') {\n            var unbracedSpecifiers_2 = [];\n            var bracedSpecifiers_2 = [];\n            path.each(function (specifierPath) {\n                var spec = specifierPath.getValue();\n                if (spec.type === \"ExportDefaultSpecifier\") {\n                    unbracedSpecifiers_2.push(print(specifierPath));\n                }\n                else {\n                    bracedSpecifiers_2.push(print(specifierPath));\n                }\n            }, \"specifiers\");\n            unbracedSpecifiers_2.forEach(function (lines, i) {\n                if (i > 0) {\n                    parts.push(\", \");\n                }\n                parts.push(lines);\n            });\n            if (bracedSpecifiers_2.length > 0) {\n                var lines_3 = lines_1.fromString(\", \").join(bracedSpecifiers_2);\n                if (lines_3.getLineLength(1) > options.wrapColumn) {\n                    lines_3 = lines_1.concat([\n                        lines_1.fromString(\",\\n\").join(bracedSpecifiers_2).indent(options.tabWidth),\n                        \",\"\n                    ]);\n                }\n                if (unbracedSpecifiers_2.length > 0) {\n                    parts.push(\", \");\n                }\n                if (lines_3.length > 1) {\n                    parts.push(\"{\\n\", lines_3, \"\\n}\");\n                }\n                else if (options.objectCurlySpacing) {\n                    parts.push(\"{ \", lines_3, \" }\");\n                }\n                else {\n                    parts.push(\"{\", lines_3, \"}\");\n                }\n            }\n        }\n        else {\n            parts.push(shouldPrintSpaces ? \"{ \" : \"{\", lines_1.fromString(\", \").join(path.map(print, \"specifiers\")), shouldPrintSpaces ? \" }\" : \"}\");\n        }\n        if (decl.source) {\n            parts.push(\" from \", path.call(print, \"source\"));\n        }\n    }\n    var lines = lines_1.concat(parts);\n    if (lastNonSpaceCharacter(lines) !== \";\" &&\n        !(decl.declaration &&\n            (decl.declaration.type === \"FunctionDeclaration\" ||\n                decl.declaration.type === \"ClassDeclaration\" ||\n                decl.declaration.type === \"TSModuleDeclaration\" ||\n                decl.declaration.type === \"TSInterfaceDeclaration\" ||\n                decl.declaration.type === \"TSEnumDeclaration\"))) {\n        lines = lines_1.concat([lines, \";\"]);\n    }\n    return lines;\n}\nfunction printFlowDeclaration(path, parts) {\n    var parentExportDecl = util.getParentExportDeclaration(path);\n    if (parentExportDecl) {\n        assert_1.default.strictEqual(parentExportDecl.type, \"DeclareExportDeclaration\");\n    }\n    else {\n        // If the parent node has type DeclareExportDeclaration, then it\n        // will be responsible for printing the \"declare\" token. Otherwise\n        // it needs to be printed with this non-exported declaration node.\n        parts.unshift(\"declare \");\n    }\n    return lines_1.concat(parts);\n}\nfunction printVariance(path, print) {\n    return path.call(function (variancePath) {\n        var value = variancePath.getValue();\n        if (value) {\n            if (value === \"plus\") {\n                return lines_1.fromString(\"+\");\n            }\n            if (value === \"minus\") {\n                return lines_1.fromString(\"-\");\n            }\n            return print(variancePath);\n        }\n        return lines_1.fromString(\"\");\n    }, \"variance\");\n}\nfunction adjustClause(clause, options) {\n    if (clause.length > 1)\n        return lines_1.concat([\" \", clause]);\n    return lines_1.concat([\n        \"\\n\",\n        maybeAddSemicolon(clause).indent(options.tabWidth)\n    ]);\n}\nfunction lastNonSpaceCharacter(lines) {\n    var pos = lines.lastPos();\n    do {\n        var ch = lines.charAt(pos);\n        if (/\\S/.test(ch))\n            return ch;\n    } while (lines.prevPos(pos));\n}\nfunction endsWithBrace(lines) {\n    return lastNonSpaceCharacter(lines) === \"}\";\n}\nfunction swapQuotes(str) {\n    return str.replace(/['\"]/g, function (m) {\n        return m === '\"' ? '\\'' : '\"';\n    });\n}\nfunction nodeStr(str, options) {\n    isString.assert(str);\n    switch (options.quote) {\n        case \"auto\":\n            var double = JSON.stringify(str);\n            var single = swapQuotes(JSON.stringify(swapQuotes(str)));\n            return double.length > single.length ? single : double;\n        case \"single\":\n            return swapQuotes(JSON.stringify(swapQuotes(str)));\n        case \"double\":\n        default:\n            return JSON.stringify(str);\n    }\n}\nfunction maybeAddSemicolon(lines) {\n    var eoc = lastNonSpaceCharacter(lines);\n    if (!eoc || \"\\n};\".indexOf(eoc) < 0)\n        return lines_1.concat([lines, \";\"]);\n    return lines;\n}\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/lib/printer.js?");

/***/ }),

/***/ "../../node_modules/recast/lib/types.js":
/*!*****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/lib/types.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// This module was originally created so that Recast could add its own\n// custom types to the AST type system (in particular, the File type), but\n// those types are now incorporated into ast-types, so this module doesn't\n// have much to do anymore. Still, it might prove useful in the future.\nvar ast_types_1 = __importDefault(__webpack_require__(/*! ast-types */ \"../../node_modules/ast-types/main.js\"));\nexports.default = ast_types_1.default;\n__export(__webpack_require__(/*! ast-types */ \"../../node_modules/ast-types/main.js\"));\nmodule.exports = exports[\"default\"];\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/lib/types.js?");

/***/ }),

/***/ "../../node_modules/recast/lib/util.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/lib/util.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar assert_1 = __importDefault(__webpack_require__(/*! assert */ \"../../node_modules/assert/assert.js\"));\nvar types_1 = __importDefault(__webpack_require__(/*! ./types */ \"../../node_modules/recast/lib/types.js\"));\nvar n = types_1.default.namedTypes;\nvar source_map_1 = __importDefault(__webpack_require__(/*! source-map */ \"../../node_modules/recast/node_modules/source-map/source-map.js\"));\nvar SourceMapConsumer = source_map_1.default.SourceMapConsumer;\nvar SourceMapGenerator = source_map_1.default.SourceMapGenerator;\nvar hasOwn = Object.prototype.hasOwnProperty;\nfunction getOption(options, key, defaultValue) {\n    if (options && hasOwn.call(options, key)) {\n        return options[key];\n    }\n    return defaultValue;\n}\nexports.getOption = getOption;\nfunction getUnionOfKeys() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var result = {};\n    var argc = args.length;\n    for (var i = 0; i < argc; ++i) {\n        var keys = Object.keys(args[i]);\n        var keyCount = keys.length;\n        for (var j = 0; j < keyCount; ++j) {\n            result[keys[j]] = true;\n        }\n    }\n    return result;\n}\nexports.getUnionOfKeys = getUnionOfKeys;\nfunction comparePos(pos1, pos2) {\n    return (pos1.line - pos2.line) || (pos1.column - pos2.column);\n}\nexports.comparePos = comparePos;\nfunction copyPos(pos) {\n    return {\n        line: pos.line,\n        column: pos.column\n    };\n}\nexports.copyPos = copyPos;\nfunction composeSourceMaps(formerMap, latterMap) {\n    if (formerMap) {\n        if (!latterMap) {\n            return formerMap;\n        }\n    }\n    else {\n        return latterMap || null;\n    }\n    var smcFormer = new SourceMapConsumer(formerMap);\n    var smcLatter = new SourceMapConsumer(latterMap);\n    var smg = new SourceMapGenerator({\n        file: latterMap.file,\n        sourceRoot: latterMap.sourceRoot\n    });\n    var sourcesToContents = {};\n    smcLatter.eachMapping(function (mapping) {\n        var origPos = smcFormer.originalPositionFor({\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n        });\n        var sourceName = origPos.source;\n        if (sourceName === null) {\n            return;\n        }\n        smg.addMapping({\n            source: sourceName,\n            original: copyPos(origPos),\n            generated: {\n                line: mapping.generatedLine,\n                column: mapping.generatedColumn\n            },\n            name: mapping.name\n        });\n        var sourceContent = smcFormer.sourceContentFor(sourceName);\n        if (sourceContent && !hasOwn.call(sourcesToContents, sourceName)) {\n            sourcesToContents[sourceName] = sourceContent;\n            smg.setSourceContent(sourceName, sourceContent);\n        }\n    });\n    return smg.toJSON();\n}\nexports.composeSourceMaps = composeSourceMaps;\n;\nfunction getTrueLoc(node, lines) {\n    // It's possible that node is newly-created (not parsed by Esprima),\n    // in which case it probably won't have a .loc property (or an\n    // .original property for that matter). That's fine; we'll just\n    // pretty-print it as usual.\n    if (!node.loc) {\n        return null;\n    }\n    var result = {\n        start: node.loc.start,\n        end: node.loc.end\n    };\n    function include(node) {\n        expandLoc(result, node.loc);\n    }\n    // If the node is an export declaration and its .declaration has any\n    // decorators, their locations might contribute to the true start/end\n    // positions of the export declaration node.\n    if (node.declaration &&\n        node.declaration.decorators &&\n        isExportDeclaration(node)) {\n        node.declaration.decorators.forEach(include);\n    }\n    if (comparePos(result.start, result.end) < 0) {\n        // Trim leading whitespace.\n        result.start = copyPos(result.start);\n        lines.skipSpaces(result.start, false, true);\n        if (comparePos(result.start, result.end) < 0) {\n            // Trim trailing whitespace, if the end location is not already the\n            // same as the start location.\n            result.end = copyPos(result.end);\n            lines.skipSpaces(result.end, true, true);\n        }\n    }\n    // If the node has any comments, their locations might contribute to\n    // the true start/end positions of the node.\n    if (node.comments) {\n        node.comments.forEach(include);\n    }\n    return result;\n}\nexports.getTrueLoc = getTrueLoc;\n;\nfunction expandLoc(parentLoc, childLoc) {\n    if (parentLoc && childLoc) {\n        if (comparePos(childLoc.start, parentLoc.start) < 0) {\n            parentLoc.start = childLoc.start;\n        }\n        if (comparePos(parentLoc.end, childLoc.end) < 0) {\n            parentLoc.end = childLoc.end;\n        }\n    }\n}\nfunction fixFaultyLocations(node, lines) {\n    var loc = node.loc;\n    if (loc) {\n        if (loc.start.line < 1) {\n            loc.start.line = 1;\n        }\n        if (loc.end.line < 1) {\n            loc.end.line = 1;\n        }\n    }\n    if (node.type === \"File\") {\n        // Babylon returns File nodes whose .loc.{start,end} do not include\n        // leading or trailing whitespace.\n        loc.start = lines.firstPos();\n        loc.end = lines.lastPos();\n    }\n    fixForLoopHead(node, lines);\n    fixTemplateLiteral(node, lines);\n    if (loc && node.decorators) {\n        // Expand the .loc of the node responsible for printing the decorators\n        // (here, the decorated node) so that it includes node.decorators.\n        node.decorators.forEach(function (decorator) {\n            expandLoc(loc, decorator.loc);\n        });\n    }\n    else if (node.declaration && isExportDeclaration(node)) {\n        // Nullify .loc information for the child declaration so that we never\n        // try to reprint it without also reprinting the export declaration.\n        node.declaration.loc = null;\n        // Expand the .loc of the node responsible for printing the decorators\n        // (here, the export declaration) so that it includes node.decorators.\n        var decorators = node.declaration.decorators;\n        if (decorators) {\n            decorators.forEach(function (decorator) {\n                expandLoc(loc, decorator.loc);\n            });\n        }\n    }\n    else if ((n.MethodDefinition && n.MethodDefinition.check(node)) ||\n        (n.Property.check(node) && (node.method || node.shorthand))) {\n        // If the node is a MethodDefinition or a .method or .shorthand\n        // Property, then the location information stored in\n        // node.value.loc is very likely untrustworthy (just the {body}\n        // part of a method, or nothing in the case of shorthand\n        // properties), so we null out that information to prevent\n        // accidental reuse of bogus source code during reprinting.\n        node.value.loc = null;\n        if (n.FunctionExpression.check(node.value)) {\n            // FunctionExpression method values should be anonymous,\n            // because their .id fields are ignored anyway.\n            node.value.id = null;\n        }\n    }\n    else if (node.type === \"ObjectTypeProperty\") {\n        var loc = node.loc;\n        var end = loc && loc.end;\n        if (end) {\n            end = copyPos(end);\n            if (lines.prevPos(end) &&\n                lines.charAt(end) === \",\") {\n                // Some parsers accidentally include trailing commas in the\n                // .loc.end information for ObjectTypeProperty nodes.\n                if ((end = lines.skipSpaces(end, true, true))) {\n                    loc.end = end;\n                }\n            }\n        }\n    }\n}\nexports.fixFaultyLocations = fixFaultyLocations;\n;\nfunction fixForLoopHead(node, lines) {\n    if (node.type !== \"ForStatement\") {\n        return;\n    }\n    function fix(child) {\n        var loc = child && child.loc;\n        var start = loc && loc.start;\n        var end = loc && copyPos(loc.end);\n        while (start && end && comparePos(start, end) < 0) {\n            lines.prevPos(end);\n            if (lines.charAt(end) === \";\") {\n                // Update child.loc.end to *exclude* the ';' character.\n                loc.end.line = end.line;\n                loc.end.column = end.column;\n            }\n            else {\n                break;\n            }\n        }\n    }\n    fix(node.init);\n    fix(node.test);\n    fix(node.update);\n}\nfunction fixTemplateLiteral(node, lines) {\n    if (node.type !== \"TemplateLiteral\") {\n        return;\n    }\n    if (node.quasis.length === 0) {\n        // If there are no quasi elements, then there is nothing to fix.\n        return;\n    }\n    // node.loc is not present when using export default with a template literal\n    if (node.loc) {\n        // First we need to exclude the opening ` from the .loc of the first\n        // quasi element, in case the parser accidentally decided to include it.\n        var afterLeftBackTickPos = copyPos(node.loc.start);\n        assert_1.default.strictEqual(lines.charAt(afterLeftBackTickPos), \"`\");\n        assert_1.default.ok(lines.nextPos(afterLeftBackTickPos));\n        var firstQuasi = node.quasis[0];\n        if (comparePos(firstQuasi.loc.start, afterLeftBackTickPos) < 0) {\n            firstQuasi.loc.start = afterLeftBackTickPos;\n        }\n        // Next we need to exclude the closing ` from the .loc of the last quasi\n        // element, in case the parser accidentally decided to include it.\n        var rightBackTickPos = copyPos(node.loc.end);\n        assert_1.default.ok(lines.prevPos(rightBackTickPos));\n        assert_1.default.strictEqual(lines.charAt(rightBackTickPos), \"`\");\n        var lastQuasi = node.quasis[node.quasis.length - 1];\n        if (comparePos(rightBackTickPos, lastQuasi.loc.end) < 0) {\n            lastQuasi.loc.end = rightBackTickPos;\n        }\n    }\n    // Now we need to exclude ${ and } characters from the .loc's of all\n    // quasi elements, since some parsers accidentally include them.\n    node.expressions.forEach(function (expr, i) {\n        // Rewind from expr.loc.start over any whitespace and the ${ that\n        // precedes the expression. The position of the $ should be the same\n        // as the .loc.end of the preceding quasi element, but some parsers\n        // accidentally include the ${ in the .loc of the quasi element.\n        var dollarCurlyPos = lines.skipSpaces(expr.loc.start, true, false);\n        if (lines.prevPos(dollarCurlyPos) &&\n            lines.charAt(dollarCurlyPos) === \"{\" &&\n            lines.prevPos(dollarCurlyPos) &&\n            lines.charAt(dollarCurlyPos) === \"$\") {\n            var quasiBefore = node.quasis[i];\n            if (comparePos(dollarCurlyPos, quasiBefore.loc.end) < 0) {\n                quasiBefore.loc.end = dollarCurlyPos;\n            }\n        }\n        // Likewise, some parsers accidentally include the } that follows\n        // the expression in the .loc of the following quasi element.\n        var rightCurlyPos = lines.skipSpaces(expr.loc.end, false, false);\n        if (lines.charAt(rightCurlyPos) === \"}\") {\n            assert_1.default.ok(lines.nextPos(rightCurlyPos));\n            // Now rightCurlyPos is technically the position just after the }.\n            var quasiAfter = node.quasis[i + 1];\n            if (comparePos(quasiAfter.loc.start, rightCurlyPos) < 0) {\n                quasiAfter.loc.start = rightCurlyPos;\n            }\n        }\n    });\n}\nfunction isExportDeclaration(node) {\n    if (node)\n        switch (node.type) {\n            case \"ExportDeclaration\":\n            case \"ExportDefaultDeclaration\":\n            case \"ExportDefaultSpecifier\":\n            case \"DeclareExportDeclaration\":\n            case \"ExportNamedDeclaration\":\n            case \"ExportAllDeclaration\":\n                return true;\n        }\n    return false;\n}\nexports.isExportDeclaration = isExportDeclaration;\n;\nfunction getParentExportDeclaration(path) {\n    var parentNode = path.getParentNode();\n    if (path.getName() === \"declaration\" &&\n        isExportDeclaration(parentNode)) {\n        return parentNode;\n    }\n    return null;\n}\nexports.getParentExportDeclaration = getParentExportDeclaration;\n;\nfunction isTrailingCommaEnabled(options, context) {\n    var trailingComma = options.trailingComma;\n    if (typeof trailingComma === \"object\") {\n        return !!trailingComma[context];\n    }\n    return !!trailingComma;\n}\nexports.isTrailingCommaEnabled = isTrailingCommaEnabled;\n;\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/lib/util.js?");

/***/ }),

/***/ "../../node_modules/recast/main.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/main.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {;\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar fs_1 = __importDefault(__webpack_require__(/*! fs */ 1));\nvar types_1 = __importDefault(__webpack_require__(/*! ./lib/types */ \"../../node_modules/recast/lib/types.js\"));\nvar parser_1 = __webpack_require__(/*! ./lib/parser */ \"../../node_modules/recast/lib/parser.js\");\nvar printer_1 = __webpack_require__(/*! ./lib/printer */ \"../../node_modules/recast/lib/printer.js\");\nfunction print(node, options) {\n    return new printer_1.Printer(options).print(node);\n}\nfunction prettyPrint(node, options) {\n    return new printer_1.Printer(options).printGenerically(node);\n}\nfunction run(transformer, options) {\n    return runFile(process.argv[2], transformer, options);\n}\nfunction runFile(path, transformer, options) {\n    fs_1.default.readFile(path, \"utf-8\", function (err, code) {\n        if (err) {\n            console.error(err);\n            return;\n        }\n        runString(code, transformer, options);\n    });\n}\nfunction defaultWriteback(output) {\n    process.stdout.write(output);\n}\nfunction runString(code, transformer, options) {\n    var writeback = options && options.writeback || defaultWriteback;\n    transformer(parser_1.parse(code, options), function (node) {\n        writeback(print(node, options).code);\n    });\n}\nvar main = {};\nObject.defineProperties(main, {\n    /**\n     * Parse a string of code into an augmented syntax tree suitable for\n     * arbitrary modification and reprinting.\n     */\n    parse: {\n        enumerable: true,\n        value: parser_1.parse\n    },\n    /**\n     * Traverse and potentially modify an abstract syntax tree using a\n     * convenient visitor syntax:\n     *\n     *   recast.visit(ast, {\n     *     names: [],\n     *     visitIdentifier: function(path) {\n     *       var node = path.value;\n     *       this.visitor.names.push(node.name);\n     *       this.traverse(path);\n     *     }\n     *   });\n     */\n    visit: {\n        enumerable: true,\n        value: types_1.default.visit\n    },\n    /**\n     * Reprint a modified syntax tree using as much of the original source\n     * code as possible.\n     */\n    print: {\n        enumerable: true,\n        value: print\n    },\n    /**\n     * Print without attempting to reuse any original source code.\n     */\n    prettyPrint: {\n        enumerable: false,\n        value: prettyPrint\n    },\n    /**\n     * Customized version of require(\"ast-types\").\n     */\n    types: {\n        enumerable: false,\n        value: types_1.default\n    },\n    /**\n     * Convenient command-line interface (see e.g. example/add-braces).\n     */\n    run: {\n        enumerable: false,\n        value: run\n    }\n});\nexports.default = main;\nmodule.exports = exports[\"default\"];\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"../../node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/main.js?");

/***/ }),

/***/ "../../node_modules/recast/node_modules/source-map/lib/array-set.js":
/*!*********************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/node_modules/source-map/lib/array-set.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = __webpack_require__(/*! ./util */ \"../../node_modules/recast/node_modules/source-map/lib/util.js\");\nvar has = Object.prototype.hasOwnProperty;\nvar hasNativeMap = typeof Map !== \"undefined\";\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nfunction ArraySet() {\n  this._array = [];\n  this._set = hasNativeMap ? new Map() : Object.create(null);\n}\n\n/**\n * Static method for creating ArraySet instances from an existing array.\n */\nArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n  var set = new ArraySet();\n  for (var i = 0, len = aArray.length; i < len; i++) {\n    set.add(aArray[i], aAllowDuplicates);\n  }\n  return set;\n};\n\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */\nArraySet.prototype.size = function ArraySet_size() {\n  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n};\n\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */\nArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n  var idx = this._array.length;\n  if (!isDuplicate || aAllowDuplicates) {\n    this._array.push(aStr);\n  }\n  if (!isDuplicate) {\n    if (hasNativeMap) {\n      this._set.set(aStr, idx);\n    } else {\n      this._set[sStr] = idx;\n    }\n  }\n};\n\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */\nArraySet.prototype.has = function ArraySet_has(aStr) {\n  if (hasNativeMap) {\n    return this._set.has(aStr);\n  } else {\n    var sStr = util.toSetString(aStr);\n    return has.call(this._set, sStr);\n  }\n};\n\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */\nArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n  if (hasNativeMap) {\n    var idx = this._set.get(aStr);\n    if (idx >= 0) {\n        return idx;\n    }\n  } else {\n    var sStr = util.toSetString(aStr);\n    if (has.call(this._set, sStr)) {\n      return this._set[sStr];\n    }\n  }\n\n  throw new Error('\"' + aStr + '\" is not in the set.');\n};\n\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */\nArraySet.prototype.at = function ArraySet_at(aIdx) {\n  if (aIdx >= 0 && aIdx < this._array.length) {\n    return this._array[aIdx];\n  }\n  throw new Error('No element indexed by ' + aIdx);\n};\n\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */\nArraySet.prototype.toArray = function ArraySet_toArray() {\n  return this._array.slice();\n};\n\nexports.ArraySet = ArraySet;\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/node_modules/source-map/lib/array-set.js?");

/***/ }),

/***/ "../../node_modules/recast/node_modules/source-map/lib/base64-vlq.js":
/*!**********************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/node_modules/source-map/lib/base64-vlq.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar base64 = __webpack_require__(/*! ./base64 */ \"../../node_modules/recast/node_modules/source-map/lib/base64.js\");\n\n// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\n\nvar VLQ_BASE_SHIFT = 5;\n\n// binary: 100000\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n// binary: 011111\nvar VLQ_BASE_MASK = VLQ_BASE - 1;\n\n// binary: 100000\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */\nfunction toVLQSigned(aValue) {\n  return aValue < 0\n    ? ((-aValue) << 1) + 1\n    : (aValue << 1) + 0;\n}\n\n/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */\nfunction fromVLQSigned(aValue) {\n  var isNegative = (aValue & 1) === 1;\n  var shifted = aValue >> 1;\n  return isNegative\n    ? -shifted\n    : shifted;\n}\n\n/**\n * Returns the base 64 VLQ encoded value.\n */\nexports.encode = function base64VLQ_encode(aValue) {\n  var encoded = \"\";\n  var digit;\n\n  var vlq = toVLQSigned(aValue);\n\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n    if (vlq > 0) {\n      // There are still more digits in this value, so we must make sure the\n      // continuation bit is marked.\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n\n  return encoded;\n};\n\n/**\n * Decodes the next base 64 VLQ value from the given string and returns the\n * value and the rest of the string via the out parameter.\n */\nexports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n  var strLen = aStr.length;\n  var result = 0;\n  var shift = 0;\n  var continuation, digit;\n\n  do {\n    if (aIndex >= strLen) {\n      throw new Error(\"Expected more digits in base 64 VLQ value.\");\n    }\n\n    digit = base64.decode(aStr.charCodeAt(aIndex++));\n    if (digit === -1) {\n      throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n    }\n\n    continuation = !!(digit & VLQ_CONTINUATION_BIT);\n    digit &= VLQ_BASE_MASK;\n    result = result + (digit << shift);\n    shift += VLQ_BASE_SHIFT;\n  } while (continuation);\n\n  aOutParam.value = fromVLQSigned(result);\n  aOutParam.rest = aIndex;\n};\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/node_modules/source-map/lib/base64-vlq.js?");

/***/ }),

/***/ "../../node_modules/recast/node_modules/source-map/lib/base64.js":
/*!******************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/node_modules/source-map/lib/base64.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */\nexports.encode = function (number) {\n  if (0 <= number && number < intToCharMap.length) {\n    return intToCharMap[number];\n  }\n  throw new TypeError(\"Must be between 0 and 63: \" + number);\n};\n\n/**\n * Decode a single base 64 character code digit to an integer. Returns -1 on\n * failure.\n */\nexports.decode = function (charCode) {\n  var bigA = 65;     // 'A'\n  var bigZ = 90;     // 'Z'\n\n  var littleA = 97;  // 'a'\n  var littleZ = 122; // 'z'\n\n  var zero = 48;     // '0'\n  var nine = 57;     // '9'\n\n  var plus = 43;     // '+'\n  var slash = 47;    // '/'\n\n  var littleOffset = 26;\n  var numberOffset = 52;\n\n  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n  if (bigA <= charCode && charCode <= bigZ) {\n    return (charCode - bigA);\n  }\n\n  // 26 - 51: abcdefghijklmnopqrstuvwxyz\n  if (littleA <= charCode && charCode <= littleZ) {\n    return (charCode - littleA + littleOffset);\n  }\n\n  // 52 - 61: 0123456789\n  if (zero <= charCode && charCode <= nine) {\n    return (charCode - zero + numberOffset);\n  }\n\n  // 62: +\n  if (charCode == plus) {\n    return 62;\n  }\n\n  // 63: /\n  if (charCode == slash) {\n    return 63;\n  }\n\n  // Invalid base64 digit.\n  return -1;\n};\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/node_modules/source-map/lib/base64.js?");

/***/ }),

/***/ "../../node_modules/recast/node_modules/source-map/lib/binary-search.js":
/*!*************************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/node_modules/source-map/lib/binary-search.js ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nexports.GREATEST_LOWER_BOUND = 1;\nexports.LEAST_UPPER_BOUND = 2;\n\n/**\n * Recursive implementation of binary search.\n *\n * @param aLow Indices here and lower do not contain the needle.\n * @param aHigh Indices here and higher do not contain the needle.\n * @param aNeedle The element being searched for.\n * @param aHaystack The non-empty array being searched.\n * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n */\nfunction recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n  // This function terminates when one of the following is true:\n  //\n  //   1. We find the exact element we are looking for.\n  //\n  //   2. We did not find the exact element, but we can return the index of\n  //      the next-closest element.\n  //\n  //   3. We did not find the exact element, and there is no next-closest\n  //      element than the one we are searching for, so we return -1.\n  var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n  var cmp = aCompare(aNeedle, aHaystack[mid], true);\n  if (cmp === 0) {\n    // Found the element we are looking for.\n    return mid;\n  }\n  else if (cmp > 0) {\n    // Our needle is greater than aHaystack[mid].\n    if (aHigh - mid > 1) {\n      // The element is in the upper half.\n      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // The exact needle element was not found in this haystack. Determine if\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return aHigh < aHaystack.length ? aHigh : -1;\n    } else {\n      return mid;\n    }\n  }\n  else {\n    // Our needle is less than aHaystack[mid].\n    if (mid - aLow > 1) {\n      // The element is in the lower half.\n      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return mid;\n    } else {\n      return aLow < 0 ? -1 : aLow;\n    }\n  }\n}\n\n/**\n * This is an implementation of binary search which will always try and return\n * the index of the closest element if there is no exact hit. This is because\n * mappings between original and generated line/col pairs are single points,\n * and there is an implicit region between each of them, so a miss just means\n * that you aren't on the very start of a region.\n *\n * @param aNeedle The element you are looking for.\n * @param aHaystack The array that is being searched.\n * @param aCompare A function which takes the needle and an element in the\n *     array and returns -1, 0, or 1 depending on whether the needle is less\n *     than, equal to, or greater than the element, respectively.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n */\nexports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n  if (aHaystack.length === 0) {\n    return -1;\n  }\n\n  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n  if (index < 0) {\n    return -1;\n  }\n\n  // We have found either the exact element, or the next-closest element than\n  // the one we are searching for. However, there may be more than one such\n  // element. Make sure we always return the smallest of these.\n  while (index - 1 >= 0) {\n    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n      break;\n    }\n    --index;\n  }\n\n  return index;\n};\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/node_modules/source-map/lib/binary-search.js?");

/***/ }),

/***/ "../../node_modules/recast/node_modules/source-map/lib/mapping-list.js":
/*!************************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/node_modules/source-map/lib/mapping-list.js ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2014 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = __webpack_require__(/*! ./util */ \"../../node_modules/recast/node_modules/source-map/lib/util.js\");\n\n/**\n * Determine whether mappingB is after mappingA with respect to generated\n * position.\n */\nfunction generatedPositionAfter(mappingA, mappingB) {\n  // Optimized for most common case\n  var lineA = mappingA.generatedLine;\n  var lineB = mappingB.generatedLine;\n  var columnA = mappingA.generatedColumn;\n  var columnB = mappingB.generatedColumn;\n  return lineB > lineA || lineB == lineA && columnB >= columnA ||\n         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n}\n\n/**\n * A data structure to provide a sorted view of accumulated mappings in a\n * performance conscious manner. It trades a neglibable overhead in general\n * case for a large speedup in case of mappings being added in order.\n */\nfunction MappingList() {\n  this._array = [];\n  this._sorted = true;\n  // Serves as infimum\n  this._last = {generatedLine: -1, generatedColumn: 0};\n}\n\n/**\n * Iterate through internal items. This method takes the same arguments that\n * `Array.prototype.forEach` takes.\n *\n * NOTE: The order of the mappings is NOT guaranteed.\n */\nMappingList.prototype.unsortedForEach =\n  function MappingList_forEach(aCallback, aThisArg) {\n    this._array.forEach(aCallback, aThisArg);\n  };\n\n/**\n * Add the given source mapping.\n *\n * @param Object aMapping\n */\nMappingList.prototype.add = function MappingList_add(aMapping) {\n  if (generatedPositionAfter(this._last, aMapping)) {\n    this._last = aMapping;\n    this._array.push(aMapping);\n  } else {\n    this._sorted = false;\n    this._array.push(aMapping);\n  }\n};\n\n/**\n * Returns the flat, sorted array of mappings. The mappings are sorted by\n * generated position.\n *\n * WARNING: This method returns internal data without copying, for\n * performance. The return value must NOT be mutated, and should be treated as\n * an immutable borrow. If you want to take ownership, you must make your own\n * copy.\n */\nMappingList.prototype.toArray = function MappingList_toArray() {\n  if (!this._sorted) {\n    this._array.sort(util.compareByGeneratedPositionsInflated);\n    this._sorted = true;\n  }\n  return this._array;\n};\n\nexports.MappingList = MappingList;\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/node_modules/source-map/lib/mapping-list.js?");

/***/ }),

/***/ "../../node_modules/recast/node_modules/source-map/lib/quick-sort.js":
/*!**********************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/node_modules/source-map/lib/quick-sort.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n// It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */\nfunction swap(ary, x, y) {\n  var temp = ary[x];\n  ary[x] = ary[y];\n  ary[y] = temp;\n}\n\n/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */\nfunction randomIntInRange(low, high) {\n  return Math.round(low + (Math.random() * (high - low)));\n}\n\n/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */\nfunction doQuickSort(ary, comparator, p, r) {\n  // If our lower bound is less than our upper bound, we (1) partition the\n  // array into two pieces and (2) recurse on each half. If it is not, this is\n  // the empty array and our base case.\n\n  if (p < r) {\n    // (1) Partitioning.\n    //\n    // The partitioning chooses a pivot between `p` and `r` and moves all\n    // elements that are less than or equal to the pivot to the before it, and\n    // all the elements that are greater than it after it. The effect is that\n    // once partition is done, the pivot is in the exact place it will be when\n    // the array is put in sorted order, and it will not need to be moved\n    // again. This runs in O(n) time.\n\n    // Always choose a random pivot so that an input array which is reverse\n    // sorted does not cause O(n^2) running time.\n    var pivotIndex = randomIntInRange(p, r);\n    var i = p - 1;\n\n    swap(ary, pivotIndex, r);\n    var pivot = ary[r];\n\n    // Immediately after `j` is incremented in this loop, the following hold\n    // true:\n    //\n    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n    //\n    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n    for (var j = p; j < r; j++) {\n      if (comparator(ary[j], pivot) <= 0) {\n        i += 1;\n        swap(ary, i, j);\n      }\n    }\n\n    swap(ary, i + 1, j);\n    var q = i + 1;\n\n    // (2) Recurse on each half.\n\n    doQuickSort(ary, comparator, p, q - 1);\n    doQuickSort(ary, comparator, q + 1, r);\n  }\n}\n\n/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */\nexports.quickSort = function (ary, comparator) {\n  doQuickSort(ary, comparator, 0, ary.length - 1);\n};\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/node_modules/source-map/lib/quick-sort.js?");

/***/ }),

/***/ "../../node_modules/recast/node_modules/source-map/lib/source-map-consumer.js":
/*!*******************************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/node_modules/source-map/lib/source-map-consumer.js ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = __webpack_require__(/*! ./util */ \"../../node_modules/recast/node_modules/source-map/lib/util.js\");\nvar binarySearch = __webpack_require__(/*! ./binary-search */ \"../../node_modules/recast/node_modules/source-map/lib/binary-search.js\");\nvar ArraySet = __webpack_require__(/*! ./array-set */ \"../../node_modules/recast/node_modules/source-map/lib/array-set.js\").ArraySet;\nvar base64VLQ = __webpack_require__(/*! ./base64-vlq */ \"../../node_modules/recast/node_modules/source-map/lib/base64-vlq.js\");\nvar quickSort = __webpack_require__(/*! ./quick-sort */ \"../../node_modules/recast/node_modules/source-map/lib/quick-sort.js\").quickSort;\n\nfunction SourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  return sourceMap.sections != null\n    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)\n    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n}\n\nSourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\n\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator =\n  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  };\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\nSourceMapConsumer.prototype.eachMapping =\n  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    var mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    var sourceRoot = this.sourceRoot;\n    mappings.map(function (mapping) {\n      var source = mapping.source === null ? null : this._sources.at(mapping.source);\n      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n      return {\n        source: source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  };\n\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number is 1-based.\n *   - column: Optional. the column number in the original source.\n *    The column number is 0-based.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *    line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *    The column number is 0-based.\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor =\n  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, 'line');\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    var needle = {\n      source: util.getArg(aArgs, 'source'),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, 'column', 0)\n    };\n\n    needle.source = this._findSourceIndex(needle.source);\n    if (needle.source < 0) {\n      return [];\n    }\n\n    var mappings = [];\n\n    var index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        var originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        var originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  };\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The first parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nfunction BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  if (sourceRoot) {\n    sourceRoot = util.normalize(sourceRoot);\n  }\n\n  sources = sources\n    .map(String)\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    .map(util.normalize)\n    // Always ensure that absolute sources are internally stored relative to\n    // the source root, if the source root is absolute. Not doing this would\n    // be particularly problematic when the source root is a prefix of the\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n    .map(function (source) {\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n        ? util.relative(sourceRoot, source)\n        : source;\n    });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n\n  this._absoluteSources = this._sources.toArray().map(function (s) {\n    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n  });\n\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this._sourceMapURL = aSourceMapURL;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\n * Utility function to find the index of a source.  Returns -1 if not\n * found.\n */\nBasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n  var relativeSource = aSource;\n  if (this.sourceRoot != null) {\n    relativeSource = util.relative(this.sourceRoot, relativeSource);\n  }\n\n  if (this._sources.has(relativeSource)) {\n    return this._sources.indexOf(relativeSource);\n  }\n\n  // Maybe aSource is an absolute URL as returned by |sources|.  In\n  // this case we can't simply undo the transform.\n  var i;\n  for (i = 0; i < this._absoluteSources.length; ++i) {\n    if (this._absoluteSources[i] == aSource) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @param String aSourceMapURL\n *        The URL at which the source map can be found (optional)\n * @returns BasicSourceMapConsumer\n */\nBasicSourceMapConsumer.fromSourceMap =\n  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                            smc.sourceRoot);\n    smc.file = aSourceMap._file;\n    smc._sourceMapURL = aSourceMapURL;\n    smc._absoluteSources = smc._sources.toArray().map(function (s) {\n      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n    });\n\n    // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n      var srcMapping = generatedMappings[i];\n      var destMapping = new Mapping;\n      destMapping.generatedLine = srcMapping.generatedLine;\n      destMapping.generatedColumn = srcMapping.generatedColumn;\n\n      if (srcMapping.source) {\n        destMapping.source = sources.indexOf(srcMapping.source);\n        destMapping.originalLine = srcMapping.originalLine;\n        destMapping.originalColumn = srcMapping.originalColumn;\n\n        if (srcMapping.name) {\n          destMapping.name = names.indexOf(srcMapping.name);\n        }\n\n        destOriginalMappings.push(destMapping);\n      }\n\n      destGeneratedMappings.push(destMapping);\n    }\n\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n    return smc;\n  };\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._absoluteSources.slice();\n  }\n});\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nBasicSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n\n    while (index < length) {\n      if (aStr.charAt(index) === ';') {\n        generatedLine++;\n        index++;\n        previousGeneratedColumn = 0;\n      }\n      else if (aStr.charAt(index) === ',') {\n        index++;\n      }\n      else {\n        mapping = new Mapping();\n        mapping.generatedLine = generatedLine;\n\n        // Because each offset is encoded relative to the previous one,\n        // many segments often have the same encoding. We can exploit this\n        // fact by caching the parsed variable length fields of each segment,\n        // allowing us to avoid a second parse if we encounter the same\n        // segment again.\n        for (end = index; end < length; end++) {\n          if (this._charIsMappingSeparator(aStr, end)) {\n            break;\n          }\n        }\n        str = aStr.slice(index, end);\n\n        segment = cachedSegments[str];\n        if (segment) {\n          index += str.length;\n        } else {\n          segment = [];\n          while (index < end) {\n            base64VLQ.decode(aStr, index, temp);\n            value = temp.value;\n            index = temp.rest;\n            segment.push(value);\n          }\n\n          if (segment.length === 2) {\n            throw new Error('Found a source, but no line and column');\n          }\n\n          if (segment.length === 3) {\n            throw new Error('Found a source and line, but no column');\n          }\n\n          cachedSegments[str] = segment;\n        }\n\n        // Generated column.\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (segment.length > 1) {\n          // Original source.\n          mapping.source = previousSource + segment[1];\n          previousSource += segment[1];\n\n          // Original line.\n          mapping.originalLine = previousOriginalLine + segment[2];\n          previousOriginalLine = mapping.originalLine;\n          // Lines are stored 0-based\n          mapping.originalLine += 1;\n\n          // Original column.\n          mapping.originalColumn = previousOriginalColumn + segment[3];\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (segment.length > 4) {\n            // Original name.\n            mapping.name = previousName + segment[4];\n            previousName += segment[4];\n          }\n        }\n\n        generatedMappings.push(mapping);\n        if (typeof mapping.originalLine === 'number') {\n          originalMappings.push(mapping);\n        }\n      }\n    }\n\n    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = generatedMappings;\n\n    quickSort(originalMappings, util.compareByOriginalPositions);\n    this.__originalMappings = originalMappings;\n  };\n\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\nBasicSourceMapConsumer.prototype._findMapping =\n  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                         aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError('Line must be greater than or equal to 1, got '\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError('Column must be greater than or equal to 0, got '\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  };\n\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans =\n  function SourceMapConsumer_computeColumnSpans() {\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\n      var mapping = this._generatedMappings[index];\n\n      // Mappings do not contain a field for the last generated columnt. We\n      // can come up with an optimistic estimate, however, by assuming that\n      // mappings are contiguous (i.e. given two consecutive mappings, the\n      // first mapping ends where the second one starts).\n      if (index + 1 < this._generatedMappings.length) {\n        var nextMapping = this._generatedMappings[index + 1];\n\n        if (mapping.generatedLine === nextMapping.generatedLine) {\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n          continue;\n        }\n      }\n\n      // The last mapping for each line spans the entire line.\n      mapping.lastGeneratedColumn = Infinity;\n    }\n  };\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nBasicSourceMapConsumer.prototype.originalPositionFor =\n  function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._generatedMappings,\n      \"generatedLine\",\n      \"generatedColumn\",\n      util.compareByGeneratedPositionsDeflated,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._generatedMappings[index];\n\n      if (mapping.generatedLine === needle.generatedLine) {\n        var source = util.getArg(mapping, 'source', null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n        }\n        var name = util.getArg(mapping, 'name', null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n        return {\n          source: source,\n          line: util.getArg(mapping, 'originalLine', null),\n          column: util.getArg(mapping, 'originalColumn', null),\n          name: name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function (sc) { return sc == null; });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nBasicSourceMapConsumer.prototype.sourceContentFor =\n  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    var index = this._findSourceIndex(aSource);\n    if (index >= 0) {\n      return this.sourcesContent[index];\n    }\n\n    var relativeSource = aSource;\n    if (this.sourceRoot != null) {\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n\n    var url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + relativeSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor =\n  function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, 'source');\n    source = this._findSourceIndex(source);\n    if (source < 0) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n\n    var needle = {\n      source: source,\n      originalLine: util.getArg(aArgs, 'line'),\n      originalColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._originalMappings,\n      \"originalLine\",\n      \"originalColumn\",\n      util.compareByOriginalPositions,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (mapping.source === needle.source) {\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  };\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The first parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nfunction IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line ||\n        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)\n    }\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor =\n  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    var sectionIndex = binarySearch.search(needle, this._sections,\n      function(needle, section) {\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (needle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    var section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor =\n  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      var content = section.consumer.sourceContentFor(aSource, true);\n      if (content) {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based. \n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor =\n  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {\n        continue;\n      }\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        var ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nIndexedSourceMapConsumer.prototype._parseMappings =\n  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var sectionMappings = section.consumer._generatedMappings;\n      for (var j = 0; j < sectionMappings.length; j++) {\n        var mapping = sectionMappings[j];\n\n        var source = section.consumer._sources.at(mapping.source);\n        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        var name = null;\n        if (mapping.name) {\n          name = section.consumer._names.at(mapping.name);\n          this._names.add(name);\n          name = this._names.indexOf(name);\n        }\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        var adjustedMapping = {\n          source: source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: name\n        };\n\n        this.__generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === 'number') {\n          this.__originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n  };\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/node_modules/source-map/lib/source-map-consumer.js?");

/***/ }),

/***/ "../../node_modules/recast/node_modules/source-map/lib/source-map-generator.js":
/*!********************************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/node_modules/source-map/lib/source-map-generator.js ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar base64VLQ = __webpack_require__(/*! ./base64-vlq */ \"../../node_modules/recast/node_modules/source-map/lib/base64-vlq.js\");\nvar util = __webpack_require__(/*! ./util */ \"../../node_modules/recast/node_modules/source-map/lib/util.js\");\nvar ArraySet = __webpack_require__(/*! ./array-set */ \"../../node_modules/recast/node_modules/source-map/lib/array-set.js\").ArraySet;\nvar MappingList = __webpack_require__(/*! ./mapping-list */ \"../../node_modules/recast/node_modules/source-map/lib/mapping-list.js\").MappingList;\n\n/**\n * An instance of the SourceMapGenerator represents a source map which is\n * being built incrementally. You may pass an object with the following\n * properties:\n *\n *   - file: The filename of the generated source.\n *   - sourceRoot: A root for all relative URLs in this source map.\n */\nfunction SourceMapGenerator(aArgs) {\n  if (!aArgs) {\n    aArgs = {};\n  }\n  this._file = util.getArg(aArgs, 'file', null);\n  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);\n  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n  this._mappings = new MappingList();\n  this._sourcesContents = null;\n}\n\nSourceMapGenerator.prototype._version = 3;\n\n/**\n * Creates a new SourceMapGenerator based on a SourceMapConsumer\n *\n * @param aSourceMapConsumer The SourceMap.\n */\nSourceMapGenerator.fromSourceMap =\n  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n    var sourceRoot = aSourceMapConsumer.sourceRoot;\n    var generator = new SourceMapGenerator({\n      file: aSourceMapConsumer.file,\n      sourceRoot: sourceRoot\n    });\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      var newMapping = {\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        }\n      };\n\n      if (mapping.source != null) {\n        newMapping.source = mapping.source;\n        if (sourceRoot != null) {\n          newMapping.source = util.relative(sourceRoot, newMapping.source);\n        }\n\n        newMapping.original = {\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        };\n\n        if (mapping.name != null) {\n          newMapping.name = mapping.name;\n        }\n      }\n\n      generator.addMapping(newMapping);\n    });\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var sourceRelative = sourceFile;\n      if (sourceRoot !== null) {\n        sourceRelative = util.relative(sourceRoot, sourceFile);\n      }\n\n      if (!generator._sources.has(sourceRelative)) {\n        generator._sources.add(sourceRelative);\n      }\n\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        generator.setSourceContent(sourceFile, content);\n      }\n    });\n    return generator;\n  };\n\n/**\n * Add a single mapping from original source line and column to the generated\n * source's line and column for this source map being created. The mapping\n * object should have the following properties:\n *\n *   - generated: An object with the generated line and column positions.\n *   - original: An object with the original line and column positions.\n *   - source: The original source file (relative to the sourceRoot).\n *   - name: An optional original token name for this mapping.\n */\nSourceMapGenerator.prototype.addMapping =\n  function SourceMapGenerator_addMapping(aArgs) {\n    var generated = util.getArg(aArgs, 'generated');\n    var original = util.getArg(aArgs, 'original', null);\n    var source = util.getArg(aArgs, 'source', null);\n    var name = util.getArg(aArgs, 'name', null);\n\n    if (!this._skipValidation) {\n      this._validateMapping(generated, original, source, name);\n    }\n\n    if (source != null) {\n      source = String(source);\n      if (!this._sources.has(source)) {\n        this._sources.add(source);\n      }\n    }\n\n    if (name != null) {\n      name = String(name);\n      if (!this._names.has(name)) {\n        this._names.add(name);\n      }\n    }\n\n    this._mappings.add({\n      generatedLine: generated.line,\n      generatedColumn: generated.column,\n      originalLine: original != null && original.line,\n      originalColumn: original != null && original.column,\n      source: source,\n      name: name\n    });\n  };\n\n/**\n * Set the source content for a source file.\n */\nSourceMapGenerator.prototype.setSourceContent =\n  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n    var source = aSourceFile;\n    if (this._sourceRoot != null) {\n      source = util.relative(this._sourceRoot, source);\n    }\n\n    if (aSourceContent != null) {\n      // Add the source content to the _sourcesContents map.\n      // Create a new _sourcesContents map if the property is null.\n      if (!this._sourcesContents) {\n        this._sourcesContents = Object.create(null);\n      }\n      this._sourcesContents[util.toSetString(source)] = aSourceContent;\n    } else if (this._sourcesContents) {\n      // Remove the source file from the _sourcesContents map.\n      // If the _sourcesContents map is empty, set the property to null.\n      delete this._sourcesContents[util.toSetString(source)];\n      if (Object.keys(this._sourcesContents).length === 0) {\n        this._sourcesContents = null;\n      }\n    }\n  };\n\n/**\n * Applies the mappings of a sub-source-map for a specific source file to the\n * source map being generated. Each mapping to the supplied source file is\n * rewritten using the supplied source map. Note: The resolution for the\n * resulting mappings is the minimium of this map and the supplied map.\n *\n * @param aSourceMapConsumer The source map to be applied.\n * @param aSourceFile Optional. The filename of the source file.\n *        If omitted, SourceMapConsumer's file property will be used.\n * @param aSourceMapPath Optional. The dirname of the path to the source map\n *        to be applied. If relative, it is relative to the SourceMapConsumer.\n *        This parameter is needed when the two source maps aren't in the same\n *        directory, and the source map to be applied contains relative source\n *        paths. If so, those relative source paths need to be rewritten\n *        relative to the SourceMapGenerator.\n */\nSourceMapGenerator.prototype.applySourceMap =\n  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n    var sourceFile = aSourceFile;\n    // If aSourceFile is omitted, we will use the file property of the SourceMap\n    if (aSourceFile == null) {\n      if (aSourceMapConsumer.file == null) {\n        throw new Error(\n          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +\n          'or the source map\\'s \"file\" property. Both were omitted.'\n        );\n      }\n      sourceFile = aSourceMapConsumer.file;\n    }\n    var sourceRoot = this._sourceRoot;\n    // Make \"sourceFile\" relative if an absolute Url is passed.\n    if (sourceRoot != null) {\n      sourceFile = util.relative(sourceRoot, sourceFile);\n    }\n    // Applying the SourceMap can add and remove items from the sources and\n    // the names array.\n    var newSources = new ArraySet();\n    var newNames = new ArraySet();\n\n    // Find mappings for the \"sourceFile\"\n    this._mappings.unsortedForEach(function (mapping) {\n      if (mapping.source === sourceFile && mapping.originalLine != null) {\n        // Check if it can be mapped by the source map, then update the mapping.\n        var original = aSourceMapConsumer.originalPositionFor({\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        });\n        if (original.source != null) {\n          // Copy mapping\n          mapping.source = original.source;\n          if (aSourceMapPath != null) {\n            mapping.source = util.join(aSourceMapPath, mapping.source)\n          }\n          if (sourceRoot != null) {\n            mapping.source = util.relative(sourceRoot, mapping.source);\n          }\n          mapping.originalLine = original.line;\n          mapping.originalColumn = original.column;\n          if (original.name != null) {\n            mapping.name = original.name;\n          }\n        }\n      }\n\n      var source = mapping.source;\n      if (source != null && !newSources.has(source)) {\n        newSources.add(source);\n      }\n\n      var name = mapping.name;\n      if (name != null && !newNames.has(name)) {\n        newNames.add(name);\n      }\n\n    }, this);\n    this._sources = newSources;\n    this._names = newNames;\n\n    // Copy sourcesContents of applied map.\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aSourceMapPath != null) {\n          sourceFile = util.join(aSourceMapPath, sourceFile);\n        }\n        if (sourceRoot != null) {\n          sourceFile = util.relative(sourceRoot, sourceFile);\n        }\n        this.setSourceContent(sourceFile, content);\n      }\n    }, this);\n  };\n\n/**\n * A mapping can have one of the three levels of data:\n *\n *   1. Just the generated position.\n *   2. The Generated position, original position, and original source.\n *   3. Generated and original position, original source, as well as a name\n *      token.\n *\n * To maintain consistency, we validate that any new mapping being added falls\n * in to one of these categories.\n */\nSourceMapGenerator.prototype._validateMapping =\n  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,\n                                              aName) {\n    // When aOriginal is truthy but has empty values for .line and .column,\n    // it is most likely a programmer error. In this case we throw a very\n    // specific error message to try to guide them the right way.\n    // For example: https://github.com/Polymer/polymer-bundler/pull/519\n    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {\n        throw new Error(\n            'original.line and original.column are not numbers -- you probably meant to omit ' +\n            'the original mapping entirely and only map the generated position. If so, pass ' +\n            'null for the original mapping instead of an object with empty or null values.'\n        );\n    }\n\n    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n        && aGenerated.line > 0 && aGenerated.column >= 0\n        && !aOriginal && !aSource && !aName) {\n      // Case 1.\n      return;\n    }\n    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n             && aOriginal && 'line' in aOriginal && 'column' in aOriginal\n             && aGenerated.line > 0 && aGenerated.column >= 0\n             && aOriginal.line > 0 && aOriginal.column >= 0\n             && aSource) {\n      // Cases 2 and 3.\n      return;\n    }\n    else {\n      throw new Error('Invalid mapping: ' + JSON.stringify({\n        generated: aGenerated,\n        source: aSource,\n        original: aOriginal,\n        name: aName\n      }));\n    }\n  };\n\n/**\n * Serialize the accumulated mappings in to the stream of base 64 VLQs\n * specified by the source map format.\n */\nSourceMapGenerator.prototype._serializeMappings =\n  function SourceMapGenerator_serializeMappings() {\n    var previousGeneratedColumn = 0;\n    var previousGeneratedLine = 1;\n    var previousOriginalColumn = 0;\n    var previousOriginalLine = 0;\n    var previousName = 0;\n    var previousSource = 0;\n    var result = '';\n    var next;\n    var mapping;\n    var nameIdx;\n    var sourceIdx;\n\n    var mappings = this._mappings.toArray();\n    for (var i = 0, len = mappings.length; i < len; i++) {\n      mapping = mappings[i];\n      next = ''\n\n      if (mapping.generatedLine !== previousGeneratedLine) {\n        previousGeneratedColumn = 0;\n        while (mapping.generatedLine !== previousGeneratedLine) {\n          next += ';';\n          previousGeneratedLine++;\n        }\n      }\n      else {\n        if (i > 0) {\n          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n            continue;\n          }\n          next += ',';\n        }\n      }\n\n      next += base64VLQ.encode(mapping.generatedColumn\n                                 - previousGeneratedColumn);\n      previousGeneratedColumn = mapping.generatedColumn;\n\n      if (mapping.source != null) {\n        sourceIdx = this._sources.indexOf(mapping.source);\n        next += base64VLQ.encode(sourceIdx - previousSource);\n        previousSource = sourceIdx;\n\n        // lines are stored 0-based in SourceMap spec version 3\n        next += base64VLQ.encode(mapping.originalLine - 1\n                                   - previousOriginalLine);\n        previousOriginalLine = mapping.originalLine - 1;\n\n        next += base64VLQ.encode(mapping.originalColumn\n                                   - previousOriginalColumn);\n        previousOriginalColumn = mapping.originalColumn;\n\n        if (mapping.name != null) {\n          nameIdx = this._names.indexOf(mapping.name);\n          next += base64VLQ.encode(nameIdx - previousName);\n          previousName = nameIdx;\n        }\n      }\n\n      result += next;\n    }\n\n    return result;\n  };\n\nSourceMapGenerator.prototype._generateSourcesContent =\n  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n    return aSources.map(function (source) {\n      if (!this._sourcesContents) {\n        return null;\n      }\n      if (aSourceRoot != null) {\n        source = util.relative(aSourceRoot, source);\n      }\n      var key = util.toSetString(source);\n      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)\n        ? this._sourcesContents[key]\n        : null;\n    }, this);\n  };\n\n/**\n * Externalize the source map.\n */\nSourceMapGenerator.prototype.toJSON =\n  function SourceMapGenerator_toJSON() {\n    var map = {\n      version: this._version,\n      sources: this._sources.toArray(),\n      names: this._names.toArray(),\n      mappings: this._serializeMappings()\n    };\n    if (this._file != null) {\n      map.file = this._file;\n    }\n    if (this._sourceRoot != null) {\n      map.sourceRoot = this._sourceRoot;\n    }\n    if (this._sourcesContents) {\n      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n    }\n\n    return map;\n  };\n\n/**\n * Render the source map being generated to a string.\n */\nSourceMapGenerator.prototype.toString =\n  function SourceMapGenerator_toString() {\n    return JSON.stringify(this.toJSON());\n  };\n\nexports.SourceMapGenerator = SourceMapGenerator;\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/node_modules/source-map/lib/source-map-generator.js?");

/***/ }),

/***/ "../../node_modules/recast/node_modules/source-map/lib/source-node.js":
/*!***********************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/node_modules/source-map/lib/source-node.js ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar SourceMapGenerator = __webpack_require__(/*! ./source-map-generator */ \"../../node_modules/recast/node_modules/source-map/lib/source-map-generator.js\").SourceMapGenerator;\nvar util = __webpack_require__(/*! ./util */ \"../../node_modules/recast/node_modules/source-map/lib/util.js\");\n\n// Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n// operating systems these days (capturing the result).\nvar REGEX_NEWLINE = /(\\r?\\n)/;\n\n// Newline character code for charCodeAt() comparisons\nvar NEWLINE_CODE = 10;\n\n// Private symbol for identifying `SourceNode`s when multiple versions of\n// the source-map library are loaded. This MUST NOT CHANGE across\n// versions!\nvar isSourceNode = \"$$$isSourceNode$$$\";\n\n/**\n * SourceNodes provide a way to abstract over interpolating/concatenating\n * snippets of generated JavaScript source code while maintaining the line and\n * column information associated with the original source code.\n *\n * @param aLine The original line number.\n * @param aColumn The original column number.\n * @param aSource The original source's filename.\n * @param aChunks Optional. An array of strings which are snippets of\n *        generated JS, or other SourceNodes.\n * @param aName The original identifier.\n */\nfunction SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n  this.children = [];\n  this.sourceContents = {};\n  this.line = aLine == null ? null : aLine;\n  this.column = aColumn == null ? null : aColumn;\n  this.source = aSource == null ? null : aSource;\n  this.name = aName == null ? null : aName;\n  this[isSourceNode] = true;\n  if (aChunks != null) this.add(aChunks);\n}\n\n/**\n * Creates a SourceNode from generated code and a SourceMapConsumer.\n *\n * @param aGeneratedCode The generated code\n * @param aSourceMapConsumer The SourceMap for the generated code\n * @param aRelativePath Optional. The path that relative sources in the\n *        SourceMapConsumer should be relative to.\n */\nSourceNode.fromStringWithSourceMap =\n  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n    // The SourceNode we want to fill with the generated code\n    // and the SourceMap\n    var node = new SourceNode();\n\n    // All even indices of this array are one line of the generated code,\n    // while all odd indices are the newlines between two adjacent lines\n    // (since `REGEX_NEWLINE` captures its match).\n    // Processed fragments are accessed by calling `shiftNextLine`.\n    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n    var remainingLinesIndex = 0;\n    var shiftNextLine = function() {\n      var lineContents = getNextLine();\n      // The last line of a file might not have a newline.\n      var newLine = getNextLine() || \"\";\n      return lineContents + newLine;\n\n      function getNextLine() {\n        return remainingLinesIndex < remainingLines.length ?\n            remainingLines[remainingLinesIndex++] : undefined;\n      }\n    };\n\n    // We need to remember the position of \"remainingLines\"\n    var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n    // The generate SourceNodes we need a code range.\n    // To extract it current and last mapping is used.\n    // Here we store the last mapping.\n    var lastMapping = null;\n\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      if (lastMapping !== null) {\n        // We add the code from \"lastMapping\" to \"mapping\":\n        // First check if there is a new line in between.\n        if (lastGeneratedLine < mapping.generatedLine) {\n          // Associate first line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n          lastGeneratedLine++;\n          lastGeneratedColumn = 0;\n          // The remaining code is added without mapping\n        } else {\n          // There is no new line in between.\n          // Associate the code between \"lastGeneratedColumn\" and\n          // \"mapping.generatedColumn\" with \"lastMapping\"\n          var nextLine = remainingLines[remainingLinesIndex] || '';\n          var code = nextLine.substr(0, mapping.generatedColumn -\n                                        lastGeneratedColumn);\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -\n                                              lastGeneratedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n          addMappingWithCode(lastMapping, code);\n          // No more remaining code, continue\n          lastMapping = mapping;\n          return;\n        }\n      }\n      // We add the generated code until the first mapping\n      // to the SourceNode without any mapping.\n      // Each line is added as separate string.\n      while (lastGeneratedLine < mapping.generatedLine) {\n        node.add(shiftNextLine());\n        lastGeneratedLine++;\n      }\n      if (lastGeneratedColumn < mapping.generatedColumn) {\n        var nextLine = remainingLines[remainingLinesIndex] || '';\n        node.add(nextLine.substr(0, mapping.generatedColumn));\n        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n        lastGeneratedColumn = mapping.generatedColumn;\n      }\n      lastMapping = mapping;\n    }, this);\n    // We have processed all mappings.\n    if (remainingLinesIndex < remainingLines.length) {\n      if (lastMapping) {\n        // Associate the remaining code in the current line with \"lastMapping\"\n        addMappingWithCode(lastMapping, shiftNextLine());\n      }\n      // and add the remaining lines without any mapping\n      node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n    }\n\n    // Copy sourcesContent into SourceNode\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aRelativePath != null) {\n          sourceFile = util.join(aRelativePath, sourceFile);\n        }\n        node.setSourceContent(sourceFile, content);\n      }\n    });\n\n    return node;\n\n    function addMappingWithCode(mapping, code) {\n      if (mapping === null || mapping.source === undefined) {\n        node.add(code);\n      } else {\n        var source = aRelativePath\n          ? util.join(aRelativePath, mapping.source)\n          : mapping.source;\n        node.add(new SourceNode(mapping.originalLine,\n                                mapping.originalColumn,\n                                source,\n                                code,\n                                mapping.name));\n      }\n    }\n  };\n\n/**\n * Add a chunk of generated JS to this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.add = function SourceNode_add(aChunk) {\n  if (Array.isArray(aChunk)) {\n    aChunk.forEach(function (chunk) {\n      this.add(chunk);\n    }, this);\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    if (aChunk) {\n      this.children.push(aChunk);\n    }\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Add a chunk of generated JS to the beginning of this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\n  if (Array.isArray(aChunk)) {\n    for (var i = aChunk.length-1; i >= 0; i--) {\n      this.prepend(aChunk[i]);\n    }\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    this.children.unshift(aChunk);\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Walk over the tree of JS snippets in this node and its children. The\n * walking function is called once for each snippet of JS and is passed that\n * snippet and the its original associated source's line/column location.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walk = function SourceNode_walk(aFn) {\n  var chunk;\n  for (var i = 0, len = this.children.length; i < len; i++) {\n    chunk = this.children[i];\n    if (chunk[isSourceNode]) {\n      chunk.walk(aFn);\n    }\n    else {\n      if (chunk !== '') {\n        aFn(chunk, { source: this.source,\n                     line: this.line,\n                     column: this.column,\n                     name: this.name });\n      }\n    }\n  }\n};\n\n/**\n * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n * each of `this.children`.\n *\n * @param aSep The separator.\n */\nSourceNode.prototype.join = function SourceNode_join(aSep) {\n  var newChildren;\n  var i;\n  var len = this.children.length;\n  if (len > 0) {\n    newChildren = [];\n    for (i = 0; i < len-1; i++) {\n      newChildren.push(this.children[i]);\n      newChildren.push(aSep);\n    }\n    newChildren.push(this.children[i]);\n    this.children = newChildren;\n  }\n  return this;\n};\n\n/**\n * Call String.prototype.replace on the very right-most source snippet. Useful\n * for trimming whitespace from the end of a source node, etc.\n *\n * @param aPattern The pattern to replace.\n * @param aReplacement The thing to replace the pattern with.\n */\nSourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\n  var lastChild = this.children[this.children.length - 1];\n  if (lastChild[isSourceNode]) {\n    lastChild.replaceRight(aPattern, aReplacement);\n  }\n  else if (typeof lastChild === 'string') {\n    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n  }\n  else {\n    this.children.push(''.replace(aPattern, aReplacement));\n  }\n  return this;\n};\n\n/**\n * Set the source content for a source file. This will be added to the SourceMapGenerator\n * in the sourcesContent field.\n *\n * @param aSourceFile The filename of the source file\n * @param aSourceContent The content of the source file\n */\nSourceNode.prototype.setSourceContent =\n  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n  };\n\n/**\n * Walk over the tree of SourceNodes. The walking function is called for each\n * source file content and is passed the filename and source content.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walkSourceContents =\n  function SourceNode_walkSourceContents(aFn) {\n    for (var i = 0, len = this.children.length; i < len; i++) {\n      if (this.children[i][isSourceNode]) {\n        this.children[i].walkSourceContents(aFn);\n      }\n    }\n\n    var sources = Object.keys(this.sourceContents);\n    for (var i = 0, len = sources.length; i < len; i++) {\n      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n    }\n  };\n\n/**\n * Return the string representation of this source node. Walks over the tree\n * and concatenates all the various snippets together to one string.\n */\nSourceNode.prototype.toString = function SourceNode_toString() {\n  var str = \"\";\n  this.walk(function (chunk) {\n    str += chunk;\n  });\n  return str;\n};\n\n/**\n * Returns the string representation of this source node along with a source\n * map.\n */\nSourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\n  var generated = {\n    code: \"\",\n    line: 1,\n    column: 0\n  };\n  var map = new SourceMapGenerator(aArgs);\n  var sourceMappingActive = false;\n  var lastOriginalSource = null;\n  var lastOriginalLine = null;\n  var lastOriginalColumn = null;\n  var lastOriginalName = null;\n  this.walk(function (chunk, original) {\n    generated.code += chunk;\n    if (original.source !== null\n        && original.line !== null\n        && original.column !== null) {\n      if(lastOriginalSource !== original.source\n         || lastOriginalLine !== original.line\n         || lastOriginalColumn !== original.column\n         || lastOriginalName !== original.name) {\n        map.addMapping({\n          source: original.source,\n          original: {\n            line: original.line,\n            column: original.column\n          },\n          generated: {\n            line: generated.line,\n            column: generated.column\n          },\n          name: original.name\n        });\n      }\n      lastOriginalSource = original.source;\n      lastOriginalLine = original.line;\n      lastOriginalColumn = original.column;\n      lastOriginalName = original.name;\n      sourceMappingActive = true;\n    } else if (sourceMappingActive) {\n      map.addMapping({\n        generated: {\n          line: generated.line,\n          column: generated.column\n        }\n      });\n      lastOriginalSource = null;\n      sourceMappingActive = false;\n    }\n    for (var idx = 0, length = chunk.length; idx < length; idx++) {\n      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n        generated.line++;\n        generated.column = 0;\n        // Mappings end at eol\n        if (idx + 1 === length) {\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n      } else {\n        generated.column++;\n      }\n    }\n  });\n  this.walkSourceContents(function (sourceFile, sourceContent) {\n    map.setSourceContent(sourceFile, sourceContent);\n  });\n\n  return { code: generated.code, map: map };\n};\n\nexports.SourceNode = SourceNode;\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/node_modules/source-map/lib/source-node.js?");

/***/ }),

/***/ "../../node_modules/recast/node_modules/source-map/lib/util.js":
/*!****************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/node_modules/source-map/lib/util.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * This is a helper function for getting values from parameter/options\n * objects.\n *\n * @param args The object we are extracting values from\n * @param name The name of the property we are getting.\n * @param defaultValue An optional value to return if the property is missing\n * from the object. If this is not specified and the property is missing, an\n * error will be thrown.\n */\nfunction getArg(aArgs, aName, aDefaultValue) {\n  if (aName in aArgs) {\n    return aArgs[aName];\n  } else if (arguments.length === 3) {\n    return aDefaultValue;\n  } else {\n    throw new Error('\"' + aName + '\" is a required argument.');\n  }\n}\nexports.getArg = getArg;\n\nvar urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\nvar dataUrlRegexp = /^data:.+\\,.+$/;\n\nfunction urlParse(aUrl) {\n  var match = aUrl.match(urlRegexp);\n  if (!match) {\n    return null;\n  }\n  return {\n    scheme: match[1],\n    auth: match[2],\n    host: match[3],\n    port: match[4],\n    path: match[5]\n  };\n}\nexports.urlParse = urlParse;\n\nfunction urlGenerate(aParsedUrl) {\n  var url = '';\n  if (aParsedUrl.scheme) {\n    url += aParsedUrl.scheme + ':';\n  }\n  url += '//';\n  if (aParsedUrl.auth) {\n    url += aParsedUrl.auth + '@';\n  }\n  if (aParsedUrl.host) {\n    url += aParsedUrl.host;\n  }\n  if (aParsedUrl.port) {\n    url += \":\" + aParsedUrl.port\n  }\n  if (aParsedUrl.path) {\n    url += aParsedUrl.path;\n  }\n  return url;\n}\nexports.urlGenerate = urlGenerate;\n\n/**\n * Normalizes a path, or the path portion of a URL:\n *\n * - Replaces consecutive slashes with one slash.\n * - Removes unnecessary '.' parts.\n * - Removes unnecessary '<dir>/..' parts.\n *\n * Based on code in the Node.js 'path' core module.\n *\n * @param aPath The path or url to normalize.\n */\nfunction normalize(aPath) {\n  var path = aPath;\n  var url = urlParse(aPath);\n  if (url) {\n    if (!url.path) {\n      return aPath;\n    }\n    path = url.path;\n  }\n  var isAbsolute = exports.isAbsolute(path);\n\n  var parts = path.split(/\\/+/);\n  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n    part = parts[i];\n    if (part === '.') {\n      parts.splice(i, 1);\n    } else if (part === '..') {\n      up++;\n    } else if (up > 0) {\n      if (part === '') {\n        // The first part is blank if the path is absolute. Trying to go\n        // above the root is a no-op. Therefore we can remove all '..' parts\n        // directly after the root.\n        parts.splice(i + 1, up);\n        up = 0;\n      } else {\n        parts.splice(i, 2);\n        up--;\n      }\n    }\n  }\n  path = parts.join('/');\n\n  if (path === '') {\n    path = isAbsolute ? '/' : '.';\n  }\n\n  if (url) {\n    url.path = path;\n    return urlGenerate(url);\n  }\n  return path;\n}\nexports.normalize = normalize;\n\n/**\n * Joins two paths/URLs.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be joined with the root.\n *\n * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n *   first.\n * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\n *   is updated with the result and aRoot is returned. Otherwise the result\n *   is returned.\n *   - If aPath is absolute, the result is aPath.\n *   - Otherwise the two paths are joined with a slash.\n * - Joining for example 'http://' and 'www.example.com' is also supported.\n */\nfunction join(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n  if (aPath === \"\") {\n    aPath = \".\";\n  }\n  var aPathUrl = urlParse(aPath);\n  var aRootUrl = urlParse(aRoot);\n  if (aRootUrl) {\n    aRoot = aRootUrl.path || '/';\n  }\n\n  // `join(foo, '//www.example.org')`\n  if (aPathUrl && !aPathUrl.scheme) {\n    if (aRootUrl) {\n      aPathUrl.scheme = aRootUrl.scheme;\n    }\n    return urlGenerate(aPathUrl);\n  }\n\n  if (aPathUrl || aPath.match(dataUrlRegexp)) {\n    return aPath;\n  }\n\n  // `join('http://', 'www.example.com')`\n  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n    aRootUrl.host = aPath;\n    return urlGenerate(aRootUrl);\n  }\n\n  var joined = aPath.charAt(0) === '/'\n    ? aPath\n    : normalize(aRoot.replace(/\\/+$/, '') + '/' + aPath);\n\n  if (aRootUrl) {\n    aRootUrl.path = joined;\n    return urlGenerate(aRootUrl);\n  }\n  return joined;\n}\nexports.join = join;\n\nexports.isAbsolute = function (aPath) {\n  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);\n};\n\n/**\n * Make a path relative to a URL or another path.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be made relative to aRoot.\n */\nfunction relative(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n\n  aRoot = aRoot.replace(/\\/$/, '');\n\n  // It is possible for the path to be above the root. In this case, simply\n  // checking whether the root is a prefix of the path won't work. Instead, we\n  // need to remove components from the root one by one, until either we find\n  // a prefix that fits, or we run out of components to remove.\n  var level = 0;\n  while (aPath.indexOf(aRoot + '/') !== 0) {\n    var index = aRoot.lastIndexOf(\"/\");\n    if (index < 0) {\n      return aPath;\n    }\n\n    // If the only part of the root that is left is the scheme (i.e. http://,\n    // file:///, etc.), one or more slashes (/), or simply nothing at all, we\n    // have exhausted all components, so the path is not relative to the root.\n    aRoot = aRoot.slice(0, index);\n    if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n      return aPath;\n    }\n\n    ++level;\n  }\n\n  // Make sure we add a \"../\" for each component we removed from the root.\n  return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n}\nexports.relative = relative;\n\nvar supportsNullProto = (function () {\n  var obj = Object.create(null);\n  return !('__proto__' in obj);\n}());\n\nfunction identity (s) {\n  return s;\n}\n\n/**\n * Because behavior goes wacky when you set `__proto__` on objects, we\n * have to prefix all the strings in our set with an arbitrary character.\n *\n * See https://github.com/mozilla/source-map/pull/31 and\n * https://github.com/mozilla/source-map/issues/30\n *\n * @param String aStr\n */\nfunction toSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return '$' + aStr;\n  }\n\n  return aStr;\n}\nexports.toSetString = supportsNullProto ? identity : toSetString;\n\nfunction fromSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return aStr.slice(1);\n  }\n\n  return aStr;\n}\nexports.fromSetString = supportsNullProto ? identity : fromSetString;\n\nfunction isProtoString(s) {\n  if (!s) {\n    return false;\n  }\n\n  var length = s.length;\n\n  if (length < 9 /* \"__proto__\".length */) {\n    return false;\n  }\n\n  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 2) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 4) !== 116 /* 't' */ ||\n      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||\n      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||\n      s.charCodeAt(length - 8) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 9) !== 95  /* '_' */) {\n    return false;\n  }\n\n  for (var i = length - 10; i >= 0; i--) {\n    if (s.charCodeAt(i) !== 36 /* '$' */) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Comparator between two mappings where the original positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same original source/line/column, but different generated\n * line and column the same. Useful when searching for a mapping with a\n * stubbed out mapping.\n */\nfunction compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n  var cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0 || onlyCompareOriginal) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByOriginalPositions = compareByOriginalPositions;\n\n/**\n * Comparator between two mappings with deflated source and name indices where\n * the generated positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same generated line and column, but different\n * source/name/original line and column the same. Useful when searching for a\n * mapping with a stubbed out mapping.\n */\nfunction compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0 || onlyCompareGenerated) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n\nfunction strcmp(aStr1, aStr2) {\n  if (aStr1 === aStr2) {\n    return 0;\n  }\n\n  if (aStr1 === null) {\n    return 1; // aStr2 !== null\n  }\n\n  if (aStr2 === null) {\n    return -1; // aStr1 !== null\n  }\n\n  if (aStr1 > aStr2) {\n    return 1;\n  }\n\n  return -1;\n}\n\n/**\n * Comparator between two mappings with inflated source and name strings where\n * the generated positions are compared.\n */\nfunction compareByGeneratedPositionsInflated(mappingA, mappingB) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n\n/**\n * Strip any JSON XSSI avoidance prefix from the string (as documented\n * in the source maps specification), and then parse the string as\n * JSON.\n */\nfunction parseSourceMapInput(str) {\n  return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, ''));\n}\nexports.parseSourceMapInput = parseSourceMapInput;\n\n/**\n * Compute the URL of a source given the the source root, the source's\n * URL, and the source map's URL.\n */\nfunction computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n  sourceURL = sourceURL || '';\n\n  if (sourceRoot) {\n    // This follows what Chrome does.\n    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {\n      sourceRoot += '/';\n    }\n    // The spec says:\n    //   Line 4: An optional source root, useful for relocating source\n    //   files on a server or removing repeated values in the\n    //   “sources” entry.  This value is prepended to the individual\n    //   entries in the “source” field.\n    sourceURL = sourceRoot + sourceURL;\n  }\n\n  // Historically, SourceMapConsumer did not take the sourceMapURL as\n  // a parameter.  This mode is still somewhat supported, which is why\n  // this code block is conditional.  However, it's preferable to pass\n  // the source map URL to SourceMapConsumer, so that this function\n  // can implement the source URL resolution algorithm as outlined in\n  // the spec.  This block is basically the equivalent of:\n  //    new URL(sourceURL, sourceMapURL).toString()\n  // ... except it avoids using URL, which wasn't available in the\n  // older releases of node still supported by this library.\n  //\n  // The spec says:\n  //   If the sources are not absolute URLs after prepending of the\n  //   “sourceRoot”, the sources are resolved relative to the\n  //   SourceMap (like resolving script src in a html document).\n  if (sourceMapURL) {\n    var parsed = urlParse(sourceMapURL);\n    if (!parsed) {\n      throw new Error(\"sourceMapURL could not be parsed\");\n    }\n    if (parsed.path) {\n      // Strip the last path component, but keep the \"/\".\n      var index = parsed.path.lastIndexOf('/');\n      if (index >= 0) {\n        parsed.path = parsed.path.substring(0, index + 1);\n      }\n    }\n    sourceURL = join(urlGenerate(parsed), sourceURL);\n  }\n\n  return normalize(sourceURL);\n}\nexports.computeSourceURL = computeSourceURL;\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/node_modules/source-map/lib/util.js?");

/***/ }),

/***/ "../../node_modules/recast/node_modules/source-map/source-map.js":
/*!******************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/node_modules/source-map/source-map.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n * Copyright 2009-2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE.txt or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nexports.SourceMapGenerator = __webpack_require__(/*! ./lib/source-map-generator */ \"../../node_modules/recast/node_modules/source-map/lib/source-map-generator.js\").SourceMapGenerator;\nexports.SourceMapConsumer = __webpack_require__(/*! ./lib/source-map-consumer */ \"../../node_modules/recast/node_modules/source-map/lib/source-map-consumer.js\").SourceMapConsumer;\nexports.SourceNode = __webpack_require__(/*! ./lib/source-node */ \"../../node_modules/recast/node_modules/source-map/lib/source-node.js\").SourceNode;\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/node_modules/source-map/source-map.js?");

/***/ }),

/***/ "../../node_modules/recast/parsers/esprima.js":
/*!***********************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/parsers/esprima.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// This module is suitable for passing as options.parser when calling\n// recast.parse to process ECMAScript code with Esprima:\n//\n//   const ast = recast.parse(source, {\n//     parser: require(\"recast/parsers/esprima\")\n//   });\n//\nvar util_1 = __webpack_require__(/*! ../lib/util */ \"../../node_modules/recast/lib/util.js\");\nfunction parse(source, options) {\n    var comments = [];\n    var ast = __webpack_require__(/*! esprima */ \"../../node_modules/esprima/dist/esprima.js\").parse(source, {\n        loc: true,\n        locations: true,\n        comment: true,\n        onComment: comments,\n        range: util_1.getOption(options, \"range\", false),\n        tolerant: util_1.getOption(options, \"tolerant\", true),\n        tokens: true\n    });\n    if (!Array.isArray(ast.comments)) {\n        ast.comments = comments;\n    }\n    return ast;\n}\nexports.parse = parse;\n;\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/recast/parsers/esprima.js?");

/***/ }),

/***/ "../../node_modules/string.prototype.codepointat/codepointat.js":
/*!*****************************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/string.prototype.codepointat/codepointat.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*! https://mths.be/codepointat v0.2.0 by @mathias */\nif (!String.prototype.codePointAt) {\n\t(function() {\n\t\t'use strict'; // needed to support `apply`/`call` with `undefined`/`null`\n\t\tvar defineProperty = (function() {\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\ttry {\n\t\t\t\tvar object = {};\n\t\t\t\tvar $defineProperty = Object.defineProperty;\n\t\t\t\tvar result = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t} catch(error) {}\n\t\t\treturn result;\n\t\t}());\n\t\tvar codePointAt = function(position) {\n\t\t\tif (this == null) {\n\t\t\t\tthrow TypeError();\n\t\t\t}\n\t\t\tvar string = String(this);\n\t\t\tvar size = string.length;\n\t\t\t// `ToInteger`\n\t\t\tvar index = position ? Number(position) : 0;\n\t\t\tif (index != index) { // better `isNaN`\n\t\t\t\tindex = 0;\n\t\t\t}\n\t\t\t// Account for out-of-bounds indices:\n\t\t\tif (index < 0 || index >= size) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\t// Get the first code unit\n\t\t\tvar first = string.charCodeAt(index);\n\t\t\tvar second;\n\t\t\tif ( // check if it’s the start of a surrogate pair\n\t\t\t\tfirst >= 0xD800 && first <= 0xDBFF && // high surrogate\n\t\t\t\tsize > index + 1 // there is a next code unit\n\t\t\t) {\n\t\t\t\tsecond = string.charCodeAt(index + 1);\n\t\t\t\tif (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate\n\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\treturn (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn first;\n\t\t};\n\t\tif (defineProperty) {\n\t\t\tdefineProperty(String.prototype, 'codePointAt', {\n\t\t\t\t'value': codePointAt,\n\t\t\t\t'configurable': true,\n\t\t\t\t'writable': true\n\t\t\t});\n\t\t} else {\n\t\t\tString.prototype.codePointAt = codePointAt;\n\t\t}\n\t}());\n}\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/string.prototype.codepointat/codepointat.js?");

/***/ }),

/***/ "../../node_modules/svg-points/modules/index.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/svg-points/modules/index.js ***!
  \*************************************************************************************/
/*! exports provided: toPath, toPoints, valid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _toPath__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toPath */ \"../../node_modules/svg-points/modules/toPath.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toPath\", function() { return _toPath__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* harmony import */ var _toPoints__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toPoints */ \"../../node_modules/svg-points/modules/toPoints.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toPoints\", function() { return _toPoints__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; });\n\n/* harmony import */ var _valid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./valid */ \"../../node_modules/svg-points/modules/valid.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"valid\", function() { return _valid__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; });\n\n\n\n\n\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/svg-points/modules/index.js?");

/***/ }),

/***/ "../../node_modules/svg-points/modules/toPath.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/svg-points/modules/toPath.js ***!
  \**************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _toPoints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toPoints */ \"../../node_modules/svg-points/modules/toPoints.js\");\n\n\nvar pointsToD = function pointsToD(p) {\n  var d = '';\n  var i = 0;\n  var firstPoint = void 0;\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = p[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var point = _step.value;\n      var _point$curve = point.curve,\n          curve = _point$curve === undefined ? false : _point$curve,\n          moveTo = point.moveTo,\n          x = point.x,\n          y = point.y;\n\n      var isFirstPoint = i === 0 || moveTo;\n      var isLastPoint = i === p.length - 1 || p[i + 1].moveTo;\n      var prevPoint = i === 0 ? null : p[i - 1];\n\n      if (isFirstPoint) {\n        firstPoint = point;\n\n        if (!isLastPoint) {\n          d += 'M' + x + ',' + y;\n        }\n      } else if (curve) {\n        switch (curve.type) {\n          case 'arc':\n            var _point$curve2 = point.curve,\n                _point$curve2$largeAr = _point$curve2.largeArcFlag,\n                largeArcFlag = _point$curve2$largeAr === undefined ? 0 : _point$curve2$largeAr,\n                rx = _point$curve2.rx,\n                ry = _point$curve2.ry,\n                _point$curve2$sweepFl = _point$curve2.sweepFlag,\n                sweepFlag = _point$curve2$sweepFl === undefined ? 0 : _point$curve2$sweepFl,\n                _point$curve2$xAxisRo = _point$curve2.xAxisRotation,\n                xAxisRotation = _point$curve2$xAxisRo === undefined ? 0 : _point$curve2$xAxisRo;\n\n            d += 'A' + rx + ',' + ry + ',' + xAxisRotation + ',' + largeArcFlag + ',' + sweepFlag + ',' + x + ',' + y;\n            break;\n          case 'cubic':\n            var _point$curve3 = point.curve,\n                cx1 = _point$curve3.x1,\n                cy1 = _point$curve3.y1,\n                cx2 = _point$curve3.x2,\n                cy2 = _point$curve3.y2;\n\n            d += 'C' + cx1 + ',' + cy1 + ',' + cx2 + ',' + cy2 + ',' + x + ',' + y;\n            break;\n          case 'quadratic':\n            var _point$curve4 = point.curve,\n                qx1 = _point$curve4.x1,\n                qy1 = _point$curve4.y1;\n\n            d += 'Q' + qx1 + ',' + qy1 + ',' + x + ',' + y;\n            break;\n        }\n\n        if (isLastPoint && x === firstPoint.x && y === firstPoint.y) {\n          d += 'Z';\n        }\n      } else if (isLastPoint && x === firstPoint.x && y === firstPoint.y) {\n        d += 'Z';\n      } else if (x !== prevPoint.x && y !== prevPoint.y) {\n        d += 'L' + x + ',' + y;\n      } else if (x !== prevPoint.x) {\n        d += 'H' + x;\n      } else if (y !== prevPoint.y) {\n        d += 'V' + y;\n      }\n\n      i++;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return d;\n};\n\nvar toPath = function toPath(s) {\n  var isPoints = Array.isArray(s);\n  var isGroup = isPoints ? Array.isArray(s[0]) : s.type === 'g';\n  var points = isPoints ? s : isGroup ? s.shapes.map(function (shp) {\n    return Object(_toPoints__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(shp);\n  }) : Object(_toPoints__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(s);\n\n  if (isGroup) {\n    return points.map(function (p) {\n      return pointsToD(p);\n    });\n  }\n\n  return pointsToD(points);\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (toPath);\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/svg-points/modules/toPath.js?");

/***/ }),

/***/ "../../node_modules/svg-points/modules/toPoints.js":
/*!****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/svg-points/modules/toPoints.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nvar toPoints = function toPoints(_ref) {\n  var type = _ref.type,\n      props = _objectWithoutProperties(_ref, ['type']);\n\n  switch (type) {\n    case 'circle':\n      return getPointsFromCircle(props);\n    case 'ellipse':\n      return getPointsFromEllipse(props);\n    case 'line':\n      return getPointsFromLine(props);\n    case 'path':\n      return getPointsFromPath(props);\n    case 'polygon':\n      return getPointsFromPolygon(props);\n    case 'polyline':\n      return getPointsFromPolyline(props);\n    case 'rect':\n      return getPointsFromRect(props);\n    case 'g':\n      return getPointsFromG(props);\n    default:\n      throw new Error('Not a valid shape type');\n  }\n};\n\nvar getPointsFromCircle = function getPointsFromCircle(_ref2) {\n  var cx = _ref2.cx,\n      cy = _ref2.cy,\n      r = _ref2.r;\n\n  return [{ x: cx, y: cy - r, moveTo: true }, { x: cx, y: cy + r, curve: { type: 'arc', rx: r, ry: r, sweepFlag: 1 } }, { x: cx, y: cy - r, curve: { type: 'arc', rx: r, ry: r, sweepFlag: 1 } }];\n};\n\nvar getPointsFromEllipse = function getPointsFromEllipse(_ref3) {\n  var cx = _ref3.cx,\n      cy = _ref3.cy,\n      rx = _ref3.rx,\n      ry = _ref3.ry;\n\n  return [{ x: cx, y: cy - ry, moveTo: true }, { x: cx, y: cy + ry, curve: { type: 'arc', rx: rx, ry: ry, sweepFlag: 1 } }, { x: cx, y: cy - ry, curve: { type: 'arc', rx: rx, ry: ry, sweepFlag: 1 } }];\n};\n\nvar getPointsFromLine = function getPointsFromLine(_ref4) {\n  var x1 = _ref4.x1,\n      x2 = _ref4.x2,\n      y1 = _ref4.y1,\n      y2 = _ref4.y2;\n\n  return [{ x: x1, y: y1, moveTo: true }, { x: x2, y: y2 }];\n};\n\nvar validCommands = /[MmLlHhVvCcSsQqTtAaZz]/g;\n\nvar commandLengths = {\n  A: 7,\n  C: 6,\n  H: 1,\n  L: 2,\n  M: 2,\n  Q: 4,\n  S: 4,\n  T: 2,\n  V: 1,\n  Z: 0\n};\n\nvar relativeCommands = ['a', 'c', 'h', 'l', 'm', 'q', 's', 't', 'v'];\n\nvar isRelative = function isRelative(command) {\n  return relativeCommands.indexOf(command) !== -1;\n};\n\nvar optionalArcKeys = ['xAxisRotation', 'largeArcFlag', 'sweepFlag'];\n\nvar getCommands = function getCommands(d) {\n  return d.match(validCommands);\n};\n\nvar getParams = function getParams(d) {\n  return d.split(validCommands).map(function (v) {\n    return v.replace(/[0-9]+-/g, function (m) {\n      return m.slice(0, -1) + ' -';\n    });\n  }).map(function (v) {\n    return v.replace(/\\.[0-9]+/g, function (m) {\n      return m + ' ';\n    });\n  }).map(function (v) {\n    return v.trim();\n  }).filter(function (v) {\n    return v.length > 0;\n  }).map(function (v) {\n    return v.split(/[ ,]+/).map(parseFloat).filter(function (n) {\n      return !isNaN(n);\n    });\n  });\n};\n\nvar getPointsFromPath = function getPointsFromPath(_ref5) {\n  var d = _ref5.d;\n\n  var commands = getCommands(d);\n  var params = getParams(d);\n\n  var points = [];\n\n  var moveTo = void 0;\n\n  for (var i = 0, l = commands.length; i < l; i++) {\n    var command = commands[i];\n    var upperCaseCommand = command.toUpperCase();\n    var commandLength = commandLengths[upperCaseCommand];\n    var relative = isRelative(command);\n\n    if (commandLength > 0) {\n      var commandParams = params.shift();\n      var iterations = commandParams.length / commandLength;\n\n      for (var j = 0; j < iterations; j++) {\n        var prevPoint = points[points.length - 1] || { x: 0, y: 0 };\n\n        switch (upperCaseCommand) {\n          case 'M':\n            var x = (relative ? prevPoint.x : 0) + commandParams.shift();\n            var y = (relative ? prevPoint.y : 0) + commandParams.shift();\n\n            if (j === 0) {\n              moveTo = { x: x, y: y };\n              points.push({ x: x, y: y, moveTo: true });\n            } else {\n              points.push({ x: x, y: y });\n            }\n\n            break;\n\n          case 'L':\n            points.push({\n              x: (relative ? prevPoint.x : 0) + commandParams.shift(),\n              y: (relative ? prevPoint.y : 0) + commandParams.shift()\n            });\n\n            break;\n\n          case 'H':\n            points.push({\n              x: (relative ? prevPoint.x : 0) + commandParams.shift(),\n              y: prevPoint.y\n            });\n\n            break;\n\n          case 'V':\n            points.push({\n              x: prevPoint.x,\n              y: (relative ? prevPoint.y : 0) + commandParams.shift()\n            });\n\n            break;\n\n          case 'A':\n            points.push({\n              curve: {\n                type: 'arc',\n                rx: commandParams.shift(),\n                ry: commandParams.shift(),\n                xAxisRotation: commandParams.shift(),\n                largeArcFlag: commandParams.shift(),\n                sweepFlag: commandParams.shift()\n              },\n              x: (relative ? prevPoint.x : 0) + commandParams.shift(),\n              y: (relative ? prevPoint.y : 0) + commandParams.shift()\n            });\n\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = optionalArcKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var k = _step.value;\n\n                if (points[points.length - 1]['curve'][k] === 0) {\n                  delete points[points.length - 1]['curve'][k];\n                }\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n\n            break;\n\n          case 'C':\n            points.push({\n              curve: {\n                type: 'cubic',\n                x1: (relative ? prevPoint.x : 0) + commandParams.shift(),\n                y1: (relative ? prevPoint.y : 0) + commandParams.shift(),\n                x2: (relative ? prevPoint.x : 0) + commandParams.shift(),\n                y2: (relative ? prevPoint.y : 0) + commandParams.shift()\n              },\n              x: (relative ? prevPoint.x : 0) + commandParams.shift(),\n              y: (relative ? prevPoint.y : 0) + commandParams.shift()\n            });\n\n            break;\n\n          case 'S':\n            var sx2 = (relative ? prevPoint.x : 0) + commandParams.shift();\n            var sy2 = (relative ? prevPoint.y : 0) + commandParams.shift();\n            var sx = (relative ? prevPoint.x : 0) + commandParams.shift();\n            var sy = (relative ? prevPoint.y : 0) + commandParams.shift();\n\n            var diff = {};\n\n            var sx1 = void 0;\n            var sy1 = void 0;\n\n            if (prevPoint.curve && prevPoint.curve.type === 'cubic') {\n              diff.x = Math.abs(prevPoint.x - prevPoint.curve.x2);\n              diff.y = Math.abs(prevPoint.y - prevPoint.curve.y2);\n              sx1 = prevPoint.x < prevPoint.curve.x2 ? prevPoint.x - diff.x : prevPoint.x + diff.x;\n              sy1 = prevPoint.y < prevPoint.curve.y2 ? prevPoint.y - diff.y : prevPoint.y + diff.y;\n            } else {\n              diff.x = Math.abs(sx - sx2);\n              diff.y = Math.abs(sy - sy2);\n              sx1 = prevPoint.x;\n              sy1 = prevPoint.y;\n            }\n\n            points.push({ curve: { type: 'cubic', x1: sx1, y1: sy1, x2: sx2, y2: sy2 }, x: sx, y: sy });\n\n            break;\n\n          case 'Q':\n            points.push({\n              curve: {\n                type: 'quadratic',\n                x1: (relative ? prevPoint.x : 0) + commandParams.shift(),\n                y1: (relative ? prevPoint.y : 0) + commandParams.shift()\n              },\n              x: (relative ? prevPoint.x : 0) + commandParams.shift(),\n              y: (relative ? prevPoint.y : 0) + commandParams.shift()\n            });\n\n            break;\n\n          case 'T':\n            var tx = (relative ? prevPoint.x : 0) + commandParams.shift();\n            var ty = (relative ? prevPoint.y : 0) + commandParams.shift();\n\n            var tx1 = void 0;\n            var ty1 = void 0;\n\n            if (prevPoint.curve && prevPoint.curve.type === 'quadratic') {\n              var _diff = {\n                x: Math.abs(prevPoint.x - prevPoint.curve.x1),\n                y: Math.abs(prevPoint.y - prevPoint.curve.y1)\n              };\n\n              tx1 = prevPoint.x < prevPoint.curve.x1 ? prevPoint.x - _diff.x : prevPoint.x + _diff.x;\n              ty1 = prevPoint.y < prevPoint.curve.y1 ? prevPoint.y - _diff.y : prevPoint.y + _diff.y;\n            } else {\n              tx1 = prevPoint.x;\n              ty1 = prevPoint.y;\n            }\n\n            points.push({ curve: { type: 'quadratic', x1: tx1, y1: ty1 }, x: tx, y: ty });\n\n            break;\n        }\n      }\n    } else {\n      var _prevPoint = points[points.length - 1] || { x: 0, y: 0 };\n\n      if (_prevPoint.x !== moveTo.x || _prevPoint.y !== moveTo.y) {\n        points.push({ x: moveTo.x, y: moveTo.y });\n      }\n    }\n  }\n\n  return points;\n};\n\nvar getPointsFromPolygon = function getPointsFromPolygon(_ref6) {\n  var points = _ref6.points;\n\n  return getPointsFromPoints({ closed: true, points: points });\n};\n\nvar getPointsFromPolyline = function getPointsFromPolyline(_ref7) {\n  var points = _ref7.points;\n\n  return getPointsFromPoints({ closed: false, points: points });\n};\n\nvar getPointsFromPoints = function getPointsFromPoints(_ref8) {\n  var closed = _ref8.closed,\n      points = _ref8.points;\n\n  var numbers = points.split(/[\\s,]+/).map(function (n) {\n    return parseFloat(n);\n  });\n\n  var p = numbers.reduce(function (arr, point, i) {\n    if (i % 2 === 0) {\n      arr.push({ x: point });\n    } else {\n      arr[(i - 1) / 2].y = point;\n    }\n\n    return arr;\n  }, []);\n\n  if (closed) {\n    p.push(_extends({}, p[0]));\n  }\n\n  p[0].moveTo = true;\n\n  return p;\n};\n\nvar getPointsFromRect = function getPointsFromRect(_ref9) {\n  var height = _ref9.height,\n      rx = _ref9.rx,\n      ry = _ref9.ry,\n      width = _ref9.width,\n      x = _ref9.x,\n      y = _ref9.y;\n\n  if (rx || ry) {\n    return getPointsFromRectWithCornerRadius({\n      height: height,\n      rx: rx || ry,\n      ry: ry || rx,\n      width: width,\n      x: x,\n      y: y\n    });\n  }\n\n  return getPointsFromBasicRect({ height: height, width: width, x: x, y: y });\n};\n\nvar getPointsFromBasicRect = function getPointsFromBasicRect(_ref10) {\n  var height = _ref10.height,\n      width = _ref10.width,\n      x = _ref10.x,\n      y = _ref10.y;\n\n  return [{ x: x, y: y, moveTo: true }, { x: x + width, y: y }, { x: x + width, y: y + height }, { x: x, y: y + height }, { x: x, y: y }];\n};\n\nvar getPointsFromRectWithCornerRadius = function getPointsFromRectWithCornerRadius(_ref11) {\n  var height = _ref11.height,\n      rx = _ref11.rx,\n      ry = _ref11.ry,\n      width = _ref11.width,\n      x = _ref11.x,\n      y = _ref11.y;\n\n  var curve = { type: 'arc', rx: rx, ry: ry, sweepFlag: 1 };\n\n  return [{ x: x + rx, y: y, moveTo: true }, { x: x + width - rx, y: y }, { x: x + width, y: y + ry, curve: curve }, { x: x + width, y: y + height - ry }, { x: x + width - rx, y: y + height, curve: curve }, { x: x + rx, y: y + height }, { x: x, y: y + height - ry, curve: curve }, { x: x, y: y + ry }, { x: x + rx, y: y, curve: curve }];\n};\n\nvar getPointsFromG = function getPointsFromG(_ref12) {\n  var shapes = _ref12.shapes;\n  return shapes.map(function (s) {\n    return toPoints(s);\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (toPoints);\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/svg-points/modules/toPoints.js?");

/***/ }),

/***/ "../../node_modules/svg-points/modules/valid.js":
/*!*************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/svg-points/modules/valid.js ***!
  \*************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar getErrors = function getErrors(shape) {\n  var rules = getRules(shape);\n  var errors = [];\n\n  rules.map(function (_ref) {\n    var match = _ref.match,\n        prop = _ref.prop,\n        required = _ref.required,\n        type = _ref.type;\n\n    if (typeof shape[prop] === 'undefined') {\n      if (required) {\n        errors.push(prop + ' prop is required' + (prop === 'type' ? '' : ' on a ' + shape.type));\n      }\n    } else {\n      if (typeof type !== 'undefined') {\n        if (type === 'array') {\n          if (!Array.isArray(shape[prop])) {\n            errors.push(prop + ' prop must be of type array');\n          }\n        } else if (_typeof(shape[prop]) !== type) {\n          // eslint-disable-line valid-typeof\n          errors.push(prop + ' prop must be of type ' + type);\n        }\n      }\n\n      if (Array.isArray(match)) {\n        if (match.indexOf(shape[prop]) === -1) {\n          errors.push(prop + ' prop must be one of ' + match.join(', '));\n        }\n      }\n    }\n  });\n\n  if (shape.type === 'g' && Array.isArray(shape.shapes)) {\n    var childErrors = shape.shapes.map(function (s) {\n      return getErrors(s);\n    });\n    return [].concat.apply(errors, childErrors);\n  }\n\n  return errors;\n};\n\nvar getRules = function getRules(shape) {\n  var rules = [{\n    match: ['circle', 'ellipse', 'line', 'path', 'polygon', 'polyline', 'rect', 'g'],\n    prop: 'type',\n    required: true,\n    type: 'string'\n  }];\n\n  switch (shape.type) {\n    case 'circle':\n      rules.push({ prop: 'cx', required: true, type: 'number' });\n      rules.push({ prop: 'cy', required: true, type: 'number' });\n      rules.push({ prop: 'r', required: true, type: 'number' });\n      break;\n\n    case 'ellipse':\n      rules.push({ prop: 'cx', required: true, type: 'number' });\n      rules.push({ prop: 'cy', required: true, type: 'number' });\n      rules.push({ prop: 'rx', required: true, type: 'number' });\n      rules.push({ prop: 'ry', required: true, type: 'number' });\n      break;\n\n    case 'line':\n      rules.push({ prop: 'x1', required: true, type: 'number' });\n      rules.push({ prop: 'x2', required: true, type: 'number' });\n      rules.push({ prop: 'y1', required: true, type: 'number' });\n      rules.push({ prop: 'y2', required: true, type: 'number' });\n      break;\n\n    case 'path':\n      rules.push({ prop: 'd', required: true, type: 'string' });\n      break;\n\n    case 'polygon':\n    case 'polyline':\n      rules.push({ prop: 'points', required: true, type: 'string' });\n      break;\n\n    case 'rect':\n      rules.push({ prop: 'height', required: true, type: 'number' });\n      rules.push({ prop: 'rx', type: 'number' });\n      rules.push({ prop: 'ry', type: 'number' });\n      rules.push({ prop: 'width', required: true, type: 'number' });\n      rules.push({ prop: 'x', required: true, type: 'number' });\n      rules.push({ prop: 'y', required: true, type: 'number' });\n      break;\n\n    case 'g':\n      rules.push({ prop: 'shapes', required: true, type: 'array' });\n      break;\n  }\n\n  return rules;\n};\n\nvar valid = function valid(shape) {\n  var errors = getErrors(shape);\n\n  return {\n    errors: errors,\n    valid: errors.length === 0\n  };\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (valid);\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/svg-points/modules/valid.js?");

/***/ }),

/***/ "../../node_modules/tess2/index.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/tess2/index.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./src/tess2 */ \"../../node_modules/tess2/src/tess2.js\");\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/tess2/index.js?");

/***/ }),

/***/ "../../node_modules/tess2/src/tess2.js":
/*!****************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/tess2/src/tess2.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n** SGI FREE SOFTWARE LICENSE B (Version 2.0, Sept. 18, 2008) \n** Copyright (C) [dates of first publication] Silicon Graphics, Inc.\n** All Rights Reserved.\n**\n** Permission is hereby granted, free of charge, to any person obtaining a copy\n** of this software and associated documentation files (the \"Software\"), to deal\n** in the Software without restriction, including without limitation the rights\n** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n** of the Software, and to permit persons to whom the Software is furnished to do so,\n** subject to the following conditions:\n** \n** The above copyright notice including the dates of first publication and either this\n** permission notice or a reference to http://oss.sgi.com/projects/FreeB/ shall be\n** included in all copies or substantial portions of the Software. \n**\n** THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n** INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n** PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL SILICON GRAPHICS, INC.\n** BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE\n** OR OTHER DEALINGS IN THE SOFTWARE.\n** \n** Except as contained in this notice, the name of Silicon Graphics, Inc. shall not\n** be used in advertising or otherwise to promote the sale, use or other dealings in\n** this Software without prior written authorization from Silicon Graphics, Inc.\n*/\n/*\n** Author: Mikko Mononen, Aug 2013.\n** The code is based on GLU libtess by Eric Veach, July 1994\n*/\n\n\t\n\n\t/* Public API */\n\n\tvar Tess2 = {};\n\n\tmodule.exports = Tess2;\n\t\n\tTess2.WINDING_ODD = 0;\n\tTess2.WINDING_NONZERO = 1;\n\tTess2.WINDING_POSITIVE = 2;\n\tTess2.WINDING_NEGATIVE = 3;\n\tTess2.WINDING_ABS_GEQ_TWO = 4;\n\n\tTess2.POLYGONS = 0;\n\tTess2.CONNECTED_POLYGONS = 1;\n\tTess2.BOUNDARY_CONTOURS = 2;\n\n\tTess2.tesselate = function(opts) {\n\t\tvar debug =  opts.debug || false;\n\t\tvar tess = new Tesselator();\n\t\tfor (var i = 0; i < opts.contours.length; i++) {\n\t\t\ttess.addContour(opts.vertexSize || 2, opts.contours[i]);\n\t\t}\n\t\ttess.tesselate(opts.windingRule || Tess2.WINDING_ODD,\n\t\t\t\t\t   opts.elementType || Tess2.POLYGONS,\n\t\t\t\t\t   opts.polySize || 3,\n\t\t\t\t\t   opts.vertexSize || 2,\n\t\t\t\t\t   opts.normal || [0,0,1]);\n\t\treturn {\n\t\t\tvertices: tess.vertices,\n\t\t\tvertexIndices: tess.vertexIndices,\n\t\t\tvertexCount: tess.vertexCount,\n\t\t\telements: tess.elements,\n\t\t\telementCount: tess.elementCount,\n\t\t\tmesh: debug ? tess.mesh : undefined\n\t\t};\n\t};\n\n\t/* Internal */\n\n\tvar assert = function(cond) {\n\t\tif (!cond) {\n\t\t\tthrow \"Assertion Failed!\";\n\t\t}\n\t}\n\n\t/* The mesh structure is similar in spirit, notation, and operations\n\t* to the \"quad-edge\" structure (see L. Guibas and J. Stolfi, Primitives\n\t* for the manipulation of general subdivisions and the computation of\n\t* Voronoi diagrams, ACM Transactions on Graphics, 4(2):74-123, April 1985).\n\t* For a simplified description, see the course notes for CS348a,\n\t* \"Mathematical Foundations of Computer Graphics\", available at the\n\t* Stanford bookstore (and taught during the fall quarter).\n\t* The implementation also borrows a tiny subset of the graph-based approach\n\t* use in Mantyla's Geometric Work Bench (see M. Mantyla, An Introduction\n\t* to Sold Modeling, Computer Science Press, Rockville, Maryland, 1988).\n\t*\n\t* The fundamental data structure is the \"half-edge\".  Two half-edges\n\t* go together to make an edge, but they point in opposite directions.\n\t* Each half-edge has a pointer to its mate (the \"symmetric\" half-edge Sym),\n\t* its origin vertex (Org), the face on its left side (Lface), and the\n\t* adjacent half-edges in the CCW direction around the origin vertex\n\t* (Onext) and around the left face (Lnext).  There is also a \"next\"\n\t* pointer for the global edge list (see below).\n\t*\n\t* The notation used for mesh navigation:\n\t*  Sym   = the mate of a half-edge (same edge, but opposite direction)\n\t*  Onext = edge CCW around origin vertex (keep same origin)\n\t*  Dnext = edge CCW around destination vertex (keep same dest)\n\t*  Lnext = edge CCW around left face (dest becomes new origin)\n\t*  Rnext = edge CCW around right face (origin becomes new dest)\n\t*\n\t* \"prev\" means to substitute CW for CCW in the definitions above.\n\t*\n\t* The mesh keeps global lists of all vertices, faces, and edges,\n\t* stored as doubly-linked circular lists with a dummy header node.\n\t* The mesh stores pointers to these dummy headers (vHead, fHead, eHead).\n\t*\n\t* The circular edge list is special; since half-edges always occur\n\t* in pairs (e and e->Sym), each half-edge stores a pointer in only\n\t* one direction.  Starting at eHead and following the e->next pointers\n\t* will visit each *edge* once (ie. e or e->Sym, but not both).\n\t* e->Sym stores a pointer in the opposite direction, thus it is\n\t* always true that e->Sym->next->Sym->next == e.\n\t*\n\t* Each vertex has a pointer to next and previous vertices in the\n\t* circular list, and a pointer to a half-edge with this vertex as\n\t* the origin (NULL if this is the dummy header).  There is also a\n\t* field \"data\" for client data.\n\t*\n\t* Each face has a pointer to the next and previous faces in the\n\t* circular list, and a pointer to a half-edge with this face as\n\t* the left face (NULL if this is the dummy header).  There is also\n\t* a field \"data\" for client data.\n\t*\n\t* Note that what we call a \"face\" is really a loop; faces may consist\n\t* of more than one loop (ie. not simply connected), but there is no\n\t* record of this in the data structure.  The mesh may consist of\n\t* several disconnected regions, so it may not be possible to visit\n\t* the entire mesh by starting at a half-edge and traversing the edge\n\t* structure.\n\t*\n\t* The mesh does NOT support isolated vertices; a vertex is deleted along\n\t* with its last edge.  Similarly when two faces are merged, one of the\n\t* faces is deleted (see tessMeshDelete below).  For mesh operations,\n\t* all face (loop) and vertex pointers must not be NULL.  However, once\n\t* mesh manipulation is finished, TESSmeshZapFace can be used to delete\n\t* faces of the mesh, one at a time.  All external faces can be \"zapped\"\n\t* before the mesh is returned to the client; then a NULL face indicates\n\t* a region which is not part of the output polygon.\n\t*/\n\n\tfunction TESSvertex() {\n\t\tthis.next = null;\t/* next vertex (never NULL) */\n\t\tthis.prev = null;\t/* previous vertex (never NULL) */\n\t\tthis.anEdge = null;\t/* a half-edge with this origin */\n\n\t\t/* Internal data (keep hidden) */\n\t\tthis.coords = [0,0,0];\t/* vertex location in 3D */\n\t\tthis.s = 0.0;\n\t\tthis.t = 0.0;\t\t\t/* projection onto the sweep plane */\n\t\tthis.pqHandle = 0;\t\t/* to allow deletion from priority queue */\n\t\tthis.n = 0;\t\t\t\t/* to allow identify unique vertices */\n\t\tthis.idx = 0;\t\t\t/* to allow map result to original verts */\n\t} \n\n\tfunction TESSface() {\n\t\tthis.next = null;\t\t/* next face (never NULL) */\n\t\tthis.prev = null;\t\t/* previous face (never NULL) */\n\t\tthis.anEdge = null;\t\t/* a half edge with this left face */\n\n\t\t/* Internal data (keep hidden) */\n\t\tthis.trail = null;\t\t/* \"stack\" for conversion to strips */\n\t\tthis.n = 0;\t\t\t\t/* to allow identiy unique faces */\n\t\tthis.marked = false;\t/* flag for conversion to strips */\n\t\tthis.inside = false;\t/* this face is in the polygon interior */\n\t};\n\n\tfunction TESShalfEdge(side) {\n\t\tthis.next = null;\t\t/* doubly-linked list (prev==Sym->next) */\n\t\tthis.Sym = null;\t\t/* same edge, opposite direction */\n\t\tthis.Onext = null;\t\t/* next edge CCW around origin */\n\t\tthis.Lnext = null;\t\t/* next edge CCW around left face */\n\t\tthis.Org = null;\t\t/* origin vertex (Overtex too long) */\n\t\tthis.Lface = null;\t\t/* left face */\n\n\t\t/* Internal data (keep hidden) */\n\t\tthis.activeRegion = null;\t/* a region with this upper edge (sweep.c) */\n\t\tthis.winding = 0;\t\t\t/* change in winding number when crossing\n\t\t\t\t\t\t\t\t\t   from the right face to the left face */\n\t\tthis.side = side;\n\t};\n\n\tTESShalfEdge.prototype = {\n\t\tget Rface() { return this.Sym.Lface; },\n\t\tset Rface(v) { this.Sym.Lface = v; },\n\t\tget Dst() { return this.Sym.Org; },\n\t\tset Dst(v) { this.Sym.Org = v; },\n\t\tget Oprev() { return this.Sym.Lnext; },\n\t\tset Oprev(v) { this.Sym.Lnext = v; },\n\t\tget Lprev() { return this.Onext.Sym; },\n\t\tset Lprev(v) { this.Onext.Sym = v; },\n\t\tget Dprev() { return this.Lnext.Sym; },\n\t\tset Dprev(v) { this.Lnext.Sym = v; },\n\t\tget Rprev() { return this.Sym.Onext; },\n\t\tset Rprev(v) { this.Sym.Onext = v; },\n\t\tget Dnext() { return /*this.Rprev*/this.Sym.Onext.Sym; },  /* 3 pointers */\n\t\tset Dnext(v) { /*this.Rprev*/this.Sym.Onext.Sym = v; },  /* 3 pointers */\n\t\tget Rnext() { return /*this.Oprev*/this.Sym.Lnext.Sym; },  /* 3 pointers */\n\t\tset Rnext(v) { /*this.Oprev*/this.Sym.Lnext.Sym = v; },  /* 3 pointers */\n\t};\n\n\n\n\tfunction TESSmesh() {\n\t\tvar v = new TESSvertex();\n\t\tvar f = new TESSface();\n\t\tvar e = new TESShalfEdge(0);\n\t\tvar eSym = new TESShalfEdge(1);\n\n\t\tv.next = v.prev = v;\n\t\tv.anEdge = null;\n\n\t\tf.next = f.prev = f;\n\t\tf.anEdge = null;\n\t\tf.trail = null;\n\t\tf.marked = false;\n\t\tf.inside = false;\n\n\t\te.next = e;\n\t\te.Sym = eSym;\n\t\te.Onext = null;\n\t\te.Lnext = null;\n\t\te.Org = null;\n\t\te.Lface = null;\n\t\te.winding = 0;\n\t\te.activeRegion = null;\n\n\t\teSym.next = eSym;\n\t\teSym.Sym = e;\n\t\teSym.Onext = null;\n\t\teSym.Lnext = null;\n\t\teSym.Org = null;\n\t\teSym.Lface = null;\n\t\teSym.winding = 0;\n\t\teSym.activeRegion = null;\n\n\t\tthis.vHead = v;\t\t/* dummy header for vertex list */\n\t\tthis.fHead = f;\t\t/* dummy header for face list */\n\t\tthis.eHead = e;\t\t/* dummy header for edge list */\n\t\tthis.eHeadSym = eSym;\t/* and its symmetric counterpart */\n\t};\n\n\t/* The mesh operations below have three motivations: completeness,\n\t* convenience, and efficiency.  The basic mesh operations are MakeEdge,\n\t* Splice, and Delete.  All the other edge operations can be implemented\n\t* in terms of these.  The other operations are provided for convenience\n\t* and/or efficiency.\n\t*\n\t* When a face is split or a vertex is added, they are inserted into the\n\t* global list *before* the existing vertex or face (ie. e->Org or e->Lface).\n\t* This makes it easier to process all vertices or faces in the global lists\n\t* without worrying about processing the same data twice.  As a convenience,\n\t* when a face is split, the \"inside\" flag is copied from the old face.\n\t* Other internal data (v->data, v->activeRegion, f->data, f->marked,\n\t* f->trail, e->winding) is set to zero.\n\t*\n\t* ********************** Basic Edge Operations **************************\n\t*\n\t* tessMeshMakeEdge( mesh ) creates one edge, two vertices, and a loop.\n\t* The loop (face) consists of the two new half-edges.\n\t*\n\t* tessMeshSplice( eOrg, eDst ) is the basic operation for changing the\n\t* mesh connectivity and topology.  It changes the mesh so that\n\t*  eOrg->Onext <- OLD( eDst->Onext )\n\t*  eDst->Onext <- OLD( eOrg->Onext )\n\t* where OLD(...) means the value before the meshSplice operation.\n\t*\n\t* This can have two effects on the vertex structure:\n\t*  - if eOrg->Org != eDst->Org, the two vertices are merged together\n\t*  - if eOrg->Org == eDst->Org, the origin is split into two vertices\n\t* In both cases, eDst->Org is changed and eOrg->Org is untouched.\n\t*\n\t* Similarly (and independently) for the face structure,\n\t*  - if eOrg->Lface == eDst->Lface, one loop is split into two\n\t*  - if eOrg->Lface != eDst->Lface, two distinct loops are joined into one\n\t* In both cases, eDst->Lface is changed and eOrg->Lface is unaffected.\n\t*\n\t* tessMeshDelete( eDel ) removes the edge eDel.  There are several cases:\n\t* if (eDel->Lface != eDel->Rface), we join two loops into one; the loop\n\t* eDel->Lface is deleted.  Otherwise, we are splitting one loop into two;\n\t* the newly created loop will contain eDel->Dst.  If the deletion of eDel\n\t* would create isolated vertices, those are deleted as well.\n\t*\n\t* ********************** Other Edge Operations **************************\n\t*\n\t* tessMeshAddEdgeVertex( eOrg ) creates a new edge eNew such that\n\t* eNew == eOrg->Lnext, and eNew->Dst is a newly created vertex.\n\t* eOrg and eNew will have the same left face.\n\t*\n\t* tessMeshSplitEdge( eOrg ) splits eOrg into two edges eOrg and eNew,\n\t* such that eNew == eOrg->Lnext.  The new vertex is eOrg->Dst == eNew->Org.\n\t* eOrg and eNew will have the same left face.\n\t*\n\t* tessMeshConnect( eOrg, eDst ) creates a new edge from eOrg->Dst\n\t* to eDst->Org, and returns the corresponding half-edge eNew.\n\t* If eOrg->Lface == eDst->Lface, this splits one loop into two,\n\t* and the newly created loop is eNew->Lface.  Otherwise, two disjoint\n\t* loops are merged into one, and the loop eDst->Lface is destroyed.\n\t*\n\t* ************************ Other Operations *****************************\n\t*\n\t* tessMeshNewMesh() creates a new mesh with no edges, no vertices,\n\t* and no loops (what we usually call a \"face\").\n\t*\n\t* tessMeshUnion( mesh1, mesh2 ) forms the union of all structures in\n\t* both meshes, and returns the new mesh (the old meshes are destroyed).\n\t*\n\t* tessMeshDeleteMesh( mesh ) will free all storage for any valid mesh.\n\t*\n\t* tessMeshZapFace( fZap ) destroys a face and removes it from the\n\t* global face list.  All edges of fZap will have a NULL pointer as their\n\t* left face.  Any edges which also have a NULL pointer as their right face\n\t* are deleted entirely (along with any isolated vertices this produces).\n\t* An entire mesh can be deleted by zapping its faces, one at a time,\n\t* in any order.  Zapped faces cannot be used in further mesh operations!\n\t*\n\t* tessMeshCheckMesh( mesh ) checks a mesh for self-consistency.\n\t*/\n\n\tTESSmesh.prototype = {\n\n\t\t/* MakeEdge creates a new pair of half-edges which form their own loop.\n\t\t* No vertex or face structures are allocated, but these must be assigned\n\t\t* before the current edge operation is completed.\n\t\t*/\n\t\t//static TESShalfEdge *MakeEdge( TESSmesh* mesh, TESShalfEdge *eNext )\n\t\tmakeEdge_: function(eNext) {\n\t\t\tvar e = new TESShalfEdge(0);\n\t\t\tvar eSym = new TESShalfEdge(1);\n\n\t\t\t/* Make sure eNext points to the first edge of the edge pair */\n\t\t\tif( eNext.Sym.side < eNext.side ) { eNext = eNext.Sym; }\n\n\t\t\t/* Insert in circular doubly-linked list before eNext.\n\t\t\t* Note that the prev pointer is stored in Sym->next.\n\t\t\t*/\n\t\t\tvar ePrev = eNext.Sym.next;\n\t\t\teSym.next = ePrev;\n\t\t\tePrev.Sym.next = e;\n\t\t\te.next = eNext;\n\t\t\teNext.Sym.next = eSym;\n\n\t\t\te.Sym = eSym;\n\t\t\te.Onext = e;\n\t\t\te.Lnext = eSym;\n\t\t\te.Org = null;\n\t\t\te.Lface = null;\n\t\t\te.winding = 0;\n\t\t\te.activeRegion = null;\n\n\t\t\teSym.Sym = e;\n\t\t\teSym.Onext = eSym;\n\t\t\teSym.Lnext = e;\n\t\t\teSym.Org = null;\n\t\t\teSym.Lface = null;\n\t\t\teSym.winding = 0;\n\t\t\teSym.activeRegion = null;\n\n\t\t\treturn e;\n\t\t},\n\n\t\t/* Splice( a, b ) is best described by the Guibas/Stolfi paper or the\n\t\t* CS348a notes (see mesh.h).  Basically it modifies the mesh so that\n\t\t* a->Onext and b->Onext are exchanged.  This can have various effects\n\t\t* depending on whether a and b belong to different face or vertex rings.\n\t\t* For more explanation see tessMeshSplice() below.\n\t\t*/\n\t\t// static void Splice( TESShalfEdge *a, TESShalfEdge *b )\n\t\tsplice_: function(a, b) {\n\t\t\tvar aOnext = a.Onext;\n\t\t\tvar bOnext = b.Onext;\n\t\t\taOnext.Sym.Lnext = b;\n\t\t\tbOnext.Sym.Lnext = a;\n\t\t\ta.Onext = bOnext;\n\t\t\tb.Onext = aOnext;\n\t\t},\n\n\t\t/* MakeVertex( newVertex, eOrig, vNext ) attaches a new vertex and makes it the\n\t\t* origin of all edges in the vertex loop to which eOrig belongs. \"vNext\" gives\n\t\t* a place to insert the new vertex in the global vertex list.  We insert\n\t\t* the new vertex *before* vNext so that algorithms which walk the vertex\n\t\t* list will not see the newly created vertices.\n\t\t*/\n\t\t//static void MakeVertex( TESSvertex *newVertex, TESShalfEdge *eOrig, TESSvertex *vNext )\n\t\tmakeVertex_: function(newVertex, eOrig, vNext) {\n\t\t\tvar vNew = newVertex;\n\t\t\tassert(vNew !== null);\n\n\t\t\t/* insert in circular doubly-linked list before vNext */\n\t\t\tvar vPrev = vNext.prev;\n\t\t\tvNew.prev = vPrev;\n\t\t\tvPrev.next = vNew;\n\t\t\tvNew.next = vNext;\n\t\t\tvNext.prev = vNew;\n\n\t\t\tvNew.anEdge = eOrig;\n\t\t\t/* leave coords, s, t undefined */\n\n\t\t\t/* fix other edges on this vertex loop */\n\t\t\tvar e = eOrig;\n\t\t\tdo {\n\t\t\t\te.Org = vNew;\n\t\t\t\te = e.Onext;\n\t\t\t} while(e !== eOrig);\n\t\t},\n\n\t\t/* MakeFace( newFace, eOrig, fNext ) attaches a new face and makes it the left\n\t\t* face of all edges in the face loop to which eOrig belongs.  \"fNext\" gives\n\t\t* a place to insert the new face in the global face list.  We insert\n\t\t* the new face *before* fNext so that algorithms which walk the face\n\t\t* list will not see the newly created faces.\n\t\t*/\n\t\t// static void MakeFace( TESSface *newFace, TESShalfEdge *eOrig, TESSface *fNext )\n\t\tmakeFace_: function(newFace, eOrig, fNext) {\n\t\t\tvar fNew = newFace;\n\t\t\tassert(fNew !== null); \n\n\t\t\t/* insert in circular doubly-linked list before fNext */\n\t\t\tvar fPrev = fNext.prev;\n\t\t\tfNew.prev = fPrev;\n\t\t\tfPrev.next = fNew;\n\t\t\tfNew.next = fNext;\n\t\t\tfNext.prev = fNew;\n\n\t\t\tfNew.anEdge = eOrig;\n\t\t\tfNew.trail = null;\n\t\t\tfNew.marked = false;\n\n\t\t\t/* The new face is marked \"inside\" if the old one was.  This is a\n\t\t\t* convenience for the common case where a face has been split in two.\n\t\t\t*/\n\t\t\tfNew.inside = fNext.inside;\n\n\t\t\t/* fix other edges on this face loop */\n\t\t\tvar e = eOrig;\n\t\t\tdo {\n\t\t\t\te.Lface = fNew;\n\t\t\t\te = e.Lnext;\n\t\t\t} while(e !== eOrig);\n\t\t},\n\n\t\t/* KillEdge( eDel ) destroys an edge (the half-edges eDel and eDel->Sym),\n\t\t* and removes from the global edge list.\n\t\t*/\n\t\t//static void KillEdge( TESSmesh *mesh, TESShalfEdge *eDel )\n\t\tkillEdge_: function(eDel) {\n\t\t\t/* Half-edges are allocated in pairs, see EdgePair above */\n\t\t\tif( eDel.Sym.side < eDel.side ) { eDel = eDel.Sym; }\n\n\t\t\t/* delete from circular doubly-linked list */\n\t\t\tvar eNext = eDel.next;\n\t\t\tvar ePrev = eDel.Sym.next;\n\t\t\teNext.Sym.next = ePrev;\n\t\t\tePrev.Sym.next = eNext;\n\t\t},\n\n\n\t\t/* KillVertex( vDel ) destroys a vertex and removes it from the global\n\t\t* vertex list.  It updates the vertex loop to point to a given new vertex.\n\t\t*/\n\t\t//static void KillVertex( TESSmesh *mesh, TESSvertex *vDel, TESSvertex *newOrg )\n\t\tkillVertex_: function(vDel, newOrg) {\n\t\t\tvar eStart = vDel.anEdge;\n\t\t\t/* change the origin of all affected edges */\n\t\t\tvar e = eStart;\n\t\t\tdo {\n\t\t\t\te.Org = newOrg;\n\t\t\t\te = e.Onext;\n\t\t\t} while(e !== eStart);\n\n\t\t\t/* delete from circular doubly-linked list */\n\t\t\tvar vPrev = vDel.prev;\n\t\t\tvar vNext = vDel.next;\n\t\t\tvNext.prev = vPrev;\n\t\t\tvPrev.next = vNext;\n\t\t},\n\n\t\t/* KillFace( fDel ) destroys a face and removes it from the global face\n\t\t* list.  It updates the face loop to point to a given new face.\n\t\t*/\n\t\t//static void KillFace( TESSmesh *mesh, TESSface *fDel, TESSface *newLface )\n\t\tkillFace_: function(fDel, newLface) {\n\t\t\tvar eStart = fDel.anEdge;\n\n\t\t\t/* change the left face of all affected edges */\n\t\t\tvar e = eStart;\n\t\t\tdo {\n\t\t\t\te.Lface = newLface;\n\t\t\t\te = e.Lnext;\n\t\t\t} while(e !== eStart);\n\n\t\t\t/* delete from circular doubly-linked list */\n\t\t\tvar fPrev = fDel.prev;\n\t\t\tvar fNext = fDel.next;\n\t\t\tfNext.prev = fPrev;\n\t\t\tfPrev.next = fNext;\n\t\t},\n\n\t\t/****************** Basic Edge Operations **********************/\n\n\t\t/* tessMeshMakeEdge creates one edge, two vertices, and a loop (face).\n\t\t* The loop consists of the two new half-edges.\n\t\t*/\n\t\t//TESShalfEdge *tessMeshMakeEdge( TESSmesh *mesh )\n\t\tmakeEdge: function() {\n\t\t\tvar newVertex1 = new TESSvertex();\n\t\t\tvar newVertex2 = new TESSvertex();\n\t\t\tvar newFace = new TESSface();\n\t\t\tvar e = this.makeEdge_( this.eHead);\n\t\t\tthis.makeVertex_( newVertex1, e, this.vHead );\n\t\t\tthis.makeVertex_( newVertex2, e.Sym, this.vHead );\n\t\t\tthis.makeFace_( newFace, e, this.fHead );\n\t\t\treturn e;\n\t\t},\n\n\t\t/* tessMeshSplice( eOrg, eDst ) is the basic operation for changing the\n\t\t* mesh connectivity and topology.  It changes the mesh so that\n\t\t*\teOrg->Onext <- OLD( eDst->Onext )\n\t\t*\teDst->Onext <- OLD( eOrg->Onext )\n\t\t* where OLD(...) means the value before the meshSplice operation.\n\t\t*\n\t\t* This can have two effects on the vertex structure:\n\t\t*  - if eOrg->Org != eDst->Org, the two vertices are merged together\n\t\t*  - if eOrg->Org == eDst->Org, the origin is split into two vertices\n\t\t* In both cases, eDst->Org is changed and eOrg->Org is untouched.\n\t\t*\n\t\t* Similarly (and independently) for the face structure,\n\t\t*  - if eOrg->Lface == eDst->Lface, one loop is split into two\n\t\t*  - if eOrg->Lface != eDst->Lface, two distinct loops are joined into one\n\t\t* In both cases, eDst->Lface is changed and eOrg->Lface is unaffected.\n\t\t*\n\t\t* Some special cases:\n\t\t* If eDst == eOrg, the operation has no effect.\n\t\t* If eDst == eOrg->Lnext, the new face will have a single edge.\n\t\t* If eDst == eOrg->Lprev, the old face will have a single edge.\n\t\t* If eDst == eOrg->Onext, the new vertex will have a single edge.\n\t\t* If eDst == eOrg->Oprev, the old vertex will have a single edge.\n\t\t*/\n\t\t//int tessMeshSplice( TESSmesh* mesh, TESShalfEdge *eOrg, TESShalfEdge *eDst )\n\t\tsplice: function(eOrg, eDst) {\n\t\t\tvar joiningLoops = false;\n\t\t\tvar joiningVertices = false;\n\n\t\t\tif( eOrg === eDst ) return;\n\n\t\t\tif( eDst.Org !== eOrg.Org ) {\n\t\t\t\t/* We are merging two disjoint vertices -- destroy eDst->Org */\n\t\t\t\tjoiningVertices = true;\n\t\t\t\tthis.killVertex_( eDst.Org, eOrg.Org );\n\t\t\t}\n\t\t\tif( eDst.Lface !== eOrg.Lface ) {\n\t\t\t\t/* We are connecting two disjoint loops -- destroy eDst->Lface */\n\t\t\t\tjoiningLoops = true;\n\t\t\t\tthis.killFace_( eDst.Lface, eOrg.Lface );\n\t\t\t}\n\n\t\t\t/* Change the edge structure */\n\t\t\tthis.splice_( eDst, eOrg );\n\n\t\t\tif( ! joiningVertices ) {\n\t\t\t\tvar newVertex = new TESSvertex();\n\n\t\t\t\t/* We split one vertex into two -- the new vertex is eDst->Org.\n\t\t\t\t* Make sure the old vertex points to a valid half-edge.\n\t\t\t\t*/\n\t\t\t\tthis.makeVertex_( newVertex, eDst, eOrg.Org );\n\t\t\t\teOrg.Org.anEdge = eOrg;\n\t\t\t}\n\t\t\tif( ! joiningLoops ) {\n\t\t\t\tvar newFace = new TESSface();  \n\n\t\t\t\t/* We split one loop into two -- the new loop is eDst->Lface.\n\t\t\t\t* Make sure the old face points to a valid half-edge.\n\t\t\t\t*/\n\t\t\t\tthis.makeFace_( newFace, eDst, eOrg.Lface );\n\t\t\t\teOrg.Lface.anEdge = eOrg;\n\t\t\t}\n\t\t},\n\n\t\t/* tessMeshDelete( eDel ) removes the edge eDel.  There are several cases:\n\t\t* if (eDel->Lface != eDel->Rface), we join two loops into one; the loop\n\t\t* eDel->Lface is deleted.  Otherwise, we are splitting one loop into two;\n\t\t* the newly created loop will contain eDel->Dst.  If the deletion of eDel\n\t\t* would create isolated vertices, those are deleted as well.\n\t\t*\n\t\t* This function could be implemented as two calls to tessMeshSplice\n\t\t* plus a few calls to memFree, but this would allocate and delete\n\t\t* unnecessary vertices and faces.\n\t\t*/\n\t\t//int tessMeshDelete( TESSmesh *mesh, TESShalfEdge *eDel )\n\t\tdelete: function(eDel) {\n\t\t\tvar eDelSym = eDel.Sym;\n\t\t\tvar joiningLoops = false;\n\n\t\t\t/* First step: disconnect the origin vertex eDel->Org.  We make all\n\t\t\t* changes to get a consistent mesh in this \"intermediate\" state.\n\t\t\t*/\n\t\t\tif( eDel.Lface !== eDel.Rface ) {\n\t\t\t\t/* We are joining two loops into one -- remove the left face */\n\t\t\t\tjoiningLoops = true;\n\t\t\t\tthis.killFace_( eDel.Lface, eDel.Rface );\n\t\t\t}\n\n\t\t\tif( eDel.Onext === eDel ) {\n\t\t\t\tthis.killVertex_( eDel.Org, null );\n\t\t\t} else {\n\t\t\t\t/* Make sure that eDel->Org and eDel->Rface point to valid half-edges */\n\t\t\t\teDel.Rface.anEdge = eDel.Oprev;\n\t\t\t\teDel.Org.anEdge = eDel.Onext;\n\n\t\t\t\tthis.splice_( eDel, eDel.Oprev );\n\t\t\t\tif( ! joiningLoops ) {\n\t\t\t\t\tvar newFace = new TESSface();\n\n\t\t\t\t\t/* We are splitting one loop into two -- create a new loop for eDel. */\n\t\t\t\t\tthis.makeFace_( newFace, eDel, eDel.Lface );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Claim: the mesh is now in a consistent state, except that eDel->Org\n\t\t\t* may have been deleted.  Now we disconnect eDel->Dst.\n\t\t\t*/\n\t\t\tif( eDelSym.Onext === eDelSym ) {\n\t\t\t\tthis.killVertex_( eDelSym.Org, null );\n\t\t\t\tthis.killFace_( eDelSym.Lface, null );\n\t\t\t} else {\n\t\t\t\t/* Make sure that eDel->Dst and eDel->Lface point to valid half-edges */\n\t\t\t\teDel.Lface.anEdge = eDelSym.Oprev;\n\t\t\t\teDelSym.Org.anEdge = eDelSym.Onext;\n\t\t\t\tthis.splice_( eDelSym, eDelSym.Oprev );\n\t\t\t}\n\n\t\t\t/* Any isolated vertices or faces have already been freed. */\n\t\t\tthis.killEdge_( eDel );\n\t\t},\n\n\t\t/******************** Other Edge Operations **********************/\n\n\t\t/* All these routines can be implemented with the basic edge\n\t\t* operations above.  They are provided for convenience and efficiency.\n\t\t*/\n\n\n\t\t/* tessMeshAddEdgeVertex( eOrg ) creates a new edge eNew such that\n\t\t* eNew == eOrg->Lnext, and eNew->Dst is a newly created vertex.\n\t\t* eOrg and eNew will have the same left face.\n\t\t*/\n\t\t// TESShalfEdge *tessMeshAddEdgeVertex( TESSmesh *mesh, TESShalfEdge *eOrg );\n\t\taddEdgeVertex: function(eOrg) {\n\t\t\tvar eNew = this.makeEdge_( eOrg );\n\t\t\tvar eNewSym = eNew.Sym;\n\n\t\t\t/* Connect the new edge appropriately */\n\t\t\tthis.splice_( eNew, eOrg.Lnext );\n\n\t\t\t/* Set the vertex and face information */\n\t\t\teNew.Org = eOrg.Dst;\n\n\t\t\tvar newVertex = new TESSvertex();\n\t\t\tthis.makeVertex_( newVertex, eNewSym, eNew.Org );\n\n\t\t\teNew.Lface = eNewSym.Lface = eOrg.Lface;\n\n\t\t\treturn eNew;\n\t\t},\n\n\n\t\t/* tessMeshSplitEdge( eOrg ) splits eOrg into two edges eOrg and eNew,\n\t\t* such that eNew == eOrg->Lnext.  The new vertex is eOrg->Dst == eNew->Org.\n\t\t* eOrg and eNew will have the same left face.\n\t\t*/\n\t\t// TESShalfEdge *tessMeshSplitEdge( TESSmesh *mesh, TESShalfEdge *eOrg );\n\t\tsplitEdge: function(eOrg, eDst) {\n\t\t\tvar tempHalfEdge = this.addEdgeVertex( eOrg );\n\t\t\tvar eNew = tempHalfEdge.Sym;\n\n\t\t\t/* Disconnect eOrg from eOrg->Dst and connect it to eNew->Org */\n\t\t\tthis.splice_( eOrg.Sym, eOrg.Sym.Oprev );\n\t\t\tthis.splice_( eOrg.Sym, eNew );\n\n\t\t\t/* Set the vertex and face information */\n\t\t\teOrg.Dst = eNew.Org;\n\t\t\teNew.Dst.anEdge = eNew.Sym;\t/* may have pointed to eOrg->Sym */\n\t\t\teNew.Rface = eOrg.Rface;\n\t\t\teNew.winding = eOrg.winding;\t/* copy old winding information */\n\t\t\teNew.Sym.winding = eOrg.Sym.winding;\n\n\t\t\treturn eNew;\n\t\t},\n\n\n\t\t/* tessMeshConnect( eOrg, eDst ) creates a new edge from eOrg->Dst\n\t\t* to eDst->Org, and returns the corresponding half-edge eNew.\n\t\t* If eOrg->Lface == eDst->Lface, this splits one loop into two,\n\t\t* and the newly created loop is eNew->Lface.  Otherwise, two disjoint\n\t\t* loops are merged into one, and the loop eDst->Lface is destroyed.\n\t\t*\n\t\t* If (eOrg == eDst), the new face will have only two edges.\n\t\t* If (eOrg->Lnext == eDst), the old face is reduced to a single edge.\n\t\t* If (eOrg->Lnext->Lnext == eDst), the old face is reduced to two edges.\n\t\t*/\n\n\t\t// TESShalfEdge *tessMeshConnect( TESSmesh *mesh, TESShalfEdge *eOrg, TESShalfEdge *eDst );\n\t\tconnect: function(eOrg, eDst) {\n\t\t\tvar joiningLoops = false;  \n\t\t\tvar eNew = this.makeEdge_( eOrg );\n\t\t\tvar eNewSym = eNew.Sym;\n\n\t\t\tif( eDst.Lface !== eOrg.Lface ) {\n\t\t\t\t/* We are connecting two disjoint loops -- destroy eDst->Lface */\n\t\t\t\tjoiningLoops = true;\n\t\t\t\tthis.killFace_( eDst.Lface, eOrg.Lface );\n\t\t\t}\n\n\t\t\t/* Connect the new edge appropriately */\n\t\t\tthis.splice_( eNew, eOrg.Lnext );\n\t\t\tthis.splice_( eNewSym, eDst );\n\n\t\t\t/* Set the vertex and face information */\n\t\t\teNew.Org = eOrg.Dst;\n\t\t\teNewSym.Org = eDst.Org;\n\t\t\teNew.Lface = eNewSym.Lface = eOrg.Lface;\n\n\t\t\t/* Make sure the old face points to a valid half-edge */\n\t\t\teOrg.Lface.anEdge = eNewSym;\n\n\t\t\tif( ! joiningLoops ) {\n\t\t\t\tvar newFace = new TESSface();\n\t\t\t\t/* We split one loop into two -- the new loop is eNew->Lface */\n\t\t\t\tthis.makeFace_( newFace, eNew, eOrg.Lface );\n\t\t\t}\n\t\t\treturn eNew;\n\t\t},\n\n\t\t/* tessMeshZapFace( fZap ) destroys a face and removes it from the\n\t\t* global face list.  All edges of fZap will have a NULL pointer as their\n\t\t* left face.  Any edges which also have a NULL pointer as their right face\n\t\t* are deleted entirely (along with any isolated vertices this produces).\n\t\t* An entire mesh can be deleted by zapping its faces, one at a time,\n\t\t* in any order.  Zapped faces cannot be used in further mesh operations!\n\t\t*/\n\t\tzapFace: function( fZap )\n\t\t{\n\t\t\tvar eStart = fZap.anEdge;\n\t\t\tvar e, eNext, eSym;\n\t\t\tvar fPrev, fNext;\n\n\t\t\t/* walk around face, deleting edges whose right face is also NULL */\n\t\t\teNext = eStart.Lnext;\n\t\t\tdo {\n\t\t\t\te = eNext;\n\t\t\t\teNext = e.Lnext;\n\n\t\t\t\te.Lface = null;\n\t\t\t\tif( e.Rface === null ) {\n\t\t\t\t\t/* delete the edge -- see TESSmeshDelete above */\n\n\t\t\t\t\tif( e.Onext === e ) {\n\t\t\t\t\t\tthis.killVertex_( e.Org, null );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/* Make sure that e->Org points to a valid half-edge */\n\t\t\t\t\t\te.Org.anEdge = e.Onext;\n\t\t\t\t\t\tthis.splice_( e, e.Oprev );\n\t\t\t\t\t}\n\t\t\t\t\teSym = e.Sym;\n\t\t\t\t\tif( eSym.Onext === eSym ) {\n\t\t\t\t\t\tthis.killVertex_( eSym.Org, null );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/* Make sure that eSym->Org points to a valid half-edge */\n\t\t\t\t\t\teSym.Org.anEdge = eSym.Onext;\n\t\t\t\t\t\tthis.splice_( eSym, eSym.Oprev );\n\t\t\t\t\t}\n\t\t\t\t\tthis.killEdge_( e );\n\t\t\t\t}\n\t\t\t} while( e != eStart );\n\n\t\t\t/* delete from circular doubly-linked list */\n\t\t\tfPrev = fZap.prev;\n\t\t\tfNext = fZap.next;\n\t\t\tfNext.prev = fPrev;\n\t\t\tfPrev.next = fNext;\n\t\t},\n\n\t\tcountFaceVerts_: function(f) {\n\t\t\tvar eCur = f.anEdge;\n\t\t\tvar n = 0;\n\t\t\tdo\n\t\t\t{\n\t\t\t\tn++;\n\t\t\t\teCur = eCur.Lnext;\n\t\t\t}\n\t\t\twhile (eCur !== f.anEdge);\n\t\t\treturn n;\n\t\t},\n\n\t\t//int tessMeshMergeConvexFaces( TESSmesh *mesh, int maxVertsPerFace )\n\t\tmergeConvexFaces: function(maxVertsPerFace) {\n\t\t\tvar f;\n\t\t\tvar eCur, eNext, eSym;\n\t\t\tvar vStart;\n\t\t\tvar curNv, symNv;\n\n\t\t\tfor( f = this.fHead.next; f !== this.fHead; f = f.next )\n\t\t\t{\n\t\t\t\t// Skip faces which are outside the result.\n\t\t\t\tif( !f.inside )\n\t\t\t\t\tcontinue;\n\n\t\t\t\teCur = f.anEdge;\n\t\t\t\tvStart = eCur.Org;\n\t\t\t\t\t\n\t\t\t\twhile (true)\n\t\t\t\t{\n\t\t\t\t\teNext = eCur.Lnext;\n\t\t\t\t\teSym = eCur.Sym;\n\n\t\t\t\t\t// Try to merge if the neighbour face is valid.\n\t\t\t\t\tif( eSym && eSym.Lface && eSym.Lface.inside )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Try to merge the neighbour faces if the resulting polygons\n\t\t\t\t\t\t// does not exceed maximum number of vertices.\n\t\t\t\t\t\tcurNv = this.countFaceVerts_( f );\n\t\t\t\t\t\tsymNv = this.countFaceVerts_( eSym.Lface );\n\t\t\t\t\t\tif( (curNv+symNv-2) <= maxVertsPerFace )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Merge if the resulting poly is convex.\n\t\t\t\t\t\t\tif( Geom.vertCCW( eCur.Lprev.Org, eCur.Org, eSym.Lnext.Lnext.Org ) &&\n\t\t\t\t\t\t\t\tGeom.vertCCW( eSym.Lprev.Org, eSym.Org, eCur.Lnext.Lnext.Org ) )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\teNext = eSym.Lnext;\n\t\t\t\t\t\t\t\tthis.delete( eSym );\n\t\t\t\t\t\t\t\teCur = null;\n\t\t\t\t\t\t\t\teSym = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif( eCur && eCur.Lnext.Org === vStart )\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\t// Continue to next edge.\n\t\t\t\t\teCur = eNext;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn true;\n\t\t},\n\n\t\t/* tessMeshCheckMesh( mesh ) checks a mesh for self-consistency.\n\t\t*/\n\t\tcheck: function() {\n\t\t\tvar fHead = this.fHead;\n\t\t\tvar vHead = this.vHead;\n\t\t\tvar eHead = this.eHead;\n\t\t\tvar f, fPrev, v, vPrev, e, ePrev;\n\n\t\t\tfPrev = fHead;\n\t\t\tfor( fPrev = fHead ; (f = fPrev.next) !== fHead; fPrev = f) {\n\t\t\t\tassert( f.prev === fPrev );\n\t\t\t\te = f.anEdge;\n\t\t\t\tdo {\n\t\t\t\t\tassert( e.Sym !== e );\n\t\t\t\t\tassert( e.Sym.Sym === e );\n\t\t\t\t\tassert( e.Lnext.Onext.Sym === e );\n\t\t\t\t\tassert( e.Onext.Sym.Lnext === e );\n\t\t\t\t\tassert( e.Lface === f );\n\t\t\t\t\te = e.Lnext;\n\t\t\t\t} while( e !== f.anEdge );\n\t\t\t}\n\t\t\tassert( f.prev === fPrev && f.anEdge === null );\n\n\t\t\tvPrev = vHead;\n\t\t\tfor( vPrev = vHead ; (v = vPrev.next) !== vHead; vPrev = v) {\n\t\t\t\tassert( v.prev === vPrev );\n\t\t\t\te = v.anEdge;\n\t\t\t\tdo {\n\t\t\t\t\tassert( e.Sym !== e );\n\t\t\t\t\tassert( e.Sym.Sym === e );\n\t\t\t\t\tassert( e.Lnext.Onext.Sym === e );\n\t\t\t\t\tassert( e.Onext.Sym.Lnext === e );\n\t\t\t\t\tassert( e.Org === v );\n\t\t\t\t\te = e.Onext;\n\t\t\t\t} while( e !== v.anEdge );\n\t\t\t}\n\t\t\tassert( v.prev === vPrev && v.anEdge === null );\n\n\t\t\tePrev = eHead;\n\t\t\tfor( ePrev = eHead ; (e = ePrev.next) !== eHead; ePrev = e) {\n\t\t\t\tassert( e.Sym.next === ePrev.Sym );\n\t\t\t\tassert( e.Sym !== e );\n\t\t\t\tassert( e.Sym.Sym === e );\n\t\t\t\tassert( e.Org !== null );\n\t\t\t\tassert( e.Dst !== null );\n\t\t\t\tassert( e.Lnext.Onext.Sym === e );\n\t\t\t\tassert( e.Onext.Sym.Lnext === e );\n\t\t\t}\n\t\t\tassert( e.Sym.next === ePrev.Sym\n\t\t\t\t&& e.Sym === this.eHeadSym\n\t\t\t\t&& e.Sym.Sym === e\n\t\t\t\t&& e.Org === null && e.Dst === null\n\t\t\t\t&& e.Lface === null && e.Rface === null );\n\t\t}\n\n\t};\n\n\tvar Geom = {};\n\n\tGeom.vertEq = function(u,v) {\n\t\treturn (u.s === v.s && u.t === v.t);\n\t};\n\n\t/* Returns TRUE if u is lexicographically <= v. */\n\tGeom.vertLeq = function(u,v) {\n\t\treturn ((u.s < v.s) || (u.s === v.s && u.t <= v.t));\n\t};\n\n\t/* Versions of VertLeq, EdgeSign, EdgeEval with s and t transposed. */\n\tGeom.transLeq = function(u,v) {\n\t\treturn ((u.t < v.t) || (u.t === v.t && u.s <= v.s));\n\t};\n\n\tGeom.edgeGoesLeft = function(e) {\n\t\treturn Geom.vertLeq( e.Dst, e.Org );\n\t};\n\n\tGeom.edgeGoesRight = function(e) {\n\t\treturn Geom.vertLeq( e.Org, e.Dst );\n\t};\n\n\tGeom.vertL1dist = function(u,v) {\n\t\treturn (Math.abs(u.s - v.s) + Math.abs(u.t - v.t));\n\t};\n\n\t//TESSreal tesedgeEval( TESSvertex *u, TESSvertex *v, TESSvertex *w )\n\tGeom.edgeEval = function( u, v, w ) {\n\t\t/* Given three vertices u,v,w such that VertLeq(u,v) && VertLeq(v,w),\n\t\t* evaluates the t-coord of the edge uw at the s-coord of the vertex v.\n\t\t* Returns v->t - (uw)(v->s), ie. the signed distance from uw to v.\n\t\t* If uw is vertical (and thus passes thru v), the result is zero.\n\t\t*\n\t\t* The calculation is extremely accurate and stable, even when v\n\t\t* is very close to u or w.  In particular if we set v->t = 0 and\n\t\t* let r be the negated result (this evaluates (uw)(v->s)), then\n\t\t* r is guaranteed to satisfy MIN(u->t,w->t) <= r <= MAX(u->t,w->t).\n\t\t*/\n\t\tassert( Geom.vertLeq( u, v ) && Geom.vertLeq( v, w ));\n\n\t\tvar gapL = v.s - u.s;\n\t\tvar gapR = w.s - v.s;\n\n\t\tif( gapL + gapR > 0.0 ) {\n\t\t\tif( gapL < gapR ) {\n\t\t\t\treturn (v.t - u.t) + (u.t - w.t) * (gapL / (gapL + gapR));\n\t\t\t} else {\n\t\t\t\treturn (v.t - w.t) + (w.t - u.t) * (gapR / (gapL + gapR));\n\t\t\t}\n\t\t}\n\t\t/* vertical line */\n\t\treturn 0.0;\n\t};\n\n\t//TESSreal tesedgeSign( TESSvertex *u, TESSvertex *v, TESSvertex *w )\n\tGeom.edgeSign = function( u, v, w ) {\n\t\t/* Returns a number whose sign matches EdgeEval(u,v,w) but which\n\t\t* is cheaper to evaluate.  Returns > 0, == 0 , or < 0\n\t\t* as v is above, on, or below the edge uw.\n\t\t*/\n\t\tassert( Geom.vertLeq( u, v ) && Geom.vertLeq( v, w ));\n\n\t\tvar gapL = v.s - u.s;\n\t\tvar gapR = w.s - v.s;\n\n\t\tif( gapL + gapR > 0.0 ) {\n\t\t\treturn (v.t - w.t) * gapL + (v.t - u.t) * gapR;\n\t\t}\n\t\t/* vertical line */\n\t\treturn 0.0;\n\t};\n\n\n\t/***********************************************************************\n\t* Define versions of EdgeSign, EdgeEval with s and t transposed.\n\t*/\n\n\t//TESSreal testransEval( TESSvertex *u, TESSvertex *v, TESSvertex *w )\n\tGeom.transEval = function( u, v, w ) {\n\t\t/* Given three vertices u,v,w such that TransLeq(u,v) && TransLeq(v,w),\n\t\t* evaluates the t-coord of the edge uw at the s-coord of the vertex v.\n\t\t* Returns v->s - (uw)(v->t), ie. the signed distance from uw to v.\n\t\t* If uw is vertical (and thus passes thru v), the result is zero.\n\t\t*\n\t\t* The calculation is extremely accurate and stable, even when v\n\t\t* is very close to u or w.  In particular if we set v->s = 0 and\n\t\t* let r be the negated result (this evaluates (uw)(v->t)), then\n\t\t* r is guaranteed to satisfy MIN(u->s,w->s) <= r <= MAX(u->s,w->s).\n\t\t*/\n\t\tassert( Geom.transLeq( u, v ) && Geom.transLeq( v, w ));\n\n\t\tvar gapL = v.t - u.t;\n\t\tvar gapR = w.t - v.t;\n\n\t\tif( gapL + gapR > 0.0 ) {\n\t\t\tif( gapL < gapR ) {\n\t\t\t\treturn (v.s - u.s) + (u.s - w.s) * (gapL / (gapL + gapR));\n\t\t\t} else {\n\t\t\t\treturn (v.s - w.s) + (w.s - u.s) * (gapR / (gapL + gapR));\n\t\t\t}\n\t\t}\n\t\t/* vertical line */\n\t\treturn 0.0;\n\t};\n\n\t//TESSreal testransSign( TESSvertex *u, TESSvertex *v, TESSvertex *w )\n\tGeom.transSign = function( u, v, w ) {\n\t\t/* Returns a number whose sign matches TransEval(u,v,w) but which\n\t\t* is cheaper to evaluate.  Returns > 0, == 0 , or < 0\n\t\t* as v is above, on, or below the edge uw.\n\t\t*/\n\t\tassert( Geom.transLeq( u, v ) && Geom.transLeq( v, w ));\n\n\t\tvar gapL = v.t - u.t;\n\t\tvar gapR = w.t - v.t;\n\n\t\tif( gapL + gapR > 0.0 ) {\n\t\t\treturn (v.s - w.s) * gapL + (v.s - u.s) * gapR;\n\t\t}\n\t\t/* vertical line */\n\t\treturn 0.0;\n\t};\n\n\n\t//int tesvertCCW( TESSvertex *u, TESSvertex *v, TESSvertex *w )\n\tGeom.vertCCW = function( u, v, w ) {\n\t\t/* For almost-degenerate situations, the results are not reliable.\n\t\t* Unless the floating-point arithmetic can be performed without\n\t\t* rounding errors, *any* implementation will give incorrect results\n\t\t* on some degenerate inputs, so the client must have some way to\n\t\t* handle this situation.\n\t\t*/\n\t\treturn (u.s*(v.t - w.t) + v.s*(w.t - u.t) + w.s*(u.t - v.t)) >= 0.0;\n\t};\n\n\t/* Given parameters a,x,b,y returns the value (b*x+a*y)/(a+b),\n\t* or (x+y)/2 if a==b==0.  It requires that a,b >= 0, and enforces\n\t* this in the rare case that one argument is slightly negative.\n\t* The implementation is extremely stable numerically.\n\t* In particular it guarantees that the result r satisfies\n\t* MIN(x,y) <= r <= MAX(x,y), and the results are very accurate\n\t* even when a and b differ greatly in magnitude.\n\t*/\n\tGeom.interpolate = function(a,x,b,y) {\n\t\treturn (a = (a < 0) ? 0 : a, b = (b < 0) ? 0 : b, ((a <= b) ? ((b == 0) ? ((x+y) / 2) : (x + (y-x) * (a/(a+b)))) : (y + (x-y) * (b/(a+b)))));\n\t};\n\n\t/*\n\t#ifndef FOR_TRITE_TEST_PROGRAM\n\t#define Interpolate(a,x,b,y)\tRealInterpolate(a,x,b,y)\n\t#else\n\n\t// Claim: the ONLY property the sweep algorithm relies on is that\n\t// MIN(x,y) <= r <= MAX(x,y).  This is a nasty way to test that.\n\t#include <stdlib.h>\n\textern int RandomInterpolate;\n\n\tdouble Interpolate( double a, double x, double b, double y)\n\t{\n\t\tprintf(\"*********************%d\\n\",RandomInterpolate);\n\t\tif( RandomInterpolate ) {\n\t\t\ta = 1.2 * drand48() - 0.1;\n\t\t\ta = (a < 0) ? 0 : ((a > 1) ? 1 : a);\n\t\t\tb = 1.0 - a;\n\t\t}\n\t\treturn RealInterpolate(a,x,b,y);\n\t}\n\t#endif*/\n\n\tGeom.intersect = function( o1, d1, o2, d2, v ) {\n\t\t/* Given edges (o1,d1) and (o2,d2), compute their point of intersection.\n\t\t* The computed point is guaranteed to lie in the intersection of the\n\t\t* bounding rectangles defined by each edge.\n\t\t*/\n\t\tvar z1, z2;\n\t\tvar t;\n\n\t\t/* This is certainly not the most efficient way to find the intersection\n\t\t* of two line segments, but it is very numerically stable.\n\t\t*\n\t\t* Strategy: find the two middle vertices in the VertLeq ordering,\n\t\t* and interpolate the intersection s-value from these.  Then repeat\n\t\t* using the TransLeq ordering to find the intersection t-value.\n\t\t*/\n\n\t\tif( ! Geom.vertLeq( o1, d1 )) { t = o1; o1 = d1; d1 = t; } //swap( o1, d1 ); }\n\t\tif( ! Geom.vertLeq( o2, d2 )) { t = o2; o2 = d2; d2 = t; } //swap( o2, d2 ); }\n\t\tif( ! Geom.vertLeq( o1, o2 )) { t = o1; o1 = o2; o2 = t; t = d1; d1 = d2; d2 = t; }//swap( o1, o2 ); swap( d1, d2 ); }\n\n\t\tif( ! Geom.vertLeq( o2, d1 )) {\n\t\t\t/* Technically, no intersection -- do our best */\n\t\t\tv.s = (o2.s + d1.s) / 2;\n\t\t} else if( Geom.vertLeq( d1, d2 )) {\n\t\t\t/* Interpolate between o2 and d1 */\n\t\t\tz1 = Geom.edgeEval( o1, o2, d1 );\n\t\t\tz2 = Geom.edgeEval( o2, d1, d2 );\n\t\t\tif( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }\n\t\t\tv.s = Geom.interpolate( z1, o2.s, z2, d1.s );\n\t\t} else {\n\t\t\t/* Interpolate between o2 and d2 */\n\t\t\tz1 = Geom.edgeSign( o1, o2, d1 );\n\t\t\tz2 = -Geom.edgeSign( o1, d2, d1 );\n\t\t\tif( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }\n\t\t\tv.s = Geom.interpolate( z1, o2.s, z2, d2.s );\n\t\t}\n\n\t\t/* Now repeat the process for t */\n\n\t\tif( ! Geom.transLeq( o1, d1 )) { t = o1; o1 = d1; d1 = t; } //swap( o1, d1 ); }\n\t\tif( ! Geom.transLeq( o2, d2 )) { t = o2; o2 = d2; d2 = t; } //swap( o2, d2 ); }\n\t\tif( ! Geom.transLeq( o1, o2 )) { t = o1; o1 = o2; o2 = t; t = d1; d1 = d2; d2 = t; } //swap( o1, o2 ); swap( d1, d2 ); }\n\n\t\tif( ! Geom.transLeq( o2, d1 )) {\n\t\t\t/* Technically, no intersection -- do our best */\n\t\t\tv.t = (o2.t + d1.t) / 2;\n\t\t} else if( Geom.transLeq( d1, d2 )) {\n\t\t\t/* Interpolate between o2 and d1 */\n\t\t\tz1 = Geom.transEval( o1, o2, d1 );\n\t\t\tz2 = Geom.transEval( o2, d1, d2 );\n\t\t\tif( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }\n\t\t\tv.t = Geom.interpolate( z1, o2.t, z2, d1.t );\n\t\t} else {\n\t\t\t/* Interpolate between o2 and d2 */\n\t\t\tz1 = Geom.transSign( o1, o2, d1 );\n\t\t\tz2 = -Geom.transSign( o1, d2, d1 );\n\t\t\tif( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }\n\t\t\tv.t = Geom.interpolate( z1, o2.t, z2, d2.t );\n\t\t}\n\t};\n\n\n\n\tfunction DictNode() {\n\t\tthis.key = null;\n\t\tthis.next = null;\n\t\tthis.prev = null;\n\t};\n\n\tfunction Dict(frame, leq) {\n\t\tthis.head = new DictNode();\n\t\tthis.head.next = this.head;\n\t\tthis.head.prev = this.head;\n\t\tthis.frame = frame;\n\t\tthis.leq = leq;\n\t};\n\n\tDict.prototype = {\n\t\tmin: function() {\n\t\t\treturn this.head.next;\n\t\t},\n\n\t\tmax: function() {\n\t\t\treturn this.head.prev;\n\t\t},\n\n\t\tinsert: function(k) {\n\t\t\treturn this.insertBefore(this.head, k);\n\t\t},\n\n\t\tsearch: function(key) {\n\t\t\t/* Search returns the node with the smallest key greater than or equal\n\t\t\t* to the given key.  If there is no such key, returns a node whose\n\t\t\t* key is NULL.  Similarly, Succ(Max(d)) has a NULL key, etc.\n\t\t\t*/\n\t\t\tvar node = this.head;\n\t\t\tdo {\n\t\t\t\tnode = node.next;\n\t\t\t} while( node.key !== null && ! this.leq(this.frame, key, node.key));\n\n\t\t\treturn node;\n\t\t},\n\n\t\tinsertBefore: function(node, key) {\n\t\t\tdo {\n\t\t\t\tnode = node.prev;\n\t\t\t} while( node.key !== null && ! this.leq(this.frame, node.key, key));\n\n\t\t\tvar newNode = new DictNode();\n\t\t\tnewNode.key = key;\n\t\t\tnewNode.next = node.next;\n\t\t\tnode.next.prev = newNode;\n\t\t\tnewNode.prev = node;\n\t\t\tnode.next = newNode;\n\n\t\t\treturn newNode;\n\t\t},\n\n\t\tdelete: function(node) {\n\t\t\tnode.next.prev = node.prev;\n\t\t\tnode.prev.next = node.next;\n\t\t}\n\t};\n\n\n\tfunction PQnode() {\n\t\tthis.handle = null;\n\t}\n\n\tfunction PQhandleElem() {\n\t\tthis.key = null;\n\t\tthis.node = null;\n\t}\n\n\tfunction PriorityQ(size, leq) {\n\t\tthis.size = 0;\n\t\tthis.max = size;\n\n\t\tthis.nodes = [];\n\t\tthis.nodes.length = size+1;\n\t\tfor (var i = 0; i < this.nodes.length; i++)\n\t\t\tthis.nodes[i] = new PQnode();\n\n\t\tthis.handles = [];\n\t\tthis.handles.length = size+1;\n\t\tfor (var i = 0; i < this.handles.length; i++)\n\t\t\tthis.handles[i] = new PQhandleElem();\n\n\t\tthis.initialized = false;\n\t\tthis.freeList = 0;\n\t\tthis.leq = leq;\n\n\t\tthis.nodes[1].handle = 1;\t/* so that Minimum() returns NULL */\n\t\tthis.handles[1].key = null;\n\t};\n\n\tPriorityQ.prototype = {\n\n\t\tfloatDown_: function( curr )\n\t\t{\n\t\t\tvar n = this.nodes;\n\t\t\tvar h = this.handles;\n\t\t\tvar hCurr, hChild;\n\t\t\tvar child;\n\n\t\t\thCurr = n[curr].handle;\n\t\t\tfor( ;; ) {\n\t\t\t\tchild = curr << 1;\n\t\t\t\tif( child < this.size && this.leq( h[n[child+1].handle].key, h[n[child].handle].key )) {\n\t\t\t\t\t++child;\n\t\t\t\t}\n\n\t\t\t\tassert(child <= this.max);\n\n\t\t\t\thChild = n[child].handle;\n\t\t\t\tif( child > this.size || this.leq( h[hCurr].key, h[hChild].key )) {\n\t\t\t\t\tn[curr].handle = hCurr;\n\t\t\t\t\th[hCurr].node = curr;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tn[curr].handle = hChild;\n\t\t\t\th[hChild].node = curr;\n\t\t\t\tcurr = child;\n\t\t\t}\n\t\t},\n\n\t\tfloatUp_: function( curr )\n\t\t{\n\t\t\tvar n = this.nodes;\n\t\t\tvar h = this.handles;\n\t\t\tvar hCurr, hParent;\n\t\t\tvar parent;\n\n\t\t\thCurr = n[curr].handle;\n\t\t\tfor( ;; ) {\n\t\t\t\tparent = curr >> 1;\n\t\t\t\thParent = n[parent].handle;\n\t\t\t\tif( parent == 0 || this.leq( h[hParent].key, h[hCurr].key )) {\n\t\t\t\t\tn[curr].handle = hCurr;\n\t\t\t\t\th[hCurr].node = curr;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tn[curr].handle = hParent;\n\t\t\t\th[hParent].node = curr;\n\t\t\t\tcurr = parent;\n\t\t\t}\n\t\t},\n\n\t\tinit: function() {\n\t\t\t/* This method of building a heap is O(n), rather than O(n lg n). */\n\t\t\tfor( var i = this.size; i >= 1; --i ) {\n\t\t\t\tthis.floatDown_( i );\n\t\t\t}\n\t\t\tthis.initialized = true;\n\t\t},\n\n\t\tmin: function() {\n\t\t\treturn this.handles[this.nodes[1].handle].key;\n\t\t},\n\n\t\tisEmpty: function() {\n\t\t\tthis.size === 0;\n\t\t},\n\n\t\t/* really pqHeapInsert */\n\t\t/* returns INV_HANDLE iff out of memory */\n\t\t//PQhandle pqHeapInsert( TESSalloc* alloc, PriorityQHeap *pq, PQkey keyNew )\n\t\tinsert: function(keyNew)\n\t\t{\n\t\t\tvar curr;\n\t\t\tvar free;\n\n\t\t\tcurr = ++this.size;\n\t\t\tif( (curr*2) > this.max ) {\n\t\t\t\tthis.max *= 2;\n\t\t\t\tvar s;\n\t\t\t\ts = this.nodes.length;\n\t\t\t\tthis.nodes.length = this.max+1;\n\t\t\t\tfor (var i = s; i < this.nodes.length; i++)\n\t\t\t\t\tthis.nodes[i] = new PQnode();\n\n\t\t\t\ts = this.handles.length;\n\t\t\t\tthis.handles.length = this.max+1;\n\t\t\t\tfor (var i = s; i < this.handles.length; i++)\n\t\t\t\t\tthis.handles[i] = new PQhandleElem();\n\t\t\t}\n\n\t\t\tif( this.freeList === 0 ) {\n\t\t\t\tfree = curr;\n\t\t\t} else {\n\t\t\t\tfree = this.freeList;\n\t\t\t\tthis.freeList = this.handles[free].node;\n\t\t\t}\n\n\t\t\tthis.nodes[curr].handle = free;\n\t\t\tthis.handles[free].node = curr;\n\t\t\tthis.handles[free].key = keyNew;\n\n\t\t\tif( this.initialized ) {\n\t\t\t\tthis.floatUp_( curr );\n\t\t\t}\n\t\t\treturn free;\n\t\t},\n\n\t\t//PQkey pqHeapExtractMin( PriorityQHeap *pq )\n\t\textractMin: function() {\n\t\t\tvar n = this.nodes;\n\t\t\tvar h = this.handles;\n\t\t\tvar hMin = n[1].handle;\n\t\t\tvar min = h[hMin].key;\n\n\t\t\tif( this.size > 0 ) {\n\t\t\t\tn[1].handle = n[this.size].handle;\n\t\t\t\th[n[1].handle].node = 1;\n\n\t\t\t\th[hMin].key = null;\n\t\t\t\th[hMin].node = this.freeList;\n\t\t\t\tthis.freeList = hMin;\n\n\t\t\t\t--this.size;\n\t\t\t\tif( this.size > 0 ) {\n\t\t\t\t\tthis.floatDown_( 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn min;\n\t\t},\n\n\t\tdelete: function( hCurr ) {\n\t\t\tvar n = this.nodes;\n\t\t\tvar h = this.handles;\n\t\t\tvar curr;\n\n\t\t\tassert( hCurr >= 1 && hCurr <= this.max && h[hCurr].key !== null );\n\n\t\t\tcurr = h[hCurr].node;\n\t\t\tn[curr].handle = n[this.size].handle;\n\t\t\th[n[curr].handle].node = curr;\n\n\t\t\t--this.size;\n\t\t\tif( curr <= this.size ) {\n\t\t\t\tif( curr <= 1 || this.leq( h[n[curr>>1].handle].key, h[n[curr].handle].key )) {\n\t\t\t\t\tthis.floatDown_( curr );\n\t\t\t\t} else {\n\t\t\t\t\tthis.floatUp_( curr );\n\t\t\t\t}\n\t\t\t}\n\t\t\th[hCurr].key = null;\n\t\t\th[hCurr].node = this.freeList;\n\t\t\tthis.freeList = hCurr;\n\t\t}\n\t};\n\n\n\t/* For each pair of adjacent edges crossing the sweep line, there is\n\t* an ActiveRegion to represent the region between them.  The active\n\t* regions are kept in sorted order in a dynamic dictionary.  As the\n\t* sweep line crosses each vertex, we update the affected regions.\n\t*/\n\n\tfunction ActiveRegion() {\n\t\tthis.eUp = null;\t\t/* upper edge, directed right to left */\n\t\tthis.nodeUp = null;\t/* dictionary node corresponding to eUp */\n\t\tthis.windingNumber = 0;\t/* used to determine which regions are\n\t\t\t\t\t\t\t\t* inside the polygon */\n\t\tthis.inside = false;\t\t/* is this region inside the polygon? */\n\t\tthis.sentinel = false;\t/* marks fake edges at t = +/-infinity */\n\t\tthis.dirty = false;\t\t/* marks regions where the upper or lower\n\t\t\t\t\t\t* edge has changed, but we haven't checked\n\t\t\t\t\t\t* whether they intersect yet */\n\t\tthis.fixUpperEdge = false;\t/* marks temporary edges introduced when\n\t\t\t\t\t\t\t* we process a \"right vertex\" (one without\n\t\t\t\t\t\t\t* any edges leaving to the right) */\n\t};\n\n\tvar Sweep = {};\n\n\tSweep.regionBelow = function(r) {\n\t\treturn r.nodeUp.prev.key;\n\t}\n\n\tSweep.regionAbove = function(r) {\n\t\treturn r.nodeUp.next.key;\n\t}\n\n\tSweep.debugEvent = function( tess ) {\n\t\t// empty\n\t}\n\n\n\t/*\n\t* Invariants for the Edge Dictionary.\n\t* - each pair of adjacent edges e2=Succ(e1) satisfies EdgeLeq(e1,e2)\n\t*   at any valid location of the sweep event\n\t* - if EdgeLeq(e2,e1) as well (at any valid sweep event), then e1 and e2\n\t*   share a common endpoint\n\t* - for each e, e->Dst has been processed, but not e->Org\n\t* - each edge e satisfies VertLeq(e->Dst,event) && VertLeq(event,e->Org)\n\t*   where \"event\" is the current sweep line event.\n\t* - no edge e has zero length\n\t*\n\t* Invariants for the Mesh (the processed portion).\n\t* - the portion of the mesh left of the sweep line is a planar graph,\n\t*   ie. there is *some* way to embed it in the plane\n\t* - no processed edge has zero length\n\t* - no two processed vertices have identical coordinates\n\t* - each \"inside\" region is monotone, ie. can be broken into two chains\n\t*   of monotonically increasing vertices according to VertLeq(v1,v2)\n\t*   - a non-invariant: these chains may intersect (very slightly)\n\t*\n\t* Invariants for the Sweep.\n\t* - if none of the edges incident to the event vertex have an activeRegion\n\t*   (ie. none of these edges are in the edge dictionary), then the vertex\n\t*   has only right-going edges.\n\t* - if an edge is marked \"fixUpperEdge\" (it is a temporary edge introduced\n\t*   by ConnectRightVertex), then it is the only right-going edge from\n\t*   its associated vertex.  (This says that these edges exist only\n\t*   when it is necessary.)\n\t*/\n\n\t/* When we merge two edges into one, we need to compute the combined\n\t* winding of the new edge.\n\t*/\n\tSweep.addWinding = function(eDst,eSrc) {\n\t\teDst.winding += eSrc.winding;\n\t\teDst.Sym.winding += eSrc.Sym.winding;\n\t}\n\n\n\t//static int EdgeLeq( TESStesselator *tess, ActiveRegion *reg1, ActiveRegion *reg2 )\n\tSweep.edgeLeq = function( tess, reg1, reg2 ) {\n\t\t/*\n\t\t* Both edges must be directed from right to left (this is the canonical\n\t\t* direction for the upper edge of each region).\n\t\t*\n\t\t* The strategy is to evaluate a \"t\" value for each edge at the\n\t\t* current sweep line position, given by tess->event.  The calculations\n\t\t* are designed to be very stable, but of course they are not perfect.\n\t\t*\n\t\t* Special case: if both edge destinations are at the sweep event,\n\t\t* we sort the edges by slope (they would otherwise compare equally).\n\t\t*/\n\t\tvar ev = tess.event;\n\t\tvar t1, t2;\n\n\t\tvar e1 = reg1.eUp;\n\t\tvar e2 = reg2.eUp;\n\n\t\tif( e1.Dst === ev ) {\n\t\t\tif( e2.Dst === ev ) {\n\t\t\t\t/* Two edges right of the sweep line which meet at the sweep event.\n\t\t\t\t* Sort them by slope.\n\t\t\t\t*/\n\t\t\t\tif( Geom.vertLeq( e1.Org, e2.Org )) {\n\t\t\t\t\treturn Geom.edgeSign( e2.Dst, e1.Org, e2.Org ) <= 0;\n\t\t\t\t}\n\t\t\t\treturn Geom.edgeSign( e1.Dst, e2.Org, e1.Org ) >= 0;\n\t\t\t}\n\t\t\treturn Geom.edgeSign( e2.Dst, ev, e2.Org ) <= 0;\n\t\t}\n\t\tif( e2.Dst === ev ) {\n\t\t\treturn Geom.edgeSign( e1.Dst, ev, e1.Org ) >= 0;\n\t\t}\n\n\t\t/* General case - compute signed distance *from* e1, e2 to event */\n\t\tvar t1 = Geom.edgeEval( e1.Dst, ev, e1.Org );\n\t\tvar t2 = Geom.edgeEval( e2.Dst, ev, e2.Org );\n\t\treturn (t1 >= t2);\n\t}\n\n\n\t//static void DeleteRegion( TESStesselator *tess, ActiveRegion *reg )\n\tSweep.deleteRegion = function( tess, reg ) {\n\t\tif( reg.fixUpperEdge ) {\n\t\t\t/* It was created with zero winding number, so it better be\n\t\t\t* deleted with zero winding number (ie. it better not get merged\n\t\t\t* with a real edge).\n\t\t\t*/\n\t\t\tassert( reg.eUp.winding === 0 );\n\t\t}\n\t\treg.eUp.activeRegion = null;\n\t\ttess.dict.delete( reg.nodeUp );\n\t}\n\n\t//static int FixUpperEdge( TESStesselator *tess, ActiveRegion *reg, TESShalfEdge *newEdge )\n\tSweep.fixUpperEdge = function( tess, reg, newEdge ) {\n\t\t/*\n\t\t* Replace an upper edge which needs fixing (see ConnectRightVertex).\n\t\t*/\n\t\tassert( reg.fixUpperEdge );\n\t\ttess.mesh.delete( reg.eUp );\n\t\treg.fixUpperEdge = false;\n\t\treg.eUp = newEdge;\n\t\tnewEdge.activeRegion = reg;\n\t}\n\n\t//static ActiveRegion *TopLeftRegion( TESStesselator *tess, ActiveRegion *reg )\n\tSweep.topLeftRegion = function( tess, reg ) {\n\t\tvar org = reg.eUp.Org;\n\t\tvar e;\n\n\t\t/* Find the region above the uppermost edge with the same origin */\n\t\tdo {\n\t\t\treg = Sweep.regionAbove( reg );\n\t\t} while( reg.eUp.Org === org );\n\n\t\t/* If the edge above was a temporary edge introduced by ConnectRightVertex,\n\t\t* now is the time to fix it.\n\t\t*/\n\t\tif( reg.fixUpperEdge ) {\n\t\t\te = tess.mesh.connect( Sweep.regionBelow(reg).eUp.Sym, reg.eUp.Lnext );\n\t\t\tif (e === null) return null;\n\t\t\tSweep.fixUpperEdge( tess, reg, e );\n\t\t\treg = Sweep.regionAbove( reg );\n\t\t}\n\t\treturn reg;\n\t}\n\n\t//static ActiveRegion *TopRightRegion( ActiveRegion *reg )\n\tSweep.topRightRegion = function( reg )\n\t{\n\t\tvar dst = reg.eUp.Dst;\n\t\tvar reg = null;\n\t\t/* Find the region above the uppermost edge with the same destination */\n\t\tdo {\n\t\t\treg = Sweep.regionAbove( reg );\n\t\t} while( reg.eUp.Dst === dst );\n\t\treturn reg;\n\t}\n\n\t//static ActiveRegion *AddRegionBelow( TESStesselator *tess, ActiveRegion *regAbove, TESShalfEdge *eNewUp )\n\tSweep.addRegionBelow = function( tess, regAbove, eNewUp ) {\n\t\t/*\n\t\t* Add a new active region to the sweep line, *somewhere* below \"regAbove\"\n\t\t* (according to where the new edge belongs in the sweep-line dictionary).\n\t\t* The upper edge of the new region will be \"eNewUp\".\n\t\t* Winding number and \"inside\" flag are not updated.\n\t\t*/\n\t\tvar regNew = new ActiveRegion();\n\t\tregNew.eUp = eNewUp;\n\t\tregNew.nodeUp = tess.dict.insertBefore( regAbove.nodeUp, regNew );\n\t//\tif (regNew->nodeUp == NULL) longjmp(tess->env,1);\n\t\tregNew.fixUpperEdge = false;\n\t\tregNew.sentinel = false;\n\t\tregNew.dirty = false;\n\n\t\teNewUp.activeRegion = regNew;\n\t\treturn regNew;\n\t}\n\n\t//static int IsWindingInside( TESStesselator *tess, int n )\n\tSweep.isWindingInside = function( tess, n ) {\n\t\tswitch( tess.windingRule ) {\n\t\t\tcase Tess2.WINDING_ODD:\n\t\t\t\treturn (n & 1) != 0;\n\t\t\tcase Tess2.WINDING_NONZERO:\n\t\t\t\treturn (n != 0);\n\t\t\tcase Tess2.WINDING_POSITIVE:\n\t\t\t\treturn (n > 0);\n\t\t\tcase Tess2.WINDING_NEGATIVE:\n\t\t\t\treturn (n < 0);\n\t\t\tcase Tess2.WINDING_ABS_GEQ_TWO:\n\t\t\t\treturn (n >= 2) || (n <= -2);\n\t\t}\n\t\tassert( false );\n\t\treturn false;\n\t}\n\n\t//static void ComputeWinding( TESStesselator *tess, ActiveRegion *reg )\n\tSweep.computeWinding = function( tess, reg ) {\n\t\treg.windingNumber = Sweep.regionAbove(reg).windingNumber + reg.eUp.winding;\n\t\treg.inside = Sweep.isWindingInside( tess, reg.windingNumber );\n\t}\n\n\n\t//static void FinishRegion( TESStesselator *tess, ActiveRegion *reg )\n\tSweep.finishRegion = function( tess, reg ) {\n\t\t/*\n\t\t* Delete a region from the sweep line.  This happens when the upper\n\t\t* and lower chains of a region meet (at a vertex on the sweep line).\n\t\t* The \"inside\" flag is copied to the appropriate mesh face (we could\n\t\t* not do this before -- since the structure of the mesh is always\n\t\t* changing, this face may not have even existed until now).\n\t\t*/\n\t\tvar e = reg.eUp;\n\t\tvar f = e.Lface;\n\n\t\tf.inside = reg.inside;\n\t\tf.anEdge = e;   /* optimization for tessMeshTessellateMonoRegion() */\n\t\tSweep.deleteRegion( tess, reg );\n\t}\n\n\n\t//static TESShalfEdge *FinishLeftRegions( TESStesselator *tess, ActiveRegion *regFirst, ActiveRegion *regLast )\n\tSweep.finishLeftRegions = function( tess, regFirst, regLast ) {\n\t\t/*\n\t\t* We are given a vertex with one or more left-going edges.  All affected\n\t\t* edges should be in the edge dictionary.  Starting at regFirst->eUp,\n\t\t* we walk down deleting all regions where both edges have the same\n\t\t* origin vOrg.  At the same time we copy the \"inside\" flag from the\n\t\t* active region to the face, since at this point each face will belong\n\t\t* to at most one region (this was not necessarily true until this point\n\t\t* in the sweep).  The walk stops at the region above regLast; if regLast\n\t\t* is NULL we walk as far as possible.  At the same time we relink the\n\t\t* mesh if necessary, so that the ordering of edges around vOrg is the\n\t\t* same as in the dictionary.\n\t\t*/\n\t\tvar e, ePrev;\n\t\tvar reg = null;\n\t\tvar regPrev = regFirst;\n\t\tvar ePrev = regFirst.eUp;\n\t\twhile( regPrev !== regLast ) {\n\t\t\tregPrev.fixUpperEdge = false;\t/* placement was OK */\n\t\t\treg = Sweep.regionBelow( regPrev );\n\t\t\te = reg.eUp;\n\t\t\tif( e.Org != ePrev.Org ) {\n\t\t\t\tif( ! reg.fixUpperEdge ) {\n\t\t\t\t\t/* Remove the last left-going edge.  Even though there are no further\n\t\t\t\t\t* edges in the dictionary with this origin, there may be further\n\t\t\t\t\t* such edges in the mesh (if we are adding left edges to a vertex\n\t\t\t\t\t* that has already been processed).  Thus it is important to call\n\t\t\t\t\t* FinishRegion rather than just DeleteRegion.\n\t\t\t\t\t*/\n\t\t\t\t\tSweep.finishRegion( tess, regPrev );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t/* If the edge below was a temporary edge introduced by\n\t\t\t\t* ConnectRightVertex, now is the time to fix it.\n\t\t\t\t*/\n\t\t\t\te = tess.mesh.connect( ePrev.Lprev, e.Sym );\n\t//\t\t\tif (e == NULL) longjmp(tess->env,1);\n\t\t\t\tSweep.fixUpperEdge( tess, reg, e );\n\t\t\t}\n\n\t\t\t/* Relink edges so that ePrev->Onext == e */\n\t\t\tif( ePrev.Onext !== e ) {\n\t\t\t\ttess.mesh.splice( e.Oprev, e );\n\t\t\t\ttess.mesh.splice( ePrev, e );\n\t\t\t}\n\t\t\tSweep.finishRegion( tess, regPrev );\t/* may change reg->eUp */\n\t\t\tePrev = reg.eUp;\n\t\t\tregPrev = reg;\n\t\t}\n\t\treturn ePrev;\n\t}\n\n\n\t//static void AddRightEdges( TESStesselator *tess, ActiveRegion *regUp, TESShalfEdge *eFirst, TESShalfEdge *eLast, TESShalfEdge *eTopLeft, int cleanUp )\n\tSweep.addRightEdges = function( tess, regUp, eFirst, eLast, eTopLeft, cleanUp ) {\n\t\t/*\n\t\t* Purpose: insert right-going edges into the edge dictionary, and update\n\t\t* winding numbers and mesh connectivity appropriately.  All right-going\n\t\t* edges share a common origin vOrg.  Edges are inserted CCW starting at\n\t\t* eFirst; the last edge inserted is eLast->Oprev.  If vOrg has any\n\t\t* left-going edges already processed, then eTopLeft must be the edge\n\t\t* such that an imaginary upward vertical segment from vOrg would be\n\t\t* contained between eTopLeft->Oprev and eTopLeft; otherwise eTopLeft\n\t\t* should be NULL.\n\t\t*/\n\t\tvar reg, regPrev;\n\t\tvar e, ePrev;\n\t\tvar firstTime = true;\n\n\t\t/* Insert the new right-going edges in the dictionary */\n\t\te = eFirst;\n\t\tdo {\n\t\t\tassert( Geom.vertLeq( e.Org, e.Dst ));\n\t\t\tSweep.addRegionBelow( tess, regUp, e.Sym );\n\t\t\te = e.Onext;\n\t\t} while ( e !== eLast );\n\n\t\t/* Walk *all* right-going edges from e->Org, in the dictionary order,\n\t\t* updating the winding numbers of each region, and re-linking the mesh\n\t\t* edges to match the dictionary ordering (if necessary).\n\t\t*/\n\t\tif( eTopLeft === null ) {\n\t\t\teTopLeft = Sweep.regionBelow( regUp ).eUp.Rprev;\n\t\t}\n\t\tregPrev = regUp;\n\t\tePrev = eTopLeft;\n\t\tfor( ;; ) {\n\t\t\treg = Sweep.regionBelow( regPrev );\n\t\t\te = reg.eUp.Sym;\n\t\t\tif( e.Org !== ePrev.Org ) break;\n\n\t\t\tif( e.Onext !== ePrev ) {\n\t\t\t\t/* Unlink e from its current position, and relink below ePrev */\n\t\t\t\ttess.mesh.splice( e.Oprev, e );\n\t\t\t\ttess.mesh.splice( ePrev.Oprev, e );\n\t\t\t}\n\t\t\t/* Compute the winding number and \"inside\" flag for the new regions */\n\t\t\treg.windingNumber = regPrev.windingNumber - e.winding;\n\t\t\treg.inside = Sweep.isWindingInside( tess, reg.windingNumber );\n\n\t\t\t/* Check for two outgoing edges with same slope -- process these\n\t\t\t* before any intersection tests (see example in tessComputeInterior).\n\t\t\t*/\n\t\t\tregPrev.dirty = true;\n\t\t\tif( ! firstTime && Sweep.checkForRightSplice( tess, regPrev )) {\n\t\t\t\tSweep.addWinding( e, ePrev );\n\t\t\t\tSweep.deleteRegion( tess, regPrev );\n\t\t\t\ttess.mesh.delete( ePrev );\n\t\t\t}\n\t\t\tfirstTime = false;\n\t\t\tregPrev = reg;\n\t\t\tePrev = e;\n\t\t}\n\t\tregPrev.dirty = true;\n\t\tassert( regPrev.windingNumber - e.winding === reg.windingNumber );\n\n\t\tif( cleanUp ) {\n\t\t\t/* Check for intersections between newly adjacent edges. */\n\t\t\tSweep.walkDirtyRegions( tess, regPrev );\n\t\t}\n\t}\n\n\n\t//static void SpliceMergeVertices( TESStesselator *tess, TESShalfEdge *e1, TESShalfEdge *e2 )\n\tSweep.spliceMergeVertices = function( tess, e1, e2 ) {\n\t\t/*\n\t\t* Two vertices with idential coordinates are combined into one.\n\t\t* e1->Org is kept, while e2->Org is discarded.\n\t\t*/\n\t\ttess.mesh.splice( e1, e2 ); \n\t}\n\n\t//static void VertexWeights( TESSvertex *isect, TESSvertex *org, TESSvertex *dst, TESSreal *weights )\n\tSweep.vertexWeights = function( isect, org, dst ) {\n\t\t/*\n\t\t* Find some weights which describe how the intersection vertex is\n\t\t* a linear combination of \"org\" and \"dest\".  Each of the two edges\n\t\t* which generated \"isect\" is allocated 50% of the weight; each edge\n\t\t* splits the weight between its org and dst according to the\n\t\t* relative distance to \"isect\".\n\t\t*/\n\t\tvar t1 = Geom.vertL1dist( org, isect );\n\t\tvar t2 = Geom.vertL1dist( dst, isect );\n\t\tvar w0 = 0.5 * t2 / (t1 + t2);\n\t\tvar w1 = 0.5 * t1 / (t1 + t2);\n\t\tisect.coords[0] += w0*org.coords[0] + w1*dst.coords[0];\n\t\tisect.coords[1] += w0*org.coords[1] + w1*dst.coords[1];\n\t\tisect.coords[2] += w0*org.coords[2] + w1*dst.coords[2];\n\t}\n\n\n\t//static void GetIntersectData( TESStesselator *tess, TESSvertex *isect, TESSvertex *orgUp, TESSvertex *dstUp, TESSvertex *orgLo, TESSvertex *dstLo )\n\tSweep.getIntersectData = function( tess, isect, orgUp, dstUp, orgLo, dstLo ) {\n\t\t /*\n\t\t * We've computed a new intersection point, now we need a \"data\" pointer\n\t\t * from the user so that we can refer to this new vertex in the\n\t\t * rendering callbacks.\n\t\t */\n\t\tisect.coords[0] = isect.coords[1] = isect.coords[2] = 0;\n\t\tisect.idx = -1;\n\t\tSweep.vertexWeights( isect, orgUp, dstUp );\n\t\tSweep.vertexWeights( isect, orgLo, dstLo );\n\t}\n\n\t//static int CheckForRightSplice( TESStesselator *tess, ActiveRegion *regUp )\n\tSweep.checkForRightSplice = function( tess, regUp ) {\n\t\t/*\n\t\t* Check the upper and lower edge of \"regUp\", to make sure that the\n\t\t* eUp->Org is above eLo, or eLo->Org is below eUp (depending on which\n\t\t* origin is leftmost).\n\t\t*\n\t\t* The main purpose is to splice right-going edges with the same\n\t\t* dest vertex and nearly identical slopes (ie. we can't distinguish\n\t\t* the slopes numerically).  However the splicing can also help us\n\t\t* to recover from numerical errors.  For example, suppose at one\n\t\t* point we checked eUp and eLo, and decided that eUp->Org is barely\n\t\t* above eLo.  Then later, we split eLo into two edges (eg. from\n\t\t* a splice operation like this one).  This can change the result of\n\t\t* our test so that now eUp->Org is incident to eLo, or barely below it.\n\t\t* We must correct this condition to maintain the dictionary invariants.\n\t\t*\n\t\t* One possibility is to check these edges for intersection again\n\t\t* (ie. CheckForIntersect).  This is what we do if possible.  However\n\t\t* CheckForIntersect requires that tess->event lies between eUp and eLo,\n\t\t* so that it has something to fall back on when the intersection\n\t\t* calculation gives us an unusable answer.  So, for those cases where\n\t\t* we can't check for intersection, this routine fixes the problem\n\t\t* by just splicing the offending vertex into the other edge.\n\t\t* This is a guaranteed solution, no matter how degenerate things get.\n\t\t* Basically this is a combinatorial solution to a numerical problem.\n\t\t*/\n\t\tvar regLo = Sweep.regionBelow(regUp);\n\t\tvar eUp = regUp.eUp;\n\t\tvar eLo = regLo.eUp;\n\n\t\tif( Geom.vertLeq( eUp.Org, eLo.Org )) {\n\t\t\tif( Geom.edgeSign( eLo.Dst, eUp.Org, eLo.Org ) > 0 ) return false;\n\n\t\t\t/* eUp->Org appears to be below eLo */\n\t\t\tif( ! Geom.vertEq( eUp.Org, eLo.Org )) {\n\t\t\t\t/* Splice eUp->Org into eLo */\n\t\t\t\ttess.mesh.splitEdge( eLo.Sym );\n\t\t\t\ttess.mesh.splice( eUp, eLo.Oprev );\n\t\t\t\tregUp.dirty = regLo.dirty = true;\n\n\t\t\t} else if( eUp.Org !== eLo.Org ) {\n\t\t\t\t/* merge the two vertices, discarding eUp->Org */\n\t\t\t\ttess.pq.delete( eUp.Org.pqHandle );\n\t\t\t\tSweep.spliceMergeVertices( tess, eLo.Oprev, eUp );\n\t\t\t}\n\t\t} else {\n\t\t\tif( Geom.edgeSign( eUp.Dst, eLo.Org, eUp.Org ) < 0 ) return false;\n\n\t\t\t/* eLo->Org appears to be above eUp, so splice eLo->Org into eUp */\n\t\t\tSweep.regionAbove(regUp).dirty = regUp.dirty = true;\n\t\t\ttess.mesh.splitEdge( eUp.Sym );\n\t\t\ttess.mesh.splice( eLo.Oprev, eUp );\n\t\t}\n\t\treturn true;\n\t}\n\n\t//static int CheckForLeftSplice( TESStesselator *tess, ActiveRegion *regUp )\n\tSweep.checkForLeftSplice = function( tess, regUp ) {\n\t\t/*\n\t\t* Check the upper and lower edge of \"regUp\", to make sure that the\n\t\t* eUp->Dst is above eLo, or eLo->Dst is below eUp (depending on which\n\t\t* destination is rightmost).\n\t\t*\n\t\t* Theoretically, this should always be true.  However, splitting an edge\n\t\t* into two pieces can change the results of previous tests.  For example,\n\t\t* suppose at one point we checked eUp and eLo, and decided that eUp->Dst\n\t\t* is barely above eLo.  Then later, we split eLo into two edges (eg. from\n\t\t* a splice operation like this one).  This can change the result of\n\t\t* the test so that now eUp->Dst is incident to eLo, or barely below it.\n\t\t* We must correct this condition to maintain the dictionary invariants\n\t\t* (otherwise new edges might get inserted in the wrong place in the\n\t\t* dictionary, and bad stuff will happen).\n\t\t*\n\t\t* We fix the problem by just splicing the offending vertex into the\n\t\t* other edge.\n\t\t*/\n\t\tvar regLo = Sweep.regionBelow(regUp);\n\t\tvar eUp = regUp.eUp;\n\t\tvar eLo = regLo.eUp;\n\t\tvar e;\n\n\t\tassert( ! Geom.vertEq( eUp.Dst, eLo.Dst ));\n\n\t\tif( Geom.vertLeq( eUp.Dst, eLo.Dst )) {\n\t\t\tif( Geom.edgeSign( eUp.Dst, eLo.Dst, eUp.Org ) < 0 ) return false;\n\n\t\t\t/* eLo->Dst is above eUp, so splice eLo->Dst into eUp */\n\t\t\tSweep.regionAbove(regUp).dirty = regUp.dirty = true;\n\t\t\te = tess.mesh.splitEdge( eUp );\n\t\t\ttess.mesh.splice( eLo.Sym, e );\n\t\t\te.Lface.inside = regUp.inside;\n\t\t} else {\n\t\t\tif( Geom.edgeSign( eLo.Dst, eUp.Dst, eLo.Org ) > 0 ) return false;\n\n\t\t\t/* eUp->Dst is below eLo, so splice eUp->Dst into eLo */\n\t\t\tregUp.dirty = regLo.dirty = true;\n\t\t\te = tess.mesh.splitEdge( eLo );\n\t\t\ttess.mesh.splice( eUp.Lnext, eLo.Sym );\n\t\t\te.Rface.inside = regUp.inside;\n\t\t}\n\t\treturn true;\n\t}\n\n\n\t//static int CheckForIntersect( TESStesselator *tess, ActiveRegion *regUp )\n\tSweep.checkForIntersect = function( tess, regUp ) {\n\t\t/*\n\t\t* Check the upper and lower edges of the given region to see if\n\t\t* they intersect.  If so, create the intersection and add it\n\t\t* to the data structures.\n\t\t*\n\t\t* Returns TRUE if adding the new intersection resulted in a recursive\n\t\t* call to AddRightEdges(); in this case all \"dirty\" regions have been\n\t\t* checked for intersections, and possibly regUp has been deleted.\n\t\t*/\n\t\tvar regLo = Sweep.regionBelow(regUp);\n\t\tvar eUp = regUp.eUp;\n\t\tvar eLo = regLo.eUp;\n\t\tvar orgUp = eUp.Org;\n\t\tvar orgLo = eLo.Org;\n\t\tvar dstUp = eUp.Dst;\n\t\tvar dstLo = eLo.Dst;\n\t\tvar tMinUp, tMaxLo;\n\t\tvar isect = new TESSvertex, orgMin;\n\t\tvar e;\n\n\t\tassert( ! Geom.vertEq( dstLo, dstUp ));\n\t\tassert( Geom.edgeSign( dstUp, tess.event, orgUp ) <= 0 );\n\t\tassert( Geom.edgeSign( dstLo, tess.event, orgLo ) >= 0 );\n\t\tassert( orgUp !== tess.event && orgLo !== tess.event );\n\t\tassert( ! regUp.fixUpperEdge && ! regLo.fixUpperEdge );\n\n\t\tif( orgUp === orgLo ) return false;\t/* right endpoints are the same */\n\n\t\ttMinUp = Math.min( orgUp.t, dstUp.t );\n\t\ttMaxLo = Math.max( orgLo.t, dstLo.t );\n\t\tif( tMinUp > tMaxLo ) return false;\t/* t ranges do not overlap */\n\n\t\tif( Geom.vertLeq( orgUp, orgLo )) {\n\t\t\tif( Geom.edgeSign( dstLo, orgUp, orgLo ) > 0 ) return false;\n\t\t} else {\n\t\t\tif( Geom.edgeSign( dstUp, orgLo, orgUp ) < 0 ) return false;\n\t\t}\n\n\t\t/* At this point the edges intersect, at least marginally */\n\t\tSweep.debugEvent( tess );\n\n\t\tGeom.intersect( dstUp, orgUp, dstLo, orgLo, isect );\n\t\t/* The following properties are guaranteed: */\n\t\tassert( Math.min( orgUp.t, dstUp.t ) <= isect.t );\n\t\tassert( isect.t <= Math.max( orgLo.t, dstLo.t ));\n\t\tassert( Math.min( dstLo.s, dstUp.s ) <= isect.s );\n\t\tassert( isect.s <= Math.max( orgLo.s, orgUp.s ));\n\n\t\tif( Geom.vertLeq( isect, tess.event )) {\n\t\t\t/* The intersection point lies slightly to the left of the sweep line,\n\t\t\t* so move it until it''s slightly to the right of the sweep line.\n\t\t\t* (If we had perfect numerical precision, this would never happen\n\t\t\t* in the first place).  The easiest and safest thing to do is\n\t\t\t* replace the intersection by tess->event.\n\t\t\t*/\n\t\t\tisect.s = tess.event.s;\n\t\t\tisect.t = tess.event.t;\n\t\t}\n\t\t/* Similarly, if the computed intersection lies to the right of the\n\t\t* rightmost origin (which should rarely happen), it can cause\n\t\t* unbelievable inefficiency on sufficiently degenerate inputs.\n\t\t* (If you have the test program, try running test54.d with the\n\t\t* \"X zoom\" option turned on).\n\t\t*/\n\t\torgMin = Geom.vertLeq( orgUp, orgLo ) ? orgUp : orgLo;\n\t\tif( Geom.vertLeq( orgMin, isect )) {\n\t\t\tisect.s = orgMin.s;\n\t\t\tisect.t = orgMin.t;\n\t\t}\n\n\t\tif( Geom.vertEq( isect, orgUp ) || Geom.vertEq( isect, orgLo )) {\n\t\t\t/* Easy case -- intersection at one of the right endpoints */\n\t\t\tSweep.checkForRightSplice( tess, regUp );\n\t\t\treturn false;\n\t\t}\n\n\t\tif(    (! Geom.vertEq( dstUp, tess.event )\n\t\t\t&& Geom.edgeSign( dstUp, tess.event, isect ) >= 0)\n\t\t\t|| (! Geom.vertEq( dstLo, tess.event )\n\t\t\t&& Geom.edgeSign( dstLo, tess.event, isect ) <= 0 ))\n\t\t{\n\t\t\t/* Very unusual -- the new upper or lower edge would pass on the\n\t\t\t* wrong side of the sweep event, or through it.  This can happen\n\t\t\t* due to very small numerical errors in the intersection calculation.\n\t\t\t*/\n\t\t\tif( dstLo === tess.event ) {\n\t\t\t\t/* Splice dstLo into eUp, and process the new region(s) */\n\t\t\t\ttess.mesh.splitEdge( eUp.Sym );\n\t\t\t\ttess.mesh.splice( eLo.Sym, eUp );\n\t\t\t\tregUp = Sweep.topLeftRegion( tess, regUp );\n\t//\t\t\tif (regUp == NULL) longjmp(tess->env,1);\n\t\t\t\teUp = Sweep.regionBelow(regUp).eUp;\n\t\t\t\tSweep.finishLeftRegions( tess, Sweep.regionBelow(regUp), regLo );\n\t\t\t\tSweep.addRightEdges( tess, regUp, eUp.Oprev, eUp, eUp, true );\n\t\t\t\treturn TRUE;\n\t\t\t}\n\t\t\tif( dstUp === tess.event ) {\n\t\t\t\t/* Splice dstUp into eLo, and process the new region(s) */\n\t\t\t\ttess.mesh.splitEdge( eLo.Sym );\n\t\t\t\ttess.mesh.splice( eUp.Lnext, eLo.Oprev ); \n\t\t\t\tregLo = regUp;\n\t\t\t\tregUp = Sweep.topRightRegion( regUp );\n\t\t\t\te = Sweep.regionBelow(regUp).eUp.Rprev;\n\t\t\t\tregLo.eUp = eLo.Oprev;\n\t\t\t\teLo = Sweep.finishLeftRegions( tess, regLo, null );\n\t\t\t\tSweep.addRightEdges( tess, regUp, eLo.Onext, eUp.Rprev, e, true );\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t/* Special case: called from ConnectRightVertex.  If either\n\t\t\t* edge passes on the wrong side of tess->event, split it\n\t\t\t* (and wait for ConnectRightVertex to splice it appropriately).\n\t\t\t*/\n\t\t\tif( Geom.edgeSign( dstUp, tess.event, isect ) >= 0 ) {\n\t\t\t\tSweep.regionAbove(regUp).dirty = regUp.dirty = true;\n\t\t\t\ttess.mesh.splitEdge( eUp.Sym );\n\t\t\t\teUp.Org.s = tess.event.s;\n\t\t\t\teUp.Org.t = tess.event.t;\n\t\t\t}\n\t\t\tif( Geom.edgeSign( dstLo, tess.event, isect ) <= 0 ) {\n\t\t\t\tregUp.dirty = regLo.dirty = true;\n\t\t\t\ttess.mesh.splitEdge( eLo.Sym );\n\t\t\t\teLo.Org.s = tess.event.s;\n\t\t\t\teLo.Org.t = tess.event.t;\n\t\t\t}\n\t\t\t/* leave the rest for ConnectRightVertex */\n\t\t\treturn false;\n\t\t}\n\n\t\t/* General case -- split both edges, splice into new vertex.\n\t\t* When we do the splice operation, the order of the arguments is\n\t\t* arbitrary as far as correctness goes.  However, when the operation\n\t\t* creates a new face, the work done is proportional to the size of\n\t\t* the new face.  We expect the faces in the processed part of\n\t\t* the mesh (ie. eUp->Lface) to be smaller than the faces in the\n\t\t* unprocessed original contours (which will be eLo->Oprev->Lface).\n\t\t*/\n\t\ttess.mesh.splitEdge( eUp.Sym );\n\t\ttess.mesh.splitEdge( eLo.Sym );\n\t\ttess.mesh.splice( eLo.Oprev, eUp );\n\t\teUp.Org.s = isect.s;\n\t\teUp.Org.t = isect.t;\n\t\teUp.Org.pqHandle = tess.pq.insert( eUp.Org );\n\t\tSweep.getIntersectData( tess, eUp.Org, orgUp, dstUp, orgLo, dstLo );\n\t\tSweep.regionAbove(regUp).dirty = regUp.dirty = regLo.dirty = true;\n\t\treturn false;\n\t}\n\n\t//static void WalkDirtyRegions( TESStesselator *tess, ActiveRegion *regUp )\n\tSweep.walkDirtyRegions = function( tess, regUp ) {\n\t\t/*\n\t\t* When the upper or lower edge of any region changes, the region is\n\t\t* marked \"dirty\".  This routine walks through all the dirty regions\n\t\t* and makes sure that the dictionary invariants are satisfied\n\t\t* (see the comments at the beginning of this file).  Of course\n\t\t* new dirty regions can be created as we make changes to restore\n\t\t* the invariants.\n\t\t*/\n\t\tvar regLo = Sweep.regionBelow(regUp);\n\t\tvar eUp, eLo;\n\n\t\tfor( ;; ) {\n\t\t\t/* Find the lowest dirty region (we walk from the bottom up). */\n\t\t\twhile( regLo.dirty ) {\n\t\t\t\tregUp = regLo;\n\t\t\t\tregLo = Sweep.regionBelow(regLo);\n\t\t\t}\n\t\t\tif( ! regUp.dirty ) {\n\t\t\t\tregLo = regUp;\n\t\t\t\tregUp = Sweep.regionAbove( regUp );\n\t\t\t\tif( regUp == null || ! regUp.dirty ) {\n\t\t\t\t\t/* We've walked all the dirty regions */\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tregUp.dirty = false;\n\t\t\teUp = regUp.eUp;\n\t\t\teLo = regLo.eUp;\n\n\t\t\tif( eUp.Dst !== eLo.Dst ) {\n\t\t\t\t/* Check that the edge ordering is obeyed at the Dst vertices. */\n\t\t\t\tif( Sweep.checkForLeftSplice( tess, regUp )) {\n\n\t\t\t\t\t/* If the upper or lower edge was marked fixUpperEdge, then\n\t\t\t\t\t* we no longer need it (since these edges are needed only for\n\t\t\t\t\t* vertices which otherwise have no right-going edges).\n\t\t\t\t\t*/\n\t\t\t\t\tif( regLo.fixUpperEdge ) {\n\t\t\t\t\t\tSweep.deleteRegion( tess, regLo );\n\t\t\t\t\t\ttess.mesh.delete( eLo );\n\t\t\t\t\t\tregLo = Sweep.regionBelow( regUp );\n\t\t\t\t\t\teLo = regLo.eUp;\n\t\t\t\t\t} else if( regUp.fixUpperEdge ) {\n\t\t\t\t\t\tSweep.deleteRegion( tess, regUp );\n\t\t\t\t\t\ttess.mesh.delete( eUp );\n\t\t\t\t\t\tregUp = Sweep.regionAbove( regLo );\n\t\t\t\t\t\teUp = regUp.eUp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( eUp.Org !== eLo.Org ) {\n\t\t\t\tif(    eUp.Dst !== eLo.Dst\n\t\t\t\t\t&& ! regUp.fixUpperEdge && ! regLo.fixUpperEdge\n\t\t\t\t\t&& (eUp.Dst === tess.event || eLo.Dst === tess.event) )\n\t\t\t\t{\n\t\t\t\t\t/* When all else fails in CheckForIntersect(), it uses tess->event\n\t\t\t\t\t* as the intersection location.  To make this possible, it requires\n\t\t\t\t\t* that tess->event lie between the upper and lower edges, and also\n\t\t\t\t\t* that neither of these is marked fixUpperEdge (since in the worst\n\t\t\t\t\t* case it might splice one of these edges into tess->event, and\n\t\t\t\t\t* violate the invariant that fixable edges are the only right-going\n\t\t\t\t\t* edge from their associated vertex).\n\t\t\t\t\t*/\n\t\t\t\t\tif( Sweep.checkForIntersect( tess, regUp )) {\n\t\t\t\t\t\t/* WalkDirtyRegions() was called recursively; we're done */\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t/* Even though we can't use CheckForIntersect(), the Org vertices\n\t\t\t\t\t* may violate the dictionary edge ordering.  Check and correct this.\n\t\t\t\t\t*/\n\t\t\t\t\tSweep.checkForRightSplice( tess, regUp );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( eUp.Org === eLo.Org && eUp.Dst === eLo.Dst ) {\n\t\t\t\t/* A degenerate loop consisting of only two edges -- delete it. */\n\t\t\t\tSweep.addWinding( eLo, eUp );\n\t\t\t\tSweep.deleteRegion( tess, regUp );\n\t\t\t\ttess.mesh.delete( eUp );\n\t\t\t\tregUp = Sweep.regionAbove( regLo );\n\t\t\t}\n\t\t}\n\t}\n\n\n\t//static void ConnectRightVertex( TESStesselator *tess, ActiveRegion *regUp, TESShalfEdge *eBottomLeft )\n\tSweep.connectRightVertex = function( tess, regUp, eBottomLeft ) {\n\t\t/*\n\t\t* Purpose: connect a \"right\" vertex vEvent (one where all edges go left)\n\t\t* to the unprocessed portion of the mesh.  Since there are no right-going\n\t\t* edges, two regions (one above vEvent and one below) are being merged\n\t\t* into one.  \"regUp\" is the upper of these two regions.\n\t\t*\n\t\t* There are two reasons for doing this (adding a right-going edge):\n\t\t*  - if the two regions being merged are \"inside\", we must add an edge\n\t\t*    to keep them separated (the combined region would not be monotone).\n\t\t*  - in any case, we must leave some record of vEvent in the dictionary,\n\t\t*    so that we can merge vEvent with features that we have not seen yet.\n\t\t*    For example, maybe there is a vertical edge which passes just to\n\t\t*    the right of vEvent; we would like to splice vEvent into this edge.\n\t\t*\n\t\t* However, we don't want to connect vEvent to just any vertex.  We don''t\n\t\t* want the new edge to cross any other edges; otherwise we will create\n\t\t* intersection vertices even when the input data had no self-intersections.\n\t\t* (This is a bad thing; if the user's input data has no intersections,\n\t\t* we don't want to generate any false intersections ourselves.)\n\t\t*\n\t\t* Our eventual goal is to connect vEvent to the leftmost unprocessed\n\t\t* vertex of the combined region (the union of regUp and regLo).\n\t\t* But because of unseen vertices with all right-going edges, and also\n\t\t* new vertices which may be created by edge intersections, we don''t\n\t\t* know where that leftmost unprocessed vertex is.  In the meantime, we\n\t\t* connect vEvent to the closest vertex of either chain, and mark the region\n\t\t* as \"fixUpperEdge\".  This flag says to delete and reconnect this edge\n\t\t* to the next processed vertex on the boundary of the combined region.\n\t\t* Quite possibly the vertex we connected to will turn out to be the\n\t\t* closest one, in which case we won''t need to make any changes.\n\t\t*/\n\t\tvar eNew;\n\t\tvar eTopLeft = eBottomLeft.Onext;\n\t\tvar regLo = Sweep.regionBelow(regUp);\n\t\tvar eUp = regUp.eUp;\n\t\tvar eLo = regLo.eUp;\n\t\tvar degenerate = false;\n\n\t\tif( eUp.Dst !== eLo.Dst ) {\n\t\t\tSweep.checkForIntersect( tess, regUp );\n\t\t}\n\n\t\t/* Possible new degeneracies: upper or lower edge of regUp may pass\n\t\t* through vEvent, or may coincide with new intersection vertex\n\t\t*/\n\t\tif( Geom.vertEq( eUp.Org, tess.event )) {\n\t\t\ttess.mesh.splice( eTopLeft.Oprev, eUp );\n\t\t\tregUp = Sweep.topLeftRegion( tess, regUp );\n\t\t\teTopLeft = Sweep.regionBelow( regUp ).eUp;\n\t\t\tSweep.finishLeftRegions( tess, Sweep.regionBelow(regUp), regLo );\n\t\t\tdegenerate = true;\n\t\t}\n\t\tif( Geom.vertEq( eLo.Org, tess.event )) {\n\t\t\ttess.mesh.splice( eBottomLeft, eLo.Oprev );\n\t\t\teBottomLeft = Sweep.finishLeftRegions( tess, regLo, null );\n\t\t\tdegenerate = true;\n\t\t}\n\t\tif( degenerate ) {\n\t\t\tSweep.addRightEdges( tess, regUp, eBottomLeft.Onext, eTopLeft, eTopLeft, true );\n\t\t\treturn;\n\t\t}\n\n\t\t/* Non-degenerate situation -- need to add a temporary, fixable edge.\n\t\t* Connect to the closer of eLo->Org, eUp->Org.\n\t\t*/\n\t\tif( Geom.vertLeq( eLo.Org, eUp.Org )) {\n\t\t\teNew = eLo.Oprev;\n\t\t} else {\n\t\t\teNew = eUp;\n\t\t}\n\t\teNew = tess.mesh.connect( eBottomLeft.Lprev, eNew );\n\n\t\t/* Prevent cleanup, otherwise eNew might disappear before we've even\n\t\t* had a chance to mark it as a temporary edge.\n\t\t*/\n\t\tSweep.addRightEdges( tess, regUp, eNew, eNew.Onext, eNew.Onext, false );\n\t\teNew.Sym.activeRegion.fixUpperEdge = true;\n\t\tSweep.walkDirtyRegions( tess, regUp );\n\t}\n\n\t/* Because vertices at exactly the same location are merged together\n\t* before we process the sweep event, some degenerate cases can't occur.\n\t* However if someone eventually makes the modifications required to\n\t* merge features which are close together, the cases below marked\n\t* TOLERANCE_NONZERO will be useful.  They were debugged before the\n\t* code to merge identical vertices in the main loop was added.\n\t*/\n\t//#define TOLERANCE_NONZERO\tFALSE\n\n\t//static void ConnectLeftDegenerate( TESStesselator *tess, ActiveRegion *regUp, TESSvertex *vEvent )\n\tSweep.connectLeftDegenerate = function( tess, regUp, vEvent ) {\n\t\t/*\n\t\t* The event vertex lies exacty on an already-processed edge or vertex.\n\t\t* Adding the new vertex involves splicing it into the already-processed\n\t\t* part of the mesh.\n\t\t*/\n\t\tvar e, eTopLeft, eTopRight, eLast;\n\t\tvar reg;\n\n\t\te = regUp.eUp;\n\t\tif( Geom.vertEq( e.Org, vEvent )) {\n\t\t\t/* e->Org is an unprocessed vertex - just combine them, and wait\n\t\t\t* for e->Org to be pulled from the queue\n\t\t\t*/\n\t\t\tassert( false /*TOLERANCE_NONZERO*/ );\n\t\t\tSweep.spliceMergeVertices( tess, e, vEvent.anEdge );\n\t\t\treturn;\n\t\t}\n\n\t\tif( ! Geom.vertEq( e.Dst, vEvent )) {\n\t\t\t/* General case -- splice vEvent into edge e which passes through it */\n\t\t\ttess.mesh.splitEdge( e.Sym );\n\t\t\tif( regUp.fixUpperEdge ) {\n\t\t\t\t/* This edge was fixable -- delete unused portion of original edge */\n\t\t\t\ttess.mesh.delete( e.Onext );\n\t\t\t\tregUp.fixUpperEdge = false;\n\t\t\t}\n\t\t\ttess.mesh.splice( vEvent.anEdge, e );\n\t\t\tSweep.sweepEvent( tess, vEvent );\t/* recurse */\n\t\t\treturn;\n\t\t}\n\n\t\t/* vEvent coincides with e->Dst, which has already been processed.\n\t\t* Splice in the additional right-going edges.\n\t\t*/\n\t\tassert( false /*TOLERANCE_NONZERO*/ );\n\t\tregUp = Sweep.topRightRegion( regUp );\n\t\treg = Sweep.regionBelow( regUp );\n\t\teTopRight = reg.eUp.Sym;\n\t\teTopLeft = eLast = eTopRight.Onext;\n\t\tif( reg.fixUpperEdge ) {\n\t\t\t/* Here e->Dst has only a single fixable edge going right.\n\t\t\t* We can delete it since now we have some real right-going edges.\n\t\t\t*/\n\t\t\tassert( eTopLeft !== eTopRight );   /* there are some left edges too */\n\t\t\tSweep.deleteRegion( tess, reg );\n\t\t\ttess.mesh.delete( eTopRight );\n\t\t\teTopRight = eTopLeft.Oprev;\n\t\t}\n\t\ttess.mesh.splice( vEvent.anEdge, eTopRight );\n\t\tif( ! Geom.edgeGoesLeft( eTopLeft )) {\n\t\t\t/* e->Dst had no left-going edges -- indicate this to AddRightEdges() */\n\t\t\teTopLeft = null;\n\t\t}\n\t\tSweep.addRightEdges( tess, regUp, eTopRight.Onext, eLast, eTopLeft, true );\n\t}\n\n\n\t//static void ConnectLeftVertex( TESStesselator *tess, TESSvertex *vEvent )\n\tSweep.connectLeftVertex = function( tess, vEvent ) {\n\t\t/*\n\t\t* Purpose: connect a \"left\" vertex (one where both edges go right)\n\t\t* to the processed portion of the mesh.  Let R be the active region\n\t\t* containing vEvent, and let U and L be the upper and lower edge\n\t\t* chains of R.  There are two possibilities:\n\t\t*\n\t\t* - the normal case: split R into two regions, by connecting vEvent to\n\t\t*   the rightmost vertex of U or L lying to the left of the sweep line\n\t\t*\n\t\t* - the degenerate case: if vEvent is close enough to U or L, we\n\t\t*   merge vEvent into that edge chain.  The subcases are:\n\t\t*\t- merging with the rightmost vertex of U or L\n\t\t*\t- merging with the active edge of U or L\n\t\t*\t- merging with an already-processed portion of U or L\n\t\t*/\n\t\tvar regUp, regLo, reg;\n\t\tvar eUp, eLo, eNew;\n\t\tvar tmp = new ActiveRegion();\n\n\t\t/* assert( vEvent->anEdge->Onext->Onext == vEvent->anEdge ); */\n\n\t\t/* Get a pointer to the active region containing vEvent */\n\t\ttmp.eUp = vEvent.anEdge.Sym;\n\t\t/* __GL_DICTLISTKEY */ /* tessDictListSearch */\n\t\tregUp = tess.dict.search( tmp ).key;\n\t\tregLo = Sweep.regionBelow( regUp );\n\t\tif( !regLo ) {\n\t\t\t// This may happen if the input polygon is coplanar.\n\t\t\treturn;\n\t\t}\n\t\teUp = regUp.eUp;\n\t\teLo = regLo.eUp;\n\n\t\t/* Try merging with U or L first */\n\t\tif( Geom.edgeSign( eUp.Dst, vEvent, eUp.Org ) === 0.0 ) {\n\t\t\tSweep.connectLeftDegenerate( tess, regUp, vEvent );\n\t\t\treturn;\n\t\t}\n\n\t\t/* Connect vEvent to rightmost processed vertex of either chain.\n\t\t* e->Dst is the vertex that we will connect to vEvent.\n\t\t*/\n\t\treg = Geom.vertLeq( eLo.Dst, eUp.Dst ) ? regUp : regLo;\n\n\t\tif( regUp.inside || reg.fixUpperEdge) {\n\t\t\tif( reg === regUp ) {\n\t\t\t\teNew = tess.mesh.connect( vEvent.anEdge.Sym, eUp.Lnext );\n\t\t\t} else {\n\t\t\t\tvar tempHalfEdge = tess.mesh.connect( eLo.Dnext, vEvent.anEdge);\n\t\t\t\teNew = tempHalfEdge.Sym;\n\t\t\t}\n\t\t\tif( reg.fixUpperEdge ) {\n\t\t\t\tSweep.fixUpperEdge( tess, reg, eNew );\n\t\t\t} else {\n\t\t\t\tSweep.computeWinding( tess, Sweep.addRegionBelow( tess, regUp, eNew ));\n\t\t\t}\n\t\t\tSweep.sweepEvent( tess, vEvent );\n\t\t} else {\n\t\t\t/* The new vertex is in a region which does not belong to the polygon.\n\t\t\t* We don''t need to connect this vertex to the rest of the mesh.\n\t\t\t*/\n\t\t\tSweep.addRightEdges( tess, regUp, vEvent.anEdge, vEvent.anEdge, null, true );\n\t\t}\n\t};\n\n\n\t//static void SweepEvent( TESStesselator *tess, TESSvertex *vEvent )\n\tSweep.sweepEvent = function( tess, vEvent ) {\n\t\t/*\n\t\t* Does everything necessary when the sweep line crosses a vertex.\n\t\t* Updates the mesh and the edge dictionary.\n\t\t*/\n\n\t\ttess.event = vEvent;\t\t/* for access in EdgeLeq() */\n\t\tSweep.debugEvent( tess );\n\n\t\t/* Check if this vertex is the right endpoint of an edge that is\n\t\t* already in the dictionary.  In this case we don't need to waste\n\t\t* time searching for the location to insert new edges.\n\t\t*/\n\t\tvar e = vEvent.anEdge;\n\t\twhile( e.activeRegion === null ) {\n\t\t\te = e.Onext;\n\t\t\tif( e == vEvent.anEdge ) {\n\t\t\t\t/* All edges go right -- not incident to any processed edges */\n\t\t\t\tSweep.connectLeftVertex( tess, vEvent );\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t/* Processing consists of two phases: first we \"finish\" all the\n\t\t* active regions where both the upper and lower edges terminate\n\t\t* at vEvent (ie. vEvent is closing off these regions).\n\t\t* We mark these faces \"inside\" or \"outside\" the polygon according\n\t\t* to their winding number, and delete the edges from the dictionary.\n\t\t* This takes care of all the left-going edges from vEvent.\n\t\t*/\n\t\tvar regUp = Sweep.topLeftRegion( tess, e.activeRegion );\n\t\tassert( regUp !== null );\n\t//\tif (regUp == NULL) longjmp(tess->env,1);\n\t\tvar reg = Sweep.regionBelow( regUp );\n\t\tvar eTopLeft = reg.eUp;\n\t\tvar eBottomLeft = Sweep.finishLeftRegions( tess, reg, null );\n\n\t\t/* Next we process all the right-going edges from vEvent.  This\n\t\t* involves adding the edges to the dictionary, and creating the\n\t\t* associated \"active regions\" which record information about the\n\t\t* regions between adjacent dictionary edges.\n\t\t*/\n\t\tif( eBottomLeft.Onext === eTopLeft ) {\n\t\t\t/* No right-going edges -- add a temporary \"fixable\" edge */\n\t\t\tSweep.connectRightVertex( tess, regUp, eBottomLeft );\n\t\t} else {\n\t\t\tSweep.addRightEdges( tess, regUp, eBottomLeft.Onext, eTopLeft, eTopLeft, true );\n\t\t}\n\t};\n\n\n\t/* Make the sentinel coordinates big enough that they will never be\n\t* merged with real input features.\n\t*/\n\n\t//static void AddSentinel( TESStesselator *tess, TESSreal smin, TESSreal smax, TESSreal t )\n\tSweep.addSentinel = function( tess, smin, smax, t ) {\n\t\t/*\n\t\t* We add two sentinel edges above and below all other edges,\n\t\t* to avoid special cases at the top and bottom.\n\t\t*/\n\t\tvar reg = new ActiveRegion();\n\t\tvar e = tess.mesh.makeEdge();\n\t//\tif (e == NULL) longjmp(tess->env,1);\n\n\t\te.Org.s = smax;\n\t\te.Org.t = t;\n\t\te.Dst.s = smin;\n\t\te.Dst.t = t;\n\t\ttess.event = e.Dst;\t\t/* initialize it */\n\n\t\treg.eUp = e;\n\t\treg.windingNumber = 0;\n\t\treg.inside = false;\n\t\treg.fixUpperEdge = false;\n\t\treg.sentinel = true;\n\t\treg.dirty = false;\n\t\treg.nodeUp = tess.dict.insert( reg );\n\t//\tif (reg->nodeUp == NULL) longjmp(tess->env,1);\n\t}\n\n\n\t//static void InitEdgeDict( TESStesselator *tess )\n\tSweep.initEdgeDict = function( tess ) {\n\t\t/*\n\t\t* We maintain an ordering of edge intersections with the sweep line.\n\t\t* This order is maintained in a dynamic dictionary.\n\t\t*/\n\t\ttess.dict = new Dict( tess, Sweep.edgeLeq );\n\t//\tif (tess->dict == NULL) longjmp(tess->env,1);\n\n\t\tvar w = (tess.bmax[0] - tess.bmin[0]);\n\t\tvar h = (tess.bmax[1] - tess.bmin[1]);\n\n\t\tvar smin = tess.bmin[0] - w;\n\t\tvar smax = tess.bmax[0] + w;\n\t\tvar tmin = tess.bmin[1] - h;\n\t\tvar tmax = tess.bmax[1] + h;\n\n\t\tSweep.addSentinel( tess, smin, smax, tmin );\n\t\tSweep.addSentinel( tess, smin, smax, tmax );\n\t}\n\n\n\tSweep.doneEdgeDict = function( tess )\n\t{\n\t\tvar reg;\n\t\tvar fixedEdges = 0;\n\n\t\twhile( (reg = tess.dict.min().key) !== null ) {\n\t\t\t/*\n\t\t\t* At the end of all processing, the dictionary should contain\n\t\t\t* only the two sentinel edges, plus at most one \"fixable\" edge\n\t\t\t* created by ConnectRightVertex().\n\t\t\t*/\n\t\t\tif( ! reg.sentinel ) {\n\t\t\t\tassert( reg.fixUpperEdge );\n\t\t\t\tassert( ++fixedEdges == 1 );\n\t\t\t}\n\t\t\tassert( reg.windingNumber == 0 );\n\t\t\tSweep.deleteRegion( tess, reg );\n\t\t\t/*    tessMeshDelete( reg->eUp );*/\n\t\t}\n\t//\tdictDeleteDict( &tess->alloc, tess->dict );\n\t}\n\n\n\tSweep.removeDegenerateEdges = function( tess ) {\n\t\t/*\n\t\t* Remove zero-length edges, and contours with fewer than 3 vertices.\n\t\t*/\n\t\tvar e, eNext, eLnext;\n\t\tvar eHead = tess.mesh.eHead;\n\n\t\t/*LINTED*/\n\t\tfor( e = eHead.next; e !== eHead; e = eNext ) {\n\t\t\teNext = e.next;\n\t\t\teLnext = e.Lnext;\n\n\t\t\tif( Geom.vertEq( e.Org, e.Dst ) && e.Lnext.Lnext !== e ) {\n\t\t\t\t/* Zero-length edge, contour has at least 3 edges */\n\t\t\t\tSweep.spliceMergeVertices( tess, eLnext, e );\t/* deletes e->Org */\n\t\t\t\ttess.mesh.delete( e ); /* e is a self-loop */\n\t\t\t\te = eLnext;\n\t\t\t\teLnext = e.Lnext;\n\t\t\t}\n\t\t\tif( eLnext.Lnext === e ) {\n\t\t\t\t/* Degenerate contour (one or two edges) */\n\t\t\t\tif( eLnext !== e ) {\n\t\t\t\t\tif( eLnext === eNext || eLnext === eNext.Sym ) { eNext = eNext.next; }\n\t\t\t\t\ttess.mesh.delete( eLnext );\n\t\t\t\t}\n\t\t\t\tif( e === eNext || e === eNext.Sym ) { eNext = eNext.next; }\n\t\t\t\ttess.mesh.delete( e );\n\t\t\t}\n\t\t}\n\t}\n\n\tSweep.initPriorityQ = function( tess ) {\n\t\t/*\n\t\t* Insert all vertices into the priority queue which determines the\n\t\t* order in which vertices cross the sweep line.\n\t\t*/\n\t\tvar pq;\n\t\tvar v, vHead;\n\t\tvar vertexCount = 0;\n\t\t\n\t\tvHead = tess.mesh.vHead;\n\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\tvertexCount++;\n\t\t}\n\t\t/* Make sure there is enough space for sentinels. */\n\t\tvertexCount += 8; //MAX( 8, tess->alloc.extraVertices );\n\t\t\n\t\tpq = tess.pq = new PriorityQ( vertexCount, Geom.vertLeq );\n\t//\tif (pq == NULL) return 0;\n\n\t\tvHead = tess.mesh.vHead;\n\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\tv.pqHandle = pq.insert( v );\n\t//\t\tif (v.pqHandle == INV_HANDLE)\n\t//\t\t\tbreak;\n\t\t}\n\n\t\tif (v !== vHead) {\n\t\t\treturn false;\n\t\t}\n\n\t\tpq.init();\n\n\t\treturn true;\n\t}\n\n\n\tSweep.donePriorityQ = function( tess ) {\n\t\ttess.pq = null;\n\t}\n\n\n\tSweep.removeDegenerateFaces = function( tess, mesh ) {\n\t\t/*\n\t\t* Delete any degenerate faces with only two edges.  WalkDirtyRegions()\n\t\t* will catch almost all of these, but it won't catch degenerate faces\n\t\t* produced by splice operations on already-processed edges.\n\t\t* The two places this can happen are in FinishLeftRegions(), when\n\t\t* we splice in a \"temporary\" edge produced by ConnectRightVertex(),\n\t\t* and in CheckForLeftSplice(), where we splice already-processed\n\t\t* edges to ensure that our dictionary invariants are not violated\n\t\t* by numerical errors.\n\t\t*\n\t\t* In both these cases it is *very* dangerous to delete the offending\n\t\t* edge at the time, since one of the routines further up the stack\n\t\t* will sometimes be keeping a pointer to that edge.\n\t\t*/\n\t\tvar f, fNext;\n\t\tvar e;\n\n\t\t/*LINTED*/\n\t\tfor( f = mesh.fHead.next; f !== mesh.fHead; f = fNext ) {\n\t\t\tfNext = f.next;\n\t\t\te = f.anEdge;\n\t\t\tassert( e.Lnext !== e );\n\n\t\t\tif( e.Lnext.Lnext === e ) {\n\t\t\t\t/* A face with only two edges */\n\t\t\t\tSweep.addWinding( e.Onext, e );\n\t\t\t\ttess.mesh.delete( e );\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tSweep.computeInterior = function( tess ) {\n\t\t/*\n\t\t* tessComputeInterior( tess ) computes the planar arrangement specified\n\t\t* by the given contours, and further subdivides this arrangement\n\t\t* into regions.  Each region is marked \"inside\" if it belongs\n\t\t* to the polygon, according to the rule given by tess->windingRule.\n\t\t* Each interior region is guaranteed be monotone.\n\t\t*/\n\t\tvar v, vNext;\n\n\t\t/* Each vertex defines an event for our sweep line.  Start by inserting\n\t\t* all the vertices in a priority queue.  Events are processed in\n\t\t* lexicographic order, ie.\n\t\t*\n\t\t*\te1 < e2  iff  e1.x < e2.x || (e1.x == e2.x && e1.y < e2.y)\n\t\t*/\n\t\tSweep.removeDegenerateEdges( tess );\n\t\tif ( !Sweep.initPriorityQ( tess ) ) return false; /* if error */\n\t\tSweep.initEdgeDict( tess );\n\n\t\twhile( (v = tess.pq.extractMin()) !== null ) {\n\t\t\tfor( ;; ) {\n\t\t\t\tvNext = tess.pq.min();\n\t\t\t\tif( vNext === null || ! Geom.vertEq( vNext, v )) break;\n\n\t\t\t\t/* Merge together all vertices at exactly the same location.\n\t\t\t\t* This is more efficient than processing them one at a time,\n\t\t\t\t* simplifies the code (see ConnectLeftDegenerate), and is also\n\t\t\t\t* important for correct handling of certain degenerate cases.\n\t\t\t\t* For example, suppose there are two identical edges A and B\n\t\t\t\t* that belong to different contours (so without this code they would\n\t\t\t\t* be processed by separate sweep events).  Suppose another edge C\n\t\t\t\t* crosses A and B from above.  When A is processed, we split it\n\t\t\t\t* at its intersection point with C.  However this also splits C,\n\t\t\t\t* so when we insert B we may compute a slightly different\n\t\t\t\t* intersection point.  This might leave two edges with a small\n\t\t\t\t* gap between them.  This kind of error is especially obvious\n\t\t\t\t* when using boundary extraction (TESS_BOUNDARY_ONLY).\n\t\t\t\t*/\n\t\t\t\tvNext = tess.pq.extractMin();\n\t\t\t\tSweep.spliceMergeVertices( tess, v.anEdge, vNext.anEdge );\n\t\t\t}\n\t\t\tSweep.sweepEvent( tess, v );\n\t\t}\n\n\t\t/* Set tess->event for debugging purposes */\n\t\ttess.event = tess.dict.min().key.eUp.Org;\n\t\tSweep.debugEvent( tess );\n\t\tSweep.doneEdgeDict( tess );\n\t\tSweep.donePriorityQ( tess );\n\n\t\tif ( !Sweep.removeDegenerateFaces( tess, tess.mesh ) ) return false;\n\t\ttess.mesh.check();\n\n\t\treturn true;\n\t}\n\n\n\tfunction Tesselator() {\n\n\t\t/*** state needed for collecting the input data ***/\n\t\tthis.mesh = null;\t\t/* stores the input contours, and eventually\n\t\t\t\t\t\t\tthe tessellation itself */\n\n\t\t/*** state needed for projecting onto the sweep plane ***/\n\n\t\tthis.normal = [0.0, 0.0, 0.0];\t/* user-specified normal (if provided) */\n\t\tthis.sUnit = [0.0, 0.0, 0.0];\t/* unit vector in s-direction (debugging) */\n\t\tthis.tUnit = [0.0, 0.0, 0.0];\t/* unit vector in t-direction (debugging) */\n\n\t\tthis.bmin = [0.0, 0.0];\n\t\tthis.bmax = [0.0, 0.0];\n\n\t\t/*** state needed for the line sweep ***/\n\t\tthis.windingRule = Tess2.WINDING_ODD;\t/* rule for determining polygon interior */\n\n\t\tthis.dict = null;\t\t/* edge dictionary for sweep line */\n\t\tthis.pq = null;\t\t/* priority queue of vertex events */\n\t\tthis.event = null;\t\t/* current sweep event being processed */\n\n\t\tthis.vertexIndexCounter = 0;\n\t\t\n\t\tthis.vertices = [];\n\t\tthis.vertexIndices = [];\n\t\tthis.vertexCount = 0;\n\t\tthis.elements = [];\n\t\tthis.elementCount = 0;\n\t};\n\n\tTesselator.prototype = {\n\n\t\tdot_: function(u, v) {\n\t\t\treturn (u[0]*v[0] + u[1]*v[1] + u[2]*v[2]);\n\t\t},\n\n\t\tnormalize_: function( v ) {\n\t\t\tvar len = v[0]*v[0] + v[1]*v[1] + v[2]*v[2];\n\t\t\tassert( len > 0.0 );\n\t\t\tlen = Math.sqrt( len );\n\t\t\tv[0] /= len;\n\t\t\tv[1] /= len;\n\t\t\tv[2] /= len;\n\t\t},\n\n\t\tlongAxis_: function( v ) {\n\t\t\tvar i = 0;\n\t\t\tif( Math.abs(v[1]) > Math.abs(v[0]) ) { i = 1; }\n\t\t\tif( Math.abs(v[2]) > Math.abs(v[i]) ) { i = 2; }\n\t\t\treturn i;\n\t\t},\n\n\t\tcomputeNormal_: function( norm )\n\t\t{\n\t\t\tvar v, v1, v2;\n\t\t\tvar c, tLen2, maxLen2;\n\t\t\tvar maxVal = [0,0,0], minVal = [0,0,0], d1 = [0,0,0], d2 = [0,0,0], tNorm = [0,0,0];\n\t\t\tvar maxVert = [null,null,null], minVert = [null,null,null];\n\t\t\tvar vHead = this.mesh.vHead;\n\t\t\tvar i;\n\n\t\t\tv = vHead.next;\n\t\t\tfor( i = 0; i < 3; ++i ) {\n\t\t\t\tc = v.coords[i];\n\t\t\t\tminVal[i] = c;\n\t\t\t\tminVert[i] = v;\n\t\t\t\tmaxVal[i] = c;\n\t\t\t\tmaxVert[i] = v;\n\t\t\t}\n\n\t\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\t\tfor( i = 0; i < 3; ++i ) {\n\t\t\t\t\tc = v.coords[i];\n\t\t\t\t\tif( c < minVal[i] ) { minVal[i] = c; minVert[i] = v; }\n\t\t\t\t\tif( c > maxVal[i] ) { maxVal[i] = c; maxVert[i] = v; }\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Find two vertices separated by at least 1/sqrt(3) of the maximum\n\t\t\t* distance between any two vertices\n\t\t\t*/\n\t\t\ti = 0;\n\t\t\tif( maxVal[1] - minVal[1] > maxVal[0] - minVal[0] ) { i = 1; }\n\t\t\tif( maxVal[2] - minVal[2] > maxVal[i] - minVal[i] ) { i = 2; }\n\t\t\tif( minVal[i] >= maxVal[i] ) {\n\t\t\t\t/* All vertices are the same -- normal doesn't matter */\n\t\t\t\tnorm[0] = 0; norm[1] = 0; norm[2] = 1;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/* Look for a third vertex which forms the triangle with maximum area\n\t\t\t* (Length of normal == twice the triangle area)\n\t\t\t*/\n\t\t\tmaxLen2 = 0;\n\t\t\tv1 = minVert[i];\n\t\t\tv2 = maxVert[i];\n\t\t\td1[0] = v1.coords[0] - v2.coords[0];\n\t\t\td1[1] = v1.coords[1] - v2.coords[1];\n\t\t\td1[2] = v1.coords[2] - v2.coords[2];\n\t\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\t\td2[0] = v.coords[0] - v2.coords[0];\n\t\t\t\td2[1] = v.coords[1] - v2.coords[1];\n\t\t\t\td2[2] = v.coords[2] - v2.coords[2];\n\t\t\t\ttNorm[0] = d1[1]*d2[2] - d1[2]*d2[1];\n\t\t\t\ttNorm[1] = d1[2]*d2[0] - d1[0]*d2[2];\n\t\t\t\ttNorm[2] = d1[0]*d2[1] - d1[1]*d2[0];\n\t\t\t\ttLen2 = tNorm[0]*tNorm[0] + tNorm[1]*tNorm[1] + tNorm[2]*tNorm[2];\n\t\t\t\tif( tLen2 > maxLen2 ) {\n\t\t\t\t\tmaxLen2 = tLen2;\n\t\t\t\t\tnorm[0] = tNorm[0];\n\t\t\t\t\tnorm[1] = tNorm[1];\n\t\t\t\t\tnorm[2] = tNorm[2];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif( maxLen2 <= 0 ) {\n\t\t\t\t/* All points lie on a single line -- any decent normal will do */\n\t\t\t\tnorm[0] = norm[1] = norm[2] = 0;\n\t\t\t\tnorm[this.longAxis_(d1)] = 1;\n\t\t\t}\n\t\t},\n\n\t\tcheckOrientation_: function() {\n\t\t\tvar area;\n\t\t\tvar f, fHead = this.mesh.fHead;\n\t\t\tvar v, vHead = this.mesh.vHead;\n\t\t\tvar e;\n\n\t\t\t/* When we compute the normal automatically, we choose the orientation\n\t\t\t* so that the the sum of the signed areas of all contours is non-negative.\n\t\t\t*/\n\t\t\tarea = 0;\n\t\t\tfor( f = fHead.next; f !== fHead; f = f.next ) {\n\t\t\t\te = f.anEdge;\n\t\t\t\tif( e.winding <= 0 ) continue;\n\t\t\t\tdo {\n\t\t\t\t\tarea += (e.Org.s - e.Dst.s) * (e.Org.t + e.Dst.t);\n\t\t\t\t\te = e.Lnext;\n\t\t\t\t} while( e !== f.anEdge );\n\t\t\t}\n\t\t\tif( area < 0 ) {\n\t\t\t\t/* Reverse the orientation by flipping all the t-coordinates */\n\t\t\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\t\t\tv.t = - v.t;\n\t\t\t\t}\n\t\t\t\tthis.tUnit[0] = - this.tUnit[0];\n\t\t\t\tthis.tUnit[1] = - this.tUnit[1];\n\t\t\t\tthis.tUnit[2] = - this.tUnit[2];\n\t\t\t}\n\t\t},\n\n\t/*\t#ifdef FOR_TRITE_TEST_PROGRAM\n\t\t#include <stdlib.h>\n\t\textern int RandomSweep;\n\t\t#define S_UNIT_X\t(RandomSweep ? (2*drand48()-1) : 1.0)\n\t\t#define S_UNIT_Y\t(RandomSweep ? (2*drand48()-1) : 0.0)\n\t\t#else\n\t\t#if defined(SLANTED_SWEEP) */\n\t\t/* The \"feature merging\" is not intended to be complete.  There are\n\t\t* special cases where edges are nearly parallel to the sweep line\n\t\t* which are not implemented.  The algorithm should still behave\n\t\t* robustly (ie. produce a reasonable tesselation) in the presence\n\t\t* of such edges, however it may miss features which could have been\n\t\t* merged.  We could minimize this effect by choosing the sweep line\n\t\t* direction to be something unusual (ie. not parallel to one of the\n\t\t* coordinate axes).\n\t\t*/\n\t/*\t#define S_UNIT_X\t(TESSreal)0.50941539564955385\t// Pre-normalized\n\t\t#define S_UNIT_Y\t(TESSreal)0.86052074622010633\n\t\t#else\n\t\t#define S_UNIT_X\t(TESSreal)1.0\n\t\t#define S_UNIT_Y\t(TESSreal)0.0\n\t\t#endif\n\t\t#endif*/\n\n\t\t/* Determine the polygon normal and project vertices onto the plane\n\t\t* of the polygon.\n\t\t*/\n\t\tprojectPolygon_: function() {\n\t\t\tvar v, vHead = this.mesh.vHead;\n\t\t\tvar norm = [0,0,0];\n\t\t\tvar sUnit, tUnit;\n\t\t\tvar i, first, computedNormal = false;\n\n\t\t\tnorm[0] = this.normal[0];\n\t\t\tnorm[1] = this.normal[1];\n\t\t\tnorm[2] = this.normal[2];\n\t\t\tif( norm[0] === 0.0 && norm[1] === 0.0 && norm[2] === 0.0 ) {\n\t\t\t\tthis.computeNormal_( norm );\n\t\t\t\tcomputedNormal = true;\n\t\t\t}\n\t\t\tsUnit = this.sUnit;\n\t\t\ttUnit = this.tUnit;\n\t\t\ti = this.longAxis_( norm );\n\n\t/*\t#if defined(FOR_TRITE_TEST_PROGRAM) || defined(TRUE_PROJECT)\n\t\t\t// Choose the initial sUnit vector to be approximately perpendicular\n\t\t\t// to the normal.\n\t\t\t\n\t\t\tNormalize( norm );\n\n\t\t\tsUnit[i] = 0;\n\t\t\tsUnit[(i+1)%3] = S_UNIT_X;\n\t\t\tsUnit[(i+2)%3] = S_UNIT_Y;\n\n\t\t\t// Now make it exactly perpendicular \n\t\t\tw = Dot( sUnit, norm );\n\t\t\tsUnit[0] -= w * norm[0];\n\t\t\tsUnit[1] -= w * norm[1];\n\t\t\tsUnit[2] -= w * norm[2];\n\t\t\tNormalize( sUnit );\n\n\t\t\t// Choose tUnit so that (sUnit,tUnit,norm) form a right-handed frame \n\t\t\ttUnit[0] = norm[1]*sUnit[2] - norm[2]*sUnit[1];\n\t\t\ttUnit[1] = norm[2]*sUnit[0] - norm[0]*sUnit[2];\n\t\t\ttUnit[2] = norm[0]*sUnit[1] - norm[1]*sUnit[0];\n\t\t\tNormalize( tUnit );\n\t\t#else*/\n\t\t\t/* Project perpendicular to a coordinate axis -- better numerically */\n\t\t\tsUnit[i] = 0;\n\t\t\tsUnit[(i+1)%3] = 1.0;\n\t\t\tsUnit[(i+2)%3] = 0.0;\n\n\t\t\ttUnit[i] = 0;\n\t\t\ttUnit[(i+1)%3] = 0.0;\n\t\t\ttUnit[(i+2)%3] = (norm[i] > 0) ? 1.0 : -1.0;\n\t//\t#endif\n\n\t\t\t/* Project the vertices onto the sweep plane */\n\t\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\t\tv.s = this.dot_( v.coords, sUnit );\n\t\t\t\tv.t = this.dot_( v.coords, tUnit );\n\t\t\t}\n\t\t\tif( computedNormal ) {\n\t\t\t\tthis.checkOrientation_();\n\t\t\t}\n\n\t\t\t/* Compute ST bounds. */\n\t\t\tfirst = true;\n\t\t\tfor( v = vHead.next; v !== vHead; v = v.next ) {\n\t\t\t\tif (first) {\n\t\t\t\t\tthis.bmin[0] = this.bmax[0] = v.s;\n\t\t\t\t\tthis.bmin[1] = this.bmax[1] = v.t;\n\t\t\t\t\tfirst = false;\n\t\t\t\t} else {\n\t\t\t\t\tif (v.s < this.bmin[0]) this.bmin[0] = v.s;\n\t\t\t\t\tif (v.s > this.bmax[0]) this.bmax[0] = v.s;\n\t\t\t\t\tif (v.t < this.bmin[1]) this.bmin[1] = v.t;\n\t\t\t\t\tif (v.t > this.bmax[1]) this.bmax[1] = v.t;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\taddWinding_: function(eDst,eSrc) {\n\t\t\teDst.winding += eSrc.winding;\n\t\t\teDst.Sym.winding += eSrc.Sym.winding;\n\t\t},\n\t\t\n\t\t/* tessMeshTessellateMonoRegion( face ) tessellates a monotone region\n\t\t* (what else would it do??)  The region must consist of a single\n\t\t* loop of half-edges (see mesh.h) oriented CCW.  \"Monotone\" in this\n\t\t* case means that any vertical line intersects the interior of the\n\t\t* region in a single interval.  \n\t\t*\n\t\t* Tessellation consists of adding interior edges (actually pairs of\n\t\t* half-edges), to split the region into non-overlapping triangles.\n\t\t*\n\t\t* The basic idea is explained in Preparata and Shamos (which I don''t\n\t\t* have handy right now), although their implementation is more\n\t\t* complicated than this one.  The are two edge chains, an upper chain\n\t\t* and a lower chain.  We process all vertices from both chains in order,\n\t\t* from right to left.\n\t\t*\n\t\t* The algorithm ensures that the following invariant holds after each\n\t\t* vertex is processed: the untessellated region consists of two\n\t\t* chains, where one chain (say the upper) is a single edge, and\n\t\t* the other chain is concave.  The left vertex of the single edge\n\t\t* is always to the left of all vertices in the concave chain.\n\t\t*\n\t\t* Each step consists of adding the rightmost unprocessed vertex to one\n\t\t* of the two chains, and forming a fan of triangles from the rightmost\n\t\t* of two chain endpoints.  Determining whether we can add each triangle\n\t\t* to the fan is a simple orientation test.  By making the fan as large\n\t\t* as possible, we restore the invariant (check it yourself).\n\t\t*/\n\t//\tint tessMeshTessellateMonoRegion( TESSmesh *mesh, TESSface *face )\n\t\ttessellateMonoRegion_: function( mesh, face ) {\n\t\t\tvar up, lo;\n\n\t\t\t/* All edges are oriented CCW around the boundary of the region.\n\t\t\t* First, find the half-edge whose origin vertex is rightmost.\n\t\t\t* Since the sweep goes from left to right, face->anEdge should\n\t\t\t* be close to the edge we want.\n\t\t\t*/\n\t\t\tup = face.anEdge;\n\t\t\tassert( up.Lnext !== up && up.Lnext.Lnext !== up );\n\n\t\t\tfor( ; Geom.vertLeq( up.Dst, up.Org ); up = up.Lprev )\n\t\t\t\t;\n\t\t\tfor( ; Geom.vertLeq( up.Org, up.Dst ); up = up.Lnext )\n\t\t\t\t;\n\t\t\tlo = up.Lprev;\n\n\t\t\twhile( up.Lnext !== lo ) {\n\t\t\t\tif( Geom.vertLeq( up.Dst, lo.Org )) {\n\t\t\t\t\t/* up->Dst is on the left.  It is safe to form triangles from lo->Org.\n\t\t\t\t\t* The EdgeGoesLeft test guarantees progress even when some triangles\n\t\t\t\t\t* are CW, given that the upper and lower chains are truly monotone.\n\t\t\t\t\t*/\n\t\t\t\t\twhile( lo.Lnext !== up && (Geom.edgeGoesLeft( lo.Lnext )\n\t\t\t\t\t\t|| Geom.edgeSign( lo.Org, lo.Dst, lo.Lnext.Dst ) <= 0.0 )) {\n\t\t\t\t\t\t\tvar tempHalfEdge = mesh.connect( lo.Lnext, lo );\n\t\t\t\t\t\t\t//if (tempHalfEdge == NULL) return 0;\n\t\t\t\t\t\t\tlo = tempHalfEdge.Sym;\n\t\t\t\t\t}\n\t\t\t\t\tlo = lo.Lprev;\n\t\t\t\t} else {\n\t\t\t\t\t/* lo->Org is on the left.  We can make CCW triangles from up->Dst. */\n\t\t\t\t\twhile( lo.Lnext != up && (Geom.edgeGoesRight( up.Lprev )\n\t\t\t\t\t\t|| Geom.edgeSign( up.Dst, up.Org, up.Lprev.Org ) >= 0.0 )) {\n\t\t\t\t\t\t\tvar tempHalfEdge = mesh.connect( up, up.Lprev );\n\t\t\t\t\t\t\t//if (tempHalfEdge == NULL) return 0;\n\t\t\t\t\t\t\tup = tempHalfEdge.Sym;\n\t\t\t\t\t}\n\t\t\t\t\tup = up.Lnext;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Now lo->Org == up->Dst == the leftmost vertex.  The remaining region\n\t\t\t* can be tessellated in a fan from this leftmost vertex.\n\t\t\t*/\n\t\t\tassert( lo.Lnext !== up );\n\t\t\twhile( lo.Lnext.Lnext !== up ) {\n\t\t\t\tvar tempHalfEdge = mesh.connect( lo.Lnext, lo );\n\t\t\t\t//if (tempHalfEdge == NULL) return 0;\n\t\t\t\tlo = tempHalfEdge.Sym;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\n\t\t/* tessMeshTessellateInterior( mesh ) tessellates each region of\n\t\t* the mesh which is marked \"inside\" the polygon.  Each such region\n\t\t* must be monotone.\n\t\t*/\n\t\t//int tessMeshTessellateInterior( TESSmesh *mesh )\n\t\ttessellateInterior_: function( mesh ) {\n\t\t\tvar f, next;\n\n\t\t\t/*LINTED*/\n\t\t\tfor( f = mesh.fHead.next; f !== mesh.fHead; f = next ) {\n\t\t\t\t/* Make sure we don''t try to tessellate the new triangles. */\n\t\t\t\tnext = f.next;\n\t\t\t\tif( f.inside ) {\n\t\t\t\t\tif ( !this.tessellateMonoRegion_( mesh, f ) ) return false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\n\t\t/* tessMeshDiscardExterior( mesh ) zaps (ie. sets to NULL) all faces\n\t\t* which are not marked \"inside\" the polygon.  Since further mesh operations\n\t\t* on NULL faces are not allowed, the main purpose is to clean up the\n\t\t* mesh so that exterior loops are not represented in the data structure.\n\t\t*/\n\t\t//void tessMeshDiscardExterior( TESSmesh *mesh )\n\t\tdiscardExterior_: function( mesh ) {\n\t\t\tvar f, next;\n\n\t\t\t/*LINTED*/\n\t\t\tfor( f = mesh.fHead.next; f !== mesh.fHead; f = next ) {\n\t\t\t\t/* Since f will be destroyed, save its next pointer. */\n\t\t\t\tnext = f.next;\n\t\t\t\tif( ! f.inside ) {\n\t\t\t\t\tmesh.zapFace( f );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/* tessMeshSetWindingNumber( mesh, value, keepOnlyBoundary ) resets the\n\t\t* winding numbers on all edges so that regions marked \"inside\" the\n\t\t* polygon have a winding number of \"value\", and regions outside\n\t\t* have a winding number of 0.\n\t\t*\n\t\t* If keepOnlyBoundary is TRUE, it also deletes all edges which do not\n\t\t* separate an interior region from an exterior one.\n\t\t*/\n\t//\tint tessMeshSetWindingNumber( TESSmesh *mesh, int value, int keepOnlyBoundary )\n\t\tsetWindingNumber_: function( mesh, value, keepOnlyBoundary ) {\n\t\t\tvar e, eNext;\n\n\t\t\tfor( e = mesh.eHead.next; e !== mesh.eHead; e = eNext ) {\n\t\t\t\teNext = e.next;\n\t\t\t\tif( e.Rface.inside !== e.Lface.inside ) {\n\n\t\t\t\t\t/* This is a boundary edge (one side is interior, one is exterior). */\n\t\t\t\t\te.winding = (e.Lface.inside) ? value : -value;\n\t\t\t\t} else {\n\n\t\t\t\t\t/* Both regions are interior, or both are exterior. */\n\t\t\t\t\tif( ! keepOnlyBoundary ) {\n\t\t\t\t\t\te.winding = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmesh.delete( e );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tgetNeighbourFace_: function(edge)\n\t\t{\n\t\t\tif (!edge.Rface)\n\t\t\t\treturn -1;\n\t\t\tif (!edge.Rface.inside)\n\t\t\t\treturn -1;\n\t\t\treturn edge.Rface.n;\n\t\t},\n\n\t\toutputPolymesh_: function( mesh, elementType, polySize, vertexSize ) {\n\t\t\tvar v;\n\t\t\tvar f;\n\t\t\tvar edge;\n\t\t\tvar maxFaceCount = 0;\n\t\t\tvar maxVertexCount = 0;\n\t\t\tvar faceVerts, i;\n\t\t\tvar elements = 0;\n\t\t\tvar vert;\n\n\t\t\t// Assume that the input data is triangles now.\n\t\t\t// Try to merge as many polygons as possible\n\t\t\tif (polySize > 3)\n\t\t\t{\n\t\t\t\tmesh.mergeConvexFaces( polySize );\n\t\t\t}\n\n\t\t\t// Mark unused\n\t\t\tfor ( v = mesh.vHead.next; v !== mesh.vHead; v = v.next )\n\t\t\t\tv.n = -1;\n\n\t\t\t// Create unique IDs for all vertices and faces.\n\t\t\tfor ( f = mesh.fHead.next; f != mesh.fHead; f = f.next )\n\t\t\t{\n\t\t\t\tf.n = -1;\n\t\t\t\tif( !f.inside ) continue;\n\n\t\t\t\tedge = f.anEdge;\n\t\t\t\tfaceVerts = 0;\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\tv = edge.Org;\n\t\t\t\t\tif ( v.n === -1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tv.n = maxVertexCount;\n\t\t\t\t\t\tmaxVertexCount++;\n\t\t\t\t\t}\n\t\t\t\t\tfaceVerts++;\n\t\t\t\t\tedge = edge.Lnext;\n\t\t\t\t}\n\t\t\t\twhile (edge !== f.anEdge);\n\t\t\t\t\n\t\t\t\tassert( faceVerts <= polySize );\n\n\t\t\t\tf.n = maxFaceCount;\n\t\t\t\t++maxFaceCount;\n\t\t\t}\n\n\t\t\tthis.elementCount = maxFaceCount;\n\t\t\tif (elementType == Tess2.CONNECTED_POLYGONS)\n\t\t\t\tmaxFaceCount *= 2;\n\t/*\t\ttess.elements = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  sizeof(TESSindex) * maxFaceCount * polySize );\n\t\t\tif (!tess->elements)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.elements = [];\n\t\t\tthis.elements.length = maxFaceCount * polySize;\n\t\t\t\n\t\t\tthis.vertexCount = maxVertexCount;\n\t/*\t\ttess->vertices = (TESSreal*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t sizeof(TESSreal) * tess->vertexCount * vertexSize );\n\t\t\tif (!tess->vertices)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.vertices = [];\n\t\t\tthis.vertices.length = maxVertexCount * vertexSize;\n\n\t/*\t\ttess->vertexIndices = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    sizeof(TESSindex) * tess->vertexCount );\n\t\t\tif (!tess->vertexIndices)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.vertexIndices = [];\n\t\t\tthis.vertexIndices.length = maxVertexCount;\n\n\t\t\t\n\t\t\t// Output vertices.\n\t\t\tfor ( v = mesh.vHead.next; v !== mesh.vHead; v = v.next )\n\t\t\t{\n\t\t\t\tif ( v.n != -1 )\n\t\t\t\t{\n\t\t\t\t\t// Store coordinate\n\t\t\t\t\tvar idx = v.n * vertexSize;\n\t\t\t\t\tthis.vertices[idx+0] = v.coords[0];\n\t\t\t\t\tthis.vertices[idx+1] = v.coords[1];\n\t\t\t\t\tif ( vertexSize > 2 )\n\t\t\t\t\t\tthis.vertices[idx+2] = v.coords[2];\n\t\t\t\t\t// Store vertex index.\n\t\t\t\t\tthis.vertexIndices[v.n] = v.idx;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Output indices.\n\t\t\tvar nel = 0;\n\t\t\tfor ( f = mesh.fHead.next; f !== mesh.fHead; f = f.next )\n\t\t\t{\n\t\t\t\tif ( !f.inside ) continue;\n\t\t\t\t\n\t\t\t\t// Store polygon\n\t\t\t\tedge = f.anEdge;\n\t\t\t\tfaceVerts = 0;\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\tv = edge.Org;\n\t\t\t\t\tthis.elements[nel++] = v.n;\n\t\t\t\t\tfaceVerts++;\n\t\t\t\t\tedge = edge.Lnext;\n\t\t\t\t}\n\t\t\t\twhile (edge !== f.anEdge);\n\t\t\t\t// Fill unused.\n\t\t\t\tfor (i = faceVerts; i < polySize; ++i)\n\t\t\t\t\tthis.elements[nel++] = -1;\n\n\t\t\t\t// Store polygon connectivity\n\t\t\t\tif ( elementType == Tess2.CONNECTED_POLYGONS )\n\t\t\t\t{\n\t\t\t\t\tedge = f.anEdge;\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.elements[nel++] = this.getNeighbourFace_( edge );\n\t\t\t\t\t\tedge = edge.Lnext;\n\t\t\t\t\t}\n\t\t\t\t\twhile (edge !== f.anEdge);\n\t\t\t\t\t// Fill unused.\n\t\t\t\t\tfor (i = faceVerts; i < polySize; ++i)\n\t\t\t\t\t\tthis.elements[nel++] = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t//\tvoid OutputContours( TESStesselator *tess, TESSmesh *mesh, int vertexSize )\n\t\toutputContours_: function( mesh, vertexSize ) {\n\t\t\tvar f;\n\t\t\tvar edge;\n\t\t\tvar start;\n\t\t\tvar verts;\n\t\t\tvar elements;\n\t\t\tvar vertInds;\n\t\t\tvar startVert = 0;\n\t\t\tvar vertCount = 0;\n\n\t\t\tthis.vertexCount = 0;\n\t\t\tthis.elementCount = 0;\n\n\t\t\tfor ( f = mesh.fHead.next; f !== mesh.fHead; f = f.next )\n\t\t\t{\n\t\t\t\tif ( !f.inside ) continue;\n\n\t\t\t\tstart = edge = f.anEdge;\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\tthis.vertexCount++;\n\t\t\t\t\tedge = edge.Lnext;\n\t\t\t\t}\n\t\t\t\twhile ( edge !== start );\n\n\t\t\t\tthis.elementCount++;\n\t\t\t}\n\n\t/*\t\ttess->elements = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  sizeof(TESSindex) * tess->elementCount * 2 );\n\t\t\tif (!tess->elements)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.elements = [];\n\t\t\tthis.elements.length = this.elementCount * 2;\n\t\t\t\n\t/*\t\ttess->vertices = (TESSreal*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  sizeof(TESSreal) * tess->vertexCount * vertexSize );\n\t\t\tif (!tess->vertices)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.vertices = [];\n\t\t\tthis.vertices.length = this.vertexCount * vertexSize;\n\n\t/*\t\ttess->vertexIndices = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    sizeof(TESSindex) * tess->vertexCount );\n\t\t\tif (!tess->vertexIndices)\n\t\t\t{\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\t\t\tthis.vertexIndices = [];\n\t\t\tthis.vertexIndices.length = this.vertexCount;\n\n\t\t\tvar nv = 0;\n\t\t\tvar nvi = 0;\n\t\t\tvar nel = 0;\n\t\t\tstartVert = 0;\n\n\t\t\tfor ( f = mesh.fHead.next; f !== mesh.fHead; f = f.next )\n\t\t\t{\n\t\t\t\tif ( !f.inside ) continue;\n\n\t\t\t\tvertCount = 0;\n\t\t\t\tstart = edge = f.anEdge;\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\tthis.vertices[nv++] = edge.Org.coords[0];\n\t\t\t\t\tthis.vertices[nv++] = edge.Org.coords[1];\n\t\t\t\t\tif ( vertexSize > 2 )\n\t\t\t\t\t\tthis.vertices[nv++] = edge.Org.coords[2];\n\t\t\t\t\tthis.vertexIndices[nvi++] = edge.Org.idx;\n\t\t\t\t\tvertCount++;\n\t\t\t\t\tedge = edge.Lnext;\n\t\t\t\t}\n\t\t\t\twhile ( edge !== start );\n\n\t\t\t\tthis.elements[nel++] = startVert;\n\t\t\t\tthis.elements[nel++] = vertCount;\n\n\t\t\t\tstartVert += vertCount;\n\t\t\t}\n\t\t},\n\n\t\taddContour: function( size, vertices )\n\t\t{\n\t\t\tvar e;\n\t\t\tvar i;\n\n\t\t\tif ( this.mesh === null )\n\t\t\t  \tthis.mesh = new TESSmesh();\n\t/*\t \tif ( tess->mesh == NULL ) {\n\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\treturn;\n\t\t\t}*/\n\n\t\t\tif ( size < 2 )\n\t\t\t\tsize = 2;\n\t\t\tif ( size > 3 )\n\t\t\t\tsize = 3;\n\n\t\t\te = null;\n\n\t\t\tfor( i = 0; i < vertices.length; i += size )\n\t\t\t{\n\t\t\t\tif( e == null ) {\n\t\t\t\t\t/* Make a self-loop (one vertex, one edge). */\n\t\t\t\t\te = this.mesh.makeEdge();\n\t/*\t\t\t\tif ( e == NULL ) {\n\t\t\t\t\t\ttess->outOfMemory = 1;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}*/\n\t\t\t\t\tthis.mesh.splice( e, e.Sym );\n\t\t\t\t} else {\n\t\t\t\t\t/* Create a new vertex and edge which immediately follow e\n\t\t\t\t\t* in the ordering around the left face.\n\t\t\t\t\t*/\n\t\t\t\t\tthis.mesh.splitEdge( e );\n\t\t\t\t\te = e.Lnext;\n\t\t\t\t}\n\n\t\t\t\t/* The new vertex is now e->Org. */\n\t\t\t\te.Org.coords[0] = vertices[i+0];\n\t\t\t\te.Org.coords[1] = vertices[i+1];\n\t\t\t\tif ( size > 2 )\n\t\t\t\t\te.Org.coords[2] = vertices[i+2];\n\t\t\t\telse\n\t\t\t\t\te.Org.coords[2] = 0.0;\n\t\t\t\t/* Store the insertion number so that the vertex can be later recognized. */\n\t\t\t\te.Org.idx = this.vertexIndexCounter++;\n\n\t\t\t\t/* The winding of an edge says how the winding number changes as we\n\t\t\t\t* cross from the edge''s right face to its left face.  We add the\n\t\t\t\t* vertices in such an order that a CCW contour will add +1 to\n\t\t\t\t* the winding number of the region inside the contour.\n\t\t\t\t*/\n\t\t\t\te.winding = 1;\n\t\t\t\te.Sym.winding = -1;\n\t\t\t}\n\t\t},\n\n\t//\tint tessTesselate( TESStesselator *tess, int windingRule, int elementType, int polySize, int vertexSize, const TESSreal* normal )\n\t\ttesselate: function( windingRule, elementType, polySize, vertexSize, normal ) {\n\t\t\tthis.vertices = [];\n\t\t\tthis.elements = [];\n\t\t\tthis.vertexIndices = [];\n\n\t\t\tthis.vertexIndexCounter = 0;\n\t\t\t\n\t\t\tif (normal)\n\t\t\t{\n\t\t\t\tthis.normal[0] = normal[0];\n\t\t\t\tthis.normal[1] = normal[1];\n\t\t\t\tthis.normal[2] = normal[2];\n\t\t\t}\n\n\t\t\tthis.windingRule = windingRule;\n\n\t\t\tif (vertexSize < 2)\n\t\t\t\tvertexSize = 2;\n\t\t\tif (vertexSize > 3)\n\t\t\t\tvertexSize = 3;\n\n\t/*\t\tif (setjmp(tess->env) != 0) { \n\t\t\t\t// come back here if out of memory\n\t\t\t\treturn 0;\n\t\t\t}*/\n\n\t\t\tif (!this.mesh)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t/* Determine the polygon normal and project vertices onto the plane\n\t\t\t* of the polygon.\n\t\t\t*/\n\t\t\tthis.projectPolygon_();\n\n\t\t\t/* tessComputeInterior( tess ) computes the planar arrangement specified\n\t\t\t* by the given contours, and further subdivides this arrangement\n\t\t\t* into regions.  Each region is marked \"inside\" if it belongs\n\t\t\t* to the polygon, according to the rule given by tess->windingRule.\n\t\t\t* Each interior region is guaranteed be monotone.\n\t\t\t*/\n\t\t\tSweep.computeInterior( this );\n\n\t\t\tvar mesh = this.mesh;\n\n\t\t\t/* If the user wants only the boundary contours, we throw away all edges\n\t\t\t* except those which separate the interior from the exterior.\n\t\t\t* Otherwise we tessellate all the regions marked \"inside\".\n\t\t\t*/\n\t\t\tif (elementType == Tess2.BOUNDARY_CONTOURS) {\n\t\t\t\tthis.setWindingNumber_( mesh, 1, true );\n\t\t\t} else {\n\t\t\t\tthis.tessellateInterior_( mesh ); \n\t\t\t}\n\t//\t\tif (rc == 0) longjmp(tess->env,1);  /* could've used a label */\n\n\t\t\tmesh.check();\n\n\t\t\tif (elementType == Tess2.BOUNDARY_CONTOURS) {\n\t\t\t\tthis.outputContours_( mesh, vertexSize );     /* output contours */\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.outputPolymesh_( mesh, elementType, polySize, vertexSize );     /* output polygons */\n\t\t\t}\n\n//\t\t\ttess.mesh = null;\n\n\t\t\treturn true;\n\t\t}\n\t};\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/tess2/src/tess2.js?");

/***/ }),

/***/ "../../node_modules/tiny-inflate/index.js":
/*!*******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/tiny-inflate/index.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var TINF_OK = 0;\nvar TINF_DATA_ERROR = -3;\n\nfunction Tree() {\n  this.table = new Uint16Array(16);   /* table of code length counts */\n  this.trans = new Uint16Array(288);  /* code -> symbol translation table */\n}\n\nfunction Data(source, dest) {\n  this.source = source;\n  this.sourceIndex = 0;\n  this.tag = 0;\n  this.bitcount = 0;\n  \n  this.dest = dest;\n  this.destLen = 0;\n  \n  this.ltree = new Tree();  /* dynamic length/symbol tree */\n  this.dtree = new Tree();  /* dynamic distance tree */\n}\n\n/* --------------------------------------------------- *\n * -- uninitialized global data (static structures) -- *\n * --------------------------------------------------- */\n\nvar sltree = new Tree();\nvar sdtree = new Tree();\n\n/* extra bits and base tables for length codes */\nvar length_bits = new Uint8Array(30);\nvar length_base = new Uint16Array(30);\n\n/* extra bits and base tables for distance codes */\nvar dist_bits = new Uint8Array(30);\nvar dist_base = new Uint16Array(30);\n\n/* special ordering of code length codes */\nvar clcidx = new Uint8Array([\n  16, 17, 18, 0, 8, 7, 9, 6,\n  10, 5, 11, 4, 12, 3, 13, 2,\n  14, 1, 15\n]);\n\n/* used by tinf_decode_trees, avoids allocations every call */\nvar code_tree = new Tree();\nvar lengths = new Uint8Array(288 + 32);\n\n/* ----------------------- *\n * -- utility functions -- *\n * ----------------------- */\n\n/* build extra bits and base tables */\nfunction tinf_build_bits_base(bits, base, delta, first) {\n  var i, sum;\n\n  /* build bits table */\n  for (i = 0; i < delta; ++i) bits[i] = 0;\n  for (i = 0; i < 30 - delta; ++i) bits[i + delta] = i / delta | 0;\n\n  /* build base table */\n  for (sum = first, i = 0; i < 30; ++i) {\n    base[i] = sum;\n    sum += 1 << bits[i];\n  }\n}\n\n/* build the fixed huffman trees */\nfunction tinf_build_fixed_trees(lt, dt) {\n  var i;\n\n  /* build fixed length tree */\n  for (i = 0; i < 7; ++i) lt.table[i] = 0;\n\n  lt.table[7] = 24;\n  lt.table[8] = 152;\n  lt.table[9] = 112;\n\n  for (i = 0; i < 24; ++i) lt.trans[i] = 256 + i;\n  for (i = 0; i < 144; ++i) lt.trans[24 + i] = i;\n  for (i = 0; i < 8; ++i) lt.trans[24 + 144 + i] = 280 + i;\n  for (i = 0; i < 112; ++i) lt.trans[24 + 144 + 8 + i] = 144 + i;\n\n  /* build fixed distance tree */\n  for (i = 0; i < 5; ++i) dt.table[i] = 0;\n\n  dt.table[5] = 32;\n\n  for (i = 0; i < 32; ++i) dt.trans[i] = i;\n}\n\n/* given an array of code lengths, build a tree */\nvar offs = new Uint16Array(16);\n\nfunction tinf_build_tree(t, lengths, off, num) {\n  var i, sum;\n\n  /* clear code length count table */\n  for (i = 0; i < 16; ++i) t.table[i] = 0;\n\n  /* scan symbol lengths, and sum code length counts */\n  for (i = 0; i < num; ++i) t.table[lengths[off + i]]++;\n\n  t.table[0] = 0;\n\n  /* compute offset table for distribution sort */\n  for (sum = 0, i = 0; i < 16; ++i) {\n    offs[i] = sum;\n    sum += t.table[i];\n  }\n\n  /* create code->symbol translation table (symbols sorted by code) */\n  for (i = 0; i < num; ++i) {\n    if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;\n  }\n}\n\n/* ---------------------- *\n * -- decode functions -- *\n * ---------------------- */\n\n/* get one bit from source stream */\nfunction tinf_getbit(d) {\n  /* check if tag is empty */\n  if (!d.bitcount--) {\n    /* load next tag */\n    d.tag = d.source[d.sourceIndex++];\n    d.bitcount = 7;\n  }\n\n  /* shift bit out of tag */\n  var bit = d.tag & 1;\n  d.tag >>>= 1;\n\n  return bit;\n}\n\n/* read a num bit value from a stream and add base */\nfunction tinf_read_bits(d, num, base) {\n  if (!num)\n    return base;\n\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n\n  var val = d.tag & (0xffff >>> (16 - num));\n  d.tag >>>= num;\n  d.bitcount -= num;\n  return val + base;\n}\n\n/* given a data stream and a tree, decode a symbol */\nfunction tinf_decode_symbol(d, t) {\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n  \n  var sum = 0, cur = 0, len = 0;\n  var tag = d.tag;\n\n  /* get more bits while code value is above sum */\n  do {\n    cur = 2 * cur + (tag & 1);\n    tag >>>= 1;\n    ++len;\n\n    sum += t.table[len];\n    cur -= t.table[len];\n  } while (cur >= 0);\n  \n  d.tag = tag;\n  d.bitcount -= len;\n\n  return t.trans[sum + cur];\n}\n\n/* given a data stream, decode dynamic trees from it */\nfunction tinf_decode_trees(d, lt, dt) {\n  var hlit, hdist, hclen;\n  var i, num, length;\n\n  /* get 5 bits HLIT (257-286) */\n  hlit = tinf_read_bits(d, 5, 257);\n\n  /* get 5 bits HDIST (1-32) */\n  hdist = tinf_read_bits(d, 5, 1);\n\n  /* get 4 bits HCLEN (4-19) */\n  hclen = tinf_read_bits(d, 4, 4);\n\n  for (i = 0; i < 19; ++i) lengths[i] = 0;\n\n  /* read code lengths for code length alphabet */\n  for (i = 0; i < hclen; ++i) {\n    /* get 3 bits code length (0-7) */\n    var clen = tinf_read_bits(d, 3, 0);\n    lengths[clcidx[i]] = clen;\n  }\n\n  /* build code length tree */\n  tinf_build_tree(code_tree, lengths, 0, 19);\n\n  /* decode code lengths for the dynamic trees */\n  for (num = 0; num < hlit + hdist;) {\n    var sym = tinf_decode_symbol(d, code_tree);\n\n    switch (sym) {\n      case 16:\n        /* copy previous code length 3-6 times (read 2 bits) */\n        var prev = lengths[num - 1];\n        for (length = tinf_read_bits(d, 2, 3); length; --length) {\n          lengths[num++] = prev;\n        }\n        break;\n      case 17:\n        /* repeat code length 0 for 3-10 times (read 3 bits) */\n        for (length = tinf_read_bits(d, 3, 3); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      case 18:\n        /* repeat code length 0 for 11-138 times (read 7 bits) */\n        for (length = tinf_read_bits(d, 7, 11); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      default:\n        /* values 0-15 represent the actual code lengths */\n        lengths[num++] = sym;\n        break;\n    }\n  }\n\n  /* build dynamic trees */\n  tinf_build_tree(lt, lengths, 0, hlit);\n  tinf_build_tree(dt, lengths, hlit, hdist);\n}\n\n/* ----------------------------- *\n * -- block inflate functions -- *\n * ----------------------------- */\n\n/* given a stream and two trees, inflate a block of data */\nfunction tinf_inflate_block_data(d, lt, dt) {\n  while (1) {\n    var sym = tinf_decode_symbol(d, lt);\n\n    /* check for end of block */\n    if (sym === 256) {\n      return TINF_OK;\n    }\n\n    if (sym < 256) {\n      d.dest[d.destLen++] = sym;\n    } else {\n      var length, dist, offs;\n      var i;\n\n      sym -= 257;\n\n      /* possibly get more bits from length code */\n      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n\n      dist = tinf_decode_symbol(d, dt);\n\n      /* possibly get more bits from distance code */\n      offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n\n      /* copy match */\n      for (i = offs; i < offs + length; ++i) {\n        d.dest[d.destLen++] = d.dest[i];\n      }\n    }\n  }\n}\n\n/* inflate an uncompressed block of data */\nfunction tinf_inflate_uncompressed_block(d) {\n  var length, invlength;\n  var i;\n  \n  /* unread from bitbuffer */\n  while (d.bitcount > 8) {\n    d.sourceIndex--;\n    d.bitcount -= 8;\n  }\n\n  /* get length */\n  length = d.source[d.sourceIndex + 1];\n  length = 256 * length + d.source[d.sourceIndex];\n\n  /* get one's complement of length */\n  invlength = d.source[d.sourceIndex + 3];\n  invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n\n  /* check length */\n  if (length !== (~invlength & 0x0000ffff))\n    return TINF_DATA_ERROR;\n\n  d.sourceIndex += 4;\n\n  /* copy block */\n  for (i = length; i; --i)\n    d.dest[d.destLen++] = d.source[d.sourceIndex++];\n\n  /* make sure we start next block on a byte boundary */\n  d.bitcount = 0;\n\n  return TINF_OK;\n}\n\n/* inflate stream from source to dest */\nfunction tinf_uncompress(source, dest) {\n  var d = new Data(source, dest);\n  var bfinal, btype, res;\n\n  do {\n    /* read final block flag */\n    bfinal = tinf_getbit(d);\n\n    /* read block type (2 bits) */\n    btype = tinf_read_bits(d, 2, 0);\n\n    /* decompress block */\n    switch (btype) {\n      case 0:\n        /* decompress uncompressed block */\n        res = tinf_inflate_uncompressed_block(d);\n        break;\n      case 1:\n        /* decompress block with fixed huffman trees */\n        res = tinf_inflate_block_data(d, sltree, sdtree);\n        break;\n      case 2:\n        /* decompress block with dynamic huffman trees */\n        tinf_decode_trees(d, d.ltree, d.dtree);\n        res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n        break;\n      default:\n        res = TINF_DATA_ERROR;\n    }\n\n    if (res !== TINF_OK)\n      throw new Error('Data error');\n\n  } while (!bfinal);\n\n  if (d.destLen < d.dest.length) {\n    if (typeof d.dest.slice === 'function')\n      return d.dest.slice(0, d.destLen);\n    else\n      return d.dest.subarray(0, d.destLen);\n  }\n  \n  return d.dest;\n}\n\n/* -------------------- *\n * -- initialization -- *\n * -------------------- */\n\n/* build fixed huffman trees */\ntinf_build_fixed_trees(sltree, sdtree);\n\n/* build extra bits and base tables */\ntinf_build_bits_base(length_bits, length_base, 4, 3);\ntinf_build_bits_base(dist_bits, dist_base, 2, 1);\n\n/* fix a special case */\nlength_bits[28] = 0;\nlength_base[28] = 258;\n\nmodule.exports = tinf_uncompress;\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/tiny-inflate/index.js?");

/***/ }),

/***/ "../../node_modules/util/support/isBufferBrowser.js":
/*!*****************************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/util/support/isBufferBrowser.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/util/support/isBufferBrowser.js?");

/***/ }),

/***/ "../../node_modules/util/util.js":
/*!**********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/util/util.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ \"../../node_modules/util/support/isBufferBrowser.js\");\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = __webpack_require__(/*! inherits */ \"../../node_modules/inherits/inherits_browser.js\");\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb, null, ret) },\n            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"../../node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/util/util.js?");

/***/ }),

/***/ "../../node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack://JSxCAD/(webpack)/buildin/global.js?");

/***/ }),

/***/ "../../node_modules/xmldom/dom-parser.js":
/*!******************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/xmldom/dom-parser.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function DOMParser(options){\r\n\tthis.options = options ||{locator:{}};\r\n\t\r\n}\r\nDOMParser.prototype.parseFromString = function(source,mimeType){\r\n\tvar options = this.options;\r\n\tvar sax =  new XMLReader();\r\n\tvar domBuilder = options.domBuilder || new DOMHandler();//contentHandler and LexicalHandler\r\n\tvar errorHandler = options.errorHandler;\r\n\tvar locator = options.locator;\r\n\tvar defaultNSMap = options.xmlns||{};\r\n\tvar entityMap = {'lt':'<','gt':'>','amp':'&','quot':'\"','apos':\"'\"}\r\n\tif(locator){\r\n\t\tdomBuilder.setDocumentLocator(locator)\r\n\t}\r\n\t\r\n\tsax.errorHandler = buildErrorHandler(errorHandler,domBuilder,locator);\r\n\tsax.domBuilder = options.domBuilder || domBuilder;\r\n\tif(/\\/x?html?$/.test(mimeType)){\r\n\t\tentityMap.nbsp = '\\xa0';\r\n\t\tentityMap.copy = '\\xa9';\r\n\t\tdefaultNSMap['']= 'http://www.w3.org/1999/xhtml';\r\n\t}\r\n\tdefaultNSMap.xml = defaultNSMap.xml || 'http://www.w3.org/XML/1998/namespace';\r\n\tif(source){\r\n\t\tsax.parse(source,defaultNSMap,entityMap);\r\n\t}else{\r\n\t\tsax.errorHandler.error(\"invalid doc source\");\r\n\t}\r\n\treturn domBuilder.doc;\r\n}\r\nfunction buildErrorHandler(errorImpl,domBuilder,locator){\r\n\tif(!errorImpl){\r\n\t\tif(domBuilder instanceof DOMHandler){\r\n\t\t\treturn domBuilder;\r\n\t\t}\r\n\t\terrorImpl = domBuilder ;\r\n\t}\r\n\tvar errorHandler = {}\r\n\tvar isCallback = errorImpl instanceof Function;\r\n\tlocator = locator||{}\r\n\tfunction build(key){\r\n\t\tvar fn = errorImpl[key];\r\n\t\tif(!fn && isCallback){\r\n\t\t\tfn = errorImpl.length == 2?function(msg){errorImpl(key,msg)}:errorImpl;\r\n\t\t}\r\n\t\terrorHandler[key] = fn && function(msg){\r\n\t\t\tfn('[xmldom '+key+']\\t'+msg+_locator(locator));\r\n\t\t}||function(){};\r\n\t}\r\n\tbuild('warning');\r\n\tbuild('error');\r\n\tbuild('fatalError');\r\n\treturn errorHandler;\r\n}\r\n\r\n//console.log('#\\n\\n\\n\\n\\n\\n\\n####')\r\n/**\r\n * +ContentHandler+ErrorHandler\r\n * +LexicalHandler+EntityResolver2\r\n * -DeclHandler-DTDHandler \r\n * \r\n * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler\r\n * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html\r\n */\r\nfunction DOMHandler() {\r\n    this.cdata = false;\r\n}\r\nfunction position(locator,node){\r\n\tnode.lineNumber = locator.lineNumber;\r\n\tnode.columnNumber = locator.columnNumber;\r\n}\r\n/**\r\n * @see org.xml.sax.ContentHandler#startDocument\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html\r\n */ \r\nDOMHandler.prototype = {\r\n\tstartDocument : function() {\r\n    \tthis.doc = new DOMImplementation().createDocument(null, null, null);\r\n    \tif (this.locator) {\r\n        \tthis.doc.documentURI = this.locator.systemId;\r\n    \t}\r\n\t},\r\n\tstartElement:function(namespaceURI, localName, qName, attrs) {\r\n\t\tvar doc = this.doc;\r\n\t    var el = doc.createElementNS(namespaceURI, qName||localName);\r\n\t    var len = attrs.length;\r\n\t    appendElement(this, el);\r\n\t    this.currentElement = el;\r\n\t    \r\n\t\tthis.locator && position(this.locator,el)\r\n\t    for (var i = 0 ; i < len; i++) {\r\n\t        var namespaceURI = attrs.getURI(i);\r\n\t        var value = attrs.getValue(i);\r\n\t        var qName = attrs.getQName(i);\r\n\t\t\tvar attr = doc.createAttributeNS(namespaceURI, qName);\r\n\t\t\tthis.locator &&position(attrs.getLocator(i),attr);\r\n\t\t\tattr.value = attr.nodeValue = value;\r\n\t\t\tel.setAttributeNode(attr)\r\n\t    }\r\n\t},\r\n\tendElement:function(namespaceURI, localName, qName) {\r\n\t\tvar current = this.currentElement\r\n\t\tvar tagName = current.tagName;\r\n\t\tthis.currentElement = current.parentNode;\r\n\t},\r\n\tstartPrefixMapping:function(prefix, uri) {\r\n\t},\r\n\tendPrefixMapping:function(prefix) {\r\n\t},\r\n\tprocessingInstruction:function(target, data) {\r\n\t    var ins = this.doc.createProcessingInstruction(target, data);\r\n\t    this.locator && position(this.locator,ins)\r\n\t    appendElement(this, ins);\r\n\t},\r\n\tignorableWhitespace:function(ch, start, length) {\r\n\t},\r\n\tcharacters:function(chars, start, length) {\r\n\t\tchars = _toString.apply(this,arguments)\r\n\t\t//console.log(chars)\r\n\t\tif(chars){\r\n\t\t\tif (this.cdata) {\r\n\t\t\t\tvar charNode = this.doc.createCDATASection(chars);\r\n\t\t\t} else {\r\n\t\t\t\tvar charNode = this.doc.createTextNode(chars);\r\n\t\t\t}\r\n\t\t\tif(this.currentElement){\r\n\t\t\t\tthis.currentElement.appendChild(charNode);\r\n\t\t\t}else if(/^\\s*$/.test(chars)){\r\n\t\t\t\tthis.doc.appendChild(charNode);\r\n\t\t\t\t//process xml\r\n\t\t\t}\r\n\t\t\tthis.locator && position(this.locator,charNode)\r\n\t\t}\r\n\t},\r\n\tskippedEntity:function(name) {\r\n\t},\r\n\tendDocument:function() {\r\n\t\tthis.doc.normalize();\r\n\t},\r\n\tsetDocumentLocator:function (locator) {\r\n\t    if(this.locator = locator){// && !('lineNumber' in locator)){\r\n\t    \tlocator.lineNumber = 0;\r\n\t    }\r\n\t},\r\n\t//LexicalHandler\r\n\tcomment:function(chars, start, length) {\r\n\t\tchars = _toString.apply(this,arguments)\r\n\t    var comm = this.doc.createComment(chars);\r\n\t    this.locator && position(this.locator,comm)\r\n\t    appendElement(this, comm);\r\n\t},\r\n\t\r\n\tstartCDATA:function() {\r\n\t    //used in characters() methods\r\n\t    this.cdata = true;\r\n\t},\r\n\tendCDATA:function() {\r\n\t    this.cdata = false;\r\n\t},\r\n\t\r\n\tstartDTD:function(name, publicId, systemId) {\r\n\t\tvar impl = this.doc.implementation;\r\n\t    if (impl && impl.createDocumentType) {\r\n\t        var dt = impl.createDocumentType(name, publicId, systemId);\r\n\t        this.locator && position(this.locator,dt)\r\n\t        appendElement(this, dt);\r\n\t    }\r\n\t},\r\n\t/**\r\n\t * @see org.xml.sax.ErrorHandler\r\n\t * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html\r\n\t */\r\n\twarning:function(error) {\r\n\t\tconsole.warn('[xmldom warning]\\t'+error,_locator(this.locator));\r\n\t},\r\n\terror:function(error) {\r\n\t\tconsole.error('[xmldom error]\\t'+error,_locator(this.locator));\r\n\t},\r\n\tfatalError:function(error) {\r\n\t\tconsole.error('[xmldom fatalError]\\t'+error,_locator(this.locator));\r\n\t    throw error;\r\n\t}\r\n}\r\nfunction _locator(l){\r\n\tif(l){\r\n\t\treturn '\\n@'+(l.systemId ||'')+'#[line:'+l.lineNumber+',col:'+l.columnNumber+']'\r\n\t}\r\n}\r\nfunction _toString(chars,start,length){\r\n\tif(typeof chars == 'string'){\r\n\t\treturn chars.substr(start,length)\r\n\t}else{//java sax connect width xmldom on rhino(what about: \"? && !(chars instanceof String)\")\r\n\t\tif(chars.length >= start+length || start){\r\n\t\t\treturn new java.lang.String(chars,start,length)+'';\r\n\t\t}\r\n\t\treturn chars;\r\n\t}\r\n}\r\n\r\n/*\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html\r\n * used method of org.xml.sax.ext.LexicalHandler:\r\n *  #comment(chars, start, length)\r\n *  #startCDATA()\r\n *  #endCDATA()\r\n *  #startDTD(name, publicId, systemId)\r\n *\r\n *\r\n * IGNORED method of org.xml.sax.ext.LexicalHandler:\r\n *  #endDTD()\r\n *  #startEntity(name)\r\n *  #endEntity(name)\r\n *\r\n *\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html\r\n * IGNORED method of org.xml.sax.ext.DeclHandler\r\n * \t#attributeDecl(eName, aName, type, mode, value)\r\n *  #elementDecl(name, model)\r\n *  #externalEntityDecl(name, publicId, systemId)\r\n *  #internalEntityDecl(name, value)\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html\r\n * IGNORED method of org.xml.sax.EntityResolver2\r\n *  #resolveEntity(String name,String publicId,String baseURI,String systemId)\r\n *  #resolveEntity(publicId, systemId)\r\n *  #getExternalSubset(name, baseURI)\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html\r\n * IGNORED method of org.xml.sax.DTDHandler\r\n *  #notationDecl(name, publicId, systemId) {};\r\n *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};\r\n */\r\n\"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl\".replace(/\\w+/g,function(key){\r\n\tDOMHandler.prototype[key] = function(){return null}\r\n})\r\n\r\n/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */\r\nfunction appendElement (hander,node) {\r\n    if (!hander.currentElement) {\r\n        hander.doc.appendChild(node);\r\n    } else {\r\n        hander.currentElement.appendChild(node);\r\n    }\r\n}//appendChild and setAttributeNS are preformance key\r\n\r\n//if(typeof require == 'function'){\r\n\tvar XMLReader = __webpack_require__(/*! ./sax */ \"../../node_modules/xmldom/sax.js\").XMLReader;\r\n\tvar DOMImplementation = exports.DOMImplementation = __webpack_require__(/*! ./dom */ \"../../node_modules/xmldom/dom.js\").DOMImplementation;\r\n\texports.XMLSerializer = __webpack_require__(/*! ./dom */ \"../../node_modules/xmldom/dom.js\").XMLSerializer ;\r\n\texports.DOMParser = DOMParser;\r\n//}\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/xmldom/dom-parser.js?");

/***/ }),

/***/ "../../node_modules/xmldom/dom.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/xmldom/dom.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*\n * DOM Level 2\n * Object DOMException\n * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html\n */\n\nfunction copy(src,dest){\n\tfor(var p in src){\n\t\tdest[p] = src[p];\n\t}\n}\n/**\n^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*((?:.*\\{\\s*?[\\r\\n][\\s\\S]*?^})|\\S.*?(?=[;\\r\\n]));?\n^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*(\\S.*?(?=[;\\r\\n]));?\n */\nfunction _extends(Class,Super){\n\tvar pt = Class.prototype;\n\tif(Object.create){\n\t\tvar ppt = Object.create(Super.prototype)\n\t\tpt.__proto__ = ppt;\n\t}\n\tif(!(pt instanceof Super)){\n\t\tfunction t(){};\n\t\tt.prototype = Super.prototype;\n\t\tt = new t();\n\t\tcopy(pt,t);\n\t\tClass.prototype = pt = t;\n\t}\n\tif(pt.constructor != Class){\n\t\tif(typeof Class != 'function'){\n\t\t\tconsole.error(\"unknow Class:\"+Class)\n\t\t}\n\t\tpt.constructor = Class\n\t}\n}\nvar htmlns = 'http://www.w3.org/1999/xhtml' ;\n// Node Types\nvar NodeType = {}\nvar ELEMENT_NODE                = NodeType.ELEMENT_NODE                = 1;\nvar ATTRIBUTE_NODE              = NodeType.ATTRIBUTE_NODE              = 2;\nvar TEXT_NODE                   = NodeType.TEXT_NODE                   = 3;\nvar CDATA_SECTION_NODE          = NodeType.CDATA_SECTION_NODE          = 4;\nvar ENTITY_REFERENCE_NODE       = NodeType.ENTITY_REFERENCE_NODE       = 5;\nvar ENTITY_NODE                 = NodeType.ENTITY_NODE                 = 6;\nvar PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;\nvar COMMENT_NODE                = NodeType.COMMENT_NODE                = 8;\nvar DOCUMENT_NODE               = NodeType.DOCUMENT_NODE               = 9;\nvar DOCUMENT_TYPE_NODE          = NodeType.DOCUMENT_TYPE_NODE          = 10;\nvar DOCUMENT_FRAGMENT_NODE      = NodeType.DOCUMENT_FRAGMENT_NODE      = 11;\nvar NOTATION_NODE               = NodeType.NOTATION_NODE               = 12;\n\n// ExceptionCode\nvar ExceptionCode = {}\nvar ExceptionMessage = {};\nvar INDEX_SIZE_ERR              = ExceptionCode.INDEX_SIZE_ERR              = ((ExceptionMessage[1]=\"Index size error\"),1);\nvar DOMSTRING_SIZE_ERR          = ExceptionCode.DOMSTRING_SIZE_ERR          = ((ExceptionMessage[2]=\"DOMString size error\"),2);\nvar HIERARCHY_REQUEST_ERR       = ExceptionCode.HIERARCHY_REQUEST_ERR       = ((ExceptionMessage[3]=\"Hierarchy request error\"),3);\nvar WRONG_DOCUMENT_ERR          = ExceptionCode.WRONG_DOCUMENT_ERR          = ((ExceptionMessage[4]=\"Wrong document\"),4);\nvar INVALID_CHARACTER_ERR       = ExceptionCode.INVALID_CHARACTER_ERR       = ((ExceptionMessage[5]=\"Invalid character\"),5);\nvar NO_DATA_ALLOWED_ERR         = ExceptionCode.NO_DATA_ALLOWED_ERR         = ((ExceptionMessage[6]=\"No data allowed\"),6);\nvar NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = ((ExceptionMessage[7]=\"No modification allowed\"),7);\nvar NOT_FOUND_ERR               = ExceptionCode.NOT_FOUND_ERR               = ((ExceptionMessage[8]=\"Not found\"),8);\nvar NOT_SUPPORTED_ERR           = ExceptionCode.NOT_SUPPORTED_ERR           = ((ExceptionMessage[9]=\"Not supported\"),9);\nvar INUSE_ATTRIBUTE_ERR         = ExceptionCode.INUSE_ATTRIBUTE_ERR         = ((ExceptionMessage[10]=\"Attribute in use\"),10);\n//level2\nvar INVALID_STATE_ERR        \t= ExceptionCode.INVALID_STATE_ERR        \t= ((ExceptionMessage[11]=\"Invalid state\"),11);\nvar SYNTAX_ERR               \t= ExceptionCode.SYNTAX_ERR               \t= ((ExceptionMessage[12]=\"Syntax error\"),12);\nvar INVALID_MODIFICATION_ERR \t= ExceptionCode.INVALID_MODIFICATION_ERR \t= ((ExceptionMessage[13]=\"Invalid modification\"),13);\nvar NAMESPACE_ERR            \t= ExceptionCode.NAMESPACE_ERR           \t= ((ExceptionMessage[14]=\"Invalid namespace\"),14);\nvar INVALID_ACCESS_ERR       \t= ExceptionCode.INVALID_ACCESS_ERR      \t= ((ExceptionMessage[15]=\"Invalid access\"),15);\n\n\nfunction DOMException(code, message) {\n\tif(message instanceof Error){\n\t\tvar error = message;\n\t}else{\n\t\terror = this;\n\t\tError.call(this, ExceptionMessage[code]);\n\t\tthis.message = ExceptionMessage[code];\n\t\tif(Error.captureStackTrace) Error.captureStackTrace(this, DOMException);\n\t}\n\terror.code = code;\n\tif(message) this.message = this.message + \": \" + message;\n\treturn error;\n};\nDOMException.prototype = Error.prototype;\ncopy(ExceptionCode,DOMException)\n/**\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177\n * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.\n * The items in the NodeList are accessible via an integral index, starting from 0.\n */\nfunction NodeList() {\n};\nNodeList.prototype = {\n\t/**\n\t * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.\n\t * @standard level1\n\t */\n\tlength:0, \n\t/**\n\t * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.\n\t * @standard level1\n\t * @param index  unsigned long \n\t *   Index into the collection.\n\t * @return Node\n\t * \tThe node at the indexth position in the NodeList, or null if that is not a valid index. \n\t */\n\titem: function(index) {\n\t\treturn this[index] || null;\n\t},\n\ttoString:function(isHTML,nodeFilter){\n\t\tfor(var buf = [], i = 0;i<this.length;i++){\n\t\t\tserializeToString(this[i],buf,isHTML,nodeFilter);\n\t\t}\n\t\treturn buf.join('');\n\t}\n};\nfunction LiveNodeList(node,refresh){\n\tthis._node = node;\n\tthis._refresh = refresh\n\t_updateLiveList(this);\n}\nfunction _updateLiveList(list){\n\tvar inc = list._node._inc || list._node.ownerDocument._inc;\n\tif(list._inc != inc){\n\t\tvar ls = list._refresh(list._node);\n\t\t//console.log(ls.length)\n\t\t__set__(list,'length',ls.length);\n\t\tcopy(ls,list);\n\t\tlist._inc = inc;\n\t}\n}\nLiveNodeList.prototype.item = function(i){\n\t_updateLiveList(this);\n\treturn this[i];\n}\n\n_extends(LiveNodeList,NodeList);\n/**\n * \n * Objects implementing the NamedNodeMap interface are used to represent collections of nodes that can be accessed by name. Note that NamedNodeMap does not inherit from NodeList; NamedNodeMaps are not maintained in any particular order. Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a NamedNodeMap, and does not imply that the DOM specifies an order to these Nodes.\n * NamedNodeMap objects in the DOM are live.\n * used for attributes or DocumentType entities \n */\nfunction NamedNodeMap() {\n};\n\nfunction _findNodeIndex(list,node){\n\tvar i = list.length;\n\twhile(i--){\n\t\tif(list[i] === node){return i}\n\t}\n}\n\nfunction _addNamedNode(el,list,newAttr,oldAttr){\n\tif(oldAttr){\n\t\tlist[_findNodeIndex(list,oldAttr)] = newAttr;\n\t}else{\n\t\tlist[list.length++] = newAttr;\n\t}\n\tif(el){\n\t\tnewAttr.ownerElement = el;\n\t\tvar doc = el.ownerDocument;\n\t\tif(doc){\n\t\t\toldAttr && _onRemoveAttribute(doc,el,oldAttr);\n\t\t\t_onAddAttribute(doc,el,newAttr);\n\t\t}\n\t}\n}\nfunction _removeNamedNode(el,list,attr){\n\t//console.log('remove attr:'+attr)\n\tvar i = _findNodeIndex(list,attr);\n\tif(i>=0){\n\t\tvar lastIndex = list.length-1\n\t\twhile(i<lastIndex){\n\t\t\tlist[i] = list[++i]\n\t\t}\n\t\tlist.length = lastIndex;\n\t\tif(el){\n\t\t\tvar doc = el.ownerDocument;\n\t\t\tif(doc){\n\t\t\t\t_onRemoveAttribute(doc,el,attr);\n\t\t\t\tattr.ownerElement = null;\n\t\t\t}\n\t\t}\n\t}else{\n\t\tthrow DOMException(NOT_FOUND_ERR,new Error(el.tagName+'@'+attr))\n\t}\n}\nNamedNodeMap.prototype = {\n\tlength:0,\n\titem:NodeList.prototype.item,\n\tgetNamedItem: function(key) {\n//\t\tif(key.indexOf(':')>0 || key == 'xmlns'){\n//\t\t\treturn null;\n//\t\t}\n\t\t//console.log()\n\t\tvar i = this.length;\n\t\twhile(i--){\n\t\t\tvar attr = this[i];\n\t\t\t//console.log(attr.nodeName,key)\n\t\t\tif(attr.nodeName == key){\n\t\t\t\treturn attr;\n\t\t\t}\n\t\t}\n\t},\n\tsetNamedItem: function(attr) {\n\t\tvar el = attr.ownerElement;\n\t\tif(el && el!=this._ownerElement){\n\t\t\tthrow new DOMException(INUSE_ATTRIBUTE_ERR);\n\t\t}\n\t\tvar oldAttr = this.getNamedItem(attr.nodeName);\n\t\t_addNamedNode(this._ownerElement,this,attr,oldAttr);\n\t\treturn oldAttr;\n\t},\n\t/* returns Node */\n\tsetNamedItemNS: function(attr) {// raises: WRONG_DOCUMENT_ERR,NO_MODIFICATION_ALLOWED_ERR,INUSE_ATTRIBUTE_ERR\n\t\tvar el = attr.ownerElement, oldAttr;\n\t\tif(el && el!=this._ownerElement){\n\t\t\tthrow new DOMException(INUSE_ATTRIBUTE_ERR);\n\t\t}\n\t\toldAttr = this.getNamedItemNS(attr.namespaceURI,attr.localName);\n\t\t_addNamedNode(this._ownerElement,this,attr,oldAttr);\n\t\treturn oldAttr;\n\t},\n\n\t/* returns Node */\n\tremoveNamedItem: function(key) {\n\t\tvar attr = this.getNamedItem(key);\n\t\t_removeNamedNode(this._ownerElement,this,attr);\n\t\treturn attr;\n\t\t\n\t\t\n\t},// raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR\n\t\n\t//for level2\n\tremoveNamedItemNS:function(namespaceURI,localName){\n\t\tvar attr = this.getNamedItemNS(namespaceURI,localName);\n\t\t_removeNamedNode(this._ownerElement,this,attr);\n\t\treturn attr;\n\t},\n\tgetNamedItemNS: function(namespaceURI, localName) {\n\t\tvar i = this.length;\n\t\twhile(i--){\n\t\t\tvar node = this[i];\n\t\t\tif(node.localName == localName && node.namespaceURI == namespaceURI){\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n};\n/**\n * @see http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490\n */\nfunction DOMImplementation(/* Object */ features) {\n\tthis._features = {};\n\tif (features) {\n\t\tfor (var feature in features) {\n\t\t\t this._features = features[feature];\n\t\t}\n\t}\n};\n\nDOMImplementation.prototype = {\n\thasFeature: function(/* string */ feature, /* string */ version) {\n\t\tvar versions = this._features[feature.toLowerCase()];\n\t\tif (versions && (!version || version in versions)) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t},\n\t// Introduced in DOM Level 2:\n\tcreateDocument:function(namespaceURI,  qualifiedName, doctype){// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR,WRONG_DOCUMENT_ERR\n\t\tvar doc = new Document();\n\t\tdoc.implementation = this;\n\t\tdoc.childNodes = new NodeList();\n\t\tdoc.doctype = doctype;\n\t\tif(doctype){\n\t\t\tdoc.appendChild(doctype);\n\t\t}\n\t\tif(qualifiedName){\n\t\t\tvar root = doc.createElementNS(namespaceURI,qualifiedName);\n\t\t\tdoc.appendChild(root);\n\t\t}\n\t\treturn doc;\n\t},\n\t// Introduced in DOM Level 2:\n\tcreateDocumentType:function(qualifiedName, publicId, systemId){// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR\n\t\tvar node = new DocumentType();\n\t\tnode.name = qualifiedName;\n\t\tnode.nodeName = qualifiedName;\n\t\tnode.publicId = publicId;\n\t\tnode.systemId = systemId;\n\t\t// Introduced in DOM Level 2:\n\t\t//readonly attribute DOMString        internalSubset;\n\t\t\n\t\t//TODO:..\n\t\t//  readonly attribute NamedNodeMap     entities;\n\t\t//  readonly attribute NamedNodeMap     notations;\n\t\treturn node;\n\t}\n};\n\n\n/**\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247\n */\n\nfunction Node() {\n};\n\nNode.prototype = {\n\tfirstChild : null,\n\tlastChild : null,\n\tpreviousSibling : null,\n\tnextSibling : null,\n\tattributes : null,\n\tparentNode : null,\n\tchildNodes : null,\n\townerDocument : null,\n\tnodeValue : null,\n\tnamespaceURI : null,\n\tprefix : null,\n\tlocalName : null,\n\t// Modified in DOM Level 2:\n\tinsertBefore:function(newChild, refChild){//raises \n\t\treturn _insertBefore(this,newChild,refChild);\n\t},\n\treplaceChild:function(newChild, oldChild){//raises \n\t\tthis.insertBefore(newChild,oldChild);\n\t\tif(oldChild){\n\t\t\tthis.removeChild(oldChild);\n\t\t}\n\t},\n\tremoveChild:function(oldChild){\n\t\treturn _removeChild(this,oldChild);\n\t},\n\tappendChild:function(newChild){\n\t\treturn this.insertBefore(newChild,null);\n\t},\n\thasChildNodes:function(){\n\t\treturn this.firstChild != null;\n\t},\n\tcloneNode:function(deep){\n\t\treturn cloneNode(this.ownerDocument||this,this,deep);\n\t},\n\t// Modified in DOM Level 2:\n\tnormalize:function(){\n\t\tvar child = this.firstChild;\n\t\twhile(child){\n\t\t\tvar next = child.nextSibling;\n\t\t\tif(next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE){\n\t\t\t\tthis.removeChild(next);\n\t\t\t\tchild.appendData(next.data);\n\t\t\t}else{\n\t\t\t\tchild.normalize();\n\t\t\t\tchild = next;\n\t\t\t}\n\t\t}\n\t},\n  \t// Introduced in DOM Level 2:\n\tisSupported:function(feature, version){\n\t\treturn this.ownerDocument.implementation.hasFeature(feature,version);\n\t},\n    // Introduced in DOM Level 2:\n    hasAttributes:function(){\n    \treturn this.attributes.length>0;\n    },\n    lookupPrefix:function(namespaceURI){\n    \tvar el = this;\n    \twhile(el){\n    \t\tvar map = el._nsMap;\n    \t\t//console.dir(map)\n    \t\tif(map){\n    \t\t\tfor(var n in map){\n    \t\t\t\tif(map[n] == namespaceURI){\n    \t\t\t\t\treturn n;\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t\tel = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;\n    \t}\n    \treturn null;\n    },\n    // Introduced in DOM Level 3:\n    lookupNamespaceURI:function(prefix){\n    \tvar el = this;\n    \twhile(el){\n    \t\tvar map = el._nsMap;\n    \t\t//console.dir(map)\n    \t\tif(map){\n    \t\t\tif(prefix in map){\n    \t\t\t\treturn map[prefix] ;\n    \t\t\t}\n    \t\t}\n    \t\tel = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;\n    \t}\n    \treturn null;\n    },\n    // Introduced in DOM Level 3:\n    isDefaultNamespace:function(namespaceURI){\n    \tvar prefix = this.lookupPrefix(namespaceURI);\n    \treturn prefix == null;\n    }\n};\n\n\nfunction _xmlEncoder(c){\n\treturn c == '<' && '&lt;' ||\n         c == '>' && '&gt;' ||\n         c == '&' && '&amp;' ||\n         c == '\"' && '&quot;' ||\n         '&#'+c.charCodeAt()+';'\n}\n\n\ncopy(NodeType,Node);\ncopy(NodeType,Node.prototype);\n\n/**\n * @param callback return true for continue,false for break\n * @return boolean true: break visit;\n */\nfunction _visitNode(node,callback){\n\tif(callback(node)){\n\t\treturn true;\n\t}\n\tif(node = node.firstChild){\n\t\tdo{\n\t\t\tif(_visitNode(node,callback)){return true}\n        }while(node=node.nextSibling)\n    }\n}\n\n\n\nfunction Document(){\n}\nfunction _onAddAttribute(doc,el,newAttr){\n\tdoc && doc._inc++;\n\tvar ns = newAttr.namespaceURI ;\n\tif(ns == 'http://www.w3.org/2000/xmlns/'){\n\t\t//update namespace\n\t\tel._nsMap[newAttr.prefix?newAttr.localName:''] = newAttr.value\n\t}\n}\nfunction _onRemoveAttribute(doc,el,newAttr,remove){\n\tdoc && doc._inc++;\n\tvar ns = newAttr.namespaceURI ;\n\tif(ns == 'http://www.w3.org/2000/xmlns/'){\n\t\t//update namespace\n\t\tdelete el._nsMap[newAttr.prefix?newAttr.localName:'']\n\t}\n}\nfunction _onUpdateChild(doc,el,newChild){\n\tif(doc && doc._inc){\n\t\tdoc._inc++;\n\t\t//update childNodes\n\t\tvar cs = el.childNodes;\n\t\tif(newChild){\n\t\t\tcs[cs.length++] = newChild;\n\t\t}else{\n\t\t\t//console.log(1)\n\t\t\tvar child = el.firstChild;\n\t\t\tvar i = 0;\n\t\t\twhile(child){\n\t\t\t\tcs[i++] = child;\n\t\t\t\tchild =child.nextSibling;\n\t\t\t}\n\t\t\tcs.length = i;\n\t\t}\n\t}\n}\n\n/**\n * attributes;\n * children;\n * \n * writeable properties:\n * nodeValue,Attr:value,CharacterData:data\n * prefix\n */\nfunction _removeChild(parentNode,child){\n\tvar previous = child.previousSibling;\n\tvar next = child.nextSibling;\n\tif(previous){\n\t\tprevious.nextSibling = next;\n\t}else{\n\t\tparentNode.firstChild = next\n\t}\n\tif(next){\n\t\tnext.previousSibling = previous;\n\t}else{\n\t\tparentNode.lastChild = previous;\n\t}\n\t_onUpdateChild(parentNode.ownerDocument,parentNode);\n\treturn child;\n}\n/**\n * preformance key(refChild == null)\n */\nfunction _insertBefore(parentNode,newChild,nextChild){\n\tvar cp = newChild.parentNode;\n\tif(cp){\n\t\tcp.removeChild(newChild);//remove and update\n\t}\n\tif(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){\n\t\tvar newFirst = newChild.firstChild;\n\t\tif (newFirst == null) {\n\t\t\treturn newChild;\n\t\t}\n\t\tvar newLast = newChild.lastChild;\n\t}else{\n\t\tnewFirst = newLast = newChild;\n\t}\n\tvar pre = nextChild ? nextChild.previousSibling : parentNode.lastChild;\n\n\tnewFirst.previousSibling = pre;\n\tnewLast.nextSibling = nextChild;\n\t\n\t\n\tif(pre){\n\t\tpre.nextSibling = newFirst;\n\t}else{\n\t\tparentNode.firstChild = newFirst;\n\t}\n\tif(nextChild == null){\n\t\tparentNode.lastChild = newLast;\n\t}else{\n\t\tnextChild.previousSibling = newLast;\n\t}\n\tdo{\n\t\tnewFirst.parentNode = parentNode;\n\t}while(newFirst !== newLast && (newFirst= newFirst.nextSibling))\n\t_onUpdateChild(parentNode.ownerDocument||parentNode,parentNode);\n\t//console.log(parentNode.lastChild.nextSibling == null)\n\tif (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {\n\t\tnewChild.firstChild = newChild.lastChild = null;\n\t}\n\treturn newChild;\n}\nfunction _appendSingleChild(parentNode,newChild){\n\tvar cp = newChild.parentNode;\n\tif(cp){\n\t\tvar pre = parentNode.lastChild;\n\t\tcp.removeChild(newChild);//remove and update\n\t\tvar pre = parentNode.lastChild;\n\t}\n\tvar pre = parentNode.lastChild;\n\tnewChild.parentNode = parentNode;\n\tnewChild.previousSibling = pre;\n\tnewChild.nextSibling = null;\n\tif(pre){\n\t\tpre.nextSibling = newChild;\n\t}else{\n\t\tparentNode.firstChild = newChild;\n\t}\n\tparentNode.lastChild = newChild;\n\t_onUpdateChild(parentNode.ownerDocument,parentNode,newChild);\n\treturn newChild;\n\t//console.log(\"__aa\",parentNode.lastChild.nextSibling == null)\n}\nDocument.prototype = {\n\t//implementation : null,\n\tnodeName :  '#document',\n\tnodeType :  DOCUMENT_NODE,\n\tdoctype :  null,\n\tdocumentElement :  null,\n\t_inc : 1,\n\t\n\tinsertBefore :  function(newChild, refChild){//raises \n\t\tif(newChild.nodeType == DOCUMENT_FRAGMENT_NODE){\n\t\t\tvar child = newChild.firstChild;\n\t\t\twhile(child){\n\t\t\t\tvar next = child.nextSibling;\n\t\t\t\tthis.insertBefore(child,refChild);\n\t\t\t\tchild = next;\n\t\t\t}\n\t\t\treturn newChild;\n\t\t}\n\t\tif(this.documentElement == null && newChild.nodeType == ELEMENT_NODE){\n\t\t\tthis.documentElement = newChild;\n\t\t}\n\t\t\n\t\treturn _insertBefore(this,newChild,refChild),(newChild.ownerDocument = this),newChild;\n\t},\n\tremoveChild :  function(oldChild){\n\t\tif(this.documentElement == oldChild){\n\t\t\tthis.documentElement = null;\n\t\t}\n\t\treturn _removeChild(this,oldChild);\n\t},\n\t// Introduced in DOM Level 2:\n\timportNode : function(importedNode,deep){\n\t\treturn importNode(this,importedNode,deep);\n\t},\n\t// Introduced in DOM Level 2:\n\tgetElementById :\tfunction(id){\n\t\tvar rtv = null;\n\t\t_visitNode(this.documentElement,function(node){\n\t\t\tif(node.nodeType == ELEMENT_NODE){\n\t\t\t\tif(node.getAttribute('id') == id){\n\t\t\t\t\trtv = node;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\treturn rtv;\n\t},\n\t\n\t//document factory method:\n\tcreateElement :\tfunction(tagName){\n\t\tvar node = new Element();\n\t\tnode.ownerDocument = this;\n\t\tnode.nodeName = tagName;\n\t\tnode.tagName = tagName;\n\t\tnode.childNodes = new NodeList();\n\t\tvar attrs\t= node.attributes = new NamedNodeMap();\n\t\tattrs._ownerElement = node;\n\t\treturn node;\n\t},\n\tcreateDocumentFragment :\tfunction(){\n\t\tvar node = new DocumentFragment();\n\t\tnode.ownerDocument = this;\n\t\tnode.childNodes = new NodeList();\n\t\treturn node;\n\t},\n\tcreateTextNode :\tfunction(data){\n\t\tvar node = new Text();\n\t\tnode.ownerDocument = this;\n\t\tnode.appendData(data)\n\t\treturn node;\n\t},\n\tcreateComment :\tfunction(data){\n\t\tvar node = new Comment();\n\t\tnode.ownerDocument = this;\n\t\tnode.appendData(data)\n\t\treturn node;\n\t},\n\tcreateCDATASection :\tfunction(data){\n\t\tvar node = new CDATASection();\n\t\tnode.ownerDocument = this;\n\t\tnode.appendData(data)\n\t\treturn node;\n\t},\n\tcreateProcessingInstruction :\tfunction(target,data){\n\t\tvar node = new ProcessingInstruction();\n\t\tnode.ownerDocument = this;\n\t\tnode.tagName = node.target = target;\n\t\tnode.nodeValue= node.data = data;\n\t\treturn node;\n\t},\n\tcreateAttribute :\tfunction(name){\n\t\tvar node = new Attr();\n\t\tnode.ownerDocument\t= this;\n\t\tnode.name = name;\n\t\tnode.nodeName\t= name;\n\t\tnode.localName = name;\n\t\tnode.specified = true;\n\t\treturn node;\n\t},\n\tcreateEntityReference :\tfunction(name){\n\t\tvar node = new EntityReference();\n\t\tnode.ownerDocument\t= this;\n\t\tnode.nodeName\t= name;\n\t\treturn node;\n\t},\n\t// Introduced in DOM Level 2:\n\tcreateElementNS :\tfunction(namespaceURI,qualifiedName){\n\t\tvar node = new Element();\n\t\tvar pl = qualifiedName.split(':');\n\t\tvar attrs\t= node.attributes = new NamedNodeMap();\n\t\tnode.childNodes = new NodeList();\n\t\tnode.ownerDocument = this;\n\t\tnode.nodeName = qualifiedName;\n\t\tnode.tagName = qualifiedName;\n\t\tnode.namespaceURI = namespaceURI;\n\t\tif(pl.length == 2){\n\t\t\tnode.prefix = pl[0];\n\t\t\tnode.localName = pl[1];\n\t\t}else{\n\t\t\t//el.prefix = null;\n\t\t\tnode.localName = qualifiedName;\n\t\t}\n\t\tattrs._ownerElement = node;\n\t\treturn node;\n\t},\n\t// Introduced in DOM Level 2:\n\tcreateAttributeNS :\tfunction(namespaceURI,qualifiedName){\n\t\tvar node = new Attr();\n\t\tvar pl = qualifiedName.split(':');\n\t\tnode.ownerDocument = this;\n\t\tnode.nodeName = qualifiedName;\n\t\tnode.name = qualifiedName;\n\t\tnode.namespaceURI = namespaceURI;\n\t\tnode.specified = true;\n\t\tif(pl.length == 2){\n\t\t\tnode.prefix = pl[0];\n\t\t\tnode.localName = pl[1];\n\t\t}else{\n\t\t\t//el.prefix = null;\n\t\t\tnode.localName = qualifiedName;\n\t\t}\n\t\treturn node;\n\t}\n};\n_extends(Document,Node);\n\n\nfunction Element() {\n\tthis._nsMap = {};\n};\nElement.prototype = {\n\tnodeType : ELEMENT_NODE,\n\thasAttribute : function(name){\n\t\treturn this.getAttributeNode(name)!=null;\n\t},\n\tgetAttribute : function(name){\n\t\tvar attr = this.getAttributeNode(name);\n\t\treturn attr && attr.value || '';\n\t},\n\tgetAttributeNode : function(name){\n\t\treturn this.attributes.getNamedItem(name);\n\t},\n\tsetAttribute : function(name, value){\n\t\tvar attr = this.ownerDocument.createAttribute(name);\n\t\tattr.value = attr.nodeValue = \"\" + value;\n\t\tthis.setAttributeNode(attr)\n\t},\n\tremoveAttribute : function(name){\n\t\tvar attr = this.getAttributeNode(name)\n\t\tattr && this.removeAttributeNode(attr);\n\t},\n\t\n\t//four real opeartion method\n\tappendChild:function(newChild){\n\t\tif(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){\n\t\t\treturn this.insertBefore(newChild,null);\n\t\t}else{\n\t\t\treturn _appendSingleChild(this,newChild);\n\t\t}\n\t},\n\tsetAttributeNode : function(newAttr){\n\t\treturn this.attributes.setNamedItem(newAttr);\n\t},\n\tsetAttributeNodeNS : function(newAttr){\n\t\treturn this.attributes.setNamedItemNS(newAttr);\n\t},\n\tremoveAttributeNode : function(oldAttr){\n\t\t//console.log(this == oldAttr.ownerElement)\n\t\treturn this.attributes.removeNamedItem(oldAttr.nodeName);\n\t},\n\t//get real attribute name,and remove it by removeAttributeNode\n\tremoveAttributeNS : function(namespaceURI, localName){\n\t\tvar old = this.getAttributeNodeNS(namespaceURI, localName);\n\t\told && this.removeAttributeNode(old);\n\t},\n\t\n\thasAttributeNS : function(namespaceURI, localName){\n\t\treturn this.getAttributeNodeNS(namespaceURI, localName)!=null;\n\t},\n\tgetAttributeNS : function(namespaceURI, localName){\n\t\tvar attr = this.getAttributeNodeNS(namespaceURI, localName);\n\t\treturn attr && attr.value || '';\n\t},\n\tsetAttributeNS : function(namespaceURI, qualifiedName, value){\n\t\tvar attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);\n\t\tattr.value = attr.nodeValue = \"\" + value;\n\t\tthis.setAttributeNode(attr)\n\t},\n\tgetAttributeNodeNS : function(namespaceURI, localName){\n\t\treturn this.attributes.getNamedItemNS(namespaceURI, localName);\n\t},\n\t\n\tgetElementsByTagName : function(tagName){\n\t\treturn new LiveNodeList(this,function(base){\n\t\t\tvar ls = [];\n\t\t\t_visitNode(base,function(node){\n\t\t\t\tif(node !== base && node.nodeType == ELEMENT_NODE && (tagName === '*' || node.tagName == tagName)){\n\t\t\t\t\tls.push(node);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn ls;\n\t\t});\n\t},\n\tgetElementsByTagNameNS : function(namespaceURI, localName){\n\t\treturn new LiveNodeList(this,function(base){\n\t\t\tvar ls = [];\n\t\t\t_visitNode(base,function(node){\n\t\t\t\tif(node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === '*' || node.namespaceURI === namespaceURI) && (localName === '*' || node.localName == localName)){\n\t\t\t\t\tls.push(node);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn ls;\n\t\t\t\n\t\t});\n\t}\n};\nDocument.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;\nDocument.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;\n\n\n_extends(Element,Node);\nfunction Attr() {\n};\nAttr.prototype.nodeType = ATTRIBUTE_NODE;\n_extends(Attr,Node);\n\n\nfunction CharacterData() {\n};\nCharacterData.prototype = {\n\tdata : '',\n\tsubstringData : function(offset, count) {\n\t\treturn this.data.substring(offset, offset+count);\n\t},\n\tappendData: function(text) {\n\t\ttext = this.data+text;\n\t\tthis.nodeValue = this.data = text;\n\t\tthis.length = text.length;\n\t},\n\tinsertData: function(offset,text) {\n\t\tthis.replaceData(offset,0,text);\n\t\n\t},\n\tappendChild:function(newChild){\n\t\tthrow new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR])\n\t},\n\tdeleteData: function(offset, count) {\n\t\tthis.replaceData(offset,count,\"\");\n\t},\n\treplaceData: function(offset, count, text) {\n\t\tvar start = this.data.substring(0,offset);\n\t\tvar end = this.data.substring(offset+count);\n\t\ttext = start + text + end;\n\t\tthis.nodeValue = this.data = text;\n\t\tthis.length = text.length;\n\t}\n}\n_extends(CharacterData,Node);\nfunction Text() {\n};\nText.prototype = {\n\tnodeName : \"#text\",\n\tnodeType : TEXT_NODE,\n\tsplitText : function(offset) {\n\t\tvar text = this.data;\n\t\tvar newText = text.substring(offset);\n\t\ttext = text.substring(0, offset);\n\t\tthis.data = this.nodeValue = text;\n\t\tthis.length = text.length;\n\t\tvar newNode = this.ownerDocument.createTextNode(newText);\n\t\tif(this.parentNode){\n\t\t\tthis.parentNode.insertBefore(newNode, this.nextSibling);\n\t\t}\n\t\treturn newNode;\n\t}\n}\n_extends(Text,CharacterData);\nfunction Comment() {\n};\nComment.prototype = {\n\tnodeName : \"#comment\",\n\tnodeType : COMMENT_NODE\n}\n_extends(Comment,CharacterData);\n\nfunction CDATASection() {\n};\nCDATASection.prototype = {\n\tnodeName : \"#cdata-section\",\n\tnodeType : CDATA_SECTION_NODE\n}\n_extends(CDATASection,CharacterData);\n\n\nfunction DocumentType() {\n};\nDocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;\n_extends(DocumentType,Node);\n\nfunction Notation() {\n};\nNotation.prototype.nodeType = NOTATION_NODE;\n_extends(Notation,Node);\n\nfunction Entity() {\n};\nEntity.prototype.nodeType = ENTITY_NODE;\n_extends(Entity,Node);\n\nfunction EntityReference() {\n};\nEntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;\n_extends(EntityReference,Node);\n\nfunction DocumentFragment() {\n};\nDocumentFragment.prototype.nodeName =\t\"#document-fragment\";\nDocumentFragment.prototype.nodeType =\tDOCUMENT_FRAGMENT_NODE;\n_extends(DocumentFragment,Node);\n\n\nfunction ProcessingInstruction() {\n}\nProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;\n_extends(ProcessingInstruction,Node);\nfunction XMLSerializer(){}\nXMLSerializer.prototype.serializeToString = function(node,isHtml,nodeFilter){\n\treturn nodeSerializeToString.call(node,isHtml,nodeFilter);\n}\nNode.prototype.toString = nodeSerializeToString;\nfunction nodeSerializeToString(isHtml,nodeFilter){\n\tvar buf = [];\n\tvar refNode = this.nodeType == 9?this.documentElement:this;\n\tvar prefix = refNode.prefix;\n\tvar uri = refNode.namespaceURI;\n\t\n\tif(uri && prefix == null){\n\t\t//console.log(prefix)\n\t\tvar prefix = refNode.lookupPrefix(uri);\n\t\tif(prefix == null){\n\t\t\t//isHTML = true;\n\t\t\tvar visibleNamespaces=[\n\t\t\t{namespace:uri,prefix:null}\n\t\t\t//{namespace:uri,prefix:''}\n\t\t\t]\n\t\t}\n\t}\n\tserializeToString(this,buf,isHtml,nodeFilter,visibleNamespaces);\n\t//console.log('###',this.nodeType,uri,prefix,buf.join(''))\n\treturn buf.join('');\n}\nfunction needNamespaceDefine(node,isHTML, visibleNamespaces) {\n\tvar prefix = node.prefix||'';\n\tvar uri = node.namespaceURI;\n\tif (!prefix && !uri){\n\t\treturn false;\n\t}\n\tif (prefix === \"xml\" && uri === \"http://www.w3.org/XML/1998/namespace\" \n\t\t|| uri == 'http://www.w3.org/2000/xmlns/'){\n\t\treturn false;\n\t}\n\t\n\tvar i = visibleNamespaces.length \n\t//console.log('@@@@',node.tagName,prefix,uri,visibleNamespaces)\n\twhile (i--) {\n\t\tvar ns = visibleNamespaces[i];\n\t\t// get namespace prefix\n\t\t//console.log(node.nodeType,node.tagName,ns.prefix,prefix)\n\t\tif (ns.prefix == prefix){\n\t\t\treturn ns.namespace != uri;\n\t\t}\n\t}\n\t//console.log(isHTML,uri,prefix=='')\n\t//if(isHTML && prefix ==null && uri == 'http://www.w3.org/1999/xhtml'){\n\t//\treturn false;\n\t//}\n\t//node.flag = '11111'\n\t//console.error(3,true,node.flag,node.prefix,node.namespaceURI)\n\treturn true;\n}\nfunction serializeToString(node,buf,isHTML,nodeFilter,visibleNamespaces){\n\tif(nodeFilter){\n\t\tnode = nodeFilter(node);\n\t\tif(node){\n\t\t\tif(typeof node == 'string'){\n\t\t\t\tbuf.push(node);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}else{\n\t\t\treturn;\n\t\t}\n\t\t//buf.sort.apply(attrs, attributeSorter);\n\t}\n\tswitch(node.nodeType){\n\tcase ELEMENT_NODE:\n\t\tif (!visibleNamespaces) visibleNamespaces = [];\n\t\tvar startVisibleNamespaces = visibleNamespaces.length;\n\t\tvar attrs = node.attributes;\n\t\tvar len = attrs.length;\n\t\tvar child = node.firstChild;\n\t\tvar nodeName = node.tagName;\n\t\t\n\t\tisHTML =  (htmlns === node.namespaceURI) ||isHTML \n\t\tbuf.push('<',nodeName);\n\t\t\n\t\t\n\t\t\n\t\tfor(var i=0;i<len;i++){\n\t\t\t// add namespaces for attributes\n\t\t\tvar attr = attrs.item(i);\n\t\t\tif (attr.prefix == 'xmlns') {\n\t\t\t\tvisibleNamespaces.push({ prefix: attr.localName, namespace: attr.value });\n\t\t\t}else if(attr.nodeName == 'xmlns'){\n\t\t\t\tvisibleNamespaces.push({ prefix: '', namespace: attr.value });\n\t\t\t}\n\t\t}\n\t\tfor(var i=0;i<len;i++){\n\t\t\tvar attr = attrs.item(i);\n\t\t\tif (needNamespaceDefine(attr,isHTML, visibleNamespaces)) {\n\t\t\t\tvar prefix = attr.prefix||'';\n\t\t\t\tvar uri = attr.namespaceURI;\n\t\t\t\tvar ns = prefix ? ' xmlns:' + prefix : \" xmlns\";\n\t\t\t\tbuf.push(ns, '=\"' , uri , '\"');\n\t\t\t\tvisibleNamespaces.push({ prefix: prefix, namespace:uri });\n\t\t\t}\n\t\t\tserializeToString(attr,buf,isHTML,nodeFilter,visibleNamespaces);\n\t\t}\n\t\t// add namespace for current node\t\t\n\t\tif (needNamespaceDefine(node,isHTML, visibleNamespaces)) {\n\t\t\tvar prefix = node.prefix||'';\n\t\t\tvar uri = node.namespaceURI;\n\t\t\tvar ns = prefix ? ' xmlns:' + prefix : \" xmlns\";\n\t\t\tbuf.push(ns, '=\"' , uri , '\"');\n\t\t\tvisibleNamespaces.push({ prefix: prefix, namespace:uri });\n\t\t}\n\t\t\n\t\tif(child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)){\n\t\t\tbuf.push('>');\n\t\t\t//if is cdata child node\n\t\t\tif(isHTML && /^script$/i.test(nodeName)){\n\t\t\t\twhile(child){\n\t\t\t\t\tif(child.data){\n\t\t\t\t\t\tbuf.push(child.data);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tserializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);\n\t\t\t\t\t}\n\t\t\t\t\tchild = child.nextSibling;\n\t\t\t\t}\n\t\t\t}else\n\t\t\t{\n\t\t\t\twhile(child){\n\t\t\t\t\tserializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);\n\t\t\t\t\tchild = child.nextSibling;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbuf.push('</',nodeName,'>');\n\t\t}else{\n\t\t\tbuf.push('/>');\n\t\t}\n\t\t// remove added visible namespaces\n\t\t//visibleNamespaces.length = startVisibleNamespaces;\n\t\treturn;\n\tcase DOCUMENT_NODE:\n\tcase DOCUMENT_FRAGMENT_NODE:\n\t\tvar child = node.firstChild;\n\t\twhile(child){\n\t\t\tserializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);\n\t\t\tchild = child.nextSibling;\n\t\t}\n\t\treturn;\n\tcase ATTRIBUTE_NODE:\n\t\treturn buf.push(' ',node.name,'=\"',node.value.replace(/[<&\"]/g,_xmlEncoder),'\"');\n\tcase TEXT_NODE:\n\t\treturn buf.push(node.data.replace(/[<&]/g,_xmlEncoder));\n\tcase CDATA_SECTION_NODE:\n\t\treturn buf.push( '<![CDATA[',node.data,']]>');\n\tcase COMMENT_NODE:\n\t\treturn buf.push( \"<!--\",node.data,\"-->\");\n\tcase DOCUMENT_TYPE_NODE:\n\t\tvar pubid = node.publicId;\n\t\tvar sysid = node.systemId;\n\t\tbuf.push('<!DOCTYPE ',node.name);\n\t\tif(pubid){\n\t\t\tbuf.push(' PUBLIC \"',pubid);\n\t\t\tif (sysid && sysid!='.') {\n\t\t\t\tbuf.push( '\" \"',sysid);\n\t\t\t}\n\t\t\tbuf.push('\">');\n\t\t}else if(sysid && sysid!='.'){\n\t\t\tbuf.push(' SYSTEM \"',sysid,'\">');\n\t\t}else{\n\t\t\tvar sub = node.internalSubset;\n\t\t\tif(sub){\n\t\t\t\tbuf.push(\" [\",sub,\"]\");\n\t\t\t}\n\t\t\tbuf.push(\">\");\n\t\t}\n\t\treturn;\n\tcase PROCESSING_INSTRUCTION_NODE:\n\t\treturn buf.push( \"<?\",node.target,\" \",node.data,\"?>\");\n\tcase ENTITY_REFERENCE_NODE:\n\t\treturn buf.push( '&',node.nodeName,';');\n\t//case ENTITY_NODE:\n\t//case NOTATION_NODE:\n\tdefault:\n\t\tbuf.push('??',node.nodeName);\n\t}\n}\nfunction importNode(doc,node,deep){\n\tvar node2;\n\tswitch (node.nodeType) {\n\tcase ELEMENT_NODE:\n\t\tnode2 = node.cloneNode(false);\n\t\tnode2.ownerDocument = doc;\n\t\t//var attrs = node2.attributes;\n\t\t//var len = attrs.length;\n\t\t//for(var i=0;i<len;i++){\n\t\t\t//node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));\n\t\t//}\n\tcase DOCUMENT_FRAGMENT_NODE:\n\t\tbreak;\n\tcase ATTRIBUTE_NODE:\n\t\tdeep = true;\n\t\tbreak;\n\t//case ENTITY_REFERENCE_NODE:\n\t//case PROCESSING_INSTRUCTION_NODE:\n\t////case TEXT_NODE:\n\t//case CDATA_SECTION_NODE:\n\t//case COMMENT_NODE:\n\t//\tdeep = false;\n\t//\tbreak;\n\t//case DOCUMENT_NODE:\n\t//case DOCUMENT_TYPE_NODE:\n\t//cannot be imported.\n\t//case ENTITY_NODE:\n\t//case NOTATION_NODE：\n\t//can not hit in level3\n\t//default:throw e;\n\t}\n\tif(!node2){\n\t\tnode2 = node.cloneNode(false);//false\n\t}\n\tnode2.ownerDocument = doc;\n\tnode2.parentNode = null;\n\tif(deep){\n\t\tvar child = node.firstChild;\n\t\twhile(child){\n\t\t\tnode2.appendChild(importNode(doc,child,deep));\n\t\t\tchild = child.nextSibling;\n\t\t}\n\t}\n\treturn node2;\n}\n//\n//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,\n//\t\t\t\t\tattributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};\nfunction cloneNode(doc,node,deep){\n\tvar node2 = new node.constructor();\n\tfor(var n in node){\n\t\tvar v = node[n];\n\t\tif(typeof v != 'object' ){\n\t\t\tif(v != node2[n]){\n\t\t\t\tnode2[n] = v;\n\t\t\t}\n\t\t}\n\t}\n\tif(node.childNodes){\n\t\tnode2.childNodes = new NodeList();\n\t}\n\tnode2.ownerDocument = doc;\n\tswitch (node2.nodeType) {\n\tcase ELEMENT_NODE:\n\t\tvar attrs\t= node.attributes;\n\t\tvar attrs2\t= node2.attributes = new NamedNodeMap();\n\t\tvar len = attrs.length\n\t\tattrs2._ownerElement = node2;\n\t\tfor(var i=0;i<len;i++){\n\t\t\tnode2.setAttributeNode(cloneNode(doc,attrs.item(i),true));\n\t\t}\n\t\tbreak;;\n\tcase ATTRIBUTE_NODE:\n\t\tdeep = true;\n\t}\n\tif(deep){\n\t\tvar child = node.firstChild;\n\t\twhile(child){\n\t\t\tnode2.appendChild(cloneNode(doc,child,deep));\n\t\t\tchild = child.nextSibling;\n\t\t}\n\t}\n\treturn node2;\n}\n\nfunction __set__(object,key,value){\n\tobject[key] = value\n}\n//do dynamic\ntry{\n\tif(Object.defineProperty){\n\t\tObject.defineProperty(LiveNodeList.prototype,'length',{\n\t\t\tget:function(){\n\t\t\t\t_updateLiveList(this);\n\t\t\t\treturn this.$$length;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(Node.prototype,'textContent',{\n\t\t\tget:function(){\n\t\t\t\treturn getTextContent(this);\n\t\t\t},\n\t\t\tset:function(data){\n\t\t\t\tswitch(this.nodeType){\n\t\t\t\tcase ELEMENT_NODE:\n\t\t\t\tcase DOCUMENT_FRAGMENT_NODE:\n\t\t\t\t\twhile(this.firstChild){\n\t\t\t\t\t\tthis.removeChild(this.firstChild);\n\t\t\t\t\t}\n\t\t\t\t\tif(data || String(data)){\n\t\t\t\t\t\tthis.appendChild(this.ownerDocument.createTextNode(data));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t//TODO:\n\t\t\t\t\tthis.data = data;\n\t\t\t\t\tthis.value = data;\n\t\t\t\t\tthis.nodeValue = data;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t\n\t\tfunction getTextContent(node){\n\t\t\tswitch(node.nodeType){\n\t\t\tcase ELEMENT_NODE:\n\t\t\tcase DOCUMENT_FRAGMENT_NODE:\n\t\t\t\tvar buf = [];\n\t\t\t\tnode = node.firstChild;\n\t\t\t\twhile(node){\n\t\t\t\t\tif(node.nodeType!==7 && node.nodeType !==8){\n\t\t\t\t\t\tbuf.push(getTextContent(node));\n\t\t\t\t\t}\n\t\t\t\t\tnode = node.nextSibling;\n\t\t\t\t}\n\t\t\t\treturn buf.join('');\n\t\t\tdefault:\n\t\t\t\treturn node.nodeValue;\n\t\t\t}\n\t\t}\n\t\t__set__ = function(object,key,value){\n\t\t\t//console.log(value)\n\t\t\tobject['$$'+key] = value\n\t\t}\n\t}\n}catch(e){//ie8\n}\n\n//if(typeof require == 'function'){\n\texports.DOMImplementation = DOMImplementation;\n\texports.XMLSerializer = XMLSerializer;\n//}\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/xmldom/dom.js?");

/***/ }),

/***/ "../../node_modules/xmldom/sax.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/xmldom/sax.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("//[4]   \tNameStartChar\t   ::=   \t\":\" | [A-Z] | \"_\" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\r\n//[4a]   \tNameChar\t   ::=   \tNameStartChar | \"-\" | \".\" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]\r\n//[5]   \tName\t   ::=   \tNameStartChar (NameChar)*\r\nvar nameStartChar = /[A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]///\\u10000-\\uEFFFF\r\nvar nameChar = new RegExp(\"[\\\\-\\\\.0-9\"+nameStartChar.source.slice(1,-1)+\"\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040]\");\r\nvar tagNamePattern = new RegExp('^'+nameStartChar.source+nameChar.source+'*(?:\\:'+nameStartChar.source+nameChar.source+'*)?$');\r\n//var tagNamePattern = /^[a-zA-Z_][\\w\\-\\.]*(?:\\:[a-zA-Z_][\\w\\-\\.]*)?$/\r\n//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')\r\n\r\n//S_TAG,\tS_ATTR,\tS_EQ,\tS_ATTR_NOQUOT_VALUE\r\n//S_ATTR_SPACE,\tS_ATTR_END,\tS_TAG_SPACE, S_TAG_CLOSE\r\nvar S_TAG = 0;//tag name offerring\r\nvar S_ATTR = 1;//attr name offerring \r\nvar S_ATTR_SPACE=2;//attr name end and space offer\r\nvar S_EQ = 3;//=space?\r\nvar S_ATTR_NOQUOT_VALUE = 4;//attr value(no quot value only)\r\nvar S_ATTR_END = 5;//attr value end and no space(quot end)\r\nvar S_TAG_SPACE = 6;//(attr value end || tag end ) && (space offer)\r\nvar S_TAG_CLOSE = 7;//closed el<el />\r\n\r\nfunction XMLReader(){\r\n\t\r\n}\r\n\r\nXMLReader.prototype = {\r\n\tparse:function(source,defaultNSMap,entityMap){\r\n\t\tvar domBuilder = this.domBuilder;\r\n\t\tdomBuilder.startDocument();\r\n\t\t_copy(defaultNSMap ,defaultNSMap = {})\r\n\t\tparse(source,defaultNSMap,entityMap,\r\n\t\t\t\tdomBuilder,this.errorHandler);\r\n\t\tdomBuilder.endDocument();\r\n\t}\r\n}\r\nfunction parse(source,defaultNSMapCopy,entityMap,domBuilder,errorHandler){\r\n\tfunction fixedFromCharCode(code) {\r\n\t\t// String.prototype.fromCharCode does not supports\r\n\t\t// > 2 bytes unicode chars directly\r\n\t\tif (code > 0xffff) {\r\n\t\t\tcode -= 0x10000;\r\n\t\t\tvar surrogate1 = 0xd800 + (code >> 10)\r\n\t\t\t\t, surrogate2 = 0xdc00 + (code & 0x3ff);\r\n\r\n\t\t\treturn String.fromCharCode(surrogate1, surrogate2);\r\n\t\t} else {\r\n\t\t\treturn String.fromCharCode(code);\r\n\t\t}\r\n\t}\r\n\tfunction entityReplacer(a){\r\n\t\tvar k = a.slice(1,-1);\r\n\t\tif(k in entityMap){\r\n\t\t\treturn entityMap[k]; \r\n\t\t}else if(k.charAt(0) === '#'){\r\n\t\t\treturn fixedFromCharCode(parseInt(k.substr(1).replace('x','0x')))\r\n\t\t}else{\r\n\t\t\terrorHandler.error('entity not found:'+a);\r\n\t\t\treturn a;\r\n\t\t}\r\n\t}\r\n\tfunction appendText(end){//has some bugs\r\n\t\tif(end>start){\r\n\t\t\tvar xt = source.substring(start,end).replace(/&#?\\w+;/g,entityReplacer);\r\n\t\t\tlocator&&position(start);\r\n\t\t\tdomBuilder.characters(xt,0,end-start);\r\n\t\t\tstart = end\r\n\t\t}\r\n\t}\r\n\tfunction position(p,m){\r\n\t\twhile(p>=lineEnd && (m = linePattern.exec(source))){\r\n\t\t\tlineStart = m.index;\r\n\t\t\tlineEnd = lineStart + m[0].length;\r\n\t\t\tlocator.lineNumber++;\r\n\t\t\t//console.log('line++:',locator,startPos,endPos)\r\n\t\t}\r\n\t\tlocator.columnNumber = p-lineStart+1;\r\n\t}\r\n\tvar lineStart = 0;\r\n\tvar lineEnd = 0;\r\n\tvar linePattern = /.*(?:\\r\\n?|\\n)|.*$/g\r\n\tvar locator = domBuilder.locator;\r\n\t\r\n\tvar parseStack = [{currentNSMap:defaultNSMapCopy}]\r\n\tvar closeMap = {};\r\n\tvar start = 0;\r\n\twhile(true){\r\n\t\ttry{\r\n\t\t\tvar tagStart = source.indexOf('<',start);\r\n\t\t\tif(tagStart<0){\r\n\t\t\t\tif(!source.substr(start).match(/^\\s*$/)){\r\n\t\t\t\t\tvar doc = domBuilder.doc;\r\n\t    \t\t\tvar text = doc.createTextNode(source.substr(start));\r\n\t    \t\t\tdoc.appendChild(text);\r\n\t    \t\t\tdomBuilder.currentElement = text;\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(tagStart>start){\r\n\t\t\t\tappendText(tagStart);\r\n\t\t\t}\r\n\t\t\tswitch(source.charAt(tagStart+1)){\r\n\t\t\tcase '/':\r\n\t\t\t\tvar end = source.indexOf('>',tagStart+3);\r\n\t\t\t\tvar tagName = source.substring(tagStart+2,end);\r\n\t\t\t\tvar config = parseStack.pop();\r\n\t\t\t\tif(end<0){\r\n\t\t\t\t\t\r\n\t        \t\ttagName = source.substring(tagStart+2).replace(/[\\s<].*/,'');\r\n\t        \t\t//console.error('#@@@@@@'+tagName)\r\n\t        \t\terrorHandler.error(\"end tag name: \"+tagName+' is not complete:'+config.tagName);\r\n\t        \t\tend = tagStart+1+tagName.length;\r\n\t        \t}else if(tagName.match(/\\s</)){\r\n\t        \t\ttagName = tagName.replace(/[\\s<].*/,'');\r\n\t        \t\terrorHandler.error(\"end tag name: \"+tagName+' maybe not complete');\r\n\t        \t\tend = tagStart+1+tagName.length;\r\n\t\t\t\t}\r\n\t\t\t\t//console.error(parseStack.length,parseStack)\r\n\t\t\t\t//console.error(config);\r\n\t\t\t\tvar localNSMap = config.localNSMap;\r\n\t\t\t\tvar endMatch = config.tagName == tagName;\r\n\t\t\t\tvar endIgnoreCaseMach = endMatch || config.tagName&&config.tagName.toLowerCase() == tagName.toLowerCase()\r\n\t\t        if(endIgnoreCaseMach){\r\n\t\t        \tdomBuilder.endElement(config.uri,config.localName,tagName);\r\n\t\t\t\t\tif(localNSMap){\r\n\t\t\t\t\t\tfor(var prefix in localNSMap){\r\n\t\t\t\t\t\t\tdomBuilder.endPrefixMapping(prefix) ;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!endMatch){\r\n\t\t            \terrorHandler.fatalError(\"end tag name: \"+tagName+' is not match the current start tagName:'+config.tagName );\r\n\t\t\t\t\t}\r\n\t\t        }else{\r\n\t\t        \tparseStack.push(config)\r\n\t\t        }\r\n\t\t\t\t\r\n\t\t\t\tend++;\r\n\t\t\t\tbreak;\r\n\t\t\t\t// end elment\r\n\t\t\tcase '?':// <?...?>\r\n\t\t\t\tlocator&&position(tagStart);\r\n\t\t\t\tend = parseInstruction(source,tagStart,domBuilder);\r\n\t\t\t\tbreak;\r\n\t\t\tcase '!':// <!doctype,<![CDATA,<!--\r\n\t\t\t\tlocator&&position(tagStart);\r\n\t\t\t\tend = parseDCC(source,tagStart,domBuilder,errorHandler);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tlocator&&position(tagStart);\r\n\t\t\t\tvar el = new ElementAttributes();\r\n\t\t\t\tvar currentNSMap = parseStack[parseStack.length-1].currentNSMap;\r\n\t\t\t\t//elStartEnd\r\n\t\t\t\tvar end = parseElementStartPart(source,tagStart,el,currentNSMap,entityReplacer,errorHandler);\r\n\t\t\t\tvar len = el.length;\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif(!el.closed && fixSelfClosed(source,end,el.tagName,closeMap)){\r\n\t\t\t\t\tel.closed = true;\r\n\t\t\t\t\tif(!entityMap.nbsp){\r\n\t\t\t\t\t\terrorHandler.warning('unclosed xml attribute');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(locator && len){\r\n\t\t\t\t\tvar locator2 = copyLocator(locator,{});\r\n\t\t\t\t\t//try{//attribute position fixed\r\n\t\t\t\t\tfor(var i = 0;i<len;i++){\r\n\t\t\t\t\t\tvar a = el[i];\r\n\t\t\t\t\t\tposition(a.offset);\r\n\t\t\t\t\t\ta.locator = copyLocator(locator,{});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//}catch(e){console.error('@@@@@'+e)}\r\n\t\t\t\t\tdomBuilder.locator = locator2\r\n\t\t\t\t\tif(appendElement(el,domBuilder,currentNSMap)){\r\n\t\t\t\t\t\tparseStack.push(el)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdomBuilder.locator = locator;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(appendElement(el,domBuilder,currentNSMap)){\r\n\t\t\t\t\t\tparseStack.push(el)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif(el.uri === 'http://www.w3.org/1999/xhtml' && !el.closed){\r\n\t\t\t\t\tend = parseHtmlSpecialContent(source,end,el.tagName,entityReplacer,domBuilder)\r\n\t\t\t\t}else{\r\n\t\t\t\t\tend++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}catch(e){\r\n\t\t\terrorHandler.error('element parse error: '+e)\r\n\t\t\t//errorHandler.error('element parse error: '+e);\r\n\t\t\tend = -1;\r\n\t\t\t//throw e;\r\n\t\t}\r\n\t\tif(end>start){\r\n\t\t\tstart = end;\r\n\t\t}else{\r\n\t\t\t//TODO: 这里有可能sax回退，有位置错误风险\r\n\t\t\tappendText(Math.max(tagStart,start)+1);\r\n\t\t}\r\n\t}\r\n}\r\nfunction copyLocator(f,t){\r\n\tt.lineNumber = f.lineNumber;\r\n\tt.columnNumber = f.columnNumber;\r\n\treturn t;\r\n}\r\n\r\n/**\r\n * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);\r\n * @return end of the elementStartPart(end of elementEndPart for selfClosed el)\r\n */\r\nfunction parseElementStartPart(source,start,el,currentNSMap,entityReplacer,errorHandler){\r\n\tvar attrName;\r\n\tvar value;\r\n\tvar p = ++start;\r\n\tvar s = S_TAG;//status\r\n\twhile(true){\r\n\t\tvar c = source.charAt(p);\r\n\t\tswitch(c){\r\n\t\tcase '=':\r\n\t\t\tif(s === S_ATTR){//attrName\r\n\t\t\t\tattrName = source.slice(start,p);\r\n\t\t\t\ts = S_EQ;\r\n\t\t\t}else if(s === S_ATTR_SPACE){\r\n\t\t\t\ts = S_EQ;\r\n\t\t\t}else{\r\n\t\t\t\t//fatalError: equal must after attrName or space after attrName\r\n\t\t\t\tthrow new Error('attribute equal must after attrName');\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase '\\'':\r\n\t\tcase '\"':\r\n\t\t\tif(s === S_EQ || s === S_ATTR //|| s == S_ATTR_SPACE\r\n\t\t\t\t){//equal\r\n\t\t\t\tif(s === S_ATTR){\r\n\t\t\t\t\terrorHandler.warning('attribute value must after \"=\"')\r\n\t\t\t\t\tattrName = source.slice(start,p)\r\n\t\t\t\t}\r\n\t\t\t\tstart = p+1;\r\n\t\t\t\tp = source.indexOf(c,start)\r\n\t\t\t\tif(p>0){\r\n\t\t\t\t\tvalue = source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);\r\n\t\t\t\t\tel.add(attrName,value,start-1);\r\n\t\t\t\t\ts = S_ATTR_END;\r\n\t\t\t\t}else{\r\n\t\t\t\t\t//fatalError: no end quot match\r\n\t\t\t\t\tthrow new Error('attribute value no end \\''+c+'\\' match');\r\n\t\t\t\t}\r\n\t\t\t}else if(s == S_ATTR_NOQUOT_VALUE){\r\n\t\t\t\tvalue = source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);\r\n\t\t\t\t//console.log(attrName,value,start,p)\r\n\t\t\t\tel.add(attrName,value,start);\r\n\t\t\t\t//console.dir(el)\r\n\t\t\t\terrorHandler.warning('attribute \"'+attrName+'\" missed start quot('+c+')!!');\r\n\t\t\t\tstart = p+1;\r\n\t\t\t\ts = S_ATTR_END\r\n\t\t\t}else{\r\n\t\t\t\t//fatalError: no equal before\r\n\t\t\t\tthrow new Error('attribute value must after \"=\"');\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase '/':\r\n\t\t\tswitch(s){\r\n\t\t\tcase S_TAG:\r\n\t\t\t\tel.setTagName(source.slice(start,p));\r\n\t\t\tcase S_ATTR_END:\r\n\t\t\tcase S_TAG_SPACE:\r\n\t\t\tcase S_TAG_CLOSE:\r\n\t\t\t\ts =S_TAG_CLOSE;\r\n\t\t\t\tel.closed = true;\r\n\t\t\tcase S_ATTR_NOQUOT_VALUE:\r\n\t\t\tcase S_ATTR:\r\n\t\t\tcase S_ATTR_SPACE:\r\n\t\t\t\tbreak;\r\n\t\t\t//case S_EQ:\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"attribute invalid close char('/')\")\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase ''://end document\r\n\t\t\t//throw new Error('unexpected end of input')\r\n\t\t\terrorHandler.error('unexpected end of input');\r\n\t\t\tif(s == S_TAG){\r\n\t\t\t\tel.setTagName(source.slice(start,p));\r\n\t\t\t}\r\n\t\t\treturn p;\r\n\t\tcase '>':\r\n\t\t\tswitch(s){\r\n\t\t\tcase S_TAG:\r\n\t\t\t\tel.setTagName(source.slice(start,p));\r\n\t\t\tcase S_ATTR_END:\r\n\t\t\tcase S_TAG_SPACE:\r\n\t\t\tcase S_TAG_CLOSE:\r\n\t\t\t\tbreak;//normal\r\n\t\t\tcase S_ATTR_NOQUOT_VALUE://Compatible state\r\n\t\t\tcase S_ATTR:\r\n\t\t\t\tvalue = source.slice(start,p);\r\n\t\t\t\tif(value.slice(-1) === '/'){\r\n\t\t\t\t\tel.closed  = true;\r\n\t\t\t\t\tvalue = value.slice(0,-1)\r\n\t\t\t\t}\r\n\t\t\tcase S_ATTR_SPACE:\r\n\t\t\t\tif(s === S_ATTR_SPACE){\r\n\t\t\t\t\tvalue = attrName;\r\n\t\t\t\t}\r\n\t\t\t\tif(s == S_ATTR_NOQUOT_VALUE){\r\n\t\t\t\t\terrorHandler.warning('attribute \"'+value+'\" missed quot(\")!!');\r\n\t\t\t\t\tel.add(attrName,value.replace(/&#?\\w+;/g,entityReplacer),start)\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(currentNSMap[''] !== 'http://www.w3.org/1999/xhtml' || !value.match(/^(?:disabled|checked|selected)$/i)){\r\n\t\t\t\t\t\terrorHandler.warning('attribute \"'+value+'\" missed value!! \"'+value+'\" instead!!')\r\n\t\t\t\t\t}\r\n\t\t\t\t\tel.add(value,value,start)\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase S_EQ:\r\n\t\t\t\tthrow new Error('attribute value missed!!');\r\n\t\t\t}\r\n//\t\t\tconsole.log(tagName,tagNamePattern,tagNamePattern.test(tagName))\r\n\t\t\treturn p;\r\n\t\t/*xml space '\\x20' | #x9 | #xD | #xA; */\r\n\t\tcase '\\u0080':\r\n\t\t\tc = ' ';\r\n\t\tdefault:\r\n\t\t\tif(c<= ' '){//space\r\n\t\t\t\tswitch(s){\r\n\t\t\t\tcase S_TAG:\r\n\t\t\t\t\tel.setTagName(source.slice(start,p));//tagName\r\n\t\t\t\t\ts = S_TAG_SPACE;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S_ATTR:\r\n\t\t\t\t\tattrName = source.slice(start,p)\r\n\t\t\t\t\ts = S_ATTR_SPACE;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S_ATTR_NOQUOT_VALUE:\r\n\t\t\t\t\tvar value = source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);\r\n\t\t\t\t\terrorHandler.warning('attribute \"'+value+'\" missed quot(\")!!');\r\n\t\t\t\t\tel.add(attrName,value,start)\r\n\t\t\t\tcase S_ATTR_END:\r\n\t\t\t\t\ts = S_TAG_SPACE;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//case S_TAG_SPACE:\r\n\t\t\t\t//case S_EQ:\r\n\t\t\t\t//case S_ATTR_SPACE:\r\n\t\t\t\t//\tvoid();break;\r\n\t\t\t\t//case S_TAG_CLOSE:\r\n\t\t\t\t\t//ignore warning\r\n\t\t\t\t}\r\n\t\t\t}else{//not space\r\n//S_TAG,\tS_ATTR,\tS_EQ,\tS_ATTR_NOQUOT_VALUE\r\n//S_ATTR_SPACE,\tS_ATTR_END,\tS_TAG_SPACE, S_TAG_CLOSE\r\n\t\t\t\tswitch(s){\r\n\t\t\t\t//case S_TAG:void();break;\r\n\t\t\t\t//case S_ATTR:void();break;\r\n\t\t\t\t//case S_ATTR_NOQUOT_VALUE:void();break;\r\n\t\t\t\tcase S_ATTR_SPACE:\r\n\t\t\t\t\tvar tagName =  el.tagName;\r\n\t\t\t\t\tif(currentNSMap[''] !== 'http://www.w3.org/1999/xhtml' || !attrName.match(/^(?:disabled|checked|selected)$/i)){\r\n\t\t\t\t\t\terrorHandler.warning('attribute \"'+attrName+'\" missed value!! \"'+attrName+'\" instead2!!')\r\n\t\t\t\t\t}\r\n\t\t\t\t\tel.add(attrName,attrName,start);\r\n\t\t\t\t\tstart = p;\r\n\t\t\t\t\ts = S_ATTR;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S_ATTR_END:\r\n\t\t\t\t\terrorHandler.warning('attribute space is required\"'+attrName+'\"!!')\r\n\t\t\t\tcase S_TAG_SPACE:\r\n\t\t\t\t\ts = S_ATTR;\r\n\t\t\t\t\tstart = p;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S_EQ:\r\n\t\t\t\t\ts = S_ATTR_NOQUOT_VALUE;\r\n\t\t\t\t\tstart = p;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S_TAG_CLOSE:\r\n\t\t\t\t\tthrow new Error(\"elements closed character '/' and '>' must be connected to\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}//end outer switch\r\n\t\t//console.log('p++',p)\r\n\t\tp++;\r\n\t}\r\n}\r\n/**\r\n * @return true if has new namespace define\r\n */\r\nfunction appendElement(el,domBuilder,currentNSMap){\r\n\tvar tagName = el.tagName;\r\n\tvar localNSMap = null;\r\n\t//var currentNSMap = parseStack[parseStack.length-1].currentNSMap;\r\n\tvar i = el.length;\r\n\twhile(i--){\r\n\t\tvar a = el[i];\r\n\t\tvar qName = a.qName;\r\n\t\tvar value = a.value;\r\n\t\tvar nsp = qName.indexOf(':');\r\n\t\tif(nsp>0){\r\n\t\t\tvar prefix = a.prefix = qName.slice(0,nsp);\r\n\t\t\tvar localName = qName.slice(nsp+1);\r\n\t\t\tvar nsPrefix = prefix === 'xmlns' && localName\r\n\t\t}else{\r\n\t\t\tlocalName = qName;\r\n\t\t\tprefix = null\r\n\t\t\tnsPrefix = qName === 'xmlns' && ''\r\n\t\t}\r\n\t\t//can not set prefix,because prefix !== ''\r\n\t\ta.localName = localName ;\r\n\t\t//prefix == null for no ns prefix attribute \r\n\t\tif(nsPrefix !== false){//hack!!\r\n\t\t\tif(localNSMap == null){\r\n\t\t\t\tlocalNSMap = {}\r\n\t\t\t\t//console.log(currentNSMap,0)\r\n\t\t\t\t_copy(currentNSMap,currentNSMap={})\r\n\t\t\t\t//console.log(currentNSMap,1)\r\n\t\t\t}\r\n\t\t\tcurrentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;\r\n\t\t\ta.uri = 'http://www.w3.org/2000/xmlns/'\r\n\t\t\tdomBuilder.startPrefixMapping(nsPrefix, value) \r\n\t\t}\r\n\t}\r\n\tvar i = el.length;\r\n\twhile(i--){\r\n\t\ta = el[i];\r\n\t\tvar prefix = a.prefix;\r\n\t\tif(prefix){//no prefix attribute has no namespace\r\n\t\t\tif(prefix === 'xml'){\r\n\t\t\t\ta.uri = 'http://www.w3.org/XML/1998/namespace';\r\n\t\t\t}if(prefix !== 'xmlns'){\r\n\t\t\t\ta.uri = currentNSMap[prefix || '']\r\n\t\t\t\t\r\n\t\t\t\t//{console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tvar nsp = tagName.indexOf(':');\r\n\tif(nsp>0){\r\n\t\tprefix = el.prefix = tagName.slice(0,nsp);\r\n\t\tlocalName = el.localName = tagName.slice(nsp+1);\r\n\t}else{\r\n\t\tprefix = null;//important!!\r\n\t\tlocalName = el.localName = tagName;\r\n\t}\r\n\t//no prefix element has default namespace\r\n\tvar ns = el.uri = currentNSMap[prefix || ''];\r\n\tdomBuilder.startElement(ns,localName,tagName,el);\r\n\t//endPrefixMapping and startPrefixMapping have not any help for dom builder\r\n\t//localNSMap = null\r\n\tif(el.closed){\r\n\t\tdomBuilder.endElement(ns,localName,tagName);\r\n\t\tif(localNSMap){\r\n\t\t\tfor(prefix in localNSMap){\r\n\t\t\t\tdomBuilder.endPrefixMapping(prefix) \r\n\t\t\t}\r\n\t\t}\r\n\t}else{\r\n\t\tel.currentNSMap = currentNSMap;\r\n\t\tel.localNSMap = localNSMap;\r\n\t\t//parseStack.push(el);\r\n\t\treturn true;\r\n\t}\r\n}\r\nfunction parseHtmlSpecialContent(source,elStartEnd,tagName,entityReplacer,domBuilder){\r\n\tif(/^(?:script|textarea)$/i.test(tagName)){\r\n\t\tvar elEndStart =  source.indexOf('</'+tagName+'>',elStartEnd);\r\n\t\tvar text = source.substring(elStartEnd+1,elEndStart);\r\n\t\tif(/[&<]/.test(text)){\r\n\t\t\tif(/^script$/i.test(tagName)){\r\n\t\t\t\t//if(!/\\]\\]>/.test(text)){\r\n\t\t\t\t\t//lexHandler.startCDATA();\r\n\t\t\t\t\tdomBuilder.characters(text,0,text.length);\r\n\t\t\t\t\t//lexHandler.endCDATA();\r\n\t\t\t\t\treturn elEndStart;\r\n\t\t\t\t//}\r\n\t\t\t}//}else{//text area\r\n\t\t\t\ttext = text.replace(/&#?\\w+;/g,entityReplacer);\r\n\t\t\t\tdomBuilder.characters(text,0,text.length);\r\n\t\t\t\treturn elEndStart;\r\n\t\t\t//}\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\treturn elStartEnd+1;\r\n}\r\nfunction fixSelfClosed(source,elStartEnd,tagName,closeMap){\r\n\t//if(tagName in closeMap){\r\n\tvar pos = closeMap[tagName];\r\n\tif(pos == null){\r\n\t\t//console.log(tagName)\r\n\t\tpos =  source.lastIndexOf('</'+tagName+'>')\r\n\t\tif(pos<elStartEnd){//忘记闭合\r\n\t\t\tpos = source.lastIndexOf('</'+tagName)\r\n\t\t}\r\n\t\tcloseMap[tagName] =pos\r\n\t}\r\n\treturn pos<elStartEnd;\r\n\t//} \r\n}\r\nfunction _copy(source,target){\r\n\tfor(var n in source){target[n] = source[n]}\r\n}\r\nfunction parseDCC(source,start,domBuilder,errorHandler){//sure start with '<!'\r\n\tvar next= source.charAt(start+2)\r\n\tswitch(next){\r\n\tcase '-':\r\n\t\tif(source.charAt(start + 3) === '-'){\r\n\t\t\tvar end = source.indexOf('-->',start+4);\r\n\t\t\t//append comment source.substring(4,end)//<!--\r\n\t\t\tif(end>start){\r\n\t\t\t\tdomBuilder.comment(source,start+4,end-start-4);\r\n\t\t\t\treturn end+3;\r\n\t\t\t}else{\r\n\t\t\t\terrorHandler.error(\"Unclosed comment\");\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\t//error\r\n\t\t\treturn -1;\r\n\t\t}\r\n\tdefault:\r\n\t\tif(source.substr(start+3,6) == 'CDATA['){\r\n\t\t\tvar end = source.indexOf(']]>',start+9);\r\n\t\t\tdomBuilder.startCDATA();\r\n\t\t\tdomBuilder.characters(source,start+9,end-start-9);\r\n\t\t\tdomBuilder.endCDATA() \r\n\t\t\treturn end+3;\r\n\t\t}\r\n\t\t//<!DOCTYPE\r\n\t\t//startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId) \r\n\t\tvar matchs = split(source,start);\r\n\t\tvar len = matchs.length;\r\n\t\tif(len>1 && /!doctype/i.test(matchs[0][0])){\r\n\t\t\tvar name = matchs[1][0];\r\n\t\t\tvar pubid = len>3 && /^public$/i.test(matchs[2][0]) && matchs[3][0]\r\n\t\t\tvar sysid = len>4 && matchs[4][0];\r\n\t\t\tvar lastMatch = matchs[len-1]\r\n\t\t\tdomBuilder.startDTD(name,pubid && pubid.replace(/^(['\"])(.*?)\\1$/,'$2'),\r\n\t\t\t\t\tsysid && sysid.replace(/^(['\"])(.*?)\\1$/,'$2'));\r\n\t\t\tdomBuilder.endDTD();\r\n\t\t\t\r\n\t\t\treturn lastMatch.index+lastMatch[0].length\r\n\t\t}\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\n\r\n\r\nfunction parseInstruction(source,start,domBuilder){\r\n\tvar end = source.indexOf('?>',start);\r\n\tif(end){\r\n\t\tvar match = source.substring(start,end).match(/^<\\?(\\S*)\\s*([\\s\\S]*?)\\s*$/);\r\n\t\tif(match){\r\n\t\t\tvar len = match[0].length;\r\n\t\t\tdomBuilder.processingInstruction(match[1], match[2]) ;\r\n\t\t\treturn end+2;\r\n\t\t}else{//error\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\n/**\r\n * @param source\r\n */\r\nfunction ElementAttributes(source){\r\n\t\r\n}\r\nElementAttributes.prototype = {\r\n\tsetTagName:function(tagName){\r\n\t\tif(!tagNamePattern.test(tagName)){\r\n\t\t\tthrow new Error('invalid tagName:'+tagName)\r\n\t\t}\r\n\t\tthis.tagName = tagName\r\n\t},\r\n\tadd:function(qName,value,offset){\r\n\t\tif(!tagNamePattern.test(qName)){\r\n\t\t\tthrow new Error('invalid attribute:'+qName)\r\n\t\t}\r\n\t\tthis[this.length++] = {qName:qName,value:value,offset:offset}\r\n\t},\r\n\tlength:0,\r\n\tgetLocalName:function(i){return this[i].localName},\r\n\tgetLocator:function(i){return this[i].locator},\r\n\tgetQName:function(i){return this[i].qName},\r\n\tgetURI:function(i){return this[i].uri},\r\n\tgetValue:function(i){return this[i].value}\r\n//\t,getIndex:function(uri, localName)){\r\n//\t\tif(localName){\r\n//\t\t\t\r\n//\t\t}else{\r\n//\t\t\tvar qName = uri\r\n//\t\t}\r\n//\t},\r\n//\tgetValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},\r\n//\tgetType:function(uri,localName){}\r\n//\tgetType:function(i){},\r\n}\r\n\r\n\r\n\r\n\r\nfunction _set_proto_(thiz,parent){\r\n\tthiz.__proto__ = parent;\r\n\treturn thiz;\r\n}\r\nif(!(_set_proto_({},_set_proto_.prototype) instanceof _set_proto_)){\r\n\t_set_proto_ = function(thiz,parent){\r\n\t\tfunction p(){};\r\n\t\tp.prototype = parent;\r\n\t\tp = new p();\r\n\t\tfor(parent in thiz){\r\n\t\t\tp[parent] = thiz[parent];\r\n\t\t}\r\n\t\treturn p;\r\n\t}\r\n}\r\n\r\nfunction split(source,start){\r\n\tvar match;\r\n\tvar buf = [];\r\n\tvar reg = /'[^']+'|\"[^\"]+\"|[^\\s<>\\/=]+=?|(\\/?\\s*>|<)/g;\r\n\treg.lastIndex = start;\r\n\treg.exec(source);//skip <\r\n\twhile(match = reg.exec(source)){\r\n\t\tbuf.push(match);\r\n\t\tif(match[1])return buf;\r\n\t}\r\n}\r\n\r\nexports.XMLReader = XMLReader;\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/node_modules/xmldom/sax.js?");

/***/ }),

/***/ "../../sys/files.js":
/*!*********************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/sys/files.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const files = {};\r\nconst fileCreationWatchers = [];\r\n\r\nconst getFile = (path) => {\r\n  let file = files[path];\r\n  if (file === undefined) {\r\n    file = { path: path, watchers: [] };\r\n    files[path] = file;\r\n    for (const watcher of fileCreationWatchers) {\r\n      watcher(file);\r\n    }\r\n  }\r\n  return file;\r\n};\r\n\r\nconst watchFileCreation = (thunk) => fileCreationWatchers.push(thunk);\r\n\r\nmodule.exports.getFile = getFile;\r\nmodule.exports.watchFileCreation = watchFileCreation;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/sys/files.js?");

/***/ }),

/***/ "../../sys/main.js":
/*!********************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/sys/main.js ***!
  \********************************************************/
/*! exports provided: readFile, readFileSync, watchFile, watchFileCreation, writeFileSync */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _readFile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./readFile */ \"../../sys/readFile.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"readFile\", function() { return _readFile__WEBPACK_IMPORTED_MODULE_0__[\"readFile\"]; });\n\n/* harmony import */ var _readFileSync__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./readFileSync */ \"../../sys/readFileSync.js\");\n/* harmony import */ var _readFileSync__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_readFileSync__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"readFileSync\", function() { return _readFileSync__WEBPACK_IMPORTED_MODULE_1__[\"readFileSync\"]; });\n\n/* harmony import */ var _watchFile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./watchFile */ \"../../sys/watchFile.js\");\n/* harmony import */ var _watchFile__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_watchFile__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"watchFile\", function() { return _watchFile__WEBPACK_IMPORTED_MODULE_2__[\"watchFile\"]; });\n\n/* harmony import */ var _files__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./files */ \"../../sys/files.js\");\n/* harmony import */ var _files__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_files__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"watchFileCreation\", function() { return _files__WEBPACK_IMPORTED_MODULE_3__[\"watchFileCreation\"]; });\n\n/* harmony import */ var _writeFileSync__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./writeFileSync */ \"../../sys/writeFileSync.js\");\n/* harmony import */ var _writeFileSync__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_writeFileSync__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"writeFileSync\", function() { return _writeFileSync__WEBPACK_IMPORTED_MODULE_4__[\"writeFileSync\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/sys/main.js?");

/***/ }),

/***/ "../../sys/readFile.js":
/*!************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/sys/readFile.js ***!
  \************************************************************/
/*! exports provided: readFile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"readFile\", function() { return readFile; });\nconst fs = __webpack_require__(/*! fs */ \"../../node_modules/node-libs-browser/mock/empty.js\");\r\nconst readFileSyncBrowser = __webpack_require__(/*! ./readFileSyncBrowser */ \"../../sys/readFileSyncBrowser.js\");\r\nconst fetch = __webpack_require__(/*! node-fetch */ \"../../node_modules/node-fetch/browser.js\");\r\n\r\nconst readFile = (path, options) => {\r\n  if (path.startsWith('http://') || path.startsWith('https://')) {\r\n    if (fetch) {\r\n      return fetch(path).then(result => result.text());\r\n    } else {\r\n      return window.fetch(path).then(result => result.text());\r\n    }\r\n  }\r\n  if (fs.promises.readFile) {\r\n    return fs.promises.readFile(path, options);\r\n  } else {\r\n    return Promise.resolve(readFileSyncBrowser(path, options));\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/sys/readFile.js?");

/***/ }),

/***/ "../../sys/readFileSync.js":
/*!****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/sys/readFileSync.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const fs = __webpack_require__(/*! fs */ \"../../node_modules/node-libs-browser/mock/empty.js\");\r\nconst readFileSyncBrowser = __webpack_require__(/*! ./readFileSyncBrowser */ \"../../sys/readFileSyncBrowser.js\");\r\n\r\nconst readFileSync = (path, options = {}) => {\r\n  if (fs.readFileSync) {\r\n    return fs.readFileSync(path, options);\r\n  } else {\r\n    return readFileSyncBrowser.readFileSync(path, options);\r\n  }\r\n};\r\n\r\nmodule.exports.readFileSync = readFileSync;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/sys/readFileSync.js?");

/***/ }),

/***/ "../../sys/readFileSyncBrowser.js":
/*!***********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/sys/readFileSyncBrowser.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { getFile } = __webpack_require__(/*! ./files */ \"../../sys/files.js\");\r\n\r\nconst readFileSync = (path, options) => {\r\n  const file = getFile(path);\r\n  if (typeof file.data === 'function') {\r\n    // Force lazy evaluation.\r\n    file.data = file.data();\r\n  }\r\n  return file.data;\r\n};\r\n\r\nmodule.exports.readFileSync = readFileSync;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/sys/readFileSyncBrowser.js?");

/***/ }),

/***/ "../../sys/watchFile.js":
/*!*************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/sys/watchFile.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const fs = __webpack_require__(/*! fs */ \"../../node_modules/node-libs-browser/mock/empty.js\");\r\nconst watchFileBrowser = __webpack_require__(/*! ./watchFileBrowser */ \"../../sys/watchFileBrowser.js\");\r\n\r\nconst watchFile = (path, thunk) => {\r\n  if (fs.writeFileSync) {\r\n  } else {\r\n    watchFileBrowser.watchFile(path, thunk);\r\n  }\r\n};\r\n\r\nmodule.exports.watchFile = watchFile;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/sys/watchFile.js?");

/***/ }),

/***/ "../../sys/watchFileBrowser.js":
/*!********************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/sys/watchFileBrowser.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { getFile } = __webpack_require__(/*! ./files */ \"../../sys/files.js\");\r\n\r\nconst watchFile = (path, thunk) => getFile(path).watchers.push(thunk);\r\n\r\nmodule.exports.watchFile = watchFile;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/sys/watchFileBrowser.js?");

/***/ }),

/***/ "../../sys/writeFileSync.js":
/*!*****************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/sys/writeFileSync.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const fs = __webpack_require__(/*! fs */ \"../../node_modules/node-libs-browser/mock/empty.js\");\r\nconst writeFileSyncBrowser = __webpack_require__(/*! ./writeFileSyncBrowser */ \"../../sys/writeFileSyncBrowser.js\");\r\n\r\nconst writeFileSync = async (path, data, options = {}) => {\r\n  if (fs.writeFileSync) {\r\n    if (typeof data === 'function') {\r\n      data = data();\r\n    }\r\n    return fs.writeFileSync(path, await Promise.resolve(data), options);\r\n  } else {\r\n    return writeFileSyncBrowser.writeFileSync(path, data, options);\r\n  }\r\n};\r\n\r\nmodule.exports.writeFileSync = writeFileSync;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/sys/writeFileSync.js?");

/***/ }),

/***/ "../../sys/writeFileSyncBrowser.js":
/*!************************************************************************!*\
  !*** C:/Users/Bar/Documents/GitHub/JSxCAD/sys/writeFileSyncBrowser.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { getFile } = __webpack_require__(/*! ./files */ \"../../sys/files.js\");\r\n\r\nconst writeFileSync = (path, data, options = {}) => {\r\n  const file = getFile(path);\r\n  file.data = data;\r\n  for (const watcher of file.watchers) {\r\n    watcher(file, options);\r\n  }\r\n};\r\n\r\nmodule.exports.writeFileSync = writeFileSync;\r\n\n\n//# sourceURL=webpack://JSxCAD/C:/Users/Bar/Documents/GitHub/JSxCAD/sys/writeFileSyncBrowser.js?");

/***/ }),

/***/ "./JSxCAD.js":
/*!*******************!*\
  !*** ./JSxCAD.js ***!
  \*******************/
/*! exports provided: api, flipPolygon, makeConvexSurface, polygonsToTriangles, readFileSync, solidToPolygons, toPlane, toSegments, watchFile, watchFileCreation, writeFileSync */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _jsxcad_api_v1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jsxcad/api-v1 */ \"../../api/v1/main.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"api\", function() { return _jsxcad_api_v1__WEBPACK_IMPORTED_MODULE_0__; });\n/* harmony import */ var _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jsxcad/math-poly3 */ \"../../math/poly3/main.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"flipPolygon\", function() { return _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__[\"flip\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toPlane\", function() { return _jsxcad_math_poly3__WEBPACK_IMPORTED_MODULE_1__[\"toPlane\"]; });\n\n/* harmony import */ var _jsxcad_sys__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jsxcad/sys */ \"../../sys/main.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"readFileSync\", function() { return _jsxcad_sys__WEBPACK_IMPORTED_MODULE_2__[\"readFileSync\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"watchFile\", function() { return _jsxcad_sys__WEBPACK_IMPORTED_MODULE_2__[\"watchFile\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"watchFileCreation\", function() { return _jsxcad_sys__WEBPACK_IMPORTED_MODULE_2__[\"watchFileCreation\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"writeFileSync\", function() { return _jsxcad_sys__WEBPACK_IMPORTED_MODULE_2__[\"writeFileSync\"]; });\n\n/* harmony import */ var _jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jsxcad/algorithm-surface */ \"../../algorithm/surface/main.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"makeConvexSurface\", function() { return _jsxcad_algorithm_surface__WEBPACK_IMPORTED_MODULE_3__[\"makeConvex\"]; });\n\n/* harmony import */ var _jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jsxcad/algorithm-polygons */ \"../../algorithm/polygons/main.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"polygonsToTriangles\", function() { return _jsxcad_algorithm_polygons__WEBPACK_IMPORTED_MODULE_4__[\"toTriangles\"]; });\n\n/* harmony import */ var _jsxcad_algorithm_solid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @jsxcad/algorithm-solid */ \"../../algorithm/solid/main.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"solidToPolygons\", function() { return _jsxcad_algorithm_solid__WEBPACK_IMPORTED_MODULE_5__[\"toPolygons\"]; });\n\n/* harmony import */ var _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @jsxcad/algorithm-path */ \"../../algorithm/path/main.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"toSegments\", function() { return _jsxcad_algorithm_path__WEBPACK_IMPORTED_MODULE_6__[\"toSegments\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://JSxCAD/./JSxCAD.js?");

/***/ }),

/***/ 0:
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//# sourceURL=webpack://JSxCAD/fs_(ignored)?");

/***/ }),

/***/ 1:
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//# sourceURL=webpack://JSxCAD/fs_(ignored)?");

/***/ })

/******/ });