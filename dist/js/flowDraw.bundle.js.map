{"version":3,"file":"./js/flowDraw.bundle.js","sources":["webpack:///webpack/bootstrap","webpack:///src/flowDraw.js","webpack:///src/js/githubOauth.js","webpack:///src/js/globalvariables.js","webpack:///src/js/menu.js","webpack:///src/js/molecules/circle.js","webpack:///src/js/molecules/constant.js","webpack:///src/js/molecules/difference.js","webpack:///src/js/molecules/equation.js","webpack:///src/js/molecules/extrude.js","webpack:///src/js/molecules/githubmolecule.js","webpack:///src/js/molecules/input.js","webpack:///src/js/molecules/intersection.js","webpack:///src/js/molecules/mirror.js","webpack:///src/js/molecules/molecule.js","webpack:///src/js/molecules/output.js","webpack:///src/js/molecules/readme.js","webpack:///src/js/molecules/rectangle.js","webpack:///src/js/molecules/regularpolygon.js","webpack:///src/js/molecules/rotate.js","webpack:///src/js/molecules/scale.js","webpack:///src/js/molecules/shrinkwrap.js","webpack:///src/js/molecules/translate.js","webpack:///src/js/molecules/union.js","webpack:///src/js/prototypes/atom.js","webpack:///src/js/prototypes/attachmentpoint.js","webpack:///src/js/prototypes/connector.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/flowDraw.js\");\n","\r\n\r\nimport Menu from './js/menu'\r\nimport GlobalVariables from './js/globalvariables'\r\nimport Molecule from './js/molecules/molecule.js'\r\n\r\nGlobalVariables.canvas = document.querySelector('canvas')\r\nGlobalVariables.c = GlobalVariables.canvas.getContext('2d')\r\n\r\nGlobalVariables.canvas.width = innerWidth\r\nGlobalVariables.canvas.height = innerHeight/2\r\n\r\nlet lowerHalfOfScreen = document.querySelector('.flex-parent');\r\nlowerHalfOfScreen.setAttribute(\"style\",\"height:\"+innerHeight/2.1+\"px\");\r\n\r\n// Event Listeners\r\nlet flowCanvas = document.getElementById('flow-canvas');\r\n\r\nflowCanvas.addEventListener('mousemove', event => {\r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {\r\n        molecule.clickMove(event.clientX,event.clientY);        \r\n    });\r\n})\r\n\r\nwindow.addEventListener('resize', event => {\r\n    \r\n    console.log(\"resize\");\r\n    \r\n    var bounds = GlobalVariables.canvas.getBoundingClientRect();\r\n    GlobalVariables.canvas.width = bounds.width;\r\n    GlobalVariables.canvas.height = bounds.height; \r\n\r\n})\r\n\r\nflowCanvas.addEventListener('mousedown', event => {\r\n    //every time the mouse button goes down\r\n    \r\n    var clickHandledByMolecule = false;\r\n    \r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {\r\n        if (molecule.clickDown(event.clientX,event.clientY) == true){\r\n            clickHandledByMolecule = true;\r\n        }\r\n    });\r\n    \r\n    if(!clickHandledByMolecule){\r\n        GlobalVariables.currentMolecule.backgroundClick();\r\n    }\r\n    \r\n    //hide the menu if it is visible\r\n    if (!document.querySelector('.menu').contains(event.target)) {\r\n        Menu.hidemenu();\r\n    }\r\n    \r\n})\r\n\r\nflowCanvas.addEventListener('dblclick', event => {\r\n    //every time the mouse button goes down\r\n    \r\n    var clickHandledByMolecule = false;\r\n    \r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {\r\n        if (molecule.doubleClick(event.clientX,event.clientY) == true){\r\n            clickHandledByMolecule = true;\r\n        }\r\n    });\r\n    \r\n    if (clickHandledByMolecule == false){\r\n        console.log(\"double click menu open not working in flowDraw.js\");\r\n        //showmenu(event);\r\n    }\r\n})\r\n\r\nflowCanvas.addEventListener('mouseup', event => {\r\n    //every time the mouse button goes up\r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {\r\n        molecule.clickUp(event.clientX,event.clientY);      \r\n    });\r\n})\r\n\r\nwindow.addEventListener('keydown', event => {\r\n    //every time the mouse button goes up\r\n    \r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {\r\n        molecule.keyPress(event.key);      \r\n    });\r\n})\r\n\r\n\r\n// Implementation\r\n\r\nfunction init() {\r\n    GlobalVariables.currentMolecule = new Molecule({\r\n        x: 0, \r\n        y: 0, \r\n        topLevel: true, \r\n        name: \"Maslow Create\",\r\n        atomType: \"Molecule\",\r\n        uniqueID: GlobalVariables.generateUniqueID()\r\n    });\r\n    \r\n}\r\n\r\n// Animation Loop\r\nfunction animate() {\r\n    requestAnimationFrame(animate);\r\n    GlobalVariables.c.clearRect(0, 0, GlobalVariables.canvas.width, GlobalVariables.canvas.height);\r\n    \r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {\r\n        molecule.update();\r\n    });\r\n}\r\n\r\ninit()\r\nanimate()\r\n","import Molecule from './molecules/molecule.js'\r\nimport GlobalVariables from './globalvariables'\r\n\r\nexport default class GitHubModule{\r\n\r\n    constructor(){\r\n        this.octokit = new Octokit();\r\n        this.popup = document.getElementById('projects-popup');\r\n        this.currentRepoName = null;\r\n        this.currentUser = null;\r\n        this.bomHeader = \"###### Note: Do not edit this file directly, it is automatically generated from the CAD model \\n# Bill Of Materials \\n |Part|Number Needed|Price|Source| \\n |----|----------|-----|-----|\";\r\n\r\n        this.intervalTimer = null;\r\n        \r\n        var button = document.getElementById(\"loginButton\");\r\n        button.addEventListener(\"mousedown\", (e) => {\r\n           this.tryLogin();\r\n        });\r\n    }\r\n\r\n    tryLogin(){\r\n        // Initialize with your OAuth.io app public key\r\n        OAuth.initialize('BYP9iFpD7aTV9SDhnalvhZ4fwD8');\r\n        // Use popup for oauth\r\n        OAuth.popup('github').then(github => {\r\n            \r\n            this.octokit.authenticate({\r\n                type: \"oauth\",\r\n                token: github.access_token\r\n            })\r\n            \r\n            //Test the authentication \r\n            this.octokit.users.getAuthenticated({}).then(result => {\r\n                this.showProjectsToLoad();\r\n            })  \r\n        });\r\n    }\r\n\r\n    showProjectsToLoad(){\r\n        //Remove everything in the this.popup now\r\n        while (this.popup.firstChild) {\r\n            this.popup.removeChild(this.popup.firstChild);\r\n        }\r\n        \r\n        this.popup.classList.remove('off');\r\n        \r\n        //Add a title\r\n        var titleDiv = document.createElement(\"DIV\");\r\n        titleDiv.setAttribute(\"style\", \"width: 100%\");\r\n        titleDiv.setAttribute(\"style\", \"padding: 30px\");\r\n        var title = document.createElement(\"H1\");\r\n        title.appendChild(document.createTextNode(\"Projects:\"));\r\n        titleDiv.appendChild(title);\r\n        this.popup.appendChild(titleDiv);\r\n        this.popup.appendChild(document.createElement(\"br\"));\r\n        \r\n        var projectsSpaceDiv = document.createElement(\"DIV\");\r\n        projectsSpaceDiv.setAttribute(\"class\", \"float-left-div{\");\r\n        this.popup.appendChild(projectsSpaceDiv);\r\n        \r\n        \r\n        //Add the create a new project button\r\n        this.addProject(\"New Project\");\r\n        \r\n        //store the current user name for later use\r\n        this.octokit.users.getAuthenticated({}).then(result => {\r\n            this.currentUser = result.data.login;\r\n        });\r\n        \r\n        //List all of the repos that a user is the owner of\r\n        this.octokit.repos.list({\r\n          affiliation: 'owner',\r\n        }).then(({data, headers, status}) => {\r\n            data.forEach(repo => {\r\n                \r\n                //Check to see if this is a maslow create project\r\n                this.octokit.repos.listTopics({\r\n                    owner: repo.owner.login, \r\n                    repo: repo.name,\r\n                    headers: {\r\n                        accept: 'application/vnd.github.mercy-preview+json'\r\n                    }\r\n                }).then(data => {\r\n                    if(data.data.names.includes(\"maslowcreate\") || data.data.names.includes(\"maslowcreate-molecule\")){\r\n                        this.addProject(repo.name);\r\n                    }\r\n                })\r\n                \r\n            });\r\n        })\r\n        \r\n    }\r\n\r\n    addProject(projectName){\r\n        //create a project element to display\r\n        \r\n        var project = document.createElement(\"DIV\");\r\n        \r\n        var projectPicture = document.createElement(\"IMG\");\r\n        projectPicture.setAttribute(\"src\", \"testPicture.png\");\r\n        projectPicture.setAttribute(\"style\", \"width: 100%\");\r\n        projectPicture.setAttribute(\"style\", \"height: 100%\");\r\n        project.appendChild(projectPicture);\r\n        \r\n        var shortProjectName;\r\n        if(projectName.length > 9){\r\n            shortProjectName = document.createTextNode(projectName.substr(0,7)+\"..\");\r\n        }\r\n        else{\r\n            shortProjectName = document.createTextNode(projectName);\r\n        }\r\n        project.setAttribute(\"class\", \"project\");\r\n        project.setAttribute(\"id\", projectName);\r\n        project.appendChild(shortProjectName); \r\n        this.popup.appendChild(project); \r\n        \r\n        document.getElementById(projectName).addEventListener('click', event => {\r\n            this.projectClicked(projectName);\r\n        })\r\n\r\n    }\r\n\r\n    projectClicked(projectName){\r\n        //runs when you click on one of the projects\r\n        if(projectName == \"New Project\"){\r\n            this.createNewProjectPopup();\r\n        }\r\n        else{\r\n            this.loadProject(projectName);\r\n        }\r\n    }\r\n\r\n    createNewProjectPopup(){\r\n        //Clear the popup and populate the fields we will need to create the new repo\r\n        \r\n        while (this.popup.firstChild) {\r\n            this.popup.removeChild(this.popup.firstChild);\r\n        }\r\n        \r\n        //Project name\r\n        // <div class=\"form\">\r\n        var createNewProjectDiv = document.createElement(\"DIV\");\r\n        createNewProjectDiv.setAttribute(\"class\", \"form\");\r\n        \r\n        //Add a title\r\n        var header = document.createElement(\"H1\");\r\n        var title = document.createTextNode(\"Create a new project\");\r\n        header.appendChild(title);\r\n        createNewProjectDiv.appendChild(header);\r\n        \r\n        //Create the form object\r\n        var form = document.createElement(\"form\");\r\n        form.setAttribute(\"class\", \"login-form\");\r\n        createNewProjectDiv.appendChild(form);\r\n        \r\n        //Create the name field\r\n        var name = document.createElement(\"input\");\r\n        name.setAttribute(\"id\",\"project-name\");\r\n        name.setAttribute(\"type\",\"text\");\r\n        name.setAttribute(\"placeholder\",\"Project name\");\r\n        form.appendChild(name);\r\n        \r\n        //Add the description field\r\n        var description = document.createElement(\"input\");\r\n        description.setAttribute(\"id\", \"project-description\");\r\n        description.setAttribute(\"type\", \"text\");\r\n        description.setAttribute(\"placeholder\", \"Project description\");\r\n        form.appendChild(description);\r\n        \r\n        //Add the button\r\n        var createButton = document.createElement(\"button\");\r\n        createButton.setAttribute(\"type\", \"button\");\r\n        createButton.setAttribute(\"onclick\", \"this.createNewProject()\");\r\n        var buttonText = document.createTextNode(\"Create Project\");\r\n        createButton.appendChild(buttonText);\r\n        form.appendChild(createButton);\r\n        \r\n\r\n        this.popup.appendChild(createNewProjectDiv);\r\n\r\n    }\r\n\r\n    createNewProject(){\r\n        \r\n        if(typeof this.intervalTimer != undefined){\r\n            clearInterval(this.intervalTimer); //Turn of auto saving\r\n        }\r\n        \r\n        //Get name and description\r\n        var name = document.getElementById('project-name').value;\r\n        var description = document.getElementById('project-description').value;\r\n        \r\n        //Load a blank project\r\n        GlobalVariables.topLevelMolecule = new Molecule({\r\n            x: 0, \r\n            y: 0, \r\n            topLevel: true, \r\n            name: name,\r\n            atomType: \"Molecule\",\r\n            uniqueID: generateUniqueID()\r\n        });\r\n        \r\n        GlobalVariables.currentMolecule = GlobalVariables.topLevelMolecule;\r\n        \r\n        //Create a new repo\r\n        this.octokit.repos.createForAuthenticatedUser({\r\n            name: name,\r\n            description: description\r\n        }).then(result => {\r\n            //Once we have created the new repo we need to create a file within it to store the project in\r\n            this.currentRepoName = result.data.name;\r\n            var path = \"project.maslowcreate\";\r\n            var content = window.btoa(\"init\"); // create a file with just the word \"init\" in it and base64 encode it\r\n            this.octokit.repos.createFile({\r\n                owner: this.currentUser,\r\n                repo: this.currentRepoName,\r\n                path: path,\r\n                message: \"initialize repo\", \r\n                content: content\r\n            }).then(result => {\r\n                //Then create the BOM file\r\n                content = window.btoa(this.bomHeader); // create a file with just the header in it and base64 encode it\r\n                this.octokit.repos.createFile({\r\n                    owner: this.currentUser,\r\n                    repo: this.currentRepoName,\r\n                    path: \"BillOfMaterials.md\",\r\n                    message: \"initialize BOM\", \r\n                    content: content\r\n                }).then(result => {\r\n                    //Then create the README file\r\n                    content = window.btoa(\"readme init\"); // create a file with just the word \"init\" in it and base64 encode it\r\n                    this.octokit.repos.createFile({\r\n                        owner: this.currentUser,\r\n                        repo: this.currentRepoName,\r\n                        path: \"README.md\",\r\n                        message: \"initialize README\", \r\n                        content: content\r\n                    }).then(result => {\r\n                        console.log(\"readme created\");\r\n                        \r\n                        this.intervalTimer = setInterval(this.saveProject, 30000); //Save the project regularly\r\n                    });\r\n                });\r\n            });\r\n            \r\n            //Update the project topics\r\n            this.octokit.repos.replaceTopics({\r\n                owner: this.currentUser,\r\n                repo: this.currentRepoName,\r\n                names: [\"maslowcreate\"],\r\n                headers: {\r\n                    accept: 'application/vnd.github.mercy-preview+json'\r\n                }\r\n            })\r\n        });\r\n        \r\n        GlobalVariables.currentMolecule.backgroundClick();\r\n        \r\n        //Clear and hide the popup\r\n        while (this.popup.firstChild) {\r\n            this.popup.removeChild(this.popup.firstChild);\r\n        }\r\n        this.popup.classList.add('off');\r\n        \r\n        \r\n    }\r\n\r\n    saveProject(){\r\n        //Save the current project into the github repo\r\n        \r\n        if(this.currentRepoName != null){\r\n            \r\n            var path = \"project.maslowcreate\";\r\n            var content = window.btoa(JSON.stringify(GlobalVariables.topLevelMolecule.serialize(null), null, 4)); //Convert the GlobalVariables.topLevelMolecule object to a JSON string and then convert it to base64 encoding\r\n            \r\n            //Get the SHA for the file\r\n            this.octokit.repos.getContents({\r\n                owner: this.currentUser,\r\n                repo: this.currentRepoName,\r\n                path: path\r\n            }).then(thisRepo => {\r\n                var sha = thisRepo.data.sha\r\n                \r\n                //Save the repo to the file\r\n                this.octokit.repos.updateFile({\r\n                    owner: this.currentUser,\r\n                    repo: this.currentRepoName,\r\n                    path: path,\r\n                    message: \"autosave\", \r\n                    content: content,\r\n                    sha: sha\r\n                }).then(result => {\r\n                    \r\n                    console.log(\"Project Saved\");\r\n                    \r\n                    //Then update the BOM file\r\n                    \r\n                    path = \"BillOfMaterials.md\";\r\n                    content = this.bomHeader;\r\n                    \r\n                    GlobalVariables.topLevelMolecule.requestBOM().forEach(item => {\r\n                        content = content + \"\\n|\" + item.BOMitemName + \"|\" + item.totalNeeded + \"|\" + item.costUSD + \"|\" + item.source + \"|\";\r\n                    });\r\n                    \r\n                    content = window.btoa(content);\r\n                    \r\n                    //Get the SHA for the file\r\n                    this.octokit.repos.getContents({\r\n                        owner: this.currentUser,\r\n                        repo: this.currentRepoName,\r\n                        path: path\r\n                    }).then(result => {\r\n                        var sha = result.data.sha\r\n                        \r\n                        //Save the BOM to the file\r\n                        this.octokit.repos.updateFile({\r\n                            owner: this.currentUser,\r\n                            repo: this.currentRepoName,\r\n                            path: path,\r\n                            message: \"update Bom\", \r\n                            content: content,\r\n                            sha: sha\r\n                        }).then(result => {\r\n                            console.log(\"BOM updated\");\r\n                            \r\n                            this.octokit.repos.get({\r\n                                owner: this.currentUser, \r\n                                repo: this.currentRepoName\r\n                            }).then(result => {\r\n                                \r\n                                path = \"README.md\";\r\n                                content = \"# \" + result.data.name + \"\\n\" + result.data.description + \"\\n\";\r\n                                \r\n                                GlobalVariables.topLevelMolecule.requestReadme().forEach(item => {\r\n                                    content = content + item + \"\\n\\n\\n\"\r\n                                });\r\n                                \r\n                                content = window.btoa(content);\r\n                                \r\n                                //Get the SHA for the file\r\n                                this.octokit.repos.getContents({\r\n                                    owner: this.currentUser,\r\n                                    repo: this.currentRepoName,\r\n                                    path: path\r\n                                }).then(result => {\r\n                                    var sha = result.data.sha\r\n                                    \r\n                                    //Save the README to the file\r\n                                    this.octokit.repos.updateFile({\r\n                                        owner: this.currentUser,\r\n                                        repo: this.currentRepoName,\r\n                                        path: path,\r\n                                        message: \"update Readme\", \r\n                                        content: content,\r\n                                        sha: sha\r\n                                    }).then(result => {\r\n                                        console.log(\"README updated\");\r\n                                    });\r\n                                });\r\n                            });\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    loadProject(projectName){\r\n        \r\n        if(typeof this.intervalTimer != undefined){\r\n            clearInterval(this.intervalTimer); //Turn of auto saving\r\n        }\r\n        \r\n        this.currentRepoName = projectName;\r\n        \r\n        this.octokit.repos.getContents({\r\n            owner: this.currentUser,\r\n            repo: projectName,\r\n            path: 'project.maslowcreate'\r\n        }).then(result => {\r\n                \r\n            //content will be base64 encoded\r\n            let rawFile = atob(result.data.content);\r\n            \r\n            \r\n            var moleculesList = JSON.parse(rawFile).molecules;\r\n            \r\n            //Load a blank project\r\n            GlobalVariables.topLevelMolecule = new Molecule({\r\n                x: 0, \r\n                y: 0, \r\n                topLevel: true, \r\n                atomType: \"Molecule\"\r\n            });\r\n            \r\n            GlobalVariables.currentMolecule = GlobalVariables.topLevelMolecule;\r\n            \r\n            //Load the top level molecule from the file\r\n            GlobalVariables.topLevelMolecule.deserialize(moleculesList, moleculesList.filter((molecule) => { return molecule.topLevel == true; })[0].uniqueID);\r\n            \r\n            GlobalVariables.currentMolecule.backgroundClick();\r\n\r\n            //Clear and hide the popup\r\n            while (this.popup.firstChild) {\r\n                this.popup.removeChild(this.popup.firstChild);\r\n            }\r\n            this.popup.classList.add('off');\r\n            \r\n            this.intervalTimer = setInterval(this.saveProject, 30000); //Save the project regularly\r\n        })\r\n        \r\n    }\r\n\r\n    exportCurrentMoleculeToGithub(molecule){\r\n        \r\n        //Get name and description\r\n        var name = molecule.name;\r\n        var description = \"A stand alone molecule exported from Maslow Create\";\r\n        \r\n        //Create a new repo\r\n        this.octokit.repos.createForAuthenticatedUser({\r\n            name: name,\r\n            description: description\r\n        }).then(result => {\r\n            //Once we have created the new repo we need to create a file within it to store the project in\r\n            var repoName = result.data.name;\r\n            var id       = result.data.id;\r\n            var path     = \"project.maslowcreate\";\r\n            var content  = window.btoa(\"init\"); // create a file with just the word \"init\" in it and base64 encode it\r\n            this.octokit.repos.createFile({\r\n                owner: this.currentUser,\r\n                repo: repoName,\r\n                path: path,\r\n                message: \"initialize repo\", \r\n                content: content\r\n            }).then(result => {\r\n                \r\n                //Save the molecule into the newly created repo\r\n                \r\n                var path = \"project.maslowcreate\";\r\n                \r\n                molecule.topLevel = true; //force the molecule to export in the long form as if it were the top level molecule\r\n                var content = window.btoa(JSON.stringify(molecule.serialize(null), null, 4)); //Convert the passed molecule object to a JSON string and then convert it to base64 encoding\r\n                \r\n                //Get the SHA for the file\r\n                this.octokit.repos.getContents({\r\n                    owner: this.currentUser,\r\n                    repo: repoName,\r\n                    path: path\r\n                }).then(result => {\r\n                    var sha = result.data.sha\r\n                    \r\n                    //Save the repo to the file\r\n                    this.octokit.repos.updateFile({\r\n                        owner: this.currentUser,\r\n                        repo: repoName,\r\n                        path: path,\r\n                        message: \"export Molecule\", \r\n                        content: content,\r\n                        sha: sha\r\n                    }).then(result => {\r\n                        console.log(\"Molecule Exported.\");\r\n                        \r\n                        //Replace the existing molecule now that we just exported\r\n                        molecule.replaceThisMoleculeWithGithub(id);\r\n                    })\r\n                })\r\n\r\n            });\r\n            \r\n            //Update the project topics\r\n            this.octokit.repos.replaceTopics({\r\n                owner: this.currentUser,\r\n                repo: repoName,\r\n                names: [\"maslowcreate-molecule\"],\r\n                headers: {\r\n                    accept: 'application/vnd.github.mercy-preview+json'\r\n                }\r\n            })\r\n            \r\n        });\r\n    }\r\n\r\n}\r\n","import Circle from './molecules/circle.js'\r\nimport Rectangle from './molecules/rectangle.js'\r\nimport ShrinkWrap from './molecules/shrinkwrap.js'\r\nimport Translate from './molecules/translate.js'\r\nimport RegularPolygon from './molecules/regularpolygon.js'\r\nimport Extrude from './molecules/extrude.js'\r\nimport Scale from './molecules/scale.js'\r\nimport Union from './molecules/union.js'\r\nimport Intersection from './molecules/intersection.js'\r\nimport Difference from './molecules/difference.js'\r\nimport Constant from './molecules/constant.js'\r\nimport Equation from './molecules/equation.js'\r\nimport Molecule from './molecules/molecule.js'\r\nimport Input from './molecules/input.js'\r\nimport Readme from './molecules/readme.js'\r\nimport Rotate from './molecules/rotate.js'\r\nimport Mirror from './molecules/mirror.js'\r\nimport GitHubMolecule from './molecules/githubmolecule.js'\r\nimport Output from './molecules/output.js'\r\n\r\nimport GitHubModule from './githubOauth'\r\n\r\nclass GlobalVariables{\r\n    constructor(){\r\n        this.canvas = null\r\n        this.c = null\r\n        \r\n        this.availableTypes = {\r\n            circle:        {creator: Circle, atomType: \"Circle\"},\r\n            rectangle:     {creator: Rectangle, atomType: \"Rectangle\"},\r\n            shirinkwrap:   {creator: ShrinkWrap, atomType: \"ShrinkWrap\"},\r\n            translate:     {creator: Translate, atomType: \"Translate\"},\r\n            regularPolygon:{creator: RegularPolygon, atomType: \"RegularPolygon\"},\r\n            extrude:       {creator: Extrude, atomType: \"Extrude\"},\r\n            scale:         {creator: Scale, atomType: \"Scale\"},\r\n            intersection:  {creator: Intersection, atomType: \"Intersection\"},\r\n            difference:    {creator: Difference, atomType: \"Difference\"},\r\n            costant:       {creator: Constant, atomType: \"Constant\"},\r\n            equation:      {creator: Equation, atomType: \"Equation\"},\r\n            molecule:      {creator: Molecule, atomType: \"Molecule\"},\r\n            input:         {creator: Input, atomType: \"Input\"},\r\n            readme:        {creator: Readme, atomType: \"Readme\"},\r\n            rotate:        {creator: Rotate, atomType: \"Rotate\"},\r\n            mirror:        {creator: Mirror, atomType: \"Mirror\"},\r\n            githubmolecule:{creator: GitHubMolecule, atomType: \"GitHubMolecule\"},\r\n            union:         {creator: Union, atomType: \"Union\"}\r\n        }\r\n\r\n        this.secretTypes = {\r\n            output:        {creator: Output, atomType: \"Output\"}\r\n        }\r\n\r\n\r\n        this.currentMolecule;\r\n        this.topLevelMolecule;\r\n        \r\n        this.sideBar = document.querySelector('.sideBar');\r\n        \r\n        this.gitHub = new GitHubModule();\r\n    }\r\n    \r\n    generateUniqueID(){\r\n        return Math.floor(Math.random()*900000) + 100000;\r\n    }\r\n\r\n    distBetweenPoints(x1, x2, y1, y2){\r\n        var a2 = Math.pow(x1 - x2, 2);\r\n        var b2 = Math.pow(y1 - y2, 2);\r\n        var dist = Math.sqrt(a2 + b2);\r\n        \r\n        return dist;\r\n    }\r\n}\r\n\r\nexport default (new GlobalVariables);","import GlobalVariables from './globalvariables'\r\n\r\nclass Menu {\r\n    constructor(){\r\n        this.menu = document.querySelector('.menu');\r\n        this.menu.classList.add('off');\r\n        this.menuList = document.getElementById(\"menuList\");\r\n    \r\n        //Add the search bar to the list item\r\n    \r\n        for(var key in GlobalVariables.availableTypes) {\r\n            var newElement = document.createElement(\"LI\");\r\n            var instance = GlobalVariables.availableTypes[key];\r\n            var text = document.createTextNode(instance.atomType);\r\n            newElement.setAttribute(\"class\", \"menu-item\");\r\n            newElement.setAttribute(\"id\", instance.atomType);\r\n            newElement.appendChild(text); \r\n            this.menuList.appendChild(newElement); \r\n            \r\n            //Add function to call when atom is selected\r\n            document.getElementById(instance.atomType).addEventListener('click', (e) => {\r\n               this.placeNewNode(e);\r\n            });\r\n            \r\n        }\r\n        \r\n        //Add functions to call when tabs are clicked\r\n        document.getElementById(\"localTab\").addEventListener(\"click\", (e) => {\r\n            this.openTab(e, \"menuList\");\r\n        });\r\n        document.getElementById(\"githubTab\").addEventListener(\"click\", (e) => {\r\n           this.openTab(e, \"githubList\");\r\n        });\r\n        //Add function call when background is right clicked\r\n        document.getElementById('flow-canvas').addEventListener('contextmenu', (e) => {\r\n           this.showmenu(e);\r\n        });\r\n        //Add function call to search when typing\r\n        document.getElementById('menuInput').addEventListener('keyup', (e) => {\r\n           this.searchMenu(e);\r\n        });\r\n    }\r\n    \r\n    placeNewNode(ev){\r\n        console.trace();\r\n        this.hidemenu();\r\n        let clr = ev.target.id;\r\n        \r\n        GlobalVariables.currentMolecule.placeAtom({\r\n            x: this.menu.x, \r\n            y: this.menu.y, \r\n            parent: GlobalVariables.currentMolecule,\r\n            atomType: clr,\r\n            uniqueID: GlobalVariables.generateUniqueID()\r\n        }, null, GlobalVariables.availableTypes); //null indicates that there is nothing to load from the molecule list for this one\r\n    }\r\n\r\n    placeGitHubMolecule(ev){\r\n        this.hidemenu();\r\n        let clr = ev.target.id;\r\n        \r\n        GlobalVariables.currentMolecule.placeAtom({\r\n            x: this.menu.x, \r\n            y: this.menu.y, \r\n            parent: GlobalVariables.currentMolecule,\r\n            atomType: \"GitHubMolecule\",\r\n            projectID: clr,\r\n            uniqueID: GlobalVariables.generateUniqueID()\r\n        }, null, GlobalVariables.availableTypes); //null indicates that there is nothing to load from the molecule list for this one\r\n    }\r\n\r\n    showmenu(ev){\r\n        //Open the default tab\r\n        document.getElementById(\"localTab\").click();\r\n        \r\n        //stop the real right click menu\r\n        ev.preventDefault(); \r\n        \r\n        //make sure all elements are unhidden\r\n        var ul = document.getElementById(\"menuList\");\r\n        var li = ul.getElementsByTagName('li');\r\n        for (var i = 0; i < li.length; i++) {\r\n            li[i].style.display = \"none\"; //set each item to not display\r\n        }\r\n        \r\n        //show the menu\r\n        this.menu.style.top = `${ev.clientY - 20}px`;\r\n        this.menu.style.left = `${ev.clientX - 20}px`;\r\n        this.menu.x = ev.clientX;\r\n        this.menu.y = ev.clientY;\r\n        this.menu.classList.remove('off');\r\n        \r\n        document.getElementById('menuInput').focus();\r\n    }\r\n\r\n    hidemenu(ev){\r\n        this.menu.classList.add('off');\r\n        this.menu.style.top = '-200%';\r\n        this.menu.style.left = '-200%';\r\n    }\r\n\r\n    searchMenu(evt) {\r\n      \r\n        if(document.getElementsByClassName(\"tablinks active\")[0].id == \"localTab\"){\r\n            //We are searching the local tab\r\n            // Declare variables\r\n            var input, filter, ul, li, a, i, txtValue;\r\n            input = document.getElementById('menuInput');\r\n            filter = input.value.toUpperCase();\r\n            ul = document.getElementById(\"menuList\");\r\n            li = ul.getElementsByTagName('li');\r\n\r\n            // Loop through all list items, and hide those who don't match the search query\r\n            for (i = 0; i < li.length; i++) {\r\n                a = li[i]; //this is the link part of the list item\r\n                txtValue = a.textContent || a.innerText;\r\n                if (txtValue.toUpperCase().indexOf(filter) > -1) { //if the entered string matches\r\n                    li[i].style.display = \"\";\r\n                } else {\r\n                    li[i].style.display = \"none\";\r\n                }\r\n                \r\n                //If enter was just pressed \"click\" the first element that is being displayed\r\n                if(evt.code == \"Enter\" && li[i].style.display != \"none\"){\r\n                    li[i].click();\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            //We are searching on github\r\n            if(evt.code == \"Enter\"){\r\n                input = document.getElementById('menuInput').value;\r\n                \r\n                this.githubList = document.getElementById(\"githubList\");\r\n                \r\n                oldResults = document.getElementsByClassName(\"menu-item\");\r\n                for (i = 0; i < oldResults.length; i++) {\r\n                    oldResults[i].style.display = \"none\";\r\n                }\r\n                \r\n                octokit.search.repos({\r\n                    q: input,\r\n                    sort: \"stars\",\r\n                    per_page: 100,\r\n                    topic: \"maslowcreate-molecule\",\r\n                    page: 1,\r\n                    headers: {\r\n                        accept: 'application/vnd.github.mercy-preview+json'\r\n                    }\r\n                }).then(result => {\r\n                    result.data.items.forEach(item => {\r\n                        if(item.topics.includes(\"maslowcreate-molecule\")){\r\n                        \r\n                            var newElement = document.createElement(\"LI\");\r\n                            var text = document.createTextNode(item.name);\r\n                            newElement.setAttribute(\"class\", \"menu-item\");\r\n                            newElement.setAttribute(\"id\", item.id);\r\n                            newElement.appendChild(text); \r\n                            this.githubList.appendChild(newElement); \r\n                            \r\n                            document.getElementById(item.id).addEventListener('click', placeGitHubMolecule);\r\n                        }\r\n                    });\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    openTab(evt, tabName) {\r\n      // Declare all variables\r\n      var i, tabcontent, tablinks;\r\n\r\n      // Get all elements with class=\"tabcontent\" and hide them\r\n      tabcontent = document.getElementsByClassName(\"tabcontent\");\r\n      for (i = 0; i < tabcontent.length; i++) {\r\n        tabcontent[i].style.display = \"none\";\r\n      }\r\n\r\n      // Get all elements with class=\"tablinks\" and remove the class \"active\"\r\n      tablinks = document.getElementsByClassName(\"tablinks\");\r\n      for (i = 0; i < tablinks.length; i++) {\r\n        tablinks[i].className = tablinks[i].className.replace(\" active\", \"\");\r\n      }\r\n\r\n      // Show the current tab, and add an \"active\" class to the button that opened the tab\r\n      document.getElementById(tabName).style.display = \"block\";\r\n      evt.currentTarget.className += \" active\";\r\n    }\r\n}\r\n\r\nexport default (new Menu);","import Atom from '../prototypes/atom'\r\n\r\nexport default class Circle extends Atom {\r\n    \r\n    constructor(values){\r\n        \r\n        super(values);\r\n        \r\n        this.name = \"Circle\";\r\n        this.atomType = \"Circle\";\r\n        this.defaultCodeBlock = \"circle({r: ~radius~, center: true, fn: 25})\";\r\n        this.codeBlock = \"\";\r\n        \r\n        this.addIO(\"input\", \"radius\", this, \"number\", 10);\r\n        this.addIO(\"input\", \"max segment size\", this, \"number\", 4);\r\n        this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\r\n        \r\n        this.setValues(values);\r\n        \r\n        //generate the correct codeblock for this atom on creation\r\n        this.updateCodeBlock();\r\n    }\r\n    \r\n    updateCodeBlock(){\r\n        //Overwrite the normal update code block to update the number of segments also\r\n        \r\n        var maximumSegmentSize = this.findIOValue(\"max segment size\");\r\n        var circumference  = 3.14*2*this.findIOValue(\"radius\");\r\n        \r\n        var numberOfSegments = parseInt( circumference / maximumSegmentSize );\r\n        \r\n        var regex = /fn: (\\d+)\\}/gi;\r\n        this.defaultCodeBlock = this.defaultCodeBlock.replace(regex, \"fn: \" + numberOfSegments + \"}\");\r\n        \r\n        super.updateCodeBlock();\r\n    }\r\n}","import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\nexport default class Constant extends Atom{\r\n    \r\n    constructor(values){\r\n        super(values);\r\n        \r\n        this.codeBlock = \"\";\r\n        this.type = \"constant\";\r\n        this.name = \"Constant\";\r\n        this.atomType = \"Constant\";\r\n        this.height = 16;\r\n        this.radius = 15;\r\n        \r\n        this.setValues(values);\r\n        \r\n        this.addIO(\"output\", \"number\", this, \"number\", 10);\r\n        \r\n        if (typeof this.ioValues !== 'undefined') {\r\n            this.ioValues.forEach(ioValue => { //for each saved value\r\n                this.children.forEach(io => {  //Find the matching IO and set it to be the saved value\r\n                    if(ioValue.name == io.name){\r\n                        io.setValue(ioValue.ioValue);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n    \r\n    updateSidebar(){\r\n        //updates the sidebar to display information about this node\r\n        \r\n        var valueList = super.updateSidebar(); //call the super function\r\n        \r\n        var output = this.children[0];\r\n        \r\n        this.createEditableValueListItem(valueList,output,\"value\", \"Value\", true);\r\n        this.createEditableValueListItem(valueList,this,\"name\", \"Name\", false);\r\n        \r\n    }\r\n    \r\n    setValue(newName){\r\n        //Called by the sidebar to set the name\r\n        this.name = newName;\r\n    }\r\n    \r\n    serialize(values){\r\n        //Save the IO value to the serial stream\r\n        var valuesObj = super.serialize(values);\r\n        \r\n        valuesObj.ioValues = [{\r\n            name: \"number\",\r\n            ioValue: this.children[0].getValue()\r\n        }];\r\n        \r\n        return valuesObj;\r\n        \r\n    }\r\n    \r\n    draw() {\r\n        \r\n        this.children.forEach(child => {\r\n            child.draw();       \r\n        });\r\n        \r\n        GlobalVariables.c.beginPath();\r\n        GlobalVariables.c.fillStyle = this.color;\r\n        GlobalVariables.c.rect(this.x - this.radius, this.y - this.height/2, 2*this.radius, this.height);\r\n        GlobalVariables.c.textAlign = \"start\"; \r\n        GlobalVariables.c.fillText(this.name, this.x + this.radius, this.y-this.radius);\r\n        GlobalVariables.c.fill();\r\n        GlobalVariables.c.closePath();\r\n    }\r\n}\r\n","import Atom from '../prototypes/atom'\r\n\r\nexport default class Difference extends Atom{\r\n    \r\n    constructor (values){\r\n        \r\n        super(values);\r\n        \r\n        this.addIO(\"input\", \"geometry1\", this, \"geometry\", \"\");\r\n        this.addIO(\"input\", \"geometry2\", this, \"geometry\", \"\");\r\n        this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\r\n        \r\n        this.name = \"Difference\";\r\n        this.atomType = \"Difference\";\r\n        this.defaultCodeBlock = \"difference(~geometry1~,~geometry2~)\";\r\n        this.codeBlock = \"\";\r\n        \r\n        this.setValues(values);\r\n    }\r\n}","import Atom from '../prototypes/atom'\r\n\r\nexport default class Equation extends Atom {\r\n    \r\n    constructor(values){\r\n        super(values);\r\n        \r\n        this.addIO(\"input\", \"x\", this, \"number\", 0);\r\n        this.addIO(\"input\", \"y\", this, \"number\", 0);\r\n        this.addIO(\"output\", \"z\", this, \"number\", 0);\r\n        \r\n        this.name = \"Equation\";\r\n        this.atomType = \"Equation\";\r\n        this.defaultCodeBlock = \"\";\r\n        this.codeBlock = \"\";\r\n        this.equationOptions = [\"x+y\", \"x-y\", \"x*y\", \"x/y\", \"cos(x)\", \"sin(x)\", \"x^y\"];\r\n        this.currentEquation = 0;\r\n        \r\n        this.setValues(values);\r\n        \r\n    }\r\n    \r\n    serialize(savedObject){\r\n        var superSerialObject = super.serialize(null);\r\n        \r\n        //Write the current equation to the serialized object\r\n        superSerialObject.currentEquation = this.currentEquation;\r\n        \r\n        return superSerialObject;\r\n    }\r\n    \r\n    updateCodeBlock(){\r\n        //A super classed version of the update codeblock default function which computes the equation values\r\n        var x = this.findIOValue(\"x\");\r\n        var y = this.findIOValue(\"y\");\r\n        \r\n        var z;\r\n        switch(this.currentEquation){\r\n            case 0:\r\n                z = x+y;\r\n                break;\r\n            case 1:\r\n                z = x-y;\r\n                break;\r\n            case 2:\r\n                z = x*y;\r\n                break;\r\n            case 3:\r\n                z = x/y;\r\n                break;\r\n            case 4:\r\n                z = Math.cos(x);\r\n                break;\r\n            case 5:\r\n                z = Math.sin(x);\r\n                break;\r\n            case 6:\r\n                z = Math.pow(x,y);\r\n                break;\r\n            default:\r\n                console.log(\"no options found\");\r\n                console.log(this.currentEquation);\r\n        }\r\n        \r\n        //Set the output to be the generated value\r\n        this.children.forEach(child => {\r\n            if(child.type == 'output'){\r\n                child.setValue(z);\r\n            }\r\n        });\r\n    }\r\n    \r\n    changeEquation(newValue){\r\n        this.currentEquation = parseInt(newValue);\r\n        this.updateCodeBlock();\r\n    }\r\n    \r\n    updateSidebar(){\r\n        //Update the side bar to make it possible to change the molecule name\r\n        \r\n        var valueList = super.updateSidebar();\r\n        \r\n        this.createDropDown(valueList, this, this.equationOptions, this.currentEquation, \"z = \");\r\n        \r\n    } \r\n}","import Atom from '../prototypes/atom'\r\n\r\nexport default class Extrude extends Atom{\r\n    \r\n    constructor(values){\r\n        \r\n        super(values);\r\n        \r\n        this.name = \"Extrude\";\r\n        this.atomType = \"Extrude\";\r\n        this.defaultCodeBlock = \"linear_extrude({ height: ~height~ }, ~geometry~)\";\r\n        this.codeBlock = \"\";\r\n        \r\n        this.addIO(\"input\", \"geometry\" , this, \"geometry\", \"\");\r\n        this.addIO(\"input\", \"height\"   , this, \"number\", 10);\r\n        this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\r\n        \r\n        this.setValues(values);\r\n    }\r\n}","import Molecule from '../molecules/molecule'\r\n\r\nexport default class GitHubMolecule extends Molecule {\r\n    \r\n    constructor(values){\r\n        super(values);\r\n        \r\n        \r\n        this.name = \"Github Molecule\";\r\n        this.atomType = \"GitHubMolecule\";\r\n        this.topLevel = false; //a flag to signal if this node is the top level node\r\n        this.centerColor = \"black\";\r\n        this.projectID = 174292302;\r\n        \r\n        this.setValues(values);\r\n        \r\n        this.loadProjectByID(this.projectID);\r\n        \r\n    }\r\n    \r\n    doubleClick(x,y){\r\n        //Prevent you from being able to double click into a github molecule\r\n        \r\n        var clickProcessed = false;\r\n        \r\n        var distFromClick = distBetweenPoints(x, this.x, y, this.y);\r\n        \r\n        if (distFromClick < this.radius){\r\n            clickProcessed = true;\r\n        }\r\n        \r\n        return clickProcessed; \r\n    }\r\n    \r\n    loadProjectByID(id){\r\n    //Get the repo by ID\r\n        octokit.request('GET /repositories/:id', {id}).then(result => {\r\n            \r\n            //Find out the owners info;\r\n            \r\n            var user     = result.data.owner.login;\r\n            var repoName = result.data.name;\r\n            \r\n            //Get the file contents\r\n            \r\n            octokit.repos.getContents({\r\n                owner: user,\r\n                repo: repoName,\r\n                path: 'project.maslowcreate'\r\n            }).then(result => {\r\n                    \r\n                //content will be base64 encoded\r\n                let rawFile = atob(result.data.content);\r\n                let moleculesList =  JSON.parse(rawFile).molecules;\r\n                \r\n                this.deserialize(moleculesList, moleculesList.filter((molecule) => { return molecule.topLevel == true; })[0].uniqueID);\r\n                \r\n                this.topLevel = false;\r\n                \r\n                //Try to re-establish the connectors in the parent molecule to get the ones that were missed before when this molecule had not yet been fully loaded\r\n                this.parent.savedConnectors.forEach(connector => {\r\n                    this.parent.placeConnector(JSON.parse(connector));\r\n                });\r\n            });\r\n        });\r\n    }\r\n    \r\n    serialize(savedObject){\r\n        \r\n        //Return a placeholder for this molecule\r\n        var object = {\r\n            atomType: this.atomType,\r\n            name: this.name,\r\n            x: this.x,\r\n            y: this.y,\r\n            uniqueID: this.uniqueID,\r\n            projectID: this.projectID\r\n        }\r\n        \r\n        return object;\r\n    }\r\n    \r\n    updateSidebar(){\r\n        //updates the sidebar to display information about this node\r\n        \r\n        //remove everything in the sideBar now\r\n        while (sideBar.firstChild) {\r\n            sideBar.removeChild(sideBar.firstChild);\r\n        }\r\n        \r\n        //add the name as a title\r\n        var name = document.createElement('h1');\r\n        name.textContent = this.name;\r\n        name.setAttribute(\"style\",\"text-align:center;\");\r\n        sideBar.appendChild(name);\r\n    }\r\n}","import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\nexport default class Input extends Atom {\r\n    \r\n    constructor(values){\r\n        super (values);\r\n        \r\n        this.name = \"Input\" + generateUniqueID();\r\n        this.codeBlock = \"\";\r\n        this.type = \"input\";\r\n        this.atomType = \"Input\";\r\n        this.height = 16;\r\n        this.radius = 15;\r\n        \r\n        this.setValues(values);\r\n        \r\n        this.addIO(\"output\", \"number or geometry\", this, \"geometry\", \"\");\r\n        \r\n        //Add a new input to the current molecule\r\n        if (typeof this.parent !== 'undefined') {\r\n            this.parent.addIO(\"input\", this.name, this.parent, \"geometry\", \"\");\r\n        }\r\n    }\r\n    \r\n    updateSidebar(){\r\n        //updates the sidebar to display information about this node\r\n        \r\n        var valueList =  super.updateSidebar(); //call the super function\r\n        \r\n        this.createEditableValueListItem(valueList,this,\"name\", \"Name\", false);\r\n        \r\n    }\r\n    \r\n    draw() {\r\n        \r\n        this.children.forEach(child => {\r\n            child.draw();       \r\n        });\r\n        \r\n        \r\n        GlobalVariables.c.fillStyle = this.color;\r\n        \r\n        GlobalVariables.c.textAlign = \"start\"; \r\n        GlobalVariables.c.fillText(this.name, this.x + this.radius, this.y-this.radius);\r\n\r\n        \r\n        GlobalVariables.c.beginPath();\r\n        GlobalVariables.c.moveTo(this.x - this.radius, this.y - this.height/2);\r\n        GlobalVariables.c.lineTo(this.x - this.radius + 10, this.y);\r\n        GlobalVariables.c.lineTo(this.x - this.radius, this.y + this.height/2);\r\n        GlobalVariables.c.lineTo(this.x + this.radius, this.y + this.height/2);\r\n        GlobalVariables.c.lineTo(this.x + this.radius, this.y - this.height/2);\r\n        GlobalVariables.c.fill();\r\n        GlobalVariables.c.closePath();\r\n\r\n    }\r\n    \r\n    deleteNode() {\r\n        \r\n        //Remove this input from the parent molecule\r\n        if (typeof this.parent !== 'undefined') {\r\n            this.parent.removeIO(\"input\", this.name, this.parent);\r\n        }\r\n        \r\n        super.deleteNode();\r\n    }\r\n    \r\n    setValue(theNewName){\r\n        //Called by the sidebar to set the name\r\n        \r\n        //Run through the parent molecule and find the input with the same name\r\n        this.parent.children.forEach(child => {\r\n            if (child.name == this.name){\r\n                this.name = theNewName;\r\n                child.name = theNewName;\r\n            }\r\n        });\r\n    }\r\n    \r\n    setOutput(newOutput){\r\n        //Set the input's output\r\n        \r\n        this.codeBlock = newOutput;  //Set the code block so that clicking on the input previews what it is \r\n        \r\n        //Set the output nodes with type 'geometry' to be the new value\r\n        this.children.forEach(child => {\r\n            if(child.valueType == 'geometry' && child.type == 'output'){\r\n                child.setValue(newOutput);\r\n            }\r\n        });\r\n    } \r\n    \r\n    updateCodeBlock(){\r\n        //This empty function handles any calls to the normal update code block function which breaks things here\r\n    }\r\n}\r\n","import Atom from '../prototypes/atom'\r\n\r\nexport default class Intersection extends Atom {\r\n    \r\n    constructor(values){\r\n        \r\n        super(values);\r\n        \r\n        this.addIO(\"input\", \"geometry1\", this, \"geometry\", \"\");\r\n        this.addIO(\"input\", \"geometry2\", this, \"geometry\", \"\");\r\n        this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\r\n        \r\n        this.name = \"Intersection\";\r\n        this.atomType = \"Intersection\";\r\n        this.defaultCodeBlock = \"intersection(~geometry1~,~geometry2~)\";\r\n        this.codeBlock = \"\";\r\n        \r\n        this.setValues(values);\r\n    }\r\n}","import Atom from '../prototypes/atom'\r\n\r\nexport default class Mirror extends Atom {\r\n    \r\n    constructor(values){\r\n        \r\n        super(values);\r\n        \r\n        this.addIO(\"input\", \"geometry\", this, \"geometry\", \"\");\r\n        this.addIO(\"input\", \"x\", this, \"number\", 1);\r\n        this.addIO(\"input\", \"y\", this, \"number\", 1);\r\n        this.addIO(\"input\", \"z\", this, \"number\", 0);\r\n        this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\r\n        \r\n        this.name = \"Mirror\";\r\n        this.atomType = \"Mirror\";\r\n        this.defaultCodeBlock = \"mirror([~x~,~y~,~z~], ~geometry~)\";\r\n        this.codeBlock = \"\";\r\n        \r\n        this.setValues(values);\r\n    }\r\n}","import Atom from '../prototypes/atom'\r\nimport Connector from '../prototypes/connector'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\nexport default class Molecule extends Atom{\r\n\r\n    constructor(values){\r\n        \r\n        super(values);\r\n        \r\n        this.nodesOnTheScreen = [];\r\n        this.children = [];\r\n        this.name = \"Molecule\";\r\n        this.atomType = \"Molecule\";\r\n        this.centerColor = \"#949294\";\r\n        this.topLevel = false; //a flag to signal if this node is the top level node\r\n        \r\n        this.setValues(values);\r\n        \r\n        //Add the molecule's output\r\n        this.placeAtom({\r\n            parentMolecule: this, \r\n            x: GlobalVariables.canvas.width - 50,\r\n            y: GlobalVariables.canvas.height/2,\r\n            parent: this,\r\n            name: \"Output\",\r\n            atomType: \"Output\"\r\n        }, null, GlobalVariables.secretTypes);\r\n        \r\n        this.updateCodeBlock();\r\n    }\r\n    \r\n    draw(){\r\n        super.draw(); //Super call to draw the rest\r\n        \r\n        //draw the circle in the middle\r\n        GlobalVariables.c.beginPath();\r\n        GlobalVariables.c.fillStyle = this.centerColor;\r\n        GlobalVariables.c.arc(this.x, this.y, this.radius/2, 0, Math.PI * 2, false);\r\n        GlobalVariables.c.closePath();\r\n        GlobalVariables.c.fill();\r\n        \r\n    }\r\n    \r\n    doubleClick(x,y){\r\n        //returns true if something was done with the click\r\n        \r\n        \r\n        var clickProcessed = false;\r\n        \r\n        var distFromClick = GlobalVariables.distBetweenPoints(x, this.x, y, this.y);\r\n        \r\n        if (distFromClick < this.radius){\r\n            GlobalVariables.currentMolecule = this; //set this to be the currently displayed molecule\r\n            clickProcessed = true;\r\n        }\r\n        \r\n        return clickProcessed; \r\n    }\r\n    \r\n    backgroundClick(){\r\n        \r\n        this.updateSidebar();\r\n        \r\n        //var toRender = \"function main () {\\n    return molecule\" + this.uniqueID + \".code()\\n}\\n\\n\" + this.serialize()\r\n        \r\n        //window.loadDesign(toRender,\"MaslowCreate\");\r\n    }\r\n    \r\n    updateCodeBlock(){\r\n        //Grab the code from the output object\r\n        \r\n        //Grab values from the inputs and push them out to the input objects\r\n        this.children.forEach(child => {\r\n            if(child.valueType == 'geometry' && child.type == 'input'){\r\n                this.nodesOnTheScreen.forEach(atom => {\r\n                    if(atom.atomType == \"Input\" && child.name == atom.name){\r\n                        atom.setOutput(child.getValue());\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        \r\n        //Grab the value from the Molecule's output and set it to be the molecule's code block so that clicking on the molecule will display what it is outputting\r\n        this.nodesOnTheScreen.forEach(atom => {\r\n            if(atom.atomType == 'Output'){\r\n                this.codeBlock = atom.codeBlock;\r\n            }\r\n        });\r\n        \r\n        //Set the output nodes with type 'geometry' to be the generated code\r\n        this.children.forEach(child => {\r\n            if(child.valueType == 'geometry' && child.type == 'output'){\r\n                child.setValue(this.codeBlock);\r\n            }\r\n        });\r\n        \r\n        //If this molecule is selected, send the updated value to the renderer\r\n        if (this.selected){\r\n            this.sendToRender();\r\n        }\r\n    }\r\n    \r\n    updateSidebar(){\r\n        //Update the side bar to make it possible to change the molecule name\r\n        \r\n        var valueList = super.updateSidebar(); //call the super function\r\n        \r\n        this.createEditableValueListItem(valueList,this,\"name\", \"Name\", false);\r\n        \r\n        if(!this.topLevel){\r\n            this.createButton(valueList,this,\"Go To Parent\",this.goToParentMolecule);\r\n            \r\n            this.createButton(valueList,this,\"Export To GitHub\", this.exportToGithub)\r\n        }\r\n        else{\r\n            this.createButton(valueList,this,\"Load A Different Project\",GlobalVariables.gitHub.showProjectsToLoad)\r\n        }\r\n        \r\n        this.createBOM(valueList,this,this.BOMlist);\r\n        \r\n        return valueList;\r\n        \r\n    }\r\n    \r\n    goToParentMolecule(self){\r\n        //Go to the parent molecule if there is one\r\n        \r\n        GlobalVariables.currentMolecule.updateCodeBlock();\r\n        \r\n        if(!GlobalVariables.currentMolecule.topLevel){\r\n            GlobalVariables.currentMolecule = GlobalVariables.currentMolecule.parent; //set parent this to be the currently displayed molecule\r\n        }\r\n    }\r\n    \r\n    exportToGithub(self){\r\n        //Export this molecule to github\r\n        exportCurrentMoleculeToGithub(self);\r\n    }\r\n    \r\n    replaceThisMoleculeWithGithub(githubID){\r\n        console.log(githubID);\r\n        \r\n        //If we are currently inside the molecule targeted for replacement, go up one\r\n        if (GlobalVariables.currentMolecule.uniqueID == this.uniqueID){\r\n            GlobalVariables.currentMolecule = this.parent;\r\n        }\r\n        \r\n        //Create a new github molecule in the same spot\r\n        GlobalVariables.currentMolecule.placeAtom({\r\n            x: this.x, \r\n            y: this.y, \r\n            parent: GlobalVariables.currentMolecule,\r\n            name: this.name,\r\n            atomType: \"GitHubMolecule\",\r\n            projectID: githubID,\r\n            uniqueID: generateUniqueID()\r\n        }, null, GlobalVariables.availableTypes);\r\n        \r\n        \r\n        //Then delete the old molecule which has been replaced\r\n        this.deleteNode();\r\n\r\n    }\r\n    \r\n    requestBOM(){\r\n        var generatedBOM = super.requestBOM();\r\n        this.nodesOnTheScreen.forEach(molecule => {\r\n            generatedBOM = generatedBOM.concat(molecule.requestBOM());\r\n        });\r\n        return generatedBOM;\r\n    }\r\n    \r\n    requestReadme(){\r\n        var generatedReadme = super.requestReadme();\r\n        generatedReadme.push(\"## \" + this.name);\r\n        \r\n        var sortableAtomsList = this.nodesOnTheScreen;\r\n        sortableAtomsList.sort(function(a, b){return GlobalVariables.distBetweenPoints(a.x, 0, a.y, 0)-GlobalVariables.distBetweenPoints(b.x, 0, b.y, 0)});\r\n        \r\n        sortableAtomsList.forEach(molecule => {\r\n            generatedReadme = generatedReadme.concat(molecule.requestReadme());\r\n        });\r\n        return generatedReadme;\r\n    }\r\n    \r\n    serialize(savedObject){\r\n        //Save this molecule.\r\n        \r\n        //This one is a little confusing. Basically each molecule saves like an atom, but also creates a second object \r\n        //record of itself in the object \"savedObject\" object. If this is the topLevel molecule we need to create the \r\n        //savedObject object here to pass to lower levels.\r\n        \r\n        if(this.topLevel == true){\r\n            //Create a new blank project to save to\r\n            savedObject = {molecules: []}\r\n        }\r\n            \r\n        var allElementsCode = new Array();\r\n        var allAtoms = [];\r\n        var allConnectors = [];\r\n        \r\n        \r\n        this.nodesOnTheScreen.forEach(atom => {\r\n            if (atom.codeBlock != \"\"){\r\n                allElementsCode.push(atom.codeBlock);\r\n            }\r\n            \r\n            allAtoms.push(JSON.stringify(atom.serialize(savedObject)));\r\n            \r\n            atom.children.forEach(attachmentPoint => {\r\n                if(attachmentPoint.type == \"output\"){\r\n                    attachmentPoint.connectors.forEach(connector => {\r\n                        allConnectors.push(connector.serialize());\r\n                    });\r\n                }\r\n            });\r\n        });\r\n        \r\n        var thisAsObject = {\r\n            atomType: this.atomType,\r\n            name: this.name,\r\n            uniqueID: this.uniqueID,\r\n            topLevel: this.topLevel,\r\n            BOMlist: this.BOMlist,\r\n            allAtoms: allAtoms,\r\n            allConnectors: allConnectors\r\n        }\r\n        \r\n        //Add an object record of this object\r\n        \r\n        savedObject.molecules.push(thisAsObject);\r\n            \r\n        if(this.topLevel == true){\r\n            //If this is the top level, return the generated object\r\n            return savedObject;\r\n        }\r\n        else{\r\n            //If not, return just a placeholder for this molecule\r\n            var object = {\r\n                atomType: this.atomType,\r\n                name: this.name,\r\n                x: this.x,\r\n                y: this.y,\r\n                uniqueID: this.uniqueID,\r\n                BOMlist: this.BOMlist\r\n            }\r\n            \r\n            return object;\r\n        }\r\n    }\r\n        \r\n    deserialize(moleculeList, moleculeID){\r\n        \r\n        //Find the target molecule in the list\r\n        var moleculeObject = moleculeList.filter((molecule) => { return molecule.uniqueID == moleculeID;})[0];\r\n        \r\n        //Grab the name and ID\r\n        this.uniqueID  = moleculeObject.uniqueID;\r\n        this.name      = moleculeObject.name;\r\n        this.topLevel  = moleculeObject.topLevel;\r\n        this.BOMlist   = moleculeObject.BOMlist;\r\n        \r\n        //Place the atoms\r\n        moleculeObject.allAtoms.forEach(atom => {\r\n            this.placeAtom(JSON.parse(atom), moleculeList, GlobalVariables.availableTypes);\r\n        });\r\n        \r\n        //reload the molecule object to prevent persistence issues\r\n        moleculeObject = moleculeList.filter((molecule) => { return molecule.uniqueID == moleculeID;})[0];\r\n        \r\n        //Place the connectors\r\n        this.savedConnectors = moleculeObject.allConnectors; //Save a copy of the connectors so we can use them later if we want\r\n        this.savedConnectors.forEach(connector => {\r\n            this.placeConnector(JSON.parse(connector));\r\n        });\r\n        \r\n        this.updateCodeBlock();\r\n    }\r\n    \r\n    placeAtom(newAtomObj, moleculeList, typesList){\r\n        //Place the atom - note that types not listed in availableTypes will not be placed with no warning (ie go up one level)\r\n        \r\n        for(var key in typesList) {\r\n            if (typesList[key].atomType == newAtomObj.atomType){\r\n                newAtomObj.parent = this;\r\n                var atom = new typesList[key].creator(newAtomObj);\r\n                \r\n                //reassign the name of the Inputs to preserve linking\r\n                if(atom.atomType == \"Input\" && typeof newAtomObj.name !== 'undefined'){\r\n                    atom.setValue(newAtomObj.name);\r\n                }\r\n\r\n                //If this is a molecule, deserialize it\r\n                if(atom.atomType == \"Molecule\" && moleculeList != null){\r\n                    atom.deserialize(moleculeList, atom.uniqueID);\r\n                }\r\n                \r\n                this.nodesOnTheScreen.push(atom);\r\n            }\r\n        }\r\n        \r\n        if(newAtomObj.atomType == \"Output\"){\r\n            //re-asign output ID numbers if a new one is supposed to be placed\r\n            this.nodesOnTheScreen.forEach(atom => {\r\n                if(atom.atomType == \"Output\"){\r\n                    atom.setID(newAtomObj.uniqueID);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    \r\n    placeConnector(connectorObj){\r\n        var connector;\r\n        var cp1NotFound = true;\r\n        var cp2NotFound = true;\r\n        var ap2;\r\n        \r\n        this.nodesOnTheScreen.forEach(atom => {\r\n            //Find the output node\r\n            \r\n            if (atom.uniqueID == connectorObj.ap1ID){\r\n                atom.children.forEach(child => {\r\n                    if(child.name == connectorObj.ap1Name && child.type == \"output\"){\r\n                        connector = new Connector({\r\n                            atomType: \"Connector\",\r\n                            attachmentPoint1: child,\r\n                            parentMolecule:  atom\r\n                        });\r\n                        cp1NotFound = false;\r\n                    }\r\n                });\r\n            }\r\n            //Find the input node\r\n            if (atom.uniqueID == connectorObj.ap2ID){\r\n                atom.children.forEach(child => {\r\n                    if(child.name == connectorObj.ap2Name && child.type == \"input\" && child.connectors.length == 0){\r\n                        cp2NotFound = false;\r\n                        ap2 = child;\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        \r\n        if(cp1NotFound || cp2NotFound){\r\n            console.log(\"Unable to create connector\");\r\n            return;\r\n        }\r\n        \r\n        connector.attachmentPoint2 = ap2;\r\n        \r\n        //Store the connector\r\n        connector.attachmentPoint1.connectors.push(connector);\r\n        connector.attachmentPoint2.connectors.push(connector);\r\n        \r\n        //Update the connection\r\n        connector.propogate();\r\n    }\r\n}\r\n\r\n","import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n\r\nexport default class Output extends Atom {\r\n    \r\n    constructor(values){\r\n        super (values)\r\n        \r\n        //Add a new output to the current molecule\r\n        if (typeof this.parent !== 'undefined') {\r\n            this.parent.addIO(\"output\", \"Geometry\", this.parent, \"geometry\", \"\");\r\n        }\r\n        \r\n        this.defaultCodeBlock = \"~number or geometry~\";\r\n        this.codeBlock = \"\";\r\n        this.type = \"output\";\r\n        this.name = \"Output\";\r\n        this.atomType = \"Output\";\r\n        this.height = 16;\r\n        this.radius = 15;\r\n        \r\n        this.setValues(values);\r\n        \r\n        this.addIO(\"input\", \"number or geometry\", this, \"geometry\", \"\");\r\n    }\r\n    \r\n    setID(newID){\r\n        this.uniqueID = newID;\r\n    }\r\n    \r\n    draw() {\r\n        \r\n        this.children.forEach(child => {\r\n            child.draw();       \r\n        });\r\n        \r\n        GlobalVariables.c.beginPath();\r\n        GlobalVariables.c.fillStyle = this.color;\r\n        GlobalVariables.c.rect(this.x - this.radius, this.y - this.height/2, 2*this.radius, this.height);\r\n        GlobalVariables.c.textAlign = \"end\"; \r\n        GlobalVariables.c.fillText(this.name, this.x + this.radius, this.y-this.radius);\r\n        GlobalVariables.c.fill();\r\n        GlobalVariables.c.closePath();\r\n        \r\n        GlobalVariables.c.beginPath();\r\n        GlobalVariables.c.moveTo(this.x + this.radius, this.y - this.height/2);\r\n        GlobalVariables.c.lineTo(this.x + this.radius + 10, this.y);\r\n        GlobalVariables.c.lineTo(this.x + this.radius, this.y + this.height/2);\r\n        GlobalVariables.c.fill();\r\n    }\r\n}","import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n\r\nexport default class Readme extends Atom{\r\n    constructor(values){\r\n        super(values);\r\n        \r\n        this.codeBlock = \"\";\r\n        this.atomType = \"Readme\";\r\n        this.readmeText = \"Readme text here\";\r\n        this.type = \"readme\";\r\n        this.name = \"README\";\r\n        this.radius = 20;\r\n        \r\n        this.setValues(values);\r\n    }\r\n    \r\n    updateSidebar(){\r\n        //updates the sidebar to display information about this node\r\n        \r\n        var valueList = super.updateSidebar(); //call the super function\r\n        \r\n        this.createEditableValueListItem(valueList,this,\"readmeText\", \"Notes\", false);\r\n        \r\n    }\r\n    \r\n    draw() {\r\n        \r\n        super.draw(); //Super call to draw the rest\r\n        \r\n        //draw the two slashes on the node//\r\n        GlobalVariables.c.strokeStyle = \"#949294\";\r\n        GlobalVariables.c.lineWidth = 3;\r\n        GlobalVariables.c.lineCap = \"round\";\r\n        \r\n        GlobalVariables.c.beginPath();\r\n        GlobalVariables.c.moveTo(this.x - 11, this.y + 10);\r\n        GlobalVariables.c.lineTo(this.x, this.y - 10);\r\n        GlobalVariables.c.stroke();\r\n        \r\n        GlobalVariables.c.beginPath();\r\n        GlobalVariables.c.moveTo(this.x, this.y + 10);\r\n        GlobalVariables.c.lineTo(this.x + 11, this.y - 10);\r\n        GlobalVariables.c.stroke();\r\n    }\r\n    \r\n    setValue(newText) {\r\n        this.readmeText = newText;\r\n    }\r\n    \r\n    requestReadme(){\r\n        //request any contributions from this atom to the readme\r\n        \r\n        return [this.readmeText];\r\n    }\r\n    \r\n    serialize(values){\r\n        //Save the readme text to the serial stream\r\n        var valuesObj = super.serialize(values);\r\n        \r\n        valuesObj.readmeText = this.readmeText;\r\n        \r\n        return valuesObj;\r\n        \r\n    }\r\n}\r\n","import Atom from '../prototypes/atom'\r\n\r\nexport default class Rectangle extends Atom {\r\n\r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO(\"input\", \"x length\", this, \"number\", 10);\r\n        this.addIO(\"input\", \"y length\", this, \"number\", 10);\r\n        this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\r\n        \r\n        this.name = \"Rectangle\";\r\n        this.atomType = \"Rectangle\";\r\n        this.defaultCodeBlock = \"square([~x length~,~y length~])\";\r\n        this.codeBlock = \"\";\r\n        \r\n        //generate the correct codeblock for this atom on creation\r\n        this.updateCodeBlock();\r\n        \r\n        this.setValues(values);\r\n    }\r\n}","import Atom from '../prototypes/atom'\r\n\r\nexport default class RegularPolygon extends Atom {\r\n\r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO(\"input\", \"number of sides\", this, \"number\", 6);\r\n        this.addIO(\"input\", \"radius\", this, \"number\", 10);\r\n        this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\r\n        \r\n        this.name = \"RegularPolygon\";\r\n        this.atomType = \"RegularPolygon\";\r\n\r\n        // create the polygon code block\r\n        this.updateCodeBlock();\r\n        \r\n        this.setValues(values);\r\n    }\r\n\r\n    updateCodeBlock() {\r\n        this.defaultCodeBlock = this.buildPolygonCodeBlock();\r\n        super.updateCodeBlock();\r\n    }\r\n\r\n    buildPolygonCodeBlock() {\r\n        let polygon = []\r\n        for(let i = 0; i < this.findIOValue(\"number of sides\"); i++) {\r\n            var angle = i * 2 * Math.PI / this.findIOValue(\"number of sides\") - Math.PI / 2;\r\n            polygon.push([\r\n                this.findIOValue(\"radius\") * Math.cos(angle),\r\n                this.findIOValue(\"radius\") * Math.sin(angle)\r\n            ])\r\n        }\r\n\r\n        return \"polygon(\" + JSON.stringify(polygon) + \")\";\r\n    }    \r\n}","import Atom from '../prototypes/atom'\r\n\r\nexport default class Rotate extends Atom {\r\n    \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        this.addIO(\"input\", \"geometry\", this, \"geometry\", \"\");\r\n        this.addIO(\"input\", \"x-axis degrees\", this, \"number\", 0);\r\n        this.addIO(\"input\", \"y-axis degrees\", this, \"number\", 0);\r\n        this.addIO(\"input\", \"z-axis degrees\", this, \"number\", 0);\r\n        this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\r\n        \r\n        this.name = \"Rotate\";\r\n        this.atomType = \"Rotate\";\r\n        this.defaultCodeBlock = \"rotate([~x-axis degrees~,~y-axis degrees~,~z-axis degrees~],~geometry~)\";\r\n        this.codeBlock = \"\";\r\n        \r\n        this.setValues(values);\r\n    }\r\n}","import Atom from '../prototypes/atom'\r\n\r\nexport default class Scale extends Atom{\r\n    \r\n    constructor(values){\r\n        \r\n        super(values);\r\n        \r\n        this.addIO(\"input\", \"geometry\", this, \"geometry\", \"\");\r\n        this.addIO(\"input\", \"multiple\", this, \"number\", 10);\r\n        this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\r\n        \r\n        this.name = \"Scale\";\r\n        this.atomType = \"Scale\";\r\n        this.defaultCodeBlock = \"~geometry~.scale(~multiple~)\";\r\n        this.codeBlock = \"\";\r\n        \r\n        this.setValues(values);\r\n    }\r\n}","import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\nexport default class ShrinkWrap extends Atom{\r\n    \r\n    constructor(values){\r\n        super(values);\r\n        \r\n        this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\r\n        \r\n        this.name = \"Shrink Wrap\";\r\n        this.atomType = \"ShrinkWrap\";\r\n        this.defaultCodeBlock = \"chain_hull({closed: false}, [ ])\";\r\n        this.codeBlock = \"\";\r\n        this.ioValues = [];\r\n        this.closedSelection = 0;\r\n        \r\n        this.setValues(values);\r\n        \r\n        if (typeof this.ioValues !== 'undefined'){\r\n            this.ioValues.forEach(ioValue => { //for each saved value\r\n                this.addIO(\"input\", ioValue.name, this, \"geometry\", \"\");\r\n            });\r\n        }\r\n        \r\n        this.updateCodeBlock();\r\n    }\r\n    \r\n    updateCodeBlock(){\r\n        \r\n        this.codeBlock = this.defaultCodeBlock;\r\n        \r\n        //Generate the code block string\r\n        var arrayOfChildrenString = \"[ \";\r\n        var numberOfElements = 0;\r\n        this.children.forEach(io => {\r\n            if(io.type == \"input\"){\r\n                if(numberOfElements > 0){\r\n                    arrayOfChildrenString = arrayOfChildrenString + \", \";\r\n                }\r\n                numberOfElements += 1;\r\n                arrayOfChildrenString = arrayOfChildrenString + io.getValue();\r\n            }\r\n        });\r\n        arrayOfChildrenString = arrayOfChildrenString + \"]\";\r\n        \r\n        //Insert the generated string into the code block\r\n        var regex = /\\[(.+)\\]/gi;\r\n        this.codeBlock = this.codeBlock.replace(regex, arrayOfChildrenString);\r\n        \r\n        //Add the text for open or closed\r\n        var endString;\r\n        if(this.closedSelection == 0){ //closed\r\n            endString = \"chain_hull({closed: true}\";\r\n        }\r\n        else{\r\n            endString = \"chain_hull({closed: false}\";\r\n        }\r\n        \r\n        var regex = /^.+?\\{(.+?)\\}/gi;\r\n        this.codeBlock = this.codeBlock.replace(regex, endString);\r\n        \r\n        //Shrink wrap it one more time if we have solid selected\r\n        if(this.closedSelection == 2){\r\n            this.codeBlock = \"chain_hull({closed: true}, [\" + this.codeBlock + \"])\"\r\n        }\r\n        \r\n        //Set the output nodes with name 'geometry' to be the generated code\r\n        this.children.forEach(child => {\r\n            if(child.valueType == 'geometry' && child.type == 'output'){\r\n                child.setValue(this.codeBlock);\r\n            }\r\n        });\r\n        \r\n        //If this molecule is selected, send the updated value to the renderer\r\n        if (this.selected){\r\n            this.sendToRender();\r\n        }\r\n        \r\n        //Delete or add ports as needed\r\n        \r\n        //Check to see if any of the loaded ports have been connected to. If they have, remove them from the this.ioValues list \r\n        this.children.forEach(child => {\r\n            this.ioValues.forEach(ioValue => {\r\n                if (child.name == ioValue.name && child.connectors.length > 0){\r\n                    this.ioValues.splice(this.ioValues.indexOf(ioValue),1); //Let's remove it from the ioValues list\r\n                }\r\n            });\r\n        });\r\n        \r\n        //Add or delete ports as needed\r\n        if(this.howManyInputPortsAvailable() == 0){ //We need to make a new port available\r\n            this.addIO(\"input\", \"2D shape \" + GlobalVariables.generateUniqueID(), this, \"geometry\", \"\");\r\n        }\r\n        if(this.howManyInputPortsAvailable() >= 2 && this.ioValues.length <= 1){  //We need to remove the empty port\r\n            this.deleteEmptyPort();\r\n            this.updateCodeBlock();\r\n        }\r\n    }\r\n    \r\n    howManyInputPortsAvailable(){\r\n        var portsAvailable = 0;\r\n        this.children.forEach(io => {\r\n            if(io.type == \"input\" && io.connectors.length == 0){   //if this port is available\r\n                portsAvailable = portsAvailable + 1;  //Add one to the count\r\n            }\r\n        });\r\n        return portsAvailable\r\n    }\r\n    \r\n    deleteEmptyPort(){\r\n        this.children.forEach(io => {\r\n            if(io.type == \"input\" && io.connectors.length == 0 && this.howManyInputPortsAvailable() >= 2){\r\n                this.removeIO(\"input\", io.name, this);\r\n            }\r\n        });\r\n    }\r\n    \r\n    serialize(savedObject){\r\n        var thisAsObject = super.serialize(savedObject);\r\n        \r\n        var ioValues = [];\r\n        this.children.forEach(io => {\r\n            if (io.type == \"input\"){\r\n                var saveIO = {\r\n                    name: io.name,\r\n                    ioValue: 10\r\n                };\r\n                ioValues.push(saveIO);\r\n            }\r\n        });\r\n        \r\n        ioValues.forEach(ioValue => {\r\n            thisAsObject.ioValues.push(ioValue);\r\n        });\r\n        \r\n        //Write the selection for if the chain is closed\r\n        thisAsObject.closedSelection = this.closedSelection;\r\n        \r\n        return thisAsObject;\r\n        \r\n    }\r\n    \r\n    updateSidebar(){\r\n        //Update the side bar to make it possible to change the molecule name\r\n        \r\n        var valueList = super.updateSidebar();\r\n        \r\n        this.createDropDown(valueList, this, [\"Closed\", \"Open\", \"Solid\"], this.closedSelection, \"End:\");\r\n        \r\n    } \r\n    \r\n    changeEquation(newValue){\r\n        this.closedSelection = parseInt(newValue);\r\n        this.updateCodeBlock();\r\n    }\r\n}","import Atom from '../prototypes/atom'\r\n\r\nexport default class Translate extends Atom{\r\n    \r\n    constructor(values){\r\n        super(values);\r\n        \r\n        this.addIO(\"input\", \"geometry\", this, \"geometry\", \"\");\r\n        this.addIO(\"input\", \"xDist\", this, \"number\", 0);\r\n        this.addIO(\"input\", \"yDist\", this, \"number\", 0);\r\n        this.addIO(\"input\", \"zDist\", this, \"number\", 0);\r\n        this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\r\n        \r\n        this.name = \"Translate\";\r\n        this.atomType = \"Translate\";\r\n        this.defaultCodeBlock = \"~geometry~.translate([~xDist~, ~yDist~, ~zDist~])\";\r\n        this.codeBlock = \"\";\r\n        \r\n        this.setValues(values);\r\n    }\r\n}","import Atom from '../prototypes/atom'\r\n\r\nexport default class Union extends Atom {\r\n    \r\n    constructor(values){\r\n        \r\n        super(values);\r\n        \r\n        this.addIO(\"input\", \"geometry1\", this, \"geometry\", \"\");\r\n        this.addIO(\"input\", \"geometry2\", this, \"geometry\", \"\");\r\n        this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\r\n        \r\n        this.name = \"Union\";\r\n        this.atomType = \"Union\";\r\n        this.defaultCodeBlock = \"union(~geometry1~,~geometry2~)\";\r\n        this.codeBlock = \"\";\r\n        \r\n        this.setValues(values);\r\n    }\r\n}","import AttachmentPoint from './attachmentpoint'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\nexport default class Atom {\r\n\r\n    constructor(values){\r\n        //Setup default values\r\n        this.children = [];\r\n        \r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.radius = 20;\r\n        this.defaultColor = '#F3EFEF';\r\n        this.selectedColor = \"#484848\";\r\n        this.selected = false;\r\n        this.color = '#F3EFEF';\r\n        this.name = \"name\";\r\n        this.parentMolecule = null;\r\n        this.codeBlock = \"\";\r\n        this.defaultCodeBlock = \"\";\r\n        this.isMoving = false;\r\n        this.BOMlist = [];\r\n        \r\n        for(var key in values) {\r\n            this[key] = values[key];\r\n        }\r\n        \r\n    }\r\n    \r\n    setValues(values){\r\n        //Assign the object to have the passed in values\r\n        \r\n        for(var key in values) {\r\n            this[key] = values[key];\r\n        }\r\n        \r\n        if (typeof this.ioValues !== 'undefined') {\r\n            this.ioValues.forEach(ioValue => { //for each saved value\r\n                this.children.forEach(io => {  //Find the matching IO and set it to be the saved value\r\n                    if(ioValue.name == io.name && io.type == \"input\"){\r\n                        io.setValue(ioValue.ioValue);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n    \r\n    draw() {\r\n        \r\n        this.inputX = this.x - this.radius\r\n        this.outputX = this.x + this.radius\r\n        \r\n        this.children.forEach(child => {\r\n            child.draw();       \r\n        });\r\n        \r\n        GlobalVariables.c.beginPath();\r\n        GlobalVariables.c.fillStyle = this.color;\r\n        //make it imposible to draw atoms too close to the edge\r\n        //not sure what x left margin should be because if it's too close it would cover expanded text\r\n        var canvasFlow = document.querySelector('#flow-canvas');\r\n        if (this.x<this.radius*3){\r\n                this.x+= this.radius*3;    \r\n                GlobalVariables.c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\r\n        }\r\n        else if (this.y<this.radius*2){\r\n                this.y += this.radius; \r\n                GlobalVariables.c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\r\n        }\r\n        else if (this.x + this.radius*2 > canvasFlow.width){\r\n                this.x -= this.radius*2; \r\n                GlobalVariables.c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\r\n        }\r\n        else if (this.y + this.radius*2 > canvasFlow.height){\r\n                this.y -= this.radius; \r\n                GlobalVariables.c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\r\n        }\r\n        else{\r\n        GlobalVariables.c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\r\n        }\r\n        GlobalVariables.c.textAlign = \"start\"; \r\n        GlobalVariables.c.fillText(this.name, this.x + this.radius, this.y-this.radius);\r\n        GlobalVariables.c.fill();\r\n        GlobalVariables.c.closePath();\r\n    }\r\n    \r\n    addIO(type, name, target, valueType, defaultValue){\r\n        \r\n        //compute the baseline offset from parent node\r\n        var offset;\r\n        if (type == \"input\"){\r\n            offset = -1* target.radius;\r\n        }\r\n        else{\r\n            offset = target.radius;\r\n        }\r\n        var input = new AttachmentPoint({\r\n            parentMolecule: target, \r\n            defaultOffsetX: offset, \r\n            defaultOffsetY: 0,\r\n            type: type,\r\n            valueType: valueType,\r\n            name: name,\r\n            value: defaultValue,\r\n            uniqueID: GlobalVariables.generateUniqueID(),\r\n            atomType: \"AttachmentPoint\"\r\n        });\r\n        target.children.push(input);\r\n    }\r\n    \r\n    removeIO(type, name, target){\r\n        //Remove the target IO attachment point\r\n        \r\n        this.children.forEach(io => {\r\n            if(io.name == name && io.type == type){\r\n                io.deleteSelf();\r\n                this.children.splice(this.children.indexOf(io),1);\r\n            }\r\n        });\r\n    }\r\n    \r\n    clickDown(x,y){\r\n        //Returns true if something was done with the click\r\n        \r\n        \r\n        var clickProcessed = false;\r\n        \r\n        this.children.forEach(child => {\r\n            if(child.clickDown(x,y) == true){\r\n                clickProcessed = true;\r\n            }\r\n        });\r\n        \r\n        //If none of the children processed the click\r\n        if(!clickProcessed){\r\n        \r\n            var distFromClick = GlobalVariables.distBetweenPoints(x, this.x, y, this.y);\r\n            \r\n            if (distFromClick < this.radius){\r\n                this.color = this.selectedColor;\r\n                this.isMoving = true;\r\n                this.selected = true;\r\n                this.updateSidebar();\r\n                \r\n                this.sendToRender();\r\n                \r\n                clickProcessed = true;\r\n            }\r\n            else{\r\n                this.color = this.defaultColor;\r\n                this.selected = false;\r\n            }\r\n            \r\n        }\r\n        \r\n        return clickProcessed; \r\n    }\r\n\r\n    doubleClick(x,y){\r\n        //returns true if something was done with the click\r\n        \r\n        \r\n        var clickProcessed = false;\r\n        \r\n        var distFromClick = GlobalVariables.distBetweenPoints(x, this.x, y, this.y);\r\n        \r\n        if (distFromClick < this.radius){\r\n            clickProcessed = true;\r\n        }\r\n        \r\n        return clickProcessed; \r\n    }\r\n\r\n    clickUp(x,y){\r\n        this.isMoving = false;\r\n        \r\n        this.children.forEach(child => {\r\n            child.clickUp(x,y);     \r\n        });\r\n    }\r\n\r\n    clickMove(x,y){\r\n        if (this.isMoving == true){\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n        \r\n        this.children.forEach(child => {\r\n            child.clickMove(x,y);       \r\n        });\r\n    }\r\n    \r\n    keyPress(key){\r\n        //runs whenver a key is pressed\r\n        if (key == 'Delete'){\r\n            if(this.selected == true){\r\n                this.deleteNode();\r\n            }\r\n        }\r\n        \r\n        this.children.forEach(child => {\r\n            child.keyPress(key);\r\n        });\r\n    }\r\n    \r\n    updateSidebar(){\r\n        //updates the sidebar to display information about this node\r\n        \r\n        //remove everything in the sideBar now\r\n        while (GlobalVariables.sideBar.firstChild) {\r\n            GlobalVariables.sideBar.removeChild(GlobalVariables.sideBar.firstChild);\r\n        }\r\n        \r\n        //add the name as a title\r\n        var name = document.createElement('h1');\r\n        name.textContent = this.name;\r\n        name.setAttribute(\"style\",\"text-align:center;\");\r\n        GlobalVariables.sideBar.appendChild(name);\r\n        \r\n        //Create a list element\r\n        var valueList = document.createElement(\"ul\");\r\n        GlobalVariables.sideBar.appendChild(valueList);\r\n        valueList.setAttribute(\"class\", \"sidebar-list\");\r\n        \r\n        //Add options to set all of the inputs\r\n        this.children.forEach(child => {\r\n            if(child.type == 'input' && child.valueType != 'geometry'){\r\n                this.createEditableValueListItem(valueList,child,\"value\", child.name, true);\r\n            }\r\n        });\r\n        \r\n        return valueList;\r\n    }\r\n    \r\n    deleteNode(){\r\n        //deletes this node and all of it's children\r\n        \r\n        this.children.forEach(child => {\r\n            child.deleteSelf();       \r\n        });\r\n        \r\n        this.parent.nodesOnTheScreen.splice(this.parent.nodesOnTheScreen.indexOf(this),1); //remove this node from the list\r\n    }\r\n    \r\n    update() {\r\n        \r\n        this.children.forEach(child => {\r\n            child.update();     \r\n        });\r\n        \r\n        this.draw()\r\n    }\r\n    \r\n    serialize(savedObject){\r\n        //savedObject is only used by Molecule type atoms\r\n        \r\n        var ioValues = [];\r\n        this.children.forEach(io => {\r\n            if (io.valueType == \"number\" && io.type == \"input\"){\r\n                var saveIO = {\r\n                    name: io.name,\r\n                    ioValue: io.getValue()\r\n                };\r\n                ioValues.push(saveIO);\r\n            }\r\n        });\r\n        \r\n        var object = {\r\n            atomType: this.atomType,\r\n            name: this.name,\r\n            x: this.x,\r\n            y: this.y,\r\n            uniqueID: this.uniqueID,\r\n            ioValues: ioValues\r\n        }\r\n        \r\n        return object;\r\n    }\r\n    \r\n    requestBOM(){\r\n        //Request any contributions from this atom to the BOM\r\n        \r\n        \r\n        //Find the number of things attached to this output\r\n        var numberOfThisInstance = 1;\r\n        this.children.forEach(io => {\r\n            if(io.type == \"output\" && io.connectors.length != 0){\r\n                numberOfThisInstance = io.connectors.length;\r\n            }\r\n        });\r\n        //And scale up the total needed by that number\r\n        this.BOMlist.forEach(bomItem => {\r\n            bomItem.totalNeeded = numberOfThisInstance*bomItem.numberNeeded;\r\n        });\r\n        \r\n        return this.BOMlist;\r\n    }\r\n    \r\n    requestReadme(){\r\n        //request any contributions from this atom to the readme\r\n        \r\n        return [];\r\n    }\r\n    \r\n    updateCodeBlock(){\r\n        //Substitute the result from each input for the ~...~ section with it's name\r\n        \r\n        var regex = /~(.*?)~/gi;\r\n        this.codeBlock = this.defaultCodeBlock.replace(regex, x => {\r\n            return this.findIOValue(x);\r\n        });\r\n        \r\n        //Set the output nodes with name 'geometry' to be the generated code\r\n        this.children.forEach(child => {\r\n            if(child.valueType == 'geometry' && child.type == 'output'){\r\n                child.setValue(this.codeBlock);\r\n            }\r\n        });\r\n        \r\n        //If this molecule is selected, send the updated value to the renderer\r\n        if (this.selected){\r\n            this.sendToRender();\r\n        }\r\n    }\r\n    \r\n    sendToRender(){\r\n        //Send code to JSCAD to render\r\n        if (this.codeBlock != \"\"){\r\n            var toRender = \"function main () {return \" + this.codeBlock + \"}\"\r\n            \r\n            window.loadDesign(toRender,\"MaslowCreate\");\r\n        }\r\n        //Send something invisible just to wipe the rendering\r\n        else{\r\n            var toRender = \"function main () {return sphere({r: .0001, center: true})}\"\r\n            window.loadDesign(toRender,\"MaslowCreate\");\r\n        }\r\n    }\r\n    \r\n    findIOValue(ioName){\r\n        //find the value of an input for a given name\r\n        \r\n        ioName = ioName.split('~').join('');\r\n        var ioValue = null;\r\n        \r\n        this.children.forEach(child => {\r\n            if(child.name == ioName && child.type == \"input\"){\r\n                ioValue = child.getValue();\r\n            }\r\n        });\r\n        \r\n        return ioValue;\r\n    }\r\n    \r\n    createEditableValueListItem(list,object,key, label, resultShouldBeNumber){\r\n        var listElement = document.createElement(\"LI\");\r\n        list.appendChild(listElement);\r\n        \r\n        \r\n        //Div which contains the entire element\r\n        var div = document.createElement(\"div\");\r\n        listElement.appendChild(div);\r\n        div.setAttribute(\"class\", \"sidebar-item\");\r\n        \r\n        //Left div which displays the label\r\n        var labelDiv = document.createElement(\"div\");\r\n        div.appendChild(labelDiv);\r\n        var labelText = document.createTextNode(label + \":\");\r\n        labelDiv.appendChild(labelText);\r\n        labelDiv.setAttribute(\"class\", \"sidebar-subitem\");\r\n        \r\n        \r\n        //Right div which is editable and displays the value\r\n        var valueTextDiv = document.createElement(\"div\");\r\n        div.appendChild(valueTextDiv);\r\n        var valueText = document.createTextNode(object[key]);\r\n        valueTextDiv.appendChild(valueText);\r\n        valueTextDiv.setAttribute(\"contenteditable\", \"true\");\r\n        valueTextDiv.setAttribute(\"class\", \"sidebar-subitem\");\r\n        var thisID = label+GlobalVariables.generateUniqueID();\r\n        valueTextDiv.setAttribute(\"id\", thisID);\r\n        \r\n        \r\n        document.getElementById(thisID).addEventListener('focusout', event => {\r\n            var valueInBox = document.getElementById(thisID).textContent;\r\n            if(resultShouldBeNumber){\r\n                valueInBox = parseFloat(valueInBox);\r\n            }\r\n            \r\n            //If the target is an attachmentPoint then call the setter function\r\n            if(object instanceof AttachmentPoint){\r\n                object.setValue(valueInBox);\r\n            }\r\n            else{\r\n                object[key] = valueInBox;\r\n            }\r\n        });\r\n        \r\n        //prevent the return key from being used when editing a value\r\n        document.getElementById(thisID).addEventListener('keypress', function(evt) {\r\n            if (evt.which === 13) {\r\n                evt.preventDefault();\r\n                document.getElementById(thisID).blur();  //shift focus away if someone presses enter\r\n            }\r\n        });\r\n\r\n    }\r\n    \r\n    createNonEditableValueListItem(list,object,key, label, resultShouldBeNumber){\r\n        var listElement = document.createElement(\"LI\");\r\n        list.appendChild(listElement);\r\n        \r\n        \r\n        //Div which contains the entire element\r\n        var div = document.createElement(\"div\");\r\n        listElement.appendChild(div);\r\n        div.setAttribute(\"class\", \"sidebar-item\");\r\n        \r\n        //Left div which displays the label\r\n        var labelDiv = document.createElement(\"div\");\r\n        div.appendChild(labelDiv);\r\n        var labelText = document.createTextNode(label + \":\");\r\n        labelDiv.appendChild(labelText);\r\n        labelDiv.setAttribute(\"class\", \"sidebar-subitem\");\r\n        \r\n        \r\n        //Right div which is editable and displays the value\r\n        var valueTextDiv = document.createElement(\"div\");\r\n        div.appendChild(valueTextDiv);\r\n        var valueText = document.createTextNode(object[key]);\r\n        valueTextDiv.appendChild(valueText);\r\n        valueTextDiv.setAttribute(\"contenteditable\", \"false\");\r\n        valueTextDiv.setAttribute(\"class\", \"sidebar-subitem\");\r\n        var thisID = label+GlobalVariables.generateUniqueID();\r\n        valueTextDiv.setAttribute(\"id\", thisID);\r\n        \r\n\r\n    }\r\n\r\n    createDropDown(list,parent,options,selectedOption, description){\r\n        var listElement = document.createElement(\"LI\");\r\n        list.appendChild(listElement);\r\n        \r\n        \r\n        //Div which contains the entire element\r\n        var div = document.createElement(\"div\");\r\n        listElement.appendChild(div);\r\n        div.setAttribute(\"class\", \"sidebar-item\");\r\n        \r\n        //Left div which displays the label\r\n        var labelDiv = document.createElement(\"div\");\r\n        div.appendChild(labelDiv);\r\n        var labelText = document.createTextNode(description);\r\n        labelDiv.appendChild(labelText);\r\n        labelDiv.setAttribute(\"class\", \"sidebar-subitem\");\r\n        \r\n        \r\n        //Right div which is editable and displays the value\r\n        var valueTextDiv = document.createElement(\"div\");\r\n        div.appendChild(valueTextDiv);\r\n        var dropDown = document.createElement(\"select\");\r\n        options.forEach(option => {\r\n            var op = new Option();\r\n            op.value = options.findIndex(thisOption => thisOption === option);\r\n            op.text = option;\r\n            dropDown.options.add(op);\r\n        });\r\n        valueTextDiv.appendChild(dropDown);\r\n        valueTextDiv.setAttribute(\"class\", \"sidebar-subitem\");\r\n        \r\n        dropDown.selectedIndex = selectedOption; //display the current selection\r\n        \r\n        dropDown.addEventListener(\r\n            'change',\r\n            function() { parent.changeEquation(dropDown.value); },\r\n            false\r\n        );\r\n    }\r\n\r\n    createButton(list,parent,buttonText,functionToCall){\r\n        var listElement = document.createElement(\"LI\");\r\n        list.appendChild(listElement);\r\n        \r\n        \r\n        //Div which contains the entire element\r\n        var div = document.createElement(\"div\");\r\n        listElement.appendChild(div);\r\n        div.setAttribute(\"class\", \"sidebar-item\");\r\n        \r\n        //Left div which displays the label\r\n        var labelDiv = document.createElement(\"div\");\r\n        div.appendChild(labelDiv);\r\n        var labelText = document.createTextNode(\"\");\r\n        labelDiv.appendChild(labelText);\r\n        labelDiv.setAttribute(\"class\", \"sidebar-subitem\");\r\n        \r\n        \r\n        //Right div which is button\r\n        var valueTextDiv = document.createElement(\"div\");\r\n        div.appendChild(valueTextDiv);\r\n        var button = document.createElement(\"button\");\r\n        var buttonTextNode = document.createTextNode(buttonText);\r\n        button.setAttribute(\"class\", \"sidebar_button\");\r\n        button.appendChild(buttonTextNode);\r\n        valueTextDiv.appendChild(button);\r\n        valueTextDiv.setAttribute(\"class\", \"sidebar-subitem\");\r\n        \r\n        button.addEventListener(\r\n            'mousedown',\r\n            function() { functionToCall(parent); } ,\r\n            false\r\n        );\r\n    }\r\n\r\n    createBOM(list,parent,BOMlist){\r\n        //aBOMEntry = new bomEntry;\r\n        \r\n        \r\n        list.appendChild(document.createElement('br'));\r\n        list.appendChild(document.createElement('br'));\r\n        \r\n        var div = document.createElement(\"h3\");\r\n        div.setAttribute(\"style\",\"text-align:center;\");\r\n        list.appendChild(div);\r\n        var valueText = document.createTextNode(\"Bill Of Materials\");\r\n        div.appendChild(valueText);\r\n        \r\n        var x = document.createElement(\"HR\");\r\n        list.appendChild(x);\r\n        \r\n        this.requestBOM().forEach(bomItem => {\r\n            if(this.BOMlist.indexOf(bomItem) != -1){ //If the bom item is from this molecule\r\n                this.createEditableValueListItem(list,bomItem,\"BOMitemName\", \"Item\", false)\r\n                this.createEditableValueListItem(list,bomItem,\"numberNeeded\", \"Number\", true)\r\n                this.createEditableValueListItem(list,bomItem,\"costUSD\", \"Price\", true)\r\n                this.createEditableValueListItem(list,bomItem,\"source\", \"Source\", false)\r\n            }\r\n            else{\r\n                this.createNonEditableValueListItem(list,bomItem,\"BOMitemName\", \"Item\", false)\r\n                this.createNonEditableValueListItem(list,bomItem,\"totalNeeded\", \"Number\", true)\r\n                this.createNonEditableValueListItem(list,bomItem,\"costUSD\", \"Price\", true)\r\n                this.createNonEditableValueListItem(list,bomItem,\"source\", \"Source\", false)\r\n            }\r\n            var x = document.createElement(\"HR\");\r\n            list.appendChild(x);\r\n        });\r\n        \r\n        this.createButton(list,parent,\"Add BOM Entry\", this.addBOMEntry);\r\n    }\r\n    \r\n    addBOMEntry(self){\r\n        console.log(\"add a bom entry\");\r\n        \r\n        self.BOMlist.push(new BOMEntry());\r\n        \r\n        self.updateSidebar();\r\n    }\r\n}\r\n","import Connector from './connector'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\nexport default class AttachmentPoint {\r\n    constructor(values){\r\n \r\n        this.defaultRadius = 8;\r\n        this.expandedRadius = 14;\r\n        this.radius = 8;\r\n        \r\n        this.hoverDetectRadius = 8;\r\n        this.hoverOffsetX = 0;\r\n        this.hoverOffsetY = 0;\r\n        this.uniqueID = 0;\r\n        this.defaultOffsetX = 0;\r\n        this.defaultOffsetY = 0;\r\n        this.offsetX = 0;\r\n        this.offsetY = 0;\r\n        this.showHoverText = false;\r\n        this.atomType = \"AttachmentPoint\";\r\n        \r\n        this.valueType = \"number\"; //options are number, geometry, array\r\n        this.type = \"output\";\r\n        this.value = 10; //The default input value when nothing is connected\r\n        \r\n        this.connectors = [];\r\n        \r\n        this.offsetX = this.defaultOffsetX;\r\n        this.offsetY = this.defaultOffsetY;\r\n        \r\n        for(var key in values) {\r\n            this[key] = values[key];\r\n        }\r\n        \r\n        this.clickMove(0,0); //trigger a refresh to get all the current values\r\n    }\r\n    \r\n    draw() {\r\n\r\n        var txt = this.name;\r\n        var textWidth = GlobalVariables.c.measureText(txt).width;\r\n        var bubbleColor = \"#008080\";\r\n        var scaleRadiusDown = this.radius*.7;\r\n        var halfRadius = this.radius*.5;\r\n        \r\n        if (this.showHoverText){\r\n            if(this.type == \"input\"){\r\n                GlobalVariables.c.beginPath();\r\n                GlobalVariables.c.fillStyle = bubbleColor;\r\n                    if (this.radius == this.expandedRadius) {\r\n                    GlobalVariables.c.rect(this.x - textWidth - this.radius - halfRadius, this.y - scaleRadiusDown, textWidth + this.radius + halfRadius , scaleRadiusDown*2);\r\n                    GlobalVariables.c.arc(this.x - textWidth - this.radius - halfRadius, this.y, scaleRadiusDown, 0, Math.PI * 2, false);\r\n                }\r\n                    else if(this.radius == this.defaultRadius){\r\n                    GlobalVariables.c.rect(this.x - textWidth - this.radius - halfRadius, this.y - this.radius, textWidth + this.radius + halfRadius , this.radius*2);   \r\n                    GlobalVariables.c.arc(this.x - textWidth - this.radius - halfRadius, this.y, this.radius, 0, Math.PI * 2, false);\r\n                }\r\n                GlobalVariables.c.fill();\r\n                GlobalVariables.c.beginPath();\r\n                GlobalVariables.c.fillStyle = this.parentMolecule.defaultColor;\r\n                GlobalVariables.c.textAlign = \"end\";\r\n                GlobalVariables.c.fillText(this.name, this.x - (this.radius + 3), this.y+2)\r\n                GlobalVariables.c.fill();\r\n                GlobalVariables.c.closePath();\r\n            }\r\n            else{\r\n                GlobalVariables.c.beginPath();\r\n                GlobalVariables.c.fillStyle = bubbleColor;\r\n                GlobalVariables.c.rect(this.x, this.y - scaleRadiusDown, textWidth + this.radius + halfRadius, scaleRadiusDown*2);\r\n                GlobalVariables.c.arc(this.x + textWidth + this.radius + halfRadius, this.y, scaleRadiusDown, 0, Math.PI * 2, false);\r\n                GlobalVariables.c.fill();\r\n                GlobalVariables.c.closePath();\r\n                GlobalVariables.c.beginPath();\r\n                GlobalVariables.c.fillStyle = this.parentMolecule.defaultColor;\r\n                GlobalVariables.c.textAlign = \"start\"; \r\n                GlobalVariables.c.fillText(this.name, (this.x + halfRadius) + (this.radius + 3), this.y+2)\r\n                GlobalVariables.c.fill();\r\n                GlobalVariables.c.closePath();\r\n            }\r\n        }\r\n        GlobalVariables.c.beginPath();\r\n        GlobalVariables.c.fillStyle = this.parentMolecule.color;\r\n        GlobalVariables.c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\r\n        GlobalVariables.c.fill();\r\n        GlobalVariables.c.closePath();  \r\n    }\r\n\r\n    clickDown(x,y){\r\n        if(GlobalVariables.distBetweenPoints (this.x, x, this.y, y) < this.defaultRadius){\r\n            \r\n            if(this.type == 'output'){                  //begin to extend a connector from this if it is an output\r\n                var connector = new Connector({\r\n                    parentMolecule: this.parentMolecule, \r\n                    attachmentPoint1: this,\r\n                    atomType: \"Connector\"\r\n                });\r\n                this.connectors.push(connector);\r\n            }\r\n            \r\n            if(this.type == 'input'){ //connectors can only be selected by clicking on an input\r\n                this.connectors.forEach(connector => {     //select any connectors attached to this node\r\n                    connector.selected = true;\r\n                });\r\n            }\r\n            \r\n            return true; //indicate that the click was handled by this object\r\n        }\r\n        else{\r\n            if(this.type == 'input'){ //connectors can only be selected by clicking on an input\r\n                this.connectors.forEach(connector => {      //unselect any connectors attached to this node\r\n                    connector.selected = false;\r\n                });\r\n            }\r\n            return false; //indicate that the click was not handled by this object\r\n        }\r\n    }\r\n\r\n    clickUp(x,y){\r\n        this.connectors.forEach(connector => {\r\n            connector.clickUp(x, y);       \r\n        });\r\n    }\r\n\r\n    clickMove(x,y){\r\n        \r\n        //expand if touched by mouse\r\n        var distFromCursor = GlobalVariables.distBetweenPoints (this.x, x, this.y, y);\r\n        \r\n        //If we are hovering over the attachment point, indicate that by making it big\r\n        if (distFromCursor < this.defaultRadius){\r\n            this.radius = this.expandedRadius;\r\n        }\r\n        else{\r\n            this.radius = this.defaultRadius;\r\n        }\r\n        //If we are close to the attachment point move it to it's hover location to make it accessible\r\n        //Change direction of hover drop down if too close to the top.\r\n        if (distFromCursor < this.hoverDetectRadius){\r\n\r\n            var numAttachmentPoints= this.parentMolecule.children.length;\r\n            var attachmentPointNumber = this.parentMolecule.children.indexOf(this);  \r\n       \r\n             // if input type then offset first element down to give space for radial menu \r\n            if (this.type == \"output\"){\r\n                this.offsetX = this.defaultOffsetX;\r\n                this.offsetY = this.defaultOffsetY;\r\n            }\r\n            else{\r\n                var anglePerIO = 2.0944/ numAttachmentPoints; //120 deg/num\r\n                // angle correction so that it centers menu adjusting to however many attachment points there are \r\n                var angleCorrection = anglePerIO * (numAttachmentPoints - 2 /* -1 correction + 1 for \"output\" IO */);\r\n\r\n                this.hoverOffsetY = Math.round( 1.5* this.parentMolecule.radius * (Math.sin(-angleCorrection + anglePerIO * 2 * attachmentPointNumber)));\r\n                this.hoverOffsetX = -Math.round(1.5* this.parentMolecule.radius * (Math.cos(-angleCorrection + anglePerIO * 2 * attachmentPointNumber)));\r\n                this.offsetX = this.hoverOffsetX; \r\n                this.offsetY = this.hoverOffsetY;  \r\n                 }\r\n            this.showHoverText = true;\r\n            this.hoverDetectRadius = this.defaultRadius + GlobalVariables.distBetweenPoints (this.defaultOffsetX, this.hoverOffsetX, this.defaultOffsetY, this.hoverOffsetY); \r\n\r\n            }\r\n        else{\r\n            this.offsetX = this.defaultOffsetX;\r\n            this.offsetY = this.defaultOffsetY;\r\n            this.showHoverText = false;\r\n            this.hoverDetectRadius = this.defaultRadius;\r\n        }\r\n        \r\n        this.connectors.forEach(connector => {\r\n            connector.clickMove(x, y);       \r\n        });\r\n    }\r\n    \r\n    keyPress(key){\r\n        this.connectors.forEach(connector => {\r\n            connector.keyPress(key);       \r\n        });\r\n    }\r\n    \r\n    deleteSelf(){\r\n        //remove any connectors which were attached to this attachment point\r\n        \r\n        this.connectors.forEach(connector => {\r\n            connector.deleteSelf();       \r\n        });\r\n        \r\n    }\r\n    \r\n    updateSidebar(){\r\n        this.parent.updateSidebar();\r\n    }\r\n    \r\n    wasConnectionMade(x,y, connector){\r\n        //this function returns itself if the coordinates passed in are within itself\r\n        if (GlobalVariables.distBetweenPoints(this.x, x, this.y, y) < this.radius && this.type == 'input'){  //If we have released the mouse here and this is an input...\r\n            \r\n            if(this.connectors.length > 0){ //Don't accept a second connection to an input\r\n                return false;\r\n            }\r\n            \r\n            this.connectors.push(connector);\r\n            \r\n            return this;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    getValue(){\r\n        return this.value;\r\n    }\r\n    \r\n    setValue(newValue){\r\n        this.value = newValue;\r\n        \r\n        //propigate the change to linked elements if this is an output\r\n        if (this.type == 'output'){\r\n            this.connectors.forEach(connector => {     //select any connectors attached to this node\r\n                connector.propogate();\r\n            });\r\n        }\r\n        //if this is an input\r\n        else{   //update the code block to reflect the new values\r\n            this.parentMolecule.updateCodeBlock();\r\n        }\r\n    }\r\n    \r\n    update() {\r\n        this.x = this.parentMolecule.x + this.offsetX;\r\n        this.y = this.parentMolecule.y + this.offsetY;\r\n        this.draw()\r\n       \r\n        this.connectors.forEach(connector => {\r\n            connector.update();       \r\n        });\r\n    }\r\n}","import GlobalVariables from '../globalvariables'\r\n\r\nexport default class Connector {\r\n    constructor(values){\r\n        \r\n        this.isMoving = true;\r\n        this.color = 'black';\r\n        this.atomType = \"Connector\";\r\n        this.selected = false;\r\n        this.attachmentPoint1 = null;\r\n        this.attachmentPoint2 = null;\r\n        \r\n        for(var key in values) {\r\n            this[key] = values[key];\r\n        }\r\n        \r\n        this.startX = this.parentMolecule.outputX;\r\n        this.startY = this.parentMolecule.y;\r\n    }\r\n    \r\n    draw(){\r\n        \r\n        GlobalVariables.c.beginPath();\r\n        GlobalVariables.c.fillStyle = this.color;\r\n        GlobalVariables.c.strokeStyle = this.color;\r\n        GlobalVariables.c.globalCompositeOperation = 'destination-over'; //draw under other elements;\r\n        if(this.selected){\r\n            GlobalVariables.c.lineWidth = 3;\r\n        }\r\n        else{\r\n            GlobalVariables.c.lineWidth = 1;\r\n        }\r\n        GlobalVariables.c.moveTo(this.startX, this.startY);\r\n        GlobalVariables.c.bezierCurveTo(this.startX + 100, this.startY, this.endX - 100, this.endY, this.endX, this.endY);\r\n        GlobalVariables.c.stroke();\r\n        GlobalVariables.c.globalCompositeOperation = 'source-over'; //switch back to drawing on top\r\n    }\r\n\r\n    clickUp(x,y){\r\n        \r\n        if(this.isMoving){  //we only want to attach the connector which is currently moving\r\n            GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {                      //For every molecule on the screen  \r\n                molecule.children.forEach(child => {                                    //For each of their attachment points\r\n                    var thisConnectionValid = child.wasConnectionMade(x,y, this);       //Check to see if we made a connection\r\n                    if(thisConnectionValid){\r\n                        this.attachmentPoint2 = thisConnectionValid;\r\n                        this.propogate();                                               //Send information from one point to the other\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        \r\n        \r\n        if (this.attachmentPoint2 == null){                                 //If we have not made a connection\r\n            this.deleteSelf();                                              //Delete this connector\r\n        }\r\n        \r\n        this.isMoving = false;                                                         //Move over \r\n    }\r\n\r\n    clickMove(x,y){\r\n        if (this.isMoving == true){\r\n            this.endX = x;\r\n            this.endY = y;\r\n        }\r\n    }\r\n    \r\n    keyPress(key){\r\n        if(this.selected){\r\n            if (key == 'Delete'){\r\n                this.deleteSelf();\r\n            }\r\n        }\r\n    }\r\n    \r\n    deleteSelf(){\r\n        //Free up the input to which this was attached\r\n        if(this.attachmentPoint2 != null){\r\n            this.attachmentPoint2.connectors = [];\r\n        }\r\n        \r\n        //Remove this connector from the output it is attached to\r\n        this.attachmentPoint1.connectors.splice(this.attachmentPoint1.connectors.indexOf(this),1); \r\n    }\r\n    \r\n    serialize(){\r\n        if ( this.attachmentPoint2 != null){\r\n            var object = {\r\n                ap1Name: this.attachmentPoint1.name,\r\n                ap2Name: this.attachmentPoint2.name,\r\n                ap1ID: this.attachmentPoint1.parentMolecule.uniqueID,\r\n                ap2ID: this.attachmentPoint2.parentMolecule.uniqueID\r\n            }\r\n            return JSON.stringify(object);\r\n        }\r\n    }\r\n    \r\n    propogate(){\r\n        //takes the input and passes it to the output\r\n        this.attachmentPoint2.setValue(this.attachmentPoint1.getValue());\r\n    }\r\n    \r\n    update() {\r\n        \r\n        this.startX = this.attachmentPoint1.x\r\n        this.startY = this.attachmentPoint1.y\r\n        if (this.attachmentPoint2){  //check to see if the attachment point is defined\r\n            this.endX = this.attachmentPoint2.x;\r\n            this.endY = this.attachmentPoint2.y;\r\n        }\r\n        this.draw()\r\n    }\r\n    \r\n    wasConnectionMade(x,y, connector){\r\n        return false;\r\n    }\r\n\r\n}"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AChFA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AClHA;AACA;;;AAAA;AACA;;;;;;;AACA;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAHA;AAOA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAJA;AASA;AACA;;;;;;AA9dA;;;;;;;;;;;;;;;;;;;;ACHA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AACA;AACA;;;;;;;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AACA;AAoBA;AACA;AADA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;AC1EA;AACA;;;;;;;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AANA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;AC/LA;AACA;;;;;;;;;;;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAiBA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAjCA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;;;AAAA;AACA;;;;;;;;;;;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAuBA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AAEA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAtEA;AACA;AADA;;;;;;;;;;;;;;;;;;ACHA;AACA;;;;;;;;;;;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAcA;AACA;;AAjBA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;;;;;;;;;;;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAgBA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AACA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAlFA;AACA;AADA;;;;;;;;;;;;;;;;;;ACFA;AACA;;;;;;;;;;;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAcA;AACA;;AAjBA;AACA;AADA;;;;;;;;;;;;;;;;;;;;ACFA;AACA;;;;;;;;;;;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAcA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AA7FA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;;;AAAA;AACA;;;;;;;;;;;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAkBA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;;AA5FA;AACA;AADA;;;;;;;;;;;;;;;;;;ACHA;AACA;;;;;;;;;;;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAcA;AACA;;AAjBA;AACA;AADA;;;;;;;;;;;;;;;;;;ACFA;AACA;;;;;;;;;;;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAgBA;AACA;;AAnBA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;;;;;;;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AAvBA;AAwBA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AAUA;AACA;AAEA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAXA;AACA;AAaA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAjWA;AACA;AADA;;;;;;;;;;;;;;;;;;;;ACJA;AACA;;;AAAA;AACA;;;;;;;;;;;AAEA;;;AAEA;AAAA;AACA;AAEA;AAHA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAmBA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AA9CA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;;;AAAA;AACA;;;;;;;;;;;AAEA;;;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAWA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AA7DA;AACA;AADA;;;;;;;;;;;;;;;;;;ACJA;AACA;;;;;;;;;;;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAgBA;AACA;;AAnBA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;;;;;;;;;;;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAcA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;;;;AAlCA;AACA;AADA;;;;;;;;;;;;;;;;;;ACFA;AACA;;;;;;;;;;;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAgBA;AACA;;AAnBA;AACA;AADA;;;;;;;;;;;;;;;;;;ACFA;AACA;;;;;;;;;;;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAcA;AACA;;AAjBA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;;;AAAA;AACA;;;;;;;;;;;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AApBA;AAqBA;AACA;;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AACA;AACA;;;;AAxJA;AACA;AADA;;;;;;;;;;;;;;;;;;ACHA;AACA;;;;;;;;;;;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAeA;AACA;;AAlBA;AACA;AADA;;;;;;;;;;;;;;;;;;ACFA;AACA;;;;;;;;;;;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAcA;AACA;;AAjBA;AACA;AADA;;;;;;;;;;;;;;;;;;;;ACFA;AACA;;;AAAA;AACA;;;;;;;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAGA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAGA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAziBA;;;;;;;;;;;;;;;;;;;;ACHA;AACA;;;AAAA;AACA;;;;;;;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AALA;AAMA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAvOA;;;;;;;;;;;;;;;;;;;;ACHA;AACA;;;;;;;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;;;;AAjHA;;;;A","sourceRoot":""}