[
  {
    "name": "Display#baseLog",
    "filePath": "src/js/display.js",
    "lines": [
      {
        "lineNumber": 547,
        "line": "    /**\r"
      },
      {
        "lineNumber": 548,
        "line": "     * This function is intended to calculate the base log of two numbers and round it to an integer\r"
      },
      {
        "lineNumber": 549,
        "line": "     * @param {number,number}\r"
      },
      {
        "lineNumber": 550,
        "line": "     */ \r"
      },
      {
        "lineNumber": 551,
        "line": "    baseLog(x,y){\r"
      }
    ],
    "codeParams": [
      "x",
      "y"
    ],
    "docParams": []
  },
  {
    "name": "Display#dist3D",
    "filePath": "src/js/display.js",
    "lines": [
      {
        "lineNumber": 556,
        "line": "    /**\r"
      },
      {
        "lineNumber": 557,
        "line": "     * This function is intended to calculate the 3d distance between object and camera\r"
      },
      {
        "lineNumber": 558,
        "line": "     * @param {number}\r"
      },
      {
        "lineNumber": 559,
        "line": "     */ \r"
      },
      {
        "lineNumber": 560,
        "line": "    dist3D(position){\r"
      }
    ],
    "codeParams": [
      "position"
    ],
    "docParams": []
  },
  {
    "name": "GlobalVariables#pixelsToWidth",
    "filePath": "src/js/globalvariables.js",
    "lines": [
      {
        "lineNumber": 182,
        "line": "    /** \r"
      },
      {
        "lineNumber": 183,
        "line": "    * A function to generate a 0-1 value from pixels for location on screen depending on screen width\r"
      },
      {
        "lineNumber": 184,
        "line": "    * @param {number} width 0-1 \r"
      },
      {
        "lineNumber": 185,
        "line": "    */\r"
      },
      {
        "lineNumber": 186,
        "line": "    pixelsToWidth(pixels){\r"
      }
    ],
    "codeParams": [
      "pixels"
    ],
    "docParams": [
      "width"
    ]
  },
  {
    "name": "GlobalVariables#heightToPixels",
    "filePath": "src/js/globalvariables.js",
    "lines": [
      {
        "lineNumber": 190,
        "line": "    /** \r"
      },
      {
        "lineNumber": 191,
        "line": "    * A function to generate a pixel value for 0-1 location on screen depending on screen height\r"
      },
      {
        "lineNumber": 192,
        "line": "    * @param {number} width 0-1 \r"
      },
      {
        "lineNumber": 193,
        "line": "    */\r"
      },
      {
        "lineNumber": 194,
        "line": "    heightToPixels(height){\r"
      }
    ],
    "codeParams": [
      "height"
    ],
    "docParams": [
      "width"
    ]
  },
  {
    "name": "GlobalVariables#pixelsToHeight",
    "filePath": "src/js/globalvariables.js",
    "lines": [
      {
        "lineNumber": 199,
        "line": "    /** \r"
      },
      {
        "lineNumber": 200,
        "line": "    * A function to generate a 0-1 value from pixels for location on screen depending on screen height\r"
      },
      {
        "lineNumber": 201,
        "line": "    * @param {number} width 0-1 \r"
      },
      {
        "lineNumber": 202,
        "line": "    */\r"
      },
      {
        "lineNumber": 203,
        "line": "    pixelsToHeight(pixels){\r"
      }
    ],
    "codeParams": [
      "pixels"
    ],
    "docParams": [
      "width"
    ]
  },
  {
    "name": "Molecule#placeAtom",
    "filePath": "src/js/molecules/molecule.js",
    "lines": [
      {
        "lineNumber": 481,
        "line": "    /**\r"
      },
      {
        "lineNumber": 482,
        "line": "     * Places a new atom inside the molecule\r"
      },
      {
        "lineNumber": 483,
        "line": "     * @param {object} newAtomObj - An object defining the new atom to be placed\r"
      },
      {
        "lineNumber": 484,
        "line": "     * @param {array} moleculeList - Only passed if we are placing an instance of Molecule.\r"
      },
      {
        "lineNumber": 485,
        "line": "     * @param {object} typesList - A dictionary of all of the available types with references to their constructors\r"
      },
      {
        "lineNumber": 486,
        "line": "     * @param {boolean} unlock - A flag to indicate if this atom should spawn in the unlocked state.\r"
      },
      {
        "lineNumber": 487,
        "line": "     */\r"
      },
      {
        "lineNumber": 488,
        "line": "    async placeAtom(newAtomObj, unlock){\r"
      }
    ],
    "codeParams": [
      "newAtomObj",
      "unlock"
    ],
    "docParams": [
      "newAtomObj",
      "moleculeList",
      "typesList",
      "unlock"
    ]
  },
  {
    "name": "placeNewNode",
    "filePath": "src/js/NewMenu.js",
    "lines": [
      {
        "lineNumber": 194,
        "line": "/**\r"
      },
      {
        "lineNumber": 195,
        "line": "     * Runs when a menu option is clicked to place a new atom from the local atoms list.\r"
      },
      {
        "lineNumber": 196,
        "line": "     * @param {object} ev - The event triggered by click event on a menu item.\r"
      },
      {
        "lineNumber": 197,
        "line": "     */ \r"
      },
      {
        "lineNumber": 198,
        "line": "function placeNewNode(e){\r"
      }
    ],
    "codeParams": [
      "e"
    ],
    "docParams": [
      "ev"
    ]
  },
  {
    "name": "Atom#addIO",
    "filePath": "src/js/prototypes/atom.js",
    "lines": [
      {
        "lineNumber": 214,
        "line": "    /**\r"
      },
      {
        "lineNumber": 215,
        "line": "     * Adds a new attachment point to this atom\r"
      },
      {
        "lineNumber": 216,
        "line": "     * @param {boolean} type - The type of the IO (input or output)\r"
      },
      {
        "lineNumber": 217,
        "line": "     * @param {string} name - The name of the new attachment point\r"
      },
      {
        "lineNumber": 218,
        "line": "     * @param {object} target - The attom to attach the new attachment point to. Should we force this to always be this one?\r"
      },
      {
        "lineNumber": 219,
        "line": "     * @param {string} valueType - Describes the type of value the input is expecting options are number, geometry, array\r"
      },
      {
        "lineNumber": 220,
        "line": "     * @param {object} defaultValue - The default value to be used when the value is not yet set\r"
      },
      {
        "lineNumber": 221,
        "line": "     */ \r"
      },
      {
        "lineNumber": 222,
        "line": "    addIO(type, name, target, valueType, defaultValue, ready = false, primary = false){\r"
      }
    ],
    "codeParams": [
      "type",
      "name",
      "target",
      "valueType",
      "defaultValue",
      "ready",
      "primary"
    ],
    "docParams": [
      "type",
      "name",
      "target",
      "valueType",
      "defaultValue"
    ]
  },
  {
    "name": "Atom#createMarkdownListItem",
    "filePath": "src/js/prototypes/atom.js",
    "lines": [
      {
        "lineNumber": 792,
        "line": "    /**\r"
      },
      {
        "lineNumber": 793,
        "line": "     * Creates a html representation of the passed text. Used in the sidebar.\r"
      },
      {
        "lineNumber": 794,
        "line": "     * @param {object} list - The HTML object to attach the new item to.\r"
      },
      {
        "lineNumber": 795,
        "line": "     * @param {string} texxt - The text used to generate the markdown html.\r"
      },
      {
        "lineNumber": 796,
        "line": "     */ \r"
      },
      {
        "lineNumber": 797,
        "line": "    createMarkdownListItem(list, text){\r"
      }
    ],
    "codeParams": [
      "list",
      "text"
    ],
    "docParams": [
      "list",
      "texxt"
    ]
  },
  {
    "name": "Atom#createDropDown",
    "filePath": "src/js/prototypes/atom.js",
    "lines": [
      {
        "lineNumber": 811,
        "line": "    /**\r"
      },
      {
        "lineNumber": 812,
        "line": "     * Creates dropdown with multiple options to select. Used in the sidebar.\r"
      },
      {
        "lineNumber": 813,
        "line": "     * @param {object} list - The HTML object to attach the new item to.\r"
      },
      {
        "lineNumber": 814,
        "line": "     * @param {object} parent - The parent which has the function to call on the change...this should really be done with a callback function.\r"
      },
      {
        "lineNumber": 815,
        "line": "     * @param {array} options - A list of options to display in the drop down.\r"
      },
      {
        "lineNumber": 816,
        "line": "     * @param {number} selectedOption - The zero referenced index of the selected option.\r"
      },
      {
        "lineNumber": 817,
        "line": "     * @param {string} description - A description of what the dropdown does.\r"
      },
      {
        "lineNumber": 818,
        "line": "     * @param {object} Callback function\r"
      },
      {
        "lineNumber": 819,
        "line": "     */ \r"
      },
      {
        "lineNumber": 820,
        "line": "    createDropDown(list,parent,options,selectedOption, description, callback){\r"
      }
    ],
    "codeParams": [
      "list",
      "parent",
      "options",
      "selectedOption",
      "description",
      "callback"
    ],
    "docParams": [
      "list",
      "parent",
      "options",
      "selectedOption",
      "description",
      "Callback"
    ]
  },
  {
    "name": "Atom#createCheckbox",
    "filePath": "src/js/prototypes/atom.js",
    "lines": [
      {
        "lineNumber": 896,
        "line": "    /**\r"
      },
      {
        "lineNumber": 897,
        "line": "     * Creates button. Used in the sidebar.\r"
      },
      {
        "lineNumber": 898,
        "line": "     * @param {object} list - The HTML object to attach the new item to.\r"
      },
      {
        "lineNumber": 899,
        "line": "     * @param {string} buttonText - The text on the button.\r"
      },
      {
        "lineNumber": 900,
        "line": "     * @param {boolean} - Flag to see if checkbox is checked\r"
      },
      {
        "lineNumber": 901,
        "line": "     * @param {object} functionToCall - The function to call when the button is pressed.\r"
      },
      {
        "lineNumber": 902,
        "line": "     */ \r"
      },
      {
        "lineNumber": 903,
        "line": "    createCheckbox(sideBar,text,isChecked,callback){\r"
      }
    ],
    "codeParams": [
      "sideBar",
      "text",
      "isChecked",
      "callback"
    ],
    "docParams": [
      "list",
      "buttonText",
      "-",
      "functionToCall"
    ]
  }
]