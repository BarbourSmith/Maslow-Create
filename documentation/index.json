[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/flowDraw.js",
    "content": "import Menu from './js/menu'\r\nimport GlobalVariables from './js/globalvariables'\r\nimport Molecule from './js/molecules/molecule.js'\r\nimport GitHubMolecule from './js/molecules/githubmolecule.js'\r\nimport Display from './js/display.js'\r\n\r\nGlobalVariables.display = new Display()\r\nGlobalVariables.canvas = document.querySelector('canvas')\r\nGlobalVariables.c = GlobalVariables.canvas.getContext('2d')\r\n\r\nGlobalVariables.canvas.width = innerWidth\r\nGlobalVariables.canvas.height = innerHeight/2\r\nlet originalWidth = GlobalVariables.canvas.width\r\n\r\nvar url = window.location.href\r\nGlobalVariables.runMode = url.includes('run') //Check if we are using the run mode based on url\r\n\r\nlet lowerHalfOfScreen = document.querySelector('.flex-parent')\r\nif(!GlobalVariables.runMode){\r\n    lowerHalfOfScreen.setAttribute('style','height:'+innerHeight/2+'px')\r\n}else{\r\n    lowerHalfOfScreen.setAttribute('style','height:'+innerHeight+'px')\r\n}\r\nlet upperHalfOfScreen = document.querySelector('#flow-canvas')\r\nupperHalfOfScreen.setAttribute('style','height:'+innerHeight/2+'px')\r\nlet viewer = document.querySelector('.jscad-container')\r\nviewer.setAttribute('style','width:'+innerWidth/2+'px')\r\n\r\n\r\n// Event Listeners\r\nlet flowCanvas = document.getElementById('flow-canvas')\r\n\r\nflowCanvas.addEventListener('mousemove', event => {\r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {\r\n\r\n        molecule.clickMove(event.clientX/GlobalVariables.scale1,event.clientY/GlobalVariables.scale1)    \r\n    })\r\n})\r\n\r\nflowCanvas.addEventListener('mousedown', event => {\r\n    //every time the mouse button goes down\r\n    \r\n    var clickHandledByMolecule = false\r\n    \r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {\r\n        \r\n        if (molecule.clickDown(event.clientX/GlobalVariables.scale1,event.clientY/GlobalVariables.scale1) == true){\r\n            clickHandledByMolecule = true\r\n        }\r\n\r\n    })\r\n    \r\n    if(!clickHandledByMolecule){\r\n        GlobalVariables.currentMolecule.backgroundClick()\r\n    }\r\n    else{\r\n        GlobalVariables.currentMolecule.deselect()\r\n    }\r\n    //hide the menu if it is visible\r\n    if (!document.querySelector('.menu').contains(event.target)) {\r\n        Menu.hidemenu()\r\n    }\r\n    \r\n})\r\n\r\nflowCanvas.addEventListener('dblclick', event => {\r\n    //every time the mouse button goes down\r\n    \r\n    var clickHandledByMolecule = false\r\n    \r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {\r\n        if (molecule.doubleClick(event.clientX/GlobalVariables.scale1,event.clientY/GlobalVariables.scale1) == true){\r\n            clickHandledByMolecule = true\r\n        }\r\n    })\r\n    \r\n    if (clickHandledByMolecule == false){\r\n        console.warn('double click menu open not working in flowDraw.js')\r\n        //showmenu(event);\r\n    }\r\n})\r\n\r\nflowCanvas.addEventListener('mouseup', event => {\r\n    //every time the mouse button goes up\r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {\r\n        molecule.clickUp(event.clientX/GlobalVariables.scale1,event.clientY/GlobalVariables.scale1)      \r\n    })\r\n})\r\n\r\nwindow.addEventListener('keydown', event => {\r\n    //every time the mouse button goes up\r\n    \r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {\r\n        molecule.keyPress(event.key)      \r\n    })\r\n})\r\n\r\n\r\n// Implementation\r\n\r\nfunction init() {\r\n    if(!GlobalVariables.runMode){ //If we are in CAD mode load an empty project as a placeholder\r\n        GlobalVariables.currentMolecule = new Molecule({\r\n            x: 0, \r\n            y: 0, \r\n            topLevel: true, \r\n            name: 'Maslow Create',\r\n            atomType: 'Molecule',\r\n            uniqueID: GlobalVariables.generateUniqueID()\r\n        })\r\n    }\r\n    else{\r\n        var ID = window.location.href.split('?')[1]\r\n        //Have the current molecule load it\r\n        if(typeof ID != undefined){\r\n            GlobalVariables.currentMolecule = new GitHubMolecule({\r\n                projectID: ID,\r\n                topLevel: true\r\n            })\r\n        }\r\n    }\r\n    \r\n    window.addEventListener('resize', () => { onWindowResize() }, false)\r\n\r\n    onWindowResize()\r\n    animate()\r\n}\r\n\r\nfunction onWindowResize() {\r\n    \r\n    var bounds = GlobalVariables.canvas.getBoundingClientRect()\r\n    GlobalVariables.canvas.width = bounds.width\r\n    GlobalVariables.canvas.height = bounds.height \r\n    //reset screen parameters \r\n    if(!GlobalVariables.runMode){\r\n        lowerHalfOfScreen.setAttribute('style','height:'+innerHeight/2+'px')\r\n    }else{\r\n        lowerHalfOfScreen.setAttribute('style','height:'+innerHeight+'px')\r\n    }\r\n    upperHalfOfScreen.setAttribute('style','height:'+innerHeight/2+'px')\r\n    viewer.setAttribute('style','width:'+innerWidth/2+'px')\r\n\r\n    GlobalVariables.scale1 =  GlobalVariables.canvas.width/originalWidth\r\n\r\n    GlobalVariables.display.onWindowResize()\r\n}\r\n\r\n\r\n\r\n// Animation Loop\r\nfunction animate() {\r\n    requestAnimationFrame(animate)\r\n    GlobalVariables.c.clearRect(0, 0, GlobalVariables.canvas.width, GlobalVariables.canvas.height)\r\n    GlobalVariables.c.scale(GlobalVariables.scale1,GlobalVariables.scale1)\r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {\r\n        molecule.update()\r\n\r\n    })\r\n    GlobalVariables.c.setTransform(1,0,0,1,0,0)\r\n\r\n    GlobalVariables.display.render()\r\n    GlobalVariables.display.controls.update()\r\n}\r\n\r\ninit()\r\n\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/flowDraw.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "originalWidth",
    "memberof": "src/flowDraw.js",
    "static": true,
    "longname": "src/flowDraw.js~originalWidth",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "url",
    "memberof": "src/flowDraw.js",
    "static": true,
    "longname": "src/flowDraw.js~url",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "lowerHalfOfScreen",
    "memberof": "src/flowDraw.js",
    "static": true,
    "longname": "src/flowDraw.js~lowerHalfOfScreen",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "upperHalfOfScreen",
    "memberof": "src/flowDraw.js",
    "static": true,
    "longname": "src/flowDraw.js~upperHalfOfScreen",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "viewer",
    "memberof": "src/flowDraw.js",
    "static": true,
    "longname": "src/flowDraw.js~viewer",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "flowCanvas",
    "memberof": "src/flowDraw.js",
    "static": true,
    "longname": "src/flowDraw.js~flowCanvas",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "init",
    "memberof": "src/flowDraw.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/flowDraw.js~init",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "onWindowResize",
    "memberof": "src/flowDraw.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/flowDraw.js~onWindowResize",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "animate",
    "memberof": "src/flowDraw.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/flowDraw.js~animate",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/js/alwaysOneFreeInput.js",
    "content": "import GlobalVariables from './globalvariables.js'\r\n\r\nconst howManyInputPortsAvailable = function(target){\r\n    var portsAvailable = 0\r\n    target.inputs.forEach(io => {\r\n        if(io.type == 'input' && io.connectors.length == 0){   //if this port is available\r\n            portsAvailable = portsAvailable + 1  //Add one to the count\r\n        }\r\n    })\r\n    return portsAvailable\r\n}\r\n\r\nconst deleteEmptyPort = function(target){\r\n    target.inputs.forEach(io => {\r\n        if(io.type == 'input' && io.connectors.length == 0 && howManyInputPortsAvailable(target) >= 2){\r\n            target.removeIO('input', io.name, target)\r\n        }\r\n    })\r\n}\r\n\r\nexport const addOrDeletePorts = (target) => {\r\n    //Because a molecule loads with no connectors attached to the ports and we don't want them to delete before\r\n    //They are conencted to we use teh ioValues list to keep track of them\r\n    target.inputs.forEach(child => {\r\n        target.ioValues.forEach(ioValue => {\r\n            if (child.name == ioValue.name && child.connectors.length > 0){\r\n                target.ioValues.splice(target.ioValues.indexOf(ioValue),1) //Let's remove it from the ioValues list\r\n            }\r\n        })\r\n    })\r\n    \r\n    //Add or delete ports as needed\r\n    if(howManyInputPortsAvailable(target) == 0){ //We need to make a new port available\r\n        target.addIO('input', '3D shape ' + GlobalVariables.generateUniqueID(), target, 'geometry', '')\r\n    }\r\n    if(howManyInputPortsAvailable(target) >= 2 && target.ioValues.length <= 1){  //We need to remove the empty port\r\n        deleteEmptyPort(target)\r\n        target.updateValue()\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/alwaysOneFreeInput.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "function",
    "name": "howManyInputPortsAvailable",
    "memberof": "src/js/alwaysOneFreeInput.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/alwaysOneFreeInput.js~howManyInputPortsAvailable",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/js/alwaysOneFreeInput.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "deleteEmptyPort",
    "memberof": "src/js/alwaysOneFreeInput.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/alwaysOneFreeInput.js~deleteEmptyPort",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/js/alwaysOneFreeInput.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "addOrDeletePorts",
    "memberof": "src/js/alwaysOneFreeInput.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/alwaysOneFreeInput.js~addOrDeletePorts",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/alwaysOneFreeInput.js",
    "importStyle": "{addOrDeletePorts}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "src/js/BOM.js",
    "content": "export class BOMEntry {\r\n    constructor(){\r\n        this.BOMitemName  = 'name'\r\n        this.numberNeeded = 0\r\n        this.costUSD      = 0\r\n        this.source       = 'www.example.com'\r\n        this.totalNeeded  = this.numberNeeded //Scaled by the number of this instance\r\n    }\r\n}\r\n\r\nexport const extractBomTags = (geometry) => {\r\n    var bomItems = []\r\n    const walk = (geometry) => {\r\n        if (geometry.assembly) {\r\n            geometry.assembly.forEach(walk)\r\n        }\r\n        else if (geometry.lazyGeometry) {\r\n            walk(geometry.lazyGeometry)\r\n        }\r\n        else if (geometry.geometry) {\r\n            walk(geometry.geometry)\r\n        }\r\n        else if (geometry.geometry) {\r\n            walk(geometry.geometry)\r\n        }\r\n        else if(geometry.tags){\r\n            geometry.tags.forEach(tag => {\r\n                if(tag.substring(0,6) == '{\"BOMi'){\r\n                    bomItems.push(JSON.parse(tag))\r\n                }\r\n            })\r\n        }\r\n    }\r\n    if(typeof geometry == 'object'){\r\n        walk(geometry)\r\n    }\r\n    return bomItems\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/BOM.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "class",
    "name": "BOMEntry",
    "memberof": "src/js/BOM.js",
    "static": true,
    "longname": "src/js/BOM.js~BOMEntry",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/BOM.js",
    "importStyle": "{BOMEntry}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 64,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/BOM.js~BOMEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "BOMitemName",
    "memberof": "src/js/BOM.js~BOMEntry",
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#BOMitemName",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "numberNeeded",
    "memberof": "src/js/BOM.js~BOMEntry",
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#numberNeeded",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "costUSD",
    "memberof": "src/js/BOM.js~BOMEntry",
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#costUSD",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "source",
    "memberof": "src/js/BOM.js~BOMEntry",
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#source",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "totalNeeded",
    "memberof": "src/js/BOM.js~BOMEntry",
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#totalNeeded",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "extractBomTags",
    "memberof": "src/js/BOM.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/BOM.js~extractBomTags",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/BOM.js",
    "importStyle": "{extractBomTags}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "geometry",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "src/js/display.js",
    "content": "import GlobalVariables from './globalvariables'\r\nimport * as THREE from 'three'\r\nimport { TrackballControls } from 'three/examples/jsm/controls/TrackballControls.js'\r\n\r\nexport default class Display {\r\n\r\n    constructor(){\r\n        GlobalVariables.api = require('@jsxcad/api-v1')\r\n        this.convert = require('@jsxcad/convert-threejs')\r\n        this.datasets = []\r\n        this.camera\r\n        this.controls\r\n        this.scene\r\n        this.renderer\r\n        this.stats\r\n        this.mesh\r\n        this.gui\r\n        this.targetDiv = document.getElementById('viewerContext')\r\n        \r\n        //Add the JSXCAD window\r\n        this.camera = new THREE.PerspectiveCamera(27, window.innerWidth / window.innerHeight, 1, 10500);\r\n        [this.camera.position.x, this.camera.position.y, this.camera.position.z] = [0, -30, 50]\r\n        //\r\n        this.controls = new TrackballControls(this.camera, this.targetDiv)\r\n        this.controls.rotateSpeed = 4.0\r\n        this.controls.zoomSpeed = 4.0\r\n        this.controls.panSpeed = 2.0\r\n        this.controls.noZoom = false\r\n        this.controls.noPan = false\r\n        this.controls.staticMoving = true\r\n        this.controls.dynamicDampingFactor = 0.1\r\n        this.controls.keys = [65, 83, 68]\r\n        this.controls.addEventListener('change', () => { this.render() })\r\n        //\r\n        this.scene = new THREE.Scene()\r\n        this.scene.background = new THREE.Color(0xB0AEB0)\r\n        this.scene.add(this.camera)\r\n        //\r\n        var ambientLight = new THREE.AmbientLight(0x222222)\r\n        this.scene.add(ambientLight)\r\n        // var light1 = new THREE.PointLight(0xffffff, 0, 1);\r\n        // camera.add(light1);\r\n        var light2 = new THREE.DirectionalLight(0xffffff, 1)\r\n        light2.position.set(1, 1, 1)\r\n        this.camera.add(light2)\r\n\r\n\r\n        // Sets initial plane and mesh\r\n        var planeGeometry = new THREE.PlaneBufferGeometry( 100, 100, 60, 60)\r\n        var planeMaterial = new THREE.MeshStandardMaterial( { color: 0xffffff} )\r\n        planeMaterial.wireframe = true\r\n        planeMaterial.transparent = true \r\n        planeMaterial.opacity = 0.2\r\n        this.plane = new THREE.Mesh( planeGeometry, planeMaterial )\r\n        this.plane.receiveShadow = true\r\n        this.scene.add( this.plane )\r\n\r\n        //\r\n        this.renderer = new THREE.WebGLRenderer({ antialias: true })\r\n        this.renderer.setPixelRatio(window.devicePixelRatio)\r\n        this.targetDiv.appendChild(this.renderer.domElement)\r\n        \r\n        this.onWindowResize()\r\n\r\n        this.targetDiv.addEventListener('mousedown', () => {\r\n            if(!GlobalVariables.runMode){\r\n                let sideBar = document.querySelector('.sideBar')\r\n                while (sideBar.firstChild) {\r\n                    sideBar.removeChild(sideBar.firstChild)\r\n                }\r\n                \r\n                //add the name as a title\r\n                var name = document.createElement('h1')\r\n                name.textContent = \"3D View\"\r\n                name.setAttribute('class','doc-title')\r\n                sideBar.appendChild(name)\r\n\r\n                var gridCheck = document.createElement('input')\r\n                sideBar.appendChild(gridCheck)\r\n                gridCheck.setAttribute('type', 'checkbox')\r\n                gridCheck.setAttribute('id', 'gridCheck')\r\n                gridCheck.setAttribute('checked', 'true')\r\n                var gridCheckLabel = document.createElement('label')\r\n                sideBar.appendChild(gridCheckLabel)\r\n                gridCheckLabel.setAttribute('for', 'gridCheck')\r\n                gridCheckLabel.textContent= \"Grid\"\r\n\r\n                gridCheck.addEventListener('change', event => {\r\n                    if(event.target.checked){\r\n                        this.scene.add( this.plane )\r\n                    }\r\n                    else{\r\n                        this.scene.remove(this.plane)\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n    \r\n    makeMaterial(material){\r\n        switch (material) {\r\n        case 'metal':\r\n            return new THREE.MeshStandardMaterial({\r\n                color: 0x779aac,\r\n                emissive: 0x7090a0,\r\n                roughness: 0.65,\r\n                metalness: 0.99,\r\n            })\r\n        default:\r\n            return new THREE.MeshNormalMaterial()\r\n        }\r\n    }\r\n    \r\n    writeToDisplay(shape){\r\n        if(shape != null){\r\n            const computeValue = async () => {\r\n                try {\r\n                    return await GlobalVariables.render({values: shape.toLazyGeometry().toGeometry(), key: \"render\"})\r\n                } catch(err) {\r\n                    return -1\r\n                }\r\n            }\r\n\r\n            computeValue().then(result => {\r\n                this.updateDisplayData(result)\r\n            })\r\n        }\r\n    }\r\n    \r\n    zoomCameraToFit(bounds){\r\n        this.controls.reset()\r\n        this.camera.position.x = 0\r\n        this.camera.position.y = -5*Math.max(...bounds[1])\r\n        this.camera.position.z = 5*Math.max(...bounds[1])\r\n    }\r\n    \r\n    updateDisplayData(threejsGeometry){\r\n        // Delete any previous dataset in the window.\r\n        for (const { mesh } of this.datasets) {\r\n            this.scene.remove(mesh)\r\n        }\r\n        \r\n        // Build new datasets from the written data, and display them.\r\n        this.datasets = []\r\n        \r\n        let threeMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x5f6670,\r\n            roughness: 0.65,\r\n            metalness: 0.40\r\n        })\r\n        \r\n        const walk = (geometry) => {\r\n            if (geometry.assembly) {\r\n                geometry.assembly.forEach(walk)\r\n            } else if (geometry.threejsSegments) {\r\n                const segments = geometry.threejsSegments\r\n                const dataset = {}\r\n                const threejsGeometry = new THREE.Geometry()\r\n                for (const [[aX, aY, aZ], [bX, bY, bZ]] of segments) {\r\n                    threejsGeometry.vertices.push(new THREE.Vector3(aX, aY, aZ), new THREE.Vector3(bX, bY, bZ))\r\n                }\r\n                dataset.mesh = new THREE.LineSegments(threejsGeometry, threeMaterial)\r\n                this.scene.add(dataset.mesh)\r\n                this.datasets.push(dataset)\r\n            } else if (geometry.threejsSolid) {\r\n                const { positions, normals } = geometry.threejsSolid\r\n                const dataset = {}\r\n                const threejsGeometry = new THREE.BufferGeometry()\r\n                threejsGeometry.addAttribute('position', new THREE.Float32BufferAttribute(positions, 3))\r\n                threejsGeometry.addAttribute('normal', new THREE.Float32BufferAttribute(normals, 3))\r\n                dataset.mesh = new THREE.Mesh(threejsGeometry, threeMaterial)\r\n                this.scene.add(dataset.mesh)\r\n                this.datasets.push(dataset)\r\n            } else if (geometry.threejsSurface) {\r\n                const { positions, normals } = geometry.threejsSurface\r\n                const dataset = {}\r\n                const threejsGeometry = new THREE.BufferGeometry()\r\n                threejsGeometry.addAttribute('position', new THREE.Float32BufferAttribute(positions, 3))\r\n                threejsGeometry.addAttribute('normal', new THREE.Float32BufferAttribute(normals, 3))\r\n                dataset.mesh = new THREE.Mesh(threejsGeometry, threeMaterial)\r\n                this.scene.add(dataset.mesh)\r\n                this.datasets.push(dataset)\r\n            }\r\n        }\r\n        walk(threejsGeometry)\r\n    }\r\n    \r\n    onWindowResize() {\r\n        this.camera.aspect = this.targetDiv.clientWidth / (this.targetDiv.clientHeight)\r\n        this.camera.updateProjectionMatrix()\r\n        this.controls.handleResize()\r\n        this.renderer.setSize(this.targetDiv.clientWidth, this.targetDiv.clientHeight)\r\n    }\r\n    \r\n    render() {\r\n        this.renderer.render( this.scene, this.camera )\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/display.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "class",
    "name": "Display",
    "memberof": "src/js/display.js",
    "static": true,
    "longname": "src/js/display.js~Display",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/display.js",
    "importStyle": "Display",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 73,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/display.js~Display",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/display.js~Display#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "convert",
    "memberof": "src/js/display.js~Display",
    "static": false,
    "longname": "src/js/display.js~Display#convert",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "datasets",
    "memberof": "src/js/display.js~Display",
    "static": false,
    "longname": "src/js/display.js~Display#datasets",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "targetDiv",
    "memberof": "src/js/display.js~Display",
    "static": false,
    "longname": "src/js/display.js~Display#targetDiv",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "camera",
    "memberof": "src/js/display.js~Display",
    "static": false,
    "longname": "src/js/display.js~Display#camera",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "controls",
    "memberof": "src/js/display.js~Display",
    "static": false,
    "longname": "src/js/display.js~Display#controls",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "member",
    "name": "scene",
    "memberof": "src/js/display.js~Display",
    "static": false,
    "longname": "src/js/display.js~Display#scene",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "plane",
    "memberof": "src/js/display.js~Display",
    "static": false,
    "longname": "src/js/display.js~Display#plane",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "renderer",
    "memberof": "src/js/display.js~Display",
    "static": false,
    "longname": "src/js/display.js~Display#renderer",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "makeMaterial",
    "memberof": "src/js/display.js~Display",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/display.js~Display#makeMaterial",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [
      {
        "name": "material",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "writeToDisplay",
    "memberof": "src/js/display.js~Display",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/display.js~Display#writeToDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "params": [
      {
        "name": "shape",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "zoomCameraToFit",
    "memberof": "src/js/display.js~Display",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/display.js~Display#zoomCameraToFit",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [
      {
        "name": "bounds",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "updateDisplayData",
    "memberof": "src/js/display.js~Display",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/display.js~Display#updateDisplayData",
    "access": "public",
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "params": [
      {
        "name": "threejsGeometry",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "onWindowResize",
    "memberof": "src/js/display.js~Display",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/display.js~Display#onWindowResize",
    "access": "public",
    "description": null,
    "lineNumber": 188,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "render",
    "memberof": "src/js/display.js~Display",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/display.js~Display#render",
    "access": "public",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "src/js/githubOauth.js",
    "content": "import Molecule from './molecules/molecule.js'\r\nimport GlobalVariables from './globalvariables.js'\r\nimport { extractBomTags } from './BOM.js'\r\nimport { OAuth } from 'oauthio-web'\r\n\r\nexport default function GitHubModule(){\r\n    const Octokit = require('@octokit/rest')\r\n    var octokit = new Octokit()\r\n    var popup = document.getElementById('projects-popup')\r\n    var currentRepoName = null\r\n    var currentUser = null\r\n    var bomHeader = \"###### Note: Do not edit this file directly, it is automatically generated from the CAD model \\n# Bill Of Materials \\n |Part|Number Needed|Price|Source| \\n |----|----------|-----|-----|\"\r\n\r\n    var intervalTimer\r\n    \r\n    document.getElementById(\"loginButton\").addEventListener(\"mousedown\", () => {\r\n        this.tryLogin()\r\n    })\r\n    \r\n    this.tryLogin = function(){\r\n        // Initialize with OAuth.io app public key\r\n        OAuth.initialize('BYP9iFpD7aTV9SDhnalvhZ4fwD8')\r\n        // Use popup for oauth\r\n        OAuth.popup('github').then(github => {\r\n            \r\n            octokit.authenticate({\r\n                type: \"oauth\",\r\n                token: github.access_token\r\n            })\r\n            \r\n            //Test the authentication \r\n            octokit.users.getAuthenticated({}).then(result => {\r\n                currentUser = result.data.login\r\n                this.showProjectsToLoad()\r\n            })\r\n        })\r\n    }\r\n\r\n    this.showProjectsToLoad = function(){\r\n        //Remove everything in the popup now\r\n        while (popup.firstChild) {\r\n            popup.removeChild(popup.firstChild)\r\n        }\r\n        \r\n        popup.classList.remove('off')\r\n        popup.setAttribute(\"style\", \"text-align: center\")\r\n        \r\n        var tabButtons = document.createElement(\"DIV\")\r\n        tabButtons.setAttribute(\"class\", \"tab\")\r\n        tabButtons.setAttribute(\"style\", \"display: inline-block;\")\r\n        popup.appendChild(tabButtons)\r\n        \r\n        var yoursButton = document.createElement(\"button\")\r\n        yoursButton.setAttribute(\"class\", \"tablinks\")\r\n        yoursButton.appendChild(document.createTextNode(\"Your Projects\"))\r\n        yoursButton.style.fontSize = \"xx-large\"\r\n        yoursButton.setAttribute(\"id\", \"yoursButton\")\r\n        yoursButton.addEventListener(\"click\", (e) => {\r\n            this.openTab(e, \"yoursButton\")\r\n        })\r\n        tabButtons.appendChild(yoursButton)\r\n        \r\n        var githubButton = document.createElement(\"button\")\r\n        githubButton.setAttribute(\"class\", \"tablinks\")\r\n        githubButton.appendChild(document.createTextNode(\"All Projects\"))\r\n        githubButton.style.fontSize = \"xx-large\"\r\n        githubButton.setAttribute(\"id\", \"githubButton\")\r\n        githubButton.addEventListener(\"click\", (e) => {\r\n            this.openTab(e, \"githubButton\")\r\n        })\r\n        tabButtons.appendChild(githubButton)\r\n        \r\n        popup.appendChild(document.createElement(\"br\"))\r\n        \r\n        var searchBar = document.createElement(\"input\")\r\n        searchBar.setAttribute(\"type\", \"text\")\r\n        searchBar.setAttribute(\"placeholder\", \"Search for project..\")\r\n        searchBar.setAttribute(\"class\", \"menu_search\")\r\n        searchBar.setAttribute(\"id\", \"project_search\")\r\n        searchBar.setAttribute(\"style\", \"width: 50%\")\r\n        popup.appendChild(searchBar)\r\n        searchBar.addEventListener('keyup', (e) => {\r\n            this.loadProjectsBySearch(e, searchBar.value)\r\n        })\r\n        \r\n        \r\n        this.projectsSpaceDiv = document.createElement(\"DIV\")\r\n        this.projectsSpaceDiv.setAttribute(\"class\", \"float-left-div\")\r\n        this.projectsSpaceDiv.setAttribute(\"style\", \"overflow: auto\")\r\n        popup.appendChild(this.projectsSpaceDiv)\r\n        \r\n        yoursButton.click()\r\n    }\r\n    \r\n    this.loadProjectsBySearch = function(ev, searchString){\r\n\r\n        if(ev.key == \"Enter\"){\r\n            //Remove projects shown now\r\n            while (this.projectsSpaceDiv.firstChild) {\r\n                this.projectsSpaceDiv.removeChild(this.projectsSpaceDiv.firstChild)\r\n            }\r\n            \r\n            //Add the create a new project button\r\n            this.addProject(\"New Project\", null, true, \"newProject.svg\")\r\n            \r\n            //Load projects\r\n            var query\r\n            var owned\r\n            if(document.getElementsByClassName(\"tablinks active\")[0].id == \"yoursButton\"){\r\n                owned = true\r\n                query = searchString + ' ' + 'fork:true user:' + currentUser + ' topic:maslowcreate'\r\n            }\r\n            else{\r\n                owned = false\r\n                query = searchString + ' topic:maslowcreate'\r\n            }\r\n            \r\n            //Figure out how many repos this user has, search will throw an error if they have 0;\r\n            octokit.repos.list({\r\n                affiliation: 'owner',\r\n            }).then(({data}) => {\r\n                if(data.length == 0){                   //If the user has no repos at all, the search will fail so we want to spawn a popup here and clone the example\r\n                    this.cloneExampleProjectPopup()\r\n                }\r\n            })\r\n            \r\n            octokit.search.repos({\r\n                q: query,\r\n                sort: \"stars\",\r\n                per_page: 100,\r\n                page: 1,\r\n                headers: {\r\n                    accept: 'application/vnd.github.mercy-preview+json'\r\n                }\r\n            }).then(result => {\r\n                result.data.items.forEach(repo => {\r\n                    const thumbnailPath = \"https://raw.githubusercontent.com/\"+repo.full_name+\"/master/project.svg?sanitize=true\"\r\n                    this.addProject(repo.name, repo.id, owned, thumbnailPath)\r\n                })\r\n                if(result.data.items.length == 0 && searchString == ''){ //If the empty search returned no results on loading\r\n                    this.cloneExampleProjectPopup()\r\n                }\r\n            }) \r\n        } \r\n    }\r\n    \r\n    this.cloneExampleProjectPopup = function(){\r\n        this.forkByID(177732883) //This is the ID of the example project\r\n    }\r\n    \r\n    this.addProject = function(projectName, id, owned, thumbnailPath){\r\n        //create a project element to display\r\n        \r\n        var project = document.createElement(\"DIV\")\r\n        \r\n        var projectPicture = document.createElement(\"IMG\")\r\n        projectPicture.setAttribute(\"src\", thumbnailPath)\r\n        projectPicture.setAttribute(\"onerror\", \"this.src='/defaultThumbnail.svg'\")\r\n        projectPicture.setAttribute(\"style\", \"width: 100%; height: 100%;\")\r\n        project.appendChild(projectPicture)\r\n        project.appendChild(document.createElement(\"BR\"))\r\n        \r\n        var shortProjectName\r\n        if(projectName.length > 9){\r\n            shortProjectName = document.createTextNode(projectName.substr(0,7)+\"..\")\r\n        }\r\n        else{\r\n            shortProjectName = document.createTextNode(projectName)\r\n        }\r\n        project.setAttribute(\"class\", \"project\")\r\n        project.setAttribute(\"id\", projectName)\r\n        project.appendChild(shortProjectName) \r\n        this.projectsSpaceDiv.appendChild(project) \r\n        \r\n        document.getElementById(projectName).addEventListener('click', () => {\r\n            this.projectClicked(projectName, id, owned)\r\n        })\r\n\r\n    }\r\n\r\n    this.projectClicked = function(projectName, projectID, owned){\r\n        //runs when you click on one of the projects\r\n        if(projectName == \"New Project\"){\r\n            this.createNewProjectPopup()\r\n        }\r\n        else if(owned){\r\n            this.loadProject(projectName)\r\n        }\r\n        else{\r\n            window.open('/run?'+projectID)\r\n        }\r\n    }\r\n    \r\n    this.openTab = function(evt, tabName) {\r\n      \r\n        // Declare all variables\r\n        var i, tabcontent, tablinks\r\n\r\n        // Get all elements with class=\"tabcontent\" and hide them\r\n        tabcontent = document.getElementsByClassName(\"tabcontent\")\r\n        for (i = 0; i < tabcontent.length; i++) {\r\n            tabcontent[i].style.display = \"none\"\r\n        }\r\n\r\n        // Get all elements with class=\"tablinks\" and remove the class \"active\"\r\n        tablinks = document.getElementsByClassName(\"tablinks\")\r\n        for (i = 0; i < tablinks.length; i++) {\r\n            tablinks[i].className = tablinks[i].className.replace(\" active\", \"\")\r\n        }\r\n\r\n        // Show the current tab, and add an \"active\" class to the button that opened the tab\r\n        document.getElementById(tabName).style.display = \"block\"\r\n        evt.currentTarget.className += \" active\"\r\n      \r\n        //Click on the search bar so that when you start typing it shows updateCommands\r\n        document.getElementById('menuInput').focus()\r\n      \r\n      \r\n        this.loadProjectsBySearch({key: \"Enter\"}, document.getElementById(\"project_search\").value)\r\n    }\r\n    \r\n    this.createNewProjectPopup = function(){\r\n        //Clear the popup and populate the fields we will need to create the new repo\r\n        \r\n        while (popup.firstChild) {\r\n            popup.removeChild(popup.firstChild)\r\n        }\r\n        \r\n        //Project name\r\n        // <div class=\"form\">\r\n        var createNewProjectDiv = document.createElement(\"DIV\")\r\n        createNewProjectDiv.setAttribute(\"class\", \"form\")\r\n        \r\n        //Add a title\r\n        var header = document.createElement(\"H1\")\r\n        var title = document.createTextNode(\"Create a new project\")\r\n        header.appendChild(title)\r\n        createNewProjectDiv.appendChild(header)\r\n        \r\n        //Create the form object\r\n        var form = document.createElement(\"form\")\r\n        form.setAttribute(\"class\", \"login-form\")\r\n        createNewProjectDiv.appendChild(form)\r\n        \r\n        //Create the name field\r\n        var name = document.createElement(\"input\")\r\n        name.setAttribute(\"id\",\"project-name\")\r\n        name.setAttribute(\"type\",\"text\")\r\n        name.setAttribute(\"placeholder\",\"Project name\")\r\n        form.appendChild(name)\r\n        \r\n        //Add the description field\r\n        var description = document.createElement(\"input\")\r\n        description.setAttribute(\"id\", \"project-description\")\r\n        description.setAttribute(\"type\", \"text\")\r\n        description.setAttribute(\"placeholder\", \"Project description\")\r\n        form.appendChild(description)\r\n        \r\n        //Add the button\r\n        var createButton = document.createElement(\"button\")\r\n        createButton.setAttribute(\"type\", \"button\")\r\n        createButton.addEventListener('click', () => {\r\n            this.createNewProject()\r\n        })\r\n        var buttonText = document.createTextNode(\"Create Project\")\r\n        createButton.appendChild(buttonText)\r\n        form.appendChild(createButton)\r\n        \r\n\r\n        popup.appendChild(createNewProjectDiv)\r\n\r\n    }\r\n    \r\n    this.shareOpenedProject = function(){\r\n        alert(\"A page with a shareable url to this project will open in a new window. Share the link to that page with anyone you would like to share the project with.\")\r\n            \r\n        octokit.repos.get({\r\n            owner: currentUser,\r\n            repo: currentRepoName\r\n        }).then(result => {\r\n            var ID = result.data.id\r\n            window.open('/run?'+ID)\r\n        })\r\n    }\r\n    \r\n    this.openGitHubPage = function(){\r\n        //Open the github page for the current project in a new tab\r\n        octokit.repos.get({\r\n            owner: currentUser,\r\n            repo: currentRepoName\r\n        }).then(result => {\r\n            var url = result.data.html_url\r\n            window.open(url)\r\n        })\r\n    }\r\n    \r\n    this.searchGithub = async (searchString) => {\r\n        return await octokit.search.repos({\r\n            q: searchString + ' topic:maslowcreate',\r\n            sort: 'stars',\r\n            per_page: 10,\r\n            page: 1,\r\n            headers: {\r\n                accept: 'application/vnd.github.mercy-preview+json'\r\n            }\r\n        })\r\n    }\r\n    \r\n    this.createNewProject = function(){\r\n        \r\n        if(typeof intervalTimer != undefined){\r\n            clearInterval(intervalTimer) //Turn of auto saving\r\n        }\r\n        \r\n        //Get name and description\r\n        var name = document.getElementById('project-name').value\r\n        var description = document.getElementById('project-description').value\r\n        \r\n        //Load a blank project\r\n        GlobalVariables.topLevelMolecule = new Molecule({\r\n            x: 0, \r\n            y: 0, \r\n            topLevel: true, \r\n            name: name,\r\n            atomType: \"Molecule\",\r\n            uniqueID: GlobalVariables.generateUniqueID()\r\n        })\r\n        \r\n        GlobalVariables.currentMolecule = GlobalVariables.topLevelMolecule\r\n        \r\n        //Create a new repo\r\n        octokit.repos.createForAuthenticatedUser({\r\n            name: name,\r\n            description: description\r\n        }).then(result => {\r\n            //Once we have created the new repo we need to create a file within it to store the project in\r\n            currentRepoName = result.data.name\r\n            var path = \"project.maslowcreate\"\r\n            var content = window.btoa(JSON.stringify(GlobalVariables.topLevelMolecule.serialize(null), null, 4)) // create a file with the new molecule in it and base64 encode it\r\n            octokit.repos.createFile({\r\n                owner: currentUser,\r\n                repo: currentRepoName,\r\n                path: path,\r\n                message: \"initialize repo\", \r\n                content: content\r\n            }).then(() => {\r\n                //Then create the BOM file\r\n                content = window.btoa(bomHeader) // create a file with just the header in it and base64 encode it\r\n                octokit.repos.createFile({\r\n                    owner: currentUser,\r\n                    repo: currentRepoName,\r\n                    path: \"BillOfMaterials.md\",\r\n                    message: \"initialize BOM\", \r\n                    content: content\r\n                }).then(() => {\r\n                    //Then create the README file\r\n                    content = window.btoa(\"readme init\") // create a file with just the word \"init\" in it and base64 encode it\r\n                    octokit.repos.createFile({\r\n                        owner: currentUser,\r\n                        repo: currentRepoName,\r\n                        path: \"README.md\",\r\n                        message: \"initialize README\", \r\n                        content: content\r\n                    }).then(() => {\r\n                        intervalTimer = setInterval(() => { this.saveProject() }, 60000) //Save the project regularly\r\n                    })\r\n                })\r\n            })\r\n            \r\n            //Update the project topics\r\n            octokit.repos.replaceTopics({\r\n                owner: currentUser,\r\n                repo: currentRepoName,\r\n                names: [\"maslowcreate\", \"maslowcreate-project\"],\r\n                headers: {\r\n                    accept: 'application/vnd.github.mercy-preview+json'\r\n                }\r\n            })\r\n        })\r\n        \r\n        GlobalVariables.currentMolecule.backgroundClick()\r\n        \r\n        //Clear and hide the popup\r\n        while (popup.firstChild) {\r\n            popup.removeChild(popup.firstChild)\r\n        }\r\n        popup.classList.add('off')\r\n        \r\n        \r\n    }\r\n\r\n    this.saveProject = function(){\r\n        //Save the current project into the github repo\r\n        if(currentRepoName != null){\r\n            var shape = null\r\n            if(GlobalVariables.topLevelMolecule.value instanceof GlobalVariables.api.Shape){\r\n                shape = GlobalVariables.topLevelMolecule.value\r\n            }else{\r\n                shape = GlobalVariables.api.sphere()\r\n            }\r\n            \r\n            const threadCompute = async (values, key) => {\r\n                return await GlobalVariables.ask({values: values, key: key})\r\n            }\r\n            threadCompute([shape.toLazyGeometry().toGeometry()], \"stl\").then( stlContent => {\r\n                \r\n                threadCompute([shape.toLazyGeometry().toGeometry()], \"SVG Picture\").then(contentSvg => {\r\n                    \r\n                    var bomContent = bomHeader\r\n                    const bomItems = extractBomTags(GlobalVariables.topLevelMolecule.value)\r\n                    bomItems.forEach(item => {\r\n                        bomContent = bomContent + \"\\n|\" + item.BOMitemName + \"|\" + item.numberNeeded + \"|\" + item.costUSD + \"|\" + item.source + \"|\"\r\n                    })\r\n                    \r\n                    var readmeContent = \"# \" + currentRepoName + \"\\n\\n![](/project.svg)\\n\\n\"\r\n                    GlobalVariables.topLevelMolecule.requestReadme().forEach(item => {\r\n                        readmeContent = readmeContent + item + \"\\n\\n\\n\"\r\n                    })\r\n                    \r\n                    const projectContent = JSON.stringify(GlobalVariables.topLevelMolecule.serialize(null), null, 4)\r\n                    \r\n                    this.createCommit(octokit,{\r\n                        owner: currentUser,\r\n                        repo: currentRepoName,\r\n                        base: 'master', /* optional: defaults to default branch */\r\n                        changes: {\r\n                            files: {\r\n                                'project.stl': stlContent,\r\n                                'project.svg': contentSvg,\r\n                                'BillOfMaterials.md': bomContent,\r\n                                'README.md': readmeContent,\r\n                                'project.maslowcreate': projectContent\r\n                            },\r\n                            commit: 'Autosave'\r\n                        }\r\n                    }) \r\n                })\r\n            })\r\n        }\r\n    }\r\n    \r\n    this.createCommit = async function(octokit, { owner, repo, base, changes }) {\r\n        let response\r\n\r\n        if (!base) {\r\n            response = await octokit.repos.get({ owner, repo })\r\n            base = response.data.default_branch\r\n        }\r\n\r\n        response = await octokit.repos.listCommits({\r\n            owner,\r\n            repo,\r\n            sha: base,\r\n            per_page: 1\r\n        })\r\n        let latestCommitSha = response.data[0].sha\r\n        const treeSha = response.data[0].commit.tree.sha\r\n      \r\n        response = await octokit.git.createTree({\r\n            owner,\r\n            repo,\r\n            base_tree: treeSha,\r\n            tree: Object.keys(changes.files).map(path => {\r\n                return {\r\n                    path,\r\n                    mode: '100644',\r\n                    content: changes.files[path]\r\n                }\r\n            })\r\n        })\r\n        const newTreeSha = response.data.sha\r\n\r\n        response = await octokit.git.createCommit({\r\n            owner,\r\n            repo,\r\n            message: changes.commit,\r\n            tree: newTreeSha,\r\n            parents: [latestCommitSha]\r\n        })\r\n        latestCommitSha = response.data.sha\r\n      \r\n        await octokit.git.updateRef({\r\n            owner,\r\n            repo,\r\n            sha: latestCommitSha,\r\n            ref: `heads/master`,\r\n            force: true\r\n        })\r\n      \r\n        console.warn(\"Project saved\")\r\n\r\n    }\r\n    \r\n    this.loadProject = function(projectName){\r\n        \r\n        if(typeof intervalTimer != undefined){\r\n            clearInterval(intervalTimer) //Turn off auto saving\r\n        }\r\n        \r\n        //Clear and hide the popup\r\n        while (popup.firstChild) {\r\n            popup.removeChild(popup.firstChild)\r\n        }\r\n        popup.classList.add('off')\r\n        \r\n        currentRepoName = projectName\r\n        \r\n        //Load a blank project\r\n        GlobalVariables.topLevelMolecule = new Molecule({\r\n            x: 0, \r\n            y: 0, \r\n            topLevel: true, \r\n            atomType: \"Molecule\"\r\n        })\r\n        \r\n        GlobalVariables.currentMolecule = GlobalVariables.topLevelMolecule\r\n        \r\n        octokit.repos.getContents({\r\n            owner: currentUser,\r\n            repo: projectName,\r\n            path: 'project.maslowcreate'\r\n        }).then(result => {\r\n            \r\n            //content will be base64 encoded\r\n            let rawFile = JSON.parse(atob(result.data.content))\r\n            \r\n            \r\n            var moleculesList = rawFile.molecules\r\n            \r\n            if(rawFile.circleSegmentSize){\r\n                GlobalVariables.circleSegmentSize = rawFile.circleSegmentSize\r\n            }\r\n            \r\n            //Load the top level molecule from the file\r\n            GlobalVariables.topLevelMolecule.deserialize(moleculesList, moleculesList.filter((molecule) => { return molecule.topLevel == true })[0].uniqueID)\r\n            \r\n            GlobalVariables.topLevelMolecule.backgroundClick()\r\n            GlobalVariables.evalLock = false\r\n            GlobalVariables.topLevelMolecule.unlock()\r\n            \r\n            var _this = this\r\n            intervalTimer = setInterval(function() { _this.saveProject() }, 60000) //Save the project regularly\r\n        })\r\n        \r\n    }\r\n    \r\n    this.getProjectByID = async function(id){\r\n        let result = await octokit.request('GET /repositories/:id', {id})\r\n            \r\n        //Find out the owners info;\r\n        var user     = result.data.owner.login\r\n        var repoName = result.data.name\r\n        \r\n        //Get the file contents\r\n        result = await octokit.repos.getContents({\r\n            owner: user,\r\n            repo: repoName,\r\n            path: 'project.maslowcreate'\r\n        })\r\n        \r\n        return result\r\n    }\r\n    \r\n    this.exportCurrentMoleculeToGithub = function(molecule){\r\n        \r\n        //Get name and description\r\n        var name = molecule.name\r\n        var description = \"A stand alone molecule exported from Maslow Create\"\r\n        \r\n        //Create a new repo\r\n        octokit.repos.createForAuthenticatedUser({\r\n            name: name,\r\n            description: description\r\n        }).then(result => {\r\n            //Once we have created the new repo we need to create a file within it to store the project in\r\n            var repoName = result.data.name\r\n            var id       = result.data.id\r\n            var path     = \"project.maslowcreate\"\r\n            var content  = window.btoa(\"init\") // create a file with just the word \"init\" in it and base64 encode it\r\n            octokit.repos.createFile({\r\n                owner: currentUser,\r\n                repo: repoName,\r\n                path: path,\r\n                message: \"initialize repo\", \r\n                content: content\r\n            }).then(() => {\r\n                \r\n                //Save the molecule into the newly created repo\r\n                \r\n                var path = \"project.maslowcreate\"\r\n                \r\n                molecule.topLevel = true //force the molecule to export in the long form as if it were the top level molecule\r\n                var content = window.btoa(JSON.stringify(molecule.serialize(null), null, 4)) //Convert the passed molecule object to a JSON string and then convert it to base64 encoding\r\n                \r\n                //Get the SHA for the file\r\n                octokit.repos.getContents({\r\n                    owner: currentUser,\r\n                    repo: repoName,\r\n                    path: path\r\n                }).then(result => {\r\n                    var sha = result.data.sha\r\n                    \r\n                    //Save the repo to the file\r\n                    octokit.repos.updateFile({\r\n                        owner: currentUser,\r\n                        repo: repoName,\r\n                        path: path,\r\n                        message: \"export Molecule\", \r\n                        content: content,\r\n                        sha: sha\r\n                    }).then(() => {\r\n                        //Replace the existing molecule now that we just exported\r\n                        molecule.replaceThisMoleculeWithGithub(id)\r\n                    })\r\n                })\r\n\r\n            })\r\n            \r\n            //Update the project topics\r\n            octokit.repos.replaceTopics({\r\n                owner: currentUser,\r\n                repo: repoName,\r\n                names: [\"maslowcreate\", \"maslowcreate-molecule\"],\r\n                headers: {\r\n                    accept: 'application/vnd.github.mercy-preview+json'\r\n                }\r\n            })\r\n            \r\n        })\r\n    }\r\n\r\n    this.starProject = function(id){\r\n        //Authenticate - Initialize with OAuth.io app public key\r\n        OAuth.initialize('BYP9iFpD7aTV9SDhnalvhZ4fwD8')\r\n        // Use popup for oauth\r\n        OAuth.popup('github').then(github => {\r\n            \r\n            octokit.authenticate({\r\n                type: \"oauth\",\r\n                token: github.access_token,\r\n                headers: {\r\n                    accept: 'application/vnd.github.mercy-preview+json'\r\n                }\r\n            })\r\n            \r\n            octokit.request('GET /repositories/:id', {id}).then(result => {\r\n                //Find out the information of who owns the project we are trying to fork\r\n                var user     = result.data.owner.login\r\n                var repoName = result.data.name\r\n                this.octokit.activity.starRepo({\r\n                    owner: user,\r\n                    repo: repoName\r\n                })\r\n            })\r\n        })\r\n    }\r\n    \r\n    this.forkByID = function(id){\r\n        \r\n        //Authenticate - Initialize with OAuth.io app public key\r\n        OAuth.initialize('BYP9iFpD7aTV9SDhnalvhZ4fwD8')\r\n        // Use popup for oauth\r\n        OAuth.popup('github').then(github => {\r\n            \r\n            octokit.authenticate({\r\n                type: \"oauth\",\r\n                token: github.access_token,\r\n                headers: {\r\n                    accept: 'application/vnd.github.mercy-preview+json'\r\n                }\r\n            })\r\n            \r\n            octokit.request('GET /repositories/:id', {id}).then(result => {\r\n                //Find out the information of who owns the project we are trying to fork\r\n                var user     = result.data.owner.login\r\n                var repoName = result.data.name\r\n                \r\n                octokit.repos.listTopics({\r\n                    owner: user, \r\n                    repo: repoName,\r\n                    headers: {\r\n                        accept: 'application/vnd.github.mercy-preview+json'\r\n                    }\r\n                }).then(result => {\r\n                    var topics = result.data.names\r\n                    \r\n                    //Create a fork of the project with the found user name and repo name under your account\r\n                    octokit.repos.createFork({\r\n                        owner: user, \r\n                        repo: repoName,\r\n                        headers: {\r\n                            accept: 'application/vnd.github.mercy-preview+json'\r\n                        }\r\n                    }).then(result => {\r\n                        var repoName = result.data.name\r\n                        //Manually copy over the topics which are lost in forking\r\n                        octokit.repos.replaceTopics({\r\n                            owner: result.data.owner.login,\r\n                            repo: result.data.name,\r\n                            names: topics,\r\n                            headers: {\r\n                                accept: 'application/vnd.github.mercy-preview+json'\r\n                            }\r\n                        }).then(() => {\r\n                            \r\n                            \r\n                            //Remove everything in the popup now\r\n                            while (popup.firstChild) {\r\n                                popup.removeChild(popup.firstChild)\r\n                            }\r\n                            \r\n                            popup.classList.remove('off')\r\n                            popup.setAttribute(\"style\", \"text-align: center\")\r\n\r\n                            var subButtonDiv = document.createElement('div')\r\n                            subButtonDiv.setAttribute(\"class\", \"form\")\r\n                            \r\n                            //Add a title\r\n                            var title = document.createElement(\"H3\")\r\n                            title.appendChild(document.createTextNode(\"A copy of the project '\" + repoName + \"' has been copied and added to your projects. You can view it by clicking the button below.\"))\r\n                            subButtonDiv.appendChild(title)\r\n                            subButtonDiv.appendChild(document.createElement(\"br\"))\r\n                            \r\n                            var form = document.createElement(\"form\")\r\n                            subButtonDiv.appendChild(form)\r\n                            var button = document.createElement(\"button\")\r\n                            button.setAttribute(\"type\", \"button\")\r\n                            button.appendChild(document.createTextNode(\"View Projects\"))\r\n                            button.addEventListener(\"click\", () => {\r\n                                window.location.href = '/'\r\n                            })\r\n                            form.appendChild(button)\r\n                            popup.appendChild(subButtonDiv)\r\n                        })\r\n                    })\r\n                })\r\n            })\r\n        })\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/githubOauth.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "GitHubModule",
    "memberof": "src/js/githubOauth.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/githubOauth.js~GitHubModule",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/githubOauth.js",
    "importStyle": "GitHubModule",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 91,
    "kind": "file",
    "name": "src/js/globalvariables.js",
    "content": "import Assembly from './molecules/assembly.js'\r\nimport Circle from './molecules/circle.js'\r\nimport Rectangle from './molecules/rectangle.js'\r\nimport ShrinkWrap from './molecules/shrinkwrap.js'\r\nimport Translate from './molecules/translate.js'\r\nimport Tag from './molecules/tag.js'\r\nimport RegularPolygon from './molecules/regularpolygon.js'\r\nimport Extrude from './molecules/extrude.js'\r\nimport Scale from './molecules/scale.js'\r\nimport Union from './molecules/union.js'\r\nimport Intersection from './molecules/intersection.js'\r\nimport Difference from './molecules/difference.js'\r\nimport Constant from './molecules/constant.js'\r\nimport Equation from './molecules/equation.js'\r\nimport Molecule from './molecules/molecule.js'\r\nimport Input from './molecules/input.js'\r\nimport Readme from './molecules/readme.js'\r\nimport AddBOMTag from './molecules/BOM.js'\r\nimport Rotate from './molecules/rotate.js'\r\nimport GitHubMolecule from './molecules/githubmolecule.js'\r\nimport Output from './molecules/output.js'\r\nimport Stretch from './molecules/stretch.js'\r\nimport Gcode from './molecules/gcode.js'\r\nimport Code from './molecules/code.js'\r\n\r\nimport GitHubModule from './githubOauth'\r\n\r\nimport { createService } from './lib/service.js'\r\n\r\nclass GlobalVariables{\r\n    constructor(){\r\n        this.canvas = null\r\n        this.c = null\r\n        this.scale1 = 1 \r\n        this.availableTypes = {\r\n            assembly:           {creator: Assembly, atomType: 'Assembly'},\r\n            circle:             {creator: Circle, atomType: 'Circle'},\r\n            rectangle:          {creator: Rectangle, atomType: 'Rectangle'},\r\n            shirinkwrap:        {creator: ShrinkWrap, atomType: 'ShrinkWrap'},\r\n            translate:          {creator: Translate, atomType: 'Translate'},\r\n            tag:                {creator: Tag, atomType: 'Tag'},\r\n            regularPolygon:     {creator: RegularPolygon, atomType: 'RegularPolygon'},\r\n            extrude:            {creator: Extrude, atomType: 'Extrude'},\r\n            scale:              {creator: Scale, atomType: 'Scale'},\r\n            intersection:       {creator: Intersection, atomType: 'Intersection'},\r\n            difference:         {creator: Difference, atomType: 'Difference'},\r\n            costant:            {creator: Constant, atomType: 'Constant'},\r\n            equation:           {creator: Equation, atomType: 'Equation'},\r\n            molecule:           {creator: Molecule, atomType: 'Molecule'},\r\n            input:              {creator: Input, atomType: 'Input'},\r\n            readme:             {creator: Readme, atomType: 'Readme'},\r\n            addBOMTag:          {creator: AddBOMTag, atomType: 'Add BOM Tag'},\r\n            rotate:             {creator: Rotate, atomType: 'Rotate'},\r\n            githubmolecule:     {creator: GitHubMolecule, atomType: 'GitHubMolecule'},\r\n            union:              {creator: Union, atomType: 'Union'},\r\n            stretch:            {creator: Stretch, atomType: 'Stretch'},\r\n            gcode:              {creator: Gcode, atomType: 'Gcode'},\r\n            code:               {creator: Code, atomType: 'Code'}\r\n        }\r\n        this.secretTypes = {\r\n            output:        {creator: Output, atomType: 'Output'}\r\n        }\r\n        this.currentMolecule\r\n        this.topLevelMolecule\r\n        this.runMode = false\r\n        this.evalLock = true\r\n        this.gitHub = new GitHubModule()\r\n        this.circleSegmentSize = 2\r\n        \r\n        const agent = async ({ question }) => `Secret ${question}`\r\n        createService({ webWorker: '../webworker.js', agent }).then(result => {\r\n            this.ask = result.ask\r\n        })\r\n        createService({ webWorker: '../webworker.js', agent }).then(result => {\r\n            this.render = result.ask\r\n        })\r\n    }\r\n    \r\n    generateUniqueID(){\r\n        return Math.floor(Math.random()*900000) + 100000\r\n    }\r\n\r\n    distBetweenPoints(x1, x2, y1, y2){\r\n        var a2 = Math.pow(x1 - x2, 2)\r\n        var b2 = Math.pow(y1 - y2, 2)\r\n        var dist = Math.sqrt(a2 + b2)\r\n        \r\n        return dist\r\n    }\r\n}\r\n\r\nexport default (new GlobalVariables)",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/globalvariables.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 92,
    "kind": "class",
    "name": "GlobalVariables",
    "memberof": "src/js/globalvariables.js",
    "static": true,
    "longname": "src/js/globalvariables.js~GlobalVariables",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/globalvariables.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "pseudoExport": true,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 93,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "canvas",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#canvas",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "c",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#c",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "scale1",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#scale1",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "availableTypes",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#availableTypes",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "{\"assembly\": *, \"circle\": *, \"rectangle\": *, \"shirinkwrap\": *, \"translate\": *, \"tag\": *, \"regularPolygon\": *, \"extrude\": *, \"scale\": *, \"intersection\": *, \"difference\": *, \"costant\": *, \"equation\": *, \"molecule\": *, \"input\": *, \"readme\": *, \"addBOMTag\": *, \"rotate\": *, \"githubmolecule\": *, \"union\": *, \"stretch\": *, \"gcode\": *, \"code\": *}"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "secretTypes",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#secretTypes",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "{\"output\": *}"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "runMode",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#runMode",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "evalLock",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#evalLock",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "member",
    "name": "gitHub",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#gitHub",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "circleSegmentSize",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#circleSegmentSize",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "ask",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#ask",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "render",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#render",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "generateUniqueID",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#generateUniqueID",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "distBetweenPoints",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#distBetweenPoints",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "x1",
        "types": [
          "*"
        ]
      },
      {
        "name": "x2",
        "types": [
          "*"
        ]
      },
      {
        "name": "y1",
        "types": [
          "*"
        ]
      },
      {
        "name": "y2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "globalVariables",
    "memberof": "src/js/globalvariables.js",
    "static": true,
    "longname": "src/js/globalvariables.js~globalVariables",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/globalvariables.js",
    "importStyle": "globalVariables",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "src/js/globalvariables.js~GlobalVariables"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "src/js/lib/browserOrNode.js",
    "content": "// Inlined browser-or-node@1.2.1 due to es6 importing issue.\r\n\r\nconst _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj; };\r\n\r\n/* global window self */\r\n\r\nexport const isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\r\n\r\n/* eslint-disable no-restricted-globals */\r\nexport const isWebWorker = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) === 'object' && self.constructor && self.constructor.name === 'DedicatedWorkerGlobalScope';\r\n/* eslint-enable no-restricted-globals */\r\n\r\nexport const isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/lib/browserOrNode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "_typeof",
    "memberof": "src/js/lib/browserOrNode.js",
    "static": true,
    "longname": "src/js/lib/browserOrNode.js~_typeof",
    "access": "private",
    "export": false,
    "importPath": "canvas-template/src/js/lib/browserOrNode.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "variable",
    "name": "isBrowser",
    "memberof": "src/js/lib/browserOrNode.js",
    "static": true,
    "longname": "src/js/lib/browserOrNode.js~isBrowser",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/lib/browserOrNode.js",
    "importStyle": "{isBrowser}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "isWebWorker",
    "memberof": "src/js/lib/browserOrNode.js",
    "static": true,
    "longname": "src/js/lib/browserOrNode.js~isWebWorker",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/lib/browserOrNode.js",
    "importStyle": "{isWebWorker}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "isNode",
    "memberof": "src/js/lib/browserOrNode.js",
    "static": true,
    "longname": "src/js/lib/browserOrNode.js~isNode",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/lib/browserOrNode.js",
    "importStyle": "{isNode}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "file",
    "name": "src/js/lib/conversation.js",
    "content": "export const conversation = ({ agent, say }) => {\r\n  let id = 0;\r\n  const openQuestions = {};\r\n  const ask = (question) => {\r\n    const promise = new Promise((resolve, reject) => { openQuestions[id] = { resolve, reject }; });\r\n    say({ id, question });\r\n    id += 1;\r\n    return promise;\r\n  };\r\n  const hear = async (message) => {\r\n    const { id, question, answer, error } = message;\r\n    if (answer) {\r\n      const { resolve, reject } = openQuestions[id];\r\n      if (error) {\r\n        reject(error);\r\n      } else {\r\n        resolve(answer);\r\n      }\r\n      delete openQuestions[id];\r\n    } else if (question) {\r\n      const answer = await agent({ ask, question });\r\n      say({ id, answer });\r\n    } else {\r\n      throw Error('die');\r\n    }\r\n  };\r\n  return { ask, hear };\r\n};\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/lib/conversation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "conversation",
    "memberof": "src/js/lib/conversation.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/lib/conversation.js~conversation",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/lib/conversation.js",
    "importStyle": "{conversation}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"agent\": *, \"say\": *}"
        ],
        "defaultRaw": {
          "agent": null,
          "say": null
        },
        "defaultValue": "{\"agent\":null,\"say\":null}"
      }
    ],
    "return": {
      "types": [
        "{\"ask\": *, \"hear\": *}"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "file",
    "name": "src/js/lib/FileSaver.js",
    "content": "(function (global, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([], factory)\r\n    } else if (typeof exports !== 'undefined') {\r\n        factory()\r\n    } else {\r\n        var mod = {\r\n            exports: {}\r\n        }\r\n        factory()\r\n        global.FileSaver = mod.exports\r\n    }\r\n})(this, function () {\r\n    'use strict'\r\n\r\n    /*\r\n  * FileSaver.js\r\n  * A saveAs() FileSaver implementation.\r\n  *\r\n  * By Eli Grey, http://eligrey.com\r\n  *\r\n  * License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\r\n  * source  : http://purl.eligrey.com/github/FileSaver.js\r\n  */\r\n    // The one and only way of getting global scope in all environments\r\n    // https://stackoverflow.com/q/3277182/1008999\r\n    var _global = typeof window === 'object' && window.window === window ? window : typeof self === 'object' && self.self === self ? self : typeof global === 'object' && global.global === global ? global : void 0\r\n\r\n    function bom(blob, opts) {\r\n        if (typeof opts === 'undefined') opts = {\r\n            autoBom: false\r\n        };else if (typeof opts !== 'object') {\r\n            console.warn('Depricated: Expected third argument to be a object')\r\n            opts = {\r\n                autoBom: !opts\r\n            }\r\n        } // prepend BOM for UTF-8 XML and text/* types (including HTML)\r\n        // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\r\n\r\n        if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\r\n            return new Blob([String.fromCharCode(0xFEFF), blob], {\r\n                type: blob.type\r\n            })\r\n        }\r\n\r\n        return blob\r\n    }\r\n\r\n    function download(url, name, opts) {\r\n        var xhr = new XMLHttpRequest()\r\n        xhr.open('GET', url)\r\n        xhr.responseType = 'blob'\r\n\r\n        xhr.onload = function () {\r\n            saveAs(xhr.response, name, opts)\r\n        }\r\n\r\n        xhr.onerror = function () {\r\n            console.error('could not download file')\r\n        }\r\n\r\n        xhr.send()\r\n    }\r\n\r\n    function corsEnabled(url) {\r\n        var xhr = new XMLHttpRequest() // use sync to avoid popup blocker\r\n\r\n        xhr.open('HEAD', url, false)\r\n        xhr.send()\r\n        return xhr.status >= 200 && xhr.status <= 299\r\n    } // `a.click()` doesn't work for all browsers (#465)\r\n\r\n\r\n    function click(node) {\r\n        try {\r\n            node.dispatchEvent(new MouseEvent('click'))\r\n        } catch (e) {\r\n            var evt = document.createEvent('MouseEvents')\r\n            evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null)\r\n            node.dispatchEvent(evt)\r\n        }\r\n    }\r\n\r\n    var saveAs = _global.saveAs || ( // probably in some web worker\r\n        typeof window !== 'object' || window !== _global ? function saveAs() {}\r\n        /* noop */\r\n        // Use download attribute first if possible (#193 Lumia mobile)\r\n            : 'download' in HTMLAnchorElement.prototype ? function saveAs(blob, name, opts) {\r\n                var URL = _global.URL || _global.webkitURL\r\n                var a = document.createElement('a')\r\n                name = name || blob.name || 'download'\r\n                a.download = name\r\n                a.rel = 'noopener' // tabnabbing\r\n                // TODO: detect chrome extensions & packaged apps\r\n                // a.target = '_blank'\r\n\r\n                if (typeof blob === 'string') {\r\n                    // Support regular links\r\n                    a.href = blob\r\n\r\n                    if (a.origin !== location.origin) {\r\n                        corsEnabled(a.href) ? download(blob, name, opts) : click(a, a.target = '_blank')\r\n                    } else {\r\n                        click(a)\r\n                    }\r\n                } else {\r\n                    // Support blobs\r\n                    a.href = URL.createObjectURL(blob)\r\n                    setTimeout(function () {\r\n                        URL.revokeObjectURL(a.href)\r\n                    }, 4E4) // 40s\r\n\r\n                    setTimeout(function () {\r\n                        click(a)\r\n                    }, 0)\r\n                }\r\n            } // Use msSaveOrOpenBlob as a second approach\r\n                : 'msSaveOrOpenBlob' in navigator ? function saveAs(blob, name, opts) {\r\n                    name = name || blob.name || 'download'\r\n\r\n                    if (typeof blob === 'string') {\r\n                        if (corsEnabled(blob)) {\r\n                            download(blob, name, opts)\r\n                        } else {\r\n                            var a = document.createElement('a')\r\n                            a.href = blob\r\n                            a.target = '_blank'\r\n                            setTimeout(function () {\r\n                                click(a)\r\n                            })\r\n                        }\r\n                    } else {\r\n                        navigator.msSaveOrOpenBlob(bom(blob, opts), name)\r\n                    }\r\n                } // Fallback to using FileReader and a popup\r\n                    : function saveAs(blob, name, opts, popup) {\r\n                        // Open a popup immediately do go around popup blocker\r\n                        // Mostly only avalible on user interaction and the fileReader is async so...\r\n                        popup = popup || open('', '_blank')\r\n\r\n                        if (popup) {\r\n                            popup.document.title = popup.document.body.innerText = 'downloading...'\r\n                        }\r\n\r\n                        if (typeof blob === 'string') return download(blob, name, opts)\r\n                        var force = blob.type === 'application/octet-stream'\r\n\r\n                        var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\r\n\r\n                        var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\r\n\r\n                        if ((isChromeIOS || force && isSafari) && typeof FileReader === 'object') {\r\n                            // Safari doesn't allow downloading of blob urls\r\n                            var reader = new FileReader()\r\n\r\n                            reader.onloadend = function () {\r\n                                var url = reader.result\r\n                                url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\r\n                                if (popup) popup.location.href = url;else location = url\r\n                                popup = null // reverse-tabnabbing #460\r\n                            }\r\n\r\n                            reader.readAsDataURL(blob)\r\n                        } else {\r\n                            var URL = _global.URL || _global.webkitURL\r\n                            var url = URL.createObjectURL(blob)\r\n                            if (popup) popup.location = url;else location.href = url\r\n                            popup = null // reverse-tabnabbing #460\r\n\r\n                            setTimeout(function () {\r\n                                URL.revokeObjectURL(url)\r\n                            }, 4E4) // 40s\r\n                        }\r\n                    })\r\n    _global.saveAs = saveAs.saveAs = saveAs\r\n\r\n    if (typeof module !== 'undefined') {\r\n        module.exports = saveAs\r\n    }\r\n})\r\n\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/lib/FileSaver.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "src/js/lib/SVGReader.js",
    "content": "\r\n/**\r\n  SVG parser for the Lasersaur.\r\n  Converts SVG DOM to a flat collection of paths.\r\n\r\n  Copyright (c) 2011 Nortd Labs\r\n  Open Source by the terms of the Gnu Public License (GPL3) or higher.\r\n\r\n  Code inspired by cake.js, canvg.js, svg2obj.py, and Squirtle.\r\n  Thank you for open sourcing your work!\r\n\r\n  Usage:\r\n  var boundarys = SVGReader.parse(svgstring, config)\r\n\r\n  Features:\r\n    * <svg> width and height, viewBox clipping.\r\n    * paths, rectangles, ellipses, circles, lines, polylines and polygons\r\n    * nested transforms\r\n    * transform lists (transform=\"rotate(30) translate(2,2) scale(4)\")\r\n    * non-pixel units (cm, mm, in, pt, pc)\r\n    * 'style' attribute and presentation attributes\r\n    * curves, arcs, cirles, ellipses tesellated according to tolerance\r\n\r\n  Intentinally not Supported:\r\n    * markers\r\n    * masking\r\n    * em, ex, % units\r\n    * text (needs to be converted to paths)\r\n    * raster images\r\n    * style sheets\r\n\r\n  ToDo:\r\n    * check for out of bounds geometry\r\n*/\r\n\r\nimport Vec2 from './vec2.js'\r\n\r\nexport default {\r\n\r\n    boundarys : {},\r\n    // output path flattened (world coords)\r\n    // hash of path by color\r\n    // each path is a list of subpaths\r\n    // each subpath is a list of verteces\r\n    style : {},\r\n    // style at current parsing position\r\n    tolerance : 0.1,\r\n    // max tollerance when tesselating curvy shapes\r\n\r\n\r\n    parse : function(svgstring, config) {\r\n        this.tolerance_squared = Math.pow(this.tolerance, 2)\r\n\r\n        // parse xml\r\n        var svgRootElement\r\n        if (window.DOMParser) {\r\n            var parser = new DOMParser()\r\n            svgRootElement = parser.parseFromString(svgstring, 'text/xml').documentElement\r\n        }\r\n        else {\r\n            xml = xml.replace(/<!DOCTYPE svg[^>]*>/, '')\r\n            var xmlDoc = new ActiveXObject('Microsoft.XMLDOM')\r\n            xmlDoc.async = 'false'\r\n            xmlDoc.loadXML(svgstring)\r\n            svgRootElement = xmlDoc.documentElement\r\n        }\r\n\r\n        // let the fun begin\r\n        var node = {}\r\n        this.boundarys.allcolors = []  // TODO: sort by color\r\n        node.stroke = [255,0,0]\r\n        node.xformToWorld = [1,0,0,1,0,0]\r\n        this.parseChildren(svgRootElement, node)\r\n\r\n        return this.boundarys\r\n    },\r\n\r\n\r\n    parseChildren : function(domNode, parentNode) {\r\n        var childNodes = []\r\n        for (var i=0; i<domNode.childNodes.length; i++) {\r\n            var tag = domNode.childNodes[i]\r\n            if (tag.childNodes) {\r\n                if (tag.tagName) {\r\n                    // we are looping here through\r\n                    // all nodes with child nodes\r\n                    // others are irrelevant\r\n\r\n                    // 1.) setup a new node\r\n                    // and inherit from parent\r\n                    var node = {}\r\n                    node.path = []\r\n                    node.xform = [1,0,0,1,0,0]\r\n                    node.opacity = parentNode.opacity\r\n                    node.display = parentNode.display\r\n                    node.visibility = parentNode.visibility\r\n                    node.fill = parentNode.fill\r\n                    node.stroke = parentNode.stroke\r\n                    node.color = parentNode.color\r\n                    node.fillOpacity = parentNode.fillOpacity\r\n                    node.strokeOpacity = parentNode.strokeOpacity\r\n\r\n                    // 2.) parse own attributes and overwrite\r\n                    if (tag.attributes) {\r\n                        for (var j=0; j<tag.attributes.length; j++) {\r\n                            var attr = tag.attributes[j]\r\n                            if (attr.nodeName && attr.nodeValue && this.SVGAttributeMapping[attr.nodeName]) {\r\n                                this.SVGAttributeMapping[attr.nodeName](this, node, attr.nodeValue)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // 3.) accumulate transformations\r\n                    node.xformToWorld = this.matrixMult(parentNode.xformToWorld, node.xform)\r\n\r\n                    // 4.) parse tag\r\n                    // with current attributes and transformation\r\n                    if (this.SVGTagMapping[tag.tagName]) {\r\n                        //if (node.stroke[0] == 255 && node.stroke[1] == 0 && node.stroke[2] == 0) {\r\n                        this.SVGTagMapping[tag.tagName](this, tag, node)\r\n                        //}\r\n                    }\r\n\r\n                    // 5.) compile boundarys\r\n                    // before adding all path data convert to world coordinates\r\n                    for (var k=0; k<node.path.length; k++) {\r\n                        var subpath = node.path[k]\r\n                        for (var l=0; l<node.path[k].length; l++) {\r\n                            var tmp =  this.matrixApply(node.xformToWorld, subpath[l])\r\n                            subpath[l] = new Vec2(tmp[0], tmp[1])\r\n                        }\r\n                        subpath.node = node\r\n\r\n                        this.boundarys.allcolors.push(subpath)\r\n                    }\r\n                }\r\n\r\n                // recursive call\r\n                this.parseChildren(tag, node)\r\n            }\r\n        }\r\n    },\r\n\r\n\r\n\r\n\r\n    /////////////////////////////\r\n    // recognized svg attributes\r\n\r\n    SVGAttributeMapping : {\r\n        DEG_TO_RAD : Math.PI / 180,\r\n        RAD_TO_DEG : 180 / Math.PI,\r\n\r\n        id : function(parser, node, val) {\r\n            node.id = val\r\n        },\r\n\r\n        transform : function(parser, node, val) {\r\n            // http://www.w3.org/TR/SVG11/coords.html#EstablishingANewUserSpace\r\n            var xforms = []\r\n            var segs = val.match(/[a-z]+\\s*\\([^)]*\\)/ig)\r\n            for (var i=0; i<segs.length; i++) {\r\n                var kv = segs[i].split('(')\r\n                var xformKind = kv[0].strip()\r\n                var paramsTemp = kv[1].strip().slice(0,-1)\r\n                var params = paramsTemp.split(/[\\s,]+/).map(parseFloat)\r\n                // double check params\r\n                for (var j=0; j<params.length; j++) {\r\n                    if ( isNaN(params[j]) ) {\r\n                        $().uxmessage('warning', 'transform skipped; contains non-numbers')\r\n                        continue  // skip this transform\r\n                    }\r\n                }\r\n\r\n                // translate\r\n                if (xformKind == 'translate') {\r\n                    if (params.length == 1) {\r\n                        xforms.push([1, 0, 0, 1, params[0], params[0]])\r\n                    } else if (params.length == 2) {\r\n                        xforms.push([1, 0, 0, 1, params[0], params[1]])\r\n                    } else {\r\n                        $().uxmessage('warning', 'translate skipped; invalid num of params')\r\n                    }\r\n                    // rotate\r\n                } else if (xformKind == 'rotate') {\r\n                    if (params.length == 3) {\r\n                        var angle = params[0] * this.DEG_TO_RAD\r\n                        xforms.push([1, 0, 0, 1, params[1], params[2]])\r\n                        xforms.push([Math.cos(angle), Math.sin(angle), -Math.sin(angle), Math.cos(angle), 0, 0])\r\n                        xforms.push([1, 0, 0, 1, -params[1], -params[2]])\r\n                    } else if (params.length == 1) {\r\n                        var angle = params[0] * this.DEG_TO_RAD\r\n                        xforms.push([Math.cos(angle), Math.sin(angle), -Math.sin(angle), Math.cos(angle), 0, 0])\r\n                    } else {\r\n                        $().uxmessage('warning', 'rotate skipped; invalid num of params')\r\n                    }\r\n                    //scale\r\n                } else if (xformKind == 'scale') {\r\n                    if (params.length == 1) {\r\n                        xforms.push([params[0], 0, 0, params[0], 0, 0])\r\n                    } else if (params.length == 2) {\r\n                        xforms.push([params[0], 0, 0, params[1], 0, 0])\r\n                    } else {\r\n                        $().uxmessage('warning', 'scale skipped; invalid num of params')\r\n                    }\r\n                    // matrix\r\n                } else if (xformKind == 'matrix') {\r\n                    if (params.length == 6) {\r\n                        xforms.push(params)\r\n                    }\r\n                    // skewX\r\n                } else if (xformKind == 'skewX') {\r\n                    if (params.length == 1) {\r\n                        var angle = params[0]*this.DEG_TO_RAD\r\n                        xforms.push([1, 0, Math.tan(angle), 1, 0, 0])\r\n                    } else {\r\n                        $().uxmessage('warning', 'skewX skipped; invalid num of params')\r\n                    }\r\n                    // skewY\r\n                } else if (xformKind == 'skewY') {\r\n                    if (params.length == 1) {\r\n                        var angle = params[0]*this.DEG_TO_RAD\r\n                        xforms.push([1, Math.tan(angle), 0, 1, 0, 0])\r\n                    } else {\r\n                        $().uxmessage('warning', 'skewY skipped; invalid num of params')\r\n                    }\r\n                }\r\n            }\r\n\r\n            //calculate combined transformation matrix\r\n            xform_combined = [1,0,0,1,0,0]\r\n            for (var i=0; i<xforms.length; i++) {\r\n                xform_combined = parser.matrixMult(xform_combined, xforms[i])\r\n            }\r\n\r\n            // assign\r\n            node.xform = xform_combined\r\n        },\r\n\r\n        style : function(parser, node, val) {\r\n            // style attribute\r\n            // http://www.w3.org/TR/SVG11/styling.html#StyleAttribute\r\n            // example: <rect x=\"200\" y=\"100\" width=\"600\" height=\"300\"\r\n            //          style=\"fill: red; stroke: blue; stroke-width: 3\"/>\r\n\r\n            // relay to parse style attributes the same as Presentation Attributes\r\n            var segs = val.split(';')\r\n            for (var i=0; i<segs.length; i++) {\r\n                var kv = segs[i].split(':')\r\n                var k = kv[0].strip()\r\n                if (this[k]) {\r\n                    var v = kv[1].strip()\r\n                    this[k](parser, node, v)\r\n                }\r\n            }\r\n        },\r\n\r\n        ///////////////////////////\r\n        // Presentations Attributes\r\n        // http://www.w3.org/TR/SVG11/styling.html#UsingPresentationAttributes\r\n        // example: <rect x=\"200\" y=\"100\" width=\"600\" height=\"300\"\r\n        //          fill=\"red\" stroke=\"blue\" stroke-width=\"3\"/>\r\n\r\n        opacity : function(parser, node, val) {\r\n            node.opacity = parseFloat(val)\r\n        },\r\n\r\n        display : function (parser, node, val) {\r\n            node.display = val\r\n        },\r\n\r\n        visibility : function (parser, node, val) {\r\n            node.visibility = val\r\n        },\r\n\r\n        fill : function(parser, node, val) {\r\n            node.fill = this.__parseColor(val, node.color)\r\n        },\r\n\r\n        stroke : function(parser, node, val) {\r\n            node.stroke = this.__parseColor(val, node.color)\r\n        },\r\n\r\n        color : function(parser, node, val) {\r\n            if (val == 'inherit') return\r\n            node.color = this.__parseColor(val, node.color)\r\n        },\r\n\r\n        'fill-opacity' : function(parser, node, val) {\r\n            node.fillOpacity = Math.min(1,Math.max(0,parseFloat(val)))\r\n        },\r\n\r\n        'stroke-opacity' : function(parser, node, val) {\r\n            node.strokeOpacity = Math.min(1,Math.max(0,parseFloat(val)))\r\n        },\r\n\r\n        // Presentations Attributes\r\n        ///////////////////////////\r\n\r\n        __parseColor : function(val, currentColor) {\r\n\r\n            if (val.charAt(0) == '#') {\r\n                if (val.length == 4)\r\n                    val = val.replace(/([^#])/g, '$1$1')\r\n                var a = val.slice(1).match(/../g).map(\r\n                    function(i) { return parseInt(i, 16) })\r\n                return a\r\n\r\n            } else if (val.search(/^rgb\\(/) != -1) {\r\n                var a = val.slice(4,-1).split(',')\r\n                for (var i=0; i<a.length; i++) {\r\n                    var c = a[i].strip()\r\n                    if (c.charAt(c.length-1) == '%')\r\n                        a[i] = Math.round(parseFloat(c.slice(0,-1)) * 2.55)\r\n                    else\r\n                        a[i] = parseInt(c)\r\n                }\r\n                return a\r\n\r\n            } else if (val.search(/^rgba\\(/) != -1) {\r\n                var a = val.slice(5,-1).split(',')\r\n                for (var i=0; i<3; i++) {\r\n                    var c = a[i].strip()\r\n                    if (c.charAt(c.length-1) == '%')\r\n                        a[i] = Math.round(parseFloat(c.slice(0,-1)) * 2.55)\r\n                    else\r\n                        a[i] = parseInt(c)\r\n                }\r\n                var c = a[3].strip()\r\n                if (c.charAt(c.length-1) == '%')\r\n                    a[3] = Math.round(parseFloat(c.slice(0,-1)) * 0.01)\r\n                else\r\n                    a[3] = Math.max(0, Math.min(1, parseFloat(c)))\r\n                return a\r\n\r\n            } else if (val.search(/^url\\(/) != -1) {\r\n                $().uxmessage('error', 'defs are not supported at the moment')\r\n            } else if (val == 'currentColor') {\r\n                return currentColor\r\n            } else if (val == 'none') {\r\n                return 'none'\r\n            } else if (val == 'freeze') { // SMIL is evil, but so are we\r\n                return null\r\n            } else if (val == 'remove') {\r\n                return null\r\n            } else { // unknown value, maybe it's an ICC color\r\n                return val\r\n            }\r\n        }\r\n    },\r\n\r\n    // recognized svg attributes\r\n    /////////////////////////////\r\n\r\n\r\n\r\n\r\n\r\n    ///////////////////////////\r\n    // recognized svg elements\r\n\r\n    SVGTagMapping : {\r\n        svg : function(parser, tag, node) {\r\n            // has style attributes\r\n            node.fill = 'black'\r\n            node.stroke = 'none'\r\n            // // parse document dimensions\r\n            // node.width = 0\r\n            // node.height = 0\r\n            // var w = tag.getAttribute('width')\r\n            // var h = tag.getAttribute('height')\r\n            // if (!w) w = h\r\n            // else if (!h) h = w\r\n            // if (w) {\r\n            //   var wpx = parser.parseUnit(w, cn, 'x')\r\n            //   var hpx = parser.parseUnit(h, cn, 'y')\r\n            // }\r\n        },\r\n\r\n\r\n        g : function(parser, tag, node) {\r\n            // http://www.w3.org/TR/SVG11/struct.html#Groups\r\n            // has transform and style attributes\r\n        },\r\n\r\n\r\n        polygon : function(parser, tag, node) {\r\n            // http://www.w3.org/TR/SVG11/shapes.html#PolygonElement\r\n            // has transform and style attributes\r\n            var d = this.__getPolyPath(tag)\r\n            d.push('z')\r\n            parser.addPath(d, node)\r\n        },\r\n\r\n\r\n        polyline : function(parser, tag, node) {\r\n            // http://www.w3.org/TR/SVG11/shapes.html#PolylineElement\r\n            // has transform and style attributes\r\n            var d = this.__getPolyPath(tag)\r\n            parser.addPath(d, node)\r\n        },\r\n\r\n        __getPolyPath : function(tag) {\r\n            // has transform and style attributes\r\n            var subpath = []\r\n            var vertnums = tag.getAttribute('points').toString().strip().split(/[\\s,]+/).map(parseFloat)\r\n            if (vertnums.length % 2 == 0) {\r\n                var d = ['M']\r\n                d.push(vertnums[0])\r\n                d.push(vertnums[1])\r\n                for (var i=2; i<vertnums.length; i+=2) {\r\n                    d.push(vertnums[i])\r\n                    d.push(vertnums[i+1])\r\n                }\r\n                return d\r\n            } else {\r\n                $().uxmessage('error', 'in __getPolyPath: odd number of verteces')\r\n            }\r\n        },\r\n\r\n        rect : function(parser, tag, node) {\r\n            // http://www.w3.org/TR/SVG11/shapes.html#RectElement\r\n            // has transform and style attributes\r\n            var w = parser.parseUnit(tag.getAttribute('width')) || 0\r\n            var h = parser.parseUnit(tag.getAttribute('height')) || 0\r\n            var x = parser.parseUnit(tag.getAttribute('x')) || 0\r\n            var y = parser.parseUnit(tag.getAttribute('y')) || 0\r\n            var rx = parser.parseUnit(tag.getAttribute('rx'))\r\n            var ry = parser.parseUnit(tag.getAttribute('ry'))\r\n\r\n            if(rx == null || ry == null) {  // no rounded corners\r\n                var d = ['M', x, y, 'h', w, 'v', h, 'h', -w, 'z']\r\n                parser.addPath(d, node)\r\n            } else {                       // rounded corners\r\n                if ('ry' == null) { ry = rx }\r\n                if (rx < 0.0) { rx *=-1 }\r\n                if (ry < 0.0) { ry *=-1 }\r\n                d = ['M', x+rx , y ,\r\n                    'h', w-2*rx,\r\n                    'c', rx, 0.0, rx, ry, rx, ry,\r\n                    'v', h-ry,\r\n                    'c', '0.0', ry, -rx, ry, -rx, ry,\r\n                    'h', -w+2*rx,\r\n                    'c', -rx, '0.0', -rx, -ry, -rx, -ry,\r\n                    'v', -h+ry,\r\n                    'c', '0.0','0.0','0.0', -ry, rx, -ry,\r\n                    'z']\r\n                parser.addPath(d, node)\r\n            }\r\n        },\r\n\r\n\r\n        line : function(parser, tag, node) {\r\n            // http://www.w3.org/TR/SVG11/shapes.html#LineElement\r\n            // has transform and style attributes\r\n            var x1 = parser.parseUnit(tag.getAttribute('x1')) || 0\r\n            var y1 = parser.parseUnit(tag.getAttribute('y1')) || 0\r\n            var x2 = parser.parseUnit(tag.getAttribute('x2')) || 0\r\n            var y2 = parser.parseUnit(tag.getAttribute('y2')) || 0\r\n            var d = ['M', x1, y1, 'L', x2, y2]\r\n            parser.addPath(d, node)\r\n        },\r\n\r\n\r\n        circle : function(parser, tag, node) {\r\n            // http://www.w3.org/TR/SVG11/shapes.html#CircleElement\r\n            // has transform and style attributes\r\n            var r = parser.parseUnit(tag.getAttribute('r'))\r\n            var cx = parser.parseUnit(tag.getAttribute('cx')) || 0\r\n            var cy = parser.parseUnit(tag.getAttribute('cy')) || 0\r\n\r\n            if (r > 0.0) {\r\n                var d = ['M', cx-r, cy,\r\n                    'A', r, r, 0, 0, 0, cx, cy+r,\r\n                    'A', r, r, 0, 0, 0, cx+r, cy,\r\n                    'A', r, r, 0, 0, 0, cx, cy-r,\r\n                    'A', r, r, 0, 0, 0, cx-r, cy,\r\n                    'Z']\r\n                parser.addPath(d, node)\r\n            }\r\n        },\r\n\r\n\r\n        ellipse : function(parser, tag, node) {\r\n            // has transform and style attributes\r\n            var rx = parser.parseUnit(tag.getAttribute('rx'))\r\n            var ry = parser.parseUnit(tag.getAttribute('ry'))\r\n            var cx = parser.parseUnit(tag.getAttribute('cx')) || 0\r\n            var cy = parser.parseUnit(tag.getAttribute('cy')) || 0\r\n\r\n            if (rx > 0.0 && ry > 0.0) {\r\n                var d = ['M', cx-rx, cy,\r\n                    'A', rx, ry, 0, 0, 0, cx, cy+ry,\r\n                    'A', rx, ry, 0, 0, 0, cx+rx, cy,\r\n                    'A', rx, ry, 0, 0, 0, cx, cy-ry,\r\n                    'A', rx, ry, 0, 0, 0, cx-rx, cy,\r\n                    'Z']\r\n                parser.addPath(d, node)\r\n            }\r\n        },\r\n\r\n\r\n        path : function(parser, tag, node) {\r\n            // http://www.w3.org/TR/SVG11/paths.html\r\n            // has transform and style attributes\r\n            var d = tag.getAttribute('d')\r\n            parser.addPath(d, node)\r\n        },\r\n\r\n        image : function(parser, tag, node) {\r\n            // not supported\r\n            // has transform and style attributes\r\n        },\r\n\r\n        defs : function(parser, tag, node) {\r\n            // not supported\r\n            // http://www.w3.org/TR/SVG11/struct.html#Head\r\n            // has transform and style attributes\r\n        },\r\n\r\n        style : function(parser, tag, node) {\r\n            // not supported: embedded style sheets\r\n            // http://www.w3.org/TR/SVG11/styling.html#StyleElement\r\n            // instead presentation attributes and the 'style' attribute\r\n            // var style = tag.getAttribute(\"style\")\r\n            // if (style) {\r\n            //   var segs = style.split(\";\")\r\n            //   for (var i=0; i<segs.length; i++) {\r\n            //     var kv = segs[i].split(\":\")\r\n            //     var k = kv[0].strip()\r\n            //     if (this.SVGAttributeMapping[k]) {\r\n            //       var v = kv[1].strip()\r\n            //       this.SVGAttributeMapping[k].call(v, defs, st)\r\n            //     }\r\n            //   }\r\n            // }\r\n        }\r\n\r\n    },\r\n\r\n    // recognized svg elements\r\n    ///////////////////////////\r\n\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////\r\n    // handle path data\r\n    // this is where all the geometry gets converted for the boundarys output\r\n\r\n    addPath : function(d, node) {\r\n    // http://www.w3.org/TR/SVG11/paths.html#PathData\r\n\r\n        var tolerance2 = this.tolerance_squared\r\n        var totalMaxScale = this.matrixGetScale(node.xformToWorld)\r\n        if (totalMaxScale != 0) {\r\n            // adjust for possible transforms\r\n            tolerance2 /= Math.pow(totalMaxScale, 2)\r\n            // $().uxmessage('notice', \"tolerance2: \" + tolerance2.toString());\r\n        }\r\n\r\n        if ( typeof d == 'string') {\r\n            // parse path string\r\n            d = d.match(/([A-Za-z]|-?[0-9]+\\.?[0-9]*(?:e-?[0-9]*)?)/g)\r\n            for (var i=0; i<d.length; i++) {\r\n                var num = parseFloat(d[i])\r\n                if (!isNaN(num)) {\r\n                    d[i] = num\r\n                }\r\n            }\r\n        }\r\n        //$().uxmessage('notice', \"d: \" + d.toString());\r\n\r\n        function nextIsNum () {\r\n            return (d.length > 0) && (typeof(d[0]) === 'number')\r\n        }\r\n\r\n        function getNext() {\r\n            if (d.length > 0) {\r\n                return d.shift()  // pop first item\r\n            } else {\r\n                $().uxmessage('error', 'in addPath: not enough parameters')\r\n                return null\r\n            }\r\n        }\r\n\r\n        var x = 0\r\n        var y = 0\r\n        var cmdPrev = ''\r\n        var xPrevCp\r\n        var yPrevCp\r\n        var subpath = []\r\n\r\n        while (d.length > 0) {\r\n            var cmd = getNext()\r\n            switch(cmd) {\r\n            case 'M':  // moveto absolute\r\n                // start new subpath\r\n                if ( subpath.length > 0) {\r\n                    node.path.push(subpath)\r\n                    subpath = []\r\n                }\r\n                var implicitVerts = 0\r\n                while (nextIsNum()) {\r\n                    x = getNext()\r\n                    y = getNext()\r\n                    subpath.push([x, y])\r\n                    implicitVerts += 1\r\n                }\r\n                break\r\n            case 'm':  //moveto relative\r\n                // start new subpath\r\n                if ( subpath.length > 0) {\r\n                    node.path.push(subpath)\r\n                    subpath = []\r\n                }\r\n                if (cmdPrev == '') {\r\n                    // first treated absolute\r\n                    x = getNext()\r\n                    y = getNext()\r\n                    subpath.push([x, y])\r\n                }\r\n                var implicitVerts = 0\r\n                while (nextIsNum()) {\r\n                    // subsequent treated realtive\r\n                    x += getNext()\r\n                    y += getNext()\r\n                    subpath.push([x, y])\r\n                    implicitVerts += 1\r\n                }\r\n                break\r\n            case 'Z':  // closepath\r\n            case 'z':  // closepath\r\n                // loop and finalize subpath\r\n                if ( subpath.length > 0) {\r\n                    subpath.push(subpath[0])  // close\r\n                    node.path.push(subpath)\r\n                    x = subpath[subpath.length-1][0]\r\n                    y = subpath[subpath.length-1][1]\r\n                    subpath = []\r\n                }\r\n                break\r\n            case 'L':  // lineto absolute\r\n                while (nextIsNum()) {\r\n                    x = getNext()\r\n                    y = getNext()\r\n                    subpath.push([x, y])\r\n                }\r\n                break\r\n            case 'l':  // lineto relative\r\n                while (nextIsNum()) {\r\n                    x += getNext()\r\n                    y += getNext()\r\n                    subpath.push([x, y])\r\n                }\r\n                break\r\n            case 'H':  // lineto horizontal absolute\r\n                while (nextIsNum()) {\r\n                    x = getNext()\r\n                    subpath.push([x, y])\r\n                }\r\n                break\r\n            case 'h':  // lineto horizontal relative\r\n                while (nextIsNum()) {\r\n                    x += getNext()\r\n                    subpath.push([x, y])\r\n                }\r\n                break\r\n            case 'V':  // lineto vertical absolute\r\n                while (nextIsNum()) {\r\n                    y = getNext()\r\n                    subpath.push([x, y])\r\n                }\r\n                break\r\n            case 'v':  // lineto vertical realtive\r\n                while (nextIsNum()) {\r\n                    y += getNext()\r\n                    subpath.push([x, y])\r\n                }\r\n                break\r\n            case 'C':  // curveto cubic absolute\r\n                while (nextIsNum()) {\r\n                    var x2 = getNext()\r\n                    var y2 = getNext()\r\n                    var x3 = getNext()\r\n                    var y3 = getNext()\r\n                    var x4 = getNext()\r\n                    var y4 = getNext()\r\n                    subpath.push([x,y])\r\n                    this.addCubicBezier(subpath, x, y, x2, y2, x3, y3, x4, y4, 0, tolerance2)\r\n                    subpath.push([x4,y4])\r\n                    x = x4\r\n                    y = y4\r\n                    xPrevCp = x3\r\n                    yPrevCp = y3\r\n                }\r\n                break\r\n            case 'c':  // curveto cubic relative\r\n                while (nextIsNum()) {\r\n                    var x2 = x + getNext()\r\n                    var y2 = y + getNext()\r\n                    var x3 = x + getNext()\r\n                    var y3 = y + getNext()\r\n                    var x4 = x + getNext()\r\n                    var y4 = y + getNext()\r\n                    subpath.push([x,y])\r\n                    this.addCubicBezier(subpath, x, y, x2, y2, x3, y3, x4, y4, 0, tolerance2)\r\n                    subpath.push([x4,y4])\r\n                    x = x4\r\n                    y = y4\r\n                    xPrevCp = x3\r\n                    yPrevCp = y3\r\n                }\r\n                break\r\n            case 'S':  // curveto cubic absolute shorthand\r\n                while (nextIsNum()) {\r\n                    var x2\r\n                    var y2\r\n                    if (cmdPrev.match(/[CcSs]/)) {\r\n                        x2 = x-(xPrevCp-x)\r\n                        y2 = y-(yPrevCp-y)\r\n                    } else {\r\n                        x2 = x\r\n                        y2 = y\r\n                    }\r\n                    var x3 = getNext()\r\n                    var y3 = getNext()\r\n                    var x4 = getNext()\r\n                    var y4 = getNext()\r\n                    subpath.push([x,y])\r\n                    this.addCubicBezier(subpath, x, y, x2, y2, x3, y3, x4, y4, 0, tolerance2)\r\n                    subpath.push([x4,y4])\r\n                    x = x4\r\n                    y = y4\r\n                    xPrevCp = x3\r\n                    yPrevCp = y3\r\n                }\r\n                break\r\n            case 's':  // curveto cubic relative shorthand\r\n                while (nextIsNum()) {\r\n                    var x2\r\n                    var y2\r\n                    if (cmdPrev.match(/[CcSs]/)) {\r\n                        x2 = x-(xPrevCp-x)\r\n                        y2 = y-(yPrevCp-y)\r\n                    } else {\r\n                        x2 = x\r\n                        y2 = y\r\n                    }\r\n                    var x3 = x + getNext()\r\n                    var y3 = y + getNext()\r\n                    var x4 = x + getNext()\r\n                    var y4 = y + getNext()\r\n                    subpath.push([x,y])\r\n                    this.addCubicBezier(subpath, x, y, x2, y2, x3, y3, x4, y4, 0, tolerance2)\r\n                    subpath.push([x4,y4])\r\n                    x = x4\r\n                    y = y4\r\n                    xPrevCp = x3\r\n                    yPrevCp = y3\r\n                }\r\n                break\r\n            case 'Q':  // curveto quadratic absolute\r\n                while (nextIsNum()) {\r\n                    var x2 = getNext()\r\n                    var y2 = getNext()\r\n                    var x3 = getNext()\r\n                    var y3 = getNext()\r\n                    subpath.push([x,y])\r\n                    this.addQuadraticBezier(subpath, x, y, x2, y2, x3, y3, 0, tolerance2)\r\n                    subpath.push([x3,y3])\r\n                    x = x3\r\n                    y = y3\r\n                }\r\n                break\r\n            case 'q':  // curveto quadratic relative\r\n                while (nextIsNum()) {\r\n                    var x2 = x + getNext()\r\n                    var y2 = y + getNext()\r\n                    var x3 = x + getNext()\r\n                    var y3 = y + getNext()\r\n                    subpath.push([x,y])\r\n                    this.addQuadraticBezier(subpath, x, y, x2, y2, x3, y3, 0, tolerance2)\r\n                    subpath.push([x3,y3])\r\n                    x = x3\r\n                    y = y3\r\n                }\r\n                break\r\n            case 'T':  // curveto quadratic absolute shorthand\r\n                while (nextIsNum()) {\r\n                    var x2\r\n                    var y2\r\n                    if (cmdPrev.match(/[QqTt]/)) {\r\n                        x2 = x-(xPrevCp-x)\r\n                        y2 = y-(yPrevCp-y)\r\n                    } else {\r\n                        x2 = x\r\n                        y2 = y\r\n                    }\r\n                    var x3 = getNext()\r\n                    var y3 = getNext()\r\n                    subpath.push([x,y])\r\n                    this.addQuadraticBezier(subpath, x, y, x2, y2, x3, y3, 0, tolerance2)\r\n                    subpath.push([x3,y3])\r\n                    x = x3\r\n                    y = y3\r\n                    xPrevCp = x2\r\n                    yPrevCp = y2\r\n                }\r\n                break\r\n            case 't':  // curveto quadratic relative shorthand\r\n                while (nextIsNum()) {\r\n                    var x2\r\n                    var y2\r\n                    if (cmdPrev.match(/[QqTt]/)) {\r\n                        x2 = x-(xPrevCp-x)\r\n                        y2 = y-(yPrevCp-y)\r\n                    } else {\r\n                        x2 = x\r\n                        y2 = y\r\n                    }\r\n                    var x3 = x + getNext()\r\n                    var y3 = y + getNext()\r\n                    subpath.push([x,y])\r\n                    this.addQuadraticBezier(subpath, x, y, x2, y2, x3, y3, 0, tolerance2)\r\n                    subpath.push([x3,y3])\r\n                    x = x3\r\n                    y = y3\r\n                    xPrevCp = x2\r\n                    yPrevCp = y2\r\n                }\r\n                break\r\n            case 'A':  // eliptical arc absolute\r\n                while (nextIsNum()) {\r\n                    var rx = getNext()\r\n                    var ry = getNext()\r\n                    var xrot = getNext()\r\n                    var large = getNext()\r\n                    var sweep = getNext()\r\n                    var x2 = getNext()\r\n                    var y2 = getNext()\r\n                    this.addArc(subpath, x, y, rx, ry, xrot, large, sweep, x2, y2, tolerance2)\r\n                    x = x2\r\n                    y = y2\r\n                }\r\n                break\r\n            case 'a':  // elliptical arc relative\r\n                while (nextIsNum()) {\r\n                    var rx = getNext()\r\n                    var ry = getNext()\r\n                    var xrot = getNext()\r\n                    var large = getNext()\r\n                    var sweep = getNext()\r\n                    var x2 = x + getNext()\r\n                    var y2 = y + getNext()\r\n                    this.addArc(subpath, x, y, rx, ry, xrot, large, sweep, x2, y2, tolerance2)\r\n                    x = x2\r\n                    y = y2\r\n                }\r\n                break\r\n            }\r\n            cmdPrev = cmd\r\n        }\r\n        // finalize subpath\r\n        if ( subpath.length > 0) {\r\n            node.path.push(subpath)\r\n            subpath = []\r\n        }\r\n    },\r\n\r\n\r\n    addCubicBezier : function(subpath, x1, y1, x2, y2, x3, y3, x4, y4, level, tolerance2) {\r\n    // for details see:\r\n    // http://www.antigrain.com/research/adaptive_bezier/index.html\r\n    // based on DeCasteljau Algorithm\r\n    // The reason we use a subdivision algo over an incremental one\r\n    // is we want to have control over the deviation to the curve.\r\n    // This mean we subdivide more and have more curve points in\r\n    // curvy areas and less in flatter areas of the curve.\r\n\r\n        if (level > 18) {\r\n            // protect from deep recursion cases\r\n            // max 2**18 = 262144 segments\r\n            return\r\n        }\r\n\r\n        // Calculate all the mid-points of the line segments\r\n        var x12   = (x1 + x2) / 2.0\r\n        var y12   = (y1 + y2) / 2.0\r\n        var x23   = (x2 + x3) / 2.0\r\n        var y23   = (y2 + y3) / 2.0\r\n        var x34   = (x3 + x4) / 2.0\r\n        var y34   = (y3 + y4) / 2.0\r\n        var x123  = (x12 + x23) / 2.0\r\n        var y123  = (y12 + y23) / 2.0\r\n        var x234  = (x23 + x34) / 2.0\r\n        var y234  = (y23 + y34) / 2.0\r\n        var x1234 = (x123 + x234) / 2.0\r\n        var y1234 = (y123 + y234) / 2.0\r\n\r\n        // Try to approximate the full cubic curve by a single straight line\r\n        var dx = x4-x1\r\n        var dy = y4-y1\r\n\r\n        var d2 = Math.abs(((x2 - x4) * dy - (y2 - y4) * dx))\r\n        var d3 = Math.abs(((x3 - x4) * dy - (y3 - y4) * dx))\r\n\r\n        if ( Math.pow(d2+d3, 2) < 5.0 * tolerance2 * (dx*dx + dy*dy) ) {\r\n            // added factor of 5.0 to match circle resolution\r\n            subpath.push([x1234, y1234])\r\n            return\r\n        }\r\n\r\n        // Continue subdivision\r\n        this.addCubicBezier(subpath, x1, y1, x12, y12, x123, y123, x1234, y1234, level+1, tolerance2)\r\n        this.addCubicBezier(subpath, x1234, y1234, x234, y234, x34, y34, x4, y4, level+1, tolerance2)\r\n    },\r\n\r\n\r\n    addQuadraticBezier : function(subpath, x1, y1, x2, y2, x3, y3, level, tolerance2) {\r\n        if (level > 18) {\r\n            // protect from deep recursion cases\r\n            // max 2**18 = 262144 segments\r\n            return\r\n        }\r\n\r\n        // Calculate all the mid-points of the line segments\r\n        var x12   = (x1 + x2) / 2.0\r\n        var y12   = (y1 + y2) / 2.0\r\n        var x23   = (x2 + x3) / 2.0\r\n        var y23   = (y2 + y3) / 2.0\r\n        var x123  = (x12 + x23) / 2.0\r\n        var y123  = (y12 + y23) / 2.0\r\n\r\n        var dx = x3-x1\r\n        var dy = y3-y1\r\n        var d = Math.abs(((x2 - x3) * dy - (y2 - y3) * dx))\r\n\r\n        if ( d*d <= 5.0 * tolerance2 * (dx*dx + dy*dy) ) {\r\n            // added factor of 5.0 to match circle resolution\r\n            subpath.push([x123, y123])\r\n            return\r\n        }\r\n\r\n        // Continue subdivision\r\n        this.addQuadraticBezier(subpath, x1, y1, x12, y12, x123, y123, level + 1, tolerance2)\r\n        this.addQuadraticBezier(subpath, x123, y123, x23, y23, x3, y3, level + 1, tolerance2)\r\n    },\r\n\r\n\r\n    addArc : function(subpath, x1, y1, rx, ry, phi, large_arc, sweep, x2, y2, tolerance2) {\r\n    // Implemented based on the SVG implementation notes\r\n    // plus some recursive sugar for incrementally refining the\r\n    // arc resolution until the requested tolerance is met.\r\n    // http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\r\n        var cp = Math.cos(phi)\r\n        var sp = Math.sin(phi)\r\n        var dx = 0.5 * (x1 - x2)\r\n        var dy = 0.5 * (y1 - y2)\r\n        var x_ = cp * dx + sp * dy\r\n        var y_ = -sp * dx + cp * dy\r\n        var r2 = (Math.pow(rx*ry,2)-Math.pow(rx*y_,2)-Math.pow(ry*x_,2)) /\r\n             (Math.pow(rx*y_,2)+Math.pow(ry*x_,2))\r\n        if (r2 < 0) { r2 = 0 }\r\n        var r = Math.sqrt(r2)\r\n        if (large_arc == sweep) { r = -r }\r\n        var cx_ = r*rx*y_ / ry\r\n        var cy_ = -r*ry*x_ / rx\r\n        var cx = cp*cx_ - sp*cy_ + 0.5*(x1 + x2)\r\n        var cy = sp*cx_ + cp*cy_ + 0.5*(y1 + y2)\r\n\r\n        function angle(u, v) {\r\n            var a = Math.acos((u[0]*v[0] + u[1]*v[1]) /\r\n              Math.sqrt((Math.pow(u[0],2) + Math.pow(u[1],2)) *\r\n              (Math.pow(v[0],2) + Math.pow(v[1],2))))\r\n            var sgn = -1\r\n            if (u[0]*v[1] > u[1]*v[0]) { sgn = 1 }\r\n            return sgn * a\r\n        }\r\n\r\n        var psi = angle([1,0], [(x_-cx_)/rx, (y_-cy_)/ry])\r\n        var delta = angle([(x_-cx_)/rx, (y_-cy_)/ry], [(-x_-cx_)/rx, (-y_-cy_)/ry])\r\n        if (sweep && delta < 0) { delta += Math.PI * 2 }\r\n        if (!sweep && delta > 0) { delta -= Math.PI * 2 }\r\n\r\n        function getVertex(pct) {\r\n            var theta = psi + delta * pct\r\n            var ct = Math.cos(theta)\r\n            var st = Math.sin(theta)\r\n            return [cp*rx*ct-sp*ry*st+cx, sp*rx*ct+cp*ry*st+cy]\r\n        }\r\n\r\n        // let the recursive fun begin\r\n        //\r\n        function recursiveArc(parser, t1, t2, c1, c5, level, tolerance2) {\r\n            if (level > 18) {\r\n                // protect from deep recursion cases\r\n                // max 2**18 = 262144 segments\r\n                return\r\n            }\r\n            var tRange = t2-t1\r\n            var tHalf = t1 + 0.5*tRange\r\n            var c2 = getVertex(t1 + 0.25*tRange)\r\n            var c3 = getVertex(tHalf)\r\n            var c4 = getVertex(t1 + 0.75*tRange)\r\n            if (parser.vertexDistanceSquared(c2, parser.vertexMiddle(c1,c3)) > tolerance2) {\r\n                recursiveArc(parser, t1, tHalf, c1, c3, level+1, tolerance2)\r\n            }\r\n            subpath.push(c3)\r\n            if (parser.vertexDistanceSquared(c4, parser.vertexMiddle(c3,c5)) > tolerance2) {\r\n                recursiveArc(parser, tHalf, t2, c3, c5, level+1, tolerance2)\r\n            }\r\n        }\r\n\r\n        var t1Init = 0.0\r\n        var t2Init = 1.0\r\n        var c1Init = getVertex(t1Init)\r\n        var c5Init = getVertex(t2Init)\r\n        subpath.push(c1Init)\r\n        recursiveArc(this, t1Init, t2Init, c1Init, c5Init, 0, tolerance2)\r\n        subpath.push(c5Init)\r\n    },\r\n\r\n\r\n    // handle path data\r\n    //////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n\r\n\r\n    parseUnit : function(val) {\r\n        if (val == null) {\r\n            return null\r\n        } else {\r\n            // assume 90dpi\r\n            var multiplier = 1.0\r\n            if (val.search(/cm$/i) != -1) {\r\n                multiplier = 35.433070869\r\n            } else if (val.search(/mm$/i) != -1) {\r\n                multiplier = 3.5433070869\r\n            } else if (val.search(/pt$/i) != -1) {\r\n                multiplier = 1.25\r\n            } else if (val.search(/pc$/i) != -1) {\r\n                multiplier = 15.0\r\n            } else if (val.search(/in$/i) != -1) {\r\n                multiplier = 90.0\r\n            }\r\n            return multiplier * parseFloat(val.strip())\r\n        }\r\n    },\r\n\r\n\r\n    matrixMult : function(mA, mB) {\r\n        return [ mA[0]*mB[0] + mA[2]*mB[1],\r\n            mA[1]*mB[0] + mA[3]*mB[1],\r\n            mA[0]*mB[2] + mA[2]*mB[3],\r\n            mA[1]*mB[2] + mA[3]*mB[3],\r\n            mA[0]*mB[4] + mA[2]*mB[5] + mA[4],\r\n            mA[1]*mB[4] + mA[3]*mB[5] + mA[5] ]\r\n    },\r\n\r\n\r\n    matrixApply : function(mat, vec) {\r\n        return [ mat[0]*vec[0] + mat[2]*vec[1] + mat[4],\r\n            mat[1]*vec[0] + mat[3]*vec[1] + mat[5] ] \r\n    },\r\n\r\n    matrixGetScale : function(mat) {\r\n    // extract absolute scale from matrix\r\n        var sx = Math.sqrt(mat[0]*mat[0] + mat[1]*mat[1])\r\n        var sy = Math.sqrt(mat[2]*mat[2] + mat[3]*mat[3])\r\n        // return dominant axis\r\n        if (sx > sy) {\r\n            return sx\r\n        } else {\r\n            return sy\r\n        }\r\n    },\r\n\r\n\r\n    vertexDistanceSquared : function(v1, v2) {\r\n        return Math.pow(v2[0]-v1[0], 2) + Math.pow(v2[1]-v1[1], 2)\r\n    },\r\n\r\n    vertexMiddle : function(v1, v2) {\r\n        return [ (v2[0]+v1[0])/2.0, (v2[1]+v1[1])/2.0 ]\r\n    }\r\n\r\n}\r\n\r\n\r\nif (typeof(String.prototype.strip) === 'undefined') {\r\n    String.prototype.strip = function() {\r\n        return String(this).replace(/^\\s+|\\s+$/g, '')\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/lib/SVGReader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "src/js/lib/vec2.js",
    "content": "\r\n// ### Common / Math / Vec2\r\n\r\n// A 2D column vector\r\nexport default function Vec2(x, y) {\r\n    if (x) {\r\n        this.x = x\r\n    }\r\n\r\n    if (y) {\r\n        this.y = y\r\n    }\r\n}\r\n\r\nVec2.prototype = {\r\n    x : 0,\r\n    y : 0,\r\n\r\n    // set x and y\r\n    // TODO: mark as dirty for other calculations\r\n    set : function(x, y) {\r\n        this.x = x\r\n        this.y = y\r\n        return this\r\n    },\r\n\r\n    // reset x and y to zero\r\n    // TODO: mark as dirty for other calcs\r\n    zero : function() {\r\n        this.x = 0\r\n        this.y = 0\r\n        return this\r\n    },\r\n\r\n    // negate the values of this vector and return a new Vec2\r\n    negate : function(returnNew) {\r\n        if (returnNew) {\r\n            return new Vec2(-this.x, -this.y)\r\n        } else {\r\n            this.x = -this.x\r\n            this.y = -this.y\r\n            return this\r\n        }\r\n    },\r\n\r\n    // Add the incoming `vec2` vector to this vector\r\n    // TODO: mark dirty for other calcs\r\n    add : function(vec2, returnNew) {\r\n        if (!returnNew) {\r\n            this.x += vec2.x\r\n            this.y += vec2.y\r\n            return this\r\n        } else {\r\n            // Return a new vector if `returnNew` is truthy\r\n            return new Vec2(\r\n                this.x + vec2.x,\r\n                this.y + vec2.y\r\n            )\r\n        }\r\n    },\r\n\r\n    // Subtract the incoming `vec2` from this vector\r\n    // TODO: mark dirty for other calcs\r\n    subtract : function(vec2, returnNew) {\r\n        if (!returnNew) {\r\n            this.x -= vec2.x\r\n            this.y -= vec2.y\r\n            return this\r\n        } else {\r\n            // Return a new vector if `returnNew` is truthy\r\n            return new Vec2(\r\n                this.x - vec2.x,\r\n                this.y - vec2.y\r\n            )\r\n        }\r\n    },\r\n\r\n    // Multiply this vector by the incoming `vec2`\r\n    // TODO: mark dirty for other calcs\r\n    multiply : function(vec2, returnNew) {\r\n        var x,y\r\n        if (vec2.x !== undef) {\r\n            x = vec2.x\r\n            y = vec2.y\r\n\r\n            // Handle incoming scalars\r\n        } else {\r\n            x = y = vec2\r\n        }\r\n\r\n        if (!returnNew) {\r\n            this.x *= x\r\n            this.y *= y\r\n            return this\r\n        } else {\r\n            return new Vec2(\r\n                this.x * x,\r\n                this.y * y\r\n            )\r\n        }\r\n    },\r\n\r\n    // Rotate this vector. Accepts a `Rotation` or angle in radians.\r\n    //\r\n    // Passing a truthy `inverse` will cause the rotation to\r\n    // be reversed.\r\n    //\r\n    // If `returnNew` is truthy, a new\r\n    // `Vec2` will be created with the values resulting from\r\n    // the rotation. Otherwise the rotation will be applied\r\n    // to this vector directly, and this vector will be returned.\r\n    rotate : function(r, inverse, returnNew) {\r\n        var\r\n            x = this.x,\r\n            y = this.y,\r\n            rx, cos, sin, ry\r\n\r\n        inverse = (inverse) ? -1 : 1\r\n\r\n        if (r.s !== undef) {\r\n            sin = r.s\r\n            cos = r.c\r\n        } else {\r\n            sin = Math.sin(r)\r\n            cos = Math.cos(r)\r\n        }\r\n\r\n        var\r\n            x = this.x,\r\n            y = this.y,\r\n            rx = cos * x - (inverse * sin) * y,\r\n            ry = (inverse * sin) * x + cos * y\r\n\r\n        if (returnNew) {\r\n            return new Vec2(rx, ry)\r\n        } else {\r\n            this.set(rx, ry)\r\n            return this\r\n        }\r\n    },\r\n\r\n    // Calculate the length of this vector (the norm)\r\n    // TODO: used cached value if available\r\n    length : function() {\r\n        var x = this.x, y = this.y\r\n        return Math.sqrt(x * x + y * y)\r\n    },\r\n\r\n    // Get the length squared. For performance, use this instead of `Vec2#length` (if possible).\r\n    // TODO: use cached value if available\r\n    lengthSquared : function() {\r\n        var x = this.x, y = this.y\r\n        return x * x + y * y\r\n    },\r\n\r\n    // Return the distance betwen this `Vec2` and the incoming vec2 vector\r\n    // and return a scalar\r\n    distance : function(vec2) {\r\n    // TODO: prime candidate for optimizations\r\n        return this.subtract(vec2, true).length()\r\n    },\r\n\r\n    distanceSquared : function(vec2) {\r\n        var c = this.subtract(vec2, true)\r\n        return dot22(c, c)\r\n    },\r\n\r\n    // Convert this vector into a unit vector.\r\n    // Returns the length.\r\n    normalize : function() {\r\n        var length = this.length()\r\n\r\n        // Don't bother normalizing a vector with a length ~0\r\n        if (length < Number.MIN_VALUE) {\r\n            return 0\r\n        }\r\n\r\n        // Collect a ratio to shrink the x and y coords\r\n        var invertedLength = 1/length\r\n\r\n        // Convert the coords to be greater than zero\r\n        // but smaller than or equal to 1.0\r\n        this.x *= invertedLength\r\n        this.y *= invertedLength\r\n\r\n        return length\r\n    },\r\n\r\n    // Determine if another `Vec2`'s components match this ones\r\n    equal : function(v, w) {\r\n        if (w === undef) {\r\n            return (\r\n                this.x === v.x &&\r\n        this.y == v.y\r\n            )\r\n        } else {\r\n            return (\r\n                this.x === v &&\r\n        this.y === w\r\n            )\r\n        }\r\n    },\r\n\r\n    // Return a new `Vec2` that contains the absolute value of\r\n    // each of this vector's parts\r\n    abs : function() {\r\n        return new Vec2(\r\n            Math.abs(this.x),\r\n            Math.abs(this.y)\r\n        )\r\n    },\r\n\r\n    // Return a new `Vec2` consisting of the smallest values\r\n    // from this vector and the incoming\r\n    //\r\n    // When returnNew is truthy, a new `Vec2` will be returned\r\n    // otherwise the minimum values in either this or `v` will\r\n    // be applied to this vector.\r\n    min : function(v, returnNew) {\r\n        var\r\n            tx = this.x,\r\n            ty = this.y,\r\n            vx = v.x,\r\n            vy = v.y,\r\n            x = tx < vx ? tx : vx,\r\n            y = ty < vy ? ty : vy\r\n\r\n        if (returnNew) {\r\n            return new Vec2(x, y)\r\n        } else {\r\n            this.x = x\r\n            this.y = y\r\n            return this\r\n        }\r\n    },\r\n\r\n    // Return a new `Vec2` consisting of the largest values\r\n    // from this vector and the incoming\r\n    //\r\n    // When returnNew is truthy, a new `Vec2` will be returned\r\n    // otherwise the minimum values in either this or `v` will\r\n    // be applied to this vector.\r\n    max : function(v, returnNew) {\r\n        var\r\n            tx = this.x,\r\n            ty = this.y,\r\n            vx = v.x,\r\n            vy = v.y,\r\n            x = tx > vx ? tx : vx,\r\n            y = ty > vy ? ty : vy\r\n\r\n        if (returnNew) {\r\n            return new Vec2(x, y)\r\n        } else {\r\n            this.x = x\r\n            this.y = y\r\n            return this\r\n        }\r\n    },\r\n\r\n    // Clamp values into a range.\r\n    // If this vector's values are lower than the `low`'s\r\n    // values, then raise them.  If they are higher than\r\n    // `high`'s then lower them.\r\n    //\r\n    // Passing returnNew as true will cause a new Vec2 to be\r\n    // returned.  Otherwise, this vector's values will be clamped\r\n    clamp : function(low, high, returnNew) {\r\n        var ret = this.min(high, true).max(low)\r\n        if (returnNew) {\r\n            return ret\r\n        } else {\r\n            this.x = ret.x\r\n            this.y = ret.y\r\n            return this\r\n        }\r\n    },\r\n\r\n    // Ensure this vector contains finite values\r\n    isValid : function() {\r\n        return isFinite(this.x) && isFinite(this.y)\r\n    },\r\n\r\n    // Get the skew vector such that dot(skew_vec, other) == cross(vec, other)\r\n    skew : function() {\r\n    // Returns a new vector.\r\n        return new Vec2(-this.y, this.x)\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/lib/vec2.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "Vec2",
    "memberof": "src/js/lib/vec2.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/lib/vec2.js~Vec2",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/lib/vec2.js",
    "importStyle": "Vec2",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 119,
    "kind": "file",
    "name": "src/js/menu.js",
    "content": "import GlobalVariables from './globalvariables'\r\n\r\nclass Menu {\r\n    constructor(){\r\n        this.menu = document.querySelector('.menu')\r\n        this.menu.classList.add('off')\r\n        this.menuList = document.getElementById('menuList')\r\n    \r\n        //Add the search bar to the list item\r\n    \r\n        for(var key in GlobalVariables.availableTypes) {\r\n            var newElement = document.createElement('LI')\r\n            var instance = GlobalVariables.availableTypes[key]\r\n            var text = document.createTextNode(instance.atomType)\r\n            newElement.setAttribute('class', 'menu-item')\r\n            newElement.setAttribute('id', instance.atomType)\r\n            newElement.appendChild(text) \r\n            this.menuList.appendChild(newElement) \r\n            \r\n            //Add function to call when atom is selected\r\n            document.getElementById(instance.atomType).addEventListener('click', (e) => {\r\n                this.placeNewNode(e)\r\n            })\r\n            \r\n        }\r\n        \r\n        //Add functions to call when tabs are clicked\r\n        document.getElementById('localTab').addEventListener('click', (e) => {\r\n            this.openTab(e, 'menuList')\r\n        })\r\n        document.getElementById('githubTab').addEventListener('click', (e) => {\r\n            this.openTab(e, 'githubList')\r\n        })\r\n        //Add function call when background is right clicked\r\n        document.getElementById('flow-canvas').addEventListener('contextmenu', (e) => {\r\n            this.showmenu(e)\r\n        })\r\n        //Add function call to search when typing\r\n        document.getElementById('menuInput').addEventListener('keyup', (e) => {\r\n            this.searchMenu(e)\r\n        })\r\n    }\r\n    \r\n    placeNewNode(ev){\r\n        let clr = ev.target.id\r\n        this.hidemenu(ev)\r\n        const invertScale = 1 / GlobalVariables.scale1\r\n        GlobalVariables.currentMolecule.placeAtom({\r\n            x: this.menu.x * invertScale, \r\n            y: this.menu.y * invertScale, \r\n            parent: GlobalVariables.currentMolecule,\r\n            atomType: clr,\r\n            uniqueID: GlobalVariables.generateUniqueID()\r\n            \r\n        }, null, GlobalVariables.availableTypes, true) //null indicates that there is nothing to load from the molecule list for this one, true indicates the atom should spawn unlocked\r\n    }\r\n\r\n    placeGitHubMolecule(ev){\r\n        \r\n        this.hidemenu()\r\n        let clr = ev.target.id\r\n        const invertScale = 1 / GlobalVariables.scale1\r\n        \r\n        GlobalVariables.currentMolecule.placeAtom({\r\n            x: this.menu.x * invertScale, \r\n            y: this.menu.y * invertScale, \r\n            parent: GlobalVariables.currentMolecule,\r\n            atomType: 'GitHubMolecule',\r\n            projectID: clr,\r\n            uniqueID: GlobalVariables.generateUniqueID()\r\n        }, null, GlobalVariables.availableTypes) //null indicates that there is nothing to load from the molecule list for this one\r\n    }\r\n\r\n    showmenu(ev){\r\n        //Open the default tab\r\n        document.getElementById('localTab').click()\r\n        \r\n        //stop the real right click menu\r\n        ev.preventDefault() \r\n        \r\n        //make sure all elements are unhidden\r\n        var ul = document.getElementById('menuList')\r\n        var li = ul.getElementsByTagName('li')\r\n        for (var i = 0; i < li.length; i++) {\r\n            li[i].style.display = 'none' //set each item to not display\r\n        }\r\n        \r\n        //show the menu\r\n        this.menu.style.top = `${ev.clientY - 20}px`\r\n        this.menu.style.left = `${ev.clientX - 20}px`\r\n        this.menu.x = ev.clientX\r\n        this.menu.y = ev.clientY\r\n        this.menu.classList.remove('off')\r\n        \r\n        document.getElementById('menuInput').focus()\r\n    }\r\n\r\n    hidemenu(){\r\n        this.menu.classList.add('off')\r\n        this.menu.style.top = '-200%'\r\n        this.menu.style.left = '-200%'\r\n    }\r\n\r\n    searchMenu(evt) {\r\n      \r\n        if(document.getElementsByClassName('tablinks active')[0].id == 'localTab'){\r\n            //We are searching the local tab\r\n            // Declare variables\r\n            var input, filter, ul, li, a, i, txtValue\r\n            input = document.getElementById('menuInput')\r\n            filter = input.value.toUpperCase()\r\n            ul = document.getElementById('menuList')\r\n            li = ul.getElementsByTagName('li')\r\n\r\n            // Loop through all list items, and hide those who don't match the search query\r\n            for (i = 0; i < li.length; i++) {\r\n                a = li[i] //this is the link part of the list item\r\n                txtValue = a.textContent || a.innerText\r\n                if (txtValue.toUpperCase().indexOf(filter) > -1) { //if the entered string matches\r\n                    li[i].style.display = ''\r\n                } else {\r\n                    li[i].style.display = 'none'\r\n                }\r\n                \r\n                //If enter was just pressed \"click\" the first element that is being displayed\r\n                if(evt.code == 'Enter' && li[i].style.display != 'none'){\r\n                    li[i].click()\r\n                    return\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            //We are searching on github\r\n            if(evt.code == 'Enter'){\r\n                input = document.getElementById('menuInput').value\r\n                \r\n                var githubList = document.getElementById('githubList')\r\n                \r\n                var oldResults = githubList.getElementsByClassName('menu-item')\r\n                for (i = 0; i < oldResults.length; i++) {\r\n                    githubList.removeChild(oldResults[i])\r\n                }\r\n                \r\n                GlobalVariables.gitHub.searchGithub(input).then(result => {\r\n                    result.data.items.forEach(item => {\r\n                        var newElement = document.createElement('LI')\r\n                        var text = document.createTextNode(item.name)\r\n                        newElement.setAttribute('class', 'menu-item')\r\n                        newElement.setAttribute('id', item.id)\r\n                        newElement.appendChild(text) \r\n                        githubList.appendChild(newElement) \r\n                        \r\n                        document.getElementById(item.id).addEventListener('click', (e) => {\r\n                            this.placeGitHubMolecule(e)\r\n                        })\r\n                    })\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    openTab(evt, tabName) {\r\n        // Declare all variables\r\n        var i, tabcontent, tablinks\r\n\r\n        // Get all elements with class=\"tabcontent\" and hide them\r\n        tabcontent = document.getElementsByClassName('tabcontent')\r\n        for (i = 0; i < tabcontent.length; i++) {\r\n            tabcontent[i].style.display = 'none'\r\n        }\r\n\r\n        // Get all elements with class=\"tablinks\" and remove the class \"active\"\r\n        tablinks = document.getElementsByClassName('tablinks')\r\n        for (i = 0; i < tablinks.length; i++) {\r\n            tablinks[i].className = tablinks[i].className.replace(' active', '')\r\n        }\r\n\r\n        // Show the current tab, and add an \"active\" class to the button that opened the tab\r\n        document.getElementById(tabName).style.display = 'block'\r\n        evt.currentTarget.className += ' active'\r\n      \r\n        //Click on the search bar so that when you start typing it shows updateCommands\r\n        document.getElementById('menuInput').focus()\r\n    }\r\n}\r\n\r\nexport default (new Menu)",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/menu.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 120,
    "kind": "class",
    "name": "Menu",
    "memberof": "src/js/menu.js",
    "static": true,
    "longname": "src/js/menu.js~Menu",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "pseudoExport": true,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 121,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/menu.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/menu.js~Menu#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "menu",
    "memberof": "src/js/menu.js~Menu",
    "static": false,
    "longname": "src/js/menu.js~Menu#menu",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "menuList",
    "memberof": "src/js/menu.js~Menu",
    "static": false,
    "longname": "src/js/menu.js~Menu#menuList",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "placeNewNode",
    "memberof": "src/js/menu.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/menu.js~Menu#placeNewNode",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "ev",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "placeGitHubMolecule",
    "memberof": "src/js/menu.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/menu.js~Menu#placeGitHubMolecule",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "ev",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "showmenu",
    "memberof": "src/js/menu.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/menu.js~Menu#showmenu",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [
      {
        "name": "ev",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "hidemenu",
    "memberof": "src/js/menu.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/menu.js~Menu#hidemenu",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "searchMenu",
    "memberof": "src/js/menu.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/menu.js~Menu#searchMenu",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [
      {
        "name": "evt",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "openTab",
    "memberof": "src/js/menu.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/menu.js~Menu#openTab",
    "access": "public",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "params": [
      {
        "name": "evt",
        "types": [
          "*"
        ]
      },
      {
        "name": "tabName",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "name": "menu",
    "memberof": "src/js/menu.js",
    "static": true,
    "longname": "src/js/menu.js~menu",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/menu.js",
    "importStyle": "menu",
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "type": {
      "types": [
        "src/js/menu.js~Menu"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "file",
    "name": "src/js/molecules/assembly.js",
    "content": "import Atom from '../prototypes/atom.js'\r\nimport { addOrDeletePorts } from '../alwaysOneFreeInput.js'\r\n\r\nexport default class Assembly extends Atom{\r\n    \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        this.name = 'Assembly'\r\n        this.atomType = 'Assembly'\r\n        this.ioValues = []\r\n        \r\n        this.setValues(values)\r\n        \r\n        if (typeof this.ioValues !== 'undefined'){\r\n            this.ioValues.forEach(ioValue => { //for each saved value\r\n                this.addIO('input', ioValue.name, this, 'geometry', '')\r\n            })\r\n        }\r\n        \r\n        this.updateValue()\r\n    }\r\n    \r\n    updateValue(){\r\n        try{\r\n            var inputs = []\r\n            this.inputs.forEach( io => {\r\n                if(io.connectors.length > 0 && io.type == 'input'){\r\n                    inputs.push(io.getValue())\r\n                }\r\n            })\r\n            const values = inputs.map(x => {\r\n                return x.toLazyGeometry().toGeometry()\r\n            })\r\n            \r\n            this.basicThreadValueProcessing(values, \"assemble\")\r\n        }catch(err){this.setAlert(err)}\r\n        \r\n        //Delete or add ports as needed\r\n        addOrDeletePorts(this)\r\n    }\r\n    \r\n    serialize(savedObject){\r\n        var thisAsObject = super.serialize(savedObject)\r\n        \r\n        var ioValues = []\r\n        this.inputs.forEach(io => {\r\n            if (io.type == 'input'){\r\n                var saveIO = {\r\n                    name: io.name,\r\n                    ioValue: 10\r\n                }\r\n                ioValues.push(saveIO)\r\n            }\r\n        })\r\n        \r\n        ioValues.forEach(ioValue => {\r\n            thisAsObject.ioValues.push(ioValue)\r\n        })\r\n        \r\n        return thisAsObject\r\n        \r\n    }\r\n    \r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/assembly.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 132,
    "kind": "class",
    "name": "Assembly",
    "memberof": "src/js/molecules/assembly.js",
    "static": true,
    "longname": "src/js/molecules/assembly.js~Assembly",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/assembly.js",
    "importStyle": "Assembly",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 133,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#name",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "ioValues",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#ioValues",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#updateValue",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "savedObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "src/js/molecules/BOM.js",
    "content": "/**\r\n * The addBOMTag molecule type adds a tag containing information about a bill of materials item to the input geometry. The input geometry is not modified in any other way\r\n */\r\n\r\nimport Atom from '../prototypes/atom.js'\r\nimport GlobalVariables from '../globalvariables.js'\r\nimport {BOMEntry} from '../BOM.js'\r\n\r\n\r\nexport default class AddBOMTag extends Atom{\r\n    /**\r\n    * The constructor function.\r\n    * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n    */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.value = ''\r\n        this.atomType = 'Add BOM Tag'\r\n        this.type = 'addBOMTag'\r\n        this.name = 'Add BOM Tag'\r\n        this.radius = 20\r\n        \r\n        this.BOMitem = new BOMEntry()\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', null)\r\n        this.addIO('output', 'geometry', this, 'geometry', null)\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    updateValue(){\r\n        //Overwrite the normal update code block to update the number of segments also\r\n        if(!GlobalVariables.evalLock && this.inputs.every(x => x.ready)){\r\n            try{\r\n                this.value = this.findIOValue('geometry').as(JSON.stringify(this.BOMitem))\r\n                this.clearAlert()\r\n            }catch(err){\r\n                this.setAlert(err)\r\n            }\r\n            \r\n            super.updateValue()\r\n        }\r\n    }\r\n    \r\n    updateSidebar(){\r\n        //updates the sidebar to display information about this node\r\n        \r\n        var valueList = super.updateSidebar() //call the super function\r\n        \r\n        this.createBOM(valueList)\r\n    }\r\n    \r\n    draw() {\r\n        \r\n        super.draw() //Super call to draw the rest\r\n        \r\n        \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#949294'\r\n        GlobalVariables.c.font = '30px Work Sans Bold'\r\n        GlobalVariables.c.fillText('B', this.x - (this.radius/2.2), this.y + (this.radius/2.1))\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.closePath()\r\n        \r\n    }\r\n    \r\n    requestReadme(){\r\n        //request any contributions from this atom to the readme\r\n        \r\n        return [this.readmeText]\r\n    }\r\n   \r\n    createBOM(list){\r\n        \r\n        list.appendChild(document.createElement('br'))\r\n        list.appendChild(document.createElement('br'))\r\n        \r\n        var div = document.createElement('h3')\r\n        div.setAttribute('style','text-align:center;')\r\n        list.appendChild(div)\r\n        var valueText = document.createTextNode('Bill Of Materials Entry')\r\n        div.appendChild(valueText)\r\n        \r\n        var x = document.createElement('HR')\r\n        list.appendChild(x)\r\n        \r\n        this.createEditableValueListItem(list,this.BOMitem,'BOMitemName', 'Item', false, () => this.updateValue())\r\n        this.createEditableValueListItem(list,this.BOMitem,'numberNeeded', 'Number', true, () => this.updateValue())\r\n        this.createEditableValueListItem(list,this.BOMitem,'costUSD', 'Price', true, () => this.updateValue())\r\n        this.createEditableValueListItem(list,this.BOMitem,'source', 'Source', false,() => this.updateValue())\r\n        x = document.createElement('HR')\r\n        list.appendChild(x)\r\n    }\r\n    \r\n    \r\n    serialize(values){\r\n        //Save the readme text to the serial stream\r\n        var valuesObj = super.serialize(values)\r\n        \r\n        valuesObj.BOMitem = this.BOMitem\r\n        \r\n        return valuesObj\r\n        \r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/BOM.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "class",
    "name": "AddBOMTag",
    "memberof": "src/js/molecules/BOM.js",
    "static": true,
    "longname": "src/js/molecules/BOM.js~AddBOMTag",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/BOM.js",
    "importStyle": "AddBOMTag",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 141,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 142,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#value",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "type",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#type",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#name",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "radius",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#radius",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "member",
    "name": "BOMitem",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#BOMitem",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#updateValue",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#updateSidebar",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#draw",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "requestReadme",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#requestReadme",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "createBOM",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#createBOM",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [
      {
        "name": "list",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "file",
    "name": "src/js/molecules/circle.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables.js'\r\n\r\nexport default class Circle extends Atom {\r\n    \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        this.name = 'Circle'\r\n        this.atomType = 'Circle'\r\n        \r\n        this.addIO('input', 'radius', this, 'number', 10)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    updateValue(){\r\n        try{\r\n            const circumference  = 3.14*2*this.findIOValue('radius')\r\n            const numberOfSegments = parseInt( circumference / GlobalVariables.circleSegmentSize )\r\n            \r\n            const values = [this.findIOValue('radius'), numberOfSegments]\r\n            this.basicThreadValueProcessing(values, \"circle\")\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/circle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 156,
    "kind": "class",
    "name": "Circle",
    "memberof": "src/js/molecules/circle.js",
    "static": true,
    "longname": "src/js/molecules/circle.js~Circle",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/circle.js",
    "importStyle": "Circle",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 157,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/circle.js~Circle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/circle.js~Circle#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/circle.js~Circle",
    "static": false,
    "longname": "src/js/molecules/circle.js~Circle#name",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/circle.js~Circle",
    "static": false,
    "longname": "src/js/molecules/circle.js~Circle#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/circle.js~Circle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/circle.js~Circle#updateValue",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 161,
    "kind": "file",
    "name": "src/js/molecules/constant.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\nexport default class Constant extends Atom{\r\n    \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.value = ''\r\n        this.type = 'constant'\r\n        this.name = 'Constant'\r\n        this.atomType = 'Constant'\r\n        this.height = 16\r\n        this.radius = 15\r\n        \r\n        this.setValues(values)\r\n        \r\n        this.addIO('output', 'number', this, 'number', 10)\r\n        \r\n        if (typeof this.ioValues == 'object') {\r\n            this.output.setValue(this.ioValues[0].ioValue)\r\n        }\r\n    }\r\n    \r\n    updateSidebar(){\r\n        //updates the sidebar to display information about this node\r\n        \r\n        var valueList = super.updateSidebar() //call the super function\r\n        this.createEditableValueListItem(valueList,this,'name', 'Name', false)\r\n        this.createEditableValueListItem(valueList,this.output,'value', 'Value', true)\r\n    }\r\n    \r\n    serialize(values){\r\n        //Save the IO value to the serial stream\r\n        var valuesObj = super.serialize(values)\r\n        \r\n        valuesObj.ioValues = [{\r\n            name: 'number',\r\n            ioValue: this.output.getValue()\r\n        }]\r\n        \r\n        return valuesObj\r\n        \r\n    }\r\n    \r\n    draw() {\r\n        this.inputs.forEach(child => {\r\n            child.draw()       \r\n        })\r\n        \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = this.color\r\n        GlobalVariables.c.rect(this.x - this.radius, this.y - this.height/2, 2*this.radius, this.height)\r\n        GlobalVariables.c.textAlign = 'start' \r\n        GlobalVariables.c.fillText(this.name, this.x + this.radius, this.y-this.radius)\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.closePath()\r\n    }\r\n    \r\n    displayAndPropogate(){\r\n        this.output.setValue(this.output.getValue())\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/constant.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 162,
    "kind": "class",
    "name": "Constant",
    "memberof": "src/js/molecules/constant.js",
    "static": true,
    "longname": "src/js/molecules/constant.js~Constant",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/constant.js",
    "importStyle": "Constant",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 163,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#value",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "type",
    "memberof": "src/js/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#type",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#name",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "height",
    "memberof": "src/js/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#height",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "radius",
    "memberof": "src/js/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#radius",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#updateSidebar",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#draw",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "displayAndPropogate",
    "memberof": "src/js/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#displayAndPropogate",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "src/js/molecules/difference.js",
    "content": "import Atom from '../prototypes/atom'\r\n\r\nexport default class Difference extends Atom{\r\n    \r\n    constructor (values){\r\n        \r\n        super(values)\r\n        \r\n        this.addIO('input', 'geometry1', this, 'geometry', '')\r\n        this.addIO('input', 'geometry2', this, 'geometry', '')\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        this.name = 'Difference'\r\n        this.atomType = 'Difference'\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    updateValue(){\r\n        try{\r\n            const values = [this.findIOValue('geometry1').toLazyGeometry().toGeometry(), this.findIOValue('geometry2').toLazyGeometry().toGeometry()]\r\n            \r\n            this.basicThreadValueProcessing(values, \"difference\")\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/difference.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "class",
    "name": "Difference",
    "memberof": "src/js/molecules/difference.js",
    "static": true,
    "longname": "src/js/molecules/difference.js~Difference",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/difference.js",
    "importStyle": "Difference",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 176,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/difference.js~Difference",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/difference.js~Difference#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/difference.js~Difference",
    "static": false,
    "longname": "src/js/molecules/difference.js~Difference#name",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/difference.js~Difference",
    "static": false,
    "longname": "src/js/molecules/difference.js~Difference#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/difference.js~Difference",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/difference.js~Difference#updateValue",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "src/js/molecules/equation.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\nexport default class Equation extends Atom {\r\n    \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('input', 'x', this, 'number', 0)\r\n        this.addIO('input', 'y', this, 'number', 0)\r\n        this.addIO('output', 'z', this, 'number', 0)\r\n        \r\n        this.name = 'Equation'\r\n        this.atomType = 'Equation'\r\n        this.defaultValue = ''\r\n        this.value = ''\r\n        this.equationOptions = ['x+y', 'x-y', 'x*y', 'x/y', 'cos(x)', 'sin(x)', 'x^y']\r\n        this.currentEquation = 0\r\n        \r\n        this.setValues(values)\r\n        \r\n    }\r\n    \r\n    serialize(){\r\n        var superSerialObject = super.serialize(null)\r\n        \r\n        //Write the current equation to the serialized object\r\n        superSerialObject.currentEquation = this.currentEquation\r\n        \r\n        return superSerialObject\r\n    }\r\n    \r\n    updateValue(){\r\n        //A super classed version of the update codeblock default function which computes the equation values\r\n        if(!GlobalVariables.evalLock && this.inputs.every(x => x.ready)){\r\n            var x = this.findIOValue('x')\r\n            var y = this.findIOValue('y')\r\n            \r\n            var z\r\n            switch(this.currentEquation){\r\n            case 0:\r\n                z = x+y\r\n                break\r\n            case 1:\r\n                z = x-y\r\n                break\r\n            case 2:\r\n                z = x*y\r\n                break\r\n            case 3:\r\n                z = x/y\r\n                break\r\n            case 4:\r\n                z = Math.cos(x)\r\n                break\r\n            case 5:\r\n                z = Math.sin(x)\r\n                break\r\n            case 6:\r\n                z = Math.pow(x,y)\r\n                break\r\n            }\r\n            \r\n            //Set the output to be the generated value\r\n            this.output.setValue(z)\r\n        }\r\n    }\r\n    \r\n    changeEquation(newValue){\r\n        this.currentEquation = parseInt(newValue)\r\n        this.updateValue()\r\n    }\r\n    \r\n    updateSidebar(){\r\n        //Update the side bar to make it possible to change the molecule name\r\n        \r\n        var valueList = super.updateSidebar()\r\n        \r\n        this.createDropDown(valueList, this, this.equationOptions, this.currentEquation, 'z = ')\r\n        \r\n    } \r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/equation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "class",
    "name": "Equation",
    "memberof": "src/js/molecules/equation.js",
    "static": true,
    "longname": "src/js/molecules/equation.js~Equation",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/equation.js",
    "importStyle": "Equation",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 182,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 183,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/equation.js~Equation",
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#name",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/equation.js~Equation",
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "defaultValue",
    "memberof": "src/js/molecules/equation.js~Equation",
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#defaultValue",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/molecules/equation.js~Equation",
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#value",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "equationOptions",
    "memberof": "src/js/molecules/equation.js~Equation",
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#equationOptions",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "currentEquation",
    "memberof": "src/js/molecules/equation.js~Equation",
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#currentEquation",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#updateValue",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "changeEquation",
    "memberof": "src/js/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#changeEquation",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "newValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#updateSidebar",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "src/js/molecules/extrude.js",
    "content": "import Atom from '../prototypes/atom'\r\n\r\nexport default class Extrude extends Atom{\r\n    \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        this.name = 'Extrude'\r\n        this.atomType = 'Extrude'\r\n        \r\n        this.addIO('input', 'geometry' , this, 'geometry', '')\r\n        this.addIO('input', 'height'   , this, 'number', 10)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    updateValue(){\r\n        try{\r\n            const values = [this.findIOValue('geometry').toLazyGeometry().toGeometry(), this.findIOValue('height')]\r\n            \r\n            this.basicThreadValueProcessing(values, \"extrude\")\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/extrude.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "class",
    "name": "Extrude",
    "memberof": "src/js/molecules/extrude.js",
    "static": true,
    "longname": "src/js/molecules/extrude.js~Extrude",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/extrude.js",
    "importStyle": "Extrude",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 196,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/extrude.js~Extrude",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/extrude.js~Extrude#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/extrude.js~Extrude",
    "static": false,
    "longname": "src/js/molecules/extrude.js~Extrude#name",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/extrude.js~Extrude",
    "static": false,
    "longname": "src/js/molecules/extrude.js~Extrude#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/extrude.js~Extrude",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/extrude.js~Extrude#updateValue",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "file",
    "name": "src/js/molecules/gcode.js",
    "content": "import Atom from '../prototypes/atom.js'\r\nimport GlobalVariables from '../globalvariables.js'\r\nimport saveAs from '../lib/FileSaver.js'\r\nimport SVGReader from '../lib/SVGReader.js'\r\n\r\nexport default class Gcode extends Atom {\r\n    \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        this.name = 'Gcode'\r\n        this.atomType = 'Gcode'\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', GlobalVariables.api.sphere())\r\n        this.addIO('input', 'tool size', this, 'number', 5.35)\r\n        this.addIO('input', 'passes', this, 'number', 6)\r\n        this.addIO('output', 'gcode', this, 'geometry', '')\r\n        \r\n        this.setValues(values)\r\n        \r\n        //generate the correct codeblock for this atom on creation\r\n        this.updateValue()\r\n    }\r\n    \r\n    updateValue(){\r\n        this.processing = true\r\n        this.clearAlert()\r\n        \r\n        const computeSvg = async (values, key) => {\r\n            try{\r\n                return await GlobalVariables.ask({values: values, key: key})\r\n            }catch(err){this.setAlert(err)}\r\n        }\r\n        \r\n        try{\r\n            const input = this.findIOValue('geometry')\r\n            \r\n            computeSvg([input.toLazyGeometry().toGeometry()], \"svg\").then(result => {\r\n                if (result != -1 ){\r\n                    \r\n                    const bounds = input.measureBoundingBox()\r\n                    const partThickness = bounds[1][2]-bounds[0][2]\r\n                    \r\n                    //convert that to gcode\r\n                    this.value = this.svg2gcode(result, {\r\n                        passes: this.findIOValue('passes'),\r\n                        materialWidth: -1*partThickness,\r\n                        bitWidth: this.findIOValue('tool size')\r\n                    })\r\n                    \r\n                }else{\r\n                    this.setAlert(\"Unable to compute\")\r\n                }\r\n                this.processing = false\r\n            })\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n    \r\n    updateSidebar(){\r\n        var valueList =  super.updateSidebar() \r\n        \r\n        this.createButton(valueList,this,'Download Gcode',() => {\r\n            const blob = new Blob([this.value], {type: 'text/plain;charset=utf-8'})\r\n            saveAs(blob, GlobalVariables.topLevelMolecule.name+'.nc')\r\n        })\r\n    }\r\n    \r\n    sendToRender(){\r\n        //Supress the normal send to render behavior\r\n    }\r\n    \r\n    svg2gcode(svg, settings) {\r\n        // clean off any preceding whitespace\r\n        svg = svg.replace(/^[\\n\\r \\t]/gm, '')\r\n        settings = settings || {}\r\n        settings.passes = settings.passes || 1\r\n        settings.materialWidth = settings.materialWidth || 6\r\n        settings.passWidth = settings.materialWidth/settings.passes\r\n        settings.scale = settings.scale || 1\r\n        settings.cutZ = settings.cutZ || 0 // cut z\r\n        settings.safeZ = settings.safeZ || 10   // safe z\r\n        settings.feedRate = settings.feedRate || 1400\r\n        settings.seekRate = settings.seekRate || 1100\r\n        settings.bitWidth = settings.bitWidth || 1 // in mm\r\n\r\n        var\r\n            scale=function(val) {\r\n                return val * settings.scale\r\n            },\r\n            paths = SVGReader.parse(svg, {}).allcolors,\r\n            gcode,\r\n            path\r\n\r\n        var idx = paths.length\r\n        while(idx--) {\r\n            var subidx = paths[idx].length\r\n            var bounds = { x : Infinity , y : Infinity, x2 : -Infinity, y2: -Infinity, area : 0}\r\n\r\n            // find lower and upper bounds\r\n            while(subidx--) {\r\n                if (paths[idx][subidx][0] < bounds.x) {\r\n                    bounds.x = paths[idx][subidx][0]\r\n                }\r\n\r\n                if (paths[idx][subidx][1] < bounds.y) {\r\n                    bounds.y = paths[idx][subidx][0]\r\n                }\r\n\r\n                if (paths[idx][subidx][0] > bounds.x2) {\r\n                    bounds.x2 = paths[idx][subidx][0]\r\n                }\r\n                if (paths[idx][subidx][1] > bounds.y2) {\r\n                    bounds.y2 = paths[idx][subidx][0]\r\n                }\r\n            }\r\n\r\n            // calculate area\r\n            bounds.area = (1 + bounds.x2 - bounds.x) * (1 + bounds.y2-bounds.y)\r\n            paths[idx].bounds = bounds\r\n        }\r\n\r\n        // cut the inside parts first\r\n        paths.sort(function(a, b) {\r\n        // sort by area\r\n            return (a.bounds.area < b.bounds.area) ? -1 : 1\r\n        })\r\n\r\n        gcode = [\r\n            'G90',\r\n            'G21',\r\n            'G1 Z' + settings.safeZ,\r\n            'G82',\r\n            'M4'\r\n        ]\r\n\r\n        for (var pathIdx = 0, pathLength = paths.length; pathIdx < pathLength; pathIdx++) {\r\n            path = paths[pathIdx]\r\n\r\n            // seek to index 0\r\n            gcode.push(['G1',\r\n                'X' + scale(path[0].x),\r\n                'Y' + scale(path[0].y),\r\n                'F' + settings.seekRate\r\n            ].join(' '))\r\n        \r\n            for (var p = settings.passWidth; p>=settings.materialWidth; p-=-1*settings.passWidth) {\r\n\r\n                // begin the cut by dropping the tool to the work\r\n                gcode.push(['G1',\r\n                    'Z' + (settings.cutZ + p),\r\n                    'F' + '200'\r\n                ].join(' '))\r\n\r\n                // keep track of the current path being cut, as we may need to reverse it\r\n                var localPath = []\r\n                for (var segmentIdx=0, segmentLength = path.length; segmentIdx<segmentLength; segmentIdx++) {\r\n                    var segment = path[segmentIdx]\r\n\r\n                    var localSegment = ['G1',\r\n                        'X' + scale(segment.x),\r\n                        'Y' + scale(segment.y),\r\n                        'F' + settings.feedRate\r\n                    ].join(' ')\r\n\r\n                    // feed through the material\r\n                    gcode.push(localSegment)\r\n                    localPath.push(localSegment)\r\n\r\n                    // if the path is not closed, reverse it, drop to the next cut depth and cut\r\n                    // this handles lines\r\n                    if (segmentIdx === segmentLength - 1 &&\r\n                (segment.x !== path[0].x || segment.y !== path[0].y))\r\n                    {\r\n\r\n                        p+=settings.passWidth\r\n                        if (p<settings.materialWidth) {\r\n                            // begin the cut by dropping the tool to the work\r\n                            gcode.push(['G1',\r\n                                'Z' + (settings.cutZ + p),\r\n                                'F' + '200'\r\n                            ].join(' '))\r\n\r\n                            Array.prototype.push.apply(gcode, localPath.reverse())\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // go safe\r\n            gcode.push(['G1',\r\n                'Z' + settings.safeZ,\r\n                'F' + '300'\r\n            ].join(' '))\r\n        }\r\n\r\n        // just wait there for a second\r\n        gcode.push('G4 P1')\r\n\r\n        // turn off the spindle\r\n        gcode.push('M5')\r\n\r\n        // go home\r\n        gcode.push('G1 Z' + settings.safeZ + ' F300')\r\n        gcode.push('G1 X0 Y0 F800')\r\n\r\n        return gcode.join('\\n')\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/gcode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 201,
    "kind": "class",
    "name": "Gcode",
    "memberof": "src/js/molecules/gcode.js",
    "static": true,
    "longname": "src/js/molecules/gcode.js~Gcode",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/gcode.js",
    "importStyle": "Gcode",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 202,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 203,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#name",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#updateValue",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "processing",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#processing",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#value",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#updateSidebar",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "sendToRender",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#sendToRender",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "svg2gcode",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#svg2gcode",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "svg",
        "types": [
          "*"
        ]
      },
      {
        "name": "settings",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "file",
    "name": "src/js/molecules/githubmolecule.js",
    "content": "import Molecule from '../molecules/molecule'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\nexport default class GitHubMolecule extends Molecule {\r\n    \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        \r\n        this.name = 'Github Molecule'\r\n        this.atomType = 'GitHubMolecule'\r\n        this.topLevel = false //a flag to signal if this node is the top level node\r\n        this.centerColor = 'black'\r\n        this.projectID = 0\r\n        \r\n        this.setValues(values)\r\n        this.loadProjectByID(this.projectID)\r\n    }\r\n    \r\n    doubleClick(x,y){\r\n        // Prevent you from being able to double click into a github molecule\r\n        \r\n        var clickProcessed = false\r\n        \r\n        var distFromClick = GlobalVariables.distBetweenPoints(x, this.x, y, this.y)\r\n        \r\n        if (distFromClick < this.radius){\r\n            clickProcessed = true\r\n        }\r\n        \r\n        return clickProcessed \r\n    }\r\n    \r\n    loadProjectByID(id){\r\n    //Get the repo by ID\r\n        GlobalVariables.gitHub.getProjectByID(id).then(result => {\r\n                    \r\n            //content will be base64 encoded\r\n            let rawFile = atob(result.data.content)\r\n            let moleculesList =  JSON.parse(rawFile).molecules\r\n            \r\n            //Preserve values which will be overwritten by the deserialize process\r\n            var preservedValues = {uniqueID: this.uniqueID, x: this.x, y: this.y, atomType: this.atomType, topLevel: this.topLevel, ioValues: this.ioValues}\r\n            \r\n            this.deserialize(moleculesList, moleculesList.filter((molecule) => { return molecule.topLevel == true })[0].uniqueID)\r\n            \r\n            this.setValues(preservedValues)\r\n            \r\n            //Try to re-establish the connectors in the parent molecule to get the ones that were missed before when this molecule had not yet been fully loaded\r\n            if(typeof this.parent !== 'undefined'){\r\n                this.parent.savedConnectors.forEach(connector => {\r\n                    this.parent.placeConnector(connector)\r\n                })\r\n            }\r\n            \r\n            if(this.topLevel){\r\n                GlobalVariables.evalLock = false\r\n            }\r\n            this.unlock()\r\n            GlobalVariables.currentMolecule.backgroundClick()\r\n        })\r\n    }\r\n    \r\n    serialize(){\r\n        \r\n        var ioValues = []\r\n        this.inputs.forEach(io => {\r\n            if (typeof io.getValue() == 'number'){\r\n                var saveIO = {\r\n                    name: io.name,\r\n                    ioValue: io.getValue()\r\n                }\r\n                ioValues.push(saveIO)\r\n            }\r\n        })\r\n        \r\n        //Return a placeholder for this molecule\r\n        var object = {\r\n            atomType: this.atomType,\r\n            name: this.name,\r\n            x: this.x,\r\n            y: this.y,\r\n            uniqueID: this.uniqueID,\r\n            projectID: this.projectID,\r\n            ioValues: ioValues\r\n        }\r\n        \r\n        return object\r\n    }\r\n    \r\n    updateValue(){\r\n        if(!GlobalVariables.evalLock && this.inputs.every(x => x.ready)){\r\n            super.updateValue()\r\n            if(this.name != 'Molecule'){ //This is a total hack to slow things down by checking to see if the name has been loaded because min.js can't handle calls right away\r\n                this.backgroundClick()\r\n            }\r\n        }\r\n    }\r\n    \r\n    updateSidebar(){\r\n        //updates the sidebar to display information about this node\r\n        \r\n        var sideBar = document.querySelector('.sideBar')\r\n        \r\n        //remove everything in the sideBar now\r\n        while (sideBar.firstChild) {\r\n            sideBar.removeChild(sideBar.firstChild)\r\n        }\r\n        \r\n        var valueList = document.createElement('ul')\r\n        sideBar.appendChild(valueList)\r\n        valueList.setAttribute('class', 'sidebar-list')\r\n        \r\n        //add the name as a title\r\n        var name = document.createElement('h1')\r\n        name.textContent = this.name\r\n        name.setAttribute('style','text-align:center;')\r\n        valueList.appendChild(name)\r\n        \r\n        //Add options to set all of the inputs\r\n        this.inputs.forEach(child => {\r\n            if(child.type == 'input' && child.valueType != 'geometry'){\r\n                this.createEditableValueListItem(valueList,child,'value', child.name, true)\r\n            }\r\n        })\r\n        \r\n        if(GlobalVariables.runMode){ //If the molecule is displaying in run mode\r\n            this.createButton(valueList,this,'Create A Copy',() => {\r\n                GlobalVariables.gitHub.forkByID(this.projectID)\r\n            })\r\n            \r\n            this.createButton(valueList,this,'Your Projects',() => {\r\n                window.location.href = '/'\r\n            })\r\n        }\r\n        \r\n        this.createButton(valueList,this,'Star This Project',() => {\r\n            //Star the project\r\n            GlobalVariables.gitHub.starProject(this.projectID)\r\n        })\r\n        \r\n        this.displaySimpleBOM(valueList)\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/githubmolecule.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 213,
    "kind": "class",
    "name": "GitHubMolecule",
    "memberof": "src/js/molecules/githubmolecule.js",
    "static": true,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/githubmolecule.js",
    "importStyle": "GitHubMolecule",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/js/molecules/molecule.js~Molecule"
    ]
  },
  {
    "__docId__": 214,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 215,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#name",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "topLevel",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#topLevel",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "centerColor",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#centerColor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "projectID",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#projectID",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "doubleClick",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#doubleClick",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "loadProjectByID",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#loadProjectByID",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#updateValue",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#updateSidebar",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 225,
    "kind": "file",
    "name": "src/js/molecules/input.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\nexport default class Input extends Atom {\r\n    \r\n    constructor(values){\r\n        super (values)\r\n        \r\n        this.name = 'Input' + GlobalVariables.generateUniqueID()\r\n        this.value = ''\r\n        this.type = 'input'\r\n        this.atomType = 'Input'\r\n        this.height = 16\r\n        this.radius = 15\r\n        \r\n        this.setValues(values)\r\n        \r\n        this.oldName = this.name\r\n        \r\n        this.addIO('output', 'number or geometry', this, 'number or geometry', 10)\r\n        \r\n        //Add a new input to the current molecule\r\n        if (typeof this.parent !== 'undefined') {\r\n            this.parent.addIO('input', this.name, this.parent, 'number or geometry', 10)\r\n        }\r\n        \r\n        this.setOutput(this.value) //force propogation\r\n    }\r\n    \r\n    updateSidebar(){\r\n        //updates the sidebar to display information about this node\r\n        \r\n        var valueList =  super.updateSidebar() //call the super function\r\n        \r\n        this.createEditableValueListItem(valueList,this,'name', 'Name', false)\r\n        \r\n        this.parent.inputs.forEach(child => {\r\n            if (child.name == this.name){\r\n                this.createEditableValueListItem(valueList,child,'value', 'Value', true)\r\n            }\r\n        })\r\n    }\r\n    \r\n    draw() {\r\n        this.scaledX = GlobalVariables.scaleFactorXY * this.x\r\n        this.scaledY = GlobalVariables.scaleFactorXY * this.y\r\n        \r\n        //Check if the name has been updated\r\n        if(this.name != this.oldName){this.updateParentName()}\r\n        \r\n        this.inputs.forEach(child => {\r\n            child.draw()       \r\n        })\r\n        \r\n        \r\n        GlobalVariables.c.fillStyle = this.color\r\n        \r\n        GlobalVariables.c.textAlign = 'start' \r\n        GlobalVariables.c.fillText(this.name, this.x + this.radius, this.y-this.radius)\r\n\r\n        \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.moveTo(this.x - this.radius, this.y - this.height/2)\r\n        GlobalVariables.c.lineTo(this.x - this.radius + 10, this.y)\r\n        GlobalVariables.c.lineTo(this.x - this.radius, this.y + this.height/2)\r\n        GlobalVariables.c.lineTo(this.x + this.radius, this.y + this.height/2)\r\n        GlobalVariables.c.lineTo(this.x + this.radius, this.y - this.height/2)\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.closePath()\r\n\r\n    }\r\n    \r\n    deleteNode() {\r\n        \r\n        //Remove this input from the parent molecule\r\n        if (typeof this.parent !== 'undefined') {\r\n            this.parent.removeIO('input', this.name, this.parent)\r\n        }\r\n        \r\n        super.deleteNode()\r\n    }\r\n    \r\n    updateParentName(){\r\n        //Callled when the name has changed to updated the name of the parent molecule IO\r\n        //Run through the parent molecule and find the input with the same name\r\n        this.parent.inputs.forEach(child => {\r\n            if (child.name == this.oldName){\r\n                child.name = this.name\r\n            }\r\n        })\r\n        this.oldName = this.name\r\n    }\r\n    \r\n    setOutput(newOutput){\r\n        //Set the input's output\r\n        this.value = newOutput  //Set the code block so that clicking on the input previews what it is \r\n        \r\n        //Set the output nodes with type 'geometry' to be the new value\r\n        this.output.setValue(newOutput)\r\n        \r\n    }\r\n    \r\n    getOutput(){\r\n        return this.output.getValue()\r\n    }\r\n    \r\n    updateValue(){\r\n        //This empty function handles any calls to the normal update code block function which breaks things here\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/input.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 226,
    "kind": "class",
    "name": "Input",
    "memberof": "src/js/molecules/input.js",
    "static": true,
    "longname": "src/js/molecules/input.js~Input",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/input.js",
    "importStyle": "Input",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 227,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 228,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#name",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#value",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "member",
    "name": "type",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#type",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "height",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#height",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "radius",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#radius",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "oldName",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#oldName",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#updateSidebar",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#draw",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "scaledX",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#scaledX",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "member",
    "name": "scaledY",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#scaledY",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "deleteNode",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#deleteNode",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "updateParentName",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#updateParentName",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "setOutput",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#setOutput",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [
      {
        "name": "newOutput",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "getOutput",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#getOutput",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#updateValue",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 246,
    "kind": "file",
    "name": "src/js/molecules/intersection.js",
    "content": "import Atom from '../prototypes/atom'\r\n\r\nexport default class Intersection extends Atom {\r\n    \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        this.addIO('input', 'geometry1', this, 'geometry', '')\r\n        this.addIO('input', 'geometry2', this, 'geometry', '')\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        this.name = 'Intersection'\r\n        this.atomType = 'Intersection'\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    updateValue(){\r\n        \r\n        try{\r\n            const values = [this.findIOValue('geometry1').toLazyGeometry().toGeometry(), this.findIOValue('geometry2').toLazyGeometry().toGeometry()]\r\n            \r\n            this.basicThreadValueProcessing(values, \"intersection\")\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/intersection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 247,
    "kind": "class",
    "name": "Intersection",
    "memberof": "src/js/molecules/intersection.js",
    "static": true,
    "longname": "src/js/molecules/intersection.js~Intersection",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/intersection.js",
    "importStyle": "Intersection",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 248,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/intersection.js~Intersection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/intersection.js~Intersection#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 249,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/intersection.js~Intersection",
    "static": false,
    "longname": "src/js/molecules/intersection.js~Intersection#name",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/intersection.js~Intersection",
    "static": false,
    "longname": "src/js/molecules/intersection.js~Intersection#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/intersection.js~Intersection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/intersection.js~Intersection#updateValue",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 252,
    "kind": "file",
    "name": "src/js/molecules/molecule.js",
    "content": "import Atom from '../prototypes/atom.js'\r\nimport Connector from '../prototypes/connector.js'\r\nimport GlobalVariables from '../globalvariables.js'\r\nimport saveAs from '../lib/FileSaver.js'\r\nimport { extractBomTags } from '../BOM.js'\r\n\r\nexport default class Molecule extends Atom{\r\n\r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        this.nodesOnTheScreen = []\r\n        this.inputs = []\r\n        this.name = 'Molecule'\r\n        this.atomType = 'Molecule'\r\n        this.centerColor = '#949294'\r\n        this.topLevel = false //a flag to signal if this node is the top level node\r\n        \r\n        this.setValues(values)\r\n        \r\n        //Add the molecule's output\r\n        this.placeAtom({\r\n            parentMolecule: this, \r\n            x: GlobalVariables.canvas.width - 50,\r\n            y: GlobalVariables.canvas.height/2,\r\n            parent: this,\r\n            name: 'Output',\r\n            atomType: 'Output'\r\n        }, null, GlobalVariables.secretTypes)\r\n        \r\n        this.updateValue()\r\n    }\r\n    \r\n    draw(){\r\n        super.draw() //Super call to draw the rest\r\n        \r\n        //draw the circle in the middle\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = this.centerColor\r\n        GlobalVariables.c.arc(this.x, this.y, this.radius/2, 0, Math.PI * 2, false)\r\n        GlobalVariables.c.closePath()\r\n        GlobalVariables.c.fill()\r\n        \r\n    }\r\n    \r\n    doubleClick(x,y){\r\n        //returns true if something was done with the click\r\n        \r\n        \r\n        var clickProcessed = false\r\n        \r\n        var distFromClick = GlobalVariables.distBetweenPoints(x, this.x, y, this.y)\r\n        \r\n        if (distFromClick < this.radius){\r\n            GlobalVariables.currentMolecule = this //set this to be the currently displayed molecule\r\n            GlobalVariables.currentMolecule.backgroundClick()\r\n            clickProcessed = true\r\n        }\r\n        \r\n        return clickProcessed \r\n    }\r\n    \r\n    backgroundClick(){\r\n        \r\n        this.selected = true\r\n        this.updateSidebar()\r\n        this.sendToRender()\r\n    }\r\n    \r\n    deselect(){\r\n        this.selected = false\r\n    }\r\n    \r\n    updateValue(){\r\n        if(!GlobalVariables.evalLock && this.inputs.every(x => x.ready)){\r\n            this.processing = true\r\n            this.clearAlert()\r\n            \r\n            //Grab values from the inputs and push them out to the input objects\r\n            this.inputs.forEach(moleculeInput => {\r\n                this.nodesOnTheScreen.forEach(atom => {\r\n                    if(atom.atomType == 'Input' && moleculeInput.name == atom.name){\r\n                        if(atom.getOutput() != moleculeInput.getValue()){                //Dont update the input if it hasn't changed\r\n                            atom.setOutput(moleculeInput.getValue())\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n            \r\n            this.processing = false\r\n        }\r\n    }\r\n    \r\n    propogate(){\r\n        //Set the output nodes with type 'geometry' to be the generated code\r\n        if(this.output){\r\n            this.output.setValue(this.value)\r\n        }\r\n        \r\n        //If this molecule is selected, send the updated value to the renderer\r\n        if (this.selected){\r\n            this.sendToRender()\r\n        }\r\n    }\r\n    \r\n    unlock(){\r\n        //Runs right after the loading process to unlock attachment points which have no connectors attached\r\n        super.unlock()\r\n        \r\n        this.nodesOnTheScreen.forEach(node => {\r\n            node.unlock()\r\n        })\r\n        this.updateValue()\r\n    }\r\n    \r\n    updateSidebar(){\r\n        //Update the side bar to make it possible to change the molecule name\r\n        \r\n        var valueList = super.initializeSideBar() \r\n        \r\n        if(!this.topLevel){\r\n            this.createButton(valueList,this,'Go To Parent',this.goToParentMolecule)\r\n            \r\n            this.createButton(valueList,this,'Export To GitHub', this.exportToGithub)\r\n        }\r\n        else{ //If we are the top level molecule and not in run mode\r\n            this.createButton(valueList,this,'Load A Different Project',() => {\r\n                GlobalVariables.gitHub.showProjectsToLoad()\r\n            })\r\n            \r\n            this.createButton(valueList,this,'Share This Project',() => {\r\n                GlobalVariables.gitHub.shareOpenedProject()\r\n            })\r\n            \r\n            this.createButton(valueList,this,'GitHub',() => {\r\n                GlobalVariables.gitHub.openGitHubPage()\r\n            })\r\n            \r\n        }\r\n        \r\n        this.createButton(valueList,this,'Download STL',() => {\r\n            const convertSTL = require('@jsxcad/convert-stl')\r\n            convertSTL.toStla({}, this.value.toDisjointGeometry()).then( stlContent => {\r\n                const blob = new Blob([stlContent], {type: 'text/plain;charset=utf-8'})\r\n                saveAs(blob, this.name+'.stl')\r\n            })\r\n        })\r\n        \r\n        this.createButton(valueList,this,'Download SVG',() => {\r\n            const convertSVG = require('@jsxcad/convert-svg')\r\n            const crossSection = this.value.crossSection().toDisjointGeometry()\r\n            convertSVG.toSvg({}, crossSection).then( contentSvg => {\r\n                const blob = new Blob([contentSvg], {type: 'text/plain;charset=utf-8'})\r\n                saveAs(blob, this.name+'.svg')\r\n            })\r\n        })\r\n        \r\n        this.createEditableValueListItem(valueList,this,'name', 'Name', false)\r\n        \r\n        this.createEditableValueListItem(valueList,GlobalVariables,'circleSegmentSize', 'Circle Segment Size', true, (newValue) => {GlobalVariables.circleSegmentSize = newValue})\r\n        \r\n        if(this.uniqueID != GlobalVariables.currentMolecule.uniqueID){ //If we are not currently inside this molecule\r\n            //Add options to set all of the inputs\r\n            this.inputs.forEach(child => {\r\n                if(child.type == 'input' && child.valueType != 'geometry'){\r\n                    this.createEditableValueListItem(valueList,child,'value', child.name, true)\r\n                }\r\n            })\r\n        }\r\n        \r\n                \r\n        this.displaySimpleBOM(valueList)\r\n        \r\n        return valueList\r\n        \r\n    }\r\n    \r\n    displaySimpleBOM(list){\r\n        var bomList = []\r\n        try{\r\n            bomList = extractBomTags(this.value)\r\n        }catch(err){\r\n            this.setAlert(\"Unable to read BOM\")\r\n        }\r\n        \r\n        if(bomList.length > 0){\r\n        \r\n            list.appendChild(document.createElement('br'))\r\n            list.appendChild(document.createElement('br'))\r\n            \r\n            var div = document.createElement('h3')\r\n            div.setAttribute('style','text-align:center;')\r\n            list.appendChild(div)\r\n            var valueText = document.createTextNode('Bill Of Materials')\r\n            div.appendChild(valueText)\r\n            \r\n            var x = document.createElement('HR')\r\n            list.appendChild(x)\r\n            \r\n            bomList.forEach(bomEntry => {\r\n                this.createNonEditableValueListItem(list,bomEntry,'numberNeeded', bomEntry.BOMitemName, false)\r\n            })\r\n        }\r\n    }\r\n\r\n    goToParentMolecule(){\r\n        //Go to the parent molecule if there is one\r\n        \r\n        if(!GlobalVariables.currentMolecule.topLevel){\r\n            GlobalVariables.currentMolecule = GlobalVariables.currentMolecule.parent //set parent this to be the currently displayed molecule\r\n            GlobalVariables.currentMolecule.backgroundClick()\r\n        }\r\n    }\r\n    \r\n    exportToGithub(self){\r\n        //Export this molecule to github\r\n        GlobalVariables.gitHub.exportCurrentMoleculeToGithub(self)\r\n    }\r\n    \r\n    replaceThisMoleculeWithGithub(githubID){\r\n        \r\n        //If we are currently inside the molecule targeted for replacement, go up one\r\n        if (GlobalVariables.currentMolecule.uniqueID == this.uniqueID){\r\n            GlobalVariables.currentMolecule = this.parent\r\n        }\r\n        \r\n        //Create a new github molecule in the same spot\r\n        GlobalVariables.currentMolecule.placeAtom({\r\n            x: this.x, \r\n            y: this.y, \r\n            parent: GlobalVariables.currentMolecule,\r\n            name: this.name,\r\n            atomType: 'GitHubMolecule',\r\n            projectID: githubID,\r\n            uniqueID: GlobalVariables.generateUniqueID()\r\n        }, null, GlobalVariables.availableTypes)\r\n        \r\n        \r\n        //Then delete the old molecule which has been replaced\r\n        this.deleteNode()\r\n\r\n    }\r\n    \r\n    requestReadme(){\r\n        var generatedReadme = super.requestReadme()\r\n        generatedReadme.push('## ' + this.name)\r\n        \r\n        var sortableAtomsList = this.nodesOnTheScreen\r\n        sortableAtomsList.sort(function(a, b){return GlobalVariables.distBetweenPoints(a.x, 0, a.y, 0)-GlobalVariables.distBetweenPoints(b.x, 0, b.y, 0)})\r\n        \r\n        sortableAtomsList.forEach(molecule => {\r\n            generatedReadme = generatedReadme.concat(molecule.requestReadme())\r\n        })\r\n        return generatedReadme\r\n    }\r\n    \r\n    serialize(savedObject){\r\n        //Save this molecule.\r\n        \r\n        //This one is a little confusing. Basically each molecule saves like an atom, but also creates a second object \r\n        //record of itself in the object \"savedObject\" object. If this is the topLevel molecule we need to create the \r\n        //savedObject object here to pass to lower levels.\r\n        \r\n        if(this.topLevel == true){\r\n            //If this is the top level create a new blank project to save to FIXME: It would be cleaner if this function were just called with the object when called from the top level\r\n            savedObject = {molecules: []}\r\n        }\r\n            \r\n        var allAtoms = [] //An array of all the atoms containted in this molecule\r\n        var allConnectors = [] //An array of all the connectors contained in this molelcule\r\n        \r\n        \r\n        this.nodesOnTheScreen.forEach(atom => {\r\n            //Store a represnetation of the atom\r\n            allAtoms.push(atom.serialize(savedObject))\r\n            //Store a representation of the atom's connectors\r\n            if(atom.output){\r\n                atom.output.connectors.forEach(connector => {\r\n                    allConnectors.push(connector.serialize())\r\n                })\r\n            }\r\n        })\r\n        \r\n        var thisAsObject = super.serialize(savedObject)\r\n        thisAsObject.topLevel = this.topLevel\r\n        thisAsObject.allAtoms = allAtoms\r\n        thisAsObject.allConnectors = allConnectors\r\n        thisAsObject.fileTypeVersion = 1\r\n        \r\n        //Add a JSON representation of this object to the file being saved\r\n        savedObject.molecules.push(thisAsObject)\r\n        savedObject.circleSegmentSize = GlobalVariables.circleSegmentSize\r\n            \r\n        if(this.topLevel == true){\r\n            //If this is the top level, return the complete file to be saved\r\n            return savedObject\r\n        }\r\n        else{\r\n            //If not, return a placeholder for this molecule\r\n            return super.serialize(savedObject)\r\n        }\r\n    }\r\n        \r\n    deserialize(moleculeList, moleculeID){\r\n        //Find the target molecule in the list\r\n        var moleculeObject = moleculeList.filter((molecule) => { return molecule.uniqueID == moleculeID})[0]\r\n            \r\n        this.setValues(moleculeObject) //Grab the values of everything from the passed object\r\n        \r\n        //Place the atoms\r\n        moleculeObject.allAtoms.forEach(atom => {\r\n            this.placeAtom(atom, moleculeList, GlobalVariables.availableTypes)\r\n        })\r\n        //reload the molecule object to prevent persistence issues\r\n        moleculeObject = moleculeList.filter((molecule) => { return molecule.uniqueID == moleculeID})[0]\r\n            \r\n        //Place the connectors\r\n        this.savedConnectors = moleculeObject.allConnectors //Save a copy of the connectors so we can use them later if we want\r\n        this.savedConnectors.forEach(connector => {\r\n            this.placeConnector(connector)\r\n        })\r\n        \r\n        this.setValues([])//Call set values again with an empty list to trigger loading of IO values from memory\r\n\r\n        this.updateValue()\r\n    }\r\n    \r\n    placeAtom(newAtomObj, moleculeList, typesList, unlock){\r\n        //Place the atom - note that types not listed in typesList will not be placed with no warning\r\n        \r\n        for(var key in typesList) {\r\n            if (typesList[key].atomType == newAtomObj.atomType){\r\n                newAtomObj.parent = this\r\n                var atom = new typesList[key].creator(newAtomObj)\r\n                \r\n                //reassign the name of the Inputs to preserve linking\r\n                if(atom.atomType == 'Input' && typeof newAtomObj.name !== 'undefined'){\r\n                    atom.name = newAtomObj.name\r\n                    atom.draw() //The poling happens in draw :roll_eyes:\r\n                }\r\n\r\n                //If this is a molecule, deserialize it\r\n                if(atom.atomType == 'Molecule' && moleculeList != null){\r\n                    atom.deserialize(moleculeList, atom.uniqueID)\r\n                }\r\n                \r\n                if(unlock){\r\n                    //Make it spawn ready to update right away\r\n                    atom.unlock()\r\n                }\r\n                \r\n                this.nodesOnTheScreen.push(atom)\r\n            }\r\n        }\r\n        \r\n        if(newAtomObj.atomType == 'Output'){\r\n            //re-asign output ID numbers if a new one is supposed to be placed\r\n            this.nodesOnTheScreen.forEach(atom => {\r\n                if(atom.atomType == 'Output'){\r\n                    atom.setID(newAtomObj.uniqueID)\r\n                }\r\n            })\r\n        }\r\n    }\r\n    \r\n    placeConnector(connectorObj){\r\n        var connector\r\n        var cp1NotFound = true\r\n        var cp2NotFound = true\r\n        var ap2\r\n        \r\n        try{\r\n            this.nodesOnTheScreen.forEach(atom => {\r\n                //Find the output node\r\n                if (atom.uniqueID == connectorObj.ap1ID){\r\n                    connector = new Connector({\r\n                        atomType: 'Connector',\r\n                        attachmentPoint1: atom.output,\r\n                        parentMolecule:  atom\r\n                    })\r\n                    cp1NotFound = false\r\n                }\r\n                //Find the input node\r\n                if (atom.uniqueID == connectorObj.ap2ID){\r\n                    atom.inputs.forEach(child => {\r\n                        if(child.name == connectorObj.ap2Name && child.type == 'input' && child.connectors.length == 0){\r\n                            cp2NotFound = false\r\n                            ap2 = child\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        }\r\n        catch(err){\r\n            console.warn('Unable to create connector')\r\n        }\r\n        \r\n        if(cp1NotFound || cp2NotFound){\r\n            console.warn('Unable to create connector')\r\n            return\r\n        }\r\n        \r\n        connector.attachmentPoint2 = ap2\r\n        \r\n        //Store the connector\r\n        connector.attachmentPoint1.connectors.push(connector)\r\n        connector.attachmentPoint2.connectors.push(connector)\r\n        \r\n        //Update the connection\r\n        connector.propogate()\r\n    }\r\n    \r\n    sendToRender(){\r\n        super.sendToRender()\r\n        if(this.topLevel && this.value.measureBoundingBox){\r\n            GlobalVariables.display.zoomCameraToFit(this.value.measureBoundingBox())\r\n        }\r\n    }\r\n}\r\n\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/molecule.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 253,
    "kind": "class",
    "name": "Molecule",
    "memberof": "src/js/molecules/molecule.js",
    "static": true,
    "longname": "src/js/molecules/molecule.js~Molecule",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/molecule.js",
    "importStyle": "Molecule",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 254,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 255,
    "kind": "member",
    "name": "nodesOnTheScreen",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#nodesOnTheScreen",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "member",
    "name": "inputs",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#inputs",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#name",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "member",
    "name": "centerColor",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#centerColor",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "member",
    "name": "topLevel",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#topLevel",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#draw",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "doubleClick",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#doubleClick",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "backgroundClick",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#backgroundClick",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 264,
    "kind": "member",
    "name": "selected",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#selected",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "deselect",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#deselect",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#updateValue",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 268,
    "kind": "member",
    "name": "processing",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#processing",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "propogate",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#propogate",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "unlock",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#unlock",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#updateSidebar",
    "access": "public",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "displaySimpleBOM",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#displaySimpleBOM",
    "access": "public",
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "params": [
      {
        "name": "list",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "goToParentMolecule",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#goToParentMolecule",
    "access": "public",
    "description": null,
    "lineNumber": 207,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "exportToGithub",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#exportToGithub",
    "access": "public",
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "params": [
      {
        "name": "self",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "replaceThisMoleculeWithGithub",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#replaceThisMoleculeWithGithub",
    "access": "public",
    "description": null,
    "lineNumber": 221,
    "undocument": true,
    "params": [
      {
        "name": "githubID",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "requestReadme",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#requestReadme",
    "access": "public",
    "description": null,
    "lineNumber": 245,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 258,
    "undocument": true,
    "params": [
      {
        "name": "savedObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "deserialize",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#deserialize",
    "access": "public",
    "description": null,
    "lineNumber": 305,
    "undocument": true,
    "params": [
      {
        "name": "moleculeList",
        "types": [
          "*"
        ]
      },
      {
        "name": "moleculeID",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 280,
    "kind": "member",
    "name": "savedConnectors",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#savedConnectors",
    "access": "public",
    "description": null,
    "lineNumber": 319,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "placeAtom",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#placeAtom",
    "access": "public",
    "description": null,
    "lineNumber": 329,
    "undocument": true,
    "params": [
      {
        "name": "newAtomObj",
        "types": [
          "*"
        ]
      },
      {
        "name": "moleculeList",
        "types": [
          "*"
        ]
      },
      {
        "name": "typesList",
        "types": [
          "*"
        ]
      },
      {
        "name": "unlock",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "placeConnector",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#placeConnector",
    "access": "public",
    "description": null,
    "lineNumber": 367,
    "undocument": true,
    "params": [
      {
        "name": "connectorObj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "sendToRender",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#sendToRender",
    "access": "public",
    "description": null,
    "lineNumber": 414,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 284,
    "kind": "file",
    "name": "src/js/molecules/output.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n\r\nexport default class Output extends Atom {\r\n    \r\n    constructor(values){\r\n        super (values)\r\n        \r\n        //Add a new output to the current molecule\r\n        if (typeof this.parent !== 'undefined') {\r\n            this.parent.addIO('output', 'Geometry', this.parent, 'geometry', '')\r\n        }\r\n        \r\n        this.value = null\r\n        this.type = 'output'\r\n        this.name = 'Output'\r\n        this.atomType = 'Output'\r\n        this.height = 16\r\n        this.radius = 15\r\n        \r\n        this.setValues(values)\r\n        \r\n        this.addIO('input', 'number or geometry', this, 'geometry', '')\r\n    }\r\n    \r\n    updateValue(){\r\n        if(!GlobalVariables.evalLock && this.inputs.every(x => x.ready)){\r\n            this.value = this.findIOValue('number or geometry')\r\n            this.parent.value = this.value\r\n            this.parent.propogate()\r\n            \r\n            super.updateValue()\r\n        }\r\n    }\r\n    \r\n    setID(newID){\r\n        this.uniqueID = newID\r\n    }\r\n    \r\n    draw() {\r\n        \r\n        this.scaledX = GlobalVariables.scaleFactorXY * this.x\r\n        this.scaledY = GlobalVariables.scaleFactorXY * this.y\r\n        \r\n        this.inputs.forEach(child => {\r\n            child.draw()       \r\n        })\r\n\r\n\r\n        this.height= this.radius\r\n        \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = this.color\r\n        GlobalVariables.c.rect(this.x - this.radius, this.y - this.height/2, 2*this.radius, this.height)\r\n        GlobalVariables.c.textAlign = 'end' \r\n        GlobalVariables.c.fillText(this.name, this.x + this.radius, this.y-this.radius)\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.closePath()\r\n        \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.moveTo(this.x + this.radius, this.y - this.height/2)\r\n        GlobalVariables.c.lineTo(this.x + this.radius + 10, this.y)\r\n        GlobalVariables.c.lineTo(this.x + this.radius, this.y + this.height/2)\r\n        GlobalVariables.c.fill()\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/output.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 285,
    "kind": "class",
    "name": "Output",
    "memberof": "src/js/molecules/output.js",
    "static": true,
    "longname": "src/js/molecules/output.js~Output",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/output.js",
    "importStyle": "Output",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 286,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/output.js~Output",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/output.js~Output#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#value",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "type",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#type",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#name",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "height",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#height",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "member",
    "name": "radius",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#radius",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/output.js~Output",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/output.js~Output#updateValue",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "setID",
    "memberof": "src/js/molecules/output.js~Output",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/output.js~Output#setID",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "newID",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 296,
    "kind": "member",
    "name": "uniqueID",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#uniqueID",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/output.js~Output",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/output.js~Output#draw",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 298,
    "kind": "member",
    "name": "scaledX",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#scaledX",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 299,
    "kind": "member",
    "name": "scaledY",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#scaledY",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 301,
    "kind": "file",
    "name": "src/js/molecules/readme.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n\r\nexport default class Readme extends Atom{\r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.value = ''\r\n        this.atomType = 'Readme'\r\n        this.readmeText = 'Readme text here'\r\n        this.type = 'readme'\r\n        this.name = 'README'\r\n        this.radius = 20\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    updateSidebar(){\r\n        //updates the sidebar to display information about this node\r\n        \r\n        var valueList = super.updateSidebar() //call the super function\r\n        \r\n        this.createEditableValueListItem(valueList,this,'readmeText', 'Notes', false)\r\n        \r\n    }\r\n    \r\n    draw() {\r\n        \r\n        super.draw() //Super call to draw the rest\r\n        \r\n        //draw the two slashes on the node//\r\n        GlobalVariables.c.strokeStyle = '#949294'\r\n        GlobalVariables.c.lineWidth = 3\r\n        GlobalVariables.c.lineCap = 'round'\r\n        \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.moveTo(this.x - 11, this.y + 10)\r\n        GlobalVariables.c.lineTo(this.x, this.y - 10)\r\n        GlobalVariables.c.stroke()\r\n        \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.moveTo(this.x, this.y + 10)\r\n        GlobalVariables.c.lineTo(this.x + 11, this.y - 10)\r\n        GlobalVariables.c.stroke()\r\n    }\r\n    \r\n    setValue(newText) {\r\n        this.readmeText = newText\r\n    }\r\n    \r\n    requestReadme(){\r\n        //request any contributions from this atom to the readme\r\n        \r\n        return [this.readmeText]\r\n    }\r\n    \r\n    serialize(values){\r\n        //Save the readme text to the serial stream\r\n        var valuesObj = super.serialize(values)\r\n        \r\n        valuesObj.readmeText = this.readmeText\r\n        \r\n        return valuesObj\r\n        \r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/readme.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 302,
    "kind": "class",
    "name": "Readme",
    "memberof": "src/js/molecules/readme.js",
    "static": true,
    "longname": "src/js/molecules/readme.js~Readme",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/readme.js",
    "importStyle": "Readme",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 303,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 304,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#value",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "member",
    "name": "readmeText",
    "memberof": "src/js/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#readmeText",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "member",
    "name": "type",
    "memberof": "src/js/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#type",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#name",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "member",
    "name": "radius",
    "memberof": "src/js/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#radius",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#updateSidebar",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#draw",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "setValue",
    "memberof": "src/js/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#setValue",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [
      {
        "name": "newText",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "requestReadme",
    "memberof": "src/js/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#requestReadme",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "file",
    "name": "src/js/molecules/rectangle.js",
    "content": "import Atom from '../prototypes/atom'\r\n\r\nexport default class Rectangle extends Atom {\r\n\r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('input', 'x length', this, 'number', 10)\r\n        this.addIO('input', 'y length', this, 'number', 10)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        this.name = 'Rectangle'\r\n        this.atomType = 'Rectangle'\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    updateValue(){\r\n        try{\r\n            const values = [this.findIOValue('x length'),this.findIOValue('y length')]\r\n            this.basicThreadValueProcessing(values, \"rectangle\")\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/rectangle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 317,
    "kind": "class",
    "name": "Rectangle",
    "memberof": "src/js/molecules/rectangle.js",
    "static": true,
    "longname": "src/js/molecules/rectangle.js~Rectangle",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/rectangle.js",
    "importStyle": "Rectangle",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 318,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/rectangle.js~Rectangle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/rectangle.js~Rectangle#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 319,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/rectangle.js~Rectangle",
    "static": false,
    "longname": "src/js/molecules/rectangle.js~Rectangle#name",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 320,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/rectangle.js~Rectangle",
    "static": false,
    "longname": "src/js/molecules/rectangle.js~Rectangle#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/rectangle.js~Rectangle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/rectangle.js~Rectangle#updateValue",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 322,
    "kind": "file",
    "name": "src/js/molecules/regularPolygon.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\nexport default class RegularPolygon extends Atom {\r\n\r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('input', 'number of sides', this, 'number', 6)\r\n        this.addIO('input', 'radius', this, 'number', 10)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        this.name = 'RegularPolygon'\r\n        this.atomType = 'RegularPolygon'\r\n\r\n        // create the polygon code block\r\n        this.updateValue()\r\n        \r\n        this.setValues(values)\r\n    }\r\n\r\n    updateValue(){\r\n        this.value = GlobalVariables.api.circle({r: this.findIOValue('radius'), center: true, fn: this.findIOValue('number of sides')})\r\n        \r\n        super.updateValue()\r\n    }  \r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/regularPolygon.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 323,
    "kind": "class",
    "name": "RegularPolygon",
    "memberof": "src/js/molecules/regularPolygon.js",
    "static": true,
    "longname": "src/js/molecules/regularPolygon.js~RegularPolygon",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/regularPolygon.js",
    "importStyle": "RegularPolygon",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 324,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/regularPolygon.js~RegularPolygon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/regularPolygon.js~RegularPolygon#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 325,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/regularPolygon.js~RegularPolygon",
    "static": false,
    "longname": "src/js/molecules/regularPolygon.js~RegularPolygon#name",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 326,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/regularPolygon.js~RegularPolygon",
    "static": false,
    "longname": "src/js/molecules/regularPolygon.js~RegularPolygon#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/regularPolygon.js~RegularPolygon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/regularPolygon.js~RegularPolygon#updateValue",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 328,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/molecules/regularPolygon.js~RegularPolygon",
    "static": false,
    "longname": "src/js/molecules/regularPolygon.js~RegularPolygon#value",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 329,
    "kind": "file",
    "name": "src/js/molecules/rotate.js",
    "content": "import Atom from '../prototypes/atom'\r\n\r\nexport default class Rotate extends Atom {\r\n    \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', '')\r\n        this.addIO('input', 'x-axis degrees', this, 'number', 0)\r\n        this.addIO('input', 'y-axis degrees', this, 'number', 0)\r\n        this.addIO('input', 'z-axis degrees', this, 'number', 0)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        this.name = 'Rotate'\r\n        this.atomType = 'Rotate'\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    updateValue(){\r\n        try{\r\n            const values = [this.findIOValue('geometry').toLazyGeometry().toGeometry(), this.findIOValue('x-axis degrees'), this.findIOValue('y-axis degrees'), this.findIOValue('z-axis degrees')]\r\n            this.basicThreadValueProcessing(values, \"rotate\")\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/rotate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 330,
    "kind": "class",
    "name": "Rotate",
    "memberof": "src/js/molecules/rotate.js",
    "static": true,
    "longname": "src/js/molecules/rotate.js~Rotate",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/rotate.js",
    "importStyle": "Rotate",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 331,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/rotate.js~Rotate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/rotate.js~Rotate#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 332,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/rotate.js~Rotate",
    "static": false,
    "longname": "src/js/molecules/rotate.js~Rotate#name",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 333,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/rotate.js~Rotate",
    "static": false,
    "longname": "src/js/molecules/rotate.js~Rotate#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/rotate.js~Rotate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/rotate.js~Rotate#updateValue",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 335,
    "kind": "file",
    "name": "src/js/molecules/scale.js",
    "content": "import Atom from '../prototypes/atom'\r\n\r\nexport default class Scale extends Atom{\r\n    \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', '')\r\n        this.addIO('input', 'multiple', this, 'number', 10)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        this.name = 'Scale'\r\n        this.atomType = 'Scale'\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    updateValue(){\r\n        \r\n        try{\r\n            const values = [this.findIOValue('geometry').toLazyGeometry().toGeometry(), this.findIOValue('multiple')]\r\n            this.basicThreadValueProcessing(values, \"scale\")\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/scale.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 336,
    "kind": "class",
    "name": "Scale",
    "memberof": "src/js/molecules/scale.js",
    "static": true,
    "longname": "src/js/molecules/scale.js~Scale",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/scale.js",
    "importStyle": "Scale",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 337,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/scale.js~Scale",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/scale.js~Scale#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 338,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/scale.js~Scale",
    "static": false,
    "longname": "src/js/molecules/scale.js~Scale#name",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 339,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/scale.js~Scale",
    "static": false,
    "longname": "src/js/molecules/scale.js~Scale#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 340,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/scale.js~Scale",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/scale.js~Scale#updateValue",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 341,
    "kind": "file",
    "name": "src/js/molecules/shrinkwrap.js",
    "content": "import Atom from '../prototypes/atom.js'\r\nimport { addOrDeletePorts } from '../alwaysOneFreeInput.js'\r\n\r\nexport default class ShrinkWrap extends Atom{\r\n    \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        this.name = 'Shrink Wrap'\r\n        this.atomType = 'ShrinkWrap'\r\n        this.ioValues = []\r\n        this.closedSelection = 0\r\n        this.addedIO = false\r\n        \r\n        this.setValues(values)\r\n        \r\n        if (typeof this.ioValues !== 'undefined'){\r\n            this.ioValues.forEach(ioValue => { //for each saved value\r\n                this.addIO('input', ioValue.name, this, 'geometry', '')\r\n            })\r\n        }\r\n        \r\n        this.updateValue()\r\n    }\r\n    \r\n    updateValue(){\r\n        try{\r\n            var inputsList = []\r\n            this.inputs.forEach( io => {\r\n                if(io.connectors.length > 0){\r\n                    inputsList.push(io.getValue())\r\n                }\r\n            })\r\n            const values = inputsList.map(x => {\r\n                return x.toLazyGeometry().toGeometry()\r\n            })\r\n            \r\n            this.basicThreadValueProcessing(values, \"hull\")\r\n        }catch(err){this.setAlert(err)}\r\n        \r\n        //Delete or add ports as needed\r\n        addOrDeletePorts(this)\r\n    }\r\n     \r\n    serialize(savedObject){\r\n        var thisAsObject = super.serialize(savedObject)\r\n        \r\n        var ioValues = []\r\n        this.inputs.forEach(io => {\r\n            if (io.type == 'input'){\r\n                var saveIO = {\r\n                    name: io.name,\r\n                    ioValue: 10\r\n                }\r\n                ioValues.push(saveIO)\r\n            }\r\n        })\r\n        \r\n        ioValues.forEach(ioValue => {\r\n            thisAsObject.ioValues.push(ioValue)\r\n        })\r\n        \r\n        //Write the selection for if the chain is closed\r\n        thisAsObject.closedSelection = this.closedSelection\r\n        \r\n        return thisAsObject\r\n        \r\n    }\r\n    \r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/shrinkwrap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 342,
    "kind": "class",
    "name": "ShrinkWrap",
    "memberof": "src/js/molecules/shrinkwrap.js",
    "static": true,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/shrinkwrap.js",
    "importStyle": "ShrinkWrap",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 343,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 344,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#name",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 345,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 346,
    "kind": "member",
    "name": "ioValues",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#ioValues",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 347,
    "kind": "member",
    "name": "closedSelection",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#closedSelection",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 348,
    "kind": "member",
    "name": "addedIO",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#addedIO",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#updateValue",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "savedObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 351,
    "kind": "file",
    "name": "src/js/molecules/stretch.js",
    "content": "import Atom from '../prototypes/atom'\r\n\r\nexport default class Stretch extends Atom {\r\n    \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', '')\r\n        this.addIO('input', 'x', this, 'number', 1)\r\n        this.addIO('input', 'y', this, 'number', 1)\r\n        this.addIO('input', 'z', this, 'number', 1)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        this.name = 'Stretch'\r\n        this.atomType = 'Stretch'\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    updateValue(){\r\n        try{\r\n            const values = [this.findIOValue('geometry').toLazyGeometry().toGeometry(), this.findIOValue('x'),this.findIOValue('y'),this.findIOValue('z')]\r\n            \r\n            this.basicThreadValueProcessing(values, \"stretch\")\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/stretch.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 352,
    "kind": "class",
    "name": "Stretch",
    "memberof": "src/js/molecules/stretch.js",
    "static": true,
    "longname": "src/js/molecules/stretch.js~Stretch",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/stretch.js",
    "importStyle": "Stretch",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 353,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/stretch.js~Stretch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/stretch.js~Stretch#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 354,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/stretch.js~Stretch",
    "static": false,
    "longname": "src/js/molecules/stretch.js~Stretch#name",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 355,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/stretch.js~Stretch",
    "static": false,
    "longname": "src/js/molecules/stretch.js~Stretch#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 356,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/stretch.js~Stretch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/stretch.js~Stretch#updateValue",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 357,
    "kind": "file",
    "name": "src/js/molecules/tag.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\nexport default class Tag extends Atom{\r\n    \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', '')\r\n        this.addIO('input', 'tag', this, 'string', 'cutList')\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        this.name = 'Add Tag'\r\n        this.atomType = 'Tag'\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    updateValue(){\r\n        if(!GlobalVariables.evalLock && this.inputs.every(x => x.ready)){\r\n            try{\r\n                this.value = this.findIOValue('geometry').as(this.findIOValue('tag'))\r\n                this.clearAlert()\r\n            }catch(err){\r\n                this.setAlert(err)\r\n            }\r\n            \r\n            super.updateValue()\r\n        }\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/tag.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 358,
    "kind": "class",
    "name": "Tag",
    "memberof": "src/js/molecules/tag.js",
    "static": true,
    "longname": "src/js/molecules/tag.js~Tag",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/tag.js",
    "importStyle": "Tag",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 359,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/tag.js~Tag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/tag.js~Tag#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 360,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/tag.js~Tag",
    "static": false,
    "longname": "src/js/molecules/tag.js~Tag#name",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 361,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/tag.js~Tag",
    "static": false,
    "longname": "src/js/molecules/tag.js~Tag#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/tag.js~Tag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/tag.js~Tag#updateValue",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 363,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/molecules/tag.js~Tag",
    "static": false,
    "longname": "src/js/molecules/tag.js~Tag#value",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 364,
    "kind": "file",
    "name": "src/js/molecules/translate.js",
    "content": "import Atom from '../prototypes/atom'\r\n\r\nexport default class Translate extends Atom{\r\n    \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', '')\r\n        this.addIO('input', 'xDist', this, 'number', 0)\r\n        this.addIO('input', 'yDist', this, 'number', 0)\r\n        this.addIO('input', 'zDist', this, 'number', 0)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        this.name = 'Translate'\r\n        this.atomType = 'Translate'\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    updateValue(){\r\n        try{\r\n            const values = [this.findIOValue('geometry').toLazyGeometry().toGeometry(), this.findIOValue('xDist'), this.findIOValue('yDist'), this.findIOValue('zDist')]\r\n            \r\n            this.basicThreadValueProcessing(values, \"translate\")\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/translate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 365,
    "kind": "class",
    "name": "Translate",
    "memberof": "src/js/molecules/translate.js",
    "static": true,
    "longname": "src/js/molecules/translate.js~Translate",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/translate.js",
    "importStyle": "Translate",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 366,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/translate.js~Translate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/translate.js~Translate#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 367,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/translate.js~Translate",
    "static": false,
    "longname": "src/js/molecules/translate.js~Translate#name",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 368,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/translate.js~Translate",
    "static": false,
    "longname": "src/js/molecules/translate.js~Translate#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/translate.js~Translate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/translate.js~Translate#updateValue",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 370,
    "kind": "file",
    "name": "src/js/molecules/union.js",
    "content": "import Atom from '../prototypes/atom'\r\n\r\nexport default class Union extends Atom {\r\n    \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        this.addIO('input', 'geometry1', this, 'geometry', '')\r\n        this.addIO('input', 'geometry2', this, 'geometry', '')\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        this.name = 'Union'\r\n        this.atomType = 'Union'\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    updateValue(){\r\n        try{\r\n            const values = [this.findIOValue('geometry1').toLazyGeometry().toGeometry(), this.findIOValue('geometry2').toLazyGeometry().toGeometry()]\r\n            \r\n            this.basicThreadValueProcessing(values, \"union\")\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n    \r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/union.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 371,
    "kind": "class",
    "name": "Union",
    "memberof": "src/js/molecules/union.js",
    "static": true,
    "longname": "src/js/molecules/union.js~Union",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/union.js",
    "importStyle": "Union",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 372,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/union.js~Union",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/union.js~Union#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 373,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/union.js~Union",
    "static": false,
    "longname": "src/js/molecules/union.js~Union#name",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 374,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/union.js~Union",
    "static": false,
    "longname": "src/js/molecules/union.js~Union#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/union.js~Union",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/union.js~Union#updateValue",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 376,
    "kind": "file",
    "name": "src/js/prototypes/atom.js",
    "content": "import AttachmentPoint from './attachmentpoint'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\nexport default class Atom {\r\n\r\n    constructor(values){\r\n        //Setup default values\r\n        this.inputs = []\r\n        this.output = null\r\n        \r\n        this.x = 0\r\n        this.y = 0\r\n        this.radius = 20\r\n        this.defaultColor = '#F3EFEF'\r\n        this.selectedColor = '#484848'\r\n        this.strokeColor = '#484848'\r\n        this.selected = false\r\n        this.color = '#F3EFEF'\r\n        this.name = 'name'\r\n        this.parentMolecule = null\r\n        this.value = GlobalVariables.api.sphere()\r\n        this.isMoving = false\r\n        this.x = 0\r\n        this.y = 0\r\n        this.alertMessage = ''\r\n        this.processing = false\r\n        \r\n\r\n        for(var key in values) {\r\n            this[key] = values[key]\r\n        }\r\n        \r\n    }\r\n    \r\n    setValues(values){\r\n        //Assign the object to have the passed in values\r\n        \r\n        for(var key in values) {\r\n            this[key] = values[key]\r\n        }\r\n        \r\n        if (typeof this.ioValues !== 'undefined') {\r\n            this.ioValues.forEach(ioValue => { //for each saved value\r\n                this.inputs.forEach(io => {  //Find the matching IO and set it to be the saved value\r\n                    if(ioValue.name == io.name && io.type == 'input'){\r\n                        io.setValue(ioValue.ioValue)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }\r\n    \r\n    draw() {   \r\n        this.inputs.forEach(child => {\r\n            child.draw()       \r\n        })\r\n      \r\n        if(this.processing){\r\n            GlobalVariables.c.fillStyle = 'blue'\r\n        }else{\r\n            GlobalVariables.c.fillStyle = this.color\r\n        }\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.font = '10px Work Sans'\r\n\r\n        //make it impossible to draw atoms too close to the edge\r\n        //not sure what x left margin should be because if it's too close it would cover expanded text\r\n        var canvasFlow = document.querySelector('#flow-canvas')\r\n        if (this.x < this.radius){\r\n            this.x = this.radius\r\n        }\r\n        else if (this.y<this.radius){\r\n            this.y = this.radius \r\n        }\r\n        else if (this.x + this.radius > canvasFlow.width/GlobalVariables.scale1){\r\n            this.x = canvasFlow.width/GlobalVariables.scale1 - this.radius\r\n        }\r\n        else if (this.y + this.radius > canvasFlow.height/GlobalVariables.scale1){\r\n            this.y = canvasFlow.height/GlobalVariables.scale1 - this.radius\r\n        }\r\n        GlobalVariables.c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false)\r\n        GlobalVariables.c.textAlign = 'start' \r\n        GlobalVariables.c.fillText(this.name, this.x + this.radius, this.y-this.radius)\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.strokeStyle = this.strokeColor\r\n        GlobalVariables.c.lineWidth = 1\r\n        GlobalVariables.c.stroke()\r\n        GlobalVariables.c.closePath()\r\n      \r\n        if (this.alertMessage.length > 0){\r\n            //Draw Alert block  \r\n            GlobalVariables.c.beginPath()\r\n            const padding = 10\r\n            GlobalVariables.c.fillStyle = 'red'\r\n            GlobalVariables.c.rect(\r\n                this.x + this.radius - padding/2, \r\n                this.y - this.radius + padding/2, \r\n                GlobalVariables.c.measureText(this.alertMessage).width + padding, \r\n                - (parseInt(GlobalVariables.c.font) + padding))\r\n            GlobalVariables.c.fill()\r\n            GlobalVariables.c.strokeStyle = 'black'\r\n            GlobalVariables.c.lineWidth = 1\r\n            GlobalVariables.c.stroke()\r\n            GlobalVariables.c.closePath()\r\n\r\n            GlobalVariables.c.beginPath()\r\n            GlobalVariables.c.fillStyle = 'black'\r\n            GlobalVariables.c.fillText(this.alertMessage, this.x + this.radius, this.y - this.radius) \r\n            GlobalVariables.c.closePath()\r\n        }\r\n    }\r\n    \r\n    addIO(type, name, target, valueType, defaultValue){\r\n        \r\n        if(target.inputs.find(o => (o.name === name && o.type === type))== undefined){ //Check to make sure there isn't already an IO with the same type and name\r\n            //compute the baseline offset from parent node\r\n            var offset\r\n            if (type == 'input'){\r\n                offset = -1* target.scaledRadius\r\n            }\r\n            else{\r\n                offset = target.scaledRadius\r\n            }\r\n            var newAp = new AttachmentPoint({\r\n                parentMolecule: target,\r\n                defaultOffsetX: offset,\r\n                defaultOffsetY: 0,\r\n                type: type,\r\n                valueType: valueType,\r\n                name: name,\r\n                value: defaultValue,\r\n                defaultValue: defaultValue,\r\n                uniqueID: GlobalVariables.generateUniqueID(),\r\n                atomType: 'AttachmentPoint',\r\n                ready: !GlobalVariables.evalLock\r\n            })\r\n            \r\n            if(type == 'input'){\r\n                target.inputs.push(newAp)\r\n            }else{\r\n                target.output = newAp\r\n            }\r\n        }\r\n    }\r\n    \r\n    removeIO(type, name, target){\r\n        //Remove the target IO attachment point\r\n        \r\n        target.inputs.forEach(io => {\r\n            if(io.name == name && io.type == type){\r\n                io.deleteSelf()\r\n                target.inputs.splice(target.inputs.indexOf(io),1)\r\n            }\r\n        })\r\n    }\r\n\r\n    setAlert(message){\r\n        this.color = 'orange'\r\n        this.alertMessage = String(message)\r\n\r\n    }\r\n\r\n    clearAlert(){\r\n        this.color = this.defaultColor\r\n        this.alertMessage = ''\r\n    }\r\n    \r\n    clickDown(x,y, clickProcessed){\r\n        //Returns true if something was done with the click\r\n        \r\n        this.inputs.forEach(child => {\r\n            if(child.clickDown(x,y, clickProcessed) == true){\r\n                clickProcessed = true\r\n            }\r\n        })\r\n        if(this.output){\r\n            if(this.output.clickDown(x,y, clickProcessed) == true){\r\n                clickProcessed = true\r\n            }\r\n        }\r\n        \r\n        //If none of the inputs processed the click see if the atom should, if not clicked, then deselect\r\n        if(!clickProcessed && GlobalVariables.distBetweenPoints(x, this.x, y, this.y) < this.radius){\r\n            this.color = this.selectedColor\r\n            this.isMoving = true\r\n            this.selected = true\r\n            this.strokeColor = this.defaultColor\r\n            this.updateSidebar()\r\n            this.sendToRender()\r\n            clickProcessed = true\r\n        }\r\n        else{\r\n            this.color = this.defaultColor\r\n            this.strokeColor = this.selectedColor\r\n            this.selected = false\r\n        }\r\n        \r\n        return clickProcessed \r\n    }\r\n\r\n    doubleClick(x,y){\r\n        //returns true if something was done with the click\r\n        \r\n        \r\n        var clickProcessed = false\r\n        \r\n        var distFromClick = GlobalVariables.distBetweenPoints(x, this.x, y, this.y)\r\n        \r\n        if (distFromClick < this.x){\r\n            clickProcessed = true\r\n        }\r\n        \r\n        return clickProcessed \r\n    }\r\n\r\n    clickUp(x,y){\r\n        this.isMoving = false\r\n        \r\n        this.inputs.forEach(child => {\r\n            child.clickUp(x,y)     \r\n        })\r\n        if(this.output){\r\n            this.output.clickUp(x,y)\r\n        }\r\n    }\r\n\r\n    clickMove(x,y){\r\n        if (this.isMoving == true){\r\n            this.x = x\r\n            this.y = y\r\n        }\r\n        \r\n        this.inputs.forEach(child => {\r\n            child.clickMove(x,y)       \r\n        })\r\n        if(this.output){\r\n            this.output.clickMove(x,y)\r\n        }\r\n    }\r\n    \r\n    keyPress(key){\r\n        //runs whenever a key is pressed\r\n        if (['Delete', 'Backspace'].includes(key)){\r\n            if(this.selected == true && document.getElementsByTagName('BODY')[0] == document.activeElement){\r\n                //If this atom is selected AND the body is active (meaning we are not typing in a text box)\r\n                this.deleteNode()\r\n            }\r\n        }\r\n        \r\n        this.inputs.forEach(child => {\r\n            child.keyPress(key)\r\n        })\r\n    }\r\n    \r\n    updateSidebar(){\r\n        //updates the sidebar to display information about this node\r\n        \r\n        var valueList = this.initializeSideBar()\r\n        \r\n        //Add options to set all of the inputs\r\n        this.inputs.forEach(input => {\r\n            if(input.type == 'input' && input.valueType != 'geometry' && input.connectors.length == 0){\r\n                this.createEditableValueListItem(valueList,input,'value', input.name, true)\r\n            }\r\n        })\r\n        \r\n        return valueList\r\n    }\r\n    \r\n    initializeSideBar(){\r\n        //remove everything in the sideBar now\r\n        let sideBar = document.querySelector('.sideBar')\r\n        while (sideBar.firstChild) {\r\n            sideBar.removeChild(sideBar.firstChild)\r\n        }\r\n        \r\n        //add the name as a title\r\n        var name = document.createElement('h1')\r\n        name.textContent = this.name\r\n        name.setAttribute('class','doc-title')\r\n        sideBar.appendChild(name)\r\n        \r\n        //Create a list element\r\n        var valueList = document.createElement('ul')\r\n        sideBar.appendChild(valueList)\r\n        valueList.setAttribute('class', 'sidebar-list')\r\n        \r\n        return valueList\r\n    }\r\n    \r\n    deleteNode(){\r\n        //deletes this node and all of it's inputs\r\n        \r\n        this.inputs.forEach(child => {\r\n            child.deleteSelf()       \r\n        })\r\n        if(this.output){\r\n            this.output.deleteSelf()\r\n        }\r\n        \r\n        this.parent.nodesOnTheScreen.splice(this.parent.nodesOnTheScreen.indexOf(this),1) //remove this node from the list\r\n        \r\n        GlobalVariables.currentMolecule.backgroundClick()\r\n    }\r\n    \r\n    update() {\r\n        \r\n        this.inputs.forEach(child => {\r\n            child.update()     \r\n        })\r\n        if(this.output){\r\n            this.output.update()\r\n        }\r\n        \r\n        this.draw()\r\n    }\r\n    \r\n    serialize(){\r\n        \r\n        var ioValues = []\r\n        this.inputs.forEach(io => {\r\n            if (typeof io.getValue() == 'number'){\r\n                var saveIO = {\r\n                    name: io.name,\r\n                    ioValue: io.getValue()\r\n                }\r\n                ioValues.push(saveIO)\r\n            }\r\n        })\r\n        \r\n        var object = {\r\n            atomType: this.atomType,\r\n            name: this.name,\r\n            x: this.x,\r\n            y: this.y,\r\n            uniqueID: this.uniqueID,\r\n            ioValues: ioValues\r\n        }\r\n        \r\n        return object\r\n    }\r\n    \r\n    requestReadme(){\r\n        //request any contributions from this atom to the readme\r\n        \r\n        return []\r\n    }\r\n    \r\n    updateValue(){\r\n        this.displayAndPropogate()\r\n    }\r\n    \r\n    displayAndPropogate(){\r\n        //If this atom is selected, send the updated value to the renderer\r\n        if (this.selected){\r\n            this.sendToRender()\r\n        }\r\n        \r\n        //Set the output nodes with name 'geometry' to be the generated code\r\n        if(this.output){\r\n            this.output.setValue(this.value)\r\n        }\r\n    }\r\n    \r\n    basicThreadValueProcessing(values, key){\r\n        if(!GlobalVariables.evalLock && this.inputs.every(x => x.ready)){\r\n            this.processing = true\r\n            this.clearAlert()\r\n            \r\n            const computeValue = async (values, key) => {\r\n                try{\r\n                    return await GlobalVariables.ask({values: values, key: key})\r\n                }\r\n                catch(err){\r\n                    this.setAlert(err)\r\n                }\r\n            }\r\n            \r\n            computeValue(values, key).then(result => {\r\n                if (result != -1 ){\r\n                    this.value = GlobalVariables.api.Shape.fromGeometry(result)\r\n                    this.displayAndPropogate()\r\n                }else{\r\n                    this.setAlert(\"Unable to compute\")\r\n                }\r\n                this.processing = false\r\n            })\r\n        }\r\n    }\r\n    \r\n    unlock(){\r\n        //Runs right after the loading process to unlock attachment points which have no connectors attached\r\n        this.inputs.forEach(input => {\r\n            if(input.connectors.length == 0){\r\n                input.ready = true\r\n            }\r\n        })\r\n        this.updateValue()\r\n    }\r\n    \r\n    sendToRender(){\r\n        //Send code to JSxCAD to render\r\n        try{\r\n            GlobalVariables.display.writeToDisplay(this.value)\r\n        }\r\n        catch(err){\r\n            this.setAlert(err)    \r\n        }\r\n\r\n    }\r\n    \r\n    findIOValue(ioName){\r\n        //find the value of an input for a given name\r\n        \r\n        ioName = ioName.split('~').join('')\r\n        var ioValue = null\r\n        \r\n        this.inputs.forEach(child => {\r\n            if(child.name == ioName && child.type == 'input'){\r\n                ioValue = child.getValue()\r\n            }\r\n        })\r\n        \r\n        return ioValue\r\n    }\r\n    \r\n    createEditableValueListItem(list,object,key, label, resultShouldBeNumber, callBack){\r\n        var listElement = document.createElement('LI')\r\n        list.appendChild(listElement)\r\n        \r\n        \r\n        //Div which contains the entire element\r\n        var div = document.createElement('div')\r\n        listElement.appendChild(div)\r\n        div.setAttribute('class', 'sidebar-item sidebar-editable-div')\r\n        \r\n        //Left div which displays the label\r\n        var labelDiv = document.createElement('div')\r\n        div.appendChild(labelDiv)\r\n        var labelText = document.createTextNode(label + ':')\r\n        labelDiv.appendChild(labelText)\r\n        labelDiv.setAttribute('class', 'sidebar-subitem label-item')\r\n        \r\n        \r\n        //Right div which is editable and displays the value\r\n        var valueTextDiv = document.createElement('div')\r\n        div.appendChild(valueTextDiv)\r\n        var valueText = document.createTextNode(object[key])\r\n        valueTextDiv.appendChild(valueText)\r\n        valueTextDiv.setAttribute('contenteditable', 'true')\r\n        valueTextDiv.setAttribute('class', 'sidebar-subitem editing-item')\r\n        var thisID = label+GlobalVariables.generateUniqueID()\r\n        valueTextDiv.setAttribute('id', thisID)\r\n        \r\n        \r\n        document.getElementById(thisID).addEventListener('focusout', () => {\r\n            var valueInBox = document.getElementById(thisID).textContent\r\n            if(resultShouldBeNumber){\r\n                valueInBox = parseFloat(valueInBox)\r\n            }\r\n            \r\n            //If the target is an attachmentPoint then call the setter function\r\n            if(object instanceof AttachmentPoint){\r\n                object.setValue(valueInBox)\r\n            }\r\n            else{\r\n                object[key] = valueInBox\r\n                callBack(valueInBox)\r\n            }\r\n        })\r\n        \r\n        //prevent the return key from being used when editing a value\r\n        document.getElementById(thisID).addEventListener('keypress', function(evt) {\r\n            if (evt.which === 13) {\r\n                evt.preventDefault()\r\n                document.getElementById(thisID).blur()  //shift focus away if someone presses enter\r\n            }\r\n        })\r\n\r\n    }\r\n    \r\n    createNonEditableValueListItem(list,object,key, label){\r\n        var listElement = document.createElement('LI')\r\n        list.appendChild(listElement)\r\n        \r\n        \r\n        //Div which contains the entire element\r\n        var div = document.createElement('div')\r\n        listElement.appendChild(div)\r\n        div.setAttribute('class', 'sidebar-item sidebar-editable-div')\r\n        \r\n        //Left div which displays the label\r\n        var labelDiv = document.createElement('div')\r\n        div.appendChild(labelDiv)\r\n        var labelText = document.createTextNode(label + ':')\r\n        labelDiv.appendChild(labelText)\r\n        labelDiv.setAttribute('class', 'sidebar-subitem label-item')\r\n        \r\n        \r\n        //Right div which is editable and displays the value\r\n        var valueTextDiv = document.createElement('div')\r\n        div.appendChild(valueTextDiv)\r\n        var valueText = document.createTextNode(object[key])\r\n        valueTextDiv.appendChild(valueText)\r\n        valueTextDiv.setAttribute('contenteditable', 'false')\r\n        valueTextDiv.setAttribute('class', 'sidebar-subitem noediting-item')\r\n        var thisID = label+GlobalVariables.generateUniqueID()\r\n        valueTextDiv.setAttribute('id', thisID)\r\n        \r\n\r\n    }\r\n\r\n    createDropDown(list,parent,options,selectedOption, description){\r\n        var listElement = document.createElement('LI')\r\n        list.appendChild(listElement)\r\n        \r\n        \r\n        //Div which contains the entire element\r\n        var div = document.createElement('div')\r\n        listElement.appendChild(div)\r\n        div.setAttribute('class', 'sidebar-item')\r\n        \r\n        //Left div which displays the label\r\n        var labelDiv = document.createElement('div')\r\n        div.appendChild(labelDiv)\r\n        var labelText = document.createTextNode(description)\r\n        labelDiv.appendChild(labelText)\r\n        labelDiv.setAttribute('class', 'sidebar-subitem')\r\n        \r\n        \r\n        //Right div which is editable and displays the value\r\n        var valueTextDiv = document.createElement('div')\r\n        div.appendChild(valueTextDiv)\r\n        var dropDown = document.createElement('select')\r\n        options.forEach(option => {\r\n            var op = new Option()\r\n            op.value = options.findIndex(thisOption => thisOption === option)\r\n            op.text = option\r\n            dropDown.options.add(op)\r\n        })\r\n        valueTextDiv.appendChild(dropDown)\r\n        valueTextDiv.setAttribute('class', 'sidebar-subitem')\r\n        \r\n        dropDown.selectedIndex = selectedOption //display the current selection\r\n        \r\n        dropDown.addEventListener(\r\n            'change',\r\n            function() { parent.changeEquation(dropDown.value) },\r\n            false\r\n        )\r\n    }\r\n\r\n    createButton(list,parent,buttonText,functionToCall){\r\n        var listElement = document.createElement('LI')\r\n        list.appendChild(listElement)\r\n        \r\n        \r\n        //Div which contains the entire element\r\n        var div = document.createElement('div')\r\n        listElement.appendChild(div)\r\n        div.setAttribute('class', 'sidebar-item-no-hover')\r\n        \r\n        \r\n        //Right div which is button\r\n        var valueTextDiv = document.createElement('div')\r\n        div.appendChild(valueTextDiv)\r\n        var button = document.createElement('button')\r\n        var buttonTextNode = document.createTextNode(buttonText)\r\n        button.setAttribute('class', 'sidebar_button')\r\n        button.appendChild(buttonTextNode)\r\n        valueTextDiv.appendChild(button)\r\n        valueTextDiv.setAttribute('class', 'sidebar-subitem')\r\n        \r\n        button.addEventListener(\r\n            'mousedown',\r\n            function() { functionToCall(parent) } ,\r\n            false\r\n        )\r\n    }\r\n\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/prototypes/atom.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 377,
    "kind": "class",
    "name": "Atom",
    "memberof": "src/js/prototypes/atom.js",
    "static": true,
    "longname": "src/js/prototypes/atom.js~Atom",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/prototypes/atom.js",
    "importStyle": "Atom",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 378,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 379,
    "kind": "member",
    "name": "inputs",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#inputs",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 380,
    "kind": "member",
    "name": "output",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#output",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 381,
    "kind": "member",
    "name": "x",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#x",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "member",
    "name": "y",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#y",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 383,
    "kind": "member",
    "name": "radius",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#radius",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 384,
    "kind": "member",
    "name": "defaultColor",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#defaultColor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "member",
    "name": "selectedColor",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#selectedColor",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 386,
    "kind": "member",
    "name": "strokeColor",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#strokeColor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 387,
    "kind": "member",
    "name": "selected",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#selected",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 388,
    "kind": "member",
    "name": "color",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#color",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 389,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#name",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 390,
    "kind": "member",
    "name": "parentMolecule",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#parentMolecule",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 391,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#value",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 392,
    "kind": "member",
    "name": "isMoving",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#isMoving",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 395,
    "kind": "member",
    "name": "alertMessage",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#alertMessage",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 396,
    "kind": "member",
    "name": "processing",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#processing",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 397,
    "kind": "member",
    "name": "[key]",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#[key]",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 398,
    "kind": "method",
    "name": "setValues",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#setValues",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 400,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#draw",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "addIO",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#addIO",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "valueType",
        "types": [
          "*"
        ]
      },
      {
        "name": "defaultValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "removeIO",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#removeIO",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 407,
    "kind": "method",
    "name": "setAlert",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#setAlert",
    "access": "public",
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "clearAlert",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#clearAlert",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 413,
    "kind": "method",
    "name": "clickDown",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#clickDown",
    "access": "public",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "clickProcessed",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 421,
    "kind": "method",
    "name": "doubleClick",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#doubleClick",
    "access": "public",
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "method",
    "name": "clickUp",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#clickUp",
    "access": "public",
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 424,
    "kind": "method",
    "name": "clickMove",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#clickMove",
    "access": "public",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 427,
    "kind": "method",
    "name": "keyPress",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#keyPress",
    "access": "public",
    "description": null,
    "lineNumber": 241,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 428,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#updateSidebar",
    "access": "public",
    "description": null,
    "lineNumber": 255,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 429,
    "kind": "method",
    "name": "initializeSideBar",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#initializeSideBar",
    "access": "public",
    "description": null,
    "lineNumber": 270,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "deleteNode",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#deleteNode",
    "access": "public",
    "description": null,
    "lineNumber": 291,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "update",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#update",
    "access": "public",
    "description": null,
    "lineNumber": 306,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 432,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 318,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 433,
    "kind": "method",
    "name": "requestReadme",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#requestReadme",
    "access": "public",
    "description": null,
    "lineNumber": 343,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 434,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#updateValue",
    "access": "public",
    "description": null,
    "lineNumber": 349,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 435,
    "kind": "method",
    "name": "displayAndPropogate",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#displayAndPropogate",
    "access": "public",
    "description": null,
    "lineNumber": 353,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 436,
    "kind": "method",
    "name": "basicThreadValueProcessing",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#basicThreadValueProcessing",
    "access": "public",
    "description": null,
    "lineNumber": 365,
    "undocument": true,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 440,
    "kind": "method",
    "name": "unlock",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#unlock",
    "access": "public",
    "description": null,
    "lineNumber": 391,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 441,
    "kind": "method",
    "name": "sendToRender",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#sendToRender",
    "access": "public",
    "description": null,
    "lineNumber": 401,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 442,
    "kind": "method",
    "name": "findIOValue",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#findIOValue",
    "access": "public",
    "description": null,
    "lineNumber": 412,
    "undocument": true,
    "params": [
      {
        "name": "ioName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 443,
    "kind": "method",
    "name": "createEditableValueListItem",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#createEditableValueListItem",
    "access": "public",
    "description": null,
    "lineNumber": 427,
    "undocument": true,
    "params": [
      {
        "name": "list",
        "types": [
          "*"
        ]
      },
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "label",
        "types": [
          "*"
        ]
      },
      {
        "name": "resultShouldBeNumber",
        "types": [
          "*"
        ]
      },
      {
        "name": "callBack",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 444,
    "kind": "method",
    "name": "createNonEditableValueListItem",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#createNonEditableValueListItem",
    "access": "public",
    "description": null,
    "lineNumber": 482,
    "undocument": true,
    "params": [
      {
        "name": "list",
        "types": [
          "*"
        ]
      },
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "label",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 445,
    "kind": "method",
    "name": "createDropDown",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#createDropDown",
    "access": "public",
    "description": null,
    "lineNumber": 513,
    "undocument": true,
    "params": [
      {
        "name": "list",
        "types": [
          "*"
        ]
      },
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "selectedOption",
        "types": [
          "*"
        ]
      },
      {
        "name": "description",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "createButton",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#createButton",
    "access": "public",
    "description": null,
    "lineNumber": 553,
    "undocument": true,
    "params": [
      {
        "name": "list",
        "types": [
          "*"
        ]
      },
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "buttonText",
        "types": [
          "*"
        ]
      },
      {
        "name": "functionToCall",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 447,
    "kind": "file",
    "name": "src/js/prototypes/attachmentpoint.js",
    "content": "import Connector from './connector'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\nexport default class AttachmentPoint {\r\n    constructor(values){\r\n \r\n        this.defaultRadius = 8\r\n        this.expandedRadius = false\r\n        this.radius = 8\r\n        \r\n        this.hoverDetectRadius = 8\r\n        this.hoverOffsetX = 0\r\n        this.hoverOffsetY = 0\r\n        this.uniqueID = 0\r\n        this.defaultOffsetX = 0\r\n        this.defaultOffsetY = 0\r\n        this.offsetX = 0\r\n        this.offsetY = 0\r\n        this.showHoverText = false\r\n        this.atomType = 'AttachmentPoint'\r\n        \r\n        \r\n        this.valueType = 'number' //options are number, geometry, array\r\n        this.type = 'output'\r\n        this.value = 10\r\n        this.ready = false //Used to order initilization when program is loaded\r\n        \r\n        this.connectors = []\r\n        \r\n        this.offsetX = this.defaultOffsetX\r\n        this.offsetY = this.defaultOffsetY\r\n        \r\n        for(var key in values) {\r\n            this[key] = values[key]\r\n        }\r\n        \r\n        this.clickMove(0,0) //trigger a refresh to get all the current values\r\n    }\r\n    \r\n    draw() {\r\n\r\n        this.defaultRadius = this.radius\r\n        this.radius = this.parentMolecule.radius/2.2\r\n        this.hoverDetectRadius = this.parentMolecule.radius\r\n\r\n        if (this.expandedRadius){\r\n            this.radius = this.parentMolecule.radius/1.6\r\n        }\r\n        if(this.parentMolecule.inputs.length < 2 && this.type == 'input'){\r\n            this.x= this.parentMolecule.x-this.parentMolecule.radius\r\n            this.y= this.parentMolecule.y\r\n        }    \r\n        else if(this.parentMolecule.inputs.length < 2 && this.type == 'output'){\r\n            this.x= this.parentMolecule.x+this.parentMolecule.radius\r\n            this.y= this.parentMolecule.y\r\n        }                 \r\n\r\n\r\n        var txt = this.name\r\n        var textWidth = GlobalVariables.c.measureText(txt).width\r\n        GlobalVariables.c.font = '10px Work Sans'\r\n\r\n        var bubbleColor = '#008080'\r\n        var scaleRadiusDown = this.radius*.7\r\n        var halfRadius = this.radius*.5\r\n\r\n        \r\n        if (this.showHoverText){\r\n            if(this.type == 'input'){\r\n               \r\n                \r\n                GlobalVariables.c.globalCompositeOperation='destination-over'\r\n                GlobalVariables.c.beginPath()\r\n\r\n                if (this.name === 'geometry'){\r\n                    GlobalVariables.c.fillStyle = this.parentMolecule.selectedColor   \r\n                }\r\n                else{\r\n                    GlobalVariables.c.fillStyle = bubbleColor\r\n                }\r\n                if(this.radius == this.defaultRadius){\r\n                    GlobalVariables.c.rect(this.x - textWidth - this.radius - halfRadius, this.y - this.radius, textWidth + this.radius + halfRadius , this.radius*2)   \r\n                    GlobalVariables.c.arc(this.x - textWidth - this.radius - halfRadius, this.y, this.radius, 0, Math.PI * 2, false)\r\n                }\r\n            \r\n                GlobalVariables.c.fill()\r\n                \r\n                \r\n                GlobalVariables.c.globalCompositeOperation='source-over'\r\n                GlobalVariables.c.beginPath()\r\n                GlobalVariables.c.fillStyle = this.parentMolecule.defaultColor\r\n                GlobalVariables.c.textAlign = 'end'\r\n                GlobalVariables.c.fillText(this.name, this.x - (this.radius + 3), this.y+2)\r\n                GlobalVariables.c.fill()\r\n                GlobalVariables.c.closePath()\r\n            }\r\n            else{\r\n\r\n                GlobalVariables.c.beginPath()\r\n                    \r\n                if (this.name === 'geometry'){\r\n                    GlobalVariables.c.fillStyle = this.parentMolecule.selectedColor   \r\n                }\r\n                else{\r\n                    GlobalVariables.c.fillStyle = bubbleColor\r\n                }\r\n\r\n                GlobalVariables.c.rect(this.x, this.y - scaleRadiusDown, textWidth + this.radius + halfRadius, scaleRadiusDown*2)\r\n                GlobalVariables.c.arc(this.x + textWidth + this.radius + halfRadius, this.y, scaleRadiusDown, 0, Math.PI * 2, false)\r\n                GlobalVariables.c.fill()\r\n                GlobalVariables.c.closePath()\r\n                GlobalVariables.c.beginPath()\r\n                GlobalVariables.c.fillStyle = this.parentMolecule.defaultColor\r\n                GlobalVariables.c.textAlign = 'start' \r\n                GlobalVariables.c.fillText(this.name, (this.x + halfRadius) + (this.radius + 3), this.y+2)\r\n                GlobalVariables.c.fill()\r\n                GlobalVariables.c.closePath()\r\n            }\r\n\r\n        }\r\n \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = this.parentMolecule.color\r\n        GlobalVariables.c.strokeStyle = this.parentMolecule.strokeColor\r\n        GlobalVariables.c.lineWidth = 1\r\n        GlobalVariables.c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false)\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.stroke()\r\n        GlobalVariables.c.closePath()  \r\n\r\n        if (this.defaultRadius != this.radius){\r\n            if (this.type == 'output'){     \r\n                this.offsetX = this.parentMolecule.radius\r\n            }\r\n            else{\r\n                this.offsetX = -1* this.parentMolecule.radius\r\n            }\r\n        }\r\n    }\r\n\r\n    clickDown(x,y, clickProcessed){\r\n        if(GlobalVariables.distBetweenPoints (this.x, x, this.y, y) < this.defaultRadius && !clickProcessed){\r\n            if(this.type == 'output'){                  //begin to extend a connector from this if it is an output\r\n                var connector = new Connector({\r\n                    parentMolecule: this.parentMolecule, \r\n                    attachmentPoint1: this,\r\n                    atomType: 'Connector',\r\n                    isMoving: true\r\n                })\r\n                this.connectors.push(connector)\r\n            }\r\n            \r\n            if(this.type == 'input'){ //connectors can only be selected by clicking on an input\r\n                this.connectors.forEach(connector => {     //select any connectors attached to this node\r\n                    connector.selected = true\r\n                })\r\n            }\r\n            \r\n            return true //indicate that the click was handled by this object\r\n        }\r\n        else{\r\n            if(this.type == 'input'){ //connectors can only be selected by clicking on an input\r\n                this.connectors.forEach(connector => {      //unselect any connectors attached to this node\r\n                    connector.selected = false\r\n                })\r\n            }\r\n            return false //indicate that the click was not handled by this object\r\n        }\r\n    }\r\n\r\n    clickUp(x,y){\r\n        this.connectors.forEach(connector => {\r\n            connector.clickUp(x, y)       \r\n        })\r\n    }\r\n\r\n    clickMove(x,y){\r\n        \r\n        //expand if touched by mouse\r\n        // var distFromCursor = GlobalVariables.distBetweenPoints (this.x, x, this.y, y);\r\n        var distFromCursorParent = Math.abs(GlobalVariables.distBetweenPoints (this.parentMolecule.x -this.parentMolecule.radius, x, this.parentMolecule.y, y)) \r\n        //If we are close to the attachment point move it to it's hover location to make it accessible\r\n        if (distFromCursorParent < this.parentMolecule.radius*3){\r\n            if (this.type == 'input'){\r\n                this.expandOut(distFromCursorParent)\r\n            }\r\n            this.showHoverText = true\r\n            if (GlobalVariables.distBetweenPoints(this.x, x, this.y, y) < this.radius){\r\n                this.expandedRadius = true    \r\n            }  \r\n            else{\r\n                this.expandedRadius = false      \r\n            }\r\n        }\r\n        else{\r\n            this.reset()\r\n        }\r\n        \r\n        this.connectors.forEach(connector => {\r\n            connector.clickMove(x, y)       \r\n        })\r\n    }\r\n\r\n    reset(){\r\n        if (this.type == 'input'){\r\n            this.offsetX = -1* this.parentMolecule.radius\r\n            this.offsetY = this.defaultOffsetY\r\n        }\r\n        this.showHoverText = false\r\n    }\r\n\r\n    expandOut(cursorDistance){\r\n        const inputList = this.parentMolecule.inputs.filter(input => input.type == 'input')\r\n        const attachmentPointNumber = inputList.indexOf(this) \r\n        const anglePerIO = (Math.PI) / (inputList.length + 1)\r\n        // angle correction so that it centers menu adjusting to however many attachment points there are \r\n        const angleCorrection = -Math.PI/2 - anglePerIO\r\n        this.hoverOffsetY = Math.round(1.8 * this.parentMolecule.radius * (Math.sin((attachmentPointNumber * anglePerIO) - angleCorrection))) \r\n        this.hoverOffsetX = Math.round(1.5 * this.parentMolecule.radius * (Math.cos((attachmentPointNumber * anglePerIO) - angleCorrection)))\r\n        this.offsetX = Math.max( this.offsetX, this.hoverOffsetX)\r\n        cursorDistance = Math.max( cursorDistance, 30)\r\n        this.offsetY = Math.min( this.offsetY, -this.hoverOffsetY)\r\n        this.offsetY = Math.max( this.offsetY, this.hoverOffsetY)\r\n        this.offsetX = this.hoverOffsetX * 30/cursorDistance\r\n        this.offsetY = this.hoverOffsetY * 30/cursorDistance\r\n\r\n    }\r\n    \r\n    keyPress(key){\r\n        this.connectors.forEach(connector => {\r\n            connector.keyPress(key)       \r\n        })\r\n    }\r\n    \r\n    deleteSelf(){\r\n        //remove any connectors which were attached to this attachment point\r\n        \r\n        this.connectors.forEach(connector => {\r\n            connector.deleteSelf()       \r\n        })\r\n        \r\n    }\r\n    \r\n    wasConnectionMade(x,y){\r\n        //this function returns itself if the coordinates passed in are within itself\r\n        if (GlobalVariables.distBetweenPoints(this.x, x, this.y, y) < this.radius && this.type == 'input'){  //If we have released the mouse here and this is an input...\r\n        \r\n            if(this.connectors.length > 0){ //Don't accept a second connection to an input\r\n                return false\r\n            }\r\n            else{\r\n                return true\r\n            }\r\n        }\r\n        else{\r\n            return false\r\n        }\r\n    }\r\n\r\n    attach(connector){\r\n        this.connectors.push(connector)\r\n    }\r\n    \r\n    setDefault(){\r\n        this.setValue(this.defaultValue)\r\n       \r\n    }\r\n    \r\n    getValue(){\r\n        return this.value\r\n    }\r\n    \r\n    setValue(newValue){\r\n        this.value = newValue\r\n        if(!GlobalVariables.evalLock){\r\n            this.ready = true\r\n        }\r\n        //propagate the change to linked elements if this is an output\r\n        if (this.type == 'output'){\r\n            this.connectors.forEach(connector => {     //select any connectors attached to this node\r\n                connector.propogate()\r\n            })\r\n        }\r\n        //if this is an input\r\n        else{   //update the code block to reflect the new values\r\n            this.parentMolecule.updateValue()\r\n        }\r\n    }\r\n    \r\n    update() {\r\n        this.x = this.parentMolecule.x + this.offsetX\r\n        this.y = this.parentMolecule.y + this.offsetY\r\n        this.draw()\r\n       \r\n        this.connectors.forEach(connector => {\r\n            connector.update()       \r\n        })\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/prototypes/attachmentpoint.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 448,
    "kind": "class",
    "name": "AttachmentPoint",
    "memberof": "src/js/prototypes/attachmentpoint.js",
    "static": true,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/prototypes/attachmentpoint.js",
    "importStyle": "AttachmentPoint",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 449,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 450,
    "kind": "member",
    "name": "defaultRadius",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#defaultRadius",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 451,
    "kind": "member",
    "name": "expandedRadius",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#expandedRadius",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 452,
    "kind": "member",
    "name": "radius",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#radius",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 453,
    "kind": "member",
    "name": "hoverDetectRadius",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#hoverDetectRadius",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 454,
    "kind": "member",
    "name": "hoverOffsetX",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#hoverOffsetX",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 455,
    "kind": "member",
    "name": "hoverOffsetY",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#hoverOffsetY",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 456,
    "kind": "member",
    "name": "uniqueID",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#uniqueID",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 457,
    "kind": "member",
    "name": "defaultOffsetX",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#defaultOffsetX",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 458,
    "kind": "member",
    "name": "defaultOffsetY",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#defaultOffsetY",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 459,
    "kind": "member",
    "name": "offsetX",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#offsetX",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 460,
    "kind": "member",
    "name": "offsetY",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#offsetY",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 461,
    "kind": "member",
    "name": "showHoverText",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#showHoverText",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 462,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 463,
    "kind": "member",
    "name": "valueType",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#valueType",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 464,
    "kind": "member",
    "name": "type",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#type",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 465,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#value",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 466,
    "kind": "member",
    "name": "ready",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#ready",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 467,
    "kind": "member",
    "name": "connectors",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#connectors",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 470,
    "kind": "member",
    "name": "[key]",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#[key]",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 471,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#draw",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 476,
    "kind": "member",
    "name": "x",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#x",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 477,
    "kind": "member",
    "name": "y",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#y",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 482,
    "kind": "method",
    "name": "clickDown",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#clickDown",
    "access": "public",
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "clickProcessed",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 483,
    "kind": "method",
    "name": "clickUp",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#clickUp",
    "access": "public",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 484,
    "kind": "method",
    "name": "clickMove",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#clickMove",
    "access": "public",
    "description": null,
    "lineNumber": 177,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 488,
    "kind": "method",
    "name": "reset",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#reset",
    "access": "public",
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 492,
    "kind": "method",
    "name": "expandOut",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#expandOut",
    "access": "public",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "params": [
      {
        "name": "cursorDistance",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "keyPress",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#keyPress",
    "access": "public",
    "description": null,
    "lineNumber": 229,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "deleteSelf",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#deleteSelf",
    "access": "public",
    "description": null,
    "lineNumber": 235,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 502,
    "kind": "method",
    "name": "wasConnectionMade",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#wasConnectionMade",
    "access": "public",
    "description": null,
    "lineNumber": 244,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 503,
    "kind": "method",
    "name": "attach",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#attach",
    "access": "public",
    "description": null,
    "lineNumber": 260,
    "undocument": true,
    "params": [
      {
        "name": "connector",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 504,
    "kind": "method",
    "name": "setDefault",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#setDefault",
    "access": "public",
    "description": null,
    "lineNumber": 264,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 505,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#getValue",
    "access": "public",
    "description": null,
    "lineNumber": 269,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 506,
    "kind": "method",
    "name": "setValue",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#setValue",
    "access": "public",
    "description": null,
    "lineNumber": 273,
    "undocument": true,
    "params": [
      {
        "name": "newValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 509,
    "kind": "method",
    "name": "update",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#update",
    "access": "public",
    "description": null,
    "lineNumber": 290,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 512,
    "kind": "file",
    "name": "src/js/prototypes/connector.js",
    "content": "import GlobalVariables from '../globalvariables'\r\n\r\nexport default class Connector {\r\n    constructor(values){\r\n        \r\n        this.isMoving = false\r\n        this.color = 'black'\r\n        this.atomType = 'Connector'\r\n        this.selected = false\r\n        this.attachmentPoint1 = null\r\n        this.attachmentPoint2 = null\r\n        \r\n        for(var key in values) {\r\n            this[key] = values[key]\r\n        }\r\n        \r\n        this.startX = this.parentMolecule.outputX\r\n        this.startY = this.parentMolecule.y\r\n    }\r\n    \r\n    draw(){\r\n        \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = this.color\r\n        GlobalVariables.c.strokeStyle = this.color\r\n        GlobalVariables.c.globalCompositeOperation = 'destination-over' //draw under other elements;\r\n        if(this.selected){\r\n            GlobalVariables.c.lineWidth = 3\r\n        }\r\n        else{\r\n            GlobalVariables.c.lineWidth = 1\r\n        }\r\n        GlobalVariables.c.moveTo(this.startX, this.startY)\r\n        GlobalVariables.c.bezierCurveTo(this.startX + 100, this.startY, this.endX - 100, this.endY, this.endX, this.endY)\r\n        GlobalVariables.c.stroke()\r\n        GlobalVariables.c.globalCompositeOperation = 'source-over' //switch back to drawing on top\r\n    }\r\n\r\n    clickUp(x,y){\r\n        if(this.isMoving){  //we only want to attach the connector which is currently moving\r\n            var attachmentMade = false\r\n            GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {                      //For every molecule on the screen  \r\n                molecule.inputs.forEach(attachmentPoint => {                                    //For each of their attachment points\r\n                    if(attachmentPoint.wasConnectionMade(x,y)){\r\n                        attachmentMade = true\r\n                        this.attachmentPoint2 = attachmentPoint\r\n                        attachmentPoint.attach(this)\r\n                        this.propogate()\r\n                    }\r\n                })\r\n            })\r\n            if (!attachmentMade){\r\n                this.deleteSelf()\r\n            }\r\n            this.isMoving = false\r\n        }\r\n    }\r\n\r\n    clickMove(x,y){\r\n        if (this.isMoving == true){\r\n            this.endX = x\r\n            this.endY = y\r\n        }\r\n    }\r\n    \r\n    keyPress(key){\r\n        if(this.selected){\r\n            if (['Delete', 'Backspace'].includes(key)){\r\n                this.deleteSelf()\r\n            }\r\n        }\r\n    }\r\n    \r\n    deleteSelf(){\r\n        //Free up the input to which this was attached\r\n        if(this.attachmentPoint2 != null){\r\n            this.attachmentPoint2.connectors = []\r\n            this.attachmentPoint2.setDefault()\r\n        }\r\n        \r\n        //Remove this connector from the output it is attached to\r\n        this.attachmentPoint1.connectors.splice(this.attachmentPoint1.connectors.indexOf(this),1) \r\n    }\r\n    \r\n    serialize(){\r\n        if ( this.attachmentPoint2 != null){\r\n            var object = {\r\n                ap1Name: this.attachmentPoint1.name,\r\n                ap2Name: this.attachmentPoint2.name,\r\n                ap1ID: this.attachmentPoint1.parentMolecule.uniqueID,\r\n                ap2ID: this.attachmentPoint2.parentMolecule.uniqueID\r\n            }\r\n            return object\r\n        }\r\n    }\r\n    \r\n    propogate(){\r\n        //takes the input and passes it to the output\r\n        this.attachmentPoint2.setValue(this.attachmentPoint1.getValue())\r\n    }\r\n    \r\n    update() {\r\n        \r\n        this.startX = this.attachmentPoint1.x\r\n        this.startY = this.attachmentPoint1.y\r\n        if (this.attachmentPoint2){  //check to see if the attachment point is defined\r\n            this.endX = this.attachmentPoint2.x\r\n            this.endY = this.attachmentPoint2.y\r\n        }\r\n        this.draw()\r\n    }\r\n\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/prototypes/connector.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 513,
    "kind": "class",
    "name": "Connector",
    "memberof": "src/js/prototypes/connector.js",
    "static": true,
    "longname": "src/js/prototypes/connector.js~Connector",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/prototypes/connector.js",
    "importStyle": "Connector",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 514,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 515,
    "kind": "member",
    "name": "isMoving",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#isMoving",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 516,
    "kind": "member",
    "name": "color",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#color",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 517,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#atomType",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 518,
    "kind": "member",
    "name": "selected",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#selected",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 519,
    "kind": "member",
    "name": "attachmentPoint1",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#attachmentPoint1",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 520,
    "kind": "member",
    "name": "attachmentPoint2",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#attachmentPoint2",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 521,
    "kind": "member",
    "name": "[key]",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#[key]",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 522,
    "kind": "member",
    "name": "startX",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#startX",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 523,
    "kind": "member",
    "name": "startY",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#startY",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 524,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#draw",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 525,
    "kind": "method",
    "name": "clickUp",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#clickUp",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 528,
    "kind": "method",
    "name": "clickMove",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#clickMove",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 529,
    "kind": "member",
    "name": "endX",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#endX",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 530,
    "kind": "member",
    "name": "endY",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#endY",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 531,
    "kind": "method",
    "name": "keyPress",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#keyPress",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 532,
    "kind": "method",
    "name": "deleteSelf",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#deleteSelf",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 533,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 534,
    "kind": "method",
    "name": "propogate",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#propogate",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 535,
    "kind": "method",
    "name": "update",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#update",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 540,
    "kind": "file",
    "name": "src/utils.js",
    "content": "function randomIntFromRange(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n}\r\n\r\nfunction randomColor(colors) {\r\n    return colors[Math.floor(Math.random() * colors.length)]\r\n}\r\n\r\nfunction distance(x1, y1, x2, y2) {\r\n    const xDist = x2 - x1\r\n    const yDist = y2 - y1\r\n\r\n    return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2))\r\n}\r\n\r\nmodule.exports = { randomIntFromRange, randomColor, distance }\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 541,
    "kind": "function",
    "name": "randomIntFromRange",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~randomIntFromRange",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "min",
        "types": [
          "*"
        ]
      },
      {
        "name": "max",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 542,
    "kind": "function",
    "name": "randomColor",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~randomColor",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "colors",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 543,
    "kind": "function",
    "name": "distance",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~distance",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "x1",
        "types": [
          "*"
        ]
      },
      {
        "name": "y1",
        "types": [
          "*"
        ]
      },
      {
        "name": "x2",
        "types": [
          "*"
        ]
      },
      {
        "name": "y2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "kind": "index",
    "content": "# A web based CAD program for cooperative design.\r\n\r\n[![Build Status](https://travis-ci.org/MaslowCNC/Maslow-Create.svg?branch=master)](https://travis-ci.org/MaslowCNC/Maslow-Create)\r\n[![Build Status](https://maslowcreate.org/documentation/badge.svg)](https://maslowcreate.org/documentation/)\r\n\r\n\r\n![overview](https://raw.githubusercontent.com/BarbourSmith/Maslow-Create/master/MaslowCreate.png)\r\n\r\nMaslow create breaks with the tradition of CAD programs which inherit from drawing programs and instead inherits from logical languages like programing. This allows it to be a CAD program which has language like features such as importing modules, version control, and colaboration.\r\n\r\n# Use\r\n\r\nA 3D model within Maslow Create is composed of interconnected nodes called Atoms and Molecules. An atom is an operation you can perform on a shape (ie translate it in space). A molecule can contain any number of atoms in a configuration (ie generate a table leg). Think of Atoms as the built in functions of a programing language and molecules as the functions you create.\r\n\r\nYou can place a new atom by right clicking anywhere within the flow canvas area and entering an atom name in the search bar.\r\n\r\nCurrently Maslow Create supports the folowing atoms:\r\n\r\n### Assembly \r\n\r\nThe assembly atom allows multiple shapes to be combigned into one unit called an assembly. The order in which atoms are combigned matters because where shapes intersect shapes earlier in the order subtract from shapes later in the order. For example if you have a bolt which needs to create a hole in a part you should assemble first the part and then the bolt.\r\n\r\n![assembly](https://raw.githubusercontent.com/BarbourSmith/Maslow-Create/master/images/Assembly.PNG)\r\n\r\n### Add BOM Tag\r\n\r\nThe Add BOM Tag atom tags a part with a bill of materials item. This item will appear in the project bill of materials one time each time the tagged part appears in the final shape. For example if you have a table leg which needs four bolts, and the final model has four table legs the bolt will automatically appear in the final bill of materials 16 times.\r\n\r\n{picture of tag}\r\n{picture of BOM file}\r\n\r\n### Circle\r\n\r\nThe circle atom creates a circle shape. Circle shapes are commonly extruded to create cylinders.\r\n\r\n![circle](https://raw.githubusercontent.com/BarbourSmith/Maslow-Create/master/images/Circle.PNG)\r\n\r\n### Code\r\n\r\nThe code atom allows you to enter arbitrary [jsxcad](https://jsxcad.js.org/) code. Please note that parts of this interface are likely to change in the near future.\r\n\r\n### Constant\r\n\r\nThe constant atom defines a constant number which can be used to control multiple inputs.\r\n\r\n{picture of constant controling multiple inputs}\r\n\r\n### Difference\r\n\r\nThe difference atom subtracts one shape from another.\r\n\r\n![difference](https://raw.githubusercontent.com/BarbourSmith/Maslow-Create/master/images/Difference.PNG)\r\n\r\n### Equation \r\n\r\nThe equation Atom lets you perform basic math operations on numbers produced by constants.\r\n\r\n{Show equation doing something}\r\n\r\n### Extrude \r\n\r\nThe extrude atom takes a 2D shape and makes it 3D.\r\n\r\n![extrude](https://raw.githubusercontent.com/BarbourSmith/Maslow-Create/master/images/Extrude.PNG)\r\n\r\n### Gcode\r\n\r\nThe gcode atom generates gcode to cut the input shape.\r\n\r\n![Gcode1](https://github.com/BarbourSmith/Maslow-Create/blob/master/images/Gcode1.PNG)\r\n![Gcode2](https://github.com/BarbourSmith/Maslow-Create/blob/master/images/Gcode2.PNG)\r\n\r\n### GitHub\r\n\r\nThe GitHub atom type is not directly available. By clicking on the GitHub tab when placing a new Atom you can search for and add any other Maslow Create project to your project.\r\n\r\n### Input\r\n\r\nThe input atom lets you define which variables are inputs to your program. They function similar to constants, however when you share your project, the person on the other end will have the ability to change the values of the inputs. Inputs placed within a molecule will add inputs to that molecule up one level.\r\n\r\n{picture of project being shared}\r\n\r\n### Intersection\r\n\r\nThe intersection atom computes the area of intersection of two shapes and creates a new shape out of that area.\r\n\r\n{picture of intersection}\r\n\r\n### Molecule\r\n\r\nThe molecule atom can contain any number of atoms in a useful configuration. To add inputs to the molecule, place an input atom within it.\r\n\r\n{picture of molecule}\r\n\r\n### Output\r\n\r\nThe output atom cannot be directly placed, however each molecule has one output which cannot be delted. Connect a shape to the output of a molecule to make that shape available one level up. The output of the top level molecule is the output of the project.\r\n\r\n![output](https://raw.githubusercontent.com/BarbourSmith/Maslow-Create/master/images/Output.PNG)\r\n\r\n### README\r\n\r\nThe README atom provides notes to the next person reading the project. The text of the readme input is added to the readme page of the project (similar to this page you are reading now).\r\n\r\n{Show readme atom}\r\n\r\n### Rectangle\r\n\r\nThe rectangle atom creates a rectangle shape. Rectangles are commonly extruded to make a 3D shape.\r\n\r\n{show picture of rectangle}\r\n\r\n### Regular Polygon\r\n\r\nThe regular polygon atom creates a regular polygon shape. Regular polygons are regularly extruded to create a 3D shape.\r\n\r\n![regular polygon](https://raw.githubusercontent.com/BarbourSmith/Maslow-Create/master/images/RegularPolygon.PNG)\r\n\r\n### Rotate\r\n\r\nThe rotate atom rotates a shape along any of it's three axis.\r\n\r\n{picture of rotate}\r\n\r\n### Scale\r\n\r\nThe scale atom scales a shape evenly in all directions.\r\n\r\n{picture of scale}\r\n\r\n### Shrinkwrap\r\n\r\nThe shrinkwrap atom combines multiple shapes into a single shape as if they had been shrinkwrapped. This is useful for creating shapes which would be dificult to create in other ways.\r\n\r\n{picture of shrinkwrap}\r\n\r\n### Stretch\r\n\r\nThe stretch atom stretches a shape along any of its axis.\r\n\r\n{picture of stretch}\r\n\r\n### Tag\r\n\r\nThe tag atom adds a tag to a part which can be later used to retrieve that part from an assembly.\r\n\r\n### Translate\r\n\r\nThe translate atom moves a 3D shape in 3D space or a 2D shape in 2D space.\r\n\r\n{picture of translate}\r\n\r\n### Union\r\n\r\nThe union atom combines multiple shapes into a single shape.\r\n\r\n{picture of union}\r\n\r\n\r\n# Development\r\n\r\nYou can read the complete documentation at [https://maslowcreate.org/documentation/](https://maslowcreate.org/documentation/)\r\n\r\n## How To Setup\r\n\r\n1.  Clone the repo:\r\n\r\n        git clone https://github.com/BarbourSmith/Maslow-Create.git\r\n\r\n2.  Install dependencies:\r\n\r\n        npm install\r\n\r\n3.  Run webpack:\r\n\r\n        npm start\r\n\r\nYour canvas piece should open up automatically at http://localhost:3000 and you should see 'HTML CANVAS BOILERPLATE' on hover.\r\n\r\n## Layout of the program\r\n\r\nMaslow Create has three main areas of the interface. Along the top of the screen is the logical flow of the design. In the lower left is a 3D rendering of the design, and in the lower right is the side bar which displays information related to the currently selected atom. If no atom is selected, then information about the open molecule is displayed.\r\n\r\nThe logical flow of the design is composed of nodes called Atoms which are connected by connectors. Each atom has a number of attachment points where connectors can connect. Each atom type inherits from the atom class which is defined in the file `/dist/js/molecules/prototypes.js`. Each atom type then has it's own file which modifies the behavior of the default atom class.\r\n\r\nThe lower left 3D rendring is an instance of the JSCAD project. It is currently a hacked version of 1.x while waiting for version 2 to be released. Right now the generated code is done through string manipulation. In version 2 we will pass actual JS objects to functions.\r\n\r\nThe lower right corner of the screen is called the \"Side Bar\" It contains information about the currently selected atom. It is populated by that atom's \"Generate Sidebar\" function.\r\n",
    "longname": "C:\\Users\\Bar\\Documents\\GitHub\\Maslow-Create\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"canvas-template\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"webpack.config.js\",\r\n  \"scripts\": {\r\n    \"start\": \"webpack --config webpack.config.js\",\r\n    \"build\": \"webpack --config webpack-build.config.js\",\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\r\n    \"lint\": \"eslint --ignore-path .eslintignore .\",\r\n    \"doc\": \"./node_modules/.bin/esdoc\"\r\n  },\r\n  \"keywords\": [],\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"dependencies\": {\r\n    \"@jscad/csg\": \"^0.7.0\",\r\n    \"@jsxcad/api-v1\": \"0.0.58\",\r\n    \"@jsxcad/convert-stl\": \"0.0.63\",\r\n    \"@jsxcad/convert-svg\": \"0.0.63\",\r\n    \"@jsxcad/convert-threejs\": \"0.0.58\",\r\n    \"@octokit/rest\": \"16.25.0\",\r\n    \"circular-json\": \"^0.5.9\",\r\n    \"codemirror\": \"^5.46.0\",\r\n    \"esm\": \"^3.2.22\",\r\n    \"gsap\": \"^2.0.1\",\r\n    \"oauthio-web\": \"^0.6.2\",\r\n    \"three\": \"^0.104.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/plugin-transform-regenerator\": \"^7.4.3\",\r\n    \"babel-core\": \"^6.26.3\",\r\n    \"babel-loader\": \"^7.1.5\",\r\n    \"babel-polyfill\": \"^6.26.0\",\r\n    \"babel-preset-env\": \"^1.7.0\",\r\n    \"babel-preset-es2015\": \"^6.24.1\",\r\n    \"babel-preset-stage-0\": \"^6.24.1\",\r\n    \"browser-sync\": \"^2.24.4\",\r\n    \"browser-sync-webpack-plugin\": \"^2.2.2\",\r\n    \"copy-webpack-plugin\": \"^5.0.1\",\r\n    \"esdoc\": \"^1.1.0\",\r\n    \"esdoc-standard-plugin\": \"^1.0.0\",\r\n    \"eslint\": \"^5.16.0\",\r\n    \"eslint-config-strongloop\": \"^2.1.0\",\r\n    \"html-webpack-plugin\": \"^3.2.0\",\r\n    \"prettier\": \"^1.13.5\",\r\n    \"webpack\": \"^4.12.0\",\r\n    \"webpack-cli\": \"^3.0.7\"\r\n  }\r\n}\r\n",
    "longname": "C:\\Users\\Bar\\Documents\\GitHub\\Maslow-Create\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]