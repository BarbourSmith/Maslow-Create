[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/flowDraw.js",
    "content": "import Menu from './js/menu'\r\nimport GlobalVariables from './js/globalvariables'\r\nimport Molecule from './js/molecules/molecule.js'\r\nimport GitHubMolecule from './js/molecules/githubmolecule.js'\r\nimport Display from './js/display.js'\r\n\r\nGlobalVariables.display = new Display()\r\nGlobalVariables.canvas = document.querySelector('canvas')\r\nGlobalVariables.c = GlobalVariables.canvas.getContext('2d')\r\n\r\nGlobalVariables.canvas.width = innerWidth\r\nGlobalVariables.canvas.height = innerHeight/2\r\n/** \r\n * The original width of the canvas before scaling.\r\n * @type {number}\r\n */\r\nlet originalWidth = GlobalVariables.canvas.width\r\n\r\nGlobalVariables.runMode = window.location.href.includes('run') //Check if we are using the run mode based on url\r\n\r\nif(!GlobalVariables.runMode){\r\n    document.querySelector('.flex-parent').setAttribute('style','height:'+innerHeight/2+'px')\r\n}else{\r\n    document.querySelector('.flex-parent').setAttribute('style','height:'+innerHeight+'px')\r\n}\r\ndocument.querySelector('#flow-canvas').setAttribute('style','height:'+innerHeight/2+'px')\r\ndocument.querySelector('.jscad-container').setAttribute('style','width:'+innerWidth/2+'px')\r\n\r\n\r\n// Event Listeners\r\n/** \r\n * The cansvas on which the atoms are placed.\r\n * @type {object}\r\n */\r\nlet flowCanvas = document.getElementById('flow-canvas')\r\n\r\nflowCanvas.addEventListener('mousemove', event => {\r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {\r\n\r\n        molecule.clickMove(event.clientX/GlobalVariables.scale1,event.clientY/GlobalVariables.scale1)    \r\n    })\r\n})\r\n\r\nflowCanvas.addEventListener('mousedown', event => {\r\n    //every time the mouse button goes down\r\n    \r\n    var clickHandledByMolecule = false\r\n    \r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {\r\n        \r\n        if (molecule.clickDown(event.clientX/GlobalVariables.scale1,event.clientY/GlobalVariables.scale1) == true){\r\n            clickHandledByMolecule = true\r\n        }\r\n\r\n    })\r\n    \r\n    if(!clickHandledByMolecule){\r\n        GlobalVariables.currentMolecule.backgroundClick()\r\n    }\r\n    else{\r\n        GlobalVariables.currentMolecule.deselect()\r\n    }\r\n    //hide the menu if it is visible\r\n    if (!document.querySelector('.menu').contains(event.target)) {\r\n        Menu.hidemenu()\r\n    }\r\n    \r\n})\r\n\r\n\r\n\r\nflowCanvas.addEventListener('dblclick', event => {\r\n    //every time the mouse button goes down\r\n    \r\n    var clickHandledByMolecule = false\r\n    \r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {\r\n        if (molecule.doubleClick(event.clientX/GlobalVariables.scale1,event.clientY/GlobalVariables.scale1) == true){\r\n            clickHandledByMolecule = true\r\n        }\r\n    })\r\n    \r\n    if (clickHandledByMolecule == false){\r\n        console.warn('double click menu open not working in flowDraw.js')\r\n        //showmenu(event);\r\n    }\r\n})\r\n\r\nflowCanvas.addEventListener('mouseup', event => {\r\n    //every time the mouse button goes up\r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {\r\n        molecule.clickUp(event.clientX/GlobalVariables.scale1,event.clientY/GlobalVariables.scale1)      \r\n    })\r\n})\r\n\r\nwindow.addEventListener('keydown', event => {\r\n    //every time the mouse button goes up\r\n    \r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {\r\n        molecule.keyPress(event.key)      \r\n    })\r\n})\r\n\r\n/**\r\n * Top Button menu event listeners if not in run mode\r\n */ \r\n\r\nif (!GlobalVariables.runMode){\r\n    let githubButton = document.getElementById('github_top')\r\n    githubButton.addEventListener('mousedown', () => {\r\n        GlobalVariables.gitHub.openGitHubPage()\r\n    })\r\n    let otherProjectsButton = document.getElementById('projectmenu_top')\r\n    otherProjectsButton.addEventListener('mousedown', () => {\r\n        GlobalVariables.gitHub.showProjectsToLoad()\r\n    })\r\n    let shareButton = document.getElementById('share_top')\r\n    shareButton.addEventListener('mousedown', () => {\r\n        GlobalVariables.gitHub.shareOpenedProject()\r\n    })\r\n    let bomButton = document.getElementById('bom_top')\r\n    bomButton.addEventListener('mousedown', () => {\r\n        GlobalVariables.gitHub.openBillOfMaterialsPage()\r\n    })\r\n    let readButton = document.getElementById('read_top')\r\n    readButton.addEventListener('mousedown', () => {\r\n        GlobalVariables.gitHub.openREADMEPage()\r\n    })\r\n    let saveButton = document.getElementById('save_top')\r\n    saveButton.addEventListener('mousedown', () => {\r\n        GlobalVariables.gitHub.saveProject()\r\n    })\r\n    let parentButton = document.getElementById('goup_top')\r\n    parentButton.addEventListener('mousedown', () => {\r\n        if(!GlobalVariables.currentMolecule.topLevel){\r\n            GlobalVariables.currentMolecule.goToParentMolecule()  \r\n        }\r\n    })\r\n}\r\n\r\n// Implementation\r\n/**\r\n * Runs once when the program begins to initialize variables.\r\n */ \r\nfunction init() {\r\n    if(!GlobalVariables.runMode){ //If we are in CAD mode load an empty project as a placeholder\r\n        GlobalVariables.currentMolecule = new Molecule({\r\n            x: 0, \r\n            y: 0, \r\n            topLevel: true, \r\n            name: 'Maslow Create',\r\n            atomType: 'Molecule',\r\n            uniqueID: GlobalVariables.generateUniqueID()\r\n        })\r\n    }\r\n    else{\r\n        var ID = window.location.href.split('?')[1]\r\n        //Have the current molecule load it\r\n        if(typeof ID != undefined){\r\n            GlobalVariables.currentMolecule = new GitHubMolecule({\r\n                projectID: ID,\r\n                topLevel: true\r\n            })\r\n            GlobalVariables.topLevelMolecule = GlobalVariables.currentMolecule\r\n            GlobalVariables.topLevelMolecule.loadProjectByID(ID).then( ()=> {\r\n                GlobalVariables.evalLock = false\r\n                GlobalVariables.topLevelMolecule.unlock()\r\n                GlobalVariables.topLevelMolecule.beginPropogation()\r\n                GlobalVariables.topLevelMolecule.backgroundClick()\r\n            })\r\n        }\r\n    }\r\n    \r\n    window.addEventListener('resize', () => { onWindowResize() }, false)\r\n\r\n    onWindowResize()\r\n    animate()\r\n}\r\n\r\n/**\r\n * Handles the window's resize behavior when the browser size changes.\r\n */ \r\nfunction onWindowResize() {\r\n    \r\n    var bounds = GlobalVariables.canvas.getBoundingClientRect()\r\n    GlobalVariables.canvas.width = bounds.width\r\n    GlobalVariables.canvas.height = bounds.height \r\n    //reset screen parameters \r\n    if(!GlobalVariables.runMode){\r\n        document.querySelector('.flex-parent').setAttribute('style','height:'+innerHeight/2+'px')\r\n    }else{\r\n        document.querySelector('.flex-parent').setAttribute('style','height:'+innerHeight+'px')\r\n    }\r\n    document.querySelector('#flow-canvas').setAttribute('style','height:'+innerHeight/2+'px')\r\n    document.querySelector('.jscad-container').setAttribute('style','width:'+innerWidth/2+'px')\r\n\r\n    GlobalVariables.scale1 =  GlobalVariables.canvas.width/originalWidth\r\n\r\n    GlobalVariables.display.onWindowResize()\r\n}\r\n\r\n\r\n\r\n/**\r\n * Animation loop. Runs with every frame to draw the program on the display.\r\n */ \r\nfunction animate() {\r\n    requestAnimationFrame(animate)\r\n    GlobalVariables.c.clearRect(0, 0, GlobalVariables.canvas.width, GlobalVariables.canvas.height)\r\n    GlobalVariables.c.scale(GlobalVariables.scale1,GlobalVariables.scale1)\r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {\r\n        molecule.update()\r\n\r\n    })\r\n    GlobalVariables.c.setTransform(1,0,0,1,0,0)\r\n\r\n    GlobalVariables.display.render()\r\n    GlobalVariables.display.controls.update()\r\n}\r\n\r\ninit()\r\n\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/flowDraw.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "originalWidth",
    "memberof": "src/flowDraw.js",
    "static": true,
    "longname": "src/flowDraw.js~originalWidth",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": "The original width of the canvas before scaling.",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "flowCanvas",
    "memberof": "src/flowDraw.js",
    "static": true,
    "longname": "src/flowDraw.js~flowCanvas",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": "The cansvas on which the atoms are placed.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "init",
    "memberof": "src/flowDraw.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/flowDraw.js~init",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": "Runs once when the program begins to initialize variables.",
    "lineNumber": 145,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "onWindowResize",
    "memberof": "src/flowDraw.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/flowDraw.js~onWindowResize",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": "Handles the window's resize behavior when the browser size changes.",
    "lineNumber": 183,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "animate",
    "memberof": "src/flowDraw.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/flowDraw.js~animate",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": "Animation loop. Runs with every frame to draw the program on the display.",
    "lineNumber": 207,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "src/js/alwaysOneFreeInput.js",
    "content": "import GlobalVariables from './globalvariables.js'\r\n//This module is used to create atoms which do not have a set number of inputs, but instead always have one input free.\r\n\r\n/**\r\n * Computes the number of inputs which are curently available on a target atom.\r\n * @param {object} target - The atom which should have it's number of inputs computed.\r\n */ \r\nconst howManyInputPortsAvailable = function(target){\r\n    var portsAvailable = 0\r\n    target.inputs.forEach(io => {\r\n        if(io.type == 'input' && io.connectors.length == 0){   //if this port is available\r\n            portsAvailable = portsAvailable + 1  //Add one to the count\r\n        }\r\n    })\r\n    return portsAvailable\r\n}\r\n\r\n/**\r\n * Deletes one free input from an atom which has more than one free input available.\r\n * @param {object} target - The atom which should have one input deleted (if there are more than two free).\r\n */ \r\nconst deleteEmptyPort = function(target){\r\n    target.inputs.forEach(io => {\r\n        if(io.type == 'input' && io.connectors.length == 0 && howManyInputPortsAvailable(target) >= 2){\r\n            target.removeIO('input', io.name, target)\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Adds or deletes inputs from a target atom until there is exactly one input available.\r\n * @param {object} target - The atom which should have it's number of inputs adjusted.\r\n */ \r\nexport const addOrDeletePorts = (target) => {\r\n    //Because a molecule loads with no connectors attached to the ports and we don't want them to delete before\r\n    //They are conencted to we use the ioValues list to keep track of them\r\n    target.inputs.forEach(child => {\r\n        target.ioValues.forEach(ioValue => {\r\n            if (child.name == ioValue.name && child.connectors.length > 0){\r\n                target.ioValues.splice(target.ioValues.indexOf(ioValue),1) //Let's remove it from the ioValues list\r\n            }\r\n        })\r\n    })\r\n    \r\n    //Add or delete ports as needed\r\n    if(howManyInputPortsAvailable(target) == 0){ //We need to make a new port available\r\n        target.addIO('input', '3D shape ' + GlobalVariables.generateUniqueID(), target, 'geometry', '')\r\n    }\r\n    if(howManyInputPortsAvailable(target) >= 2 && target.ioValues.length <= 1){  //We need to remove the empty port\r\n        deleteEmptyPort(target)\r\n        target.updateValue()\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/alwaysOneFreeInput.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "howManyInputPortsAvailable",
    "memberof": "src/js/alwaysOneFreeInput.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/alwaysOneFreeInput.js~howManyInputPortsAvailable",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/js/alwaysOneFreeInput.js",
    "importStyle": null,
    "description": "Computes the number of inputs which are curently available on a target atom.",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The atom which should have it's number of inputs computed."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "deleteEmptyPort",
    "memberof": "src/js/alwaysOneFreeInput.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/alwaysOneFreeInput.js~deleteEmptyPort",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/js/alwaysOneFreeInput.js",
    "importStyle": null,
    "description": "Deletes one free input from an atom which has more than one free input available.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The atom which should have one input deleted (if there are more than two free)."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "addOrDeletePorts",
    "memberof": "src/js/alwaysOneFreeInput.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/alwaysOneFreeInput.js~addOrDeletePorts",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/alwaysOneFreeInput.js",
    "importStyle": "{addOrDeletePorts}",
    "description": "Adds or deletes inputs from a target atom until there is exactly one input available.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The atom which should have it's number of inputs adjusted."
      }
    ],
    "return": null
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/js/BOM.js",
    "content": "/**\r\n * This class defines a BOMEntry object which is used to define one entry in a bill of materials.\r\n */ \r\nexport class BOMEntry {\r\n    /**\r\n     * The constructor returns a new blank BOMEntry object.\r\n     */ \r\n    constructor(){\r\n        /** \r\n         * The name of the item.\r\n         * @type {string}\r\n         */\r\n        this.BOMitemName  = 'name'\r\n        /** \r\n         * The number of this item needed.\r\n         * @type {number}\r\n         */\r\n        this.numberNeeded = 0\r\n        /** \r\n         * The cost of one of this item in USD.\r\n         * @type {number}\r\n         */\r\n        this.costUSD      = 0\r\n        /** \r\n         * A link to where to purchase the item.\r\n         * @type {string}\r\n         */\r\n        this.source       = 'www.example.com'\r\n        /** \r\n         * The total number of this item needed for this part. Should this be removed in favor of  forcing the parts to be modeled? Probably nobody would bother.\r\n         * @type {number}\r\n         */\r\n        this.totalNeeded  = this.numberNeeded //Scaled by the number of this instance\r\n    }\r\n}\r\n\r\n/**\r\n * Computes and returns an array of BOMEntry objects after looking at the tags of a geometry.\r\n * @param {object} geometry - The geometry which should be scanned for tags.\r\n */ \r\nexport const extractBomTags = (geometry) => {\r\n    \r\n    var bomItems = []\r\n    \r\n    const walk = (geometry) => {\r\n        //Grab any available tags\r\n        if(geometry.tags){\r\n            geometry.tags.forEach(tag => {\r\n                if(tag.substring(0,11) == 'user/{\"BOMi'){\r\n                    bomItems.push(JSON.parse(tag.substring(5)))\r\n                }\r\n            })\r\n        }\r\n        \r\n        //Walk deeper if there is deeper to go\r\n        if (geometry.disjointAssembly) {\r\n            geometry.disjointAssembly.forEach(walk)\r\n        }\r\n        else if (geometry.lazyGeometry) {\r\n            walk(geometry.lazyGeometry)\r\n        }\r\n        else if (geometry.geometry) {\r\n            walk(geometry.geometry)\r\n        }\r\n        else{\r\n            return\r\n        }\r\n    }\r\n    \r\n    if(geometry != null){\r\n        walk(geometry)\r\n    }\r\n    \r\n    \r\n    //Consolidate similar items into a single item\r\n    var result = []\r\n    bomItems.forEach(function (bomElement) {\r\n        if (!this[bomElement.BOMitemName]) {\r\n            this[bomElement.BOMitemName] = new BOMEntry\r\n            this[bomElement.BOMitemName].BOMitemName = bomElement.BOMitemName\r\n            this[bomElement.BOMitemName].source = bomElement.source\r\n            result.push(this[bomElement.BOMitemName])\r\n        }\r\n        this[bomElement.BOMitemName].numberNeeded += bomElement.numberNeeded\r\n        this[bomElement.BOMitemName].costUSD += bomElement.costUSD\r\n    }, Object.create(null))\r\n    \r\n    \r\n    return result\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/BOM.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "class",
    "name": "BOMEntry",
    "memberof": "src/js/BOM.js",
    "static": true,
    "longname": "src/js/BOM.js~BOMEntry",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/BOM.js",
    "importStyle": "{BOMEntry}",
    "description": "This class defines a BOMEntry object which is used to define one entry in a bill of materials.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 60,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/BOM.js~BOMEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#constructor",
    "access": "public",
    "description": "The constructor returns a new blank BOMEntry object.",
    "lineNumber": 8
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "BOMitemName",
    "memberof": "src/js/BOM.js~BOMEntry",
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#BOMitemName",
    "access": "public",
    "description": "The name of the item.",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "numberNeeded",
    "memberof": "src/js/BOM.js~BOMEntry",
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#numberNeeded",
    "access": "public",
    "description": "The number of this item needed.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "costUSD",
    "memberof": "src/js/BOM.js~BOMEntry",
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#costUSD",
    "access": "public",
    "description": "The cost of one of this item in USD.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "source",
    "memberof": "src/js/BOM.js~BOMEntry",
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#source",
    "access": "public",
    "description": "A link to where to purchase the item.",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "totalNeeded",
    "memberof": "src/js/BOM.js~BOMEntry",
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#totalNeeded",
    "access": "public",
    "description": "The total number of this item needed for this part. Should this be removed in favor of  forcing the parts to be modeled? Probably nobody would bother.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "extractBomTags",
    "memberof": "src/js/BOM.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/BOM.js~extractBomTags",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/BOM.js",
    "importStyle": "{extractBomTags}",
    "description": "Computes and returns an array of BOMEntry objects after looking at the tags of a geometry.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "geometry",
        "description": "The geometry which should be scanned for tags."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "src/js/display.js",
    "content": "import GlobalVariables from './globalvariables'\r\nimport * as THREE from 'three'\r\nimport { TrackballControls } from 'three/examples/jsm/controls/TrackballControls.js'\r\n\r\n/**\r\n * This class handles writing to the 3D preview display. Large parts of this class are copied directly from JSxCAD.\r\n */\r\nexport default class Display {\r\n    /**\r\n     * The constructor run to create the new display. It seems to run with each refresh which doesn't seem right to me.\r\n     */\r\n    constructor(){\r\n        /** \r\n         * An array which contains the data to be respresented in 3D.\r\n         * @type {array}\r\n         */\r\n        this.datasets = []\r\n        /** \r\n         * An Flag to indicate if the grid on the XY plane should be displayed.\r\n         * @type {boolean}\r\n         */\r\n        this.displayGrid = true\r\n        /** \r\n         * Grid scale to keep track of zoom scale\r\n         * @type {number}\r\n         */\r\n        this.gridScale = 5\r\n        /** \r\n         * A flag to indicate if the axes should be displayed.\r\n         * @type {boolean}\r\n         */\r\n        this.axesCheck = true\r\n        /** \r\n         * A flag to indicate if the frame should be displayed in wire frame.\r\n         * @type {boolean}\r\n         */\r\n        this.wireDisplay = false\r\n        /** \r\n         * A threejs camera instance.\r\n         * @type {object}\r\n         */\r\n        this.camera\r\n        /** \r\n         * A three js controls instance.\r\n         * @type {object}\r\n         */\r\n        this.controls\r\n        /** \r\n         * A threejs scene instance.\r\n         * @type {object}\r\n         */\r\n        this.scene\r\n        /** \r\n         * A threejs renderer instance.\r\n         * @type {object}\r\n         */\r\n        this.renderer\r\n        /** \r\n         * The applied material type.\r\n         * @type {object}\r\n         */\r\n        this.mesh\r\n        /** \r\n         * The HTML div object targeted to add the display to.\r\n         * @type {object}\r\n         */\r\n        this.targetDiv = document.getElementById('viewerContext')\r\n        \r\n        /** \r\n         * The default material used if nothing is set\r\n         * @type {object}\r\n         */\r\n        this.threeMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x5f6670,\r\n            roughness: 0.65,\r\n            metalness: 0.40,   \r\n            wireframe: this.wireDisplay\r\n        })\r\n        \r\n        /** \r\n         * A list of colors to RGB mappings.\r\n         * @type {object}\r\n         */\r\n        this.colorToRgbMapping = {\r\n            'aliceblue': [240, 248, 255],\r\n            'antiquewhite': [250, 235, 215],\r\n            'aqua': [0, 255, 255],\r\n            'aquamarine': [127, 255, 212],\r\n            'azure': [240, 255, 255],\r\n            'beige': [245, 245, 220],\r\n            'bisque': [255, 228, 196],\r\n            'black': [0, 0, 0],\r\n            'blanchedalmond': [255, 235, 205],\r\n            'blue': [0, 0, 255],\r\n            'blueviolet': [138, 43, 226],\r\n            'brown': [165, 42, 42],\r\n            'burlywood': [222, 184, 135],\r\n            'cadetblue': [95, 158, 160],\r\n            'chartreuse': [127, 255, 0],\r\n            'chocolate': [210, 105, 30],\r\n            'coral': [255, 127, 80],\r\n            'cornflowerblue': [100, 149, 237],\r\n            'cornsilk': [255, 248, 220],\r\n            'crimson': [220, 20, 60],\r\n            'cyan': [0, 255, 255],\r\n            'darkblue': [0, 0, 139],\r\n            'darkcyan': [0, 139, 139],\r\n            'darkgoldenrod': [184, 134, 11],\r\n            'darkgray': [169, 169, 169],\r\n            'darkgreen': [0, 100, 0],\r\n            'darkgrey': [169, 169, 169],\r\n            'darkkhaki': [189, 183, 107],\r\n            'darkmagenta': [139, 0, 139],\r\n            'darkolivegreen': [85, 107, 47],\r\n            'darkorange': [255, 140, 0],\r\n            'darkorchid': [153, 50, 204],\r\n            'darkred': [139, 0, 0],\r\n            'darksalmon': [233, 150, 122],\r\n            'darkseagreen': [143, 188, 143],\r\n            'darkslateblue': [72, 61, 139],\r\n            'darkslategray': [47, 79, 79],\r\n            'darkslategrey': [47, 79, 79],\r\n            'darkturquoise': [0, 206, 209],\r\n            'darkviolet': [148, 0, 211],\r\n            'deeppink': [255, 20, 147],\r\n            'deepskyblue': [0, 191, 255],\r\n            'dimgray': [105, 105, 105],\r\n            'dimgrey': [105, 105, 105],\r\n            'dodgerblue': [30, 144, 255],\r\n            'firebrick': [178, 34, 34],\r\n            'floralwhite': [255, 250, 240],\r\n            'forestgreen': [34, 139, 34],\r\n            'fuchsia': [255, 0, 255],\r\n            'gainsboro': [220, 220, 220],\r\n            'ghostwhite': [248, 248, 255],\r\n            'gold': [255, 215, 0],\r\n            'goldenrod': [218, 165, 32],\r\n            'gray': [128, 128, 128],\r\n            'green': [0, 128, 0],\r\n            'greenyellow': [173, 255, 47],\r\n            'grey': [128, 128, 128],\r\n            'honeydew': [240, 255, 240],\r\n            'hotpink': [255, 105, 180],\r\n            'indianred': [205, 92, 92],\r\n            'indigo': [75, 0, 130],\r\n            'ivory': [255, 255, 240],\r\n            'khaki': [240, 230, 140],\r\n            'lavender': [230, 230, 250],\r\n            'lavenderblush': [255, 240, 245],\r\n            'lawngreen': [124, 252, 0],\r\n            'lemonchiffon': [255, 250, 205],\r\n            'lightblue': [173, 216, 230],\r\n            'lightcoral': [240, 128, 128],\r\n            'lightcyan': [224, 255, 255],\r\n            'lightgoldenrodyellow': [250, 250, 210],\r\n            'lightgray': [211, 211, 211],\r\n            'lightgreen': [144, 238, 144],\r\n            'lightgrey': [211, 211, 211],\r\n            'lightpink': [255, 182, 193],\r\n            'lightsalmon': [255, 160, 122],\r\n            'lightseagreen': [32, 178, 170],\r\n            'lightskyblue': [135, 206, 250],\r\n            'lightslategray': [119, 136, 153],\r\n            'lightslategrey': [119, 136, 153],\r\n            'lightsteelblue': [176, 196, 222],\r\n            'lightyellow': [255, 255, 224],\r\n            'lime': [0, 255, 0],\r\n            'limegreen': [50, 205, 50],\r\n            'linen': [250, 240, 230],\r\n            'magenta': [255, 0, 255],\r\n            'maroon': [128, 0, 0],\r\n            'mediumaquamarine': [102, 205, 170],\r\n            'mediumblue': [0, 0, 205],\r\n            'mediumorchid': [186, 85, 211],\r\n            'mediumpurple': [147, 112, 219],\r\n            'mediumseagreen': [60, 179, 113],\r\n            'mediumslateblue': [123, 104, 238],\r\n            'mediumspringgreen': [0, 250, 154],\r\n            'mediumturquoise': [72, 209, 204],\r\n            'mediumvioletred': [199, 21, 133],\r\n            'midnightblue': [25, 25, 112],\r\n            'mintcream': [245, 255, 250],\r\n            'mistyrose': [255, 228, 225],\r\n            'moccasin': [255, 228, 181],\r\n            'navajowhite': [255, 222, 173],\r\n            'navy': [0, 0, 128],\r\n            'oldlace': [253, 245, 230],\r\n            'olive': [128, 128, 0],\r\n            'olivedrab': [107, 142, 35],\r\n            'orange': [255, 165, 0],\r\n            'orangered': [255, 69, 0],\r\n            'orchid': [218, 112, 214],\r\n            'palegoldenrod': [238, 232, 170],\r\n            'palegreen': [152, 251, 152],\r\n            'paleturquoise': [175, 238, 238],\r\n            'palevioletred': [219, 112, 147],\r\n            'papayawhip': [255, 239, 213],\r\n            'peachpuff': [255, 218, 185],\r\n            'peru': [205, 133, 63],\r\n            'pink': [255, 192, 203],\r\n            'plum': [221, 160, 221],\r\n            'powderblue': [176, 224, 230],\r\n            'purple': [128, 0, 128],\r\n            'rebeccapurple': [102, 51, 153],\r\n            'red': [255, 0, 0],\r\n            'rosybrown': [188, 143, 143],\r\n            'royalblue': [65, 105, 225],\r\n            'saddlebrown': [139, 69, 19],\r\n            'salmon': [250, 128, 114],\r\n            'sandybrown': [244, 164, 96],\r\n            'seagreen': [46, 139, 87],\r\n            'seashell': [255, 245, 238],\r\n            'sienna': [160, 82, 45],\r\n            'silver': [192, 192, 192],\r\n            'skyblue': [135, 206, 235],\r\n            'slateblue': [106, 90, 205],\r\n            'slategray': [112, 128, 144],\r\n            'slategrey': [112, 128, 144],\r\n            'snow': [255, 250, 250],\r\n            'springgreen': [0, 255, 127],\r\n            'steelblue': [70, 130, 180],\r\n            'tan': [210, 180, 140],\r\n            'teal': [0, 128, 128],\r\n            'thistle': [216, 191, 216],\r\n            'tomato': [255, 99, 71],\r\n            'turquoise': [64, 224, 208],\r\n            'violet': [238, 130, 238],\r\n            'wheat': [245, 222, 179],\r\n            'white': [255, 255, 255],\r\n            'whitesmoke': [245, 245, 245],\r\n            'yellow': [255, 255, 0],\r\n            'yellowgreen': [154, 205, 50]\r\n        }\r\n        \r\n        /** \r\n         * A description.\r\n         * @type {object}\r\n         */\r\n        this.materialProperties = {\r\n            paper: {\r\n                roughness: 0.5,\r\n                metalness: 0.0,\r\n                reflectivity: 0.5\r\n            },\r\n            wood: {\r\n                roughness: 0.5,\r\n                metalness: 0.0,\r\n                reflectivity: 0.5\r\n            },\r\n            metal: {\r\n                roughness: 0.5,\r\n                metalness: 0.5,\r\n                reflectivity: 0.9,\r\n                clearCoat: 1,\r\n                clearCoatRoughness: 0\r\n            },\r\n            glass: {\r\n                roughness: 0.5,\r\n                metalness: 0.5,\r\n                reflectivity: 0.9,\r\n                clearCoat: 1,\r\n                clearCoatRoughness: 0,\r\n                opacity: 0.5,\r\n                transparent: true\r\n            }\r\n        }\r\n        \r\n        //Add the JSXCAD window\r\n        \r\n        /** \r\n         * The camera which controls how the scene is rendered.\r\n         * @type {object}\r\n         */\r\n        this.camera = new THREE.PerspectiveCamera(27, window.innerWidth / window.innerHeight, 1, 10500);\r\n        [this.camera.position.x, this.camera.position.y, this.camera.position.z] = [0, -30, 50]\r\n        //\r\n        /** \r\n         * The controls which let the user pan and zoom with the mouse.\r\n         * @type {object}\r\n         */\r\n        this.controls = new TrackballControls(this.camera, this.targetDiv)\r\n        this.controls.rotateSpeed = 4.0\r\n        this.controls.zoomSpeed = 4.0\r\n        this.controls.panSpeed = 2.0\r\n        this.controls.noZoom = false\r\n        this.controls.noPan = false\r\n        this.controls.staticMoving = true\r\n        this.controls.dynamicDampingFactor = 0.1\r\n        this.controls.keys = [65, 83, 68]\r\n        this.controls.addEventListener('change', () => { this.render() })\r\n        //\r\n        /** \r\n         * The threejs scene to which things should be added to show up on the display.\r\n         * @type {object}\r\n         */\r\n        this.scene = new THREE.Scene()\r\n        this.scene.background = new THREE.Color(0xE5E4E5)\r\n        this.scene.add(this.camera)\r\n        //\r\n        var ambientLight = new THREE.AmbientLight(0x222222)\r\n        this.scene.add(ambientLight)\r\n        // var light1 = new THREE.PointLight(0xffffff, 0, 1);\r\n        // camera.add(light1);\r\n        var light2 = new THREE.DirectionalLight(0xffffff, 1)\r\n        light2.position.set(1, 1, 1)\r\n        this.camera.add(light2)\r\n\r\n        //sets axes\r\n        var axesHelper = new THREE.AxesHelper( 10 )\r\n        this.scene.add(axesHelper)\r\n        \r\n        //\r\n        /** \r\n         * The three js webGLRendere object which does the actual rendering to the screen.\r\n         * @type {object}\r\n         */\r\n\r\n        this.renderer = new THREE.WebGLRenderer({ antialias: true })\r\n        this.renderer.setPixelRatio(window.devicePixelRatio)\r\n        this.targetDiv.appendChild(this.renderer.domElement)\r\n        \r\n        this.onWindowResize()\r\n\r\n        this.targetDiv.addEventListener('mousedown', () => {\r\n            let viewerBar = document.querySelector('#viewer_bar')\r\n\r\n            if(!GlobalVariables.runMode && viewerBar.innerHTML.trim().length == 0){\r\n\r\n                //viewerBar.removeChild(viewerBar.firstChild)\r\n                //Set viewer bar to only appear when other elements are created\r\n                viewerBar.setAttribute('style', 'background-color:white;')\r\n                \r\n                //Grid display html element\r\n                var gridDiv = document.createElement('div')\r\n                viewerBar.appendChild(gridDiv)\r\n                gridDiv.setAttribute('id', 'gridDiv')\r\n                var gridCheck = document.createElement('input')\r\n                gridDiv.appendChild(gridCheck)\r\n                gridCheck.setAttribute('type', 'checkbox')\r\n                gridCheck.setAttribute('id', 'gridCheck')\r\n                gridDiv.setAttribute('style', 'float:right;')\r\n               \r\n                if (this.displayGrid){\r\n                    gridCheck.setAttribute('checked', 'true')\r\n                }\r\n\r\n                var gridCheckLabel = document.createElement('label')\r\n                gridDiv.appendChild(gridCheckLabel)\r\n                gridCheckLabel.setAttribute('for', 'gridCheck')\r\n                gridCheckLabel.setAttribute('style', 'margin-right:1em;')\r\n                gridCheckLabel.textContent= \"Grid\"\r\n\r\n\r\n                gridCheck.addEventListener('change', event => {\r\n                    if(event.target.checked){\r\n                        this.scene.add( this.plane )\r\n                        this.displayGrid = true\r\n                    }\r\n                    else{\r\n                        this.scene.remove(this.plane)\r\n                        this.displayGrid = false\r\n                    }\r\n                })\r\n\r\n                //Axes Html\r\n\r\n                var axesDiv = document.createElement('div')\r\n                viewerBar.appendChild(axesDiv)\r\n                var axesCheck = document.createElement('input')\r\n                axesDiv.appendChild(axesCheck)\r\n                axesCheck.setAttribute('type', 'checkbox')\r\n                axesCheck.setAttribute('id', 'axesCheck')\r\n                \r\n                if (this.axesCheck){\r\n                    axesCheck.setAttribute('checked', 'true')\r\n                }\r\n\r\n                var axesCheckLabel = document.createElement('label')\r\n                axesDiv.appendChild(axesCheckLabel)\r\n                axesCheckLabel.setAttribute('for', 'axesCheck')\r\n                axesCheckLabel.setAttribute('style', 'margin-right:1em;')\r\n                axesDiv.setAttribute('style', 'float:right;')\r\n                axesCheckLabel.textContent= \"Axes\"\r\n\r\n                axesCheck.addEventListener('change', event => {\r\n                    if(event.target.checked){\r\n                        this.scene.add( axesHelper)\r\n                        this.axesCheck = true\r\n                    }\r\n                    else{\r\n                        this.scene.remove( axesHelper )\r\n                        this.axesCheck = false\r\n                    }\r\n                })\r\n\r\n                //Wireframe HTML element\r\n\r\n                var wireDiv = document.createElement('div')\r\n                viewerBar.appendChild(wireDiv)\r\n                wireDiv.setAttribute('id', 'wireDiv')\r\n                var wireCheck = document.createElement('input')\r\n                wireDiv.appendChild(wireCheck)\r\n                wireCheck.setAttribute('type', 'checkbox')\r\n                wireCheck.setAttribute('id', 'wireCheck')\r\n               \r\n                if (this.wireDisplay){\r\n                    wireCheck.setAttribute('checked', 'true')\r\n                    this.threeMaterial.wireframe = true\r\n                }\r\n                //wireCheck.setAttribute('checked', false)\r\n                var wireCheckLabel = document.createElement('label')\r\n                wireDiv.appendChild(wireCheckLabel)\r\n                wireCheckLabel.setAttribute('for', 'wireCheck')\r\n                //wireCheckLabel.setAttribute('style', 'margin-right:10em;')\r\n                wireDiv.setAttribute('style', 'float:right;')\r\n                wireCheckLabel.textContent= \"Wireframe\"\r\n\r\n                wireCheck.addEventListener('change', event => {\r\n                    if( event.target.checked){\r\n                        this.threeMaterial.wireframe = true\r\n                        this.wireDisplay = true\r\n                    }\r\n                    else{\r\n                        this.threeMaterial.wireframe = false\r\n                        this.wireDisplay = false\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        \r\n        // This event listener adjusts the gridScale when you zoom in and out\r\n        \r\n        this.targetDiv.addEventListener('wheel', () =>{ \r\n            \r\n            if((this.dist3D(this.camera.position)/this.gridScale) > 5){\r\n                //this.scene.remove(this.plane)\r\n                this.gridScale = Math.pow(5,this.baseLog(this.dist3D(this.camera.position),5))\r\n                this.resizeGrid()\r\n            }\r\n            else if((this.dist3D(this.camera.position)/this.gridScale) < .5){ \r\n                //this.scene.remove(this.plane)\r\n                this.gridScale = Math.pow(5,this.baseLog(this.dist3D(this.camera.position),5))\r\n                this.resizeGrid()\r\n            }    \r\n        })\r\n    }\r\n    \r\n    /**\r\n     * This function is intended to calculate the base log of two numbers and round it to an integer\r\n     * @param {number,number}\r\n     */ \r\n    baseLog(x,y){\r\n        let baseLog = (Math.round(Math.log(x)/Math.log(y)))\r\n        return baseLog\r\n    }\r\n\r\n    /**\r\n     * This function is intended to calculate the 3d distance between object and camera\r\n     * @param {number}\r\n     */ \r\n    dist3D(position){\r\n        const distance3D = Math.sqrt(Math.pow(position.x,2)\r\n                         + Math.pow(position.y,2)\r\n                         + Math.pow(position.z,2))\r\n        return distance3D\r\n    }\r\n   \r\n    /**\r\n     * This function is intended to allow for materials. It is currently not used and can probably be deleted.\r\n     * @param {object} material - A string to define the material type.\r\n     */ \r\n    makeMaterial(material){\r\n        switch (material) {\r\n        case 'metal':\r\n            return new THREE.MeshStandardMaterial({\r\n                color: 0x779aac,\r\n                emissive: 0x7090a0,\r\n                roughness: 0.65,\r\n                metalness: 0.99,\r\n            })\r\n        default:\r\n            return new THREE.MeshNormalMaterial()\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Writes a shape to the 3D display. Expecting a threejs geometry.\r\n     * @param {object} shape - A jsxcad geometry data set to write to the display. Computation is done in a worker thread\r\n     */ \r\n    writeToDisplay(shape){\r\n        if(shape != null){\r\n            const computeValue = async () => {\r\n                try {\r\n                    return await GlobalVariables.render({values: shape, key: \"render\"})\r\n                } catch(err) {\r\n                    console.warn(err)\r\n                    return -1\r\n                }\r\n            }\r\n\r\n            computeValue().then(result => {\r\n                this.updateDisplayData(result)\r\n            })\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Zooms the camera to fit target bounds on the screen.\r\n     * @param {array} bounds - An array of some sort...this comment should be updated.\r\n     */ \r\n    zoomCameraToFit(bounds){\r\n\r\n        this.controls.reset()\r\n        this.camera.position.x = 0\r\n        this.camera.position.y = -5*Math.max(...bounds[1])\r\n        this.camera.position.z = 5*Math.max(...bounds[1])\r\n\r\n        /*initializes grid at scale if object loaded is already \r\n            zoomed out farther than initial grid tier*/ \r\n        this.gridScale = Math.pow(5, this.baseLog(this.dist3D(this.camera.position),5))    \r\n        // Creates initial grid plane\r\n        this.resizeGrid()\r\n    }\r\n\r\n    /**\r\n     * Redraws the grid with gridscale update value\r\n     */ \r\n    resizeGrid () {\r\n        this.scene.remove(this.plane)\r\n        var planeGeometry = new THREE.PlaneBufferGeometry( this.gridScale, this.gridScale, 10, 10)\r\n        var planeMaterial = new THREE.MeshStandardMaterial( { color: 0xffffff} )\r\n        planeMaterial.wireframe = true\r\n        planeMaterial.transparent = true \r\n        planeMaterial.opacity = 0.2\r\n        /** \r\n         * The grid which displays under the part.\r\n         * @type {object}\r\n         */\r\n        this.plane = new THREE.Mesh( planeGeometry, planeMaterial )\r\n        this.plane.receiveShadow = true\r\n        this.scene.add( this.plane )   \r\n    }\r\n    \r\n    /**\r\n     * Converts the tag to an RGB value.\r\n     */ \r\n    toRgb(tags = [], defaultRgb = [0, 0, 0]){\r\n        let rgb = defaultRgb\r\n        for (const tag of tags) {\r\n            if (tag.startsWith('color/')) {\r\n                let entry = this.colorToRgbMapping[tag.substring(6)]\r\n                if (entry !== undefined) {\r\n                    rgb = entry\r\n                }\r\n            }\r\n        }\r\n        return rgb\r\n    }\r\n    \r\n    /**\r\n     * Sets the the color of the threejs mesh.\r\n     */ \r\n    setColor(tags = [], parameters = {}, otherwise = [0, 0, 0]){\r\n        let rgb = this.toRgb(tags, null)\r\n        if (rgb === null) {\r\n            rgb = otherwise\r\n        }\r\n        if (rgb === null) {\r\n            return\r\n        }\r\n        const [r, g, b] = rgb\r\n        const color = ((r << 16) | (g << 8) | b) >>> 0\r\n        parameters.color = color\r\n        return parameters\r\n    }\r\n    \r\n    /**\r\n     * Merges two objects.\r\n     */ \r\n    merge(properties, parameters){\r\n        for (const key of Object.keys(properties)) {\r\n            parameters[key] = properties[key]\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Sets the material properties of the threejs material.\r\n     */ \r\n    setMaterial(tags, parameters){\r\n        for (const tag of tags) {\r\n            if (tag.startsWith('material/')) {\r\n                const material = tag.substring(9)\r\n                const properties = this.materialProperties[material]\r\n                if (properties !== undefined) {\r\n                    this.merge(properties, parameters)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Constructs a new threejs mesh material based on the properties in the tags.\r\n     */ \r\n    buildMeshMaterial(tags){\r\n        if (tags !== undefined) {\r\n            const parameters = {}\r\n            this.setColor(tags, parameters, null)\r\n            this.setMaterial(tags, parameters)\r\n            if (Object.keys(parameters).length > 0) {\r\n                return new THREE.MeshPhysicalMaterial(parameters)\r\n            }\r\n        }\r\n\r\n        // Else, default to normal material.\r\n        return this.threeMaterial\r\n    }\r\n    \r\n    /**\r\n     * Clears the display and writes a threejs geometry to it.\r\n     * @param {object} threejsGeometry - A threejs geometry to write to the display.\r\n     */ \r\n    updateDisplayData(threejsGeometry){\r\n        // Delete any previous dataset in the window.\r\n        for (const { mesh } of this.datasets) {\r\n            this.scene.remove(mesh)\r\n        }\r\n        \r\n        // Build new datasets from the written data, and display them.\r\n        this.datasets = []\r\n\r\n        const walk = (geometry) => {\r\n            const { tags } = geometry\r\n            if (geometry.assembly) {\r\n                geometry.assembly.forEach(walk)\r\n            } else if (geometry.threejsSegments) {\r\n                const segments = geometry.threejsSegments\r\n                const dataset = {}\r\n                const threejsGeometry = new THREE.Geometry()\r\n                for (const [[aX, aY, aZ], [bX, bY, bZ]] of segments) {\r\n                    threejsGeometry.vertices.push(new THREE.Vector3(aX, aY, aZ), new THREE.Vector3(bX, bY, bZ))\r\n                }\r\n                dataset.mesh = new THREE.LineSegments(threejsGeometry, this.buildMeshMaterial(tags))\r\n                this.scene.add(dataset.mesh)\r\n                this.datasets.push(dataset)\r\n            } else if (geometry.threejsSolid) {\r\n                const { positions, normals } = geometry.threejsSolid\r\n                const dataset = {}\r\n                const threejsGeometry = new THREE.BufferGeometry()\r\n                threejsGeometry.addAttribute('position', new THREE.Float32BufferAttribute(positions, 3))\r\n                threejsGeometry.addAttribute('normal', new THREE.Float32BufferAttribute(normals, 3))\r\n                dataset.mesh = new THREE.Mesh(threejsGeometry, this.buildMeshMaterial(tags))\r\n                this.scene.add(dataset.mesh)\r\n                this.datasets.push(dataset)\r\n            } else if (geometry.threejsSurface) {\r\n                const { positions, normals } = geometry.threejsSurface\r\n                const dataset = {}\r\n                const threejsGeometry = new THREE.BufferGeometry()\r\n                threejsGeometry.addAttribute('position', new THREE.Float32BufferAttribute(positions, 3))\r\n                threejsGeometry.addAttribute('normal', new THREE.Float32BufferAttribute(normals, 3))\r\n                dataset.mesh = new THREE.Mesh(threejsGeometry, this.buildMeshMaterial(tags))\r\n                this.scene.add(dataset.mesh)\r\n                this.datasets.push(dataset)\r\n            }\r\n        }\r\n        walk(threejsGeometry)\r\n    }\r\n    \r\n    /**\r\n     * Handles resizing the 3D viewer when the window resizes.\r\n     */ \r\n    onWindowResize() {\r\n        this.camera.aspect = this.targetDiv.clientWidth / (this.targetDiv.clientHeight)\r\n        this.camera.updateProjectionMatrix()\r\n        this.controls.handleResize()\r\n        this.renderer.setSize(this.targetDiv.clientWidth, this.targetDiv.clientHeight)\r\n    }\r\n    \r\n    /**\r\n     * Runs regularly to update the display.\r\n     */ \r\n    render() {\r\n        this.renderer.render( this.scene, this.camera )\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/display.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "class",
    "name": "Display",
    "memberof": "src/js/display.js",
    "static": true,
    "longname": "src/js/display.js~Display",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/display.js",
    "importStyle": "Display",
    "description": "This class handles writing to the 3D preview display. Large parts of this class are copied directly from JSxCAD.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 69,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/display.js~Display",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/display.js~Display#constructor",
    "access": "public",
    "description": "The constructor run to create the new display. It seems to run with each refresh which doesn't seem right to me.",
    "lineNumber": 12
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "datasets",
    "memberof": "src/js/display.js~Display",
    "static": false,
    "longname": "src/js/display.js~Display#datasets",
    "access": "public",
    "description": "An array which contains the data to be respresented in 3D.",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "displayGrid",
    "memberof": "src/js/display.js~Display",
    "static": false,
    "longname": "src/js/display.js~Display#displayGrid",
    "access": "public",
    "description": "An Flag to indicate if the grid on the XY plane should be displayed.",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "gridScale",
    "memberof": "src/js/display.js~Display",
    "static": false,
    "longname": "src/js/display.js~Display#gridScale",
    "access": "public",
    "description": "Grid scale to keep track of zoom scale",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "axesCheck",
    "memberof": "src/js/display.js~Display",
    "static": false,
    "longname": "src/js/display.js~Display#axesCheck",
    "access": "public",
    "description": "A flag to indicate if the axes should be displayed.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "wireDisplay",
    "memberof": "src/js/display.js~Display",
    "static": false,
    "longname": "src/js/display.js~Display#wireDisplay",
    "access": "public",
    "description": "A flag to indicate if the frame should be displayed in wire frame.",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "targetDiv",
    "memberof": "src/js/display.js~Display",
    "static": false,
    "longname": "src/js/display.js~Display#targetDiv",
    "access": "public",
    "description": "The HTML div object targeted to add the display to.",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "threeMaterial",
    "memberof": "src/js/display.js~Display",
    "static": false,
    "longname": "src/js/display.js~Display#threeMaterial",
    "access": "public",
    "description": "The default material used if nothing is set",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "colorToRgbMapping",
    "memberof": "src/js/display.js~Display",
    "static": false,
    "longname": "src/js/display.js~Display#colorToRgbMapping",
    "access": "public",
    "description": "A list of colors to RGB mappings.",
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "materialProperties",
    "memberof": "src/js/display.js~Display",
    "static": false,
    "longname": "src/js/display.js~Display#materialProperties",
    "access": "public",
    "description": null,
    "lineNumber": 239,
    "undocument": true,
    "type": {
      "types": [
        "{\"paper\": *, \"wood\": *, \"metal\": *, \"glass\": *}"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "member",
    "name": "camera",
    "memberof": "src/js/display.js~Display",
    "static": false,
    "longname": "src/js/display.js~Display#camera",
    "access": "public",
    "description": null,
    "lineNumber": 274,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "controls",
    "memberof": "src/js/display.js~Display",
    "static": false,
    "longname": "src/js/display.js~Display#controls",
    "access": "public",
    "description": "The controls which let the user pan and zoom with the mouse.",
    "lineNumber": 281,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "scene",
    "memberof": "src/js/display.js~Display",
    "static": false,
    "longname": "src/js/display.js~Display#scene",
    "access": "public",
    "description": "The threejs scene to which things should be added to show up on the display.",
    "lineNumber": 296,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "renderer",
    "memberof": "src/js/display.js~Display",
    "static": false,
    "longname": "src/js/display.js~Display#renderer",
    "access": "public",
    "description": "The three js webGLRendere object which does the actual rendering to the screen.",
    "lineNumber": 318,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "baseLog",
    "memberof": "src/js/display.js~Display",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/display.js~Display#baseLog",
    "access": "public",
    "description": "This function is intended to calculate the base log of two numbers and round it to an integer",
    "lineNumber": 452,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "dist3D",
    "memberof": "src/js/display.js~Display",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/display.js~Display#dist3D",
    "access": "public",
    "description": "This function is intended to calculate the 3d distance between object and camera",
    "lineNumber": 461,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "makeMaterial",
    "memberof": "src/js/display.js~Display",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/display.js~Display#makeMaterial",
    "access": "public",
    "description": "This function is intended to allow for materials. It is currently not used and can probably be deleted.",
    "lineNumber": 472,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "material",
        "description": "A string to define the material type."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "writeToDisplay",
    "memberof": "src/js/display.js~Display",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/display.js~Display#writeToDisplay",
    "access": "public",
    "description": "Writes a shape to the 3D display. Expecting a threejs geometry.",
    "lineNumber": 490,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "shape",
        "description": "A jsxcad geometry data set to write to the display. Computation is done in a worker thread"
      }
    ],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "zoomCameraToFit",
    "memberof": "src/js/display.js~Display",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/display.js~Display#zoomCameraToFit",
    "access": "public",
    "description": "Zooms the camera to fit target bounds on the screen.",
    "lineNumber": 511,
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "bounds",
        "description": "An array of some sort...this comment should be updated."
      }
    ],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "resizeGrid",
    "memberof": "src/js/display.js~Display",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/display.js~Display#resizeGrid",
    "access": "public",
    "description": "Redraws the grid with gridscale update value",
    "lineNumber": 528,
    "params": [],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "plane",
    "memberof": "src/js/display.js~Display",
    "static": false,
    "longname": "src/js/display.js~Display#plane",
    "access": "public",
    "description": "The grid which displays under the part.",
    "lineNumber": 539,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "toRgb",
    "memberof": "src/js/display.js~Display",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/display.js~Display#toRgb",
    "access": "public",
    "description": "Converts the tag to an RGB value.",
    "lineNumber": 547,
    "params": [
      {
        "name": "tags",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "defaultRgb",
        "optional": true,
        "types": [
          "number[]"
        ],
        "defaultRaw": [
          0,
          0,
          0
        ],
        "defaultValue": "[0,0,0]"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "setColor",
    "memberof": "src/js/display.js~Display",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/display.js~Display#setColor",
    "access": "public",
    "description": "Sets the the color of the threejs mesh.",
    "lineNumber": 563,
    "params": [
      {
        "name": "tags",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "parameters",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "otherwise",
        "optional": true,
        "types": [
          "number[]"
        ],
        "defaultRaw": [
          0,
          0,
          0
        ],
        "defaultValue": "[0,0,0]"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "merge",
    "memberof": "src/js/display.js~Display",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/display.js~Display#merge",
    "access": "public",
    "description": "Merges two objects.",
    "lineNumber": 580,
    "params": [
      {
        "name": "properties",
        "types": [
          "*"
        ]
      },
      {
        "name": "parameters",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "setMaterial",
    "memberof": "src/js/display.js~Display",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/display.js~Display#setMaterial",
    "access": "public",
    "description": "Sets the material properties of the threejs material.",
    "lineNumber": 589,
    "params": [
      {
        "name": "tags",
        "types": [
          "*"
        ]
      },
      {
        "name": "parameters",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "buildMeshMaterial",
    "memberof": "src/js/display.js~Display",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/display.js~Display#buildMeshMaterial",
    "access": "public",
    "description": "Constructs a new threejs mesh material based on the properties in the tags.",
    "lineNumber": 604,
    "params": [
      {
        "name": "tags",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "updateDisplayData",
    "memberof": "src/js/display.js~Display",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/display.js~Display#updateDisplayData",
    "access": "public",
    "description": "Clears the display and writes a threejs geometry to it.",
    "lineNumber": 622,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "threejsGeometry",
        "description": "A threejs geometry to write to the display."
      }
    ],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "onWindowResize",
    "memberof": "src/js/display.js~Display",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/display.js~Display#onWindowResize",
    "access": "public",
    "description": "Handles resizing the 3D viewer when the window resizes.",
    "lineNumber": 671,
    "params": [],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "render",
    "memberof": "src/js/display.js~Display",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/display.js~Display#render",
    "access": "public",
    "description": "Runs regularly to update the display.",
    "lineNumber": 681,
    "params": [],
    "return": null
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "src/js/githubOauth.js",
    "content": "import Molecule from './molecules/molecule.js'\r\nimport GlobalVariables from './globalvariables.js'\r\nimport { extractBomTags } from './BOM.js'\r\nimport { OAuth } from 'oauthio-web'\r\n\r\n/**\r\n * This function works like a class to sandbox interaction with GitHub.\r\n */\r\nexport default function GitHubModule(){\r\n    const Octokit = require('@octokit/rest')\r\n    /** \r\n     * The octokit instance which allows authenticated interaction with GitHub.\r\n     * @type {object}\r\n     */\r\n    var octokit = new Octokit()\r\n    /** \r\n     * The HTML element which is the popup.\r\n     * @type {object}\r\n     */\r\n    var popup = document.getElementById('projects-popup')\r\n    /** \r\n     * The name of the current repo.\r\n     * @type {string}\r\n     */\r\n    var currentRepoName = null\r\n    /** \r\n     * The name of the currently logged in user.\r\n     * @type {string}\r\n     */\r\n    var currentUser = null\r\n    /** \r\n     * The text to display at the top of the bill of materials.\r\n     * @type {string}\r\n     */\r\n    var bomHeader = \"###### Note: Do not edit this file directly, it is automatically generated from the CAD model \\n# Bill Of Materials \\n |Part|Number Needed|Price|Source| \\n |----|----------|-----|-----|\"\r\n     \r\n    /** \r\n     * The text to display at the top of the ReadMe file.\r\n     * @type {string}\r\n     */\r\n    var readmeHeader = \"###### Note: Do not edit this file directly, it is automatically generated from the CAD model\"\r\n\r\n    /** \r\n     * The timer used to trigger saving of the file.\r\n     * @type {object}\r\n     */\r\n    var intervalTimer\r\n    \r\n    document.getElementById(\"loginButton\").addEventListener(\"mousedown\", () => {\r\n        this.tryLogin()\r\n    })\r\n    \r\n    /** \r\n     * Try to login using the oauth popup.\r\n     */\r\n    this.tryLogin = function(){\r\n        \r\n        // Initialize with OAuth.io app public key\r\n        if(window.location.href.includes('private')){\r\n            OAuth.initialize('6CQQE8MMCBFjdWEjevnTBMCQpsw') //app public key for repo scope\r\n        }\r\n        else{\r\n            OAuth.initialize('BYP9iFpD7aTV9SDhnalvhZ4fwD8') //app public key for public_repo scope\r\n        }\r\n        // Use popup for oauth\r\n        OAuth.popup('github').then(github => {\r\n            \r\n            octokit = new Octokit({\r\n                auth: github.access_token\r\n            })\r\n            \r\n            //Test the authentication \r\n            octokit.users.getAuthenticated({}).then(result => {\r\n                currentUser = result.data.login\r\n                this.showProjectsToLoad()\r\n            })\r\n        })\r\n    }\r\n    \r\n    /** \r\n     * Display projects which can be loaded in the popup.\r\n     */\r\n    this.showProjectsToLoad = function(){\r\n        //Remove everything in the popup now\r\n        while (popup.firstChild) {\r\n            popup.removeChild(popup.firstChild)\r\n        }\r\n        \r\n        popup.classList.remove('off')\r\n        popup.setAttribute(\"style\", \"text-align: center\")\r\n        \r\n        if(GlobalVariables.topLevelMolecule && GlobalVariables.topLevelMolecule.name != \"Maslow Create\"){ //Only offer a close button if there is a project to go back to\r\n            var closeButton = document.createElement(\"button\")\r\n            closeButton.appendChild(document.createTextNode(\"X\"))\r\n            closeButton.setAttribute(\"class\", \"closeButton\")\r\n            closeButton.style.fontSize = \"xx-large\"\r\n            closeButton.addEventListener(\"click\", () => {\r\n                popup.classList.add('off')\r\n            })\r\n            popup.appendChild(closeButton)\r\n        }\r\n        \r\n        var tabButtons = document.createElement(\"DIV\")\r\n        tabButtons.setAttribute(\"class\", \"tab\")\r\n        tabButtons.setAttribute(\"style\", \"display: inline-block;\")\r\n        popup.appendChild(tabButtons)\r\n        \r\n        var yoursButton = document.createElement(\"button\")\r\n        yoursButton.setAttribute(\"class\", \"tablinks\")\r\n        yoursButton.appendChild(document.createTextNode(\"Your Projects\"))\r\n        yoursButton.style.fontSize = \"xx-large\"\r\n        yoursButton.setAttribute(\"id\", \"yoursButton\")\r\n        yoursButton.addEventListener(\"click\", (e) => {\r\n            this.openTab(e, \"yoursButton\")\r\n        })\r\n        tabButtons.appendChild(yoursButton)\r\n        \r\n        var githubButton = document.createElement(\"button\")\r\n        githubButton.setAttribute(\"class\", \"tablinks\")\r\n        githubButton.appendChild(document.createTextNode(\"All Projects\"))\r\n        githubButton.style.fontSize = \"xx-large\"\r\n        githubButton.setAttribute(\"id\", \"githubButton\")\r\n        githubButton.addEventListener(\"click\", (e) => {\r\n            this.openTab(e, \"githubButton\")\r\n        })\r\n        tabButtons.appendChild(githubButton)\r\n        \r\n        popup.appendChild(document.createElement(\"br\"))\r\n        \r\n        var searchBar = document.createElement(\"input\")\r\n        searchBar.setAttribute(\"type\", \"text\")\r\n        searchBar.setAttribute(\"placeholder\", \"Search for project..\")\r\n        searchBar.setAttribute(\"class\", \"menu_search\")\r\n        searchBar.setAttribute(\"id\", \"project_search\")\r\n        searchBar.setAttribute(\"style\", \"width: 50%\")\r\n        popup.appendChild(searchBar)\r\n        searchBar.addEventListener('keyup', (e) => {\r\n            this.loadProjectsBySearch(e, searchBar.value)\r\n        })\r\n        \r\n        \r\n        this.projectsSpaceDiv = document.createElement(\"DIV\")\r\n        this.projectsSpaceDiv.setAttribute(\"class\", \"float-left-div\")\r\n        this.projectsSpaceDiv.setAttribute(\"style\", \"overflow: auto\")\r\n        popup.appendChild(this.projectsSpaceDiv)\r\n        \r\n        yoursButton.click()\r\n    }\r\n    \r\n    /** \r\n     * Search for the name of a project and then return results which match that search.\r\n     */\r\n    this.loadProjectsBySearch = function(ev, searchString){\r\n\r\n        if(ev.key == \"Enter\"){\r\n            //Remove projects shown now\r\n            while (this.projectsSpaceDiv.firstChild) {\r\n                this.projectsSpaceDiv.removeChild(this.projectsSpaceDiv.firstChild)\r\n            }\r\n            \r\n            //Add the create a new project button\r\n            this.addProject(\"New Project\", null, true, \"newProject.svg\")\r\n            \r\n            //Load projects\r\n            var query\r\n            var owned\r\n            if(document.getElementsByClassName(\"tablinks active\")[0].id == \"yoursButton\"){\r\n                owned = true\r\n                query = searchString + ' ' + 'fork:true user:' + currentUser + ' topic:maslowcreate'\r\n            }\r\n            else{\r\n                owned = false\r\n                query = searchString + ' topic:maslowcreate'\r\n            }\r\n            \r\n            //Figure out how many repos this user has, search will throw an error if they have 0;\r\n            octokit.repos.list({\r\n                affiliation: 'owner',\r\n            }).then(({data}) => {\r\n                if(data.length == 0){                   //If the user has no repos at all, the search will fail so we want to spawn a popup here and clone the example\r\n                    this.cloneExampleProjectPopup()\r\n                }\r\n            })\r\n            \r\n            octokit.search.repos({\r\n                q: query,\r\n                sort: \"stars\",\r\n                per_page: 100,\r\n                page: 1,\r\n                headers: {\r\n                    accept: 'application/vnd.github.mercy-preview+json'\r\n                }\r\n            }).then(result => {\r\n                result.data.items.forEach(repo => {\r\n                    const thumbnailPath = \"https://raw.githubusercontent.com/\"+repo.full_name+\"/master/project.svg?sanitize=true\"\r\n                    this.addProject(repo.name, repo.id, owned, thumbnailPath)\r\n                })\r\n                if(result.data.items.length == 0 && searchString == ''){ //If the empty search returned no results on loading\r\n                    this.cloneExampleProjectPopup()\r\n                }\r\n            }) \r\n        } \r\n    }\r\n    \r\n    /** \r\n     * Clone a copy of the example project.\r\n     */\r\n    this.cloneExampleProjectPopup = function(){\r\n        this.forkByID(177732883) //This is the ID of the example project\r\n    }\r\n    \r\n    /** \r\n     * Adds a new project to the load projects display.\r\n     */\r\n    this.addProject = function(projectName, id, owned, thumbnailPath){\r\n        //create a project element to display\r\n        \r\n        var project = document.createElement(\"DIV\")\r\n        \r\n        var projectPicture = document.createElement(\"IMG\")\r\n        projectPicture.setAttribute(\"src\", thumbnailPath)\r\n        projectPicture.setAttribute(\"onerror\", \"this.src='/defaultThumbnail.svg'\")\r\n        projectPicture.setAttribute(\"style\", \"width: 100%; height: 100%;\")\r\n        project.appendChild(projectPicture)\r\n        project.appendChild(document.createElement(\"BR\"))\r\n        \r\n        var shortProjectName\r\n        if(projectName.length > 9){\r\n            shortProjectName = document.createTextNode(projectName.substr(0,7)+\"..\")\r\n        }\r\n        else{\r\n            shortProjectName = document.createTextNode(projectName)\r\n        }\r\n        project.setAttribute(\"class\", \"project\")\r\n        project.setAttribute(\"id\", projectName)\r\n        project.appendChild(shortProjectName) \r\n        this.projectsSpaceDiv.appendChild(project) \r\n        \r\n        document.getElementById(projectName).addEventListener('click', () => {\r\n            this.projectClicked(projectName, id, owned)\r\n        })\r\n\r\n    }\r\n    \r\n    /** \r\n     * Runs when you click on a project.\r\n     */\r\n    this.projectClicked = function(projectName, projectID, owned){\r\n        //runs when you click on one of the projects\r\n        if(projectName == \"New Project\"){\r\n            this.createNewProjectPopup()\r\n        }\r\n        else if(owned){\r\n            this.loadProject(projectName)\r\n        }\r\n        else{\r\n            window.open('/run?'+projectID)\r\n        }\r\n    }\r\n    \r\n    /** \r\n     * Runs when you switch tabs up top.\r\n     */\r\n    this.openTab = function(evt, tabName) {\r\n      \r\n        // Declare all variables\r\n        var i, tabcontent, tablinks\r\n\r\n        // Get all elements with class=\"tabcontent\" and hide them\r\n        tabcontent = document.getElementsByClassName(\"tabcontent\")\r\n        for (i = 0; i < tabcontent.length; i++) {\r\n            tabcontent[i].style.display = \"none\"\r\n        }\r\n\r\n        // Get all elements with class=\"tablinks\" and remove the class \"active\"\r\n        tablinks = document.getElementsByClassName(\"tablinks\")\r\n        for (i = 0; i < tablinks.length; i++) {\r\n            tablinks[i].className = tablinks[i].className.replace(\" active\", \"\")\r\n        }\r\n\r\n        // Show the current tab, and add an \"active\" class to the button that opened the tab\r\n        document.getElementById(tabName).style.display = \"block\"\r\n        evt.currentTarget.className += \" active\"\r\n      \r\n        //Click on the search bar so that when you start typing it shows updateCommands\r\n        document.getElementById('menuInput').focus()\r\n      \r\n      \r\n        this.loadProjectsBySearch({key: \"Enter\"}, document.getElementById(\"project_search\").value)\r\n    }\r\n    \r\n    /** \r\n     * The popup to create a new project (giving it a name and whatnot).\r\n     */\r\n    this.createNewProjectPopup = function(){\r\n        //Clear the popup and populate the fields we will need to create the new repo\r\n        \r\n        while (popup.firstChild) {\r\n            popup.removeChild(popup.firstChild)\r\n        }\r\n        \r\n        //Project name\r\n        // <div class=\"form\">\r\n        var createNewProjectDiv = document.createElement(\"DIV\")\r\n        createNewProjectDiv.setAttribute(\"class\", \"form\")\r\n        \r\n        //Add a title\r\n        var header = document.createElement(\"H1\")\r\n        var title = document.createTextNode(\"Create a new project\")\r\n        header.appendChild(title)\r\n        createNewProjectDiv.appendChild(header)\r\n        \r\n        //Create the form object\r\n        var form = document.createElement(\"form\")\r\n        form.setAttribute(\"class\", \"login-form\")\r\n        createNewProjectDiv.appendChild(form)\r\n        \r\n        //Create the name field\r\n        var name = document.createElement(\"input\")\r\n        name.setAttribute(\"id\",\"project-name\")\r\n        name.setAttribute(\"type\",\"text\")\r\n        name.setAttribute(\"placeholder\",\"Project name\")\r\n        form.appendChild(name)\r\n        \r\n        //Add the description field\r\n        var description = document.createElement(\"input\")\r\n        description.setAttribute(\"id\", \"project-description\")\r\n        description.setAttribute(\"type\", \"text\")\r\n        description.setAttribute(\"placeholder\", \"Project description\")\r\n        form.appendChild(description)\r\n        \r\n        //Add the button\r\n        var createButton = document.createElement(\"button\")\r\n        createButton.setAttribute(\"type\", \"button\")\r\n        createButton.addEventListener('click', () => {\r\n            this.createNewProject()\r\n        })\r\n        var buttonText = document.createTextNode(\"Create Project\")\r\n        createButton.appendChild(buttonText)\r\n        form.appendChild(createButton)\r\n        \r\n\r\n        popup.appendChild(createNewProjectDiv)\r\n\r\n    }\r\n    \r\n    /** \r\n     * Open a new tab with a sharable copy of the project.\r\n     */\r\n    this.shareOpenedProject = function(){\r\n        alert(\"A page with a shareable url to this project will open in a new window. Share the link to that page with anyone you would like to share the project with.\")\r\n            \r\n        octokit.repos.get({\r\n            owner: currentUser,\r\n            repo: currentRepoName\r\n        }).then(result => {\r\n            var ID = result.data.id\r\n            window.open('/run?'+ID)\r\n        })\r\n    }\r\n    \r\n    /** \r\n     * Open a new tab with the github page for the project.\r\n     */\r\n    this.openGitHubPage = function(){\r\n        //Open the github page for the current project in a new tab\r\n        octokit.repos.get({\r\n            owner: currentUser,\r\n            repo: currentRepoName\r\n        }).then(result => {\r\n            var url = result.data.html_url\r\n            window.open(url)\r\n        })\r\n    }\r\n    \r\n    /** \r\n     * Open a new tab with the README page for the project.\r\n     */\r\n    this.openREADMEPage = function(){\r\n        //Open the github page for the current project in a new tab\r\n        octokit.repos.get({\r\n            owner: currentUser,\r\n            repo: currentRepoName\r\n        }).then(result => {\r\n            var url = result.data.html_url + '/blob/master/README.md'\r\n            window.open(url)\r\n        })\r\n    }\r\n    \r\n    /** \r\n     * Open a new tab with the Bill Of Materials page for the project.\r\n     */\r\n    this.openBillOfMaterialsPage = function(){\r\n        //Open the github page for the current project in a new tab\r\n        octokit.repos.get({\r\n            owner: currentUser,\r\n            repo: currentRepoName\r\n        }).then(result => {\r\n            var url = result.data.html_url + '/blob/master/BillOfMaterials.md'\r\n            window.open(url)\r\n        })\r\n    }\r\n    \r\n    /** \r\n     * Search github for projects which match a string.\r\n     */\r\n    this.searchGithub = async (searchString) => {\r\n        return await octokit.search.repos({\r\n            q: searchString + ' topic:maslowcreate',\r\n            sort: 'stars',\r\n            per_page: 10,\r\n            page: 1,\r\n            headers: {\r\n                accept: 'application/vnd.github.mercy-preview+json'\r\n            }\r\n        })\r\n    }\r\n    \r\n    /** \r\n     * Creates a new blank project.\r\n     */\r\n    this.createNewProject = function(){\r\n        \r\n        if(typeof intervalTimer != undefined){\r\n            clearInterval(intervalTimer) //Turn of auto saving\r\n        }\r\n        \r\n        //Get name and description\r\n        var name = document.getElementById('project-name').value\r\n        var description = document.getElementById('project-description').value\r\n        \r\n        //Load a blank project\r\n        GlobalVariables.topLevelMolecule = new Molecule({\r\n            x: 0, \r\n            y: 0, \r\n            topLevel: true, \r\n            name: name,\r\n            atomType: \"Molecule\",\r\n            uniqueID: GlobalVariables.generateUniqueID()\r\n        })\r\n        \r\n        GlobalVariables.currentMolecule = GlobalVariables.topLevelMolecule\r\n        \r\n        //Create a new repo\r\n        octokit.repos.createForAuthenticatedUser({\r\n            name: name,\r\n            description: description\r\n        }).then(result => {\r\n            //Once we have created the new repo we need to create a file within it to store the project in\r\n            currentRepoName = result.data.name\r\n            var path = \"project.maslowcreate\"\r\n            var content = window.btoa(JSON.stringify(GlobalVariables.topLevelMolecule.serialize(null), null, 4)) // create a file with the new molecule in it and base64 encode it\r\n            octokit.repos.createFile({\r\n                owner: currentUser,\r\n                repo: currentRepoName,\r\n                path: path,\r\n                message: \"initialize repo\", \r\n                content: content\r\n            }).then(() => {\r\n                //Then create the BOM file\r\n                content = window.btoa(bomHeader) // create a file with just the header in it and base64 encode it\r\n                octokit.repos.createFile({\r\n                    owner: currentUser,\r\n                    repo: currentRepoName,\r\n                    path: \"BillOfMaterials.md\",\r\n                    message: \"initialize BOM\", \r\n                    content: content\r\n                }).then(() => {\r\n                    //Then create the README file\r\n                    content = window.btoa(readmeHeader) // create a file with just the word \"init\" in it and base64 encode it\r\n                    octokit.repos.createFile({\r\n                        owner: currentUser,\r\n                        repo: currentRepoName,\r\n                        path: \"README.md\",\r\n                        message: \"initialize README\", \r\n                        content: content\r\n                    }).then(() => {\r\n                        intervalTimer = setInterval(() => { this.saveProject() }, 60000) //Save the project regularly\r\n                    })\r\n                })\r\n            })\r\n            \r\n            //Update the project topics\r\n            octokit.repos.replaceTopics({\r\n                owner: currentUser,\r\n                repo: currentRepoName,\r\n                names: [\"maslowcreate\", \"maslowcreate-project\"],\r\n                headers: {\r\n                    accept: 'application/vnd.github.mercy-preview+json'\r\n                }\r\n            })\r\n        })\r\n        \r\n        GlobalVariables.evalLock = false\r\n        GlobalVariables.currentMolecule.backgroundClick()\r\n        \r\n        //Clear and hide the popup\r\n        while (popup.firstChild) {\r\n            popup.removeChild(popup.firstChild)\r\n        }\r\n        popup.classList.add('off')\r\n        \r\n        \r\n    }\r\n\r\n    /** \r\n     * Save the current project to github.\r\n     */\r\n    this.saveProject = function(){\r\n        //Save the current project into the github repo\r\n        if(currentRepoName != null){\r\n            var shape = null\r\n            if(GlobalVariables.topLevelMolecule.value != null){\r\n                shape = GlobalVariables.topLevelMolecule.value\r\n            }else{\r\n                shape = {\r\n                    \"solid\": [\r\n                        [ [ [ 5.000000000000001, 5, 10 ],\r\n                            [ -5, 5.000000000000001, 10 ],\r\n                            [ -5.000000000000002, -4.999999999999999, 10 ],\r\n                            [ 4.999999999999999, -5.000000000000002, 10 ] ] ],\r\n                        [ [ [ 4.999999999999999, -5.000000000000002, 0 ],\r\n                            [ -5.000000000000002, -4.999999999999999, 0 ],\r\n                            [ -5, 5.000000000000001, 0 ],\r\n                            [ 5.000000000000001, 5, 0 ] ] ],\r\n                        [ [ [ 4.999999999999999, -5.000000000000002, 0 ],\r\n                            [ 4.999999999999999, -5.000000000000002, 10 ],\r\n                            [ -5.000000000000002, -4.999999999999999, 10 ],\r\n                            [ -5.000000000000002, -4.999999999999999, 0 ] ] ],\r\n                        [ [ [ -5.000000000000002, -4.999999999999999, 0 ],\r\n                            [ -5.000000000000002, -4.999999999999999, 10 ],\r\n                            [ -5, 5.000000000000001, 10 ],\r\n                            [ -5, 5.000000000000001, 0 ] ] ],\r\n                        [ [ [ -5, 5.000000000000001, 0 ],\r\n                            [ -5, 5.000000000000001, 10 ],\r\n                            [ 5.000000000000001, 5, 10 ],\r\n                            [ 5.000000000000001, 5, 0 ] ] ],\r\n                        [ [ [ 5.000000000000001, 5, 0 ],\r\n                            [ 5.000000000000001, 5, 10 ],\r\n                            [ 4.999999999999999, -5.000000000000002, 10 ],\r\n                            [ 4.999999999999999, -5.000000000000002, 0 ] ] ]\r\n                    ]\r\n                }\r\n            }\r\n            \r\n            const threadCompute = async (values, key) => {\r\n                return await GlobalVariables.ask({values: values, key: key})\r\n            }\r\n            threadCompute([shape], \"stl\").then( stlContent => {\r\n                \r\n                threadCompute([shape], \"SVG Picture\").then(contentSvg => {\r\n                    \r\n                    var bomContent = bomHeader\r\n                    const bomItems = extractBomTags(GlobalVariables.topLevelMolecule.value)\r\n                    var totalParts = 0\r\n                    var totalCost  = 0\r\n                    bomItems.forEach(item => {\r\n                        totalParts += item.numberNeeded\r\n                        totalCost  += item.costUSD\r\n                        bomContent = bomContent + \"\\n|\" + item.BOMitemName + \"|\" + item.numberNeeded + \"|$\" + item.costUSD.toFixed(2) + \"|\" + item.source + \"|\"\r\n                    })\r\n                    bomContent = bomContent + \"\\n|\" + \"Total: \" + \"|\" + totalParts + \"|$\" + totalCost.toFixed(2) + \"|\" + \" \" + \"|\"\r\n                    bomContent = bomContent+\"\\n\\n 3xCOG MSRP: $\" + (3*totalCost).toFixed(2)\r\n                    \r\n                    \r\n                    var readmeContent = readmeHeader + \"\\n\\n\" + \"# \" + currentRepoName + \"\\n\\n![](/project.svg)\\n\\n\"\r\n                    GlobalVariables.topLevelMolecule.requestReadme().forEach(item => {\r\n                        readmeContent = readmeContent + item + \"\\n\\n\\n\"\r\n                    })\r\n                    \r\n                    const projectContent = JSON.stringify(GlobalVariables.topLevelMolecule.serialize(null), null, 4)\r\n                    \r\n                    this.createCommit(octokit,{\r\n                        owner: currentUser,\r\n                        repo: currentRepoName,\r\n                        base: 'master', /* optional: defaults to default branch */\r\n                        changes: {\r\n                            files: {\r\n                                'project.stl': stlContent,\r\n                                'project.svg': contentSvg,\r\n                                'BillOfMaterials.md': bomContent,\r\n                                'README.md': readmeContent,\r\n                                'project.maslowcreate': projectContent\r\n                            },\r\n                            commit: 'Autosave'\r\n                        }\r\n                    }) \r\n                })\r\n            })\r\n        }\r\n    }\r\n    \r\n    /** \r\n     * Create a commit as part of the saving process.\r\n     */\r\n    this.createCommit = async function(octokit, { owner, repo, base, changes }) {\r\n        let response\r\n\r\n        if (!base) {\r\n            response = await octokit.repos.get({ owner, repo })\r\n            base = response.data.default_branch\r\n        }\r\n\r\n        response = await octokit.repos.listCommits({\r\n            owner,\r\n            repo,\r\n            sha: base,\r\n            per_page: 1\r\n        })\r\n        let latestCommitSha = response.data[0].sha\r\n        const treeSha = response.data[0].commit.tree.sha\r\n      \r\n        response = await octokit.git.createTree({\r\n            owner,\r\n            repo,\r\n            base_tree: treeSha,\r\n            tree: Object.keys(changes.files).map(path => {\r\n                return {\r\n                    path,\r\n                    mode: '100644',\r\n                    content: changes.files[path]\r\n                }\r\n            })\r\n        })\r\n        const newTreeSha = response.data.sha\r\n\r\n        response = await octokit.git.createCommit({\r\n            owner,\r\n            repo,\r\n            message: changes.commit,\r\n            tree: newTreeSha,\r\n            parents: [latestCommitSha]\r\n        })\r\n        latestCommitSha = response.data.sha\r\n      \r\n        await octokit.git.updateRef({\r\n            owner,\r\n            repo,\r\n            sha: latestCommitSha,\r\n            ref: `heads/master`,\r\n            force: true\r\n        })\r\n      \r\n        console.warn(\"Project saved\")\r\n        //alert\r\n        let popUp = document.querySelector('#popUp')\r\n        popUp.setAttribute(\"style\",\"display:block\")\r\n        setTimeout(function() {\r\n            popUp.setAttribute(\"style\",\"display:none\")\r\n        }, 4000)\r\n    }\r\n    \r\n    /** \r\n     * Loads a project from github by name.\r\n     */\r\n    this.loadProject = function(projectName){\r\n        GlobalVariables.evalLock = true //Lock evaluation of anything\r\n        if(typeof intervalTimer != undefined){\r\n            clearInterval(intervalTimer) //Turn off auto saving\r\n        }\r\n        \r\n        //Clear and hide the popup\r\n        while (popup.firstChild) {\r\n            popup.removeChild(popup.firstChild)\r\n        }\r\n        popup.classList.add('off')\r\n        \r\n        currentRepoName = projectName\r\n        \r\n        //Load a blank project\r\n        GlobalVariables.topLevelMolecule = new Molecule({\r\n            x: 0, \r\n            y: 0, \r\n            topLevel: true, \r\n            atomType: \"Molecule\"\r\n        })\r\n        \r\n        GlobalVariables.currentMolecule = GlobalVariables.topLevelMolecule\r\n        \r\n        octokit.repos.getContents({\r\n            owner: currentUser,\r\n            repo: projectName,\r\n            path: 'project.maslowcreate'\r\n        }).then(result => {\r\n            \r\n            //content will be base64 encoded\r\n            let rawFile = JSON.parse(atob(result.data.content))\r\n            \r\n            \r\n            var moleculesList = rawFile.molecules\r\n            \r\n            if(rawFile.circleSegmentSize){\r\n                GlobalVariables.circleSegmentSize = rawFile.circleSegmentSize\r\n            }\r\n            \r\n            //Load the top level molecule from the file\r\n            const allAtomsPlaced = GlobalVariables.topLevelMolecule.deserialize(moleculesList, moleculesList.filter((molecule) => { return molecule.topLevel == true })[0].uniqueID)\r\n            \r\n            allAtomsPlaced.then( ()=> {\r\n                GlobalVariables.evalLock = false\r\n                GlobalVariables.topLevelMolecule.unlock()\r\n                GlobalVariables.topLevelMolecule.beginPropogation()\r\n                GlobalVariables.topLevelMolecule.backgroundClick()\r\n            })\r\n            \r\n            intervalTimer = setInterval(() => this.saveProject(), 60000) //Save the project regularly\r\n        })\r\n        \r\n    }\r\n    \r\n    /** \r\n     * Loads a project from github by its github ID.\r\n     */\r\n    this.getProjectByID = async function(id, saveUserInfo){\r\n        let repo = await octokit.request('GET /repositories/:id', {id})\r\n        //Find out the owners info;\r\n        const user     = repo.data.owner.login\r\n        const repoName = repo.data.name\r\n        //Get the file contents\r\n        let result = await octokit.repos.getContents({\r\n            owner: user,\r\n            repo: repoName,\r\n            path: 'project.maslowcreate'\r\n        })\r\n        \r\n        //If this is the top level we will save the rep info at the top level\r\n        if(saveUserInfo){\r\n            currentUser = user\r\n            currentRepoName = repoName\r\n        }\r\n        \r\n        return result\r\n    }\r\n    \r\n    /** \r\n     * Export a molecule as a new github project.\r\n     */\r\n    this.exportCurrentMoleculeToGithub = function(molecule){\r\n        \r\n        //Get name and description\r\n        var name = molecule.name\r\n        var description = \"A stand alone molecule exported from Maslow Create\"\r\n        \r\n        //Create a new repo\r\n        octokit.repos.createForAuthenticatedUser({\r\n            name: name,\r\n            description: description\r\n        }).then(result => {\r\n            //Once we have created the new repo we need to create a file within it to store the project in\r\n            var repoName = result.data.name\r\n            var id       = result.data.id\r\n            var path     = \"project.maslowcreate\"\r\n            var content  = window.btoa(\"init\") // create a file with just the word \"init\" in it and base64 encode it\r\n            octokit.repos.createFile({\r\n                owner: currentUser,\r\n                repo: repoName,\r\n                path: path,\r\n                message: \"initialize repo\", \r\n                content: content\r\n            }).then(() => {\r\n                \r\n                //Save the molecule into the newly created repo\r\n                \r\n                var path = \"project.maslowcreate\"\r\n                \r\n                molecule.topLevel = true //force the molecule to export in the long form as if it were the top level molecule\r\n                var content = window.btoa(JSON.stringify(molecule.serialize(null), null, 4)) //Convert the passed molecule object to a JSON string and then convert it to base64 encoding\r\n                \r\n                //Get the SHA for the file\r\n                octokit.repos.getContents({\r\n                    owner: currentUser,\r\n                    repo: repoName,\r\n                    path: path\r\n                }).then(result => {\r\n                    var sha = result.data.sha\r\n                    \r\n                    //Save the repo to the file\r\n                    octokit.repos.updateFile({\r\n                        owner: currentUser,\r\n                        repo: repoName,\r\n                        path: path,\r\n                        message: \"export Molecule\", \r\n                        content: content,\r\n                        sha: sha\r\n                    }).then(() => {\r\n                        //Replace the existing molecule now that we just exported\r\n                        molecule.replaceThisMoleculeWithGithub(id)\r\n                    })\r\n                })\r\n\r\n            })\r\n            \r\n            //Update the project topics\r\n            octokit.repos.replaceTopics({\r\n                owner: currentUser,\r\n                repo: repoName,\r\n                names: [\"maslowcreate\", \"maslowcreate-molecule\"],\r\n                headers: {\r\n                    accept: 'application/vnd.github.mercy-preview+json'\r\n                }\r\n            })\r\n            \r\n        })\r\n    }\r\n    \r\n    /** \r\n     * Star a project on github...I don't believe this is working.\r\n     */\r\n    this.starProject = function(id){\r\n        //Authenticate - Initialize with OAuth.io app public key\r\n        OAuth.initialize('BYP9iFpD7aTV9SDhnalvhZ4fwD8')\r\n        // Use popup for oauth\r\n        OAuth.popup('github').then(github => {\r\n            \r\n            octokit.authenticate({\r\n                type: \"oauth\",\r\n                token: github.access_token,\r\n                headers: {\r\n                    accept: 'application/vnd.github.mercy-preview+json'\r\n                }\r\n            })\r\n            \r\n            octokit.request('GET /repositories/:id', {id}).then(result => {\r\n                //Find out the information of who owns the project we are trying to fork\r\n                var user     = result.data.owner.login\r\n                var repoName = result.data.name\r\n                this.octokit.activity.starRepo({\r\n                    owner: user,\r\n                    repo: repoName\r\n                })\r\n            })\r\n        })\r\n    }\r\n    \r\n    /** \r\n     * Fork a project on github by unique ID.\r\n     */\r\n    this.forkByID = function(id){\r\n        \r\n        //Authenticate - Initialize with OAuth.io app public key\r\n        OAuth.initialize('BYP9iFpD7aTV9SDhnalvhZ4fwD8')\r\n        // Use popup for oauth\r\n        OAuth.popup('github').then(github => {\r\n            \r\n            octokit.authenticate({\r\n                type: \"oauth\",\r\n                token: github.access_token,\r\n                headers: {\r\n                    accept: 'application/vnd.github.mercy-preview+json'\r\n                }\r\n            })\r\n            \r\n            octokit.request('GET /repositories/:id', {id}).then(result => {\r\n                //Find out the information of who owns the project we are trying to fork\r\n                var user     = result.data.owner.login\r\n                var repoName = result.data.name\r\n                \r\n                octokit.repos.listTopics({\r\n                    owner: user, \r\n                    repo: repoName,\r\n                    headers: {\r\n                        accept: 'application/vnd.github.mercy-preview+json'\r\n                    }\r\n                }).then(result => {\r\n                    var topics = result.data.names\r\n                    \r\n                    //Create a fork of the project with the found user name and repo name under your account\r\n                    octokit.repos.createFork({\r\n                        owner: user, \r\n                        repo: repoName,\r\n                        headers: {\r\n                            accept: 'application/vnd.github.mercy-preview+json'\r\n                        }\r\n                    }).then(result => {\r\n                        var repoName = result.data.name\r\n                        //Manually copy over the topics which are lost in forking\r\n                        octokit.repos.replaceTopics({\r\n                            owner: result.data.owner.login,\r\n                            repo: result.data.name,\r\n                            names: topics,\r\n                            headers: {\r\n                                accept: 'application/vnd.github.mercy-preview+json'\r\n                            }\r\n                        }).then(() => {\r\n                            \r\n                            \r\n                            //Remove everything in the popup now\r\n                            while (popup.firstChild) {\r\n                                popup.removeChild(popup.firstChild)\r\n                            }\r\n                            \r\n                            popup.classList.remove('off')\r\n                            popup.setAttribute(\"style\", \"text-align: center\")\r\n\r\n                            var subButtonDiv = document.createElement('div')\r\n                            subButtonDiv.setAttribute(\"class\", \"form\")\r\n                            \r\n                            //Add a title\r\n                            var title = document.createElement(\"H3\")\r\n                            title.appendChild(document.createTextNode(\"A copy of the project '\" + repoName + \"' has been copied and added to your projects. You can view it by clicking the button below.\"))\r\n                            subButtonDiv.appendChild(title)\r\n                            subButtonDiv.appendChild(document.createElement(\"br\"))\r\n                            \r\n                            var form = document.createElement(\"form\")\r\n                            subButtonDiv.appendChild(form)\r\n                            var button = document.createElement(\"button\")\r\n                            button.setAttribute(\"type\", \"button\")\r\n                            button.appendChild(document.createTextNode(\"View Projects\"))\r\n                            button.addEventListener(\"click\", () => {\r\n                                window.location.href = '/'\r\n                            })\r\n                            form.appendChild(button)\r\n                            popup.appendChild(subButtonDiv)\r\n                        })\r\n                    })\r\n                })\r\n            })\r\n        })\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/githubOauth.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "GitHubModule",
    "memberof": "src/js/githubOauth.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/githubOauth.js~GitHubModule",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/githubOauth.js",
    "importStyle": "GitHubModule",
    "description": "This function works like a class to sandbox interaction with GitHub.",
    "lineNumber": 9,
    "params": [],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "src/js/globalvariables.js",
    "content": "import { create, all }  from 'mathjs'\r\nimport Assembly         from './molecules/assembly.js'\r\nimport CutAway          from './molecules/cutaway.js'\r\nimport CutList          from './molecules/cutlist.js'\r\nimport Circle           from './molecules/circle.js'\r\nimport Color            from './molecules/color.js'\r\nimport Rectangle        from './molecules/rectangle.js'\r\nimport ShrinkWrap       from './molecules/shrinkwrap.js'\r\nimport Translate        from './molecules/translate.js'\r\nimport Tag              from './molecules/tag.js'\r\nimport RegularPolygon   from './molecules/regularpolygon.js'\r\nimport Extrude          from './molecules/extrude.js'\r\nimport Scale            from './molecules/scale.js'\r\nimport Stl              from './molecules/stl.js'\r\nimport Svg              from './molecules/svg.js'\r\nimport Union            from './molecules/union.js'\r\nimport Intersection     from './molecules/intersection.js'\r\nimport Difference       from './molecules/difference.js'\r\nimport Constant         from './molecules/constant.js'\r\nimport Equation         from './molecules/equation.js'\r\nimport Molecule         from './molecules/molecule.js'\r\nimport Input            from './molecules/input.js'\r\nimport Readme           from './molecules/readme.js'\r\nimport AddBOMTag        from './molecules/BOM.js'\r\nimport Rotate           from './molecules/rotate.js'\r\nimport GitHubMolecule   from './molecules/githubmolecule.js'\r\nimport Output           from './molecules/output.js'\r\nimport Stretch          from './molecules/stretch.js'\r\nimport Gcode            from './molecules/gcode.js'\r\nimport Code             from './molecules/code.js'\r\nimport GitHubModule     from './githubOauth'\r\nimport { createService } from './lib/service.js'\r\n\r\n/**\r\n * This class defines things which are made available to all objects which import it. It is a singlton which means that each time it is imported the same instance is made available so if it is written to in one place, it can be read somewhere else.\r\n */\r\nclass GlobalVariables{\r\n    /**\r\n     * The constructor creates a new instance of the Global Variables object.\r\n     */\r\n    constructor(){\r\n        /** \r\n         * The canvas object on which the atoms are drawn.\r\n         * @type {object}\r\n         */\r\n        this.canvas = null\r\n        /** \r\n         * The 2D reference to the canvas object on which the atoms are drawn.\r\n         * @type {object}\r\n         */\r\n        this.c = null\r\n        /** \r\n         * An array of all of the secret types of atoms which can not be placed by the user.\r\n         * @type {array}\r\n         */\r\n        this.secretTypes = {\r\n            output:        {creator: Output, atomType: 'Output'}\r\n        }\r\n        /** \r\n         * The current amount by which the canvas has been scaled.\r\n         * @type {number}\r\n         */\r\n        this.scale1 = 1 \r\n        /** \r\n         * An array of all of the available types of atoms which can be placed with a right click.\r\n         * @type {array}\r\n         */\r\n        this.availableTypes = {\r\n            assembly:           {creator: Assembly, atomType: 'Assembly'},\r\n            circle:             {creator: Circle, atomType: 'Circle'},\r\n            color:              {creator: Color, atomType: 'Color'},\r\n            rectangle:          {creator: Rectangle, atomType: 'Rectangle'},\r\n            shirinkwrap:        {creator: ShrinkWrap, atomType: 'ShrinkWrap'},\r\n            translate:          {creator: Translate, atomType: 'Translate'},\r\n            tag:                {creator: Tag, atomType: 'Tag'},\r\n            regularPolygon:     {creator: RegularPolygon, atomType: 'RegularPolygon'},\r\n            extrude:            {creator: Extrude, atomType: 'Extrude'},\r\n            scale:              {creator: Scale, atomType: 'Scale'},\r\n            stl:                {creator: Stl, atomType: 'Stl'},\r\n            svg:                {creator: Svg, atomType: 'Svg'},\r\n            intersection:       {creator: Intersection, atomType: 'Intersection'},\r\n            difference:         {creator: Difference, atomType: 'Difference'},\r\n            costant:            {creator: Constant, atomType: 'Constant'},\r\n            equation:           {creator: Equation, atomType: 'Equation'},\r\n            molecule:           {creator: Molecule, atomType: 'Molecule'},\r\n            input:              {creator: Input, atomType: 'Input'},\r\n            readme:             {creator: Readme, atomType: 'Readme'},\r\n            addBOMTag:          {creator: AddBOMTag, atomType: 'Add BOM Tag'},\r\n            rotate:             {creator: Rotate, atomType: 'Rotate'},\r\n            githubmolecule:     {creator: GitHubMolecule, atomType: 'GitHubMolecule'},\r\n            union:              {creator: Union, atomType: 'Union'},\r\n            stretch:            {creator: Stretch, atomType: 'Stretch'},\r\n            gcode:              {creator: Gcode, atomType: 'Gcode'},\r\n            code:               {creator: Code, atomType: 'Code'},\r\n            cutAway:            {creator: CutAway, atomType: 'CutAway'},\r\n            CutList:            {creator: CutList, atomType: 'CutList'}\r\n        }\r\n        /** \r\n         * A reference to the molecule curently being displayed on the screen.\r\n         * @type {object}\r\n         */\r\n        this.currentMolecule\r\n        /** \r\n         * A reference to the top level molecule of the project.\r\n         * @type {object}\r\n         */\r\n        this.topLevelMolecule\r\n        /** \r\n         * A flag to indicate if the program is running in run mode (ie a shared link).\r\n         * @type {boolean}\r\n         */\r\n        this.runMode = false\r\n        /** \r\n         * A flag to indicate if the evaluation of molecules is blocked. Used to prevent evaluation until all molecules have been placed.\r\n         * @type {boolean}\r\n         */\r\n        this.evalLock = true\r\n        /** \r\n         * The github object which is used to interact with GitHub.\r\n         * @type {object}\r\n         */\r\n        this.gitHub = new GitHubModule()\r\n        /** \r\n         * The size (in mm) of segments to use for circles.\r\n         * @type {number}\r\n         */\r\n        this.circleSegmentSize = 2\r\n        \r\n        const agent = async ({ question }) => `Secret ${question}`\r\n        createService({ webWorker: '../maslowWorker.js', agent }).then(result => {\r\n            /** \r\n             * A worker thread which can do computation.\r\n             * @type {object}\r\n             */\r\n            this.ask = result.ask\r\n        })\r\n        createService({ webWorker: '../maslowWorker.js', agent }).then(result => {\r\n            /** \r\n             * The threejs renderer which displays things on the screen.\r\n             * @type {object}\r\n             */\r\n            this.render = result.ask\r\n        })\r\n        \r\n        const math = create(all)\r\n        /** \r\n         * An evaluator for strings as mathmatical equations which is sandboxed and secure.\r\n         * @type {function}\r\n         */\r\n        this.limitedEvaluate = math.evaluate\r\n        math.import({\r\n            'import':     function () { throw new Error('Function import is disabled') },\r\n            'createUnit': function () { throw new Error('Function createUnit is disabled') },\r\n            'evaluate':   function () { throw new Error('Function evaluate is disabled') },\r\n            'parse':      function () { throw new Error('Function parse is disabled') },\r\n            'simplify':   function () { throw new Error('Function simplify is disabled') },\r\n            'derivative': function () { throw new Error('Function derivative is disabled') }\r\n        }, { override: true })\r\n    }\r\n    \r\n    /** \r\n     * A function to generate a unique ID value. Currently uses random which does not gurintee that it will be unique.\r\n     */\r\n    generateUniqueID(){\r\n        return Math.floor(Math.random()*900000) + 100000\r\n    }\r\n    \r\n    /**\r\n     * Computes the distance between two points on a plane. This is a duplicate of the one in utils which should probably be deleted.\r\n     * @param {number} x1 - The x cordinate of the first point.\r\n     * @param {number} x2 - The x cordinate of the second point.\r\n     * @param {number} y1 - The y cordinate of the first point.\r\n     * @param {number} y2 - The y cordinate of the second point.\r\n     */ \r\n    distBetweenPoints(x1, x2, y1, y2){\r\n        var a2 = Math.pow(x1 - x2, 2)\r\n        var b2 = Math.pow(y1 - y2, 2)\r\n        var dist = Math.sqrt(a2 + b2)\r\n        \r\n        return dist\r\n    }\r\n}\r\n\r\n/**\r\n * Because we want global variables to be the same every time it is imported we export an instance of global variables instead of the constructor.\r\n */\r\nexport default (new GlobalVariables)",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/globalvariables.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "class",
    "name": "GlobalVariables",
    "memberof": "src/js/globalvariables.js",
    "static": true,
    "longname": "src/js/globalvariables.js~GlobalVariables",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/globalvariables.js",
    "importStyle": null,
    "description": "This class defines things which are made available to all objects which import it. It is a singlton which means that each time it is imported the same instance is made available so if it is written to in one place, it can be read somewhere else.",
    "lineNumber": 37,
    "pseudoExport": true,
    "interface": false
  },
  {
    "__docId__": 112,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#constructor",
    "access": "public",
    "description": "The constructor creates a new instance of the Global Variables object.",
    "lineNumber": 41
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "canvas",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#canvas",
    "access": "public",
    "description": "The canvas object on which the atoms are drawn.",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "c",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#c",
    "access": "public",
    "description": "The 2D reference to the canvas object on which the atoms are drawn.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "secretTypes",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#secretTypes",
    "access": "public",
    "description": "An array of all of the secret types of atoms which can not be placed by the user.",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "scale1",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#scale1",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "availableTypes",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#availableTypes",
    "access": "public",
    "description": "An array of all of the available types of atoms which can be placed with a right click.",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "runMode",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#runMode",
    "access": "public",
    "description": "A flag to indicate if the program is running in run mode (ie a shared link).",
    "lineNumber": 112,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "evalLock",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#evalLock",
    "access": "public",
    "description": "A flag to indicate if the evaluation of molecules is blocked. Used to prevent evaluation until all molecules have been placed.",
    "lineNumber": 117,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "gitHub",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#gitHub",
    "access": "public",
    "description": "The github object which is used to interact with GitHub.",
    "lineNumber": 122,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "circleSegmentSize",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#circleSegmentSize",
    "access": "public",
    "description": "The size (in mm) of segments to use for circles.",
    "lineNumber": 127,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "ask",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#ask",
    "access": "public",
    "description": "A worker thread which can do computation.",
    "lineNumber": 135,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "render",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#render",
    "access": "public",
    "description": "The threejs renderer which displays things on the screen.",
    "lineNumber": 142,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 124,
    "kind": "member",
    "name": "limitedEvaluate",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#limitedEvaluate",
    "access": "public",
    "description": "An evaluator for strings as mathmatical equations which is sandboxed and secure.",
    "lineNumber": 150,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "generateUniqueID",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#generateUniqueID",
    "access": "public",
    "description": "A function to generate a unique ID value. Currently uses random which does not gurintee that it will be unique.",
    "lineNumber": 164,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "distBetweenPoints",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#distBetweenPoints",
    "access": "public",
    "description": "Computes the distance between two points on a plane. This is a duplicate of the one in utils which should probably be deleted.",
    "lineNumber": 175,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": "The x cordinate of the first point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": "The x cordinate of the second point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y1",
        "description": "The y cordinate of the first point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y2",
        "description": "The y cordinate of the second point."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "globalVariables",
    "memberof": "src/js/globalvariables.js",
    "static": true,
    "longname": "src/js/globalvariables.js~globalVariables",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/globalvariables.js",
    "importStyle": "globalVariables",
    "description": "Because we want global variables to be the same every time it is imported we export an instance of global variables instead of the constructor.",
    "lineNumber": 187,
    "type": {
      "types": [
        "src/js/globalvariables.js~GlobalVariables"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "file",
    "name": "src/js/menu.js",
    "content": "import GlobalVariables from './globalvariables'\r\n\r\n/**\r\n * This class creates the right click menu behavior for placing atoms.\r\n */\r\nclass Menu {\r\n    /**\r\n     * The constructor creates a new menu. The menu is only created once when the program launches and is hidden and displayed when the menu is needed.\r\n     */\r\n    constructor(){\r\n        /** \r\n         * The HTML object which contains the menu\r\n         * @type {object}\r\n         */\r\n        this.menu = document.querySelector('.menu')\r\n        this.menu.classList.add('off')\r\n        /** \r\n         * An array which lists all of the options in the menu.\r\n         * @type {array}\r\n         */\r\n        this.menuList = document.getElementById('menuList')\r\n    \r\n        //Add the search bar to the list item\r\n    \r\n        for(var key in GlobalVariables.availableTypes) {\r\n            var newElement = document.createElement('LI')\r\n            var instance = GlobalVariables.availableTypes[key]\r\n            var text = document.createTextNode(instance.atomType)\r\n            newElement.setAttribute('class', 'menu-item')\r\n            newElement.setAttribute('id', instance.atomType)\r\n            newElement.appendChild(text) \r\n            this.menuList.appendChild(newElement) \r\n            \r\n            //Add function to call when atom is selected\r\n            document.getElementById(instance.atomType).addEventListener('click', (e) => {\r\n                this.placeNewNode(e)\r\n            })\r\n            \r\n        }\r\n        \r\n        //Add functions to call when tabs are clicked\r\n        document.getElementById('localTab').addEventListener('click', (e) => {\r\n            this.openTab(e, 'menuList')\r\n        })\r\n        document.getElementById('githubTab').addEventListener('click', (e) => {\r\n            this.openTab(e, 'githubList')\r\n        })\r\n        //Add function call when background is right clicked\r\n        document.getElementById('flow-canvas').addEventListener('contextmenu', (e) => {\r\n            this.showmenu(e)\r\n        })\r\n        //Add function call to search when typing\r\n        document.getElementById('menuInput').addEventListener('keyup', (e) => {\r\n            this.searchMenu(e)\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Runs when a menu option is clicked to place a new atom from the local atoms list.\r\n     * @param {object} ev - The event triggered by clicking on a menu item.\r\n     */ \r\n    placeNewNode(ev){\r\n        let clr = ev.target.id\r\n        this.hidemenu(ev)\r\n        const invertScale = 1 / GlobalVariables.scale1\r\n        GlobalVariables.currentMolecule.placeAtom({\r\n            x: this.menu.x * invertScale, \r\n            y: this.menu.y * invertScale, \r\n            parent: GlobalVariables.currentMolecule,\r\n            atomType: clr,\r\n            uniqueID: GlobalVariables.generateUniqueID()\r\n            \r\n        }, null, GlobalVariables.availableTypes, true) //null indicates that there is nothing to load from the molecule list for this one, true indicates the atom should spawn unlocked\r\n    }\r\n    \r\n    /**\r\n     * Runs when a menu option is clicked to place a new atom from searching on GitHub.\r\n     * @param {object} ev - The event triggered by clicking on a menu item.\r\n     */ \r\n    placeGitHubMolecule(ev){\r\n        \r\n        this.hidemenu()\r\n        let clr = ev.target.id\r\n        const invertScale = 1 / GlobalVariables.scale1\r\n        \r\n        GlobalVariables.currentMolecule.placeAtom({\r\n            x: this.menu.x * invertScale, \r\n            y: this.menu.y * invertScale, \r\n            parent: GlobalVariables.currentMolecule,\r\n            atomType: 'GitHubMolecule',\r\n            projectID: clr,\r\n            uniqueID: GlobalVariables.generateUniqueID()\r\n        }, null, GlobalVariables.availableTypes) //null indicates that there is nothing to load from the molecule list for this one\r\n    }\r\n    \r\n    /**\r\n     * Runs when a menu is opened by right clicking.\r\n     * @param {object} ev - The event triggered by right clicking on the canvas.\r\n     */ \r\n    showmenu(ev){\r\n        //Open the default tab\r\n        document.getElementById('localTab').click()\r\n        \r\n        //stop the real right click menu\r\n        ev.preventDefault() \r\n        \r\n        //make sure all elements are unhidden\r\n        var ul = document.getElementById('menuList')\r\n        var li = ul.getElementsByTagName('li')\r\n        for (var i = 0; i < li.length; i++) {\r\n            li[i].style.display = 'none' //set each item to not display\r\n        }\r\n        \r\n        //show the menu\r\n        this.menu.style.top = `${ev.clientY - 20}px`\r\n        this.menu.style.left = `${ev.clientX - 20}px`\r\n        this.menu.x = ev.clientX\r\n        this.menu.y = ev.clientY\r\n        this.menu.classList.remove('off')\r\n        \r\n        document.getElementById('menuInput').focus()\r\n    }\r\n    \r\n    /**\r\n     * Hides the menu if it is open.\r\n     */ \r\n    hidemenu(){\r\n        this.menu.classList.add('off')\r\n        this.menu.style.top = '-200%'\r\n        this.menu.style.left = '-200%'\r\n    }\r\n    \r\n    /**\r\n     * Runs when a new search is commanded.\r\n     * @param {object} evt - The event triggered by the search bar.\r\n     */ \r\n    searchMenu(evt) {\r\n      \r\n        if(document.getElementsByClassName('tablinks active')[0].id == 'localTab'){\r\n            //We are searching the local tab\r\n            // Declare variables\r\n            var input, filter, ul, li, a, i, txtValue\r\n            input = document.getElementById('menuInput')\r\n            filter = input.value.toUpperCase()\r\n            ul = document.getElementById('menuList')\r\n            li = ul.getElementsByTagName('li')\r\n\r\n            // Loop through all list items, and hide those who don't match the search query\r\n            for (i = 0; i < li.length; i++) {\r\n                a = li[i] //this is the link part of the list item\r\n                txtValue = a.textContent || a.innerText\r\n                if (txtValue.toUpperCase().indexOf(filter) > -1) { //if the entered string matches\r\n                    li[i].style.display = ''\r\n                } else {\r\n                    li[i].style.display = 'none'\r\n                }\r\n                \r\n                //If enter was just pressed \"click\" the first element that is being displayed\r\n                if(evt.code == 'Enter' && li[i].style.display != 'none'){\r\n                    li[i].click()\r\n                    return\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            //We are searching on github\r\n            if(evt.code == 'Enter'){\r\n                input = document.getElementById('menuInput').value\r\n                \r\n                var githubList = document.getElementById('githubList')\r\n                \r\n                var oldResults = githubList.getElementsByClassName('menu-item')\r\n                for (i = 0; i < oldResults.length; i++) {\r\n                    githubList.removeChild(oldResults[i])\r\n                }\r\n                \r\n                GlobalVariables.gitHub.searchGithub(input).then(result => {\r\n                    result.data.items.forEach(item => {\r\n                        var newElement = document.createElement('LI')\r\n                        var text = document.createTextNode(item.name)\r\n                        newElement.setAttribute('class', 'menu-item')\r\n                        newElement.setAttribute('id', item.id)\r\n                        newElement.appendChild(text) \r\n                        githubList.appendChild(newElement) \r\n                        \r\n                        document.getElementById(item.id).addEventListener('click', (e) => {\r\n                            this.placeGitHubMolecule(e)\r\n                        })\r\n                    })\r\n                })\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Switches tabs within the menu.\r\n     * @param {object} evt - The event triggered by clicking on a tab.\r\n     * @param {object} tabName - The name of the tab clicked.\r\n     */ \r\n    openTab(evt, tabName) {\r\n        // Declare all variables\r\n        var i, tabcontent, tablinks\r\n\r\n        // Get all elements with class=\"tabcontent\" and hide them\r\n        tabcontent = document.getElementsByClassName('tabcontent')\r\n        for (i = 0; i < tabcontent.length; i++) {\r\n            tabcontent[i].style.display = 'none'\r\n        }\r\n\r\n        // Get all elements with class=\"tablinks\" and remove the class \"active\"\r\n        tablinks = document.getElementsByClassName('tablinks')\r\n        for (i = 0; i < tablinks.length; i++) {\r\n            tablinks[i].className = tablinks[i].className.replace(' active', '')\r\n        }\r\n\r\n        // Show the current tab, and add an \"active\" class to the button that opened the tab\r\n        document.getElementById(tabName).style.display = 'block'\r\n        evt.currentTarget.className += ' active'\r\n      \r\n        //Click on the search bar so that when you start typing it shows updateCommands\r\n        document.getElementById('menuInput').focus()\r\n    }\r\n}\r\n\r\n/**\r\n * Because we want the menu to be the same every time it is imported we export an instance of the menu instead of the constructor.\r\n */\r\nexport default (new Menu)",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/menu.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 129,
    "kind": "class",
    "name": "Menu",
    "memberof": "src/js/menu.js",
    "static": true,
    "longname": "src/js/menu.js~Menu",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/menu.js",
    "importStyle": null,
    "description": "This class creates the right click menu behavior for placing atoms.",
    "lineNumber": 6,
    "pseudoExport": true,
    "interface": false
  },
  {
    "__docId__": 130,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/menu.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/menu.js~Menu#constructor",
    "access": "public",
    "description": "The constructor creates a new menu. The menu is only created once when the program launches and is hidden and displayed when the menu is needed.",
    "lineNumber": 10
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "menu",
    "memberof": "src/js/menu.js~Menu",
    "static": false,
    "longname": "src/js/menu.js~Menu#menu",
    "access": "public",
    "description": "The HTML object which contains the menu",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "menuList",
    "memberof": "src/js/menu.js~Menu",
    "static": false,
    "longname": "src/js/menu.js~Menu#menuList",
    "access": "public",
    "description": "An array which lists all of the options in the menu.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "placeNewNode",
    "memberof": "src/js/menu.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/menu.js~Menu#placeNewNode",
    "access": "public",
    "description": "Runs when a menu option is clicked to place a new atom from the local atoms list.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ev",
        "description": "The event triggered by clicking on a menu item."
      }
    ],
    "return": null
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "placeGitHubMolecule",
    "memberof": "src/js/menu.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/menu.js~Menu#placeGitHubMolecule",
    "access": "public",
    "description": "Runs when a menu option is clicked to place a new atom from searching on GitHub.",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ev",
        "description": "The event triggered by clicking on a menu item."
      }
    ],
    "return": null
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "showmenu",
    "memberof": "src/js/menu.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/menu.js~Menu#showmenu",
    "access": "public",
    "description": "Runs when a menu is opened by right clicking.",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ev",
        "description": "The event triggered by right clicking on the canvas."
      }
    ],
    "return": null
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "hidemenu",
    "memberof": "src/js/menu.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/menu.js~Menu#hidemenu",
    "access": "public",
    "description": "Hides the menu if it is open.",
    "lineNumber": 127,
    "params": [],
    "return": null
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "searchMenu",
    "memberof": "src/js/menu.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/menu.js~Menu#searchMenu",
    "access": "public",
    "description": "Runs when a new search is commanded.",
    "lineNumber": 137,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "evt",
        "description": "The event triggered by the search bar."
      }
    ],
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "openTab",
    "memberof": "src/js/menu.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/menu.js~Menu#openTab",
    "access": "public",
    "description": "Switches tabs within the menu.",
    "lineNumber": 200,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "evt",
        "description": "The event triggered by clicking on a tab."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "tabName",
        "description": "The name of the tab clicked."
      }
    ],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "variable",
    "name": "menu",
    "memberof": "src/js/menu.js",
    "static": true,
    "longname": "src/js/menu.js~menu",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/menu.js",
    "importStyle": "menu",
    "description": "Because we want the menu to be the same every time it is imported we export an instance of the menu instead of the constructor.",
    "lineNumber": 228,
    "type": {
      "types": [
        "src/js/menu.js~Menu"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "file",
    "name": "src/js/molecules/assembly.js",
    "content": "import Atom from '../prototypes/atom.js'\r\nimport { addOrDeletePorts } from '../alwaysOneFreeInput.js'\r\n\r\n/**\r\n * This class creates the Assembly atom instance.\r\n */\r\nexport default class Assembly extends Atom{\r\n    /**\r\n    * Creates a new assembly atom.\r\n    * @param {object} values - An object of values. Each of these values will be applied to the resulting atom.\r\n    */\r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Assembly'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Assembly'\r\n        /**\r\n         * A list of all of the inputs to this molecule. May be loaded when the molecule is created.\r\n         * @type {array}\r\n         */\r\n        this.ioValues = []\r\n        /**\r\n         * A flag to determine if cutaway geometry is removed.\r\n         * @type {boolean}\r\n         */\r\n        this.removeCutawayGeometry = true\r\n        \r\n        this.setValues(values)\r\n        \r\n        if (typeof this.ioValues !== 'undefined'){\r\n            this.ioValues.forEach(ioValue => { //for each saved value\r\n                this.addIO('input', ioValue.name, this, 'geometry', '')\r\n            })\r\n        }\r\n        \r\n        this.updateValue()\r\n    }\r\n    \r\n    /**\r\n    * Super class the default update value function. This function computes creates an array of all of the input values and then passes that array to a worker thread to create the assembly.\r\n    */ \r\n    updateValue(){\r\n        try{\r\n            var inputs = []\r\n            this.inputs.forEach( io => {\r\n                if(io.connectors.length > 0 && io.type == 'input'){\r\n                    inputs.push(io.getValue())\r\n                }\r\n            })\r\n            const mappedInputs = inputs.map(x => {\r\n                return x\r\n            })\r\n            \r\n            const values = [mappedInputs, this.removeCutawayGeometry]\r\n            \r\n            this.basicThreadValueProcessing(values, \"assemble\")\r\n            this.clearAlert()\r\n        }catch(err){this.setAlert(err)}\r\n        \r\n        //Delete or add ports as needed\r\n        addOrDeletePorts(this)\r\n    }\r\n    \r\n    /**\r\n    * Updates the side bar to add check boxes to turn on and off different elements.\r\n    */\r\n    updateSidebar(){\r\n        var sideBar = super.updateSidebar()\r\n        \r\n        this.inputs.forEach(input => {\r\n            if(input.connectors.length != 0){\r\n                this.createCheckbox(sideBar,input.name,true,(event)=>{\r\n                    var updatedValue = input.getValue()\r\n                    \r\n                    if(!event.target.checked){ //If the box has just been unchecked\r\n                        if(updatedValue.tags){\r\n                            updatedValue.tags.push(\"user/cutAway\")\r\n                        }\r\n                        else{\r\n                            updatedValue.tags = [\"user/cutAway\"]\r\n                        }\r\n                        input.setValue(updatedValue)\r\n                    }\r\n                    else{\r\n                        var index = updatedValue.tags.indexOf(\"user/cutAway\")\r\n                        if (index > -1) {\r\n                            updatedValue.tags.splice(index, 1)\r\n                        }\r\n                        input.setValue(updatedValue)\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        \r\n        //Add a checkbox for deciding if the cutaway geometry should be kept\r\n        this.createCheckbox(sideBar,\"Remove Cutaway Geometry\", this.removeCutawayGeometry,(event)=>{\r\n            \r\n            if(!event.target.checked){ //If the box has just been unchecked\r\n                this.removeCutawayGeometry = false\r\n                this.updateValue()\r\n            }\r\n            else{\r\n                this.removeCutawayGeometry = true\r\n                this.updateValue()\r\n            }\r\n        })\r\n    }\r\n        \r\n    \r\n    /**\r\n    * Super class the default serialize function to save the inputs since this atom has variable numbers of inputs.\r\n    */ \r\n    serialize(savedObject){\r\n        var thisAsObject = super.serialize(savedObject)\r\n        \r\n        thisAsObject.removeCutawayGeometry = this.removeCutawayGeometry\r\n        \r\n        var ioValues = []\r\n        this.inputs.forEach(io => {\r\n            if (io.type == 'input'){\r\n                var saveIO = {\r\n                    name: io.name,\r\n                    ioValue: 10\r\n                }\r\n                ioValues.push(saveIO)\r\n            }\r\n        })\r\n        \r\n        ioValues.forEach(ioValue => {\r\n            thisAsObject.ioValues.push(ioValue)\r\n        })\r\n        \r\n        return thisAsObject\r\n        \r\n    }\r\n    \r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/assembly.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "class",
    "name": "Assembly",
    "memberof": "src/js/molecules/assembly.js",
    "static": true,
    "longname": "src/js/molecules/assembly.js~Assembly",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/assembly.js",
    "importStyle": "Assembly",
    "description": "This class creates the Assembly atom instance.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 142,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#constructor",
    "access": "public",
    "description": "Creates a new assembly atom.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An object of values. Each of these values will be applied to the resulting atom."
      }
    ]
  },
  {
    "__docId__": 143,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 145,
    "kind": "member",
    "name": "ioValues",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#ioValues",
    "access": "public",
    "description": "A list of all of the inputs to this molecule. May be loaded when the molecule is created.",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "removeCutawayGeometry",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#removeCutawayGeometry",
    "access": "public",
    "description": "A flag to determine if cutaway geometry is removed.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#updateValue",
    "access": "public",
    "description": "Super class the default update value function. This function computes creates an array of all of the input values and then passes that array to a worker thread to create the assembly.",
    "lineNumber": 52,
    "params": [],
    "return": null
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#updateSidebar",
    "access": "public",
    "description": "Updates the side bar to add check boxes to turn on and off different elements.",
    "lineNumber": 77,
    "params": [],
    "return": null
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#serialize",
    "access": "public",
    "description": "Super class the default serialize function to save the inputs since this atom has variable numbers of inputs.",
    "lineNumber": 123,
    "params": [
      {
        "name": "savedObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "file",
    "name": "src/js/molecules/BOM.js",
    "content": "import Atom from '../prototypes/atom.js'\r\nimport GlobalVariables from '../globalvariables.js'\r\nimport {BOMEntry} from '../BOM.js'\r\n\r\n/**\r\n * The addBOMTag molecule type adds a tag containing information about a bill of materials item to the input geometry. The input geometry is not modified in any other way\r\n */\r\nexport default class AddBOMTag extends Atom{\r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Add BOM Tag'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.type = 'addBOMTag'\r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Add BOM Tag'\r\n        /**\r\n         * This atom's radius as drawn on the screen. Probably inherited and can be deleted.\r\n         * @type {string}\r\n         */\r\n        this.radius = 20\r\n        \r\n        /**\r\n         * The BOM item object created by this atom\r\n         * @type {string}\r\n         */\r\n        this.BOMitem = new BOMEntry()\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', null)\r\n        this.addIO('output', 'geometry', this, 'geometry', null)\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Set the value to be the BOMitem, then call super updateValue()\r\n     */ \r\n    updateValue(){\r\n        if(!GlobalVariables.evalLock && this.inputs.every(x => x.ready)){\r\n            try{\r\n                const values = [this.findIOValue('geometry'), JSON.stringify(this.BOMitem)]\r\n                this.basicThreadValueProcessing(values, \"tag\")\r\n                this.clearAlert()\r\n            }catch(err){this.setAlert(err)}\r\n            super.updateValue()\r\n        }\r\n    }\r\n        \r\n    /**\r\n     * Updates the side bar to display the BOM item information\r\n     */ \r\n    updateSidebar(){\r\n        var valueList = super.updateSidebar() //call the super function\r\n        this.createBOM(valueList)\r\n    }\r\n    \r\n    /**\r\n     * Add a B to the molecule representation\r\n     */ \r\n    draw() {\r\n        \r\n        super.draw() //Super call to draw the rest\r\n        \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#949294'\r\n        GlobalVariables.c.font = '30px Work Sans Bold'\r\n        GlobalVariables.c.fillText('B', this.x - (this.radius/2.2), this.y + (this.radius/2.1))\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.closePath()\r\n        \r\n    }\r\n    \r\n    /**\r\n     * I'm not sure this actually does anything. Delete? \r\n     */ \r\n    requestReadme(){\r\n        //request any contributions from this atom to the readme\r\n        return [this.readmeText]\r\n    }\r\n   \r\n    /**\r\n     * Creates an editable UI represntation of the bom list. \r\n     * @param {Object} list - list is an object to which the generated HTML element will be apended\r\n     */ \r\n    createBOM(list){\r\n        \r\n        list.appendChild(document.createElement('br'))\r\n        list.appendChild(document.createElement('br'))\r\n        \r\n        var div = document.createElement('h3')\r\n        div.setAttribute('style','text-align:center;')\r\n        list.appendChild(div)\r\n        var valueText = document.createTextNode('Bill Of Materials Entry')\r\n        div.appendChild(valueText)\r\n        \r\n        var x = document.createElement('HR')\r\n        list.appendChild(x)\r\n        \r\n        this.createEditableValueListItem(list,this.BOMitem,'BOMitemName', 'Item', false, () => this.updateValue())\r\n        this.createEditableValueListItem(list,this.BOMitem,'numberNeeded', 'Number', true, () => this.updateValue())\r\n        this.createEditableValueListItem(list,this.BOMitem,'costUSD', 'Price', true, () => this.updateValue())\r\n        this.createEditableValueListItem(list,this.BOMitem,'source', 'Source', false,() => this.updateValue())\r\n        x = document.createElement('HR')\r\n        list.appendChild(x)\r\n    }\r\n    \r\n    /**\r\n     * Add the bom item to the saved object\r\n     */ \r\n    serialize(values){\r\n        //Save the readme text to the serial stream\r\n        var valuesObj = super.serialize(values)\r\n        \r\n        valuesObj.BOMitem = this.BOMitem\r\n        \r\n        return valuesObj\r\n        \r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/BOM.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 153,
    "kind": "class",
    "name": "AddBOMTag",
    "memberof": "src/js/molecules/BOM.js",
    "static": true,
    "longname": "src/js/molecules/BOM.js~AddBOMTag",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/BOM.js",
    "importStyle": "AddBOMTag",
    "description": "The addBOMTag molecule type adds a tag containing information about a bill of materials item to the input geometry. The input geometry is not modified in any other way",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 154,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 155,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 156,
    "kind": "member",
    "name": "type",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#type",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 157,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "radius",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#radius",
    "access": "public",
    "description": "This atom's radius as drawn on the screen. Probably inherited and can be deleted.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "BOMitem",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#BOMitem",
    "access": "public",
    "description": "The BOM item object created by this atom",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#updateValue",
    "access": "public",
    "description": "Set the value to be the BOMitem, then call super updateValue()",
    "lineNumber": 52,
    "params": [],
    "return": null
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#updateSidebar",
    "access": "public",
    "description": "Updates the side bar to display the BOM item information",
    "lineNumber": 66,
    "params": [],
    "return": null
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#draw",
    "access": "public",
    "description": "Add a B to the molecule representation",
    "lineNumber": 74,
    "params": [],
    "return": null
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "requestReadme",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#requestReadme",
    "access": "public",
    "description": "I'm not sure this actually does anything. Delete? ",
    "lineNumber": 90,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "createBOM",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#createBOM",
    "access": "public",
    "description": "Creates an editable UI represntation of the bom list. ",
    "lineNumber": 99,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "list is an object to which the generated HTML element will be apended"
      }
    ],
    "return": null
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#serialize",
    "access": "public",
    "description": "Add the bom item to the saved object",
    "lineNumber": 124,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "file",
    "name": "src/js/molecules/circle.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables.js'\r\n\r\n/**\r\n * This class creates the circle atom.\r\n */\r\nexport default class Circle extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Circle'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Circle'\r\n        \r\n        this.addIO('input', 'diameter', this, 'number', 10)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Super class the default update value function. This function computes the number of points to use for the circle and then calls the worker thread to create the circle.\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            const circumference  = 3.14*this.findIOValue('diameter')\r\n            const numberOfSegments = Math.min(Math.max(parseInt( circumference / GlobalVariables.circleSegmentSize ),5), 100)\r\n            \r\n            const values = [this.findIOValue('diameter'), numberOfSegments]\r\n            this.basicThreadValueProcessing(values, \"circle\")\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/circle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 167,
    "kind": "class",
    "name": "Circle",
    "memberof": "src/js/molecules/circle.js",
    "static": true,
    "longname": "src/js/molecules/circle.js~Circle",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/circle.js",
    "importStyle": "Circle",
    "description": "This class creates the circle atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 168,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/circle.js~Circle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/circle.js~Circle#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/circle.js~Circle",
    "static": false,
    "longname": "src/js/molecules/circle.js~Circle#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/circle.js~Circle",
    "static": false,
    "longname": "src/js/molecules/circle.js~Circle#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/circle.js~Circle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/circle.js~Circle#updateValue",
    "access": "public",
    "description": "Super class the default update value function. This function computes the number of points to use for the circle and then calls the worker thread to create the circle.",
    "lineNumber": 37,
    "params": [],
    "return": null
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "src/js/molecules/color.js",
    "content": "import Atom from '../prototypes/atom'\r\n\r\n/**\r\n * This class creates the color atom which can be used to give a part a color.\r\n */\r\nexport default class Color extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Color'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Color'\r\n        \r\n        /**\r\n         * The color options to choose from\r\n         * @type {array}\r\n         */\r\n        this.colorOptions = [\"blue\", \"green\", \"pink\", \"black\", \"gray\", \"silver\"]\r\n        \r\n        /**\r\n         * The index of the currently selected color option.\r\n         * @type {number}\r\n         */\r\n        this.selectedColorIndex = 0\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', null)\r\n        this.addIO('output', 'geometry', this, 'geometry', null)\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Applies a color tag to the object in a worker thread.\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            const values = [this.findIOValue('geometry'), this.colorOptions[this.selectedColorIndex]]\r\n            this.basicThreadValueProcessing(values, \"color\")\r\n            this.clearAlert()\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n    \r\n    /**\r\n     * Updates the value of the selected color and then the value.\r\n     */ \r\n    changeColor(index){\r\n        this.selectedColorIndex = index\r\n        this.updateValue()\r\n    }\r\n    \r\n    /**\r\n     * Create a drop down to choose the color.\r\n     */ \r\n    updateSidebar(){\r\n        const list = super.updateSidebar()\r\n        this.createDropDown(list, this, this.colorOptions, this.selectedColorIndex, \"Color\", (index)=>{this.changeColor(index)})\r\n    }\r\n    \r\n    /**\r\n     * Add the color choice to the object which is saved for this molecule\r\n     */\r\n    serialize(){\r\n        var superSerialObject = super.serialize(null)\r\n        \r\n        //Write the current color selection to the serialized object\r\n        superSerialObject.selectedColorIndex = this.selectedColorIndex\r\n        \r\n        return superSerialObject\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/color.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "class",
    "name": "Color",
    "memberof": "src/js/molecules/color.js",
    "static": true,
    "longname": "src/js/molecules/color.js~Color",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/color.js",
    "importStyle": "Color",
    "description": "This class creates the color atom which can be used to give a part a color.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 174,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/color.js~Color#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/color.js~Color",
    "static": false,
    "longname": "src/js/molecules/color.js~Color#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/color.js~Color",
    "static": false,
    "longname": "src/js/molecules/color.js~Color#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "colorOptions",
    "memberof": "src/js/molecules/color.js~Color",
    "static": false,
    "longname": "src/js/molecules/color.js~Color#colorOptions",
    "access": "public",
    "description": "The color options to choose from",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "selectedColorIndex",
    "memberof": "src/js/molecules/color.js~Color",
    "static": false,
    "longname": "src/js/molecules/color.js~Color#selectedColorIndex",
    "access": "public",
    "description": "The index of the currently selected color option.",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/color.js~Color#updateValue",
    "access": "public",
    "description": "Applies a color tag to the object in a worker thread.",
    "lineNumber": 48,
    "params": [],
    "return": null
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "changeColor",
    "memberof": "src/js/molecules/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/color.js~Color#changeColor",
    "access": "public",
    "description": "Updates the value of the selected color and then the value.",
    "lineNumber": 59,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/color.js~Color#updateSidebar",
    "access": "public",
    "description": "Create a drop down to choose the color.",
    "lineNumber": 67,
    "params": [],
    "return": null
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/color.js~Color#serialize",
    "access": "public",
    "description": "Add the color choice to the object which is saved for this molecule",
    "lineNumber": 75,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "file",
    "name": "src/js/molecules/constant.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * This class creates the constant atom instance which can be used to define a numerical constant.\r\n */\r\nexport default class Constant extends Atom{\r\n    \r\n    /**\r\n     * Creates a new constant atom.\r\n     * @param {object} values - An object of values. Each of these values will be applied to the resulting atom.\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.type = 'constant'\r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Constant'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Constant'\r\n        /**\r\n         * This atom's height as drawn on the screen...probably doesn't need to be in this scope\r\n         * @type {string}\r\n         */\r\n        this.height = 16\r\n        /**\r\n         * This atom's radius as drawn on the screen...probably doesn't need to be in this scope\r\n         * @type {string}\r\n         */\r\n        this.radius = 15\r\n        \r\n        this.setValues(values)\r\n        \r\n        this.addIO('output', 'number', this, 'number', 10)\r\n        \r\n        if (typeof this.ioValues == 'object') {\r\n            this.output.setValue(this.ioValues[0].ioValue)\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Set's the output value and shows the atom output on the 3D view.\r\n     */ \r\n    updateValue(){\r\n        this.displayAndPropogate()\r\n    }\r\n    \r\n    /**\r\n     * Add entries for name and value to the side bar. Note: I think that should happen automatically and this function can be deleted. Please test that future self.\r\n     */ \r\n    updateSidebar(){\r\n        //updates the sidebar to display information about this node\r\n        \r\n        var valueList = super.updateSidebar() //call the super function\r\n        this.createEditableValueListItem(valueList,this,'name', 'Name', false)\r\n        this.createEditableValueListItem(valueList,this.output,'value', 'Value', true)\r\n    }\r\n    \r\n    /**\r\n     * Add the value to be saved to the object saved for this molecule.\r\n     */ \r\n    serialize(values){\r\n        //Save the IO value to the serial stream\r\n        var valuesObj = super.serialize(values)\r\n        \r\n        valuesObj.ioValues = [{\r\n            name: 'number',\r\n            ioValue: this.output.getValue()\r\n        }]\r\n        \r\n        return valuesObj\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Draw the constant which is more rectangular than the regular shape.\r\n     */ \r\n    draw() {\r\n        \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.strokeStyle = this.parent.strokeColor\r\n        GlobalVariables.c.fillStyle = this.color\r\n        GlobalVariables.c.rect(this.x - this.radius, this.y - this.height/2, 2*this.radius, this.height)\r\n        GlobalVariables.c.textAlign = 'start' \r\n        GlobalVariables.c.fillText(this.name, this.x + this.radius, this.y-this.radius)\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.lineWidth = 1\r\n        GlobalVariables.c.stroke()\r\n        GlobalVariables.c.closePath()\r\n\r\n        this.inputs.forEach(input => {\r\n            input.draw()       \r\n        })\r\n        if(this.output){\r\n            this.output.draw()\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Overwrite the default displayAndPropogate()...why?\r\n     */ \r\n    displayAndPropogate(){\r\n        this.output.setValue(this.output.getValue())\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/constant.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 185,
    "kind": "class",
    "name": "Constant",
    "memberof": "src/js/molecules/constant.js",
    "static": true,
    "longname": "src/js/molecules/constant.js~Constant",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/constant.js",
    "importStyle": "Constant",
    "description": "This class creates the constant atom instance which can be used to define a numerical constant.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 186,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#constructor",
    "access": "public",
    "description": "Creates a new constant atom.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An object of values. Each of these values will be applied to the resulting atom."
      }
    ]
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "type",
    "memberof": "src/js/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#type",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "height",
    "memberof": "src/js/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#height",
    "access": "public",
    "description": "This atom's height as drawn on the screen...probably doesn't need to be in this scope",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 191,
    "kind": "member",
    "name": "radius",
    "memberof": "src/js/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#radius",
    "access": "public",
    "description": "This atom's radius as drawn on the screen...probably doesn't need to be in this scope",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#updateValue",
    "access": "public",
    "description": "Set's the output value and shows the atom output on the 3D view.",
    "lineNumber": 54,
    "params": [],
    "return": null
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#updateSidebar",
    "access": "public",
    "description": "Add entries for name and value to the side bar. Note: I think that should happen automatically and this function can be deleted. Please test that future self.",
    "lineNumber": 61,
    "params": [],
    "return": null
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#serialize",
    "access": "public",
    "description": "Add the value to be saved to the object saved for this molecule.",
    "lineNumber": 72,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#draw",
    "access": "public",
    "description": "Draw the constant which is more rectangular than the regular shape.",
    "lineNumber": 88,
    "params": [],
    "return": null
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "displayAndPropogate",
    "memberof": "src/js/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#displayAndPropogate",
    "access": "public",
    "description": "Overwrite the default displayAndPropogate()...why?",
    "lineNumber": 112,
    "params": [],
    "return": null
  },
  {
    "__docId__": 197,
    "kind": "file",
    "name": "src/js/molecules/cutaway.js",
    "content": "import Atom from '../prototypes/atom.js'\r\nimport GlobalVariables from '../globalvariables.js'\r\n\r\n/**\r\n * The cut away tag adds a tag to a part indicating that it should be cut away from the rest of the model in the next assembly. Essentially it creates a negitive version of itself.\r\n */\r\nexport default class CutAway extends Atom{\r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Cut Away'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.type = 'cutAway'\r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Cut Away'\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', null)\r\n        this.addIO('output', 'geometry', this, 'geometry', null)\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Adds the cutAway tag to the part\r\n     */ \r\n    updateValue(){\r\n        if(!GlobalVariables.evalLock && this.inputs.every(x => x.ready)){\r\n            try{\r\n                const values = [this.findIOValue('geometry'), \"cutAway\"]\r\n                this.basicThreadValueProcessing(values, \"tag\")\r\n                this.clearAlert()\r\n            }catch(err){this.setAlert(err)}\r\n            super.updateValue()\r\n        }\r\n    }\r\n    \r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/cutaway.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 198,
    "kind": "class",
    "name": "CutAway",
    "memberof": "src/js/molecules/cutaway.js",
    "static": true,
    "longname": "src/js/molecules/cutaway.js~CutAway",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/cutaway.js",
    "importStyle": "CutAway",
    "description": "The cut away tag adds a tag to a part indicating that it should be cut away from the rest of the model in the next assembly. Essentially it creates a negitive version of itself.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 199,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/cutaway.js~CutAway",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/cutaway.js~CutAway#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/cutaway.js~CutAway",
    "static": false,
    "longname": "src/js/molecules/cutaway.js~CutAway#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "type",
    "memberof": "src/js/molecules/cutaway.js~CutAway",
    "static": false,
    "longname": "src/js/molecules/cutaway.js~CutAway#type",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 202,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/cutaway.js~CutAway",
    "static": false,
    "longname": "src/js/molecules/cutaway.js~CutAway#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/cutaway.js~CutAway",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/cutaway.js~CutAway#updateValue",
    "access": "public",
    "description": "Adds the cutAway tag to the part",
    "lineNumber": 40,
    "params": [],
    "return": null
  },
  {
    "__docId__": 204,
    "kind": "file",
    "name": "src/js/molecules/cutlist.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables.js'\r\n\r\n/**\r\n * This class creates the Add To Cutlist atom.\r\n */\r\nexport default class CutList extends Atom{\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', '')\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Add To Cutlist'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'cutList'\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Add a tag to the input geometry. The substance is not changed.\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            const values = [this.findIOValue('geometry'), \"cutList\"+GlobalVariables.generateUniqueID()]\r\n            this.basicThreadValueProcessing(values, \"tag\")\r\n        }catch(err){this.setAlert(err)}\r\n        super.updateValue()\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/cutlist.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 205,
    "kind": "class",
    "name": "CutList",
    "memberof": "src/js/molecules/cutlist.js",
    "static": true,
    "longname": "src/js/molecules/cutlist.js~CutList",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/cutlist.js",
    "importStyle": "CutList",
    "description": "This class creates the Add To Cutlist atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 206,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/cutlist.js~CutList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/cutlist.js~CutList#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 207,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/cutlist.js~CutList",
    "static": false,
    "longname": "src/js/molecules/cutlist.js~CutList#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 208,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/cutlist.js~CutList",
    "static": false,
    "longname": "src/js/molecules/cutlist.js~CutList#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/cutlist.js~CutList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/cutlist.js~CutList#updateValue",
    "access": "public",
    "description": "Add a tag to the input geometry. The substance is not changed.",
    "lineNumber": 36,
    "params": [],
    "return": null
  },
  {
    "__docId__": 210,
    "kind": "file",
    "name": "src/js/molecules/difference.js",
    "content": "import Atom from '../prototypes/atom'\r\n\r\n/**\r\n * This class creates the Difference atom.\r\n */ \r\nexport default class Difference extends Atom{\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor (values){\r\n        \r\n        super(values)\r\n        \r\n        this.addIO('input', 'geometry1', this, 'geometry', '')\r\n        this.addIO('input', 'geometry2', this, 'geometry', '')\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Difference'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Difference'\r\n        \r\n        this.setValues(values)\r\n    }\r\n    /**\r\n     * Pass the input values to the worker thread to do the actual processing.\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            const values = [this.findIOValue('geometry1'), this.findIOValue('geometry2')]\r\n            \r\n            this.basicThreadValueProcessing(values, \"difference\")\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/difference.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 211,
    "kind": "class",
    "name": "Difference",
    "memberof": "src/js/molecules/difference.js",
    "static": true,
    "longname": "src/js/molecules/difference.js~Difference",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/difference.js",
    "importStyle": "Difference",
    "description": "This class creates the Difference atom.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 212,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/difference.js~Difference",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/difference.js~Difference#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 213,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/difference.js~Difference",
    "static": false,
    "longname": "src/js/molecules/difference.js~Difference#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 214,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/difference.js~Difference",
    "static": false,
    "longname": "src/js/molecules/difference.js~Difference#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/difference.js~Difference",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/difference.js~Difference#updateValue",
    "access": "public",
    "description": "Pass the input values to the worker thread to do the actual processing.",
    "lineNumber": 36,
    "params": [],
    "return": null
  },
  {
    "__docId__": 216,
    "kind": "file",
    "name": "src/js/molecules/equation.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * This class creates the Equation atom.\r\n */\r\nexport default class Equation extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('output', 'result', this, 'number', 0)\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Equation'\r\n        \r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Equation'\r\n        \r\n        /**\r\n         * Evaluate the equation adding and removing inputs as needed\r\n         */ \r\n        this.value = 0\r\n        \r\n        /**\r\n         * The index number of the currently selected option\r\n         * @type {number}\r\n         */\r\n        this.currentEquation = \"x + y\"\r\n        \r\n        this.setValues(values)\r\n        this.updateValue()\r\n        this.setValues(values) //Set values again to load input values which were saved\r\n        \r\n        \r\n    }\r\n    \r\n    /**\r\n     * Evaluate the equation adding and removing inputs as needed\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            //Find all the letters in this equation\r\n            var re = /[a-zA-Z]/g\r\n            const variables = this.currentEquation.match(re)\r\n            \r\n            //Add any inputs which are needed\r\n            for (var variable in variables){\r\n                if(!this.inputs.some(input => input.Name === variables[variable])){\r\n                    this.addIO('input', variables[variable], this, 'number', 1)\r\n                }\r\n            }\r\n            \r\n            //Remove any inputs which are not needed\r\n            for (var input in this.inputs){\r\n                if( !variables.includes(this.inputs[input].name) ){\r\n                    this.removeIO('input', this.inputs[input].name, this)\r\n                }\r\n            }\r\n            \r\n            if(!GlobalVariables.evalLock && this.inputs.every(x => x.ready)){\r\n                \r\n                //Substitute numbers into the string\r\n                var substitutedEquation = this.currentEquation\r\n                for (var key in this.inputs){\r\n                    substitutedEquation = substitutedEquation.replace(this.inputs[key].name, this.findIOValue(this.inputs[key].name))\r\n                }\r\n                \r\n                \r\n                //Evaluate the equation\r\n                this.value = GlobalVariables.limitedEvaluate(substitutedEquation)\r\n                \r\n                this.output.setValue(this.value)\r\n                this.output.ready = true\r\n            }\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n    \r\n    /**\r\n     * Add the equation choice to the object which is saved for this molecule\r\n     */\r\n    serialize(){\r\n        var superSerialObject = super.serialize(null)\r\n        \r\n        //Write the current equation to the serialized object\r\n        superSerialObject.currentEquation = this.currentEquation\r\n        \r\n        return superSerialObject\r\n    }\r\n    \r\n    /**\r\n     * Add a dropdown to choose the equation type to the sidebar.\r\n     */\r\n    updateSidebar(){\r\n        //Update the side bar to make it possible to change the molecule name\r\n        \r\n        var valueList = super.updateSidebar()\r\n        \r\n        this.createEditableValueListItem(valueList,this,\"currentEquation\", \"output=\", false, (newEquation)=>{this.setEquation(newEquation)})\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Set the current equation to be a new value.\r\n     */\r\n    setEquation(newEquation){\r\n        this.currentEquation = newEquation.trim() //remove leading and trailing whitespace\r\n        this.updateValue()\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/equation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 217,
    "kind": "class",
    "name": "Equation",
    "memberof": "src/js/molecules/equation.js",
    "static": true,
    "longname": "src/js/molecules/equation.js~Equation",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/equation.js",
    "importStyle": "Equation",
    "description": "This class creates the Equation atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 218,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/equation.js~Equation",
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 220,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/equation.js~Equation",
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/molecules/equation.js~Equation",
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#value",
    "access": "public",
    "description": "Evaluate the equation adding and removing inputs as needed",
    "lineNumber": 33,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "member",
    "name": "currentEquation",
    "memberof": "src/js/molecules/equation.js~Equation",
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#currentEquation",
    "access": "public",
    "description": "The index number of the currently selected option",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#updateValue",
    "access": "public",
    "description": "Evaluate the equation adding and removing inputs as needed",
    "lineNumber": 51,
    "params": [],
    "return": null
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#serialize",
    "access": "public",
    "description": "Add the equation choice to the object which is saved for this molecule",
    "lineNumber": 92,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#updateSidebar",
    "access": "public",
    "description": "Add a dropdown to choose the equation type to the sidebar.",
    "lineNumber": 104,
    "params": [],
    "return": null
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "setEquation",
    "memberof": "src/js/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#setEquation",
    "access": "public",
    "description": "Set the current equation to be a new value.",
    "lineNumber": 116,
    "params": [
      {
        "name": "newEquation",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 229,
    "kind": "file",
    "name": "src/js/molecules/extrude.js",
    "content": "import Atom from '../prototypes/atom'\r\n\r\n/**\r\n * This class creates the Extrude atom.\r\n */\r\nexport default class Extrude extends Atom{\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Extrude'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Extrude'\r\n        \r\n        this.addIO('input', 'geometry' , this, 'geometry', '')\r\n        this.addIO('input', 'height'   , this, 'number', 10)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        this.setValues(values)\r\n    }\r\n    /**\r\n     * Pass the input shape to the worker thread to compute the extruded shape.\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            const values = [this.findIOValue('geometry'), this.findIOValue('height')]\r\n            \r\n            this.basicThreadValueProcessing(values, \"extrude\")\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/extrude.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 230,
    "kind": "class",
    "name": "Extrude",
    "memberof": "src/js/molecules/extrude.js",
    "static": true,
    "longname": "src/js/molecules/extrude.js~Extrude",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/extrude.js",
    "importStyle": "Extrude",
    "description": "This class creates the Extrude atom.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 231,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/extrude.js~Extrude",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/extrude.js~Extrude#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/extrude.js~Extrude",
    "static": false,
    "longname": "src/js/molecules/extrude.js~Extrude#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/extrude.js~Extrude",
    "static": false,
    "longname": "src/js/molecules/extrude.js~Extrude#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/extrude.js~Extrude",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/extrude.js~Extrude#updateValue",
    "access": "public",
    "description": "Pass the input shape to the worker thread to compute the extruded shape.",
    "lineNumber": 36,
    "params": [],
    "return": null
  },
  {
    "__docId__": 235,
    "kind": "file",
    "name": "src/js/molecules/gcode.js",
    "content": "import Atom from '../prototypes/atom.js'\r\nimport GlobalVariables from '../globalvariables.js'\r\nimport saveAs from '../lib/FileSaver.js'\r\nimport SVGReader from '../lib/SVGReader.js'\r\n\r\n/**\r\n * This class creates the circle atom.\r\n */\r\nexport default class Gcode extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Gcode'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Gcode'\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', GlobalVariables.api.sphere())\r\n        this.addIO('input', 'tool size', this, 'number', 5.35)\r\n        this.addIO('input', 'passes', this, 'number', 6)\r\n        this.addIO('output', 'gcode', this, 'geometry', '')\r\n        \r\n        this.setValues(values)\r\n        \r\n        //generate the correct codeblock for this atom on creation\r\n        this.updateValue()\r\n    }\r\n    \r\n    /**\r\n     * Generate a new .svg file from the input geometry, then compute a gcode path from it. Processing takes place in a worker thread\r\n     */ \r\n    updateValue(){\r\n        /**\r\n         * Flag that the attom is now processing.\r\n         */\r\n        this.processing = true\r\n        this.clearAlert()\r\n        \r\n        const computeSvg = async (values, key) => {\r\n            try{\r\n                return await GlobalVariables.ask({values: values, key: key})\r\n            }catch(err){this.setAlert(err)}\r\n        }\r\n        \r\n        try{\r\n            const input = this.findIOValue('geometry')\r\n            \r\n            computeSvg([input], \"svg\").then(result => {\r\n                if (result != -1 ){\r\n                    \r\n                    const bounds = input.measureBoundingBox()\r\n                    const partThickness = bounds[1][2]-bounds[0][2]\r\n                    \r\n                    /**\r\n                     * Assign the atom value to be the new computed results.\r\n                     */\r\n                    this.value = this.svg2gcode(result, {\r\n                        passes: this.findIOValue('passes'),\r\n                        materialWidth: -1*partThickness,\r\n                        bitWidth: this.findIOValue('tool size')\r\n                    })\r\n                    \r\n                }else{\r\n                    this.setAlert(\"Unable to compute\")\r\n                }\r\n                this.processing = false\r\n            })\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n    \r\n    /**\r\n     * Add a button to download the generated gcode\r\n     */ \r\n    updateSidebar(){\r\n        var valueList =  super.updateSidebar() \r\n        \r\n        this.createButton(valueList,this,'Download Gcode',() => {\r\n            const blob = new Blob([this.value], {type: 'text/plain;charset=utf-8'})\r\n            saveAs(blob, GlobalVariables.topLevelMolecule.name+'.nc')\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Does nothing, just here to supress the normal send to render behavior\r\n     */ \r\n    sendToRender(){\r\n    }\r\n    \r\n    /**\r\n     * This function was taken from github. It needs to be more well documented.\r\n     */ \r\n    svg2gcode(svg, settings) {\r\n        // clean off any preceding whitespace\r\n        svg = svg.replace(/^[\\n\\r \\t]/gm, '')\r\n        settings = settings || {}\r\n        settings.passes = settings.passes || 1\r\n        settings.materialWidth = settings.materialWidth || 6\r\n        settings.passWidth = settings.materialWidth/settings.passes\r\n        settings.scale = settings.scale || 1\r\n        settings.cutZ = settings.cutZ || 0 // cut z\r\n        settings.safeZ = settings.safeZ || 10   // safe z\r\n        settings.feedRate = settings.feedRate || 1400\r\n        settings.seekRate = settings.seekRate || 1100\r\n        settings.bitWidth = settings.bitWidth || 1 // in mm\r\n\r\n        var\r\n            scale=function(val) {\r\n                return val * settings.scale\r\n            },\r\n            paths = SVGReader.parse(svg, {}).allcolors,\r\n            gcode,\r\n            path\r\n\r\n        var idx = paths.length\r\n        while(idx--) {\r\n            var subidx = paths[idx].length\r\n            var bounds = { x : Infinity , y : Infinity, x2 : -Infinity, y2: -Infinity, area : 0}\r\n\r\n            // find lower and upper bounds\r\n            while(subidx--) {\r\n                if (paths[idx][subidx][0] < bounds.x) {\r\n                    bounds.x = paths[idx][subidx][0]\r\n                }\r\n\r\n                if (paths[idx][subidx][1] < bounds.y) {\r\n                    bounds.y = paths[idx][subidx][0]\r\n                }\r\n\r\n                if (paths[idx][subidx][0] > bounds.x2) {\r\n                    bounds.x2 = paths[idx][subidx][0]\r\n                }\r\n                if (paths[idx][subidx][1] > bounds.y2) {\r\n                    bounds.y2 = paths[idx][subidx][0]\r\n                }\r\n            }\r\n\r\n            // calculate area\r\n            bounds.area = (1 + bounds.x2 - bounds.x) * (1 + bounds.y2-bounds.y)\r\n            paths[idx].bounds = bounds\r\n        }\r\n\r\n        // cut the inside parts first\r\n        paths.sort(function(a, b) {\r\n        // sort by area\r\n            return (a.bounds.area < b.bounds.area) ? -1 : 1\r\n        })\r\n\r\n        gcode = [\r\n            'G90',\r\n            'G21',\r\n            'G1 Z' + settings.safeZ,\r\n            'G82',\r\n            'M4'\r\n        ]\r\n\r\n        for (var pathIdx = 0, pathLength = paths.length; pathIdx < pathLength; pathIdx++) {\r\n            path = paths[pathIdx]\r\n\r\n            // seek to index 0\r\n            gcode.push(['G1',\r\n                'X' + scale(path[0].x),\r\n                'Y' + scale(path[0].y),\r\n                'F' + settings.seekRate\r\n            ].join(' '))\r\n        \r\n            for (var p = settings.passWidth; p>=settings.materialWidth; p-=-1*settings.passWidth) {\r\n\r\n                // begin the cut by dropping the tool to the work\r\n                gcode.push(['G1',\r\n                    'Z' + (settings.cutZ + p),\r\n                    'F' + '200'\r\n                ].join(' '))\r\n\r\n                // keep track of the current path being cut, as we may need to reverse it\r\n                var localPath = []\r\n                for (var segmentIdx=0, segmentLength = path.length; segmentIdx<segmentLength; segmentIdx++) {\r\n                    var segment = path[segmentIdx]\r\n\r\n                    var localSegment = ['G1',\r\n                        'X' + scale(segment.x),\r\n                        'Y' + scale(segment.y),\r\n                        'F' + settings.feedRate\r\n                    ].join(' ')\r\n\r\n                    // feed through the material\r\n                    gcode.push(localSegment)\r\n                    localPath.push(localSegment)\r\n\r\n                    // if the path is not closed, reverse it, drop to the next cut depth and cut\r\n                    // this handles lines\r\n                    if (segmentIdx === segmentLength - 1 &&\r\n                (segment.x !== path[0].x || segment.y !== path[0].y))\r\n                    {\r\n\r\n                        p+=settings.passWidth\r\n                        if (p<settings.materialWidth) {\r\n                            // begin the cut by dropping the tool to the work\r\n                            gcode.push(['G1',\r\n                                'Z' + (settings.cutZ + p),\r\n                                'F' + '200'\r\n                            ].join(' '))\r\n\r\n                            Array.prototype.push.apply(gcode, localPath.reverse())\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // go safe\r\n            gcode.push(['G1',\r\n                'Z' + settings.safeZ,\r\n                'F' + '300'\r\n            ].join(' '))\r\n        }\r\n\r\n        // just wait there for a second\r\n        gcode.push('G4 P1')\r\n\r\n        // turn off the spindle\r\n        gcode.push('M5')\r\n\r\n        // go home\r\n        gcode.push('G1 Z' + settings.safeZ + ' F300')\r\n        gcode.push('G1 X0 Y0 F800')\r\n\r\n        return gcode.join('\\n')\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/gcode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 236,
    "kind": "class",
    "name": "Gcode",
    "memberof": "src/js/molecules/gcode.js",
    "static": true,
    "longname": "src/js/molecules/gcode.js~Gcode",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/gcode.js",
    "importStyle": "Gcode",
    "description": "This class creates the circle atom.",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 237,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 238,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 239,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#updateValue",
    "access": "public",
    "description": "Generate a new .svg file from the input geometry, then compute a gcode path from it. Processing takes place in a worker thread",
    "lineNumber": 44,
    "params": [],
    "return": null
  },
  {
    "__docId__": 241,
    "kind": "member",
    "name": "processing",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#processing",
    "access": "public",
    "description": "Flag that the attom is now processing.",
    "lineNumber": 48,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#value",
    "access": "public",
    "description": "Assign the atom value to be the new computed results.",
    "lineNumber": 69,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#updateSidebar",
    "access": "public",
    "description": "Add a button to download the generated gcode",
    "lineNumber": 86,
    "params": [],
    "return": null
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "sendToRender",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#sendToRender",
    "access": "public",
    "description": "Does nothing, just here to supress the normal send to render behavior",
    "lineNumber": 98,
    "params": [],
    "return": null
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "svg2gcode",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#svg2gcode",
    "access": "public",
    "description": "This function was taken from github. It needs to be more well documented.",
    "lineNumber": 104,
    "params": [
      {
        "name": "svg",
        "types": [
          "*"
        ]
      },
      {
        "name": "settings",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "file",
    "name": "src/js/molecules/githubmolecule.js",
    "content": "import Molecule from '../molecules/molecule'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * This class creates the GitHubMolecule atom.\r\n */\r\nexport default class GitHubMolecule extends Molecule {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n\r\n        /** \r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Github Molecule'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'GitHubMolecule'\r\n        /**\r\n         * A flag to signal if this node is the top level node\r\n         * @type {boolean}\r\n         */\r\n        this.topLevel = false\r\n        /**\r\n         * The color for the whole in the center of the drawing...probably doesn't need to be in this scope\r\n         * @type {string}\r\n         */\r\n        this.centerColor = 'black'\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * This replaces the default Molecule double click behavior to prevent you from being able to double click into a github molecule\r\n     * @param {number} x - The x coordinate of the click\r\n     * @param {number} y - The y coordinate of the click\r\n     */ \r\n    doubleClick(x,y){\r\n        var clickProcessed = false\r\n        var distFromClick = GlobalVariables.distBetweenPoints(x, this.x, y, this.y)\r\n        if (distFromClick < this.radius){\r\n            clickProcessed = true\r\n        }\r\n        \r\n        return clickProcessed \r\n    }\r\n    \r\n    /**\r\n     * Loads a project into this GitHub molecule from github based on the passed github ID. This function is async and execution time depends on project complexity, and network speed.\r\n     * @param {number} id - The GitHub project ID for the project to be loaded.\r\n     */ \r\n    async loadProjectByID(id){\r\n        \r\n        //Get the repo by ID\r\n        const result = await GlobalVariables.gitHub.getProjectByID(id, this.topLevel)\r\n        //content will be base64 encoded\r\n        let rawFile = atob(result.data.content)\r\n        let moleculesList =  JSON.parse(rawFile).molecules\r\n        \r\n        //Preserve values which will be overwritten by the de-serialize process. We only want to keep them if this is not the top level atom\r\n        var preservedValues\r\n        if(this.topLevel){\r\n            preservedValues = {atomType: this.atomType, topLevel: this.topLevel}\r\n        }\r\n        else{\r\n            preservedValues = {uniqueID: this.uniqueID, x: this.x, y: this.y, atomType: this.atomType, topLevel: this.topLevel, ioValues: this.ioValues}\r\n        }\r\n        var promsie = this.deserialize(moleculesList, moleculesList.filter((molecule) => { return molecule.topLevel == true })[0].uniqueID)\r\n        \r\n        this.setValues(preservedValues)\r\n        \r\n        return promsie\r\n    }\r\n    \r\n    /**\r\n     * Save the project information to be loaded. This should use super.serialize() to maintain a connection with Molecule, but it doesn't...should be fixed\r\n     */ \r\n    serialize(){\r\n        \r\n        var ioValues = []\r\n        this.inputs.forEach(io => {\r\n            if (typeof io.getValue() == 'number'){\r\n                var saveIO = {\r\n                    name: io.name,\r\n                    ioValue: io.getValue()\r\n                }\r\n                ioValues.push(saveIO)\r\n            }\r\n        })\r\n        \r\n        //Return a placeholder for this molecule\r\n        var object = {\r\n            atomType: this.atomType,\r\n            name: this.name,\r\n            x: this.x,\r\n            y: this.y,\r\n            uniqueID: this.uniqueID,\r\n            projectID: this.projectID,\r\n            ioValues: ioValues\r\n        }\r\n        \r\n        return object\r\n    }\r\n    \r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/githubmolecule.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 248,
    "kind": "class",
    "name": "GitHubMolecule",
    "memberof": "src/js/molecules/githubmolecule.js",
    "static": true,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/githubmolecule.js",
    "importStyle": "GitHubMolecule",
    "description": "This class creates the GitHubMolecule atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/molecules/molecule.js~Molecule"
    ]
  },
  {
    "__docId__": 249,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 250,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 251,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 252,
    "kind": "member",
    "name": "topLevel",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#topLevel",
    "access": "public",
    "description": "A flag to signal if this node is the top level node",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 253,
    "kind": "member",
    "name": "centerColor",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#centerColor",
    "access": "public",
    "description": "The color for the whole in the center of the drawing...probably doesn't need to be in this scope",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "doubleClick",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#doubleClick",
    "access": "public",
    "description": "This replaces the default Molecule double click behavior to prevent you from being able to double click into a github molecule",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x coordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y coordinate of the click"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "loadProjectByID",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#loadProjectByID",
    "access": "public",
    "description": "Loads a project into this GitHub molecule from github based on the passed github ID. This function is async and execution time depends on project complexity, and network speed.",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The GitHub project ID for the project to be loaded."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#serialize",
    "access": "public",
    "description": "Save the project information to be loaded. This should use super.serialize() to maintain a connection with Molecule, but it doesn't...should be fixed",
    "lineNumber": 85,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "file",
    "name": "src/js/molecules/input.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * This class creates the input atom.\r\n */\r\nexport default class Input extends Atom {\r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super (values)\r\n        \r\n        /** \r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Input' + GlobalVariables.generateUniqueID()\r\n        /** \r\n         * The value the input is set to, defaults to 10. Is this still used or are we using the value of the attachmentPoint now?\r\n         * @type {number}\r\n         */\r\n        this.value = 10\r\n        /** \r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.type = 'input'\r\n        /** \r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Input'\r\n        /** \r\n         * This atom's height for drawing\r\n         * @type {number}\r\n         */\r\n        this.height = 16\r\n        /** \r\n         * This atom's radius for drawing\r\n         * @type {string}\r\n         */\r\n        this.radius = 15\r\n        \r\n        this.setValues(values)\r\n        \r\n        /** \r\n         * This atom's old name, used during name changes\r\n         * @type {string}\r\n         */\r\n        this.oldName = this.name\r\n        \r\n        this.addIO('output', 'number or geometry', this, 'number or geometry', 10)\r\n        \r\n        //Add a new input to the current molecule\r\n        if (typeof this.parent !== 'undefined') {\r\n            this.parent.addIO('input', this.name, this.parent, 'number or geometry', 10)\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Updates the side bar to let the user change the atom value. Note that the parent molecule input is set, not this atom's input by changes.\r\n     */ \r\n    updateSidebar(){\r\n        //updates the sidebar to display information about this node\r\n        \r\n        var valueList =  super.updateSidebar() //call the super function\r\n        \r\n        this.createEditableValueListItem(valueList,this,'name', 'Name', false)\r\n        \r\n        this.parent.inputs.forEach(child => {\r\n            if (child.name == this.name){\r\n                this.createEditableValueListItem(valueList,child,'value', 'Value', true)\r\n            }\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Draws the atom on the screen.\r\n     */ \r\n    draw() {\r\n        \r\n        //Check if the name has been updated\r\n        if(this.name != this.oldName){this.updateParentName()}\r\n        \r\n        GlobalVariables.c.fillStyle = this.color\r\n        GlobalVariables.c.strokeStyle = this.parent.strokeColor\r\n        GlobalVariables.c.textAlign = 'start' \r\n        GlobalVariables.c.fillText(this.name, this.x + this.radius, this.y-this.radius)\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.moveTo(this.x - this.radius, this.y - this.height)\r\n        GlobalVariables.c.lineTo(this.x - this.radius + 10, this.y)\r\n        GlobalVariables.c.lineTo(this.x - this.radius, this.y + this.height)\r\n        GlobalVariables.c.lineTo(this.x + this.radius, this.y + this.height/2)\r\n        GlobalVariables.c.lineTo(this.x + this.radius, this.y - this.height/2)\r\n        GlobalVariables.c.lineWidth = 1\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.closePath()\r\n        GlobalVariables.c.stroke()\r\n\r\n        this.inputs.forEach(input => {\r\n            input.draw()       \r\n        })\r\n        if(this.output){\r\n            this.output.draw()\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Remove the input from the parent molecule, then delete the atom normally.\r\n     */ \r\n    deleteNode() {\r\n        //Remove this input from the parent molecule\r\n        if (typeof this.parent !== 'undefined') {\r\n            this.parent.removeIO('input', this.name, this.parent)\r\n        }\r\n        \r\n        super.deleteNode()\r\n    }\r\n    \r\n    /**\r\n     * Called when the name has changed to updated the name of the parent molecule IO\r\n     */ \r\n    updateParentName(){\r\n        //Run through the parent molecule and find the input with the same name\r\n        this.parent.inputs.forEach(child => {\r\n            if (child.name == this.oldName){\r\n                child.name = this.name\r\n            }\r\n        })\r\n        this.oldName = this.name\r\n    }\r\n    \r\n    /**\r\n     * Set's the output value and shows the atom output on the 3D view.\r\n     */ \r\n    updateValue(){\r\n        this.displayAndPropogate()\r\n    }\r\n    \r\n    /**\r\n     * Set's the input's value after locking everything downstream to ensure optimal computation.\r\n     * @param {number} newOutput - The new value to be used\r\n     */ \r\n    setOutput(newOutput){\r\n        this.output.lock() //Lock all of the dependents\r\n        //Set the input's output\r\n        this.value = newOutput  //Set the code block so that clicking on the input previews what it is \r\n        //Set the output to be the new value\r\n        this.output.setValue(newOutput)\r\n    }\r\n    \r\n    /**\r\n     * If this atom is a top level input it begins propogation here. Is this used?\r\n     */ \r\n    beginPropogation(){\r\n        if(this.parent.topLevel){\r\n            this.updateValue()\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Returns the current value being output\r\n     */ \r\n    getOutput(){\r\n        return this.output.getValue()\r\n    }\r\n    \r\n    /**\r\n     * Sets the output to be the current value...why?\r\n     */ \r\n    displayAndPropogate(){\r\n        this.setOutput(this.getOutput())\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/input.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 258,
    "kind": "class",
    "name": "Input",
    "memberof": "src/js/molecules/input.js",
    "static": true,
    "longname": "src/js/molecules/input.js~Input",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/input.js",
    "importStyle": "Input",
    "description": "This class creates the input atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 259,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 260,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 261,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#value",
    "access": "public",
    "description": "The value the input is set to, defaults to 10. Is this still used or are we using the value of the attachmentPoint now?",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 262,
    "kind": "member",
    "name": "type",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#type",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 263,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 264,
    "kind": "member",
    "name": "height",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#height",
    "access": "public",
    "description": "This atom's height for drawing",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 265,
    "kind": "member",
    "name": "radius",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#radius",
    "access": "public",
    "description": "This atom's radius for drawing",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 266,
    "kind": "member",
    "name": "oldName",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#oldName",
    "access": "public",
    "description": "This atom's old name, used during name changes",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#updateSidebar",
    "access": "public",
    "description": "Updates the side bar to let the user change the atom value. Note that the parent molecule input is set, not this atom's input by changes.",
    "lineNumber": 65,
    "params": [],
    "return": null
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#draw",
    "access": "public",
    "description": "Draws the atom on the screen.",
    "lineNumber": 82,
    "params": [],
    "return": null
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "deleteNode",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#deleteNode",
    "access": "public",
    "description": "Remove the input from the parent molecule, then delete the atom normally.",
    "lineNumber": 113,
    "params": [],
    "return": null
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "updateParentName",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#updateParentName",
    "access": "public",
    "description": "Called when the name has changed to updated the name of the parent molecule IO",
    "lineNumber": 125,
    "params": [],
    "return": null
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#updateValue",
    "access": "public",
    "description": "Set's the output value and shows the atom output on the 3D view.",
    "lineNumber": 138,
    "params": [],
    "return": null
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "setOutput",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#setOutput",
    "access": "public",
    "description": "Set's the input's value after locking everything downstream to ensure optimal computation.",
    "lineNumber": 146,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newOutput",
        "description": "The new value to be used"
      }
    ],
    "return": null
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "beginPropogation",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#beginPropogation",
    "access": "public",
    "description": "If this atom is a top level input it begins propogation here. Is this used?",
    "lineNumber": 157,
    "params": [],
    "return": null
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "getOutput",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#getOutput",
    "access": "public",
    "description": "Returns the current value being output",
    "lineNumber": 166,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "displayAndPropogate",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#displayAndPropogate",
    "access": "public",
    "description": "Sets the output to be the current value...why?",
    "lineNumber": 173,
    "params": [],
    "return": null
  },
  {
    "__docId__": 278,
    "kind": "file",
    "name": "src/js/molecules/intersection.js",
    "content": "import Atom from '../prototypes/atom'\r\n\r\n/**\r\n * This class creates the intersection atom.\r\n */\r\nexport default class Intersection extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        this.addIO('input', 'geometry1', this, 'geometry', '')\r\n        this.addIO('input', 'geometry2', this, 'geometry', '')\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Intersection'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Intersection'\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Grab the input geometries and pass them to a worker thread for computation.\r\n     */ \r\n    updateValue(){\r\n        \r\n        try{\r\n            const values = [this.findIOValue('geometry1'), this.findIOValue('geometry2')]\r\n            \r\n            this.basicThreadValueProcessing(values, \"intersection\")\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/intersection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 279,
    "kind": "class",
    "name": "Intersection",
    "memberof": "src/js/molecules/intersection.js",
    "static": true,
    "longname": "src/js/molecules/intersection.js~Intersection",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/intersection.js",
    "importStyle": "Intersection",
    "description": "This class creates the intersection atom.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 280,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/intersection.js~Intersection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/intersection.js~Intersection#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 281,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/intersection.js~Intersection",
    "static": false,
    "longname": "src/js/molecules/intersection.js~Intersection#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/intersection.js~Intersection",
    "static": false,
    "longname": "src/js/molecules/intersection.js~Intersection#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/intersection.js~Intersection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/intersection.js~Intersection#updateValue",
    "access": "public",
    "description": "Grab the input geometries and pass them to a worker thread for computation.",
    "lineNumber": 36,
    "params": [],
    "return": null
  },
  {
    "__docId__": 284,
    "kind": "file",
    "name": "src/js/molecules/molecule.js",
    "content": "import Atom from '../prototypes/atom.js'\r\nimport Connector from '../prototypes/connector.js'\r\nimport GlobalVariables from '../globalvariables.js'\r\n//import saveAs from '../lib/FileSaver.js'\r\nimport { extractBomTags } from '../BOM.js'\r\n\r\n/**\r\n * This class creates the Molecule atom.\r\n */\r\nexport default class Molecule extends Atom{\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        /** \r\n         * A list of all of the atoms within this Molecule which should be drawn on the screen.\r\n         * @type {array}\r\n         */\r\n        this.nodesOnTheScreen = []\r\n        /** \r\n         * An array of the molecules inputs. Is this not inherited from atom?\r\n         * @type {array}\r\n         */\r\n        this.inputs = []\r\n        /** \r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.name = 'Molecule'\r\n        /** \r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Molecule'\r\n        /** \r\n         * The color for the middle dot in the molecule\r\n         * @type {string}\r\n         */\r\n        this.centerColor = '#949294'\r\n        /** \r\n         * A flag to indicate if this molecule is the top level molecule.\r\n         * @type {boolean}\r\n         */\r\n        this.topLevel = false //a flag to signal if this node is the top level node\r\n        \r\n        this.setValues(values)\r\n        \r\n        //Add the molecule's output\r\n        this.placeAtom({\r\n            parentMolecule: this, \r\n            x: GlobalVariables.canvas.width - 50,\r\n            y: GlobalVariables.canvas.height/2,\r\n            parent: this,\r\n            name: 'Output',\r\n            atomType: 'Output'\r\n        }, null, GlobalVariables.secretTypes)\r\n        \r\n        this.updateValue()\r\n    }\r\n    \r\n    /**\r\n     * Add the center dot to the molecule\r\n     */ \r\n    draw(){\r\n        super.draw() //Super call to draw the rest\r\n        \r\n        //draw the circle in the middle\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = this.centerColor\r\n        GlobalVariables.c.arc(this.x, this.y, this.radius/2, 0, Math.PI * 2, false)\r\n        GlobalVariables.c.closePath()\r\n        GlobalVariables.c.fill()\r\n    }\r\n    \r\n    /**\r\n     * Handle double clicks by replacing the molecule currently on the screen with this one, esentially diving into it.\r\n     * @param {number} x - The x cordinate of the click\r\n     * @param {number} y - The y cordinate of the click\r\n     */ \r\n    doubleClick(x,y){\r\n        //returns true if something was done with the click\r\n        \r\n        \r\n        var clickProcessed = false\r\n        \r\n        var distFromClick = GlobalVariables.distBetweenPoints(x, this.x, y, this.y)\r\n        \r\n        if (distFromClick < this.radius){\r\n            GlobalVariables.currentMolecule = this //set this to be the currently displayed molecule\r\n            GlobalVariables.currentMolecule.backgroundClick()\r\n            clickProcessed = true\r\n        }\r\n        \r\n        return clickProcessed \r\n    }\r\n    \r\n    /**\r\n     * Handle a background click (a click which doesn't land on one of the contained molecules) by deselecting everything and displaying a 3D rendering of this molecules output.\r\n     */ \r\n    backgroundClick(){\r\n        /**\r\n         * Flag that the attom is now selected.\r\n         */\r\n        this.selected = true\r\n        this.updateSidebar()\r\n        this.sendToRender()\r\n    }\r\n    \r\n    /**\r\n     * Unselect this molecule\r\n     */ \r\n    deselect(){\r\n        this.selected = false\r\n    }\r\n    \r\n    /**\r\n     * Grab values from the inputs and push them out to the input atoms.\r\n     */ \r\n    updateValue(){\r\n        if(!GlobalVariables.evalLock && this.inputs.every(x => x.ready)){\r\n            /** \r\n             * Flag that the current molecule is processing.\r\n             * @type {boolean}\r\n             */\r\n            this.processing = true\r\n            this.clearAlert()\r\n            \r\n            //Grab values from the inputs and push them out to the input objects\r\n            this.inputs.forEach(moleculeInput => {\r\n                this.nodesOnTheScreen.forEach(atom => {\r\n                    if(atom.atomType == 'Input' && moleculeInput.name == atom.name){\r\n                        if(atom.getOutput() != moleculeInput.getValue()){                //Dont update the input if it hasn't changed\r\n                            atom.setOutput(moleculeInput.getValue())\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n            \r\n            this.processing = false\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Trigger the output to propogate.\r\n     */ \r\n    propogate(){\r\n        //Set the output nodes with type 'geometry' to be the generated code\r\n        if(this.output){\r\n            this.output.setValue(this.value)\r\n        }\r\n        \r\n        //If this molecule is selected, send the updated value to the renderer\r\n        if (this.selected){\r\n            this.sendToRender()\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Unlock all of the atoms contained in this molecule\r\n     */ \r\n    unlock(){\r\n        //Runs right after the loading process to unlock attachment points which have no connectors attached\r\n        super.unlock()\r\n        \r\n        this.nodesOnTheScreen.forEach(node => {\r\n            node.unlock()\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Trigger the beginning of the propogation process for all of the atoms in this molecule.\r\n     */ \r\n    beginPropogation(){\r\n        super.beginPropogation()\r\n        this.nodesOnTheScreen.forEach(node => {\r\n            node.beginPropogation()\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Updates the side bar to display options like 'go to parent' and 'load a different project'. What is displayed depends on if this atom is the top level, and if we are using run mode.\r\n     */ \r\n    updateSidebar(){\r\n        //Update the side bar to make it possible to change the molecule name\r\n        \r\n        var valueList = super.initializeSideBar() \r\n        \r\n        this.createEditableValueListItem(valueList,this,'name','Name', false)\r\n\r\n        if(!this.topLevel){\r\n            this.createButton(valueList,this,'Go To Parent',this.goToParentMolecule)\r\n            \r\n            //this.createButton(valueList,this,'Export To GitHub', this.exportToGithub)\r\n        }\r\n        else{ //If we are the top level molecule and not in run mode\r\n\r\n            this.createEditableValueListItem(valueList,GlobalVariables,'circleSegmentSize', 'Circle Segment Size', true, (newValue) => {GlobalVariables.circleSegmentSize = newValue})\r\n            \r\n        }\r\n        \r\n        // this.createButton(valueList,this,'Download STL',() => {\r\n        // const convertSTL = require('@jsxcad/convert-stl')\r\n        // convertSTL.toStla({}, this.value.toDisjointGeometry()).then( stlContent => {\r\n        // const blob = new Blob([stlContent], {type: 'text/plain;charset=utf-8'})\r\n        // saveAs(blob, this.name+'.stl')\r\n        // })\r\n        // })\r\n        \r\n        // this.createButton(valueList,this,'Download SVG',() => {\r\n        // const convertSVG = require('@jsxcad/convert-svg')\r\n        // const crossSection = this.value.crossSection().toDisjointGeometry()\r\n        // convertSVG.toSvg({}, crossSection).then( contentSvg => {\r\n        // const blob = new Blob([contentSvg], {type: 'text/plain;charset=utf-8'})\r\n        // saveAs(blob, this.name+'.svg')\r\n        // })\r\n        // })\r\n        \r\n        //removes 3d view menu on background click\r\n        let viewerBar = document.querySelector('#viewer_bar')\r\n        while (viewerBar.firstChild) {\r\n            viewerBar.removeChild(viewerBar.firstChild)\r\n            viewerBar.setAttribute('style', 'background-color:none;')\r\n        }\r\n\r\n        if(this.uniqueID != GlobalVariables.currentMolecule.uniqueID  || GlobalVariables.runMode){ //If you single click to select a molecule OR if we are in run mode\r\n            //Add options to set all of the inputs\r\n            this.inputs.forEach(child => {\r\n                if(child.type == 'input' && child.valueType != 'geometry'){\r\n                    this.createEditableValueListItem(valueList,child,'value', child.name, true)\r\n                }\r\n            })\r\n        }\r\n                    \r\n        this.displaySimpleBOM(valueList)\r\n        \r\n        return valueList\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Creates a simple BOM list which cannot be edited. The generated element is added to the passed list.\r\n     * @param {object} list - The HTML object to append the created element to.\r\n     */ \r\n    displaySimpleBOM(list){\r\n        var bomList = []\r\n        if(this.value != null){\r\n            try{\r\n                bomList = extractBomTags(this.value)\r\n            }catch(err){\r\n                this.setAlert(\"Unable to read BOM\")\r\n            }\r\n        }\r\n        \r\n        if(bomList.length > 0){\r\n        \r\n            list.appendChild(document.createElement('br'))\r\n            list.appendChild(document.createElement('br'))\r\n            \r\n            var div = document.createElement('h3')\r\n            div.setAttribute('style','text-align:center;')\r\n            list.appendChild(div)\r\n            var valueText = document.createTextNode('Bill Of Materials')\r\n            div.appendChild(valueText)\r\n            \r\n            var x = document.createElement('HR')\r\n            list.appendChild(x)\r\n            \r\n            bomList.forEach(bomEntry => {\r\n                this.createNonEditableValueListItem(list,bomEntry,'numberNeeded', bomEntry.BOMitemName, false)\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Replace the currently displayed molecule with the parent of this molecule...moves the user up one level.\r\n     */\r\n    goToParentMolecule(){\r\n        //Go to the parent molecule if there is one\r\n        if(!GlobalVariables.currentMolecule.topLevel){\r\n            GlobalVariables.currentMolecule = GlobalVariables.currentMolecule.parent //set parent this to be the currently displayed molecule\r\n            GlobalVariables.currentMolecule.backgroundClick()\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Create a new project on GitHub with this atom as it's top level, then replace this molecule with githubMolecule referencing that project.\r\n     * @param {object} self - A passed reference to self...why are we doing this?\r\n     */\r\n    exportToGithub(self){\r\n        //Export this molecule to github\r\n        GlobalVariables.gitHub.exportCurrentMoleculeToGithub(self)\r\n    }\r\n    \r\n    /**\r\n     * Replaces this molecule with a github molecule pointing to the passed reference.\r\n     * @param {number} githubID - The ID number of the github project to replace this\r\n     */\r\n    replaceThisMoleculeWithGithub(githubID){\r\n        \r\n        //If we are currently inside the molecule targeted for replacement, go up one\r\n        if (GlobalVariables.currentMolecule.uniqueID == this.uniqueID){\r\n            GlobalVariables.currentMolecule = this.parent\r\n        }\r\n        \r\n        //Create a new github molecule in the same spot\r\n        GlobalVariables.currentMolecule.placeAtom({\r\n            x: this.x, \r\n            y: this.y, \r\n            parent: GlobalVariables.currentMolecule,\r\n            name: this.name,\r\n            atomType: 'GitHubMolecule',\r\n            projectID: githubID,\r\n            uniqueID: GlobalVariables.generateUniqueID()\r\n        }, null, GlobalVariables.availableTypes)\r\n        \r\n        \r\n        //Then delete the old molecule which has been replaced\r\n        this.deleteNode()\r\n\r\n    }\r\n    \r\n    /**\r\n     * Check to see if any of this molecules children have contributions to make to the README file. Children closer to the top left will be applied first. TODO: No contribution should be made if it's just a title.\r\n     */\r\n    requestReadme(){\r\n        var generatedReadme = super.requestReadme()\r\n        generatedReadme.push('## ' + this.name)\r\n        \r\n        var sortableAtomsList = this.nodesOnTheScreen\r\n        sortableAtomsList.sort(function(a, b){return GlobalVariables.distBetweenPoints(a.x, 0, a.y, 0)-GlobalVariables.distBetweenPoints(b.x, 0, b.y, 0)})\r\n        \r\n        sortableAtomsList.forEach(molecule => {\r\n            generatedReadme = generatedReadme.concat(molecule.requestReadme())\r\n        })\r\n        return generatedReadme\r\n    }\r\n    \r\n    /**\r\n     * Generates and returns a JSON represntation of this molecule and all of its children.\r\n     * @param {object} savedObject - A JSON object to append the represntation of this atom to.\r\n     */\r\n    serialize(savedObject){\r\n        //Save this molecule.\r\n        \r\n        //This one is a little confusing. Basically each molecule saves like an atom, but also creates a second object \r\n        //record of itself in the object \"savedObject\" object. If this is the topLevel molecule we need to create the \r\n        //savedObject object here to pass to lower levels.\r\n        \r\n        if(this.topLevel == true){\r\n            //If this is the top level create a new blank project to save to FIXME: It would be cleaner if this function were just called with the object when called from the top level\r\n            savedObject = {molecules: []}\r\n        }\r\n            \r\n        var allAtoms = [] //An array of all the atoms containted in this molecule\r\n        var allConnectors = [] //An array of all the connectors contained in this molelcule\r\n        \r\n        \r\n        this.nodesOnTheScreen.forEach(atom => {\r\n            //Store a represnetation of the atom\r\n            allAtoms.push(atom.serialize(savedObject))\r\n            //Store a representation of the atom's connectors\r\n            if(atom.output){\r\n                atom.output.connectors.forEach(connector => {\r\n                    allConnectors.push(connector.serialize())\r\n                })\r\n            }\r\n        })\r\n        \r\n        var thisAsObject = super.serialize(savedObject)\r\n        thisAsObject.topLevel = this.topLevel\r\n        thisAsObject.allAtoms = allAtoms\r\n        thisAsObject.allConnectors = allConnectors\r\n        thisAsObject.fileTypeVersion = 1\r\n        \r\n        //Add a JSON representation of this object to the file being saved\r\n        savedObject.molecules.push(thisAsObject)\r\n        savedObject.circleSegmentSize = GlobalVariables.circleSegmentSize\r\n            \r\n        if(this.topLevel == true){\r\n            //If this is the top level, return the complete file to be saved\r\n            return savedObject\r\n        }\r\n        else{\r\n            //If not, return a placeholder for this molecule\r\n            return super.serialize(savedObject)\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Load the children of this from a JSON represntation\r\n     * @param {object} moleculeList - A list of all the atoms to be placed\r\n     * @param {number} moleculeID - The uniqueID of the molecule from the list to be loaded\r\n     */\r\n    deserialize(moleculeList, moleculeID){\r\n        //Find the target molecule in the list\r\n        let promiseArray = []\r\n        let moleculeObject = moleculeList.filter((molecule) => { return molecule.uniqueID == moleculeID})[0]\r\n            \r\n        this.setValues(moleculeObject) //Grab the values of everything from the passed object\r\n        //Place the atoms\r\n        moleculeObject.allAtoms.forEach(atom => {\r\n            const promise = this.placeAtom(atom, moleculeList, GlobalVariables.availableTypes)\r\n            promiseArray.push(promise)\r\n        })\r\n        \r\n        return Promise.all(promiseArray).then( ()=> {\r\n            //Once all the atoms are placed we can finish\r\n            \r\n            //reload the molecule object to prevent persistence issues\r\n            moleculeObject = moleculeList.filter((molecule) => { return molecule.uniqueID == moleculeID})[0]\r\n            //Place the connectors\r\n            /**\r\n             * A copy of the connectors attached to this molecule which can be reattached later. Should be redone.\r\n             * @param {array}\r\n             */\r\n            this.savedConnectors = moleculeObject.allConnectors //Save a copy of the connectors so we can use them later if we want\r\n            this.savedConnectors.forEach(connector => {\r\n                this.placeConnector(connector)\r\n            })\r\n            \r\n            this.setValues([])//Call set values again with an empty list to trigger loading of IO values from memory\r\n\r\n            this.updateValue()\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Places a new atom inside the molecule\r\n     * @param {object} newAtomObj - An object defining the new atom to be placed\r\n     * @param {array} moleculeList - Only pased if we are placing an instance of Molecule.\r\n     * @param {object} typesList - A dictionary of all of the available types with references to their constructors\r\n     * @param {boolean} unlock - A flag to indicate if this atom should spawn in the unlocked state.\r\n     */\r\n    async placeAtom(newAtomObj, moleculeList, typesList, unlock){\r\n        //Place the atom - note that types not listed in typesList will not be placed with no warning\r\n        var promise\r\n        for(var key in typesList) {\r\n            if (typesList[key].atomType == newAtomObj.atomType){\r\n                newAtomObj.parent = this\r\n                var atom = new typesList[key].creator(newAtomObj)\r\n                \r\n                //reassign the name of the Inputs to preserve linking\r\n                if(atom.atomType == 'Input' && typeof newAtomObj.name !== 'undefined'){\r\n                    atom.name = newAtomObj.name\r\n                    atom.draw() //The poling happens in draw :roll_eyes:\r\n                }\r\n\r\n                //If this is a molecule, de-serialize it\r\n                if(atom.atomType == 'Molecule' && moleculeList != null){\r\n                    promise = atom.deserialize(moleculeList, atom.uniqueID)\r\n                }\r\n                \r\n                //If this is a github molecule load it from the web\r\n                if(atom.atomType == 'GitHubMolecule'){\r\n                    promise = await atom.loadProjectByID(atom.projectID)\r\n                }\r\n                \r\n                if(unlock){\r\n                    //Make it spawn ready to update right away\r\n                    atom.unlock()\r\n                    atom.updateValue() //setup the initial value\r\n                }\r\n                \r\n                this.nodesOnTheScreen.push(atom)\r\n            }\r\n        }\r\n        return promise\r\n    }\r\n    \r\n    /**\r\n     * Places a new connector within the molecule\r\n     * @param {object} connectorObj - An object represntation of the connector specifying its inputs and outputs.\r\n     */\r\n    placeConnector(connectorObj){\r\n        var connector\r\n        var cp1NotFound = true\r\n        var cp2NotFound = true\r\n        var ap2\r\n        \r\n        try{\r\n            this.nodesOnTheScreen.forEach(atom => {\r\n                //Find the output node\r\n                if (atom.uniqueID == connectorObj.ap1ID){\r\n                    connector = new Connector({\r\n                        atomType: 'Connector',\r\n                        attachmentPoint1: atom.output,\r\n                        parentMolecule:  atom\r\n                    })\r\n                    cp1NotFound = false\r\n                }\r\n                //Find the input node\r\n                if (atom.uniqueID == connectorObj.ap2ID){\r\n                    atom.inputs.forEach(child => {\r\n                        if(child.name == connectorObj.ap2Name && child.type == 'input' && child.connectors.length == 0){\r\n                            cp2NotFound = false\r\n                            ap2 = child\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        }\r\n        catch(err){\r\n            console.warn('Unable to create connector')\r\n        }\r\n        \r\n        if(cp1NotFound || cp2NotFound){\r\n            console.warn('Unable to create connector')\r\n            return\r\n        }\r\n        \r\n        connector.attachmentPoint2 = ap2\r\n        \r\n        //Store the connector\r\n        connector.attachmentPoint1.connectors.push(connector)\r\n        connector.attachmentPoint2.connectors.push(connector)\r\n        \r\n        //Update the connection\r\n        connector.propogate()\r\n    }\r\n    \r\n    /**\r\n     * Sends the output of this molecule to be displayed in the 3D view.\r\n     */\r\n    sendToRender(){\r\n        super.sendToRender()\r\n        if(this.value != null){\r\n            if(this.topLevel){\r\n                GlobalVariables.ask({values: [this.value], key: \"bounding box\"}).then(result => {\r\n                    if (result != -1 ){\r\n                        GlobalVariables.display.zoomCameraToFit(result)\r\n                    }else{\r\n                        console.warn(\"Unable to compute bounding box\")\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/molecule.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 285,
    "kind": "class",
    "name": "Molecule",
    "memberof": "src/js/molecules/molecule.js",
    "static": true,
    "longname": "src/js/molecules/molecule.js~Molecule",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/molecule.js",
    "importStyle": "Molecule",
    "description": "This class creates the Molecule atom.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 286,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "nodesOnTheScreen",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#nodesOnTheScreen",
    "access": "public",
    "description": "A list of all of the atoms within this Molecule which should be drawn on the screen.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "inputs",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#inputs",
    "access": "public",
    "description": "An array of the molecules inputs. Is this not inherited from atom?",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#name",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "centerColor",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#centerColor",
    "access": "public",
    "description": "The color for the middle dot in the molecule",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 292,
    "kind": "member",
    "name": "topLevel",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#topLevel",
    "access": "public",
    "description": "A flag to indicate if this molecule is the top level molecule.",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#draw",
    "access": "public",
    "description": "Add the center dot to the molecule",
    "lineNumber": 69,
    "params": [],
    "return": null
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "doubleClick",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#doubleClick",
    "access": "public",
    "description": "Handle double clicks by replacing the molecule currently on the screen with this one, esentially diving into it.",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x cordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y cordinate of the click"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "backgroundClick",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#backgroundClick",
    "access": "public",
    "description": "Handle a background click (a click which doesn't land on one of the contained molecules) by deselecting everything and displaying a 3D rendering of this molecules output.",
    "lineNumber": 105,
    "params": [],
    "return": null
  },
  {
    "__docId__": 296,
    "kind": "member",
    "name": "selected",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#selected",
    "access": "public",
    "description": "Flag that the attom is now selected.",
    "lineNumber": 109,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "deselect",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#deselect",
    "access": "public",
    "description": "Unselect this molecule",
    "lineNumber": 117,
    "params": [],
    "return": null
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#updateValue",
    "access": "public",
    "description": "Grab values from the inputs and push them out to the input atoms.",
    "lineNumber": 124,
    "params": [],
    "return": null
  },
  {
    "__docId__": 300,
    "kind": "member",
    "name": "processing",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#processing",
    "access": "public",
    "description": "Flag that the current molecule is processing.",
    "lineNumber": 130,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "propogate",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#propogate",
    "access": "public",
    "description": "Trigger the output to propogate.",
    "lineNumber": 151,
    "params": [],
    "return": null
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "unlock",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#unlock",
    "access": "public",
    "description": "Unlock all of the atoms contained in this molecule",
    "lineNumber": 166,
    "params": [],
    "return": null
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "beginPropogation",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#beginPropogation",
    "access": "public",
    "description": "Trigger the beginning of the propogation process for all of the atoms in this molecule.",
    "lineNumber": 178,
    "params": [],
    "return": null
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#updateSidebar",
    "access": "public",
    "description": "Updates the side bar to display options like 'go to parent' and 'load a different project'. What is displayed depends on if this atom is the top level, and if we are using run mode.",
    "lineNumber": 188,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "displaySimpleBOM",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#displaySimpleBOM",
    "access": "public",
    "description": "Creates a simple BOM list which cannot be edited. The generated element is added to the passed list.",
    "lineNumber": 249,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "The HTML object to append the created element to."
      }
    ],
    "return": null
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "goToParentMolecule",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#goToParentMolecule",
    "access": "public",
    "description": "Replace the currently displayed molecule with the parent of this molecule...moves the user up one level.",
    "lineNumber": 282,
    "params": [],
    "return": null
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "exportToGithub",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#exportToGithub",
    "access": "public",
    "description": "Create a new project on GitHub with this atom as it's top level, then replace this molecule with githubMolecule referencing that project.",
    "lineNumber": 294,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "self",
        "description": "A passed reference to self...why are we doing this?"
      }
    ],
    "return": null
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "replaceThisMoleculeWithGithub",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#replaceThisMoleculeWithGithub",
    "access": "public",
    "description": "Replaces this molecule with a github molecule pointing to the passed reference.",
    "lineNumber": 303,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "githubID",
        "description": "The ID number of the github project to replace this"
      }
    ],
    "return": null
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "requestReadme",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#requestReadme",
    "access": "public",
    "description": "Check to see if any of this molecules children have contributions to make to the README file. Children closer to the top left will be applied first. TODO: No contribution should be made if it's just a title.",
    "lineNumber": 330,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#serialize",
    "access": "public",
    "description": "Generates and returns a JSON represntation of this molecule and all of its children.",
    "lineNumber": 347,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "savedObject",
        "description": "A JSON object to append the represntation of this atom to."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "deserialize",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#deserialize",
    "access": "public",
    "description": "Load the children of this from a JSON represntation",
    "lineNumber": 399,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "moleculeList",
        "description": "A list of all the atoms to be placed"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "moleculeID",
        "description": "The uniqueID of the molecule from the list to be loaded"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 313,
    "kind": "member",
    "name": "savedConnectors",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#savedConnectors",
    "access": "public",
    "description": "A copy of the connectors attached to this molecule which can be reattached later. Should be redone.",
    "lineNumber": 421,
    "params": [],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "placeAtom",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#placeAtom",
    "access": "public",
    "description": "Places a new atom inside the molecule",
    "lineNumber": 439,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "newAtomObj",
        "description": "An object defining the new atom to be placed"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "moleculeList",
        "description": "Only pased if we are placing an instance of Molecule."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "typesList",
        "description": "A dictionary of all of the available types with references to their constructors"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "unlock",
        "description": "A flag to indicate if this atom should spawn in the unlocked state."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "method",
    "name": "placeConnector",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#placeConnector",
    "access": "public",
    "description": "Places a new connector within the molecule",
    "lineNumber": 479,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "connectorObj",
        "description": "An object represntation of the connector specifying its inputs and outputs."
      }
    ],
    "return": null
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "sendToRender",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#sendToRender",
    "access": "public",
    "description": "Sends the output of this molecule to be displayed in the 3D view.",
    "lineNumber": 529,
    "params": [],
    "return": null
  },
  {
    "__docId__": 317,
    "kind": "file",
    "name": "src/js/molecules/output.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * This class creates the output atom.\r\n */\r\nexport default class Output extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super (values)\r\n        \r\n        //Add a new output to the current molecule\r\n        if (typeof this.parent !== 'undefined') {\r\n            this.parent.addIO('output', 'Geometry', this.parent, 'geometry', '')\r\n        }\r\n        \r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.type = 'output'\r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Output'\r\n        /**\r\n         * This atom's value\r\n         * @type {object}\r\n         */\r\n        this.value = null\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Output'\r\n        /**\r\n         * This atom's height\r\n         * @type {number}\r\n         */\r\n        this.height = 16\r\n        /**\r\n         * This atom's radius\r\n         * @type {number}\r\n         */\r\n        this.radius = 20\r\n        \r\n        this.setValues(values)\r\n        \r\n        this.addIO('input', 'number or geometry', this, 'geometry', null)\r\n    }\r\n    \r\n    /**\r\n     * Take the input value of this function and pass it to the parent Molecule to go up one level.\r\n     */ \r\n    updateValue(){\r\n        if(!GlobalVariables.evalLock && this.inputs.every(x => x.ready)){\r\n            this.value = this.findIOValue('number or geometry')\r\n            this.parent.value = this.value\r\n            this.parent.propogate()\r\n            \r\n            super.updateValue()\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * I am not sure why this function is needed. Did I decide that it was a bad idea to pass the id directly? Should be looked into, can probably be simplified.\r\n     */ \r\n    setID(newID){\r\n        /**\r\n         * The unique ID of this atom.\r\n         * @type {number}\r\n         */ \r\n        this.uniqueID = newID\r\n    }\r\n    \r\n    /**\r\n     * Draw the output shape on the screen.\r\n     */ \r\n    draw() {\r\n\r\n        this.height= this.radius\r\n        \r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.textAlign = 'end' \r\n        GlobalVariables.c.strokeStyle = this.parentMolecule.strokeColor\r\n        GlobalVariables.c.fillText(this.name, this.x + this.radius, this.y-this.radius)\r\n        GlobalVariables.c.moveTo(this.x - this.radius, this.y - this.height/2)\r\n        GlobalVariables.c.lineTo(this.x - this.radius + 2*this.radius, this.y - this.height/2)\r\n        GlobalVariables.c.lineTo(this.x + this.radius + 10, this.y)\r\n        GlobalVariables.c.lineTo(this.x + this.radius, this.y + this.height/2)\r\n        GlobalVariables.c.lineTo(this.x - this.radius, this.y + this.height/2)\r\n        GlobalVariables.c.fillStyle = this.color\r\n        GlobalVariables.c.lineWidth = 1\r\n        GlobalVariables.c.closePath()\r\n        //GlobalVariables.c.fill()\r\n        //GlobalVariables.c.stroke()\r\n       \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.moveTo(this.x + this.radius - this.radius*2, this.y - this.height)\r\n        GlobalVariables.c.lineTo(this.x + this.radius -5, this.y)\r\n        GlobalVariables.c.lineTo(this.x + this.radius - this.radius*2, this.y + this.height)\r\n        GlobalVariables.c.lineTo(this.x + this.radius - this.radius*2, this.y - this.height)\r\n        GlobalVariables.c.strokeStyle = this.parentMolecule.strokeColor\r\n        GlobalVariables.c.fillStyle = this.color\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.lineWidth = 1\r\n        GlobalVariables.c.lineJoin = \"round\"\r\n        GlobalVariables.c.stroke()\r\n        GlobalVariables.c.closePath()\r\n\r\n        this.inputs.forEach(child => {\r\n            child.draw()       \r\n        })\r\n        \r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/output.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 318,
    "kind": "class",
    "name": "Output",
    "memberof": "src/js/molecules/output.js",
    "static": true,
    "longname": "src/js/molecules/output.js~Output",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/output.js",
    "importStyle": "Output",
    "description": "This class creates the output atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 319,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/output.js~Output",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/output.js~Output#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 320,
    "kind": "member",
    "name": "type",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#type",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 321,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 322,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#value",
    "access": "public",
    "description": "This atom's value",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 323,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 324,
    "kind": "member",
    "name": "height",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#height",
    "access": "public",
    "description": "This atom's height",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 325,
    "kind": "member",
    "name": "radius",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#radius",
    "access": "public",
    "description": "This atom's radius",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 326,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/output.js~Output",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/output.js~Output#updateValue",
    "access": "public",
    "description": "Take the input value of this function and pass it to the parent Molecule to go up one level.",
    "lineNumber": 60,
    "params": [],
    "return": null
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "setID",
    "memberof": "src/js/molecules/output.js~Output",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/output.js~Output#setID",
    "access": "public",
    "description": "I am not sure why this function is needed. Did I decide that it was a bad idea to pass the id directly? Should be looked into, can probably be simplified.",
    "lineNumber": 73,
    "params": [
      {
        "name": "newID",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 329,
    "kind": "member",
    "name": "uniqueID",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#uniqueID",
    "access": "public",
    "description": "The unique ID of this atom.",
    "lineNumber": 78,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/output.js~Output",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/output.js~Output#draw",
    "access": "public",
    "description": "Draw the output shape on the screen.",
    "lineNumber": 84,
    "params": [],
    "return": null
  },
  {
    "__docId__": 332,
    "kind": "file",
    "name": "src/js/molecules/readme.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * This class creates the readme atom.\r\n */\r\nexport default class Readme extends Atom{\r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Readme'\r\n        /**\r\n         * The text to appear in the README file\r\n         * @type {string}\r\n         */\r\n        this.readmeText = 'Readme text here'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.type = 'readme'\r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'README'\r\n        /**\r\n         * This atom's radius...probably inherited and can be deleted\r\n         * @type {number}\r\n         */\r\n        this.radius = 20\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Add a place to edit the readme text to the sidebar*/ \r\n    updateSidebar(){\r\n        var valueList = super.updateSidebar() //call the super function\r\n        this.createEditableValueListItem(valueList,this,'readmeText', 'Notes', false)\r\n    }\r\n    \r\n    /**\r\n     * Draw the two // marks on the readme atom\r\n     */ \r\n    draw() {\r\n        \r\n        super.draw() //Super call to draw the rest\r\n        \r\n        //draw the two slashes on the node//\r\n        GlobalVariables.c.strokeStyle = '#949294'\r\n        GlobalVariables.c.lineWidth = 3\r\n        GlobalVariables.c.lineCap = 'round'\r\n        \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.moveTo(this.x - 11, this.y + 10)\r\n        GlobalVariables.c.lineTo(this.x, this.y - 10)\r\n        GlobalVariables.c.stroke()\r\n        \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.moveTo(this.x, this.y + 10)\r\n        GlobalVariables.c.lineTo(this.x + 11, this.y - 10)\r\n        GlobalVariables.c.stroke()\r\n    }\r\n    \r\n    /**\r\n     * Update the readme text. Called when the readme text has been edited.\r\n     */ \r\n    setValue(newText) {\r\n        this.readmeText = newText\r\n    }\r\n    \r\n    /**\r\n     * Provides this molecules contribution to the global Readme\r\n     */ \r\n    requestReadme(){\r\n        return [this.readmeText]\r\n    }\r\n    \r\n    /**\r\n     * Add the readme text to the information saved for this atom\r\n     */ \r\n    serialize(values){\r\n        //Save the readme text to the serial stream\r\n        var valuesObj = super.serialize(values)\r\n        \r\n        valuesObj.readmeText = this.readmeText\r\n        \r\n        return valuesObj\r\n        \r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/readme.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 333,
    "kind": "class",
    "name": "Readme",
    "memberof": "src/js/molecules/readme.js",
    "static": true,
    "longname": "src/js/molecules/readme.js~Readme",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/readme.js",
    "importStyle": "Readme",
    "description": "This class creates the readme atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 334,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 335,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#atomType",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 336,
    "kind": "member",
    "name": "readmeText",
    "memberof": "src/js/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#readmeText",
    "access": "public",
    "description": "The text to appear in the README file",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 337,
    "kind": "member",
    "name": "type",
    "memberof": "src/js/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#type",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 338,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 339,
    "kind": "member",
    "name": "radius",
    "memberof": "src/js/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#radius",
    "access": "public",
    "description": "This atom's radius...probably inherited and can be deleted",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 340,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#updateSidebar",
    "access": "public",
    "description": "Add a place to edit the readme text to the sidebar",
    "lineNumber": 46,
    "params": [],
    "return": null
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#draw",
    "access": "public",
    "description": "Draw the two // marks on the readme atom",
    "lineNumber": 54,
    "params": [],
    "return": null
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "setValue",
    "memberof": "src/js/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#setValue",
    "access": "public",
    "description": "Update the readme text. Called when the readme text has been edited.",
    "lineNumber": 77,
    "params": [
      {
        "name": "newText",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "requestReadme",
    "memberof": "src/js/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#requestReadme",
    "access": "public",
    "description": "Provides this molecules contribution to the global Readme",
    "lineNumber": 84,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#serialize",
    "access": "public",
    "description": "Add the readme text to the information saved for this atom",
    "lineNumber": 91,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 346,
    "kind": "file",
    "name": "src/js/molecules/rectangle.js",
    "content": "import Atom from '../prototypes/atom'\r\n\r\n/**\r\n * This class creates the rectangle atom.\r\n */\r\nexport default class Rectangle extends Atom {\r\n\r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('input', 'x length', this, 'number', 10)\r\n        this.addIO('input', 'y length', this, 'number', 10)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Rectangle'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Rectangle'\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Create a new rectangle in a worker thread.\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            const values = [this.findIOValue('x length'),this.findIOValue('y length')]\r\n            this.basicThreadValueProcessing(values, \"rectangle\")\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/rectangle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 347,
    "kind": "class",
    "name": "Rectangle",
    "memberof": "src/js/molecules/rectangle.js",
    "static": true,
    "longname": "src/js/molecules/rectangle.js~Rectangle",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/rectangle.js",
    "importStyle": "Rectangle",
    "description": "This class creates the rectangle atom.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 348,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/rectangle.js~Rectangle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/rectangle.js~Rectangle#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 349,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/rectangle.js~Rectangle",
    "static": false,
    "longname": "src/js/molecules/rectangle.js~Rectangle#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 350,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/rectangle.js~Rectangle",
    "static": false,
    "longname": "src/js/molecules/rectangle.js~Rectangle#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/rectangle.js~Rectangle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/rectangle.js~Rectangle#updateValue",
    "access": "public",
    "description": "Create a new rectangle in a worker thread.",
    "lineNumber": 36,
    "params": [],
    "return": null
  },
  {
    "__docId__": 352,
    "kind": "file",
    "name": "src/js/molecules/regularPolygon.js",
    "content": "import Atom from '../prototypes/atom'\r\n\r\n/**\r\n * This class creates the regular polygon atom.\r\n */\r\nexport default class RegularPolygon extends Atom {\r\n\r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('input', 'number of sides', this, 'number', 6)\r\n        this.addIO('input', 'diameter', this, 'number', 10)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'RegularPolygon'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'RegularPolygon'\r\n\r\n        // create the polygon code block\r\n        this.updateValue()\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Create a new regular polygon in a worker thread.\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            \r\n            const values = [this.findIOValue('diameter'), this.findIOValue('number of sides')]\r\n            this.basicThreadValueProcessing(values, \"circle\")\r\n        }catch(err){this.setAlert(err)}\r\n    }  \r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/regularPolygon.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 353,
    "kind": "class",
    "name": "RegularPolygon",
    "memberof": "src/js/molecules/regularPolygon.js",
    "static": true,
    "longname": "src/js/molecules/regularPolygon.js~RegularPolygon",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/regularPolygon.js",
    "importStyle": "RegularPolygon",
    "description": "This class creates the regular polygon atom.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 354,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/regularPolygon.js~RegularPolygon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/regularPolygon.js~RegularPolygon#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 355,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/regularPolygon.js~RegularPolygon",
    "static": false,
    "longname": "src/js/molecules/regularPolygon.js~RegularPolygon#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 356,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/regularPolygon.js~RegularPolygon",
    "static": false,
    "longname": "src/js/molecules/regularPolygon.js~RegularPolygon#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 357,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/regularPolygon.js~RegularPolygon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/regularPolygon.js~RegularPolygon#updateValue",
    "access": "public",
    "description": "Create a new regular polygon in a worker thread.",
    "lineNumber": 39,
    "params": [],
    "return": null
  },
  {
    "__docId__": 358,
    "kind": "file",
    "name": "src/js/molecules/rotate.js",
    "content": "import Atom from '../prototypes/atom'\r\n\r\n/**\r\n * This class creates the rotate atom.\r\n */\r\nexport default class Rotate extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', '')\r\n        this.addIO('input', 'x-axis degrees', this, 'number', 0)\r\n        this.addIO('input', 'y-axis degrees', this, 'number', 0)\r\n        this.addIO('input', 'z-axis degrees', this, 'number', 0)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Rotate'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Rotate'\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Pass the input shape to a worker thread to compute the rotation\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            const values = [this.findIOValue('geometry'), this.findIOValue('x-axis degrees'), this.findIOValue('y-axis degrees'), this.findIOValue('z-axis degrees')]\r\n            this.basicThreadValueProcessing(values, \"rotate\")\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/rotate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 359,
    "kind": "class",
    "name": "Rotate",
    "memberof": "src/js/molecules/rotate.js",
    "static": true,
    "longname": "src/js/molecules/rotate.js~Rotate",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/rotate.js",
    "importStyle": "Rotate",
    "description": "This class creates the rotate atom.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 360,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/rotate.js~Rotate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/rotate.js~Rotate#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 361,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/rotate.js~Rotate",
    "static": false,
    "longname": "src/js/molecules/rotate.js~Rotate#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 362,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/rotate.js~Rotate",
    "static": false,
    "longname": "src/js/molecules/rotate.js~Rotate#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/rotate.js~Rotate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/rotate.js~Rotate#updateValue",
    "access": "public",
    "description": "Pass the input shape to a worker thread to compute the rotation",
    "lineNumber": 39,
    "params": [],
    "return": null
  },
  {
    "__docId__": 364,
    "kind": "file",
    "name": "src/js/molecules/scale.js",
    "content": "import Atom from '../prototypes/atom'\r\n\r\n/**\r\n * This class creates the scale atom.\r\n */\r\nexport default class Scale extends Atom{\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', '')\r\n        this.addIO('input', 'multiple', this, 'number', 10)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Scale'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Scale'\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Take the input geometry and pass it to a worker thread to be scaled.\r\n     */ \r\n    updateValue(){\r\n        \r\n        try{\r\n            const values = [this.findIOValue('geometry'), this.findIOValue('multiple')]\r\n            this.basicThreadValueProcessing(values, \"scale\")\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/scale.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 365,
    "kind": "class",
    "name": "Scale",
    "memberof": "src/js/molecules/scale.js",
    "static": true,
    "longname": "src/js/molecules/scale.js~Scale",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/scale.js",
    "importStyle": "Scale",
    "description": "This class creates the scale atom.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 366,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/scale.js~Scale",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/scale.js~Scale#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 367,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/scale.js~Scale",
    "static": false,
    "longname": "src/js/molecules/scale.js~Scale#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 368,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/scale.js~Scale",
    "static": false,
    "longname": "src/js/molecules/scale.js~Scale#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/scale.js~Scale",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/scale.js~Scale#updateValue",
    "access": "public",
    "description": "Take the input geometry and pass it to a worker thread to be scaled.",
    "lineNumber": 37,
    "params": [],
    "return": null
  },
  {
    "__docId__": 370,
    "kind": "file",
    "name": "src/js/molecules/shrinkwrap.js",
    "content": "import Atom from '../prototypes/atom.js'\r\nimport { addOrDeletePorts } from '../alwaysOneFreeInput.js'\r\n\r\n/**\r\n * This class creates the shrinkwrap atom. This behavior can also be called 'hull'\r\n */\r\nexport default class ShrinkWrap extends Atom{\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Shrink Wrap'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'ShrinkWrap'\r\n        /**\r\n         * A list of all of the inputs to this molecule. May be passed to the constructor and loaded.\r\n         * @type {array}\r\n         */\r\n        this.ioValues = []\r\n        /**\r\n         * This was used when there was a drop down to select closed...may be deleted\r\n         * @type {number}\r\n         */\r\n        this.closedSelection = 0\r\n        /**\r\n         * I believe this is no longer used alzatin - is that right?\r\n         * @type {boolean}\r\n         */\r\n        this.addedIO = false\r\n        \r\n        this.setValues(values)\r\n        \r\n        if (typeof this.ioValues !== 'undefined'){\r\n            this.ioValues.forEach(ioValue => { //for each saved value\r\n                this.addIO('input', ioValue.name, this, 'geometry', '')\r\n            })\r\n        }\r\n        \r\n        this.updateValue()\r\n    }\r\n    \r\n    /**\r\n     * Generates a list of all of the input shapes, then passees them to a worker thread to compute the hull\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            var inputsList = []\r\n            this.inputs.forEach( io => {\r\n                if(io.connectors.length > 0){\r\n                    inputsList.push(io.getValue())\r\n                }\r\n            })\r\n            const values = inputsList.map(x => {\r\n                return x\r\n            })\r\n            \r\n            this.basicThreadValueProcessing(values, \"hull\")\r\n        }catch(err){this.setAlert(err)}\r\n        \r\n        //Delete or add ports as needed\r\n        addOrDeletePorts(this)\r\n    }\r\n     \r\n    /**\r\n     * Add the names of the inputs to the saved object so that they can be loaded later\r\n     */ \r\n    serialize(savedObject){\r\n        var thisAsObject = super.serialize(savedObject)\r\n        \r\n        var ioValues = []\r\n        this.inputs.forEach(io => {\r\n            if (io.type == 'input'){\r\n                var saveIO = {\r\n                    name: io.name,\r\n                    ioValue: 10\r\n                }\r\n                ioValues.push(saveIO)\r\n            }\r\n        })\r\n        \r\n        ioValues.forEach(ioValue => {\r\n            thisAsObject.ioValues.push(ioValue)\r\n        })\r\n        \r\n        //Write the selection for if the chain is closed\r\n        thisAsObject.closedSelection = this.closedSelection\r\n        \r\n        return thisAsObject\r\n        \r\n    }\r\n    \r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/shrinkwrap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 371,
    "kind": "class",
    "name": "ShrinkWrap",
    "memberof": "src/js/molecules/shrinkwrap.js",
    "static": true,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/shrinkwrap.js",
    "importStyle": "ShrinkWrap",
    "description": "This class creates the shrinkwrap atom. This behavior can also be called 'hull'",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 372,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 373,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 374,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 375,
    "kind": "member",
    "name": "ioValues",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#ioValues",
    "access": "public",
    "description": "A list of all of the inputs to this molecule. May be passed to the constructor and loaded.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 376,
    "kind": "member",
    "name": "closedSelection",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#closedSelection",
    "access": "public",
    "description": "This was used when there was a drop down to select closed...may be deleted",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 377,
    "kind": "member",
    "name": "addedIO",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#addedIO",
    "access": "public",
    "description": "I believe this is no longer used alzatin - is that right?",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#updateValue",
    "access": "public",
    "description": "Generates a list of all of the input shapes, then passees them to a worker thread to compute the hull",
    "lineNumber": 58,
    "params": [],
    "return": null
  },
  {
    "__docId__": 379,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#serialize",
    "access": "public",
    "description": "Add the names of the inputs to the saved object so that they can be loaded later",
    "lineNumber": 80,
    "params": [
      {
        "name": "savedObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 380,
    "kind": "file",
    "name": "src/js/molecules/stl.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables.js'\r\nimport saveAs from '../lib/FileSaver.js'\r\n\r\n/**\r\n * This class creates the stl atom which lets you download a .stl file.\r\n */\r\nexport default class Stl extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Stl'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Stl'\r\n        \r\n        /**\r\n         * This atom's value. Contains the value of the input geometry, not the stl\r\n         * @type {string}\r\n         */\r\n        this.value = null\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', null)\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Set the value to be the input geometry, then call super updateValue()\r\n     */ \r\n    updateValue(){\r\n        if(!GlobalVariables.evalLock && this.inputs.every(x => x.ready)){\r\n            try{\r\n                this.value = this.findIOValue('geometry')\r\n            }catch(err){this.setAlert(err)}\r\n            super.updateValue()\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Create a button to download the .stl file.\r\n     */ \r\n    updateSidebar(){\r\n        const list = super.updateSidebar()\r\n        this.createButton(list, this, \"Download STL\", ()=>{this.downloadStl()})\r\n    }\r\n    \r\n    /**\r\n     * The function which is called when you press the download button.\r\n     */ \r\n    downloadStl(){\r\n        const values = [this.value]\r\n        \r\n        const computeValue = async (values, key) => {\r\n            try{\r\n                return await GlobalVariables.ask({values: values, key: key})\r\n            }\r\n            catch(err){\r\n                this.setAlert(err)\r\n            }\r\n        }\r\n        \r\n        computeValue(values, \"stl\").then(result => {\r\n            if (result != -1 ){\r\n                const blob = new Blob([result], {type: 'text/plain;charset=utf-8'})\r\n                saveAs(blob, GlobalVariables.topLevelMolecule.name+'.stl')\r\n            }else{\r\n                this.setAlert(\"Unable to compute\")\r\n            }\r\n        })\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/stl.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 381,
    "kind": "class",
    "name": "Stl",
    "memberof": "src/js/molecules/stl.js",
    "static": true,
    "longname": "src/js/molecules/stl.js~Stl",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/stl.js",
    "importStyle": "Stl",
    "description": "This class creates the stl atom which lets you download a .stl file.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 382,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/stl.js~Stl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/stl.js~Stl#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 383,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/stl.js~Stl",
    "static": false,
    "longname": "src/js/molecules/stl.js~Stl#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 384,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/stl.js~Stl",
    "static": false,
    "longname": "src/js/molecules/stl.js~Stl#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 385,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/molecules/stl.js~Stl",
    "static": false,
    "longname": "src/js/molecules/stl.js~Stl#value",
    "access": "public",
    "description": "This atom's value. Contains the value of the input geometry, not the stl",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 386,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/stl.js~Stl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/stl.js~Stl#updateValue",
    "access": "public",
    "description": "Set the value to be the input geometry, then call super updateValue()",
    "lineNumber": 43,
    "params": [],
    "return": null
  },
  {
    "__docId__": 388,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/stl.js~Stl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/stl.js~Stl#updateSidebar",
    "access": "public",
    "description": "Create a button to download the .stl file.",
    "lineNumber": 55,
    "params": [],
    "return": null
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "downloadStl",
    "memberof": "src/js/molecules/stl.js~Stl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/stl.js~Stl#downloadStl",
    "access": "public",
    "description": "The function which is called when you press the download button.",
    "lineNumber": 63,
    "params": [],
    "return": null
  },
  {
    "__docId__": 390,
    "kind": "file",
    "name": "src/js/molecules/stretch.js",
    "content": "import Atom from '../prototypes/atom'\r\n\r\n/**\r\n * This class creates the stretch atom.\r\n */\r\nexport default class Stretch extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', '')\r\n        this.addIO('input', 'x', this, 'number', 1)\r\n        this.addIO('input', 'y', this, 'number', 1)\r\n        this.addIO('input', 'z', this, 'number', 1)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Stretch'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Stretch'\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Pass the input geometry to a worker thread to compute the stretch\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            const values = [this.findIOValue('geometry'), this.findIOValue('x'),this.findIOValue('y'),this.findIOValue('z')]\r\n            \r\n            this.basicThreadValueProcessing(values, \"stretch\")\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/stretch.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 391,
    "kind": "class",
    "name": "Stretch",
    "memberof": "src/js/molecules/stretch.js",
    "static": true,
    "longname": "src/js/molecules/stretch.js~Stretch",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/stretch.js",
    "importStyle": "Stretch",
    "description": "This class creates the stretch atom.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 392,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/stretch.js~Stretch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/stretch.js~Stretch#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 393,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/stretch.js~Stretch",
    "static": false,
    "longname": "src/js/molecules/stretch.js~Stretch#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 394,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/stretch.js~Stretch",
    "static": false,
    "longname": "src/js/molecules/stretch.js~Stretch#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/stretch.js~Stretch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/stretch.js~Stretch#updateValue",
    "access": "public",
    "description": "Pass the input geometry to a worker thread to compute the stretch",
    "lineNumber": 39,
    "params": [],
    "return": null
  },
  {
    "__docId__": 396,
    "kind": "file",
    "name": "src/js/molecules/svg.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables.js'\r\nimport saveAs from '../lib/FileSaver.js'\r\n\r\n/**\r\n * This class creates the svg atom which lets you download a .svg file.\r\n */\r\nexport default class Svg extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Svg'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Svg'\r\n        \r\n        /**\r\n         * This atom's value. Contains the value of the input geometry, not the stl\r\n         * @type {string}\r\n         */\r\n        this.value = null\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', null)\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Set the value to be the input geometry, then call super updateValue()\r\n     */ \r\n    updateValue(){\r\n        if(!GlobalVariables.evalLock && this.inputs.every(x => x.ready)){\r\n            try{\r\n                this.value = this.findIOValue('geometry')\r\n            }catch(err){this.setAlert(err)}\r\n            super.updateValue()\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Create a button to download the .svg file.\r\n     */ \r\n    updateSidebar(){\r\n        const list = super.updateSidebar()\r\n        this.createButton(list, this, \"Download SVG\", ()=>{this.downloadSvg()})\r\n    }\r\n    \r\n    /**\r\n     * The function which is called when you press the download button.\r\n     */ \r\n    downloadSvg(){\r\n        const values = [this.findIOValue('geometry')]\r\n        \r\n        const computeValue = async (values, key) => {\r\n            try{\r\n                return await GlobalVariables.ask({values: values, key: key})\r\n            }\r\n            catch(err){\r\n                this.setAlert(err)\r\n            }\r\n        }\r\n        \r\n        computeValue(values, \"svg\").then(result => {\r\n            if (result != -1 ){\r\n                const blob = new Blob([result], {type: 'text/plain;charset=utf-8'})\r\n                saveAs(blob, GlobalVariables.topLevelMolecule.name+'.svg')\r\n            }else{\r\n                this.setAlert(\"Unable to compute\")\r\n            }\r\n        })\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/svg.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 397,
    "kind": "class",
    "name": "Svg",
    "memberof": "src/js/molecules/svg.js",
    "static": true,
    "longname": "src/js/molecules/svg.js~Svg",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/svg.js",
    "importStyle": "Svg",
    "description": "This class creates the svg atom which lets you download a .svg file.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 398,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/svg.js~Svg",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/svg.js~Svg#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 399,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/svg.js~Svg",
    "static": false,
    "longname": "src/js/molecules/svg.js~Svg#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 400,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/svg.js~Svg",
    "static": false,
    "longname": "src/js/molecules/svg.js~Svg#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 401,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/molecules/svg.js~Svg",
    "static": false,
    "longname": "src/js/molecules/svg.js~Svg#value",
    "access": "public",
    "description": "This atom's value. Contains the value of the input geometry, not the stl",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 402,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/svg.js~Svg",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/svg.js~Svg#updateValue",
    "access": "public",
    "description": "Set the value to be the input geometry, then call super updateValue()",
    "lineNumber": 43,
    "params": [],
    "return": null
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/svg.js~Svg",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/svg.js~Svg#updateSidebar",
    "access": "public",
    "description": "Create a button to download the .svg file.",
    "lineNumber": 55,
    "params": [],
    "return": null
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "downloadSvg",
    "memberof": "src/js/molecules/svg.js~Svg",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/svg.js~Svg#downloadSvg",
    "access": "public",
    "description": "The function which is called when you press the download button.",
    "lineNumber": 63,
    "params": [],
    "return": null
  },
  {
    "__docId__": 406,
    "kind": "file",
    "name": "src/js/molecules/tag.js",
    "content": "import Atom from '../prototypes/atom'\r\n\r\n/**\r\n * This class creates the tag atom.\r\n */\r\nexport default class Tag extends Atom{\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', '')\r\n        this.addIO('input', 'tag', this, 'string', 'Tag String')\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Add Tag'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Tag'\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Add a tag to the input geometry. The substance is not changed.\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            const values = [this.findIOValue('geometry'), this.findIOValue('tag')]\r\n            this.basicThreadValueProcessing(values, \"tag\")\r\n        }catch(err){this.setAlert(err)}\r\n        super.updateValue()\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/tag.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 407,
    "kind": "class",
    "name": "Tag",
    "memberof": "src/js/molecules/tag.js",
    "static": true,
    "longname": "src/js/molecules/tag.js~Tag",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/tag.js",
    "importStyle": "Tag",
    "description": "This class creates the tag atom.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 408,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/tag.js~Tag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/tag.js~Tag#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 409,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/tag.js~Tag",
    "static": false,
    "longname": "src/js/molecules/tag.js~Tag#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 410,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/tag.js~Tag",
    "static": false,
    "longname": "src/js/molecules/tag.js~Tag#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/tag.js~Tag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/tag.js~Tag#updateValue",
    "access": "public",
    "description": "Add a tag to the input geometry. The substance is not changed.",
    "lineNumber": 36,
    "params": [],
    "return": null
  },
  {
    "__docId__": 412,
    "kind": "file",
    "name": "src/js/molecules/translate.js",
    "content": "import Atom from '../prototypes/atom'\r\n\r\n/**\r\n * This class creates the translate atom.\r\n */\r\nexport default class Translate extends Atom{\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', '')\r\n        this.addIO('input', 'xDist', this, 'number', 0)\r\n        this.addIO('input', 'yDist', this, 'number', 0)\r\n        this.addIO('input', 'zDist', this, 'number', 0)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Translate'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Translate'\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Pass the input geometry to a worker function to compute the translation.\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            const values = [this.findIOValue('geometry'), this.findIOValue('xDist'), this.findIOValue('yDist'), this.findIOValue('zDist')]\r\n            \r\n            this.basicThreadValueProcessing(values, \"translate\")\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/translate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 413,
    "kind": "class",
    "name": "Translate",
    "memberof": "src/js/molecules/translate.js",
    "static": true,
    "longname": "src/js/molecules/translate.js~Translate",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/translate.js",
    "importStyle": "Translate",
    "description": "This class creates the translate atom.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 414,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/translate.js~Translate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/translate.js~Translate#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 415,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/translate.js~Translate",
    "static": false,
    "longname": "src/js/molecules/translate.js~Translate#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 416,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/translate.js~Translate",
    "static": false,
    "longname": "src/js/molecules/translate.js~Translate#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/translate.js~Translate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/translate.js~Translate#updateValue",
    "access": "public",
    "description": "Pass the input geometry to a worker function to compute the translation.",
    "lineNumber": 38,
    "params": [],
    "return": null
  },
  {
    "__docId__": 418,
    "kind": "file",
    "name": "src/js/molecules/union.js",
    "content": "import Atom from '../prototypes/atom'\r\n\r\n/**\r\n * This class creates the circle atom.\r\n */\r\nexport default class Union extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        this.addIO('input', 'geometry1', this, 'geometry', '')\r\n        this.addIO('input', 'geometry2', this, 'geometry', '')\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Union'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Union'\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Pass the input geometries to a worker thread to compute their union.\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            const values = [this.findIOValue('geometry1'), this.findIOValue('geometry2')]\r\n            \r\n            this.basicThreadValueProcessing(values, \"union\")\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n    \r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/union.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 419,
    "kind": "class",
    "name": "Union",
    "memberof": "src/js/molecules/union.js",
    "static": true,
    "longname": "src/js/molecules/union.js~Union",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/union.js",
    "importStyle": "Union",
    "description": "This class creates the circle atom.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 420,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/union.js~Union",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/union.js~Union#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 421,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/union.js~Union",
    "static": false,
    "longname": "src/js/molecules/union.js~Union#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 422,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/union.js~Union",
    "static": false,
    "longname": "src/js/molecules/union.js~Union#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/union.js~Union",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/union.js~Union#updateValue",
    "access": "public",
    "description": "Pass the input geometries to a worker thread to compute their union.",
    "lineNumber": 37,
    "params": [],
    "return": null
  },
  {
    "__docId__": 424,
    "kind": "file",
    "name": "src/js/prototypes/atom.js",
    "content": "import AttachmentPoint from './attachmentpoint'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * This class is the prototype for all atoms.\r\n */\r\nexport default class Atom {\r\n\r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        //Setup default values\r\n        /** \r\n         * An array of all of the input attachment points connected to this atom\r\n         * @type {array}\r\n         */\r\n        this.inputs = []\r\n        /** \r\n         * This atom's output attachment point if it has one\r\n         * @type {object}\r\n         */\r\n        this.output = null\r\n        \r\n        /** \r\n         * The X cordinate of this atom\r\n         * @type {number}\r\n         */\r\n        this.x = 0\r\n        /** \r\n         * The Y cordinate of this atom\r\n         * @type {number}\r\n         */\r\n        this.y = 0\r\n        /** \r\n         * This atom's radius as displayed on the screen\r\n         * @type {number}\r\n         */\r\n        this.radius = 16\r\n        /** \r\n         * This atom's default color (ie when not selected or processing)\r\n         * @type {string}\r\n         */\r\n        this.defaultColor = '#F3EFEF'\r\n        /** \r\n         * This atom's color when selected\r\n         * @type {string}\r\n         */\r\n        /** \r\n         * The color to use for strokes when selected\r\n         * @type {string}\r\n         */\r\n        this.selectedColor = '#484848'\r\n        /** \r\n         * The color currently used for strokes\r\n         * @type {string}\r\n         */\r\n        this.strokeColor = '#484848'\r\n        /** \r\n         * A flag to indicate if this atom is curently selected\r\n         * @type {boolean}\r\n         */\r\n        this.selected = false\r\n        /** \r\n         * This atom's curent color\r\n         * @type {string}\r\n         */\r\n        this.color = '#F3EFEF'\r\n        /** \r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'name'\r\n        /** \r\n         * This atom's parent, usually the molecule which contains this atom\r\n         * @type {object}\r\n         */\r\n        this.parentMolecule = null\r\n        /** \r\n         * This atom's value...Is can this be done away with? Are we basically storing the value in the output now?\r\n         * @type {object}\r\n         */\r\n        this.value = null\r\n        /** \r\n         * A flag to indicate if this atom is currently being draged on the screen.\r\n         * @type {boolean}\r\n         */\r\n        this.isMoving = false\r\n        /** \r\n         * The X cordinate of this atom now\r\n         * @type {number}\r\n         */\r\n        this.x = 0\r\n        /** \r\n         * The Y cordinate of this atom now\r\n         * @type {number}\r\n         */\r\n        this.y = 0\r\n        /** \r\n         * A warning message displayed next to the atom. Put text in here to have a warning automatically show up. Cleared each time the output is regenerated.\r\n         * @type {string}\r\n         */\r\n        this.alertMessage = ''\r\n        /** \r\n         * A flag to indicate if the atom is currently computing a new output. Turns the molecule blue.\r\n         * @type {boolean}\r\n         */\r\n        this.processing = false\r\n        \r\n\r\n        for(var key in values) {\r\n            /** \r\n             * Assign each of the values in values as this.value\r\n             */\r\n            this[key] = values[key]\r\n        }\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Applies each of the passed values to this as this.x\r\n     * @param {object} values - A list of values to set\r\n     */ \r\n    setValues(values){\r\n        //Assign the object to have the passed in values\r\n        \r\n        for(var key in values) {\r\n            this[key] = values[key]\r\n        }\r\n        \r\n        if (typeof this.ioValues !== 'undefined') {\r\n            this.ioValues.forEach(ioValue => { //for each saved value\r\n                this.inputs.forEach(io => {  //Find the matching IO and set it to be the saved value\r\n                    if(ioValue.name == io.name && io.type == 'input'){\r\n                        io.setValue(ioValue.ioValue)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Draws the atom on the screen\r\n     */ \r\n    draw() {   \r\n        this.inputs.forEach(child => {\r\n            child.draw()       \r\n        })\r\n      \r\n        if(this.processing){\r\n            GlobalVariables.c.fillStyle = 'blue'\r\n        }else{\r\n            GlobalVariables.c.fillStyle = this.color\r\n        }\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.font = '10px Work Sans'\r\n\r\n        //make it impossible to draw atoms too close to the edge\r\n        //not sure what x left margin should be because if it's too close it would cover expanded text\r\n        var canvasFlow = document.querySelector('#flow-canvas')\r\n        if (this.x < this.radius){\r\n            this.x = this.radius\r\n        }\r\n        else if (this.y<this.radius){\r\n            this.y = this.radius \r\n        }\r\n        else if (this.x + this.radius > canvasFlow.width/GlobalVariables.scale1){\r\n            this.x = canvasFlow.width/GlobalVariables.scale1 - this.radius\r\n        }\r\n        else if (this.y + this.radius > canvasFlow.height/GlobalVariables.scale1){\r\n            this.y = canvasFlow.height/GlobalVariables.scale1 - this.radius\r\n        }\r\n        GlobalVariables.c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false)\r\n        GlobalVariables.c.textAlign = 'start' \r\n        GlobalVariables.c.fillText(this.name, this.x + this.radius, this.y-this.radius)\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.strokeStyle = this.strokeColor\r\n        GlobalVariables.c.lineWidth = 1\r\n        GlobalVariables.c.stroke()\r\n        GlobalVariables.c.closePath()\r\n      \r\n        if (this.alertMessage.length > 0){\r\n            //Draw Alert block  \r\n            GlobalVariables.c.beginPath()\r\n            const padding = 10\r\n            GlobalVariables.c.fillStyle = 'red'\r\n            GlobalVariables.c.rect(\r\n                this.x + this.radius - padding/2, \r\n                this.y - this.radius + padding/2, \r\n                GlobalVariables.c.measureText(this.alertMessage).width + padding, \r\n                - (parseInt(GlobalVariables.c.font) + padding))\r\n            GlobalVariables.c.fill()\r\n            GlobalVariables.c.strokeStyle = 'black'\r\n            GlobalVariables.c.lineWidth = 1\r\n            GlobalVariables.c.stroke()\r\n            GlobalVariables.c.closePath()\r\n\r\n            GlobalVariables.c.beginPath()\r\n            GlobalVariables.c.fillStyle = 'black'\r\n            GlobalVariables.c.fillText(this.alertMessage, this.x + this.radius, this.y - this.radius) \r\n            GlobalVariables.c.closePath()\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Adds a new attachment point to this atom\r\n     * @param {boolean} type - The type of the IO (input or output)\r\n     * @param {string} name - The name of the new attachment point\r\n     * @param {object} target - The attom to attach the new attachment point to. Should we force this to always be this one?\r\n     * @param {string} valueType - Describes the type of value the input is expecting options are number, geometry, array\r\n     * @param {object} defaultValue - The default value to be used when the value is not yet set\r\n     */ \r\n    addIO(type, name, target, valueType, defaultValue){\r\n        \r\n        if(target.inputs.find(o => (o.name === name && o.type === type))== undefined){ //Check to make sure there isn't already an IO with the same type and name\r\n            //compute the baseline offset from parent node\r\n            var offset\r\n            if (type == 'input'){\r\n                offset = -1* target.scaledRadius\r\n            }\r\n            else{\r\n                offset = target.scaledRadius\r\n            }\r\n            var newAp = new AttachmentPoint({\r\n                parentMolecule: target,\r\n                defaultOffsetX: offset,\r\n                defaultOffsetY: 0,\r\n                type: type,\r\n                valueType: valueType,\r\n                name: name,\r\n                value: defaultValue,\r\n                defaultValue: defaultValue,\r\n                uniqueID: GlobalVariables.generateUniqueID(),\r\n                atomType: 'AttachmentPoint',\r\n                ready: !GlobalVariables.evalLock\r\n            })\r\n            \r\n            if(type == 'input'){\r\n                target.inputs.push(newAp)\r\n            }else{\r\n                target.output = newAp\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Removes an attachment point from an atom.\r\n     * @param {boolean} type - The type of the IO (input or output).\r\n     * @param {string} name - The name of the new attachment point.\r\n     * @param {object} target - The attom which the attachment point is attached to. Should this be forced to be this.?\r\n     */ \r\n    removeIO(type, name, target){\r\n        //Remove the target IO attachment point\r\n        \r\n        target.inputs.forEach(io => {\r\n            if(io.name == name && io.type == type){\r\n                io.deleteSelf()\r\n                target.inputs.splice(target.inputs.indexOf(io),1)\r\n            }\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Set an alert to display next to the atom.\r\n     * @param {string} message - The message to display.\r\n     */ \r\n    setAlert(message){\r\n        this.color = 'orange'\r\n        this.alertMessage = String(message)\r\n\r\n    }\r\n    \r\n    /**\r\n     * Clears the alert message attached to this atom.\r\n     */ \r\n    clearAlert(){\r\n        this.color = this.defaultColor\r\n        this.alertMessage = ''\r\n    }\r\n    \r\n    /**\r\n     * Set the atom's response to a mouse click. This usually means selecting the atom and displaying it's contents in 3D\r\n     * @param {number} x - The X cordinate of the click\r\n     * @param {number} y - The Y cordinate of the click\r\n     * @param {boolean} clickProcessed - A flag to indicate if the click has already been processed\r\n     */ \r\n    clickDown(x,y, clickProcessed){\r\n        //Returns true if something was done with the click\r\n        \r\n        this.inputs.forEach(child => {\r\n            if(child.clickDown(x,y, clickProcessed) == true){\r\n                clickProcessed = true\r\n            }\r\n        })\r\n        if(this.output){\r\n            if(this.output.clickDown(x,y, clickProcessed) == true){\r\n                clickProcessed = true\r\n            }\r\n        }\r\n        \r\n        //If none of the inputs processed the click see if the atom should, if not clicked, then deselect\r\n        if(!clickProcessed && GlobalVariables.distBetweenPoints(x, this.x, y, this.y) < this.radius){\r\n            this.color = this.selectedColor\r\n            this.isMoving = true\r\n            this.selected = true\r\n            this.strokeColor = this.defaultColor\r\n            this.updateSidebar()\r\n            this.sendToRender()\r\n            clickProcessed = true\r\n        }\r\n        else{\r\n            this.color = this.defaultColor\r\n            this.strokeColor = this.selectedColor\r\n            this.selected = false\r\n        }\r\n        \r\n        return clickProcessed \r\n    }\r\n\r\n    /**\r\n     * Set the atom's response to a mouse double click. By default this isn't to do anything other than mark the double click as handled.\r\n     * @param {number} x - The X cordinate of the click\r\n     * @param {number} y - The Y cordinate of the click\r\n     */ \r\n    doubleClick(x,y){\r\n        //returns true if something was done with the click\r\n        \r\n        \r\n        var clickProcessed = false\r\n        \r\n        var distFromClick = GlobalVariables.distBetweenPoints(x, this.x, y, this.y)\r\n        \r\n        if (distFromClick < this.x){\r\n            clickProcessed = true\r\n        }\r\n        \r\n        return clickProcessed \r\n    }\r\n\r\n    /**\r\n     * Set the atom's response to a mouse click up. If the atom is moving this makes it stop moving.\r\n     * @param {number} x - The X cordinate of the click\r\n     * @param {number} y - The Y cordinate of the click\r\n     */ \r\n    clickUp(x,y){\r\n        this.isMoving = false\r\n        \r\n        this.inputs.forEach(child => {\r\n            child.clickUp(x,y)     \r\n        })\r\n        if(this.output){\r\n            this.output.clickUp(x,y)\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Set the atom's response to a mouse click and drag. Moves the atom around the screen.\r\n     * @param {number} x - The X cordinate of the click\r\n     * @param {number} y - The Y cordinate of the click\r\n     */ \r\n    clickMove(x,y){\r\n        if (this.isMoving == true){\r\n            this.x = x\r\n            this.y = y\r\n        }\r\n        \r\n        this.inputs.forEach(child => {\r\n            child.clickMove(x,y)       \r\n        })\r\n        if(this.output){\r\n            this.output.clickMove(x,y)\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Set the atom's response to a key press. Is used to delete the atom if it is selected.\r\n     * @param {string} key - The key which has been pressed.\r\n     */ \r\n    keyPress(key){\r\n        //runs whenever a key is pressed\r\n        if (['Delete', 'Backspace'].includes(key)){\r\n            if(this.selected == true && document.getElementsByTagName('BODY')[0] == document.activeElement){\r\n                //If this atom is selected AND the body is active (meaning we are not typing in a text box)\r\n                this.deleteNode()\r\n            }\r\n        }\r\n        \r\n        this.inputs.forEach(child => {\r\n            child.keyPress(key)\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Updates the side bar to display information about the atom. By default this is just add a title and to let you edit any unconnected inputs.\r\n     */ \r\n    updateSidebar(){\r\n        //updates the sidebar to display information about this node\r\n        \r\n        var valueList = this.initializeSideBar()\r\n        \r\n        //Add options to set all of the inputs\r\n        this.inputs.forEach(input => {\r\n            if(input.type == 'input' && input.valueType != 'geometry' && input.connectors.length == 0){\r\n                this.createEditableValueListItem(valueList,input,'value', input.name, true)\r\n            }\r\n        })\r\n        \r\n        return valueList\r\n    }\r\n    \r\n    /**\r\n     * Initialized the sidebar with a title and create the HTML object.\r\n     */ \r\n    initializeSideBar(){\r\n\r\n        //remove everything in the sideBar now\r\n        let sideBar = document.querySelector('.sideBar')\r\n        while (sideBar.firstChild) {\r\n            sideBar.removeChild(sideBar.firstChild)\r\n        }\r\n\r\n        var name2 = document.createElement('p')\r\n        name2.textContent = this.name\r\n        sideBar.appendChild(name2)\r\n\r\n        //add the name as of project title  -- to the top bar -- permanently\r\n        if (this.atomType == 'Molecule' ){\r\n            let headerBar_title = document.querySelector('#headerBar_title')\r\n            while (headerBar_title.firstChild) {\r\n                headerBar_title.removeChild(headerBar_title.firstChild)\r\n            }\r\n           \r\n            var name1 = document.createElement('p')\r\n            name1.textContent = \"- \" + GlobalVariables.topLevelMolecule.name\r\n            headerBar_title.appendChild(name1)\r\n        }\r\n        \r\n        //Create a list element\r\n        var valueList = document.createElement('ul')\r\n        sideBar.appendChild(valueList)\r\n        valueList.setAttribute('class', 'sidebar-list')\r\n        \r\n        return valueList\r\n    }\r\n    \r\n    /**\r\n     * Delete this atom.\r\n     */ \r\n    deleteNode(){\r\n        //deletes this node and all of it's inputs\r\n        \r\n        this.inputs.forEach(child => {\r\n            child.deleteSelf()       \r\n        })\r\n        if(this.output){\r\n            this.output.deleteSelf()\r\n        }\r\n        \r\n        this.parent.nodesOnTheScreen.splice(this.parent.nodesOnTheScreen.indexOf(this),1) //remove this node from the list\r\n        \r\n        GlobalVariables.currentMolecule.backgroundClick()\r\n    }\r\n    \r\n    /**\r\n     * Runs with each frame to draw the atom.\r\n     */ \r\n    update() {\r\n        \r\n        this.inputs.forEach(child => {\r\n            child.update()     \r\n        })\r\n        if(this.output){\r\n            this.output.update()\r\n        }\r\n        \r\n        this.draw()\r\n    }\r\n    \r\n    /**\r\n     * Create an object containing the information about this atom that we want to save. \r\n     */ \r\n    serialize(){\r\n        \r\n        var ioValues = []\r\n        this.inputs.forEach(io => {\r\n            if (typeof io.getValue() == 'number'){\r\n                var saveIO = {\r\n                    name: io.name,\r\n                    ioValue: io.getValue()\r\n                }\r\n                ioValues.push(saveIO)\r\n            }\r\n        })\r\n        \r\n        var object = {\r\n            atomType: this.atomType,\r\n            name: this.name,\r\n            x: this.x,\r\n            y: this.y,\r\n            uniqueID: this.uniqueID,\r\n            ioValues: ioValues\r\n        }\r\n        \r\n        return object\r\n    }\r\n    \r\n    /**\r\n     * Return any contribution from this atom to the README file\r\n     */ \r\n    requestReadme(){\r\n        //request any contributions from this atom to the readme\r\n        \r\n        return []\r\n    }\r\n    \r\n    /**\r\n     * Set's the output value and shows the atom output on the 3D view.\r\n     */ \r\n    updateValue(){\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Displays the atom in 3D and sets the output.\r\n     */ \r\n    displayAndPropogate(){\r\n        //If this atom is selected, send the updated value to the renderer\r\n        if (this.selected){\r\n            this.sendToRender()\r\n        }\r\n        \r\n        //Set the output nodes with name 'geometry' to be the generated code\r\n        if(this.output){\r\n            this.output.setValue(this.value)\r\n            this.output.ready = true\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Calls a worker thread to compute the atom's value.\r\n     */ \r\n    basicThreadValueProcessing(values, key){\r\n        if(!GlobalVariables.evalLock && this.inputs.every(x => x.ready)){\r\n            this.processing = true\r\n            this.clearAlert()\r\n            \r\n            const computeValue = async (values, key) => {\r\n                try{\r\n                    return await GlobalVariables.ask({values: values, key: key})\r\n                }\r\n                catch(err){\r\n                    this.setAlert(err)\r\n                }\r\n            }\r\n            \r\n            computeValue(values, key).then(result => {\r\n                if (result != -1 ){\r\n                    this.value = result\r\n                    this.displayAndPropogate()\r\n                }else{\r\n                    this.setAlert(\"Unable to compute\")\r\n                }\r\n                this.processing = false\r\n            })\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Unlocks the atom by checking to see if it has any upstream components that it should wait for before begining to process.\r\n     */ \r\n    unlock(){\r\n        //Runs right after the loading process to unlock attachment points which have no connectors attached\r\n        this.inputs.forEach(input => {\r\n            if(input.connectors.length == 0){\r\n                input.ready = true\r\n            }\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * This function will trigger the tips of the tree branches to start generating values.\r\n     */ \r\n    beginPropogation(){\r\n        if(this.inputs.every(x => x.connectors.length == 0) || this.inputs.length == 0){ //If this atom has nothing upstream of it, and if it does not trigger propogation from it\r\n            this.updateValue()\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Send the value of this atom to the 3D display.\r\n     */ \r\n    sendToRender(){\r\n        //Send code to JSxCAD to render\r\n        try{\r\n            GlobalVariables.display.writeToDisplay(this.value)\r\n        }\r\n        catch(err){\r\n            this.setAlert(err)    \r\n        }\r\n\r\n    }\r\n    \r\n    /**\r\n     * Find the value of an input for with a given name.\r\n     * @param {string} ioName - The name of the target attachment point.\r\n     */ \r\n    findIOValue(ioName){\r\n        ioName = ioName.split('~').join('')\r\n        var ioValue = null\r\n        \r\n        this.inputs.forEach(child => {\r\n            if(child.name == ioName && child.type == 'input'){\r\n                ioValue = child.getValue()\r\n            }\r\n        })\r\n        \r\n        return ioValue\r\n    }\r\n    \r\n    /**\r\n     * Creates an editable HTML item to set the value of an object element. Used in the sidebar.\r\n     * @param {object} list - The HTML object to attach the new item to.\r\n     * @param {object} object - The object with the element we are editing.\r\n     * @param {string} key - The key of the element to edit.\r\n     * @param {string} label - The label to display next to the editable value.\r\n     * @param {boolean} resultShouldBeNumber - A flag to indicate if the input should be converted to a number.\r\n     * @param {object} callBack - Optional. A function to call with the new value when the value changes.\r\n     */ \r\n    createEditableValueListItem(list,object,key, label, resultShouldBeNumber, callBack){\r\n        var listElement = document.createElement('LI')\r\n        list.appendChild(listElement)\r\n        \r\n        \r\n        //Div which contains the entire element\r\n        var div = document.createElement('div')\r\n        listElement.appendChild(div)\r\n        div.setAttribute('class', 'sidebar-item sidebar-editable-div')\r\n        \r\n        //Left div which displays the label\r\n        var labelDiv = document.createElement('label')\r\n        div.appendChild(labelDiv)\r\n        var labelText = document.createTextNode(label + ':')\r\n        labelDiv.appendChild(labelText)\r\n        labelDiv.setAttribute('class', 'sidebar-subitem label-item')\r\n        \r\n        \r\n        //Right div which is editable and displays the value\r\n        var valueTextDiv = document.createElement('span')\r\n        labelDiv.appendChild(valueTextDiv)\r\n        var valueText = document.createTextNode(object[key])\r\n        valueTextDiv.appendChild(valueText)\r\n        valueTextDiv.setAttribute('contenteditable', 'true')\r\n        valueTextDiv.setAttribute('class', 'editing-item')\r\n        var thisID = label+GlobalVariables.generateUniqueID()\r\n        valueTextDiv.setAttribute('id', thisID)\r\n        \r\n        \r\n        document.getElementById(thisID).addEventListener('focusout', () => {\r\n            var valueInBox = document.getElementById(thisID).textContent\r\n            if(resultShouldBeNumber){\r\n                valueInBox = GlobalVariables.limitedEvaluate(valueInBox)\r\n            }\r\n            \r\n            //If the target is an attachmentPoint then call the setter function\r\n            if(object instanceof AttachmentPoint){\r\n                object.setValue(valueInBox)\r\n            }\r\n            else{\r\n                object[key] = valueInBox\r\n                callBack(valueInBox)\r\n            }\r\n        })\r\n        \r\n        //prevent the return key from being used when editing a value\r\n        document.getElementById(thisID).addEventListener('keypress', function(evt) {\r\n            if (evt.which === 13) {\r\n                evt.preventDefault()\r\n                document.getElementById(thisID).blur()  //shift focus away if someone presses enter\r\n            }\r\n        })\r\n\r\n    }\r\n    \r\n    /**\r\n     * Creates an non-editable HTML item to set the value of an object element. Used in the sidebar.\r\n     * @param {object} list - The HTML object to attach the new item to.\r\n     * @param {object} object - The object with the element we are displaying.\r\n     * @param {string} key - The key of the element to display.\r\n     * @param {string} label - The label to display next to the displayed value.\r\n     */ \r\n    createNonEditableValueListItem(list,object,key, label){\r\n        var listElement = document.createElement('LI')\r\n        list.appendChild(listElement)\r\n        \r\n        \r\n        //Div which contains the entire element\r\n        var div = document.createElement('div')\r\n        listElement.appendChild(div)\r\n        div.setAttribute('class', 'sidebar-item sidebar-editable-div')\r\n        \r\n        //Left div which displays the label\r\n        var labelDiv = document.createElement('div')\r\n        div.appendChild(labelDiv)\r\n        var labelText = document.createTextNode(label + ':')\r\n        labelDiv.appendChild(labelText)\r\n        labelDiv.setAttribute('class', 'sidebar-subitem label-item')\r\n        \r\n        \r\n        //Right div which is editable and displays the value\r\n        var valueTextDiv = document.createElement('div')\r\n        div.appendChild(valueTextDiv)\r\n        var valueText = document.createTextNode(object[key])\r\n        valueTextDiv.appendChild(valueText)\r\n        valueTextDiv.setAttribute('contenteditable', 'false')\r\n        valueTextDiv.setAttribute('class', 'sidebar-subitem noediting-item')\r\n        var thisID = label+GlobalVariables.generateUniqueID()\r\n        valueTextDiv.setAttribute('id', thisID)\r\n        \r\n\r\n    }\r\n    \r\n    /**\r\n     * Creates dropdown with multiple options to select. Used in the sidebar.\r\n     * @param {object} list - The HTML object to attach the new item to.\r\n     * @param {object} parent - The parent which has the function to call on the change...this should really be done with a callback function.\r\n     * @param {array} options - A list of options to display in the drop down.\r\n     * @param {number} selectedOption - The zero referenced index of the selected option.\r\n     * @param {string} description - A description of what the dropdown does.\r\n     */ \r\n    createDropDown(list,parent,options,selectedOption, description, callback){\r\n        var listElement = document.createElement('LI')\r\n        list.appendChild(listElement)\r\n        \r\n        \r\n        //Div which contains the entire element\r\n        var div = document.createElement('div')\r\n        listElement.appendChild(div)\r\n        div.setAttribute('class', 'sidebar-item')\r\n        \r\n        //Left div which displays the label\r\n        var labelDiv = document.createElement('div')\r\n        div.appendChild(labelDiv)\r\n        var labelText = document.createTextNode(description)\r\n        labelDiv.appendChild(labelText)\r\n        labelDiv.setAttribute('class', 'sidebar-subitem')\r\n        \r\n        \r\n        //Right div which is editable and displays the value\r\n        var valueTextDiv = document.createElement('div')\r\n        div.appendChild(valueTextDiv)\r\n        var dropDown = document.createElement('select')\r\n        options.forEach(option => {\r\n            var op = new Option()\r\n            op.value = options.findIndex(thisOption => thisOption === option)\r\n            op.text = option\r\n            dropDown.options.add(op)\r\n        })\r\n        valueTextDiv.appendChild(dropDown)\r\n        valueTextDiv.setAttribute('class', 'sidebar-subitem')\r\n        \r\n        dropDown.selectedIndex = selectedOption //display the current selection\r\n        \r\n        dropDown.addEventListener(\r\n            'change',\r\n            function() { callback(dropDown.value) },\r\n            false\r\n        )\r\n    }\r\n    \r\n    /**\r\n     * Creates button. Used in the sidebar.\r\n     * @param {object} list - The HTML object to attach the new item to.\r\n     * @param {object} parent - The parent which has the function to call on the change...this should really be done with a callback function.\r\n     * @param {string} buttonText - The text on the button.\r\n     * @param {object} functionToCall - The function to call when the button is pressed.\r\n     */ \r\n    createButton(list,parent,buttonText,functionToCall){\r\n        var listElement = document.createElement('LI')\r\n        list.appendChild(listElement)\r\n        \r\n        \r\n        //Div which contains the entire element\r\n        var div = document.createElement('div')\r\n        listElement.appendChild(div)\r\n        div.setAttribute('class', 'sidebar-item-no-hover')\r\n        \r\n        \r\n        //Right div which is button\r\n        var valueTextDiv = document.createElement('div')\r\n        div.appendChild(valueTextDiv)\r\n        var button = document.createElement('button')\r\n        var buttonTextNode = document.createTextNode(buttonText)\r\n        button.setAttribute('class', 'sidebar_button')\r\n        button.appendChild(buttonTextNode)\r\n        valueTextDiv.appendChild(button)\r\n        valueTextDiv.setAttribute('class', 'sidebar-subitem')\r\n        \r\n        button.addEventListener(\r\n            'mousedown',\r\n            function() { functionToCall() } ,\r\n            false\r\n        )\r\n    }\r\n    \r\n    /**\r\n     * Creates button. Used in the sidebar.\r\n     * @param {object} list - The HTML object to attach the new item to.\r\n     * @param {object} parent - The parent which has the function to call on the change...this should really be done with a callback function.\r\n     * @param {string} buttonText - The text on the button.\r\n     * @param {object} functionToCall - The function to call when the button is pressed.\r\n     */ \r\n    createCheckbox(sideBar,text,isChecked,callback){\r\n        var gridDiv = document.createElement('div')\r\n        sideBar.appendChild(gridDiv)\r\n        gridDiv.setAttribute('id', 'gridDiv')\r\n        var gridCheck = document.createElement('input')\r\n        gridDiv.appendChild(gridCheck)\r\n        gridCheck.setAttribute('type', 'checkbox')\r\n        gridCheck.setAttribute('id', 'gridCheck')\r\n        \r\n        if (isChecked){\r\n            gridCheck.setAttribute('checked', 'true')\r\n        }\r\n        \r\n\r\n        var gridCheckLabel = document.createElement('label')\r\n        gridDiv.appendChild(gridCheckLabel)\r\n        gridCheckLabel.setAttribute('for', 'gridCheck')\r\n        gridCheckLabel.setAttribute('style', 'margin-right:1em;')\r\n        gridCheckLabel.textContent = text\r\n\r\n        gridCheck.addEventListener('change', event => {\r\n            callback(event)\r\n        })\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/prototypes/atom.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 425,
    "kind": "class",
    "name": "Atom",
    "memberof": "src/js/prototypes/atom.js",
    "static": true,
    "longname": "src/js/prototypes/atom.js~Atom",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/prototypes/atom.js",
    "importStyle": "Atom",
    "description": "This class is the prototype for all atoms.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 426,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 427,
    "kind": "member",
    "name": "inputs",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#inputs",
    "access": "public",
    "description": "An array of all of the input attachment points connected to this atom",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 428,
    "kind": "member",
    "name": "output",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#output",
    "access": "public",
    "description": "This atom's output attachment point if it has one",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 429,
    "kind": "member",
    "name": "x",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#x",
    "access": "public",
    "description": "The X cordinate of this atom",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 430,
    "kind": "member",
    "name": "y",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#y",
    "access": "public",
    "description": "The Y cordinate of this atom",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 431,
    "kind": "member",
    "name": "radius",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#radius",
    "access": "public",
    "description": "This atom's radius as displayed on the screen",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 432,
    "kind": "member",
    "name": "defaultColor",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#defaultColor",
    "access": "public",
    "description": "This atom's default color (ie when not selected or processing)",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 433,
    "kind": "member",
    "name": "selectedColor",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#selectedColor",
    "access": "public",
    "description": "The color to use for strokes when selected",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 434,
    "kind": "member",
    "name": "strokeColor",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#strokeColor",
    "access": "public",
    "description": "The color currently used for strokes",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 435,
    "kind": "member",
    "name": "selected",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#selected",
    "access": "public",
    "description": "A flag to indicate if this atom is curently selected",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 436,
    "kind": "member",
    "name": "color",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#color",
    "access": "public",
    "description": "This atom's curent color",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 437,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 438,
    "kind": "member",
    "name": "parentMolecule",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#parentMolecule",
    "access": "public",
    "description": "This atom's parent, usually the molecule which contains this atom",
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 439,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#value",
    "access": "public",
    "description": "This atom's value...Is can this be done away with? Are we basically storing the value in the output now?",
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 440,
    "kind": "member",
    "name": "isMoving",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#isMoving",
    "access": "public",
    "description": "A flag to indicate if this atom is currently being draged on the screen.",
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 443,
    "kind": "member",
    "name": "alertMessage",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#alertMessage",
    "access": "public",
    "description": "A warning message displayed next to the atom. Put text in here to have a warning automatically show up. Cleared each time the output is regenerated.",
    "lineNumber": 104,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 444,
    "kind": "member",
    "name": "processing",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#processing",
    "access": "public",
    "description": "A flag to indicate if the atom is currently computing a new output. Turns the molecule blue.",
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 445,
    "kind": "member",
    "name": "[key]",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#[key]",
    "access": "public",
    "description": "Assign each of the values in values as this.value",
    "lineNumber": 116,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "setValues",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#setValues",
    "access": "public",
    "description": "Applies each of the passed values to this as this.x",
    "lineNumber": 125,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "A list of values to set"
      }
    ],
    "return": null
  },
  {
    "__docId__": 448,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#draw",
    "access": "public",
    "description": "Draws the atom on the screen",
    "lineNumber": 146,
    "params": [],
    "return": null
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "addIO",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#addIO",
    "access": "public",
    "description": "Adds a new attachment point to this atom",
    "lineNumber": 214,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of the IO (input or output)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the new attachment point"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The attom to attach the new attachment point to. Should we force this to always be this one?"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "valueType",
        "description": "Describes the type of value the input is expecting options are number, geometry, array"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultValue",
        "description": "The default value to be used when the value is not yet set"
      }
    ],
    "return": null
  },
  {
    "__docId__": 454,
    "kind": "method",
    "name": "removeIO",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#removeIO",
    "access": "public",
    "description": "Removes an attachment point from an atom.",
    "lineNumber": 253,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of the IO (input or output)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the new attachment point."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The attom which the attachment point is attached to. Should this be forced to be this.?"
      }
    ],
    "return": null
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "setAlert",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#setAlert",
    "access": "public",
    "description": "Set an alert to display next to the atom.",
    "lineNumber": 268,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to display."
      }
    ],
    "return": null
  },
  {
    "__docId__": 458,
    "kind": "method",
    "name": "clearAlert",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#clearAlert",
    "access": "public",
    "description": "Clears the alert message attached to this atom.",
    "lineNumber": 277,
    "params": [],
    "return": null
  },
  {
    "__docId__": 461,
    "kind": "method",
    "name": "clickDown",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#clickDown",
    "access": "public",
    "description": "Set the atom's response to a mouse click. This usually means selecting the atom and displaying it's contents in 3D",
    "lineNumber": 288,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The X cordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The Y cordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "clickProcessed",
        "description": "A flag to indicate if the click has already been processed"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 469,
    "kind": "method",
    "name": "doubleClick",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#doubleClick",
    "access": "public",
    "description": "Set the atom's response to a mouse double click. By default this isn't to do anything other than mark the double click as handled.",
    "lineNumber": 326,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The X cordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The Y cordinate of the click"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 470,
    "kind": "method",
    "name": "clickUp",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#clickUp",
    "access": "public",
    "description": "Set the atom's response to a mouse click up. If the atom is moving this makes it stop moving.",
    "lineNumber": 346,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The X cordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The Y cordinate of the click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 472,
    "kind": "method",
    "name": "clickMove",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#clickMove",
    "access": "public",
    "description": "Set the atom's response to a mouse click and drag. Moves the atom around the screen.",
    "lineNumber": 362,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The X cordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The Y cordinate of the click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 475,
    "kind": "method",
    "name": "keyPress",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#keyPress",
    "access": "public",
    "description": "Set the atom's response to a key press. Is used to delete the atom if it is selected.",
    "lineNumber": 380,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key which has been pressed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 476,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#updateSidebar",
    "access": "public",
    "description": "Updates the side bar to display information about the atom. By default this is just add a title and to let you edit any unconnected inputs.",
    "lineNumber": 397,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 477,
    "kind": "method",
    "name": "initializeSideBar",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#initializeSideBar",
    "access": "public",
    "description": "Initialized the sidebar with a title and create the HTML object.",
    "lineNumber": 415,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 478,
    "kind": "method",
    "name": "deleteNode",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#deleteNode",
    "access": "public",
    "description": "Delete this atom.",
    "lineNumber": 450,
    "params": [],
    "return": null
  },
  {
    "__docId__": 479,
    "kind": "method",
    "name": "update",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#update",
    "access": "public",
    "description": "Runs with each frame to draw the atom.",
    "lineNumber": 468,
    "params": [],
    "return": null
  },
  {
    "__docId__": 480,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#serialize",
    "access": "public",
    "description": "Create an object containing the information about this atom that we want to save. ",
    "lineNumber": 483,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 481,
    "kind": "method",
    "name": "requestReadme",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#requestReadme",
    "access": "public",
    "description": "Return any contribution from this atom to the README file",
    "lineNumber": 511,
    "params": [],
    "return": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 482,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#updateValue",
    "access": "public",
    "description": "Set's the output value and shows the atom output on the 3D view.",
    "lineNumber": 520,
    "params": [],
    "return": null
  },
  {
    "__docId__": 483,
    "kind": "method",
    "name": "displayAndPropogate",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#displayAndPropogate",
    "access": "public",
    "description": "Displays the atom in 3D and sets the output.",
    "lineNumber": 527,
    "params": [],
    "return": null
  },
  {
    "__docId__": 484,
    "kind": "method",
    "name": "basicThreadValueProcessing",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#basicThreadValueProcessing",
    "access": "public",
    "description": "Calls a worker thread to compute the atom's value.",
    "lineNumber": 543,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 488,
    "kind": "method",
    "name": "unlock",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#unlock",
    "access": "public",
    "description": "Unlocks the atom by checking to see if it has any upstream components that it should wait for before begining to process.",
    "lineNumber": 572,
    "params": [],
    "return": null
  },
  {
    "__docId__": 489,
    "kind": "method",
    "name": "beginPropogation",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#beginPropogation",
    "access": "public",
    "description": "This function will trigger the tips of the tree branches to start generating values.",
    "lineNumber": 584,
    "params": [],
    "return": null
  },
  {
    "__docId__": 490,
    "kind": "method",
    "name": "sendToRender",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#sendToRender",
    "access": "public",
    "description": "Send the value of this atom to the 3D display.",
    "lineNumber": 593,
    "params": [],
    "return": null
  },
  {
    "__docId__": 491,
    "kind": "method",
    "name": "findIOValue",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#findIOValue",
    "access": "public",
    "description": "Find the value of an input for with a given name.",
    "lineNumber": 608,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "ioName",
        "description": "The name of the target attachment point."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 492,
    "kind": "method",
    "name": "createEditableValueListItem",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#createEditableValueListItem",
    "access": "public",
    "description": "Creates an editable HTML item to set the value of an object element. Used in the sidebar.",
    "lineNumber": 630,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "The HTML object to attach the new item to."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "The object with the element we are editing."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key of the element to edit."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "The label to display next to the editable value."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "resultShouldBeNumber",
        "description": "A flag to indicate if the input should be converted to a number."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "callBack",
        "description": "Optional. A function to call with the new value when the value changes."
      }
    ],
    "return": null
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "createNonEditableValueListItem",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#createNonEditableValueListItem",
    "access": "public",
    "description": "Creates an non-editable HTML item to set the value of an object element. Used in the sidebar.",
    "lineNumber": 692,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "The HTML object to attach the new item to."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "The object with the element we are displaying."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key of the element to display."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "The label to display next to the displayed value."
      }
    ],
    "return": null
  },
  {
    "__docId__": 494,
    "kind": "method",
    "name": "createDropDown",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#createDropDown",
    "access": "public",
    "description": "Creates dropdown with multiple options to select. Used in the sidebar.",
    "lineNumber": 731,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "The HTML object to attach the new item to."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": "The parent which has the function to call on the change...this should really be done with a callback function."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "A list of options to display in the drop down."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedOption",
        "description": "The zero referenced index of the selected option."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "A description of what the dropdown does."
      }
    ],
    "return": null
  },
  {
    "__docId__": 495,
    "kind": "method",
    "name": "createButton",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#createButton",
    "access": "public",
    "description": "Creates button. Used in the sidebar.",
    "lineNumber": 778,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "The HTML object to attach the new item to."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": "The parent which has the function to call on the change...this should really be done with a callback function."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "buttonText",
        "description": "The text on the button."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "functionToCall",
        "description": "The function to call when the button is pressed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 496,
    "kind": "method",
    "name": "createCheckbox",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#createCheckbox",
    "access": "public",
    "description": "Creates button. Used in the sidebar.",
    "lineNumber": 813,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "The HTML object to attach the new item to."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": "The parent which has the function to call on the change...this should really be done with a callback function."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "buttonText",
        "description": "The text on the button."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "functionToCall",
        "description": "The function to call when the button is pressed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 497,
    "kind": "file",
    "name": "src/js/prototypes/attachmentpoint.js",
    "content": "import Connector from './connector'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * This class creates a new attachmentPoint which are the input and output blobs on Atoms\r\n */\r\nexport default class AttachmentPoint {\r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        /** \r\n         * This atom's default radius (non hover)\r\n         * @type {number}\r\n         */\r\n        this.defaultRadius = 8\r\n        /** \r\n         * A flag to indicate if this attachmet point is currently expanded.\r\n         * @type {boolean}\r\n         */\r\n        this.expandedRadius = false\r\n        /** \r\n         * This atom's current radius as displayed.\r\n         * @type {number}\r\n         */\r\n        this.radius = 8\r\n        \r\n        /** \r\n         * How close does the mouse need to get to expand the atom\r\n         * @type {number}\r\n         */\r\n        this.hoverDetectRadius = 8\r\n        /** \r\n         * When the mouse is hovering where should the AP move in X\r\n         * @type {number}\r\n         */\r\n        this.hoverOffsetX = 0\r\n        /** \r\n         * When the mouse is hovering where should the AP move in Y\r\n         * @type {number}\r\n         */\r\n        this.hoverOffsetY = 0\r\n        /** \r\n         * A unique identifying number for this attachment point\r\n         * @type {number}\r\n         */\r\n        this.uniqueID = 0\r\n        /** \r\n         * The default offset position in X referenced to the center of the parent atom.\r\n         * @type {number}\r\n         */\r\n        this.defaultOffsetX = 0\r\n        /** \r\n         * The default offset position in Y referenced to the center of the parent atom.\r\n         * @type {number}\r\n         */\r\n        this.defaultOffsetY = 0\r\n        /** \r\n         * The current offset position in X referenced to the center of the parent atom.\r\n         * @type {number}\r\n         */\r\n        this.offsetX = 0\r\n        /** \r\n         * The current offset position in Y referenced to the center of the parent atom.\r\n         * @type {number}\r\n         */\r\n        this.offsetY = 0\r\n        /** \r\n         * A flag to determine if the hover text is shown next to the attachment point.\r\n         * @type {boolean}\r\n         */\r\n        this.showHoverText = false\r\n        /** \r\n         * The attachment point type.\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'AttachmentPoint'\r\n        \r\n        /** \r\n         * The attachment point value type. Options are number, geometry, array.\r\n         * @type {string}\r\n         */\r\n        this.valueType = 'number'\r\n        /** \r\n         * The attachment point type. Options are input, output.\r\n         * @type {string}\r\n         */\r\n        this.type = 'output'\r\n        /** \r\n         * The attachment point current value. Default is 10.\r\n         * @type {number}\r\n         */\r\n        this.value = 10\r\n        /** \r\n         * A flag to indicate if the attachment point is currently ready. Used to order initilization when program is loaded.\r\n         * @type {string}\r\n         */\r\n        this.ready = false\r\n        /** \r\n         * A list of all of the connectors attached to this attachmet point\r\n         * @type {object}\r\n         */\r\n        this.connectors = []\r\n        \r\n        this.offsetX = this.defaultOffsetX\r\n        this.offsetY = this.defaultOffsetY\r\n        \r\n        for(var key in values) {\r\n            /**\r\n             * Assign values in values as this.x\r\n             */\r\n            this[key] = values[key]\r\n        }\r\n        \r\n        this.clickMove(0,0) //trigger a refresh to get all the current values\r\n    }\r\n    \r\n    /**\r\n     * Draws the attachment point on the screen. Called with each frame.\r\n     */ \r\n    draw() {\r\n\r\n        this.defaultRadius = this.radius\r\n        this.radius = this.parentMolecule.radius/2.2\r\n        this.hoverDetectRadius = this.parentMolecule.radius\r\n\r\n        if (this.expandedRadius){\r\n            this.radius = this.parentMolecule.radius/1.6\r\n        }\r\n        if(this.parentMolecule.inputs.length < 2 && this.type == 'input'){\r\n            /**\r\n             * The x cordinate of the attachment point.\r\n             */\r\n            this.x = this.parentMolecule.x-this.parentMolecule.radius\r\n            /**\r\n             * The y cordinate of the attachment point.\r\n             */\r\n            this.y = this.parentMolecule.y\r\n        }    \r\n        else if(this.parentMolecule.inputs.length < 2 && this.type == 'output'){\r\n            this.x= this.parentMolecule.x+this.parentMolecule.radius\r\n            this.y= this.parentMolecule.y\r\n        }                 \r\n\r\n\r\n        var txt = this.name\r\n        var textWidth = GlobalVariables.c.measureText(txt).width\r\n        GlobalVariables.c.font = '10px Work Sans'\r\n\r\n        var bubbleColor = '#008080'\r\n        var scaleRadiusDown = this.radius*.7\r\n        var halfRadius = this.radius*.5\r\n\r\n        \r\n        if (this.showHoverText){\r\n            if(this.type == 'input'){\r\n               \r\n                \r\n                GlobalVariables.c.globalCompositeOperation='destination-over'\r\n                GlobalVariables.c.beginPath()\r\n\r\n                if (this.name === 'geometry'){\r\n                    GlobalVariables.c.fillStyle = this.parentMolecule.selectedColor   \r\n                }\r\n                else{\r\n                    GlobalVariables.c.fillStyle = bubbleColor\r\n                }\r\n                if(this.radius == this.defaultRadius){\r\n                    GlobalVariables.c.rect(this.x - textWidth - this.radius - halfRadius, this.y - this.radius, textWidth + this.radius + halfRadius , this.radius*2)   \r\n                    GlobalVariables.c.arc(this.x - textWidth - this.radius - halfRadius, this.y, this.radius, 0, Math.PI * 2, false)\r\n                }\r\n            \r\n                GlobalVariables.c.fill()\r\n                \r\n                \r\n                GlobalVariables.c.globalCompositeOperation='source-over'\r\n                GlobalVariables.c.beginPath()\r\n                GlobalVariables.c.fillStyle = this.parentMolecule.defaultColor\r\n                GlobalVariables.c.textAlign = 'end'\r\n                GlobalVariables.c.fillText(this.name, this.x - (this.radius + 3), this.y+2)\r\n                GlobalVariables.c.fill()\r\n                GlobalVariables.c.closePath()\r\n            }\r\n            else{\r\n\r\n                GlobalVariables.c.beginPath()\r\n                    \r\n                if (this.name === 'geometry'){\r\n                    GlobalVariables.c.fillStyle = this.parentMolecule.selectedColor   \r\n                }\r\n                else{\r\n                    GlobalVariables.c.fillStyle = bubbleColor\r\n                }\r\n\r\n                GlobalVariables.c.rect(this.x, this.y - scaleRadiusDown, textWidth + this.radius + halfRadius, scaleRadiusDown*2)\r\n                GlobalVariables.c.arc(this.x + textWidth + this.radius + halfRadius, this.y, scaleRadiusDown, 0, Math.PI * 2, false)\r\n                GlobalVariables.c.fill()\r\n                GlobalVariables.c.closePath()\r\n                GlobalVariables.c.beginPath()\r\n                GlobalVariables.c.fillStyle = this.parentMolecule.defaultColor\r\n                GlobalVariables.c.textAlign = 'start' \r\n                GlobalVariables.c.fillText(this.name, (this.x + halfRadius) + (this.radius + 3), this.y+2)\r\n                GlobalVariables.c.fill()\r\n                GlobalVariables.c.closePath()\r\n            }\r\n\r\n        }\r\n \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = this.parentMolecule.color\r\n        GlobalVariables.c.strokeStyle = this.parentMolecule.strokeColor\r\n        GlobalVariables.c.lineWidth = 1\r\n        GlobalVariables.c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false)\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.stroke()\r\n        GlobalVariables.c.closePath()  \r\n\r\n        if (this.defaultRadius != this.radius){\r\n            if (this.type == 'output'){     \r\n                this.offsetX = this.parentMolecule.radius\r\n            }\r\n            else{\r\n                this.offsetX = -1* this.parentMolecule.radius\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Handles mouse click down. If the click is inside the AP it's connectors are selected if it is an input.\r\n     * @param {number} x - The x cordinate of the click\r\n     * @param {number} y - The y cordinate of the click\r\n     * @param {boolean} clickProcessed - Has the click already been handled\r\n     */ \r\n    clickDown(x,y, clickProcessed){\r\n        if(GlobalVariables.distBetweenPoints (this.x, x, this.y, y) < this.defaultRadius && !clickProcessed){\r\n            if(this.type == 'output'){                  //begin to extend a connector from this if it is an output\r\n                var connector = new Connector({\r\n                    parentMolecule: this.parentMolecule, \r\n                    attachmentPoint1: this,\r\n                    atomType: 'Connector',\r\n                    isMoving: true\r\n                })\r\n                this.connectors.push(connector)\r\n            }\r\n            \r\n            if(this.type == 'input'){ //connectors can only be selected by clicking on an input\r\n                this.connectors.forEach(connector => {     //select any connectors attached to this node\r\n                    connector.selected = true\r\n                })\r\n            }\r\n            \r\n            return true //indicate that the click was handled by this object\r\n        }\r\n        else{\r\n            if(this.type == 'input'){ //connectors can only be selected by clicking on an input\r\n                this.connectors.forEach(connector => {      //unselect any connectors attached to this node\r\n                    connector.selected = false\r\n                })\r\n            }\r\n            return false //indicate that the click was not handled by this object\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles mouse click up. If the click is inside the AP and a connector is currently extending, then a connection is made\r\n     * @param {number} x - The x cordinate of the click\r\n     * @param {number} y - The y cordinate of the click\r\n     */ \r\n    clickUp(x,y){\r\n        this.connectors.forEach(connector => {\r\n            connector.clickUp(x, y)       \r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Handles mouse click and move to expand the AP. Could this be done with a call to expand out?\r\n     * @param {number} x - The x cordinate of the click\r\n     * @param {number} y - The y cordinate of the click\r\n     */ \r\n    clickMove(x,y){\r\n        \r\n        //expand if touched by mouse\r\n        // var distFromCursor = GlobalVariables.distBetweenPoints (this.x, x, this.y, y);\r\n        var distFromCursorParent = Math.abs(GlobalVariables.distBetweenPoints (this.parentMolecule.x -this.parentMolecule.radius, x, this.parentMolecule.y, y)) \r\n        //If we are close to the attachment point move it to it's hover location to make it accessible\r\n        if (distFromCursorParent < this.parentMolecule.radius*3){\r\n            if (this.type == 'input'){\r\n                this.expandOut(distFromCursorParent)\r\n            }\r\n            this.showHoverText = true\r\n            if (GlobalVariables.distBetweenPoints(this.x, x, this.y, y) < this.radius){\r\n                this.expandedRadius = true    \r\n            }  \r\n            else{\r\n                this.expandedRadius = false      \r\n            }\r\n        }\r\n        else{\r\n            this.reset()\r\n        }\r\n        \r\n        this.connectors.forEach(connector => {\r\n            connector.clickMove(x, y)       \r\n        })\r\n    }\r\n    \r\n    /**\r\n     * I'm not sure what this does. Can it be deleted?\r\n     */ \r\n    reset(){\r\n        if (this.type == 'input'){\r\n            this.offsetX = -1* this.parentMolecule.radius\r\n            this.offsetY = this.defaultOffsetY\r\n        }\r\n        this.showHoverText = false\r\n    }\r\n    \r\n    /**\r\n     * Handles mouse click down. If the click is inside the AP it's connectors are selected if it is an input.\r\n     * @param {number} cursorDistance - The distance the cursor is from the attachment point.\r\n     */ \r\n    expandOut(cursorDistance){\r\n        const inputList = this.parentMolecule.inputs.filter(input => input.type == 'input')\r\n        const attachmentPointNumber = inputList.indexOf(this) \r\n        const anglePerIO = (Math.PI) / (inputList.length + 1)\r\n        // angle correction so that it centers menu adjusting to however many attachment points there are \r\n        const angleCorrection = -Math.PI/2 - anglePerIO\r\n        this.hoverOffsetY = Math.round(1.8 * this.parentMolecule.radius * (Math.sin((attachmentPointNumber * anglePerIO) - angleCorrection))) \r\n        this.hoverOffsetX = Math.round(1.5 * this.parentMolecule.radius * (Math.cos((attachmentPointNumber * anglePerIO) - angleCorrection)))\r\n        this.offsetX = Math.max( this.offsetX, this.hoverOffsetX)\r\n        cursorDistance = Math.max( cursorDistance, 30)\r\n        this.offsetY = Math.min( this.offsetY, -this.hoverOffsetY)\r\n        this.offsetY = Math.max( this.offsetY, this.hoverOffsetY)\r\n        this.offsetX = this.hoverOffsetX * 30/cursorDistance\r\n        this.offsetY = this.hoverOffsetY * 30/cursorDistance\r\n\r\n    }\r\n    \r\n    /**\r\n     * Just passes a key press to the attached connectors. No impact on the connector.\r\n     * @param {string} key - The key which was pressed\r\n     */ \r\n    keyPress(key){\r\n        this.connectors.forEach(connector => {\r\n            connector.keyPress(key)       \r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Delete any connectors attached to this ap\r\n     */ \r\n    deleteSelf(){\r\n        //remove any connectors which were attached to this attachment point\r\n        \r\n        this.connectors.forEach(connector => {\r\n            connector.deleteSelf()       \r\n        })\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Can be called to see if the target cordinates are within this ap. Returns true/false.\r\n     * @param {number} x - The x cordinate of the target\r\n     * @param {number} y - The y cordinate of the target\r\n     */ \r\n    wasConnectionMade(x,y){\r\n        //this function returns itself if the coordinates passed in are within itself\r\n        if (GlobalVariables.distBetweenPoints(this.x, x, this.y, y) < this.radius && this.type == 'input'){  //If we have released the mouse here and this is an input...\r\n        \r\n            if(this.connectors.length > 0){ //Don't accept a second connection to an input\r\n                return false\r\n            }\r\n            else{\r\n                return true\r\n            }\r\n        }\r\n        else{\r\n            return false\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Attaches a new connector to this ap\r\n     * @param {object} connector - The connector to attach\r\n     */ \r\n    attach(connector){\r\n        this.connectors.push(connector)\r\n    }\r\n    \r\n    /**\r\n     * Passes a lock command to the parent molecule, or to the attached connector depending on input/output.\r\n     */ \r\n    lock(){\r\n        if(this.type == 'output'){\r\n            this.connectors.forEach(connector => {\r\n                connector.lock()\r\n            })\r\n        }\r\n        else{\r\n            this.ready = false\r\n            if(this.parentMolecule.output){\r\n                this.parentMolecule.output.lock()\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Restores the ap to it's default value.\r\n     */ \r\n    setDefault(){\r\n        this.setValue(this.defaultValue)\r\n    }\r\n    \r\n    /**\r\n     * Reads and returns the curent value of the ap.\r\n     */ \r\n    getValue(){\r\n        return this.value\r\n    }\r\n    \r\n    /**\r\n     * Sets the current value of the ap.\r\n     */ \r\n    setValue(newValue){\r\n        this.value = newValue\r\n        if(!GlobalVariables.evalLock){\r\n            this.ready = true\r\n        }\r\n        //propagate the change to linked elements if this is an output\r\n        if (this.type == 'output'){\r\n            this.connectors.forEach(connector => {     //select any connectors attached to this node\r\n                connector.propogate()\r\n            })\r\n        }\r\n        //if this is an input\r\n        else{   //update the code block to reflect the new values\r\n            this.parentMolecule.updateValue()\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Computes the curent position and then draws the ap on the screen.\r\n     */ \r\n    update() {\r\n        this.x = this.parentMolecule.x + this.offsetX\r\n        this.y = this.parentMolecule.y + this.offsetY\r\n        this.draw()\r\n       \r\n        this.connectors.forEach(connector => {\r\n            connector.update()       \r\n        })\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/prototypes/attachmentpoint.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 498,
    "kind": "class",
    "name": "AttachmentPoint",
    "memberof": "src/js/prototypes/attachmentpoint.js",
    "static": true,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/prototypes/attachmentpoint.js",
    "importStyle": "AttachmentPoint",
    "description": "This class creates a new attachmentPoint which are the input and output blobs on Atoms",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 499,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 500,
    "kind": "member",
    "name": "defaultRadius",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#defaultRadius",
    "access": "public",
    "description": "This atom's default radius (non hover)",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 501,
    "kind": "member",
    "name": "expandedRadius",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#expandedRadius",
    "access": "public",
    "description": "A flag to indicate if this attachmet point is currently expanded.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 502,
    "kind": "member",
    "name": "radius",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#radius",
    "access": "public",
    "description": "This atom's current radius as displayed.",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 503,
    "kind": "member",
    "name": "hoverDetectRadius",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#hoverDetectRadius",
    "access": "public",
    "description": "How close does the mouse need to get to expand the atom",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 504,
    "kind": "member",
    "name": "hoverOffsetX",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#hoverOffsetX",
    "access": "public",
    "description": "When the mouse is hovering where should the AP move in X",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 505,
    "kind": "member",
    "name": "hoverOffsetY",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#hoverOffsetY",
    "access": "public",
    "description": "When the mouse is hovering where should the AP move in Y",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 506,
    "kind": "member",
    "name": "uniqueID",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#uniqueID",
    "access": "public",
    "description": "A unique identifying number for this attachment point",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 507,
    "kind": "member",
    "name": "defaultOffsetX",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#defaultOffsetX",
    "access": "public",
    "description": "The default offset position in X referenced to the center of the parent atom.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 508,
    "kind": "member",
    "name": "defaultOffsetY",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#defaultOffsetY",
    "access": "public",
    "description": "The default offset position in Y referenced to the center of the parent atom.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 509,
    "kind": "member",
    "name": "offsetX",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#offsetX",
    "access": "public",
    "description": "The current offset position in X referenced to the center of the parent atom.",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 510,
    "kind": "member",
    "name": "offsetY",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#offsetY",
    "access": "public",
    "description": "The current offset position in Y referenced to the center of the parent atom.",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 511,
    "kind": "member",
    "name": "showHoverText",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#showHoverText",
    "access": "public",
    "description": "A flag to determine if the hover text is shown next to the attachment point.",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 512,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#atomType",
    "access": "public",
    "description": "The attachment point type.",
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 513,
    "kind": "member",
    "name": "valueType",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#valueType",
    "access": "public",
    "description": "The attachment point value type. Options are number, geometry, array.",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 514,
    "kind": "member",
    "name": "type",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#type",
    "access": "public",
    "description": "The attachment point type. Options are input, output.",
    "lineNumber": 90,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 515,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#value",
    "access": "public",
    "description": "The attachment point current value. Default is 10.",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 516,
    "kind": "member",
    "name": "ready",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#ready",
    "access": "public",
    "description": "A flag to indicate if the attachment point is currently ready. Used to order initilization when program is loaded.",
    "lineNumber": 100,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 517,
    "kind": "member",
    "name": "connectors",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#connectors",
    "access": "public",
    "description": "A list of all of the connectors attached to this attachmet point",
    "lineNumber": 105,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 520,
    "kind": "member",
    "name": "[key]",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#[key]",
    "access": "public",
    "description": "Assign values in values as this.x",
    "lineNumber": 114,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 521,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#draw",
    "access": "public",
    "description": "Draws the attachment point on the screen. Called with each frame.",
    "lineNumber": 123,
    "params": [],
    "return": null
  },
  {
    "__docId__": 526,
    "kind": "member",
    "name": "x",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#x",
    "access": "public",
    "description": "The x cordinate of the attachment point.",
    "lineNumber": 136,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 527,
    "kind": "member",
    "name": "y",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#y",
    "access": "public",
    "description": "The y cordinate of the attachment point.",
    "lineNumber": 140,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 532,
    "kind": "method",
    "name": "clickDown",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#clickDown",
    "access": "public",
    "description": "Handles mouse click down. If the click is inside the AP it's connectors are selected if it is an input.",
    "lineNumber": 236,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x cordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y cordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "clickProcessed",
        "description": "Has the click already been handled"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 533,
    "kind": "method",
    "name": "clickUp",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#clickUp",
    "access": "public",
    "description": "Handles mouse click up. If the click is inside the AP and a connector is currently extending, then a connection is made",
    "lineNumber": 271,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x cordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y cordinate of the click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 534,
    "kind": "method",
    "name": "clickMove",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#clickMove",
    "access": "public",
    "description": "Handles mouse click and move to expand the AP. Could this be done with a call to expand out?",
    "lineNumber": 282,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x cordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y cordinate of the click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 538,
    "kind": "method",
    "name": "reset",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#reset",
    "access": "public",
    "description": "I'm not sure what this does. Can it be deleted?",
    "lineNumber": 312,
    "params": [],
    "return": null
  },
  {
    "__docId__": 542,
    "kind": "method",
    "name": "expandOut",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#expandOut",
    "access": "public",
    "description": "Handles mouse click down. If the click is inside the AP it's connectors are selected if it is an input.",
    "lineNumber": 324,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "cursorDistance",
        "description": "The distance the cursor is from the attachment point."
      }
    ],
    "return": null
  },
  {
    "__docId__": 550,
    "kind": "method",
    "name": "keyPress",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#keyPress",
    "access": "public",
    "description": "Just passes a key press to the attached connectors. No impact on the connector.",
    "lineNumber": 345,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key which was pressed"
      }
    ],
    "return": null
  },
  {
    "__docId__": 551,
    "kind": "method",
    "name": "deleteSelf",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#deleteSelf",
    "access": "public",
    "description": "Delete any connectors attached to this ap",
    "lineNumber": 354,
    "params": [],
    "return": null
  },
  {
    "__docId__": 552,
    "kind": "method",
    "name": "wasConnectionMade",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#wasConnectionMade",
    "access": "public",
    "description": "Can be called to see if the target cordinates are within this ap. Returns true/false.",
    "lineNumber": 368,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x cordinate of the target"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y cordinate of the target"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 553,
    "kind": "method",
    "name": "attach",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#attach",
    "access": "public",
    "description": "Attaches a new connector to this ap",
    "lineNumber": 388,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "connector",
        "description": "The connector to attach"
      }
    ],
    "return": null
  },
  {
    "__docId__": 554,
    "kind": "method",
    "name": "lock",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#lock",
    "access": "public",
    "description": "Passes a lock command to the parent molecule, or to the attached connector depending on input/output.",
    "lineNumber": 395,
    "params": [],
    "return": null
  },
  {
    "__docId__": 556,
    "kind": "method",
    "name": "setDefault",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#setDefault",
    "access": "public",
    "description": "Restores the ap to it's default value.",
    "lineNumber": 412,
    "params": [],
    "return": null
  },
  {
    "__docId__": 557,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#getValue",
    "access": "public",
    "description": "Reads and returns the curent value of the ap.",
    "lineNumber": 419,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 558,
    "kind": "method",
    "name": "setValue",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#setValue",
    "access": "public",
    "description": "Sets the current value of the ap.",
    "lineNumber": 426,
    "params": [
      {
        "name": "newValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 561,
    "kind": "method",
    "name": "update",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#update",
    "access": "public",
    "description": "Computes the curent position and then draws the ap on the screen.",
    "lineNumber": 446,
    "params": [],
    "return": null
  },
  {
    "__docId__": 564,
    "kind": "file",
    "name": "src/js/prototypes/connector.js",
    "content": "import GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * The connector class defines how an output can be connected to an input. It appears on the screen as a black line extending from an output to an input.\r\n */\r\nexport default class Connector {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        /** \r\n         * True if the connector is currently being created and is in the process of extending\r\n         * @type {boolean}\r\n         */\r\n        this.isMoving = false\r\n        /** \r\n         * The connectors current color\r\n         * @type {string}\r\n         */\r\n        this.color = 'black'\r\n        /** \r\n         * The type of this connector\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Connector'\r\n        /** \r\n         * True if this connector has been selected\r\n         * @type {boolean}\r\n         */\r\n        this.selected = false\r\n        /** \r\n         * The first attachment point this connector is connected to (an ouput)\r\n         * @type {object}\r\n         */\r\n        this.attachmentPoint1 = null\r\n        /** \r\n         * The second attachment point this connector is connected to (an input)\r\n         * @type {object}\r\n         */\r\n        this.attachmentPoint2 = null\r\n        \r\n        for(var key in values) {\r\n            /**\r\n             * Assign each of the values in values as this.value\r\n             */\r\n            this[key] = values[key]\r\n        }\r\n        \r\n        /** \r\n         * The starting X cordinate for the connector. Should really be referenced to attachmentPoint1.\r\n         * @type {number}\r\n         */\r\n        this.startX = this.parentMolecule.outputX\r\n        /** \r\n         * The starting Y cordinate for the connector. Should really be referenced to attachmentPoint1.\r\n         * @type {number}\r\n         */\r\n        this.startY = this.parentMolecule.y\r\n    }\r\n    \r\n    /**\r\n     * Draw the connector as a bezier curve on the screen\r\n     */ \r\n    draw(){\r\n        \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = this.color\r\n        GlobalVariables.c.strokeStyle = this.color\r\n        GlobalVariables.c.globalCompositeOperation = 'destination-over' //draw under other elements;\r\n        if(this.selected){\r\n            GlobalVariables.c.lineWidth = 3\r\n        }\r\n        else{\r\n            GlobalVariables.c.lineWidth = 1\r\n        }\r\n        GlobalVariables.c.moveTo(this.startX, this.startY)\r\n        GlobalVariables.c.bezierCurveTo(this.startX + 100, this.startY, this.endX - 100, this.endY, this.endX, this.endY)\r\n        GlobalVariables.c.stroke()\r\n        GlobalVariables.c.globalCompositeOperation = 'source-over' //switch back to drawing on top\r\n    }\r\n    \r\n    /**\r\n     * clickUp checks to see if the mouse button has been released over an input attachment point. If it has then the connector is created there. If not, then the connector is deleted.\r\n     * @param {number} x - The x cordinate of the click\r\n     * @param {number} y - The y cordinate of the click\r\n     */ \r\n    clickUp(x,y){\r\n        if(this.isMoving){  //we only want to attach the connector which is currently moving\r\n            var attachmentMade = false\r\n            GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {                      //For every molecule on the screen  \r\n                molecule.inputs.forEach(attachmentPoint => {                                    //For each of their attachment points\r\n                    if(attachmentPoint.wasConnectionMade(x,y)){\r\n                        attachmentMade = true\r\n                        this.attachmentPoint2 = attachmentPoint\r\n                        attachmentPoint.attach(this)\r\n                        this.propogate()\r\n                    }\r\n                })\r\n            })\r\n            if (!attachmentMade){\r\n                this.deleteSelf()\r\n            }\r\n            this.isMoving = false\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * clickMove runs while the connector is being created. As long as the mouse is pressed down, the end of the connector stays attached to the mouse.\r\n     * @param {number} x - The x cordinate of the click\r\n     * @param {number} y - The y cordinate of the click\r\n     */ \r\n    clickMove(x,y){\r\n        if (this.isMoving == true){\r\n            /**\r\n             * The s cordinate of the end of the connector.\r\n             */\r\n            this.endX = x\r\n            /**\r\n             * The y cordinate of the end of the connector.\r\n             */\r\n            this.endY = y\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Called when any key is pressed. If the key is delete or backspace and the connector is selected then the connector is deleted.\r\n     * @param {string} key - The key which was pressed\r\n     */ \r\n    keyPress(key){\r\n        if(this.selected){\r\n            if (['Delete', 'Backspace'].includes(key)){\r\n                this.deleteSelf()\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Deletes the connector and calls its attachmentPoints to tell them to delete their references to this connector.\r\n     */ \r\n    deleteSelf(){\r\n        //Free up the input to which this was attached\r\n        if(this.attachmentPoint2 != null){\r\n            this.attachmentPoint2.connectors = []\r\n            this.attachmentPoint2.setDefault()\r\n        }\r\n        \r\n        //Remove this connector from the output it is attached to\r\n        this.attachmentPoint1.connectors.splice(this.attachmentPoint1.connectors.indexOf(this),1) \r\n    }\r\n    \r\n    /**\r\n     * Generates an object used to save the connector.\r\n     */ \r\n    serialize(){\r\n        if ( this.attachmentPoint2 != null){\r\n            var object = {\r\n                ap1Name: this.attachmentPoint1.name,\r\n                ap2Name: this.attachmentPoint2.name,\r\n                ap1ID: this.attachmentPoint1.parentMolecule.uniqueID,\r\n                ap2ID: this.attachmentPoint2.parentMolecule.uniqueID\r\n            }\r\n            return object\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Passes a lock call to the connected input.\r\n     */ \r\n    lock(){\r\n        this.attachmentPoint2.lock()\r\n    }\r\n    \r\n    /**\r\n     * Pass the value of the attached output to the attached input\r\n     */ \r\n    propogate(){\r\n        //takes the input and passes it to the output\r\n        if(this.attachmentPoint1.ready){\r\n            this.attachmentPoint2.setValue(this.attachmentPoint1.getValue())\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Commputes the connectors position and draw it to the screen.\r\n     */ \r\n    update() {\r\n        this.startX = this.attachmentPoint1.x\r\n        this.startY = this.attachmentPoint1.y\r\n        if (this.attachmentPoint2){  //check to see if the attachment point is defined\r\n            this.endX = this.attachmentPoint2.x\r\n            this.endY = this.attachmentPoint2.y\r\n        }\r\n        this.draw()\r\n    }\r\n\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/prototypes/connector.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 565,
    "kind": "class",
    "name": "Connector",
    "memberof": "src/js/prototypes/connector.js",
    "static": true,
    "longname": "src/js/prototypes/connector.js~Connector",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/prototypes/connector.js",
    "importStyle": "Connector",
    "description": "The connector class defines how an output can be connected to an input. It appears on the screen as a black line extending from an output to an input.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 566,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 567,
    "kind": "member",
    "name": "isMoving",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#isMoving",
    "access": "public",
    "description": "True if the connector is currently being created and is in the process of extending",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 568,
    "kind": "member",
    "name": "color",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#color",
    "access": "public",
    "description": "The connectors current color",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 569,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#atomType",
    "access": "public",
    "description": "The type of this connector",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 570,
    "kind": "member",
    "name": "selected",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#selected",
    "access": "public",
    "description": "True if this connector has been selected",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 571,
    "kind": "member",
    "name": "attachmentPoint1",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#attachmentPoint1",
    "access": "public",
    "description": "The first attachment point this connector is connected to (an ouput)",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 572,
    "kind": "member",
    "name": "attachmentPoint2",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#attachmentPoint2",
    "access": "public",
    "description": "The second attachment point this connector is connected to (an input)",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 573,
    "kind": "member",
    "name": "[key]",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#[key]",
    "access": "public",
    "description": "Assign each of the values in values as this.value",
    "lineNumber": 49,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 574,
    "kind": "member",
    "name": "startX",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#startX",
    "access": "public",
    "description": "The starting X cordinate for the connector. Should really be referenced to attachmentPoint1.",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 575,
    "kind": "member",
    "name": "startY",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#startY",
    "access": "public",
    "description": "The starting Y cordinate for the connector. Should really be referenced to attachmentPoint1.",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 576,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#draw",
    "access": "public",
    "description": "Draw the connector as a bezier curve on the screen",
    "lineNumber": 67,
    "params": [],
    "return": null
  },
  {
    "__docId__": 577,
    "kind": "method",
    "name": "clickUp",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#clickUp",
    "access": "public",
    "description": "clickUp checks to see if the mouse button has been released over an input attachment point. If it has then the connector is created there. If not, then the connector is deleted.",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x cordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y cordinate of the click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 580,
    "kind": "method",
    "name": "clickMove",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#clickMove",
    "access": "public",
    "description": "clickMove runs while the connector is being created. As long as the mouse is pressed down, the end of the connector stays attached to the mouse.",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x cordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y cordinate of the click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 581,
    "kind": "member",
    "name": "endX",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#endX",
    "access": "public",
    "description": "The s cordinate of the end of the connector.",
    "lineNumber": 120,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 582,
    "kind": "member",
    "name": "endY",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#endY",
    "access": "public",
    "description": "The y cordinate of the end of the connector.",
    "lineNumber": 124,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 583,
    "kind": "method",
    "name": "keyPress",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#keyPress",
    "access": "public",
    "description": "Called when any key is pressed. If the key is delete or backspace and the connector is selected then the connector is deleted.",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key which was pressed"
      }
    ],
    "return": null
  },
  {
    "__docId__": 584,
    "kind": "method",
    "name": "deleteSelf",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#deleteSelf",
    "access": "public",
    "description": "Deletes the connector and calls its attachmentPoints to tell them to delete their references to this connector.",
    "lineNumber": 143,
    "params": [],
    "return": null
  },
  {
    "__docId__": 585,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#serialize",
    "access": "public",
    "description": "Generates an object used to save the connector.",
    "lineNumber": 157,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 586,
    "kind": "method",
    "name": "lock",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#lock",
    "access": "public",
    "description": "Passes a lock call to the connected input.",
    "lineNumber": 172,
    "params": [],
    "return": null
  },
  {
    "__docId__": 587,
    "kind": "method",
    "name": "propogate",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#propogate",
    "access": "public",
    "description": "Pass the value of the attached output to the attached input",
    "lineNumber": 179,
    "params": [],
    "return": null
  },
  {
    "__docId__": 588,
    "kind": "method",
    "name": "update",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#update",
    "access": "public",
    "description": "Commputes the connectors position and draw it to the screen.",
    "lineNumber": 189,
    "params": [],
    "return": null
  },
  {
    "__docId__": 593,
    "kind": "file",
    "name": "src/utils.js",
    "content": "/**\r\n * Returns a randome integer within a range.\r\n * @param {number} min - The minimum possible value.\r\n * @param {number} max - The maximum possible value.\r\n */ \r\nfunction randomIntFromRange(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n}\r\n\r\n/**\r\n * Selects a random color from an array. Where is this used? Can this be deleted?\r\n * @param {array} colors - An array of possible colors.\r\n */ \r\nfunction randomColor(colors) {\r\n    return colors[Math.floor(Math.random() * colors.length)]\r\n}\r\n\r\n/**\r\n * Compute the distance between two points on a plane.\r\n * @param {number} x1 - The x cordinate of the first point.\r\n * @param {number} y1 - The y cordinate of the first point.\r\n * @param {number} x2 - The x cordinate of the second point.\r\n * @param {number} y2 - The y cordinate of the second point.\r\n */ \r\nfunction distance(x1, y1, x2, y2) {\r\n    const xDist = x2 - x1\r\n    const yDist = y2 - y1\r\n\r\n    return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2))\r\n}\r\n\r\nmodule.exports = { randomIntFromRange, randomColor, distance }\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 594,
    "kind": "function",
    "name": "randomIntFromRange",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~randomIntFromRange",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/utils.js",
    "importStyle": null,
    "description": "Returns a randome integer within a range.",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": "The minimum possible value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "The maximum possible value."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 595,
    "kind": "function",
    "name": "randomColor",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~randomColor",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/utils.js",
    "importStyle": null,
    "description": "Selects a random color from an array. Where is this used? Can this be deleted?",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "colors",
        "description": "An array of possible colors."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 596,
    "kind": "function",
    "name": "distance",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~distance",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/utils.js",
    "importStyle": null,
    "description": "Compute the distance between two points on a plane.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": "The x cordinate of the first point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y1",
        "description": "The y cordinate of the first point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": "The x cordinate of the second point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y2",
        "description": "The y cordinate of the second point."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "kind": "index",
    "content": "# A web based CAD program for cooperative design.\r\n\r\n[![Build Status](https://travis-ci.org/MaslowCNC/Maslow-Create.svg?branch=master)](https://travis-ci.org/MaslowCNC/Maslow-Create)\r\n[![Documentation](https://maslowcreate.org/documentation/badge.svg)](https://maslowcreate.org/documentation/)\r\n[![Coverage Status](https://coveralls.io/repos/github/MaslowCNC/Maslow-Create/badge.svg?branch=master)](https://coveralls.io/github/MaslowCNC/Maslow-Create?branch=master)\r\n\r\n\r\n![overview](https://raw.githubusercontent.com/BarbourSmith/Maslow-Create/master/MaslowCreate.png)\r\n\r\nMaslow create breaks with the tradition of CAD programs which inherit from drawing programs and instead inherits from logical languages like programing. This allows it to be a CAD program which has language like features such as importing modules, version control, and colaboration.\r\n\r\n# Use\r\n\r\nA 3D model within Maslow Create is composed of interconnected nodes called Atoms and Molecules. An atom is an operation you can perform on a shape (ie translate it in space). A molecule can contain any number of atoms in a configuration (ie generate a table leg). Think of Atoms as the built in functions of a programing language and molecules as the functions you create.\r\n\r\nYou can place a new atom by right clicking anywhere within the flow canvas area and entering an atom name in the search bar.\r\n\r\nCurrently Maslow Create supports the folowing atoms:\r\n\r\n### Assembly \r\n\r\nThe assembly atom allows multiple shapes to be combigned into one unit called an assembly. The order in which atoms are combigned matters because where shapes intersect shapes earlier in the order subtract from shapes later in the order. For example if you have a bolt which needs to create a hole in a part you should assemble first the part and then the bolt.\r\n\r\n![assembly](https://raw.githubusercontent.com/BarbourSmith/Maslow-Create/master/images/Assembly.PNG)\r\n\r\n### Add BOM Tag\r\n\r\nThe Add BOM Tag atom tags a part with a bill of materials item. This item will appear in the project bill of materials one time each time the tagged part appears in the final shape. For example if you have a table leg which needs four bolts, and the final model has four table legs the bolt will automatically appear in the final bill of materials 16 times.\r\n\r\n{picture of tag}\r\n{picture of BOM file}\r\n\r\n### Circle\r\n\r\nThe circle atom creates a circle shape. Circle shapes are commonly extruded to create cylinders.\r\n\r\n![circle](https://raw.githubusercontent.com/BarbourSmith/Maslow-Create/master/images/Circle.PNG)\r\n\r\n### Code\r\n\r\nThe code atom allows you to enter arbitrary [jsxcad](https://jsxcad.js.org/) code. Please note that parts of this interface are likely to change in the near future.\r\n\r\n### Constant\r\n\r\nThe constant atom defines a constant number which can be used to control multiple inputs.\r\n\r\n{picture of constant controling multiple inputs}\r\n\r\n### Difference\r\n\r\nThe difference atom subtracts one shape from another.\r\n\r\n![difference](https://raw.githubusercontent.com/BarbourSmith/Maslow-Create/master/images/Difference.PNG)\r\n\r\n### Equation \r\n\r\nThe equation Atom lets you perform basic math operations on numbers produced by constants.\r\n\r\n{Show equation doing something}\r\n\r\n### Extrude \r\n\r\nThe extrude atom takes a 2D shape and makes it 3D.\r\n\r\n![extrude](https://raw.githubusercontent.com/BarbourSmith/Maslow-Create/master/images/Extrude.PNG)\r\n\r\n### Gcode\r\n\r\nThe gcode atom generates gcode to cut the input shape.\r\n\r\n![Gcode1](https://github.com/BarbourSmith/Maslow-Create/blob/master/images/Gcode1.PNG)\r\n![Gcode2](https://github.com/BarbourSmith/Maslow-Create/blob/master/images/Gcode2.PNG)\r\n\r\n### GitHub\r\n\r\nThe GitHub atom type is not directly available. By clicking on the GitHub tab when placing a new Atom you can search for and add any other Maslow Create project to your project.\r\n\r\n### Input\r\n\r\nThe input atom lets you define which variables are inputs to your program. They function similar to constants, however when you share your project, the person on the other end will have the ability to change the values of the inputs. Inputs placed within a molecule will add inputs to that molecule up one level.\r\n\r\n{picture of project being shared}\r\n\r\n### Intersection\r\n\r\nThe intersection atom computes the area of intersection of two shapes and creates a new shape out of that area.\r\n\r\n{picture of intersection}\r\n\r\n### Molecule\r\n\r\nThe molecule atom can contain any number of atoms in a useful configuration. To add inputs to the molecule, place an input atom within it.\r\n\r\n{picture of molecule}\r\n\r\n### Output\r\n\r\nThe output atom cannot be directly placed, however each molecule has one output which cannot be delted. Connect a shape to the output of a molecule to make that shape available one level up. The output of the top level molecule is the output of the project.\r\n\r\n![output](https://raw.githubusercontent.com/BarbourSmith/Maslow-Create/master/images/Output.PNG)\r\n\r\n### README\r\n\r\nThe README atom provides notes to the next person reading the project. The text of the readme input is added to the readme page of the project (similar to this page you are reading now).\r\n\r\n{Show readme atom}\r\n\r\n### Rectangle\r\n\r\nThe rectangle atom creates a rectangle shape. Rectangles are commonly extruded to make a 3D shape.\r\n\r\n{show picture of rectangle}\r\n\r\n### Regular Polygon\r\n\r\nThe regular polygon atom creates a regular polygon shape. Regular polygons are regularly extruded to create a 3D shape.\r\n\r\n![regular polygon](https://raw.githubusercontent.com/BarbourSmith/Maslow-Create/master/images/RegularPolygon.PNG)\r\n\r\n### Rotate\r\n\r\nThe rotate atom rotates a shape along any of it's three axis.\r\n\r\n{picture of rotate}\r\n\r\n### Scale\r\n\r\nThe scale atom scales a shape evenly in all directions.\r\n\r\n{picture of scale}\r\n\r\n### Shrinkwrap\r\n\r\nThe shrinkwrap atom combines multiple shapes into a single shape as if they had been shrinkwrapped. This is useful for creating shapes which would be dificult to create in other ways.\r\n\r\n{picture of shrinkwrap}\r\n\r\n### Stretch\r\n\r\nThe stretch atom stretches a shape along any of its axis.\r\n\r\n{picture of stretch}\r\n\r\n### Tag\r\n\r\nThe tag atom adds a tag to a part which can be later used to retrieve that part from an assembly.\r\n\r\n### Translate\r\n\r\nThe translate atom moves a 3D shape in 3D space or a 2D shape in 2D space.\r\n\r\n{picture of translate}\r\n\r\n### Union\r\n\r\nThe union atom combines multiple shapes into a single shape.\r\n\r\n{picture of union}\r\n\r\n\r\n# Development\r\n\r\nYou can read the complete documentation at [https://maslowcreate.org/documentation/](https://maslowcreate.org/documentation/)\r\n\r\n## How To Setup\r\n\r\n1.  Clone the repo:\r\n\r\n        git clone https://github.com/BarbourSmith/Maslow-Create.git\r\n\r\n2.  Install dependencies:\r\n\r\n        npm install\r\n\r\n3.  Run webpack:\r\n\r\n        npm start\r\n\r\nYour canvas piece should open up automatically at http://localhost:3000 and you should see 'HTML CANVAS BOILERPLATE' on hover.\r\n\r\n## Layout of the program\r\n\r\nMaslow Create has three main areas of the interface. Along the top of the screen is the logical flow of the design. In the lower left is a 3D rendering of the design, and in the lower right is the side bar which displays information related to the currently selected atom. If no atom is selected, then information about the open molecule is displayed.\r\n\r\nThe logical flow of the design is composed of nodes called Atoms which are connected by connectors. Each atom has a number of attachment points where connectors can connect. Each atom type inherits from the atom class which is defined in the file `/dist/js/molecules/prototypes.js`. Each atom type then has it's own file which modifies the behavior of the default atom class.\r\n\r\nThe lower left 3D rendring is an instance of the JSCAD project. It is currently a hacked version of 1.x while waiting for version 2 to be released. Right now the generated code is done through string manipulation. In version 2 we will pass actual JS objects to functions.\r\n\r\nThe lower right corner of the screen is called the \"Side Bar\" It contains information about the currently selected atom. It is populated by that atom's \"Generate Sidebar\" function.\r\n",
    "longname": "C:\\Users\\Bar\\Documents\\GitHub\\Maslow-Create\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"canvas-template\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"webpack.config.js\",\r\n  \"scripts\": {\r\n    \"start\": \"webpack --config webpack.config.js\",\r\n    \"build\": \"webpack --config webpack-build.config.js\",\r\n    \"test\": \"nyc --reporter=html --reporter=text mocha -r jsdom-global/register -r esm\",\r\n    \"lint\": \"eslint --ignore-path .eslintignore .\",\r\n    \"doc\": \"./node_modules/.bin/esdoc\",\r\n    \"coverage\": \"nyc report --reporter=text-lcov | coveralls\"\r\n  },\r\n  \"keywords\": [],\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"dependencies\": {\r\n    \"@octokit/rest\": \"16.25.0\",\r\n    \"codemirror\": \"^5.46.0\",\r\n    \"coveralls\": \"^3.0.4\",\r\n    \"esm\": \"^3.2.22\",\r\n    \"gsap\": \"^2.0.1\",\r\n    \"mathjs\": \"^6.0.4\",\r\n    \"mocha\": \"^6.1.4\",\r\n    \"nyc\": \"^14.1.1\",\r\n    \"oauthio-web\": \"^0.6.2\",\r\n    \"three\": \"^0.104.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/plugin-transform-regenerator\": \"^7.4.3\",\r\n    \"babel-core\": \"^6.26.3\",\r\n    \"babel-loader\": \"^7.1.5\",\r\n    \"babel-polyfill\": \"^6.26.0\",\r\n    \"babel-preset-env\": \"^1.7.0\",\r\n    \"babel-preset-es2015\": \"^6.24.1\",\r\n    \"babel-preset-stage-0\": \"^6.24.1\",\r\n    \"browser-sync\": \"^2.24.4\",\r\n    \"browser-sync-webpack-plugin\": \"^2.2.2\",\r\n    \"chai\": \"^4.2.0\",\r\n    \"copy-webpack-plugin\": \"^5.0.1\",\r\n    \"esdoc\": \"^1.1.0\",\r\n    \"esdoc-standard-plugin\": \"^1.0.0\",\r\n    \"eslint\": \"^5.16.0\",\r\n    \"eslint-config-strongloop\": \"^2.1.0\",\r\n    \"html-webpack-plugin\": \"^3.2.0\",\r\n    \"jsdom\": \"^15.1.1\",\r\n    \"jsdom-global\": \"3.0.2\",\r\n    \"prettier\": \"^1.13.5\",\r\n    \"webpack\": \"^4.12.0\",\r\n    \"webpack-cli\": \"^3.0.7\"\r\n  }\r\n}\r\n",
    "longname": "C:\\Users\\Bar\\Documents\\GitHub\\Maslow-Create\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]